Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uint (number) 8 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_ulong (dword) count (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i1 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Created struct value member variable (byte) printf_slong::format_min_length
Created struct value member variable (byte) printf_slong::format_justify_left
Created struct value member variable (byte) printf_slong::format_sign_always
Created struct value member variable (byte) printf_slong::format_zero_padding
Created struct value member variable (byte) printf_slong::format_upper_case
Created struct value member variable (byte) printf_slong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_slong::format
Created struct value member variable (byte) printf_ulong::format_min_length
Created struct value member variable (byte) printf_ulong::format_justify_left
Created struct value member variable (byte) printf_ulong::format_sign_always
Created struct value member variable (byte) printf_ulong::format_zero_padding
Created struct value member variable (byte) printf_ulong::format_upper_case
Created struct value member variable (byte) printf_ulong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_ulong::format
Created struct value member variable (byte) printf_sint::format_min_length
Created struct value member variable (byte) printf_sint::format_justify_left
Created struct value member variable (byte) printf_sint::format_sign_always
Created struct value member variable (byte) printf_sint::format_zero_padding
Created struct value member variable (byte) printf_sint::format_upper_case
Created struct value member variable (byte) printf_sint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_sint::format
Created struct value member variable (byte) printf_uint::format_min_length
Created struct value member variable (byte) printf_uint::format_justify_left
Created struct value member variable (byte) printf_uint::format_sign_always
Created struct value member variable (byte) printf_uint::format_zero_padding
Created struct value member variable (byte) printf_uint::format_upper_case
Created struct value member variable (byte) printf_uint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uint::format
Created struct value member variable (byte) printf_schar::format_min_length
Created struct value member variable (byte) printf_schar::format_justify_left
Created struct value member variable (byte) printf_schar::format_sign_always
Created struct value member variable (byte) printf_schar::format_zero_padding
Created struct value member variable (byte) printf_schar::format_upper_case
Created struct value member variable (byte) printf_schar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_schar::format
Created struct value member variable (byte) printf_uchar::format_min_length
Created struct value member variable (byte) printf_uchar::format_justify_left
Created struct value member variable (byte) printf_uchar::format_sign_always
Created struct value member variable (byte) printf_uchar::format_zero_padding
Created struct value member variable (byte) printf_uchar::format_upper_case
Created struct value member variable (byte) printf_uchar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uchar::format
Created struct value member variable (byte) printf_number_buffer::buffer_sign
Created struct value member variable (byte*) printf_number_buffer::buffer_digits
Converted struct value to member variables (struct printf_buffer_number) printf_number_buffer::buffer
Created struct value member variable (byte) printf_number_buffer::format_min_length
Created struct value member variable (byte) printf_number_buffer::format_justify_left
Created struct value member variable (byte) printf_number_buffer::format_sign_always
Created struct value member variable (byte) printf_number_buffer::format_zero_padding
Created struct value member variable (byte) printf_number_buffer::format_upper_case
Created struct value member variable (byte) printf_number_buffer::format_radix
Converted struct value to member variables (struct printf_format_number) printf_number_buffer::format
Created struct value member variable (byte) printf_string::format_min_length
Created struct value member variable (byte) printf_string::format_justify_left
Converted struct value to member variables (struct printf_format_string) printf_string::format
Converted procedure struct value parameter to member unwinding (void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_upper_case , (byte) printf_slong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
Converted call struct value parameter to member unwinding (void~) printf_slong::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_slong::format_min_length (byte) printf_slong::format_justify_left (byte) printf_slong::format_sign_always (byte) printf_slong::format_zero_padding (byte) printf_slong::format_upper_case (byte) printf_slong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_ulong::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_ulong::format_min_length (byte) printf_ulong::format_justify_left (byte) printf_ulong::format_sign_always (byte) printf_ulong::format_zero_padding (byte) printf_ulong::format_upper_case (byte) printf_ulong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_sint::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_sint::format_min_length (byte) printf_sint::format_justify_left (byte) printf_sint::format_sign_always (byte) printf_sint::format_zero_padding (byte) printf_sint::format_upper_case (byte) printf_sint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uint::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uint::format_min_length (byte) printf_uint::format_justify_left (byte) printf_uint::format_sign_always (byte) printf_uint::format_zero_padding (byte) printf_uint::format_upper_case (byte) printf_uint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_schar::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_schar::format_min_length (byte) printf_schar::format_justify_left (byte) printf_schar::format_sign_always (byte) printf_schar::format_zero_padding (byte) printf_schar::format_upper_case (byte) printf_schar::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uchar::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uchar::format_min_length (byte) printf_uchar::format_justify_left (byte) printf_uchar::format_sign_always (byte) printf_uchar::format_zero_padding (byte) printf_uchar::format_upper_case (byte) printf_uchar::format_radix 
Converted call struct value parameter to member unwinding call printf_uint (number) 8 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) DECIMAL 
Converted call struct value parameter to member unwinding call printf_ulong (dword) count (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) DECIMAL 
Converted call struct value parameter to member unwinding call printf_uchar (byte) print::i (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) HEXADECIMAL 
Converted call struct value parameter to member unwinding call printf_uchar (byte) print::i1 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) HEXADECIMAL 
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_slong::format.sign_always with member unwinding reference (byte) printf_slong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_slong::format.radix with member unwinding reference (byte) printf_slong::format_radix
Replacing struct member reference (struct printf_format_number) printf_ulong::format.sign_always with member unwinding reference (byte) printf_ulong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_ulong::format.radix with member unwinding reference (byte) printf_ulong::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_sint::format.sign_always with member unwinding reference (byte) printf_sint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_sint::format.radix with member unwinding reference (byte) printf_sint::format_radix
Replacing struct member reference (struct printf_format_number) printf_uint::format.sign_always with member unwinding reference (byte) printf_uint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uint::format.radix with member unwinding reference (byte) printf_uint::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_schar::format.sign_always with member unwinding reference (byte) printf_schar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_schar::format.radix with member unwinding reference (byte) printf_schar::format_radix
Replacing struct member reference (struct printf_format_number) printf_uchar::format.sign_always with member unwinding reference (byte) printf_uchar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uchar::format.radix with member unwinding reference (byte) printf_uchar::format_radix
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.upper_case with member unwinding reference (byte) printf_number_buffer::format_upper_case
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Eliminating unused variable with no statement (void~) main::$1
Eliminating unused variable with no statement (void~) main::$2
Eliminating unused variable with no statement (void~) print::$0
Eliminating unused variable with no statement (void~) print::$2
Eliminating unused variable with no statement (void~) print::$4
Eliminating unused variable with no statement (void~) print::$7
Eliminating unused variable with no statement (void~) print::$8
Converting PHI-variable modified inside __stackcall procedure queen() to load/store (dword) count
Calling convention STACK_CALL adding prepare/execute/finalize for call queen (number) 1 
Calling convention STACK_CALL adding prepare/execute/finalize for call queen (number~) queen::$4 
Calling convention STACK_CALL replacing param((byte) queen::row) with stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
Calling convention STACK_CALL adding stack push stackpush(byte) ← 1
Calling convention STACK_CALL adding stack push stackpush(byte) ← queen::$4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  (word) memcpy::num#1 ← phi( printf_scroll::@1/(word) memcpy::num#0 )
  (void*) memcpy::destination#1 ← phi( printf_scroll::@1/(void*) memcpy::destination#0 )
  (void*) memcpy::source#1 ← phi( printf_scroll::@1/(void*) memcpy::source#0 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#1
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#1
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#1
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#1
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#3 ← phi( memcpy/(void*) memcpy::destination#1 memcpy::@2/(void*) memcpy::destination#4 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#4 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#2 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#3 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#3
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  (byte) memset::c#5 ← phi( printf_cls/(byte) memset::c#0 printf_scroll::@2/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( printf_cls/(void*) memset::str#0 printf_scroll::@2/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( printf_cls/(word) memset::num#0 printf_scroll::@2/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  (byte*) strlen::str#4 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  (byte*) uctoa::buffer#21 ← phi( printf_uchar::@3/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_uchar::@3/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_uchar::@3/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  (byte*) utoa::buffer#21 ← phi( printf_uint::@3/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_uint::@3/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_uint::@3/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@3
  (byte*) ultoa::buffer#21 ← phi( printf_ulong::@3/(byte*) ultoa::buffer#5 )
  (dword) ultoa::value#12 ← phi( printf_ulong::@3/(dword) ultoa::value#1 )
  (byte) ultoa::radix#1 ← phi( printf_ulong::@3/(byte) ultoa::radix#0 )
  (byte) ultoa::max_digits#0 ← (byte) 0
  (dword*) ultoa::digit_values#0 ← (dword*) 0
  (bool~) ultoa::$0 ← (byte) ultoa::radix#1 == (const byte) DECIMAL
  if((bool~) ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  (byte*) ultoa::buffer#17 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (dword) ultoa::value#8 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte) ultoa::max_digits#1 ← (number) $a
  (dword*) ultoa::digit_values#1 ← (const dword*) RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  (dword) ultoa::value#13 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte*) ultoa::buffer#16 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (byte) ultoa::radix#2 ← phi( ultoa/(byte) ultoa::radix#1 )
  (bool~) ultoa::$1 ← (byte) ultoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  (byte*) ultoa::buffer#18 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (dword) ultoa::value#9 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte) ultoa::max_digits#2 ← (number) 8
  (dword*) ultoa::digit_values#2 ← (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  (dword) ultoa::value#14 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte*) ultoa::buffer#13 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (byte) ultoa::radix#3 ← phi( ultoa::@6/(byte) ultoa::radix#2 )
  (bool~) ultoa::$2 ← (byte) ultoa::radix#3 == (const byte) OCTAL
  if((bool~) ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  (byte*) ultoa::buffer#19 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (dword) ultoa::value#10 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte) ultoa::max_digits#3 ← (number) $b
  (dword*) ultoa::digit_values#3 ← (const dword*) RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  (dword) ultoa::value#15 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte*) ultoa::buffer#10 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (byte) ultoa::radix#4 ← phi( ultoa::@7/(byte) ultoa::radix#3 )
  (bool~) ultoa::$3 ← (byte) ultoa::radix#4 == (const byte) BINARY
  if((bool~) ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#20 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  (dword) ultoa::value#11 ← phi( ultoa::@8/(dword) ultoa::value#15 )
  (byte) ultoa::max_digits#4 ← (number) $20
  (dword*) ultoa::digit_values#4 ← (const dword*) RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#6 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  *((byte*) ultoa::buffer#6) ← (byte) 'e'
  (byte*) ultoa::buffer#0 ← ++ (byte*) ultoa::buffer#6
  *((byte*) ultoa::buffer#0) ← (byte) 'r'
  (byte*) ultoa::buffer#1 ← ++ (byte*) ultoa::buffer#0
  *((byte*) ultoa::buffer#1) ← (byte) 'r'
  (byte*) ultoa::buffer#2 ← ++ (byte*) ultoa::buffer#1
  *((byte*) ultoa::buffer#2) ← (number) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  (byte*) ultoa::buffer#15 ← phi( ultoa::@1/(byte*) ultoa::buffer#17 ultoa::@2/(byte*) ultoa::buffer#18 ultoa::@3/(byte*) ultoa::buffer#19 ultoa::@4/(byte*) ultoa::buffer#20 )
  (dword) ultoa::value#7 ← phi( ultoa::@1/(dword) ultoa::value#8 ultoa::@2/(dword) ultoa::value#9 ultoa::@3/(dword) ultoa::value#10 ultoa::@4/(dword) ultoa::value#11 )
  (dword*) ultoa::digit_values#8 ← phi( ultoa::@1/(dword*) ultoa::digit_values#1 ultoa::@2/(dword*) ultoa::digit_values#2 ultoa::@3/(dword*) ultoa::digit_values#3 ultoa::@4/(dword*) ultoa::digit_values#4 )
  (byte) ultoa::max_digits#7 ← phi( ultoa::@1/(byte) ultoa::max_digits#1 ultoa::@2/(byte) ultoa::max_digits#2 ultoa::@3/(byte) ultoa::max_digits#3 ultoa::@4/(byte) ultoa::max_digits#4 )
  (byte) ultoa::started#0 ← (byte) 0
  (byte) ultoa::digit#0 ← (byte) 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  (byte*) ultoa::buffer#11 ← phi( ultoa::@13/(byte*) ultoa::buffer#14 ultoa::@5/(byte*) ultoa::buffer#15 )
  (byte) ultoa::started#3 ← phi( ultoa::@13/(byte) ultoa::started#4 ultoa::@5/(byte) ultoa::started#0 )
  (dword) ultoa::value#5 ← phi( ultoa::@13/(dword) ultoa::value#6 ultoa::@5/(dword) ultoa::value#7 )
  (dword*) ultoa::digit_values#6 ← phi( ultoa::@13/(dword*) ultoa::digit_values#7 ultoa::@5/(dword*) ultoa::digit_values#8 )
  (byte) ultoa::digit#2 ← phi( ultoa::@13/(byte) ultoa::digit#1 ultoa::@5/(byte) ultoa::digit#0 )
  (byte) ultoa::max_digits#5 ← phi( ultoa::@13/(byte) ultoa::max_digits#6 ultoa::@5/(byte) ultoa::max_digits#7 )
  (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
  (bool~) ultoa::$5 ← (byte) ultoa::digit#2 < (number~) ultoa::$4
  if((bool~) ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  (byte) ultoa::max_digits#8 ← phi( ultoa::@10/(byte) ultoa::max_digits#5 )
  (byte*) ultoa::buffer#12 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (byte) ultoa::started#2 ← phi( ultoa::@10/(byte) ultoa::started#3 )
  (dword) ultoa::value#2 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (dword*) ultoa::digit_values#5 ← phi( ultoa::@10/(dword*) ultoa::digit_values#6 )
  (byte) ultoa::digit#3 ← phi( ultoa::@10/(byte) ultoa::digit#2 )
  (byte~) ultoa::$10 ← (byte) ultoa::digit#3 * (const byte) SIZEOF_DWORD
  (dword) ultoa::digit_value#0 ← *((dword*) ultoa::digit_values#5 + (byte~) ultoa::$10)
  (bool~) ultoa::$6 ← (dword) ultoa::value#2 >= (dword) ultoa::digit_value#0
  (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
  (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
  if((bool~) ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  (byte*) ultoa::buffer#7 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (dword) ultoa::value#3 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  *((byte*) ultoa::buffer#7) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#7
  *((byte*) ultoa::buffer#3) ← (number) 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  (byte*) ultoa::buffer#14 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 ultoa::@15/(byte*) ultoa::buffer#4 )
  (byte) ultoa::started#4 ← phi( ultoa::@11/(byte) ultoa::started#2 ultoa::@15/(byte) ultoa::started#1 )
  (dword) ultoa::value#6 ← phi( ultoa::@11/(dword) ultoa::value#2 ultoa::@15/(dword) ultoa::value#0 )
  (dword*) ultoa::digit_values#7 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 ultoa::@15/(dword*) ultoa::digit_values#9 )
  (byte) ultoa::max_digits#6 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 ultoa::@15/(byte) ultoa::max_digits#9 )
  (byte) ultoa::digit#4 ← phi( ultoa::@11/(byte) ultoa::digit#3 ultoa::@15/(byte) ultoa::digit#5 )
  (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  (dword*) ultoa::digit_values#10 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 )
  (byte) ultoa::max_digits#10 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 )
  (byte) ultoa::digit#6 ← phi( ultoa::@11/(byte) ultoa::digit#3 )
  (dword) ultoa::digit_value#1 ← phi( ultoa::@11/(dword) ultoa::digit_value#0 )
  (dword) ultoa::value#4 ← phi( ultoa::@11/(dword) ultoa::value#2 )
  (byte*) ultoa::buffer#8 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 )
  (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#8
  (dword) ultoa_append::value#0 ← (dword) ultoa::value#4
  (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#1
  call ultoa_append 
  (dword) ultoa_append::return#0 ← (dword) ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  (dword*) ultoa::digit_values#9 ← phi( ultoa::@14/(dword*) ultoa::digit_values#10 )
  (byte) ultoa::max_digits#9 ← phi( ultoa::@14/(byte) ultoa::max_digits#10 )
  (byte) ultoa::digit#5 ← phi( ultoa::@14/(byte) ultoa::digit#6 )
  (byte*) ultoa::buffer#9 ← phi( ultoa::@14/(byte*) ultoa::buffer#8 )
  (dword) ultoa_append::return#3 ← phi( ultoa::@14/(dword) ultoa_append::return#0 )
  (dword~) ultoa::$9 ← (dword) ultoa_append::return#3
  (dword) ultoa::value#0 ← (dword~) ultoa::$9
  (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#9
  (byte) ultoa::started#1 ← (number) 1
  to:ultoa::@13

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  (byte*) ultoa_append::buffer#3 ← phi( ultoa::@14/(byte*) ultoa_append::buffer#0 )
  (dword) ultoa_append::sub#3 ← phi( ultoa::@14/(dword) ultoa_append::sub#0 )
  (dword) ultoa_append::value#5 ← phi( ultoa::@14/(dword) ultoa_append::value#0 )
  (byte) ultoa_append::digit#0 ← (byte) 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  (byte*) ultoa_append::buffer#2 ← phi( ultoa_append/(byte*) ultoa_append::buffer#3 ultoa_append::@2/(byte*) ultoa_append::buffer#4 )
  (byte) ultoa_append::digit#4 ← phi( ultoa_append/(byte) ultoa_append::digit#0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  (dword) ultoa_append::sub#1 ← phi( ultoa_append/(dword) ultoa_append::sub#3 ultoa_append::@2/(dword) ultoa_append::sub#2 )
  (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#5 ultoa_append::@2/(dword) ultoa_append::value#1 )
  (bool~) ultoa_append::$0 ← (dword) ultoa_append::value#2 >= (dword) ultoa_append::sub#1
  if((bool~) ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  (byte*) ultoa_append::buffer#4 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (dword) ultoa_append::sub#2 ← phi( ultoa_append::@1/(dword) ultoa_append::sub#1 )
  (dword) ultoa_append::value#3 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte) ultoa_append::digit#2 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#3 - (dword) ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  (dword) ultoa_append::value#4 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte*) ultoa_append::buffer#1 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (byte) ultoa_append::digit#3 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  *((byte*) ultoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#3)
  (dword) ultoa_append::return#1 ← (dword) ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  (dword) ultoa_append::return#4 ← phi( ultoa_append::@3/(dword) ultoa_append::return#1 )
  (dword) ultoa_append::return#2 ← (dword) ultoa_append::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) printf_cursor_x ← (byte) 0
  (byte) printf_cursor_y ← (byte) 0
  (byte*) printf_cursor_ptr ← (byte*)(number) $400
  to:@2

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  (void*) memset::str#0 ← (void*)(number) $400
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  (byte*) printf_cursor_ptr ← ((byte*)) (number) $400
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← (number) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  return 
  to:@return

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
  (bool~) printf_char::$1 ← ! (bool~) printf_char::$0
  if((bool~) printf_char::$1) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  call printf_scroll 
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char::@1
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@2
  return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  call printf_scroll 
  to:printf_ln::@1
printf_ln::@1: scope:[printf_ln]  from printf_ln
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln::@1
  return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (number) $19
  (bool~) printf_scroll::$1 ← ! (bool~) printf_scroll::$0
  if((bool~) printf_scroll::$1) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  (void*) memcpy::destination#0 ← (void*)(number) $400
  (void*) memcpy::source#0 ← (void*)(number) $400+(number) $28
  (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  (void*) memset::str#1 ← (void*)(number) $400+(number) $28*(number) $19-(number) $28
  (byte) memset::c#1 ← (byte) ' '
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 )
  (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#4 ← phi( printf_padding/(byte) printf_padding::pad#5 printf_padding::@3/(byte) printf_padding::pad#6 )
  (byte) printf_padding::length#3 ← phi( printf_padding/(byte) printf_padding::length#4 printf_padding::@3/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#3
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#6 ← phi( printf_padding::@1/(byte) printf_padding::length#3 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#3 ← phi( printf_padding::@1/(byte) printf_padding::pad#4 )
  (byte) printf_char::ch#0 ← (byte) printf_padding::pad#3
  call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#6 ← phi( printf_padding::@2/(byte) printf_padding::pad#3 )
  (byte) printf_padding::length#5 ← phi( printf_padding::@2/(byte) printf_padding::length#6 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@1 main::@2 print print::@11 print::@13 print::@5 print::@9 printf_number_buffer::@5
  (byte*) printf_str::str#11 ← phi( main::@1/(byte*) printf_str::str#2 main::@2/(byte*) printf_str::str#3 print/(byte*) printf_str::str#4 print::@11/(byte*) printf_str::str#8 print::@13/(byte*) printf_str::str#5 print::@5/(byte*) printf_str::str#6 print::@9/(byte*) printf_str::str#7 printf_number_buffer::@5/(byte*) printf_str::str#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@6 printf_str::@7
  (byte*) printf_str::str#10 ← phi( printf_str/(byte*) printf_str::str#11 printf_str::@6/(byte*) printf_str::str#12 printf_str::@7/(byte*) printf_str::str#13 )
  if(true) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  (byte*) printf_str::str#9 ← phi( printf_str::@1/(byte*) printf_str::str#10 )
  (byte) printf_str::ch#0 ← *((byte*) printf_str::str#9)
  (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#9
  (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
  (bool~) printf_str::$1 ← ! (bool~) printf_str::$0
  if((bool~) printf_str::$1) goto printf_str::@3
  to:printf_str::@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  (byte*) printf_str::str#16 ← phi( printf_str::@2/(byte*) printf_str::str#0 )
  (byte) printf_str::ch#1 ← phi( printf_str::@2/(byte) printf_str::ch#0 )
  (bool~) printf_str::$2 ← (byte) printf_str::ch#1 == (byte) '
'
  if((bool~) printf_str::$2) goto printf_str::@4
  to:printf_str::@5
printf_str::@4: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#14 ← phi( printf_str::@3/(byte*) printf_str::str#16 )
  call printf_ln 
  to:printf_str::@6
printf_str::@6: scope:[printf_str]  from printf_str::@4
  (byte*) printf_str::str#12 ← phi( printf_str::@4/(byte*) printf_str::str#14 )
  to:printf_str::@1
printf_str::@5: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#15 ← phi( printf_str::@3/(byte*) printf_str::str#16 )
  (byte) printf_str::ch#2 ← phi( printf_str::@3/(byte) printf_str::ch#1 )
  (byte) printf_char::ch#1 ← (byte) printf_str::ch#2
  call printf_char 
  to:printf_str::@7
printf_str::@7: scope:[printf_str]  from printf_str::@5
  (byte*) printf_str::str#13 ← phi( printf_str::@5/(byte*) printf_str::str#15 )
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1 printf_str::@2
  return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from print::@12
  (byte) printf_ulong::format_upper_case#5 ← phi( print::@12/(byte) printf_ulong::format_upper_case#0 )
  (byte) printf_ulong::format_zero_padding#5 ← phi( print::@12/(byte) printf_ulong::format_zero_padding#0 )
  (byte) printf_ulong::format_justify_left#5 ← phi( print::@12/(byte) printf_ulong::format_justify_left#0 )
  (byte) printf_ulong::format_min_length#5 ← phi( print::@12/(byte) printf_ulong::format_min_length#0 )
  (byte) printf_ulong::format_radix#5 ← phi( print::@12/(byte) printf_ulong::format_radix#0 )
  (dword) printf_ulong::uvalue#4 ← phi( print::@12/(dword) printf_ulong::uvalue#0 )
  (byte) printf_ulong::format_sign_always#1 ← phi( print::@12/(byte) printf_ulong::format_sign_always#0 )
  (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#1
  if((bool~) printf_ulong::$5) goto printf_ulong::@1
  to:printf_ulong::@2
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#1 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#3 ← phi( printf_ulong/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong/(dword) printf_ulong::uvalue#4 )
  (byte~) printf_ulong::$1 ← (byte) '+'
  to:printf_ulong::@3
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#4 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#4 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#5 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#1 )
  (byte) printf_ulong::format_justify_left#4 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#4 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#4 ← phi( printf_ulong/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#3 ← phi( printf_ulong/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$0 ← (number) 0
  to:printf_ulong::@3
printf_ulong::@3: scope:[printf_ulong]  from printf_ulong::@1 printf_ulong::@2
  (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_ulong::$2
  (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#1
  (byte*) ultoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) ultoa::radix#0 ← (byte) printf_ulong::format_radix#1
  call ultoa 
  to:printf_ulong::@4
printf_ulong::@4: scope:[printf_ulong]  from printf_ulong::@3
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_radix#1 )
  (byte) printf_ulong::format_upper_case#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_upper_case#2 )
  (byte) printf_ulong::format_zero_padding#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_zero_padding#2 )
  (byte) printf_ulong::format_sign_always#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_sign_always#3 )
  (byte) printf_ulong::format_justify_left#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_justify_left#2 )
  (byte) printf_ulong::format_min_length#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_ulong::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_ulong::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_ulong::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_ulong::format_upper_case#1
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#2
  call printf_number_buffer 
  to:printf_ulong::@5
printf_ulong::@5: scope:[printf_ulong]  from printf_ulong::@4
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@5
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  (byte) printf_uint::format_upper_case#5 ← phi( main::@3/(byte) printf_uint::format_upper_case#0 )
  (byte) printf_uint::format_zero_padding#5 ← phi( main::@3/(byte) printf_uint::format_zero_padding#0 )
  (byte) printf_uint::format_justify_left#5 ← phi( main::@3/(byte) printf_uint::format_justify_left#0 )
  (byte) printf_uint::format_min_length#5 ← phi( main::@3/(byte) printf_uint::format_min_length#0 )
  (byte) printf_uint::format_radix#5 ← phi( main::@3/(byte) printf_uint::format_radix#0 )
  (word) printf_uint::uvalue#4 ← phi( main::@3/(word) printf_uint::uvalue#0 )
  (byte) printf_uint::format_sign_always#1 ← phi( main::@3/(byte) printf_uint::format_sign_always#0 )
  (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
  if((bool~) printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#3 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#3 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#4 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#3 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#3 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#3 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#2 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (byte~) printf_uint::$1 ← (byte) '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#4 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#4 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#5 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#4 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#4 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#4 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#3 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (number~) printf_uint::$0 ← (number) 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uint::$2
  (word) utoa::value#1 ← (word) printf_uint::uvalue#1
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  (byte) printf_uint::format_radix#2 ← phi( printf_uint::@3/(byte) printf_uint::format_radix#1 )
  (byte) printf_uint::format_upper_case#1 ← phi( printf_uint::@3/(byte) printf_uint::format_upper_case#2 )
  (byte) printf_uint::format_zero_padding#1 ← phi( printf_uint::@3/(byte) printf_uint::format_zero_padding#2 )
  (byte) printf_uint::format_sign_always#2 ← phi( printf_uint::@3/(byte) printf_uint::format_sign_always#3 )
  (byte) printf_uint::format_justify_left#1 ← phi( printf_uint::@3/(byte) printf_uint::format_justify_left#2 )
  (byte) printf_uint::format_min_length#1 ← phi( printf_uint::@3/(byte) printf_uint::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#1 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#1 ← (byte) printf_uint::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#1 ← (byte) printf_uint::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_uint::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_uint::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#1 ← (byte) printf_uint::format_upper_case#1
  (byte) printf_number_buffer::format_radix#1 ← (byte) printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@16 print::@2
  (byte) printf_uchar::format_upper_case#6 ← phi( print::@16/(byte) printf_uchar::format_upper_case#1 print::@2/(byte) printf_uchar::format_upper_case#0 )
  (byte) printf_uchar::format_zero_padding#6 ← phi( print::@16/(byte) printf_uchar::format_zero_padding#1 print::@2/(byte) printf_uchar::format_zero_padding#0 )
  (byte) printf_uchar::format_justify_left#6 ← phi( print::@16/(byte) printf_uchar::format_justify_left#1 print::@2/(byte) printf_uchar::format_justify_left#0 )
  (byte) printf_uchar::format_min_length#6 ← phi( print::@16/(byte) printf_uchar::format_min_length#1 print::@2/(byte) printf_uchar::format_min_length#0 )
  (byte) printf_uchar::format_radix#6 ← phi( print::@16/(byte) printf_uchar::format_radix#1 print::@2/(byte) printf_uchar::format_radix#0 )
  (byte) printf_uchar::uvalue#5 ← phi( print::@16/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  (byte) printf_uchar::format_sign_always#2 ← phi( print::@16/(byte) printf_uchar::format_sign_always#1 print::@2/(byte) printf_uchar::format_sign_always#0 )
  (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
  if((bool~) printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#4 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#4 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#5 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#4 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#4 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#4 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#3 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (byte~) printf_uchar::$1 ← (byte) '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#5 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#5 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#6 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#5 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#5 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#5 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#4 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (number~) printf_uchar::$0 ← (number) 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uchar::$2
  (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_uchar::format_radix#2
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  (byte) printf_uchar::format_radix#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_radix#2 )
  (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_upper_case#3 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_zero_padding#3 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_sign_always#4 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_justify_left#3 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#2 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#2 ← (byte) printf_uchar::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#2 ← (byte) printf_uchar::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#2 ← (byte) printf_uchar::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#2 ← (byte) printf_uchar::format_upper_case#2
  (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#3
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4 printf_uint::@4 printf_ulong::@4
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_upper_case#2 printf_uint::@4/(byte) printf_number_buffer::format_upper_case#1 printf_ulong::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_uchar::@4/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@4/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_uchar::@4/(byte*) printf_number_buffer::buffer_digits#2 printf_uint::@4/(byte*) printf_number_buffer::buffer_digits#1 printf_ulong::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_zero_padding#2 printf_uint::@4/(byte) printf_number_buffer::format_zero_padding#1 printf_ulong::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_justify_left#2 printf_uint::@4/(byte) printf_number_buffer::format_justify_left#1 printf_ulong::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_min_length#2 printf_uint::@4/(byte) printf_number_buffer::format_min_length#1 printf_ulong::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#11 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#7 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 )
  (byte) printf_number_buffer::format_min_length#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#3
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#20 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#3 )
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#18 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#18 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#7 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#6 )
  (word) strlen::return#4 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#4
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#21 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#17 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#13 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#10 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#6 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#4
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#21 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 )
  (byte) printf_number_buffer::format_upper_case#17 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::buffer_sign#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 )
  (byte) printf_number_buffer::format_min_length#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#10 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#14 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#8 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#22 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 )
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte) printf_number_buffer::buffer_sign#12 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#22 )
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#15 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#12 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#17 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#11 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#6 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#9 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#4 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#21 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#4 )
  (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#5
  call printf_char 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#21 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#11 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#15 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#14 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#20 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#22 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#19 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#22 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#8 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#11 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#16 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#4
  call printf_str 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#8 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#11 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#4 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#21 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#5
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#16 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#21 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#5 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return
@2: scope:[]  from @1
  (dword) count ← (dword) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) printf_str::str#2 ← (const byte*) main::str
  call printf_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) printf_str::str#3 ← (const byte*) main::str1
  call printf_str 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (word) printf_uint::uvalue#0 ← (number) 8
  (byte) printf_uint::format_min_length#0 ← (byte) 0
  (byte) printf_uint::format_justify_left#0 ← (byte) 0
  (byte) printf_uint::format_sign_always#0 ← (byte) 0
  (byte) printf_uint::format_zero_padding#0 ← (byte) 0
  (byte) printf_uint::format_upper_case#0 ← (byte) 0
  (byte) printf_uint::format_radix#0 ← (const byte) DECIMAL
  call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  stackpush(byte) ← (number) 1
  callexecute queen 
  sideeffect stackpullbytes((number) 1)
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  (byte) queen::r ← (byte) queen::row#0
  (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  (bool~) queen::$0 ← (byte) queen::column <= (number) 8
  if((bool~) queen::$0) goto queen::@2
  to:queen::@return
queen::@2: scope:[queen]  from queen::@1
  (byte) legal::row#0 ← (byte) queen::r
  (byte) legal::column#0 ← (byte) queen::column
  call legal 
  (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  (byte) legal::return#5 ← phi( queen::@2/(byte) legal::return#0 )
  (byte~) queen::$1 ← (byte) legal::return#5
  (bool~) queen::$7 ← (number) 0 != (byte~) queen::$1
  (bool~) queen::$2 ← ! (bool~) queen::$7
  if((bool~) queen::$2) goto queen::@3
  to:queen::@5
queen::@3: scope:[queen]  from queen::@6 queen::@7 queen::@8
  (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@5: scope:[queen]  from queen::@7
  *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  (bool~) queen::$3 ← (byte) queen::r == (number) 8
  if((bool~) queen::$3) goto queen::@4
  to:queen::@6
queen::@4: scope:[queen]  from queen::@5
  call print 
  to:queen::@8
queen::@8: scope:[queen]  from queen::@4
  to:queen::@3
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  (number~) queen::$4 ← (byte) queen::r + (number) 1
  stackpush(byte) ← (number~) queen::$4
  callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@return: scope:[queen]  from queen::@1
  return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  (byte) legal::column#4 ← phi( queen::@2/(byte) legal::column#0 )
  (byte) legal::row#3 ← phi( queen::@2/(byte) legal::row#0 )
  (byte) legal::i#0 ← (byte) 1
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@5
  (byte) legal::column#3 ← phi( legal/(byte) legal::column#4 legal::@5/(byte) legal::column#5 )
  (byte) legal::i#2 ← phi( legal/(byte) legal::i#0 legal::@5/(byte) legal::i#1 )
  (byte) legal::row#1 ← phi( legal/(byte) legal::row#3 legal::@5/(byte) legal::row#4 )
  (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
  (bool~) legal::$1 ← (byte) legal::i#2 <= (number~) legal::$0
  if((bool~) legal::$1) goto legal::@2
  to:legal::@3
legal::@2: scope:[legal]  from legal::@1
  (byte) legal::row#6 ← phi( legal::@1/(byte) legal::row#1 )
  (byte) legal::column#1 ← phi( legal::@1/(byte) legal::column#3 )
  (byte) legal::i#3 ← phi( legal::@1/(byte) legal::i#2 )
  (bool~) legal::$2 ← *((const byte*) board + (byte) legal::i#3) == (byte) legal::column#1
  if((bool~) legal::$2) goto legal::@4
  to:legal::@6
legal::@3: scope:[legal]  from legal::@1
  (byte) legal::return#1 ← (number) 1
  to:legal::@return
legal::@4: scope:[legal]  from legal::@2
  (byte) legal::return#2 ← (number) 0
  to:legal::@return
legal::@6: scope:[legal]  from legal::@2
  (byte) legal::row#5 ← phi( legal::@2/(byte) legal::row#6 )
  (byte) legal::column#2 ← phi( legal::@2/(byte) legal::column#1 )
  (byte) legal::i#4 ← phi( legal::@2/(byte) legal::i#3 )
  (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#4)
  (byte) diff::b#0 ← (byte) legal::column#2
  call diff 
  (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@8
legal::@8: scope:[legal]  from legal::@6
  (byte) legal::column#7 ← phi( legal::@6/(byte) legal::column#2 )
  (byte) legal::row#2 ← phi( legal::@6/(byte) legal::row#5 )
  (byte) legal::i#5 ← phi( legal::@6/(byte) legal::i#4 )
  (byte) diff::return#5 ← phi( legal::@6/(byte) diff::return#0 )
  (byte~) legal::$3 ← (byte) diff::return#5
  (byte) diff::a#1 ← (byte) legal::i#5
  (byte) diff::b#1 ← (byte) legal::row#2
  call diff 
  (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@9
legal::@9: scope:[legal]  from legal::@8
  (byte) legal::column#6 ← phi( legal::@8/(byte) legal::column#7 )
  (byte) legal::row#7 ← phi( legal::@8/(byte) legal::row#2 )
  (byte) legal::i#7 ← phi( legal::@8/(byte) legal::i#5 )
  (byte) diff::return#6 ← phi( legal::@8/(byte) diff::return#1 )
  (byte~) legal::$4 ← (byte) diff::return#6
  (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
  (bool~) legal::$6 ← ! (bool~) legal::$5
  if((bool~) legal::$6) goto legal::@5
  to:legal::@7
legal::@7: scope:[legal]  from legal::@9
  (byte) legal::return#3 ← (number) 0
  to:legal::@return
legal::@return: scope:[legal]  from legal::@3 legal::@4 legal::@7
  (byte) legal::return#6 ← phi( legal::@3/(byte) legal::return#1 legal::@4/(byte) legal::return#2 legal::@7/(byte) legal::return#3 )
  (byte) legal::return#4 ← (byte) legal::return#6
  return 
  to:@return
legal::@5: scope:[legal]  from legal::@9
  (byte) legal::column#5 ← phi( legal::@9/(byte) legal::column#6 )
  (byte) legal::row#4 ← phi( legal::@9/(byte) legal::row#7 )
  (byte) legal::i#6 ← phi( legal::@9/(byte) legal::i#7 )
  (byte) legal::i#1 ← ++ (byte) legal::i#6
  to:legal::@1

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@6 legal::@8
  (byte) diff::b#2 ← phi( legal::@6/(byte) diff::b#0 legal::@8/(byte) diff::b#1 )
  (byte) diff::a#2 ← phi( legal::@6/(byte) diff::a#0 legal::@8/(byte) diff::a#1 )
  (bool~) diff::$0 ← (byte) diff::a#2 < (byte) diff::b#2
  if((bool~) diff::$0) goto diff::@1
  to:diff::@2
diff::@1: scope:[diff]  from diff
  (byte) diff::a#3 ← phi( diff/(byte) diff::a#2 )
  (byte) diff::b#3 ← phi( diff/(byte) diff::b#2 )
  (byte~) diff::$2 ← (byte) diff::b#3 - (byte) diff::a#3
  (byte) diff::return#2 ← (byte~) diff::$2
  to:diff::@return
diff::@2: scope:[diff]  from diff
  (byte) diff::b#4 ← phi( diff/(byte) diff::b#2 )
  (byte) diff::a#4 ← phi( diff/(byte) diff::a#2 )
  (byte~) diff::$1 ← (byte) diff::a#4 - (byte) diff::b#4
  (byte) diff::return#3 ← (byte~) diff::$1
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  (byte) diff::return#7 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  (byte) diff::return#4 ← (byte) diff::return#7
  return 
  to:@return

(void()) print()
print: scope:[print]  from queen::@4
  (dword) count ← ++ (dword) count
  (byte*) printf_str::str#4 ← (const byte*) print::str
  call printf_str 
  to:print::@12
print::@12: scope:[print]  from print
  (dword) printf_ulong::uvalue#0 ← (dword) count
  (byte) printf_ulong::format_min_length#0 ← (byte) 0
  (byte) printf_ulong::format_justify_left#0 ← (byte) 0
  (byte) printf_ulong::format_sign_always#0 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#0 ← (byte) 0
  (byte) printf_ulong::format_upper_case#0 ← (byte) 0
  (byte) printf_ulong::format_radix#0 ← (const byte) DECIMAL
  call printf_ulong 
  to:print::@13
print::@13: scope:[print]  from print::@12
  (byte*) printf_str::str#5 ← (const byte*) print::str1
  call printf_str 
  to:print::@14
print::@14: scope:[print]  from print::@13
  (byte) print::i#0 ← (byte) 1
  to:print::@1
print::@1: scope:[print]  from print::@14 print::@15
  (byte) print::i#2 ← phi( print::@14/(byte) print::i#0 print::@15/(byte) print::i#1 )
  (bool~) print::$1 ← (byte) print::i#2 <= (number) 8
  if((bool~) print::$1) goto print::@2
  to:print::@3
print::@2: scope:[print]  from print::@1
  (byte) print::i#3 ← phi( print::@1/(byte) print::i#2 )
  (byte) printf_uchar::uvalue#0 ← (byte) print::i#3
  (byte) printf_uchar::format_min_length#0 ← (byte) 0
  (byte) printf_uchar::format_justify_left#0 ← (byte) 0
  (byte) printf_uchar::format_sign_always#0 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#0 ← (byte) 0
  (byte) printf_uchar::format_upper_case#0 ← (byte) 0
  (byte) printf_uchar::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@15
print::@15: scope:[print]  from print::@2
  (byte) print::i#4 ← phi( print::@2/(byte) print::i#3 )
  (byte) print::i#1 ← ++ (byte) print::i#4
  to:print::@1
print::@3: scope:[print]  from print::@1
  (byte) print::i1#0 ← (byte) 1
  to:print::@4
print::@4: scope:[print]  from print::@3 print::@8
  (byte) print::i1#2 ← phi( print::@3/(byte) print::i1#0 print::@8/(byte) print::i1#1 )
  (bool~) print::$3 ← (byte) print::i1#2 <= (number) 8
  if((bool~) print::$3) goto print::@5
  to:print::@return
print::@5: scope:[print]  from print::@4
  (byte) print::i1#6 ← phi( print::@4/(byte) print::i1#2 )
  (byte*) printf_str::str#6 ← (const byte*) print::str2
  call printf_str 
  to:print::@16
print::@16: scope:[print]  from print::@5
  (byte) print::i1#3 ← phi( print::@5/(byte) print::i1#6 )
  (byte) printf_uchar::uvalue#1 ← (byte) print::i1#3
  (byte) printf_uchar::format_min_length#1 ← (byte) 0
  (byte) printf_uchar::format_justify_left#1 ← (byte) 0
  (byte) printf_uchar::format_sign_always#1 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#1 ← (byte) 0
  (byte) printf_uchar::format_upper_case#1 ← (byte) 0
  (byte) printf_uchar::format_radix#1 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@17
print::@17: scope:[print]  from print::@16
  (byte) print::i1#9 ← phi( print::@16/(byte) print::i1#3 )
  (byte) print::j#0 ← (byte) 1
  to:print::@6
print::@6: scope:[print]  from print::@10 print::@17
  (byte) print::i1#7 ← phi( print::@10/(byte) print::i1#8 print::@17/(byte) print::i1#9 )
  (byte) print::j#2 ← phi( print::@10/(byte) print::j#1 print::@17/(byte) print::j#0 )
  (bool~) print::$5 ← (byte) print::j#2 <= (number) 8
  if((bool~) print::$5) goto print::@7
  to:print::@8
print::@7: scope:[print]  from print::@6
  (byte) print::j#3 ← phi( print::@6/(byte) print::j#2 )
  (byte) print::i1#4 ← phi( print::@6/(byte) print::i1#7 )
  (bool~) print::$6 ← *((const byte*) board + (byte) print::i1#4) == (byte) print::j#3
  if((bool~) print::$6) goto print::@9
  to:print::@11
print::@8: scope:[print]  from print::@6
  (byte) print::i1#5 ← phi( print::@6/(byte) print::i1#7 )
  (byte) print::i1#1 ← ++ (byte) print::i1#5
  to:print::@4
print::@9: scope:[print]  from print::@7
  (byte) print::i1#12 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#7 ← phi( print::@7/(byte) print::j#3 )
  (byte*) printf_str::str#7 ← (const byte*) print::str3
  call printf_str 
  to:print::@18
print::@18: scope:[print]  from print::@9
  (byte) print::i1#10 ← phi( print::@9/(byte) print::i1#12 )
  (byte) print::j#5 ← phi( print::@9/(byte) print::j#7 )
  to:print::@10
print::@11: scope:[print]  from print::@7
  (byte) print::i1#13 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#8 ← phi( print::@7/(byte) print::j#3 )
  (byte*) printf_str::str#8 ← (const byte*) print::str4
  call printf_str 
  to:print::@19
print::@19: scope:[print]  from print::@11
  (byte) print::i1#11 ← phi( print::@11/(byte) print::i1#13 )
  (byte) print::j#6 ← phi( print::@11/(byte) print::j#8 )
  to:print::@10
print::@10: scope:[print]  from print::@18 print::@19
  (byte) print::i1#8 ← phi( print::@18/(byte) print::i1#10 print::@19/(byte) print::i1#11 )
  (byte) print::j#4 ← phi( print::@18/(byte) print::j#5 print::@19/(byte) print::j#6 )
  (byte) print::j#1 ← ++ (byte) print::j#4
  to:print::@6
print::@return: scope:[print]  from print::@4
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const dword*) RADIX_BINARY_VALUES_LONG[]  = { (dword) $80000000, (dword) $40000000, (dword) $20000000, (dword) $10000000, (dword) $8000000, (dword) $4000000, (dword) $2000000, (dword) $1000000, (dword) $800000, (dword) $400000, (dword) $200000, (dword) $100000, (dword) $80000, (dword) $40000, (dword) $20000, (dword) $10000, (dword) $8000, (dword) $4000, (dword) $2000, (dword) $1000, (dword) $800, (dword) $400, (dword) $200, (dword) $100, (dword) $80, (dword) $40, (dword) $20, (dword) $10, (dword) 8, (dword) 4, (dword) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const dword*) RADIX_HEXADECIMAL_VALUES_LONG[]  = { (dword) $10000000, (dword) $1000000, (dword) $100000, (dword) $10000, (dword) $1000, (dword) $100, (dword) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const dword*) RADIX_OCTAL_VALUES_LONG[]  = { (dword) $40000000, (dword) $8000000, (dword) $1000000, (dword) $200000, (dword) $40000, (dword) $8000, (dword) $1000, (dword) $200, (dword) $40, (dword) 8 }
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_WORD = (byte) 2
(const word) STACK_BASE = (word) $103
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(dword) count loadstore
(byte()) diff((byte) diff::a , (byte) diff::b)
(bool~) diff::$0
(byte~) diff::$1
(byte~) diff::$2
(label) diff::@1
(label) diff::@2
(label) diff::@return
(byte) diff::a
(byte) diff::a#0
(byte) diff::a#1
(byte) diff::a#2
(byte) diff::a#3
(byte) diff::a#4
(byte) diff::b
(byte) diff::b#0
(byte) diff::b#1
(byte) diff::b#2
(byte) diff::b#3
(byte) diff::b#4
(byte) diff::return
(byte) diff::return#0
(byte) diff::return#1
(byte) diff::return#2
(byte) diff::return#3
(byte) diff::return#4
(byte) diff::return#5
(byte) diff::return#6
(byte) diff::return#7
(byte()) legal((byte) legal::row , (byte) legal::column)
(number~) legal::$0
(bool~) legal::$1
(bool~) legal::$2
(byte~) legal::$3
(byte~) legal::$4
(bool~) legal::$5
(bool~) legal::$6
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@6
(label) legal::@7
(label) legal::@8
(label) legal::@9
(label) legal::@return
(byte) legal::column
(byte) legal::column#0
(byte) legal::column#1
(byte) legal::column#2
(byte) legal::column#3
(byte) legal::column#4
(byte) legal::column#5
(byte) legal::column#6
(byte) legal::column#7
(byte) legal::i
(byte) legal::i#0
(byte) legal::i#1
(byte) legal::i#2
(byte) legal::i#3
(byte) legal::i#4
(byte) legal::i#5
(byte) legal::i#6
(byte) legal::i#7
(byte) legal::return
(byte) legal::return#0
(byte) legal::return#1
(byte) legal::return#2
(byte) legal::return#3
(byte) legal::return#4
(byte) legal::return#5
(byte) legal::return#6
(byte) legal::row
(byte) legal::row#0
(byte) legal::row#1
(byte) legal::row#2
(byte) legal::row#3
(byte) legal::row#4
(byte) legal::row#5
(byte) legal::row#6
(byte) legal::row#7
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(const byte*) main::str[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::str1[(byte) $13]  = (byte*) "
Number of queens:"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(void()) print()
(bool~) print::$1
(bool~) print::$3
(bool~) print::$5
(bool~) print::$6
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@15
(label) print::@16
(label) print::@17
(label) print::@18
(label) print::@19
(label) print::@2
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#0
(byte) print::i#1
(byte) print::i#2
(byte) print::i#3
(byte) print::i#4
(byte) print::i1
(byte) print::i1#0
(byte) print::i1#1
(byte) print::i1#10
(byte) print::i1#11
(byte) print::i1#12
(byte) print::i1#13
(byte) print::i1#2
(byte) print::i1#3
(byte) print::i1#4
(byte) print::i1#5
(byte) print::i1#6
(byte) print::i1#7
(byte) print::i1#8
(byte) print::i1#9
(byte) print::j
(byte) print::j#0
(byte) print::j#1
(byte) print::j#2
(byte) print::j#3
(byte) print::j#4
(byte) print::j#5
(byte) print::j#6
(byte) print::j#7
(byte) print::j#8
(const byte*) print::str[(byte) 3]  = (byte*) "
#"
(const byte*) print::str1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::str2[(byte) 2]  = (byte*) "
"
(const byte*) print::str3[(byte) 2]  = (byte*) "Q"
(const byte*) print::str4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(bool~) printf_char::$0
(bool~) printf_char::$1
(label) printf_char::@1
(label) printf_char::@2
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0
(byte) printf_char::ch#1
(byte) printf_char::ch#2
(byte) printf_char::ch#3
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore
(byte) printf_cursor_x loadstore
(byte) printf_cursor_y loadstore
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0
(byte*~) printf_ln::$1
(label) printf_ln::@1
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#20
(byte*) printf_number_buffer::buffer_digits#21
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#12
(byte) printf_number_buffer::buffer_sign#13
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#21
(byte) printf_number_buffer::format_justify_left#22
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_min_length#6
(byte) printf_number_buffer::format_min_length#7
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_radix#1
(byte) printf_number_buffer::format_radix#2
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_sign_always#1
(byte) printf_number_buffer::format_sign_always#2
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#17
(byte) printf_number_buffer::format_upper_case#18
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#21
(byte) printf_number_buffer::format_zero_padding#22
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(void()) printf_scroll()
(bool~) printf_scroll::$0
(bool~) printf_scroll::$1
(byte*~) printf_scroll::$4
(label) printf_scroll::@1
(label) printf_scroll::@2
(label) printf_scroll::@3
(label) printf_scroll::@return
(void()) printf_str((byte*) printf_str::str)
(bool~) printf_str::$0
(bool~) printf_str::$1
(bool~) printf_str::$2
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@6
(label) printf_str::@7
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0
(byte) printf_str::ch#1
(byte) printf_str::ch#2
(byte*) printf_str::str
(byte*) printf_str::str#0
(byte*) printf_str::str#1
(byte*) printf_str::str#10
(byte*) printf_str::str#11
(byte*) printf_str::str#12
(byte*) printf_str::str#13
(byte*) printf_str::str#14
(byte*) printf_str::str#15
(byte*) printf_str::str#16
(byte*) printf_str::str#2
(byte*) printf_str::str#3
(byte*) printf_str::str#4
(byte*) printf_str::str#5
(byte*) printf_str::str#6
(byte*) printf_str::str#7
(byte*) printf_str::str#8
(byte*) printf_str::str#9
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(number~) printf_uchar::$0
(byte~) printf_uchar::$1
(number~) printf_uchar::$2
(bool~) printf_uchar::$5
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@3
(label) printf_uchar::@4
(label) printf_uchar::@5
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_justify_left#0
(byte) printf_uchar::format_justify_left#1
(byte) printf_uchar::format_justify_left#2
(byte) printf_uchar::format_justify_left#3
(byte) printf_uchar::format_justify_left#4
(byte) printf_uchar::format_justify_left#5
(byte) printf_uchar::format_justify_left#6
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_min_length#0
(byte) printf_uchar::format_min_length#1
(byte) printf_uchar::format_min_length#2
(byte) printf_uchar::format_min_length#3
(byte) printf_uchar::format_min_length#4
(byte) printf_uchar::format_min_length#5
(byte) printf_uchar::format_min_length#6
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_radix#0
(byte) printf_uchar::format_radix#1
(byte) printf_uchar::format_radix#2
(byte) printf_uchar::format_radix#3
(byte) printf_uchar::format_radix#4
(byte) printf_uchar::format_radix#5
(byte) printf_uchar::format_radix#6
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_sign_always#0
(byte) printf_uchar::format_sign_always#1
(byte) printf_uchar::format_sign_always#2
(byte) printf_uchar::format_sign_always#3
(byte) printf_uchar::format_sign_always#4
(byte) printf_uchar::format_sign_always#5
(byte) printf_uchar::format_sign_always#6
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_upper_case#0
(byte) printf_uchar::format_upper_case#1
(byte) printf_uchar::format_upper_case#2
(byte) printf_uchar::format_upper_case#3
(byte) printf_uchar::format_upper_case#4
(byte) printf_uchar::format_upper_case#5
(byte) printf_uchar::format_upper_case#6
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::format_zero_padding#0
(byte) printf_uchar::format_zero_padding#1
(byte) printf_uchar::format_zero_padding#2
(byte) printf_uchar::format_zero_padding#3
(byte) printf_uchar::format_zero_padding#4
(byte) printf_uchar::format_zero_padding#5
(byte) printf_uchar::format_zero_padding#6
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0
(byte) printf_uchar::uvalue#1
(byte) printf_uchar::uvalue#2
(byte) printf_uchar::uvalue#3
(byte) printf_uchar::uvalue#4
(byte) printf_uchar::uvalue#5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(number~) printf_uint::$0
(byte~) printf_uint::$1
(number~) printf_uint::$2
(bool~) printf_uint::$5
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@3
(label) printf_uint::@4
(label) printf_uint::@5
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_justify_left#1
(byte) printf_uint::format_justify_left#2
(byte) printf_uint::format_justify_left#3
(byte) printf_uint::format_justify_left#4
(byte) printf_uint::format_justify_left#5
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_min_length#1
(byte) printf_uint::format_min_length#2
(byte) printf_uint::format_min_length#3
(byte) printf_uint::format_min_length#4
(byte) printf_uint::format_min_length#5
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_radix#1
(byte) printf_uint::format_radix#2
(byte) printf_uint::format_radix#3
(byte) printf_uint::format_radix#4
(byte) printf_uint::format_radix#5
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_sign_always#1
(byte) printf_uint::format_sign_always#2
(byte) printf_uint::format_sign_always#3
(byte) printf_uint::format_sign_always#4
(byte) printf_uint::format_sign_always#5
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_upper_case#1
(byte) printf_uint::format_upper_case#2
(byte) printf_uint::format_upper_case#3
(byte) printf_uint::format_upper_case#4
(byte) printf_uint::format_upper_case#5
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(byte) printf_uint::format_zero_padding#1
(byte) printf_uint::format_zero_padding#2
(byte) printf_uint::format_zero_padding#3
(byte) printf_uint::format_zero_padding#4
(byte) printf_uint::format_zero_padding#5
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(word) printf_uint::uvalue#2
(word) printf_uint::uvalue#3
(word) printf_uint::uvalue#4
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(number~) printf_ulong::$0
(byte~) printf_ulong::$1
(number~) printf_ulong::$2
(bool~) printf_ulong::$5
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@3
(label) printf_ulong::@4
(label) printf_ulong::@5
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_justify_left#0
(byte) printf_ulong::format_justify_left#1
(byte) printf_ulong::format_justify_left#2
(byte) printf_ulong::format_justify_left#3
(byte) printf_ulong::format_justify_left#4
(byte) printf_ulong::format_justify_left#5
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_min_length#0
(byte) printf_ulong::format_min_length#1
(byte) printf_ulong::format_min_length#2
(byte) printf_ulong::format_min_length#3
(byte) printf_ulong::format_min_length#4
(byte) printf_ulong::format_min_length#5
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_radix#0
(byte) printf_ulong::format_radix#1
(byte) printf_ulong::format_radix#2
(byte) printf_ulong::format_radix#3
(byte) printf_ulong::format_radix#4
(byte) printf_ulong::format_radix#5
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_sign_always#0
(byte) printf_ulong::format_sign_always#1
(byte) printf_ulong::format_sign_always#2
(byte) printf_ulong::format_sign_always#3
(byte) printf_ulong::format_sign_always#4
(byte) printf_ulong::format_sign_always#5
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_upper_case#0
(byte) printf_ulong::format_upper_case#1
(byte) printf_ulong::format_upper_case#2
(byte) printf_ulong::format_upper_case#3
(byte) printf_ulong::format_upper_case#4
(byte) printf_ulong::format_upper_case#5
(byte) printf_ulong::format_zero_padding
(byte) printf_ulong::format_zero_padding#0
(byte) printf_ulong::format_zero_padding#1
(byte) printf_ulong::format_zero_padding#2
(byte) printf_ulong::format_zero_padding#3
(byte) printf_ulong::format_zero_padding#4
(byte) printf_ulong::format_zero_padding#5
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0
(dword) printf_ulong::uvalue#1
(dword) printf_ulong::uvalue#2
(dword) printf_ulong::uvalue#3
(dword) printf_ulong::uvalue#4
__stackcall (void()) queen((byte) queen::row)
(bool~) queen::$0
(byte~) queen::$1
(bool~) queen::$2
(bool~) queen::$3
(number~) queen::$4
(bool~) queen::$7
(label) queen::@1
(label) queen::@2
(label) queen::@3
(label) queen::@4
(label) queen::@5
(label) queen::@6
(label) queen::@7
(label) queen::@8
(label) queen::@return
(const byte) queen::OFFSET_STACK_ROW = (byte) 0
(byte) queen::column loadstore
(byte) queen::r loadstore
(byte) queen::row
(byte) queen::row#0
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(bool~) ultoa::$0
(bool~) ultoa::$1
(byte~) ultoa::$10
(byte~) ultoa::$11
(bool~) ultoa::$2
(bool~) ultoa::$3
(number~) ultoa::$4
(bool~) ultoa::$5
(bool~) ultoa::$6
(bool~) ultoa::$7
(bool~) ultoa::$8
(dword~) ultoa::$9
(label) ultoa::@1
(label) ultoa::@10
(label) ultoa::@11
(label) ultoa::@12
(label) ultoa::@13
(label) ultoa::@14
(label) ultoa::@15
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@8
(label) ultoa::@9
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#0
(byte*) ultoa::buffer#1
(byte*) ultoa::buffer#10
(byte*) ultoa::buffer#11
(byte*) ultoa::buffer#12
(byte*) ultoa::buffer#13
(byte*) ultoa::buffer#14
(byte*) ultoa::buffer#15
(byte*) ultoa::buffer#16
(byte*) ultoa::buffer#17
(byte*) ultoa::buffer#18
(byte*) ultoa::buffer#19
(byte*) ultoa::buffer#2
(byte*) ultoa::buffer#20
(byte*) ultoa::buffer#21
(byte*) ultoa::buffer#3
(byte*) ultoa::buffer#4
(byte*) ultoa::buffer#5
(byte*) ultoa::buffer#6
(byte*) ultoa::buffer#7
(byte*) ultoa::buffer#8
(byte*) ultoa::buffer#9
(byte) ultoa::digit
(byte) ultoa::digit#0
(byte) ultoa::digit#1
(byte) ultoa::digit#2
(byte) ultoa::digit#3
(byte) ultoa::digit#4
(byte) ultoa::digit#5
(byte) ultoa::digit#6
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0
(dword) ultoa::digit_value#1
(dword*) ultoa::digit_values
(dword*) ultoa::digit_values#0
(dword*) ultoa::digit_values#1
(dword*) ultoa::digit_values#10
(dword*) ultoa::digit_values#2
(dword*) ultoa::digit_values#3
(dword*) ultoa::digit_values#4
(dword*) ultoa::digit_values#5
(dword*) ultoa::digit_values#6
(dword*) ultoa::digit_values#7
(dword*) ultoa::digit_values#8
(dword*) ultoa::digit_values#9
(byte) ultoa::max_digits
(byte) ultoa::max_digits#0
(byte) ultoa::max_digits#1
(byte) ultoa::max_digits#10
(byte) ultoa::max_digits#2
(byte) ultoa::max_digits#3
(byte) ultoa::max_digits#4
(byte) ultoa::max_digits#5
(byte) ultoa::max_digits#6
(byte) ultoa::max_digits#7
(byte) ultoa::max_digits#8
(byte) ultoa::max_digits#9
(byte) ultoa::radix
(byte) ultoa::radix#0
(byte) ultoa::radix#1
(byte) ultoa::radix#2
(byte) ultoa::radix#3
(byte) ultoa::radix#4
(byte) ultoa::started
(byte) ultoa::started#0
(byte) ultoa::started#1
(byte) ultoa::started#2
(byte) ultoa::started#3
(byte) ultoa::started#4
(dword) ultoa::value
(dword) ultoa::value#0
(dword) ultoa::value#1
(dword) ultoa::value#10
(dword) ultoa::value#11
(dword) ultoa::value#12
(dword) ultoa::value#13
(dword) ultoa::value#14
(dword) ultoa::value#15
(dword) ultoa::value#2
(dword) ultoa::value#3
(dword) ultoa::value#4
(dword) ultoa::value#5
(dword) ultoa::value#6
(dword) ultoa::value#7
(dword) ultoa::value#8
(dword) ultoa::value#9
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(bool~) ultoa_append::$0
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0
(byte*) ultoa_append::buffer#1
(byte*) ultoa_append::buffer#2
(byte*) ultoa_append::buffer#3
(byte*) ultoa_append::buffer#4
(byte) ultoa_append::digit
(byte) ultoa_append::digit#0
(byte) ultoa_append::digit#1
(byte) ultoa_append::digit#2
(byte) ultoa_append::digit#3
(byte) ultoa_append::digit#4
(dword) ultoa_append::return
(dword) ultoa_append::return#0
(dword) ultoa_append::return#1
(dword) ultoa_append::return#2
(dword) ultoa_append::return#3
(dword) ultoa_append::return#4
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0
(dword) ultoa_append::sub#1
(dword) ultoa_append::sub#2
(dword) ultoa_append::sub#3
(dword) ultoa_append::value
(dword) ultoa_append::value#0
(dword) ultoa_append::value#1
(dword) ultoa_append::value#2
(dword) ultoa_append::value#3
(dword) ultoa_append::value#4
(dword) ultoa_append::value#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $a in (byte) ultoa::max_digits#1 ← (number) $a
Adding number conversion cast (unumber) 8 in (byte) ultoa::max_digits#2 ← (number) 8
Adding number conversion cast (unumber) $b in (byte) ultoa::max_digits#3 ← (number) $b
Adding number conversion cast (unumber) $20 in (byte) ultoa::max_digits#4 ← (number) $20
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) ultoa::$4 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) ultoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#0 ← (number) $28*(number) $19
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (number) $19
Adding number conversion cast (unumber) $28*$19-$28 in (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (number) $28
Adding number conversion cast (unumber) 0 in (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#1
Adding number conversion cast (unumber) printf_ulong::$2 in (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) printf_ulong::$0 in (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (unumber~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (unumber~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
Adding number conversion cast (unumber) printf_uchar::$2 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (unumber~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
Adding number conversion cast (unumber) 8 in (word) printf_uint::uvalue#0 ← (number) 8
Adding number conversion cast (unumber) 1 in stackpush(byte) ← (number) 1
Adding number conversion cast (unumber) 8 in (bool~) queen::$0 ← (byte) queen::column <= (number) 8
Adding number conversion cast (unumber) 0 in (bool~) queen::$7 ← (number) 0 != (byte~) queen::$1
Adding number conversion cast (unumber) 8 in (bool~) queen::$3 ← (byte) queen::r == (number) 8
Adding number conversion cast (unumber) 1 in (number~) queen::$4 ← (byte) queen::r + (number) 1
Adding number conversion cast (unumber) queen::$4 in (number~) queen::$4 ← (byte) queen::r + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
Adding number conversion cast (unumber) legal::$0 in (number~) legal::$0 ← (byte) legal::row#1 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) legal::return#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) legal::return#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) legal::return#3 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) print::$1 ← (byte) print::i#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$3 ← (byte) print::i1#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$5 ← (byte) print::j#2 <= (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_ulong::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uint::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uchar::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#1
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#1
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) ultoa::max_digits#1 ← (unumber)(number) $a
Inlining cast (byte) ultoa::max_digits#2 ← (unumber)(number) 8
Inlining cast (byte) ultoa::max_digits#3 ← (unumber)(number) $b
Inlining cast (byte) ultoa::max_digits#4 ← (unumber)(number) $20
Inlining cast *((byte*) ultoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) ultoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) ultoa::started#1 ← (unumber)(number) 1
Inlining cast (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Inlining cast (byte*) printf_cursor_ptr ← (byte*)(number) $400
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_y ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (unumber~) printf_ulong::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uint::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uchar::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (word) printf_uint::uvalue#0 ← (unumber)(number) 8
Inlining cast stackpush(byte) ← (unumber)(number) 1
Inlining cast (byte) legal::return#1 ← (unumber)(number) 1
Inlining cast (byte) legal::return#2 ← (unumber)(number) 0
Inlining cast (byte) legal::return#3 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (void*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant pointer cast (void*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) printf_ulong::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_ulong::$2
Inferred type updated to byte in (unumber~) printf_uint::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uint::$2
Inferred type updated to byte in (unumber~) printf_uchar::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uchar::$2
Inferred type updated to byte in (unumber~) queen::$4 ← (byte) queen::r + (byte) 1
Inferred type updated to byte in (unumber~) legal::$0 ← (byte) legal::row#1 - (byte) 1
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [341] (bool~) printf_char::$1 ← (byte) printf_cursor_x != (byte) $28 from [340] (bool~) printf_char::$0 ← (byte) printf_cursor_x == (byte) $28
Inversing boolean not [355] (bool~) printf_scroll::$1 ← (byte) printf_cursor_y != (byte) $19 from [354] (bool~) printf_scroll::$0 ← (byte) printf_cursor_y == (byte) $19
Inversing boolean not [389] (bool~) printf_str::$1 ← (byte) printf_str::ch#0 != (byte) 0 from [388] (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (byte) 0
Inversing boolean not [477] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#3 from [476] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#3
Inversing boolean not [481] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#3 from [480] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#3
Inversing boolean not [483] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [482] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Inversing boolean not [496] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#3 from [495] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#3
Inversing boolean not [503] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [502] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [511] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#4 from [510] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#4
Inversing boolean not [528] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#3 from [527] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#3
Inversing boolean not [540] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#5 from [539] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#5
Inversing boolean not [585] (bool~) queen::$2 ← (byte) 0 == (byte~) queen::$1 from [584] (bool~) queen::$7 ← (byte) 0 != (byte~) queen::$1
Inversing boolean not [624] (bool~) legal::$6 ← (byte~) legal::$3 != (byte~) legal::$4 from [623] (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#0 = ultoa::$9 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_str::str#10 = printf_str::str#9 
Alias printf_str::ch#0 = printf_str::ch#1 printf_str::ch#2 
Alias printf_str::str#0 = printf_str::str#16 printf_str::str#14 printf_str::str#12 printf_str::str#15 printf_str::str#13 
Alias printf_ulong::uvalue#2 = printf_ulong::uvalue#4 printf_ulong::uvalue#3 
Alias printf_ulong::format_radix#3 = printf_ulong::format_radix#5 printf_ulong::format_radix#4 
Alias printf_ulong::format_min_length#3 = printf_ulong::format_min_length#5 printf_ulong::format_min_length#4 
Alias printf_ulong::format_justify_left#3 = printf_ulong::format_justify_left#5 printf_ulong::format_justify_left#4 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#4 printf_ulong::format_sign_always#5 
Alias printf_ulong::format_zero_padding#3 = printf_ulong::format_zero_padding#5 printf_ulong::format_zero_padding#4 
Alias printf_ulong::format_upper_case#3 = printf_ulong::format_upper_case#5 printf_ulong::format_upper_case#4 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#2 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#2 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#3 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#2 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#2 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_uchar::uvalue#3 = printf_uchar::uvalue#5 printf_uchar::uvalue#4 
Alias printf_uchar::format_radix#4 = printf_uchar::format_radix#6 printf_uchar::format_radix#5 
Alias printf_uchar::format_min_length#4 = printf_uchar::format_min_length#6 printf_uchar::format_min_length#5 
Alias printf_uchar::format_justify_left#4 = printf_uchar::format_justify_left#6 printf_uchar::format_justify_left#5 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#5 printf_uchar::format_sign_always#6 
Alias printf_uchar::format_zero_padding#4 = printf_uchar::format_zero_padding#6 printf_uchar::format_zero_padding#5 
Alias printf_uchar::format_upper_case#4 = printf_uchar::format_upper_case#6 printf_uchar::format_upper_case#5 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#3 = printf_uchar::format_sign_always#4 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#3 
Alias printf_number_buffer::buffer_digits#20 = printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#21 
Alias printf_number_buffer::buffer_sign#13 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#9 printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#7 printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#6 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#5 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#6 printf_number_buffer::format_zero_padding#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#18 printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#17 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#6 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::format_zero_padding#7 = printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#14 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#18 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#14 = printf_number_buffer::buffer_digits#19 printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::format_justify_left#20 = printf_number_buffer::format_justify_left#22 printf_number_buffer::format_justify_left#3 
Alias printf_number_buffer::buffer_sign#4 = printf_number_buffer::buffer_sign#5 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#15 printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#6 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#16 printf_number_buffer::buffer_digits#12 
Alias printf_number_buffer::format_justify_left#17 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_zero_padding#20 = printf_number_buffer::format_zero_padding#22 printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#14 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#15 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#5 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#16 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#17 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias legal::return#0 = legal::return#5 
Alias legal::i#2 = legal::i#3 legal::i#4 legal::i#5 legal::i#7 legal::i#6 
Alias legal::column#1 = legal::column#3 legal::column#2 legal::column#7 legal::column#6 legal::column#5 
Alias legal::row#1 = legal::row#6 legal::row#5 legal::row#2 legal::row#7 legal::row#4 
Alias diff::return#0 = diff::return#5 
Alias diff::return#1 = diff::return#6 
Alias legal::return#4 = legal::return#6 
Alias diff::b#2 = diff::b#3 diff::b#4 
Alias diff::a#2 = diff::a#3 diff::a#4 
Alias diff::return#2 = diff::$2 
Alias diff::return#3 = diff::$1 
Alias diff::return#4 = diff::return#7 
Alias print::i#2 = print::i#3 print::i#4 
Alias print::i1#2 = print::i1#6 print::i1#3 print::i1#9 
Alias print::i1#10 = print::i1#4 print::i1#7 print::i1#5 print::i1#12 print::i1#13 print::i1#11 
Alias print::j#2 = print::j#3 print::j#7 print::j#5 print::j#8 print::j#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias printf_ulong::uvalue#1 = printf_ulong::uvalue#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#3 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#3 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#3 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#2 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#3 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#3 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#4 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#4 
Alias print::j#2 = print::j#4 
Alias print::i1#10 = print::i1#8 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#17 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (void*) memcpy::source#1 (void*) memcpy::source#0
Identical Phi Values (void*) memcpy::destination#1 (void*) memcpy::destination#0
Identical Phi Values (word) memcpy::num#1 (word) memcpy::num#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#2 (void*) memcpy::destination#1
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte) ultoa::radix#1 (byte) ultoa::radix#0
Identical Phi Values (dword) ultoa::value#10 (dword) ultoa::value#1
Identical Phi Values (byte*) ultoa::buffer#10 (byte*) ultoa::buffer#5
Identical Phi Values (byte) ultoa::max_digits#10 (byte) ultoa::max_digits#7
Identical Phi Values (dword*) ultoa::digit_values#10 (dword*) ultoa::digit_values#8
Identical Phi Values (dword) ultoa_append::value#5 (dword) ultoa_append::value#0
Identical Phi Values (dword) ultoa_append::sub#3 (dword) ultoa_append::sub#0
Identical Phi Values (byte*) ultoa_append::buffer#3 (byte*) ultoa_append::buffer#0
Identical Phi Values (dword) ultoa_append::sub#1 (dword) ultoa_append::sub#3
Identical Phi Values (byte*) ultoa_append::buffer#1 (byte*) ultoa_append::buffer#3
Identical Phi Values (byte) printf_padding::length#3 (byte) printf_padding::length#4
Identical Phi Values (byte) printf_padding::pad#3 (byte) printf_padding::pad#5
Identical Phi Values (byte) printf_ulong::format_sign_always#1 (byte) printf_ulong::format_sign_always#0
Identical Phi Values (dword) printf_ulong::uvalue#1 (dword) printf_ulong::uvalue#0
Identical Phi Values (byte) printf_ulong::format_radix#1 (byte) printf_ulong::format_radix#0
Identical Phi Values (byte) printf_ulong::format_min_length#1 (byte) printf_ulong::format_min_length#0
Identical Phi Values (byte) printf_ulong::format_justify_left#1 (byte) printf_ulong::format_justify_left#0
Identical Phi Values (byte) printf_ulong::format_zero_padding#1 (byte) printf_ulong::format_zero_padding#0
Identical Phi Values (byte) printf_ulong::format_upper_case#1 (byte) printf_ulong::format_upper_case#0
Identical Phi Values (byte) printf_uint::format_sign_always#1 (byte) printf_uint::format_sign_always#0
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte) printf_uint::format_radix#1 (byte) printf_uint::format_radix#0
Identical Phi Values (byte) printf_uint::format_min_length#1 (byte) printf_uint::format_min_length#0
Identical Phi Values (byte) printf_uint::format_justify_left#1 (byte) printf_uint::format_justify_left#0
Identical Phi Values (byte) printf_uint::format_zero_padding#1 (byte) printf_uint::format_zero_padding#0
Identical Phi Values (byte) printf_uint::format_upper_case#1 (byte) printf_uint::format_upper_case#0
Identical Phi Values (byte) legal::row#3 (byte) legal::row#0
Identical Phi Values (byte) legal::column#4 (byte) legal::column#0
Identical Phi Values (byte) legal::row#1 (byte) legal::row#3
Identical Phi Values (byte) legal::column#1 (byte) legal::column#4
Identical Phi Values (byte) print::i1#10 (byte) print::i1#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [56] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [60] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [64] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [68] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [85] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [108] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) utoa::$0 [117] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [121] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [125] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [129] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [146] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [171] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) ultoa::$0 [180] if((byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
Simple Condition (bool~) ultoa::$1 [184] if((byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
Simple Condition (bool~) ultoa::$2 [188] if((byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
Simple Condition (bool~) ultoa::$3 [192] if((byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
Simple Condition (bool~) ultoa::$5 [209] if((byte) ultoa::digit#2<(byte~) ultoa::$4) goto ultoa::@11
Simple Condition (bool~) ultoa_append::$0 [234] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition (bool~) printf_char::$1 [256] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
Simple Condition (bool~) printf_scroll::$1 [269] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
Simple Condition (bool~) printf_padding::$0 [288] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
Simple Condition (bool~) printf_str::$1 [299] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
Simple Condition (bool~) printf_str::$2 [301] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
Simple Condition (bool~) printf_ulong::$5 [308] if((byte) 0!=(byte) printf_ulong::format_sign_always#0) goto printf_ulong::@1
Simple Condition (bool~) printf_uint::$5 [329] if((byte) 0!=(byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition (bool~) printf_uchar::$5 [350] if((byte) 0!=(byte) printf_uchar::format_sign_always#2) goto printf_uchar::@1
Simple Condition (bool~) printf_number_buffer::$0 [372] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [386] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [391] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [395] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [405] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Simple Condition (bool~) queen::$0 [445] if((byte) queen::column<=(byte) 8) goto queen::@2
Simple Condition (bool~) queen::$2 [452] if((byte) 0==(byte~) queen::$1) goto queen::@3
Simple Condition (bool~) queen::$3 [456] if((byte) queen::r==(byte) 8) goto queen::@4
Simple Condition (bool~) legal::$1 [470] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
Simple Condition (bool~) legal::$2 [472] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@4
Simple Condition (bool~) legal::$6 [486] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@5
Simple Condition (bool~) diff::$0 [493] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
Simple Condition (bool~) print::$1 [514] if((byte) print::i#2<=(byte) 8) goto print::@2
Simple Condition (bool~) print::$3 [527] if((byte) print::i1#2<=(byte) 8) goto print::@5
Simple Condition (bool~) print::$5 [541] if((byte) print::j#2<=(byte) 8) goto print::@7
Simple Condition (bool~) print::$6 [543] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [89] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [88] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [151] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [150] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [214] (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
Rewriting || if()-condition to two if()s [213] (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
Rewriting ! if()-condition to reversed if() [378] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [377] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [376] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [400] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [399] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#10 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [414] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [413] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [412] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#10 && (bool~) printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) ultoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Constant right-side identified [244] (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Constant right-side identified [272] (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte) ultoa::max_digits#0 = 0
Constant (const dword*) ultoa::digit_values#0 = (dword*) 0
Constant (const byte) ultoa::max_digits#1 = $a
Constant (const dword*) ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#2 = 8
Constant (const dword*) ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#3 = $b
Constant (const dword*) ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#4 = $20
Constant (const dword*) ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant (const byte) ultoa::started#0 = 0
Constant (const byte) ultoa::digit#0 = 0
Constant (const byte) ultoa::started#1 = 1
Constant (const byte) ultoa_append::digit#0 = 0
Constant (const void*) memset::str#0 = (void*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = (unumber)$28*$19
Constant (const void*) memcpy::destination#0 = (void*) 1024
Constant (const void*) memcpy::source#0 = (void*)$400+$28
Constant (const word) memcpy::num#0 = (unumber)$28*$19-$28
Constant (const void*) memset::str#1 = (void*)$400+$28*$19-$28
Constant (const byte) memset::c#1 = ' '
Constant (const word) memset::num#1 = $28
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_ulong::$1 = '+'
Constant (const byte) printf_ulong::$0 = 0
Constant (const byte*) ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uint::$1 = '+'
Constant (const byte) printf_uint::$0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uchar::$1 = '+'
Constant (const byte) printf_uchar::$0 = 0
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#2 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const byte*) printf_str::str#2 = main::str
Constant (const byte*) printf_str::str#3 = main::str1
Constant (const word) printf_uint::uvalue#0 = 8
Constant (const byte) printf_uint::format_min_length#0 = 0
Constant (const byte) printf_uint::format_justify_left#0 = 0
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 0
Constant (const byte) printf_uint::format_radix#0 = DECIMAL
Constant (const byte) legal::i#0 = 1
Constant (const byte) legal::return#1 = 1
Constant (const byte) legal::return#2 = 0
Constant (const byte) legal::return#3 = 0
Constant (const byte*) printf_str::str#4 = print::str
Constant (const byte) printf_ulong::format_min_length#0 = 0
Constant (const byte) printf_ulong::format_justify_left#0 = 0
Constant (const byte) printf_ulong::format_sign_always#0 = 0
Constant (const byte) printf_ulong::format_zero_padding#0 = 0
Constant (const byte) printf_ulong::format_upper_case#0 = 0
Constant (const byte) printf_ulong::format_radix#0 = DECIMAL
Constant (const byte*) printf_str::str#5 = print::str1
Constant (const byte) print::i#0 = 1
Constant (const byte) printf_uchar::format_min_length#0 = 0
Constant (const byte) printf_uchar::format_justify_left#0 = 0
Constant (const byte) printf_uchar::format_sign_always#0 = 0
Constant (const byte) printf_uchar::format_zero_padding#0 = 0
Constant (const byte) printf_uchar::format_upper_case#0 = 0
Constant (const byte) printf_uchar::format_radix#0 = HEXADECIMAL
Constant (const byte) print::i1#0 = 1
Constant (const byte*) printf_str::str#6 = print::str2
Constant (const byte) printf_uchar::format_min_length#1 = 0
Constant (const byte) printf_uchar::format_justify_left#1 = 0
Constant (const byte) printf_uchar::format_sign_always#1 = 0
Constant (const byte) printf_uchar::format_zero_padding#1 = 0
Constant (const byte) printf_uchar::format_upper_case#1 = 0
Constant (const byte) printf_uchar::format_radix#1 = HEXADECIMAL
Constant (const byte) print::j#0 = 1
Constant (const byte*) printf_str::str#7 = print::str3
Constant (const byte*) printf_str::str#8 = print::str4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memcpy::src#0 = (byte*)memcpy::source#0
Constant (const byte*) memcpy::dst#0 = (byte*)memcpy::destination#0
Constant (const byte*) memcpy::$2 = (byte*)memcpy::source#0
Constant (const void*) memcpy::return#2 = memcpy::destination#0
Constant (const byte) ultoa::radix#0 = printf_ulong::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#0 = printf_ulong::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#0 = printf_ulong::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#0 = printf_ulong::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = printf_ulong::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#0 = printf_ulong::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#0 = printf_ulong::format_radix#0
Constant (const word) utoa::value#1 = printf_uint::uvalue#0
Constant (const byte) utoa::radix#0 = printf_uint::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#1 = printf_uint::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#1 = printf_uint::format_radix#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [117] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [121] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [125] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [129] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [180] if((const byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
if() condition always false - eliminating [184] if((const byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [188] if((const byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
if() condition always false - eliminating [192] if((const byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
if() condition always true - replacing block destination [295] if(true) goto printf_str::@2
if() condition always false - eliminating [308] if((byte) 0!=(const byte) printf_ulong::format_sign_always#0) goto printf_ulong::@1
if() condition always false - eliminating [329] if((byte) 0!=(const byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [445] if((byte) queen::column<=(byte) 8) goto queen::@2
Rewriting conditional comparison [514] if((byte) print::i#2<=(byte) 8) goto print::@2
Rewriting conditional comparison [527] if((byte) print::i1#2<=(byte) 8) goto print::@5
Rewriting conditional comparison [541] if((byte) print::j#2<=(byte) 8) goto print::@7
Simplifying expression containing zero (byte*)&printf_buffer in [312] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_ulong::$2
Simplifying expression containing zero (byte*)&printf_buffer in [317] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [333] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [338] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [354] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [359] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [151] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [175] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#2 and assignment [220] (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#2 and assignment [223] (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#2
Eliminating unused variable (byte*) strupr::return#2 and assignment [260] (byte*) strupr::return#2 ← (byte*) strupr::str#0
Eliminating unused constant (const void*) memcpy::return#2
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) ultoa::max_digits#0
Eliminating unused constant (const dword*) ultoa::digit_values#0
Eliminating unused constant (const byte) ultoa::radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#0
Eliminating unused constant (const byte) printf_number_buffer::format_radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#1
Eliminating unused constant (const byte) printf_number_buffer::format_radix#1
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) printf_ulong::format_sign_always#0
Eliminating unused constant (const byte) printf_ulong::format_radix#0
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Eliminating variable (byte*) ultoa::buffer#0 from unused block ultoa::@9
Eliminating variable (byte*) ultoa::buffer#1 from unused block ultoa::@9
Eliminating variable (byte*) ultoa::buffer#2 from unused block ultoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing PHI-reference to removed block (printf_ulong::@1) in block printf_ulong::@3
Removing unused block printf_ulong::@1
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) ultoa::$12 ← (number) 0 != (byte) ultoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#10
Adding number conversion cast (unumber) 8+1 in if((byte) queen::column<(byte) 8+(number) 1) goto queen::@2
Adding number conversion cast (unumber) 1 in if((byte) queen::column<(unumber)(byte) 8+(number) 1) goto queen::@2
Adding number conversion cast (unumber) 8+1 in if((byte) print::i#2<(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 1 in if((byte) print::i#2<(unumber)(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 8+1 in if((byte) print::i1#2<(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 1 in if((byte) print::i1#2<(unumber)(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 8+1 in if((byte) print::j#2<(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (unumber) 1 in if((byte) print::j#2<(unumber)(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Identical Phi Values (byte) ultoa::max_digits#7 (const byte) ultoa::max_digits#1
Identical Phi Values (dword*) ultoa::digit_values#8 (const dword*) ultoa::digit_values#1
Identical Phi Values (byte~) printf_ulong::$2 (const byte) printf_ulong::$0
Identical Phi Values (byte~) printf_uint::$2 (const byte) printf_uint::$0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [56] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) utoa::$12 [84] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) ultoa::$12 [113] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [213] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [229] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [239] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition (bool~) toupper::$1 [323] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [324] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) utoa::$6 [325] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) ultoa::$6 [326] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [328] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [329] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [331] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [333] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [334] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [213] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [229] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [239] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [329] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [334] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [6] (byte*) memcpy::src_end#0 ← (const byte*) memcpy::$2 + (const word) memcpy::num#0
Constant right-side identified [42] (byte*) uctoa::buffer#0 ← ++ (const byte*) uctoa::buffer#5
Constant right-side identified [78] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Constant right-side identified [107] (byte~) ultoa::$4 ← (const byte) ultoa::max_digits#1 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memcpy::src_end#0 = memcpy::$2+memcpy::num#0
Constant (const byte*) uctoa::buffer#0 = ++uctoa::buffer#5
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Constant (const byte) ultoa::$4 = ultoa::max_digits#1-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const byte) ultoa::max_digits#2
Eliminating unused constant (const dword*) ultoa::digit_values#2
Eliminating unused constant (const byte) ultoa::max_digits#3
Eliminating unused constant (const dword*) ultoa::digit_values#3
Eliminating unused constant (const byte) ultoa::max_digits#4
Eliminating unused constant (const dword*) ultoa::digit_values#4
Eliminating unused constant (const byte) printf_ulong::$1
Eliminating unused constant (const byte) printf_uint::$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Eliminating unused constant (const dword*) RADIX_BINARY_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_OCTAL_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Constant right-side identified [40] (byte*) uctoa::buffer#1 ← ++ (const byte*) uctoa::buffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#1 = ++uctoa::buffer#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Constant right-side identified [41] (byte*) uctoa::buffer#2 ← ++ (const byte*) uctoa::buffer#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#2 = ++uctoa::buffer#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Inlining Noop Cast [12] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [14] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [201] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 keeping printf_number_buffer::format_min_length#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [70] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [95] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 * (const byte) SIZEOF_DWORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memcpy::src#0
Inlining constant with var siblings (const byte*) memcpy::dst#0
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) uctoa::max_digits#1
Inlining constant with var siblings (const byte*) uctoa::digit_values#1
Inlining constant with var siblings (const byte) uctoa::max_digits#2
Inlining constant with var siblings (const byte*) uctoa::digit_values#2
Inlining constant with var siblings (const byte) uctoa::max_digits#3
Inlining constant with var siblings (const byte*) uctoa::digit_values#3
Inlining constant with var siblings (const byte) uctoa::max_digits#4
Inlining constant with var siblings (const byte*) uctoa::digit_values#4
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte*) uctoa::buffer#0
Inlining constant with var siblings (const byte*) uctoa::buffer#1
Inlining constant with var siblings (const byte*) uctoa::buffer#2
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const word) utoa::value#1
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte) ultoa::started#0
Inlining constant with var siblings (const byte) ultoa::digit#0
Inlining constant with var siblings (const byte) ultoa::started#1
Inlining constant with var siblings (const byte*) ultoa::buffer#5
Inlining constant with var siblings (const byte) ultoa_append::digit#0
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte*) printf_str::str#2
Inlining constant with var siblings (const byte*) printf_str::str#3
Inlining constant with var siblings (const byte*) printf_str::str#4
Inlining constant with var siblings (const byte*) printf_str::str#5
Inlining constant with var siblings (const byte*) printf_str::str#6
Inlining constant with var siblings (const byte*) printf_str::str#7
Inlining constant with var siblings (const byte*) printf_str::str#8
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#0
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#0
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#0
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#0
Inlining constant with var siblings (const byte) printf_uchar::format_radix#0
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#1
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#1
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#1
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#1
Inlining constant with var siblings (const byte) printf_uchar::format_radix#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#0
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#2
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#1
Inlining constant with var siblings (const byte) legal::i#0
Inlining constant with var siblings (const byte) legal::return#1
Inlining constant with var siblings (const byte) legal::return#2
Inlining constant with var siblings (const byte) legal::return#3
Inlining constant with var siblings (const byte) print::i#0
Inlining constant with var siblings (const byte) print::i1#0
Inlining constant with var siblings (const byte) print::j#0
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined printf_number_buffer::format_justify_left#0 = (const byte) printf_ulong::format_justify_left#0
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_justify_left#1 = (const byte) printf_uint::format_justify_left#0
Constant inlined printf_uchar::format_justify_left#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#1 = (byte) 0
Constant inlined memset::num#1 = (byte) $28
Constant inlined memset::num#0 = (word)(number) $28*(number) $19
Constant inlined strlen::len#0 = (word) 0
Constant inlined memcpy::$2 = (byte*)(const void*) memcpy::source#0
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined print::j#0 = (byte) 1
Constant inlined ultoa::started#1 = (byte) 1
Constant inlined printf_uchar::format_sign_always#1 = (byte) 0
Constant inlined legal::return#2 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::digit#0 = (byte) 0
Constant inlined legal::return#3 = (byte) 0
Constant inlined printf_uchar::format_sign_always#0 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined printf_uchar::format_min_length#1 = (byte) 0
Constant inlined legal::return#1 = (byte) 1
Constant inlined memset::c#1 = (byte) ' '
Constant inlined printf_uchar::format_min_length#0 = (byte) 0
Constant inlined printf_uchar::format_upper_case#1 = (byte) 0
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined printf_uchar::format_upper_case#0 = (byte) 0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined print::i1#0 = (byte) 1
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined uctoa::digit_values#1 = (const byte*) RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined uctoa::digit_values#4 = (const byte*) RADIX_BINARY_VALUES_CHAR
Constant inlined memcpy::dst#0 = (byte*)(const void*) memcpy::destination#0
Constant inlined uctoa::digit_values#3 = (const byte*) RADIX_OCTAL_VALUES_CHAR
Constant inlined printf_uchar::$0 = (byte) 0
Constant inlined printf_uchar::$1 = (byte) '+'
Constant inlined memcpy::src#0 = (byte*)(const void*) memcpy::source#0
Constant inlined uctoa::max_digits#1 = (byte) 3
Constant inlined ultoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_upper_case#1 = (const byte) printf_uint::format_upper_case#0
Constant inlined ultoa::started#0 = (byte) 0
Constant inlined legal::i#0 = (byte) 1
Constant inlined printf_number_buffer::format_upper_case#0 = (const byte) printf_ulong::format_upper_case#0
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#0 = (const byte) printf_ulong::format_min_length#0
Constant inlined uctoa::max_digits#3 = (byte) 3
Constant inlined printf_number_buffer::format_zero_padding#0 = (const byte) printf_ulong::format_zero_padding#0
Constant inlined printf_number_buffer::format_min_length#1 = (const byte) printf_uint::format_min_length#0
Constant inlined uctoa::max_digits#2 = (byte) 2
Constant inlined uctoa::max_digits#4 = (byte) 8
Constant inlined uctoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memset::str#1 = (void*)(number) $400+(number) $28*(number) $19-(number) $28
Constant inlined uctoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined printf_number_buffer::format_zero_padding#1 = (const byte) printf_uint::format_zero_padding#0
Constant inlined memset::str#0 = (void*) 1024
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_uchar::format_zero_padding#1 = (byte) 0
Constant inlined uctoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_uchar::format_zero_padding#0 = (byte) 0
Constant inlined printf_uint::$0 = (byte) 0
Constant inlined printf_ulong::$0 = (byte) 0
Constant inlined utoa::started#1 = (byte) 1
Constant inlined utoa::started#0 = (byte) 0
Constant inlined print::i#0 = (byte) 1
Constant inlined ultoa::$4 = (const byte) ultoa::max_digits#1-(byte) 1
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_str::str#6 = (const byte*) print::str2
Constant inlined printf_str::str#5 = (const byte*) print::str1
Constant inlined printf_str::str#8 = (const byte*) print::str4
Constant inlined printf_str::str#7 = (const byte*) print::str3
Constant inlined printf_uchar::format_radix#1 = (const byte) HEXADECIMAL
Constant inlined printf_uchar::format_radix#0 = (const byte) HEXADECIMAL
Constant inlined ultoa_append::digit#0 = (byte) 0
Constant inlined ultoa::digit_values#1 = (const dword*) RADIX_DECIMAL_VALUES_LONG
Constant inlined printf_str::str#2 = (const byte*) main::str
Constant inlined printf_str::str#4 = (const byte*) print::str
Constant inlined utoa::value#1 = (const word) printf_uint::uvalue#0
Constant inlined printf_str::str#3 = (const byte*) main::str1
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [39] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [40] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [41] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) printf_uchar::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_radix#2 (const byte) HEXADECIMAL
Identical Phi Values (byte) printf_uchar::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_upper_case#2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) uctoa::radix#0 = HEXADECIMAL
Constant (const byte) printf_number_buffer::format_min_length#2 = 0
Constant (const byte) printf_number_buffer::format_justify_left#2 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#2 = 0
Constant (const byte) printf_number_buffer::format_upper_case#2 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [32] if((const byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
if() condition always true - replacing block destination [33] if((const byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [34] if((const byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
if() condition always false - eliminating [35] if((const byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
if() condition always false - eliminating [175] if((byte) 0!=(byte) 0) goto printf_uchar::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) DECIMAL
Eliminating unused constant (const byte) uctoa::radix#0
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) HEXADECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing unused block uctoa::@1
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#2
Constant inlined printf_number_buffer::format_zero_padding#2 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#2 = (byte) 0
Constant inlined printf_number_buffer::format_justify_left#2 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#2 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Identical Phi Values (byte) uctoa::max_digits#7 (byte) 2
Identical Phi Values (byte*) uctoa::digit_values#8 (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Identical Phi Values (byte~) printf_uchar::$2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [35] (byte~) uctoa::$4 ← (byte) 2 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) uctoa::$4 = 2-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) RADIX_BINARY_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_DECIMAL_VALUES_CHAR
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined uctoa::$4 = (byte) 2-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Alias candidate removed (volatile)printf_cursor_ptr = printf_ln::$1 printf_scroll::$4 
Alias candidate removed (volatile)queen::row#0 = queen::r 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of printf_scroll::@1
Adding NOP phi() at start of printf_scroll::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of printf_ln::@1
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of utoa::@5
Adding NOP phi() at start of printf_cls
Adding NOP phi() at start of queen::@4
Adding NOP phi() at start of queen::@8
Adding NOP phi() at start of print::@13
Adding NOP phi() at start of print::@14
Adding NOP phi() at start of print::@3
Adding NOP phi() at start of print::@5
Adding NOP phi() at start of print::@17
Adding NOP phi() at start of print::@11
Adding NOP phi() at start of print::@19
Adding NOP phi() at start of print::@9
Adding NOP phi() at start of print::@18
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@6
Adding NOP phi() at start of uctoa::@2
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of printf_ulong::@2
Adding NOP phi() at start of printf_ulong::@5
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
Adding NOP phi() at start of legal
Adding NOP phi() at start of legal::@3
Adding NOP phi() at start of legal::@7
Adding NOP phi() at start of legal::@4
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to printf_cls:10 printf_str:12 printf_str:14 printf_uint:16 queen:18 
Calls in [printf_uint] to utoa:24 printf_number_buffer:27 
Calls in [printf_number_buffer] to strlen:33 printf_char:51 strupr:57 printf_str:61 printf_padding:68 printf_padding:72 printf_padding:76 
Calls in [printf_padding] to printf_char:86 
Calls in [printf_char] to printf_scroll:96 
Calls in [printf_scroll] to memcpy:101 memset:103 
Calls in [printf_str] to printf_char:139 printf_ln:142 
Calls in [printf_ln] to printf_scroll:149 
Calls in [strupr] to toupper:158 
Calls in [utoa] to utoa_append:206 
Calls in [printf_cls] to memset:222 
Calls in [queen] to legal:234 queen:243 print:248 
Calls in [print] to printf_str:251 printf_ulong:253 printf_str:255 printf_str:264 printf_uchar:267 printf_str:275 printf_str:280 printf_uchar:284 
Calls in [printf_uchar] to uctoa:291 printf_number_buffer:294 
Calls in [uctoa] to uctoa_append:322 
Calls in [printf_ulong] to ultoa:341 printf_number_buffer:344 
Calls in [ultoa] to ultoa_append:373 
Calls in [legal] to diff:400 diff:407 

Created 60 initial phi equivalence classes
Coalesced [26] printf_number_buffer::buffer_sign#15 ← printf_number_buffer::buffer_sign#1
Coalesced [39] printf_number_buffer::len#5 ← printf_number_buffer::len#1
Coalesced [50] printf_char::ch#4 ← printf_char::ch#2
Coalesced [60] printf_str::str#17 ← printf_str::str#1
Coalesced [67] printf_padding::length#8 ← printf_padding::length#2
Coalesced [71] printf_padding::length#7 ← printf_padding::length#1
Coalesced [75] printf_padding::length#9 ← printf_padding::length#0
Coalesced [78] printf_number_buffer::padding#18 ← printf_number_buffer::padding#1
Coalesced [79] printf_number_buffer::len#4 ← printf_number_buffer::len#0
Coalesced [85] printf_char::ch#5 ← printf_char::ch#0
Coalesced [88] printf_padding::i#5 ← printf_padding::i#1
Coalesced [118] memset::dst#5 ← memset::dst#1
Coalesced [127] memcpy::src#4 ← memcpy::src#1
Coalesced [128] memcpy::dst#4 ← memcpy::dst#1
Coalesced [130] printf_str::str#18 ← printf_str::str#11
Coalesced [138] printf_char::ch#6 ← printf_char::ch#1
Coalesced [140] printf_str::str#20 ← printf_str::str#0
Coalesced (already) [143] printf_str::str#19 ← printf_str::str#0
Coalesced [152] strupr::src#5 ← strupr::str#0
Coalesced [163] strupr::src#6 ← strupr::src#1
Coalesced [166] toupper::return#7 ← toupper::ch#0
Coalesced [170] toupper::return#6 ← toupper::return#0
Coalesced [171] strlen::str#5 ← strlen::str#1
Coalesced [178] strlen::str#6 ← strlen::str#0
Coalesced [179] strlen::len#5 ← strlen::len#1
Coalesced [194] utoa::value#17 ← utoa::value#2
Coalesced [195] utoa::started#6 ← utoa::started#2
Coalesced [196] utoa::buffer#23 ← utoa::buffer#11
Coalesced [199] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [200] utoa::value#16 ← utoa::value#6
Coalesced (already) [201] utoa::started#5 ← utoa::started#4
Coalesced (already) [202] utoa::buffer#22 ← utoa::buffer#14
Coalesced [210] utoa::value#18 ← utoa::value#0
Coalesced [211] utoa::buffer#24 ← utoa::buffer#4
Coalesced [212] utoa_append::value#6 ← utoa_append::value#0
Coalesced [219] utoa_append::value#7 ← utoa_append::value#1
Coalesced [220] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [266] printf_uchar::uvalue#6 ← printf_uchar::uvalue#1
Coalesced [272] print::i1#14 ← print::i1#1
Coalesced [278] print::j#9 ← print::j#1
Coalesced [283] printf_uchar::uvalue#7 ← printf_uchar::uvalue#0
Coalesced [286] print::i#5 ← print::i#1
Coalesced [293] printf_number_buffer::buffer_sign#14 ← printf_number_buffer::buffer_sign#2
Coalesced [300] uctoa::value#17 ← uctoa::value#1
Coalesced [310] uctoa::value#18 ← uctoa::value#2
Coalesced [311] uctoa::started#6 ← uctoa::started#2
Coalesced [312] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [315] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [316] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [317] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [318] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [326] uctoa::value#19 ← uctoa::value#0
Coalesced [327] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [328] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [335] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [336] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced [343] printf_number_buffer::buffer_sign#16 ← printf_number_buffer::buffer_sign#0
Coalesced [349] ultoa::value#17 ← ultoa::value#1
Coalesced [361] ultoa::value#18 ← ultoa::value#2
Coalesced [362] ultoa::started#6 ← ultoa::started#2
Coalesced [363] ultoa::buffer#23 ← ultoa::buffer#11
Coalesced [366] ultoa::digit#7 ← ultoa::digit#1
Coalesced (already) [367] ultoa::value#16 ← ultoa::value#6
Coalesced (already) [368] ultoa::started#5 ← ultoa::started#4
Coalesced (already) [369] ultoa::buffer#22 ← ultoa::buffer#14
Coalesced [377] ultoa::value#19 ← ultoa::value#0
Coalesced [378] ultoa::buffer#24 ← ultoa::buffer#4
Coalesced [379] ultoa_append::value#6 ← ultoa_append::value#0
Coalesced [386] ultoa_append::value#7 ← ultoa_append::value#1
Coalesced [387] ultoa_append::digit#5 ← ultoa_append::digit#1
Coalesced [398] diff::a#5 ← diff::a#0
Coalesced [399] diff::b#5 ← diff::b#0
Coalesced [405] diff::a#6 ← diff::a#1
Coalesced [406] diff::b#6 ← diff::b#1
Coalesced [413] legal::i#8 ← legal::i#1
Coalesced [418] diff::return#9 ← diff::return#3
Coalesced [422] diff::return#8 ← diff::return#2
Coalesced down to 50 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) printf_uint::@2
Culled Empty Block (label) printf_uint::@5
Culled Empty Block (label) printf_number_buffer::@14
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@20
Culled Empty Block (label) printf_number_buffer::@21
Culled Empty Block (label) printf_number_buffer::@18
Culled Empty Block (label) printf_number_buffer::@16
Culled Empty Block (label) printf_number_buffer::@28
Culled Empty Block (label) printf_char::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) printf_str::@7
Culled Empty Block (label) printf_str::@6
Culled Empty Block (label) printf_ln::@1
Culled Empty Block (label) strupr::@3
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) queen::@8
Culled Empty Block (label) print::@14
Culled Empty Block (label) print::@3
Culled Empty Block (label) print::@17
Culled Empty Block (label) print::@19
Culled Empty Block (label) print::@18
Culled Empty Block (label) printf_uchar::@2
Culled Empty Block (label) printf_uchar::@5
Culled Empty Block (label) uctoa::@6
Culled Empty Block (label) uctoa::@2
Culled Empty Block (label) uctoa::@5
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) printf_ulong::@2
Culled Empty Block (label) printf_ulong::@5
Culled Empty Block (label) ultoa::@1
Culled Empty Block (label) ultoa::@5
Culled Empty Block (label) ultoa::@17
Culled Empty Block (label) legal::@3
Culled Empty Block (label) legal::@7
Culled Empty Block (label) legal::@4
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block strupr::@4 to strupr::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block printf_ulong::@3 to printf_ulong::@1
Renumbering block printf_ulong::@4 to printf_ulong::@2
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Renumbering block legal::@5 to legal::@3
Renumbering block legal::@6 to legal::@4
Renumbering block legal::@8 to legal::@5
Renumbering block legal::@9 to legal::@6
Renumbering block print::@4 to print::@3
Renumbering block print::@5 to print::@4
Renumbering block print::@6 to print::@5
Renumbering block print::@7 to print::@6
Renumbering block print::@8 to print::@7
Renumbering block print::@9 to print::@8
Renumbering block print::@10 to print::@9
Renumbering block print::@11 to print::@10
Renumbering block print::@12 to print::@11
Renumbering block print::@13 to print::@12
Renumbering block print::@15 to print::@13
Renumbering block print::@16 to print::@14
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_scroll::@1
Adding NOP phi() at start of printf_scroll::@2
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strlen
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of printf_cls
Adding NOP phi() at start of queen::@4
Adding NOP phi() at start of print::@12
Adding NOP phi() at start of print::@4
Adding NOP phi() at start of print::@10
Adding NOP phi() at start of print::@8
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa_append
Adding NOP phi() at start of legal

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] (dword) count ← (dword) 0
  to:@3
@3: scope:[]  from @2
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @3
  [7] phi()

(void()) main()
main: scope:[main]  from @3
  [8] phi()
  [9] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call printf_str 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] stackpush(byte) ← (byte) 1
  [17] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  to:main::@return
main::@return: scope:[main]  from main::@4
  [19] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [20] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [22] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [23] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [24] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [25] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [26] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 printf_ulong::@2/(const byte) printf_ulong::format_upper_case#0 )
  [26] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [26] (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_uchar::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_uint::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_ulong::@2/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [26] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 printf_ulong::@2/(const byte) printf_ulong::format_zero_padding#0 )
  [26] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 printf_ulong::@2/(const byte) printf_ulong::format_justify_left#0 )
  [26] (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_min_length#0 printf_ulong::@2/(const byte) printf_ulong::format_min_length#0 )
  [27] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [29] call strlen 
  [30] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [33] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [34] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [35] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2
  [37] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [38] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [39] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [40] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [41] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [42] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [43] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [44] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [45] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [46] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10
  [47] call printf_char 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [48] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [49] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [50] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [51] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [52] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10
  [54] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
  [56] call printf_str 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [57] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [58] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [59] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [60] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [61] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [62] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [63] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [63] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [64] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [65] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [66] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [67] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
  [68] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [69] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  [70] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [72] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [73] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [75] (byte) printf_cursor_x ← (byte) 0
  [76] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [77] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [78] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [80] phi()
  [81] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [82] phi()
  [83] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [86] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [87] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [88] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [88] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [88] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [89] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [92] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [94] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [95] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [97] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [98] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [98] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [100] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [102] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [103] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@1 main::@2 print print::@10 print::@12 print::@4 print::@8 printf_number_buffer::@5
  [104] (byte*) printf_str::str#11 ← phi( main::@1/(const byte*) main::str main::@2/(const byte*) main::str1 print/(const byte*) print::str print::@10/(const byte*) print::str4 print::@12/(const byte*) print::str1 print::@4/(const byte*) print::str2 print::@8/(const byte*) print::str3 printf_number_buffer::@5/(byte*) printf_str::str#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [105] (byte*) printf_str::str#10 ← phi( printf_str/(byte*) printf_str::str#11 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10)
  [107] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#10
  [108] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [109] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [110] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [111] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [112] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [113] phi()
  [114] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [118] (byte) printf_cursor_x ← (byte) 0
  [119] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [120] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [121] return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [122] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [123] (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [125] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [127] call toupper 
  [128] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [129] (byte~) strupr::$0 ← (byte) toupper::return#3
  [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [131] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [132] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [133] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [135] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [136] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [137] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [138] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [138] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [140] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [141] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [142] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [143] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [144] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [144] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [144] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [144] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [145] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [149] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [150] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [153] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [155] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [155] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [155] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [156] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [158] (word) utoa_append::value#0 ← (word) utoa::value#2
  [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [160] call utoa_append 
  [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [162] (word) utoa::value#0 ← (word) utoa_append::return#0
  [163] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [164] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [165] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [165] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [168] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [169] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [171] phi()
  [172] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [173] (byte*) printf_cursor_ptr ← (byte*) 1024
  [174] (byte) printf_cursor_x ← (byte) 0
  [175] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [176] return 
  to:@return

__stackcall (void()) queen((byte) queen::row)
queen: scope:[queen]  from
  [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW)
  [178] (byte) queen::r ← (byte) queen::row#0
  [179] (byte) queen::column ← (byte) 1
  to:queen::@1
queen::@1: scope:[queen]  from queen queen::@3
  [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2
  to:queen::@return
queen::@return: scope:[queen]  from queen::@1
  [181] return 
  to:@return
queen::@2: scope:[queen]  from queen::@1
  [182] (byte) legal::row#0 ← (byte) queen::r
  [183] (byte) legal::column#0 ← (byte) queen::column
  [184] call legal 
  [185] (byte) legal::return#0 ← (byte) legal::return#4
  to:queen::@7
queen::@7: scope:[queen]  from queen::@2
  [186] (byte~) queen::$1 ← (byte) legal::return#0
  [187] if((byte) 0==(byte~) queen::$1) goto queen::@3
  to:queen::@5
queen::@5: scope:[queen]  from queen::@7
  [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column
  [189] if((byte) queen::r==(byte) 8) goto queen::@4
  to:queen::@6
queen::@6: scope:[queen]  from queen::@5
  asm { ldacolumn pha ldar pha  }
  [191] (byte~) queen::$4 ← (byte) queen::r + (byte) 1
  [192] stackpush(byte) ← (byte~) queen::$4
  [193] callexecute queen 
  sideeffect stackpullbytes((number) 1)
  asm { pla star pla stacolumn  }
  to:queen::@3
queen::@3: scope:[queen]  from queen::@4 queen::@6 queen::@7
  [196] (byte) queen::column ← ++ (byte) queen::column
  to:queen::@1
queen::@4: scope:[queen]  from queen::@5
  [197] phi()
  [198] call print 
  to:queen::@3

(void()) print()
print: scope:[print]  from queen::@4
  [199] (dword) count ← ++ (dword) count
  [200] call printf_str 
  to:print::@11
print::@11: scope:[print]  from print
  [201] (dword) printf_ulong::uvalue#0 ← (dword) count
  [202] call printf_ulong 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [203] phi()
  [204] call printf_str 
  to:print::@1
print::@1: scope:[print]  from print::@12 print::@13
  [205] (byte) print::i#2 ← phi( print::@12/(byte) 1 print::@13/(byte) print::i#1 )
  [206] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [207] (byte) print::i1#2 ← phi( print::@1/(byte) 1 print::@7/(byte) print::i1#1 )
  [208] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [209] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [210] phi()
  [211] call printf_str 
  to:print::@14
print::@14: scope:[print]  from print::@4
  [212] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
  [213] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@14 print::@9
  [214] (byte) print::j#2 ← phi( print::@9/(byte) print::j#1 print::@14/(byte) 1 )
  [215] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [216] (byte) print::i1#1 ← ++ (byte) print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [218] phi()
  [219] call printf_str 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [220] (byte) print::j#1 ← ++ (byte) print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [221] phi()
  [222] call printf_str 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [223] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
  [224] call printf_uchar 
  to:print::@13
print::@13: scope:[print]  from print::@2
  [225] (byte) print::i#1 ← ++ (byte) print::i#2
  to:print::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@14 print::@2
  [226] (byte) printf_uchar::uvalue#2 ← phi( print::@14/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [228] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [229] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [230] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [231] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [232] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [233] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [234] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [234] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [234] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [234] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [235] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [238] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [239] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [240] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [241] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [242] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [243] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [243] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [243] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [244] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [246] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [247] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [248] call uctoa_append 
  [249] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [250] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [251] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [252] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [253] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [253] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [254] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [256] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [257] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from print::@11
  [259] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
  [262] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [263] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [264] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [265] return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [266] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [267] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [267] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [267] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [267] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [268] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [272] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [273] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [276] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [278] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [278] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [278] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [279] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [283] call ultoa_append 
  [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [286] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [287] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [288] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [288] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [291] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [292] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queen::@2
  [294] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [295] (byte) legal::i#2 ← phi( legal/(byte) 1 legal::@3/(byte) legal::i#1 )
  [296] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1
  [297] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@6
  [298] (byte) legal::return#4 ← phi( legal::@1/(byte) 1 legal::@2/(byte) 0 legal::@6/(byte) 0 )
  [299] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [301] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2)
  [302] (byte) diff::b#0 ← (byte) legal::column#0
  [303] call diff 
  [304] (byte) diff::return#0 ← (byte) diff::return#4
  to:legal::@5
legal::@5: scope:[legal]  from legal::@4
  [305] (byte~) legal::$3 ← (byte) diff::return#0
  [306] (byte) diff::a#1 ← (byte) legal::i#2
  [307] (byte) diff::b#1 ← (byte) legal::row#0
  [308] call diff 
  [309] (byte) diff::return#1 ← (byte) diff::return#4
  to:legal::@6
legal::@6: scope:[legal]  from legal::@5
  [310] (byte~) legal::$4 ← (byte) diff::return#1
  [311] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@6
  [312] (byte) legal::i#1 ← ++ (byte) legal::i#2
  to:legal::@1

(byte()) diff((byte) diff::a , (byte) diff::b)
diff: scope:[diff]  from legal::@4 legal::@5
  [313] (byte) diff::b#2 ← phi( legal::@4/(byte) diff::b#0 legal::@5/(byte) diff::b#1 )
  [313] (byte) diff::a#2 ← phi( legal::@4/(byte) diff::a#0 legal::@5/(byte) diff::a#1 )
  [314] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1
  to:diff::@2
diff::@2: scope:[diff]  from diff
  [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2
  to:diff::@return
diff::@return: scope:[diff]  from diff::@1 diff::@2
  [316] (byte) diff::return#4 ← phi( diff::@1/(byte) diff::return#2 diff::@2/(byte) diff::return#3 )
  [317] return 
  to:@return
diff::@1: scope:[diff]  from diff
  [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2
  to:diff::@return

null depth in calling loop Loop head: queen::@1 tails: queen::@3 blocks: queen::@3 queen::@4 queen::@6 queen::@7 queen::@5 queen::@2 queen::@1  in scope queen
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@14 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@13 blocks: print::@13 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@14 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_str
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@14 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_str
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope printf_str
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@14 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_str
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope printf_str
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char

VARIABLE REGISTER WEIGHTS
(dword) count loadstore 0.5833333333333333
(byte()) diff((byte) diff::a , (byte) diff::b)
(byte) diff::a
(byte) diff::a#0 1.000000000001E12
(byte) diff::a#1 1.000000000001E12
(byte) diff::a#2 1.60000000000025E13
(byte) diff::b
(byte) diff::b#0 2.000000000002E12
(byte) diff::b#1 2.000000000002E12
(byte) diff::b#2 1.60000000000025E13
(byte) diff::return
(byte) diff::return#0 2.000000000002E12
(byte) diff::return#1 2.000000000002E12
(byte) diff::return#2 2.0000000000002E13
(byte) diff::return#3 2.0000000000002E13
(byte) diff::return#4 5.500000000001E12
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 2.000000000002E12
(byte~) legal::$3 3.333333333336667E11
(byte~) legal::$4 2.000000000002E12
(byte) legal::column
(byte) legal::column#0 1.1666666666683334E11
(byte) legal::i
(byte) legal::i#1 2.000000000002E12
(byte) legal::i#2 4.0000000000039996E11
(byte) legal::return
(byte) legal::return#0 2.00000000002E11
(byte) legal::return#4 3.3333333333666668E10
(byte) legal::row
(byte) legal::row#0 1.1052631578963158E11
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.0E43
(byte*) memcpy::dst#2 1.0E43
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(byte*) memcpy::src
(byte*) memcpy::src#1 2.0E43
(byte*) memcpy::src#2 1.0E43
(byte*) memcpy::src_end
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.25E42
(byte*) memset::dst
(byte*) memset::dst#1 2.0E43
(byte*) memset::dst#2 1.3333333333333668E43
(byte*) memset::dst#4 2.0E30
(byte*) memset::end
(byte*) memset::end#0 1.6666666666668335E42
(word) memset::num
(word) memset::num#2 1.0E30
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(void()) print()
(byte) print::i
(byte) print::i#1 2.000000000002E12
(byte) print::i#2 1.000000000001E12
(byte) print::i1
(byte) print::i1#1 2.000000000002E12
(byte) print::i1#2 1.0000000000003572E12
(byte) print::j
(byte) print::j#1 2.0000000000002E13
(byte) print::j#2 5.714285714286286E12
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte) printf_char::ch
(byte) printf_char::ch#0 2.0E27
(byte) printf_char::ch#1 2.0E26
(byte) printf_char::ch#2 2.00000000000002E14
(byte) printf_char::ch#3 1.11000000000001E28
(void()) printf_cls()
(byte*) printf_cursor_ptr loadstore 1.4683544303797465E27
(byte) printf_cursor_x loadstore 2.837837837837838E26
(byte) printf_cursor_y loadstore 2.0251572327044023E27
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 2.0E27
(byte*~) printf_ln::$1 2.0E27
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 1.00000000000001E14
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#10 1.0344827586207E13
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 202.0
(byte) printf_number_buffer::buffer_sign#1 202.0
(byte) printf_number_buffer::buffer_sign#10 1.55000000000103E13
(byte) printf_number_buffer::buffer_sign#2 2.0000000000002E13
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 6.451612903225871E12
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 1.00000000000001E13
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 3.846153846153885E12
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 9.375000000000094E12
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 1.500000000000015E14
(signed byte) printf_number_buffer::len#1 2.00000000000002E14
(signed byte) printf_number_buffer::len#2 3.00000000000003E14
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 1.00000000000001E14
(signed byte) printf_number_buffer::padding#10 1.904761904761924E13
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 2.0E27
(byte) printf_padding::i#2 7.500000000000001E26
(byte) printf_padding::length
(byte) printf_padding::length#0 2.00000000000002E14
(byte) printf_padding::length#1 2.00000000000002E14
(byte) printf_padding::length#2 2.00000000000002E14
(byte) printf_padding::length#4 1.6666666666671665E26
(byte) printf_padding::pad
(byte) printf_padding::pad#5 1.6666666666666666E26
(void()) printf_scroll()
(byte*~) printf_scroll::$4 2.0E29
(void()) printf_str((byte*) printf_str::str)
(byte) printf_str::ch
(byte) printf_str::ch#0 1.0E26
(byte*) printf_str::str
(byte*) printf_str::str#0 4.285714285714285E25
(byte*) printf_str::str#1 2.00000000000002E14
(byte*) printf_str::str#10 2.000000000005E26
(byte*) printf_str::str#11 1.100000000000002E15
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 2.000000000002E12
(byte) printf_uchar::uvalue#1 2.000000000002E12
(byte) printf_uchar::uvalue#2 6.0000000000015E12
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 37.33333333333333
__stackcall (void()) queen((byte) queen::row)
(byte~) queen::$1 2.00000000002E11
(byte~) queen::$4 2.00000000002E11
(byte) queen::column loadstore 2.9411764706823532E10
(byte) queen::r loadstore 2.1052631579736843E10
(byte) queen::row
(byte) queen::row#0 22.0
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 1.0E27
(word) strlen::len#2 5.00000000000025E26
(word) strlen::return
(word) strlen::return#2 2.00000000000002E14
(byte*) strlen::str
(byte*) strlen::str#0 2.0E27
(byte*) strlen::str#1 5.50000000000001E14
(byte*) strlen::str#2 1.0000000000003332E27
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 2.0E27
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 2.0E27
(byte*) strupr::src#2 7.142857142858572E26
(byte*) strupr::str
(byte*) strupr::str#0 5.50000000000001E14
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1.6999999999999998E28
(byte) toupper::return
(byte) toupper::return#0 2.0E28
(byte) toupper::return#2 1.0333333333333333E28
(byte) toupper::return#3 2.0E27
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 3.3333333333350004E25
(byte*) uctoa::buffer#14 1.5000000000000002E26
(byte*) uctoa::buffer#3 2.00000000000002E14
(byte*) uctoa::buffer#4 2.0E26
(byte) uctoa::digit
(byte) uctoa::digit#1 2.0E26
(byte) uctoa::digit#2 3.076923076923077E25
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 6.000000000000001E25
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 6.000000000000001E25
(byte) uctoa::started#4 1.0E26
(byte) uctoa::value
(byte) uctoa::value#0 1.0E26
(byte) uctoa::value#1 5.5000000000001E13
(byte) uctoa::value#2 6.666666666670001E25
(byte) uctoa::value#6 1.5000000000000002E26
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 1.3750000000000001E26
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0E40
(byte) uctoa_append::digit#2 1.00000000000005E40
(byte) uctoa_append::return
(byte) uctoa_append::return#0 2.0E26
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3.33333333333335E39
(byte) uctoa_append::value
(byte) uctoa_append::value#0 3.666666666666667E26
(byte) uctoa_append::value#1 2.0E40
(byte) uctoa_append::value#2 5.0000000000001833E39
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 2.00000000000002E14
(byte~) ultoa::$11 2002.0
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 2.8571428571571855E13
(byte*) ultoa::buffer#14 1.500000000000015E14
(byte*) ultoa::buffer#3 2002.0
(byte*) ultoa::buffer#4 2.00000000000002E14
(byte) ultoa::digit
(byte) ultoa::digit#1 2.00000000000002E14
(byte) ultoa::digit#2 2.8571428571428855E13
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 6.000000000000059E13
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 5.00000000000005E13
(byte) ultoa::started#4 1.00000000000001E14
(dword) ultoa::value
(dword) ultoa::value#0 1.00000000000001E14
(dword) ultoa::value#1 551.0
(dword) ultoa::value#2 5.714285714300071E13
(dword) ultoa::value#6 1.500000000000015E14
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 1.3750000000000025E14
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 1.0E27
(byte) ultoa_append::digit#2 1.0000000000005E27
(dword) ultoa_append::return
(dword) ultoa_append::return#0 2.00000000000002E14
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 3.3333333333335E26
(dword) ultoa_append::value
(dword) ultoa_append::value#0 3.666666666666674E14
(dword) ultoa_append::value#1 2.0E27
(dword) ultoa_append::value#2 5.0000000000018335E26
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 20002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 3000.4285714285716
(byte*) utoa::buffer#14 15001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 20002.0
(byte) utoa::digit#2 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 5000.5
(byte) utoa::started#4 10001.0
(word) utoa::value
(word) utoa::value#0 10001.0
(word) utoa::value#2 5714.857142857143
(word) utoa::value#6 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000001E7
(byte) utoa_append::digit#2 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 36667.33333333333
(word) utoa_append::value#1 2.0000002E7
(word) utoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_digits#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ]
[ strupr::src#2 strupr::str#0 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ legal::i#2 legal::i#1 ]
[ legal::return#4 ]
[ diff::a#2 diff::a#0 diff::a#1 ]
[ diff::b#2 diff::b#0 diff::b#1 ]
[ diff::return#4 diff::return#2 diff::return#3 ]
Added variable printf_cursor_x to live range equivalence class [ printf_cursor_x ]
Added variable printf_cursor_y to live range equivalence class [ printf_cursor_y ]
Added variable printf_cursor_ptr to live range equivalence class [ printf_cursor_ptr ]
Added variable count to live range equivalence class [ count ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable printf_scroll::$4 to live range equivalence class [ printf_scroll::$4 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_str::ch#0 to live range equivalence class [ printf_str::ch#0 ]
Added variable printf_ln::$0 to live range equivalence class [ printf_ln::$0 ]
Added variable printf_ln::$1 to live range equivalence class [ printf_ln::$1 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable queen::row#0 to live range equivalence class [ queen::row#0 ]
Added variable queen::r to live range equivalence class [ queen::r ]
Added variable queen::column to live range equivalence class [ queen::column ]
Added variable legal::row#0 to live range equivalence class [ legal::row#0 ]
Added variable legal::column#0 to live range equivalence class [ legal::column#0 ]
Added variable legal::return#0 to live range equivalence class [ legal::return#0 ]
Added variable queen::$1 to live range equivalence class [ queen::$1 ]
Added variable queen::$4 to live range equivalence class [ queen::$4 ]
Added variable printf_ulong::uvalue#0 to live range equivalence class [ printf_ulong::uvalue#0 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#3 to live range equivalence class [ ultoa::buffer#3 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Added variable legal::$0 to live range equivalence class [ legal::$0 ]
Added variable diff::return#0 to live range equivalence class [ diff::return#0 ]
Added variable legal::$3 to live range equivalence class [ legal::$3 ]
Added variable diff::return#1 to live range equivalence class [ diff::return#1 ]
Added variable legal::$4 to live range equivalence class [ legal::$4 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_digits#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ]
[ strupr::src#2 strupr::str#0 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ legal::i#2 legal::i#1 ]
[ legal::return#4 ]
[ diff::a#2 diff::a#0 diff::a#1 ]
[ diff::b#2 diff::b#0 diff::b#1 ]
[ diff::return#4 diff::return#2 diff::return#3 ]
[ printf_cursor_x ]
[ printf_cursor_y ]
[ printf_cursor_ptr ]
[ count ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ printf_scroll::$4 ]
[ memset::end#0 ]
[ printf_str::ch#0 ]
[ printf_ln::$0 ]
[ printf_ln::$1 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ queen::row#0 ]
[ queen::r ]
[ queen::column ]
[ legal::row#0 ]
[ legal::column#0 ]
[ legal::return#0 ]
[ queen::$1 ]
[ queen::$4 ]
[ printf_ulong::uvalue#0 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ ultoa::$11 ]
[ ultoa::buffer#3 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
[ legal::$0 ]
[ diff::return#0 ]
[ legal::$3 ]
[ diff::return#1 ]
[ legal::$4 ]
[ printf_buffer ]
Allocated zp[1]:2 [ printf_number_buffer::format_min_length#3 ]
Allocated zp[1]:3 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ]
Allocated zp[2]:5 [ printf_number_buffer::buffer_digits#10 ]
Allocated zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:8 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:9 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:12 [ printf_padding::pad#5 ]
Allocated zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[1]:14 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
Allocated zp[2]:15 [ memset::num#2 ]
Allocated zp[2]:17 [ memset::str#3 ]
Allocated zp[1]:19 [ memset::c#4 ]
Allocated zp[2]:20 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:22 [ memcpy::src#2 memcpy::src#1 ]
Allocated zp[2]:24 [ memcpy::dst#2 memcpy::dst#1 ]
Allocated zp[2]:26 [ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ]
Allocated zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ]
Allocated zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated zp[2]:33 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ]
Allocated zp[1]:38 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[1]:44 [ print::i#2 print::i#1 ]
Allocated zp[1]:45 [ print::i1#2 print::i1#1 ]
Allocated zp[1]:46 [ print::j#2 print::j#1 ]
Allocated zp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Allocated zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:50 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
Allocated zp[1]:60 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
Allocated zp[4]:63 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[1]:68 [ legal::i#2 legal::i#1 ]
Allocated zp[1]:69 [ legal::return#4 ]
Allocated zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 ]
Allocated zp[1]:71 [ diff::b#2 diff::b#0 diff::b#1 ]
Allocated zp[1]:72 [ diff::return#4 diff::return#2 diff::return#3 ]
Allocated zp[1]:73 [ printf_cursor_x ]
Allocated zp[1]:74 [ printf_cursor_y ]
Allocated zp[2]:75 [ printf_cursor_ptr ]
Allocated zp[4]:77 [ count ]
Allocated zp[2]:81 [ strlen::return#2 ]
Allocated zp[2]:83 [ printf_number_buffer::$19 ]
Allocated zp[2]:85 [ printf_scroll::$4 ]
Allocated zp[2]:87 [ memset::end#0 ]
Allocated zp[1]:89 [ printf_str::ch#0 ]
Allocated zp[2]:90 [ printf_ln::$0 ]
Allocated zp[2]:92 [ printf_ln::$1 ]
Allocated zp[1]:94 [ toupper::return#3 ]
Allocated zp[1]:95 [ strupr::$0 ]
Allocated zp[1]:96 [ utoa::$11 ]
Allocated zp[2]:97 [ utoa::buffer#3 ]
Allocated zp[1]:99 [ utoa::$10 ]
Allocated zp[2]:100 [ utoa::digit_value#0 ]
Allocated zp[2]:102 [ utoa_append::buffer#0 ]
Allocated zp[2]:104 [ utoa_append::sub#0 ]
Allocated zp[2]:106 [ utoa_append::return#0 ]
Allocated zp[1]:108 [ queen::row#0 ]
Allocated zp[1]:109 [ queen::r ]
Allocated zp[1]:110 [ queen::column ]
Allocated zp[1]:111 [ legal::row#0 ]
Allocated zp[1]:112 [ legal::column#0 ]
Allocated zp[1]:113 [ legal::return#0 ]
Allocated zp[1]:114 [ queen::$1 ]
Allocated zp[1]:115 [ queen::$4 ]
Allocated zp[4]:116 [ printf_ulong::uvalue#0 ]
Allocated zp[2]:120 [ uctoa::buffer#3 ]
Allocated zp[1]:122 [ uctoa::digit_value#0 ]
Allocated zp[2]:123 [ uctoa_append::buffer#0 ]
Allocated zp[1]:125 [ uctoa_append::sub#0 ]
Allocated zp[1]:126 [ uctoa_append::return#0 ]
Allocated zp[1]:127 [ ultoa::$11 ]
Allocated zp[2]:128 [ ultoa::buffer#3 ]
Allocated zp[1]:130 [ ultoa::$10 ]
Allocated zp[4]:131 [ ultoa::digit_value#0 ]
Allocated zp[2]:135 [ ultoa_append::buffer#0 ]
Allocated zp[4]:137 [ ultoa_append::sub#0 ]
Allocated zp[4]:141 [ ultoa_append::return#0 ]
Allocated zp[1]:145 [ legal::$0 ]
Allocated zp[1]:146 [ diff::return#0 ]
Allocated zp[1]:147 [ legal::$3 ]
Allocated zp[1]:148 [ diff::return#1 ]
Allocated zp[1]:149 [ legal::$4 ]
Allocated mem[12] [ printf_buffer ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const STACK_BASE = $103
  .label printf_cursor_x = $49
  .label printf_cursor_y = $4a
  .label printf_cursor_ptr = $4b
  .label count = $4d
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  jmp __b2
  // @2
__b2:
  // [4] (dword) count ← (dword) 0 -- vduz1=vduc1 
  // The number of found solutions
  lda #<0
  sta.z count
  lda #>0
  sta.z count+1
  lda #<0>>$10
  sta.z count+2
  lda #>0>>$10
  sta.z count+3
  // [5] phi from @2 to @3 [phi:@2->@3]
__b3_from___b2:
  jmp __b3
  // @3
__b3:
  // [6] call main 
  // [8] phi from @3 to main [phi:@3->main]
main_from___b3:
  jsr main
  // [7] phi from @3 to @end [phi:@3->@end]
__bend_from___b3:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call printf_cls 
    // [171] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call printf_str 
    // [104] phi from main::@1 to printf_str [phi:main::@1->printf_str]
  printf_str_from___b1:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str [phi:main::@1->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call printf_str 
    // [104] phi from main::@2 to printf_str [phi:main::@2->printf_str]
  printf_str_from___b2:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str1 [phi:main::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_uint 
    // [20] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [16] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [17] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    jmp __breturn
    // main::@return
  __breturn:
    // [19] return 
    rts
    str: .text " - n queens problem using backtracking -"
    .byte 0
    str1: .text @"\nNumber of queens:"
    .byte 0
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = 8
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    jmp __b1
    // printf_uint::@1
  __b1:
    // [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [22] call utoa 
  // Format number into buffer
    // [143] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [23] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [24] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [25] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp(7) buffer_sign, byte* zp(5) buffer_digits, byte zp(2) format_min_length, byte zp(3) format_justify_left, byte zp(4) format_zero_padding, byte zp(8) format_upper_case)
printf_number_buffer: {
    .label __19 = $53
    .label buffer_sign = 7
    .label len = 9
    .label padding = $a
    .label format_min_length = 2
    .label format_zero_padding = 4
    .label format_justify_left = 3
    .label buffer_digits = 5
    .label format_upper_case = 8
    // [27] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [29] call strlen 
    // [137] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [30] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __19
    lda.z strlen.return+1
    sta.z __19+1
    // [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [33] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [34] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [35] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [35] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z format_min_length
    sec
    sbc.z len
    sta.z padding
    // [37] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [39] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [38] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [39] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [40] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [41] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [42] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [43] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [63] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [45] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [46] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z printf_char.ch
    // [47] call printf_char 
    // [70] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
  printf_char_from___b9:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [48] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [49] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [50] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [51] call printf_padding 
    // [63] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [63] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [52] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [54] call strupr 
    // [122] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z printf_str.str
    lda.z buffer_digits+1
    sta.z printf_str.str+1
    // [56] call printf_str 
    // [104] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
  printf_str_from___b5:
    // [104] phi (byte*) printf_str::str#11 = (byte*) printf_str::str#1 [phi:printf_number_buffer::@5->printf_str#0] -- register_copy 
    jsr printf_str
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [57] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [58] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [59] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [60] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [61] call printf_padding 
    // [63] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [62] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($c) pad, byte zp($b) length)
printf_padding: {
    .label i = $d
    .label length = $b
    .label pad = $c
    // [64] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [64] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [65] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [66] return 
    rts
    // printf_padding::@2
  __b2:
    // [67] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5 -- vbuz1=vbuz2 
    lda.z pad
    sta.z printf_char.ch
    // [68] call printf_char 
    // [70] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [69] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [64] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [64] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp($e) ch)
printf_char: {
    .label ch = $e
    // [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_cursor_ptr),y
    // [72] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [73] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [75] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [76] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [77] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [78] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $55
    // [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [80] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
  __b1_from_printf_scroll:
    jmp __b1
    // printf_scroll::@1
  __b1:
    // [81] call memcpy 
    // [97] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [82] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
  __b2_from___b1:
    jmp __b2
    // printf_scroll::@2
  __b2:
    // [83] call memset 
    // [88] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
  memset_from___b2:
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_scroll::@3
  __b3:
    // [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z printf_cursor_ptr
    sec
    sbc #<$28
    sta.z __4
    lda.z printf_cursor_ptr+1
    sbc #>$28
    sta.z __4+1
    // [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 -- pbuz1=pbuz2 
    lda.z __4
    sta.z printf_cursor_ptr
    lda.z __4+1
    sta.z printf_cursor_ptr+1
    // [86] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_scroll::@return
  __breturn:
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($11) str, byte zp($13) c, word zp($f) num)
memset: {
    .label end = $57
    .label dst = $14
    .label num = $f
    .label str = $11
    .label c = $13
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [94] return 
    rts
    // memset::@3
  __b3:
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = $18
    .label src = $16
    // [98] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [98] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [98] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [100] return 
    rts
    // memcpy::@2
  __b2:
    // [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [102] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [103] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [98] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [98] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [98] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($1a) str)
printf_str: {
    .label ch = $59
    .label str = $1a
    // [105] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [105] phi (byte*) printf_str::str#10 = (byte*) printf_str::str#11 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [107] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [108] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [109] return 
    rts
    // printf_str::@3
  __b3:
    // [110] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z ch
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [111] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0 -- vbuz1=vbuz2 
    lda.z ch
    sta.z printf_char.ch
    // [112] call printf_char 
    // [70] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [113] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [114] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $5a
    .label __1 = $5c
    // [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z printf_cursor_ptr
    sbc.z printf_cursor_x
    sta.z __0
    lda.z printf_cursor_ptr+1
    sbc #0
    sta.z __0+1
    // [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __0
    sta.z __1
    lda #0
    adc.z __0+1
    sta.z __1+1
    // [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z printf_cursor_ptr
    lda.z __1+1
    sta.z printf_cursor_ptr+1
    // [118] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [119] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [120] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [121] return 
    rts
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($1c) str)
strupr: {
    .label __0 = $5f
    .label src = $1c
    .label str = $1c
    // [123] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
  __b1_from_strupr:
  __b1_from___b3:
    // [123] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
    // strupr::@1
  __b1:
    // [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [125] return 
    rts
    // strupr::@2
  __b2:
    // [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [127] call toupper 
    jsr toupper
    // [128] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b3
    // strupr::@3
  __b3:
    // [129] (byte~) strupr::$0 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z __0
    // [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [131] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b3
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($1e) ch)
toupper: {
    .label return = $1e
    .label ch = $1e
    .label return_1 = $5e
    // [132] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [133] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [135] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [135] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [136] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($1f) str)
strlen: {
    .label len = $21
    .label str = $1f
    .label return = $51
    // [138] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [138] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [140] return 
    rts
    // strlen::@2
  __b2:
    // [141] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [142] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [138] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [138] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($24) value, byte* zp($61) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $63
    .label __11 = $60
    .label digit_value = $64
    .label buffer = $61
    .label digit = $23
    .label value = $24
    .label buffer_1 = $27
    .label started = $26
    // [144] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [144] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [144] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [144] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [144] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [145] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [149] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [150] return 
    rts
    // utoa::@2
  __b2:
    // [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [153] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [155] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [155] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [156] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [144] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [144] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [144] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [144] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [144] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [158] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [160] call utoa_append 
    // [164] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [162] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [163] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [155] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [155] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($66) buffer, word zp($29) value, word zp($68) sub)
utoa_append: {
    .label buffer = $66
    .label value = $29
    .label sub = $68
    .label return = $6a
    .label digit = $2b
    // [165] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [165] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [168] return 
    rts
    // utoa_append::@2
  __b2:
    // [169] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [165] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [165] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [172] call memset 
    // [88] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [173] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [174] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [175] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [176] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($6c) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $6d
    .label column = $6e
    .label __1 = $72
    .label __4 = $73
    .label row = $6c
    // [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // [178] (byte) queen::r ← (byte) queen::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z r
    // [179] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    jmp __b1
    // queen::@1
  __b1:
    // [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    jmp __breturn
    // queen::@return
  __breturn:
    // [181] return 
    rts
    // queen::@2
  __b2:
    // [182] (byte) legal::row#0 ← (byte) queen::r -- vbuz1=vbuz2 
    lda.z r
    sta.z legal.row
    // [183] (byte) legal::column#0 ← (byte) queen::column -- vbuz1=vbuz2 
    lda.z column
    sta.z legal.column
    // [184] call legal 
    // [294] phi from queen::@2 to legal [phi:queen::@2->legal]
  legal_from___b2:
    jsr legal
    // [185] (byte) legal::return#0 ← (byte) legal::return#4 -- vbuz1=vbuz2 
    lda.z legal.return_1
    sta.z legal.return
    jmp __b7
    // queen::@7
  __b7:
    // [186] (byte~) queen::$1 ← (byte) legal::return#0 -- vbuz1=vbuz2 
    lda.z legal.return
    sta.z __1
    // [187] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    jmp __b5
    // queen::@5
  __b5:
    // [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // [189] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4_from___b5
    jmp __b6
    // queen::@6
  __b6:
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    lda r
    pha
    // [191] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z r
    iny
    sty.z __4
    // [192] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [193] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    jmp __b3
    // queen::@3
  __b3:
    // [196] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // [197] phi from queen::@5 to queen::@4 [phi:queen::@5->queen::@4]
  __b4_from___b5:
    jmp __b4
    // queen::@4
  __b4:
    // [198] call print 
    // we are done! Print the board configuration
    jsr print
    jmp __b3
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = $2c
    .label i1 = $2d
    .label j = $2e
    // [199] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [200] call printf_str 
    // [104] phi from print to printf_str [phi:print->printf_str]
  printf_str_from_print:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str [phi:print->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b11
    // print::@11
  __b11:
    // [201] (dword) printf_ulong::uvalue#0 ← (dword) count -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [202] call printf_ulong 
    // [259] phi from print::@11 to printf_ulong [phi:print::@11->printf_ulong]
  printf_ulong_from___b11:
    jsr printf_ulong
    // [203] phi from print::@11 to print::@12 [phi:print::@11->print::@12]
  __b12_from___b11:
    jmp __b12
    // print::@12
  __b12:
    // [204] call printf_str 
    // [104] phi from print::@12 to printf_str [phi:print::@12->printf_str]
  printf_str_from___b12:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str1 [phi:print::@12->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [205] phi from print::@12 to print::@1 [phi:print::@12->print::@1]
  __b1_from___b12:
    // [205] phi (byte) print::i#2 = (byte) 1 [phi:print::@12->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [206] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [207] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [207] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [208] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [209] return 
    rts
    // [210] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [211] call printf_str 
    // [104] phi from print::@4 to printf_str [phi:print::@4->printf_str]
  printf_str_from___b4:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str2 [phi:print::@4->printf_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z printf_str.str
    lda #>str2
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b14
    // print::@14
  __b14:
    // [212] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2 -- vbuz1=vbuz2 
    lda.z i1
    sta.z printf_uchar.uvalue
    // [213] call printf_uchar 
    // [226] phi from print::@14 to printf_uchar [phi:print::@14->printf_uchar]
  printf_uchar_from___b14:
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@14->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [214] phi from print::@14 to print::@5 [phi:print::@14->print::@5]
  __b5_from___b14:
    // [214] phi (byte) print::j#2 = (byte) 1 [phi:print::@14->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [215] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [216] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [207] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [207] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [218] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [219] call printf_str 
    // [104] phi from print::@10 to printf_str [phi:print::@10->printf_str]
  printf_str_from___b10:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str4 [phi:print::@10->printf_str#0] -- pbuz1=pbuc1 
    lda #<str4
    sta.z printf_str.str
    lda #>str4
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b9
    // print::@9
  __b9:
    // [220] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [214] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [214] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [221] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [222] call printf_str 
    // [104] phi from print::@8 to printf_str [phi:print::@8->printf_str]
  printf_str_from___b8:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str3 [phi:print::@8->printf_str#0] -- pbuz1=pbuc1 
    lda #<str3
    sta.z printf_str.str
    lda #>str3
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b9
    // print::@2
  __b2:
    // [223] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z printf_uchar.uvalue
    // [224] call printf_uchar 
    // [226] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b13
    // print::@13
  __b13:
    // [225] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [205] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [205] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@13->print::@1#0] -- register_copy 
    jmp __b1
    str: .text @"\n#"
    .byte 0
    str1: .text @":\n "
    .byte 0
    str2: .text @"\n"
    .byte 0
    str3: .text "Q"
    .byte 0
    str4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($2f) uvalue)
printf_uchar: {
    .label uvalue = $2f
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [228] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [229] call uctoa 
  // Format number into buffer
    // [233] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [230] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [231] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uchar::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [232] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($31) value, byte* zp($78) buffer)
uctoa: {
    .label digit_value = $7a
    .label buffer = $78
    .label digit = $30
    .label value = $31
    .label buffer_1 = $33
    .label started = $32
    // [234] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [234] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [234] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [235] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [238] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [239] return 
    rts
    // uctoa::@2
  __b2:
    // [240] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [241] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [242] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [243] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [244] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [234] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [234] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [234] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [246] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [247] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [248] call uctoa_append 
    // [252] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [249] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b6
    // uctoa::@6
  __b6:
    // [250] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [251] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [243] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($7b) buffer, byte zp($35) value, byte zp($7d) sub)
uctoa_append: {
    .label buffer = $7b
    .label value = $35
    .label sub = $7d
    .label return = $7e
    .label digit = $36
    // [253] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [253] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [254] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [256] return 
    rts
    // uctoa_append::@2
  __b2:
    // [257] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [253] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [253] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($74) uvalue)
printf_ulong: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = $74
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [262] call ultoa 
  // Format number into buffer
    // [266] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [263] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [264] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_ulong::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [265] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($38) value, byte* zp($80) buffer)
ultoa: {
    .const max_digits = $a
    .label __10 = $82
    .label __11 = $7f
    .label digit_value = $83
    .label buffer = $80
    .label digit = $37
    .label value = $38
    .label buffer_1 = $3d
    .label started = $3c
    // [267] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [267] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [267] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [268] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [272] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [273] return 
    rts
    // ultoa::@2
  __b2:
    // [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [276] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [278] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [279] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [267] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [267] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [267] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z ultoa_append.buffer
    lda.z buffer_1+1
    sta.z ultoa_append.buffer+1
    // [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 -- vduz1=vduz2 
    lda.z value
    sta.z ultoa_append.value
    lda.z value+1
    sta.z ultoa_append.value+1
    lda.z value+2
    sta.z ultoa_append.value+2
    lda.z value+3
    sta.z ultoa_append.value+3
    // [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 -- vduz1=vduz2 
    lda.z digit_value
    sta.z ultoa_append.sub
    lda.z digit_value+1
    sta.z ultoa_append.sub+1
    lda.z digit_value+2
    sta.z ultoa_append.sub+2
    lda.z digit_value+3
    sta.z ultoa_append.sub+3
    // [283] call ultoa_append 
    // [287] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 -- vduz1=vduz2 
    lda.z ultoa_append.value
    sta.z ultoa_append.return
    lda.z ultoa_append.value+1
    sta.z ultoa_append.return+1
    lda.z ultoa_append.value+2
    sta.z ultoa_append.return+2
    lda.z ultoa_append.value+3
    sta.z ultoa_append.return+3
    jmp __b6
    // ultoa::@6
  __b6:
    // [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 -- vduz1=vduz2 
    lda.z ultoa_append.return
    sta.z value
    lda.z ultoa_append.return+1
    sta.z value+1
    lda.z ultoa_append.return+2
    sta.z value+2
    lda.z ultoa_append.return+3
    sta.z value+3
    // [286] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [278] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($87) buffer, dword zp($3f) value, dword zp($89) sub)
ultoa_append: {
    .label buffer = $87
    .label value = $3f
    .label sub = $89
    .label return = $8d
    .label digit = $43
    // [288] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [288] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [291] return 
    rts
    // ultoa_append::@2
  __b2:
    // [292] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [288] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [288] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($6f) row, byte zp($70) column)
legal: {
    .label __0 = $91
    .label __3 = $93
    .label __4 = $95
    .label row = $6f
    .label column = $70
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $71
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return_1 = $45
    .label i = $44
    // [295] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [295] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // legal::@1
  __b1:
    // [296] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // [297] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    lda.z __0
    cmp.z i
    bcs __b2
    // [298] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [298] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // [298] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __breturn_from___b2:
  __breturn_from___b6:
    // [298] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // legal::@return
  __breturn:
    // [299] return 
    rts
    // legal::@2
  __b2:
    // [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [301] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda board,y
    sta.z diff.a
    // [302] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [303] call diff 
    // [313] phi from legal::@4 to diff [phi:legal::@4->diff]
  diff_from___b4:
    // [313] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // [304] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_2
    sta.z diff.return
    jmp __b5
    // legal::@5
  __b5:
    // [305] (byte~) legal::$3 ← (byte) diff::return#0 -- vbuz1=vbuz2 
    lda.z diff.return
    sta.z __3
    // [306] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [307] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [308] call diff 
    // [313] phi from legal::@5 to diff [phi:legal::@5->diff]
  diff_from___b5:
    // [313] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // [309] (byte) diff::return#1 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_2
    sta.z diff.return_1
    jmp __b6
    // legal::@6
  __b6:
    // [310] (byte~) legal::$4 ← (byte) diff::return#1 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z __4
    // [311] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __breturn_from___b6
    // legal::@3
  __b3:
    // [312] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [295] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [295] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($46) a, byte zp($47) b)
diff: {
    .label a = $46
    .label b = $47
    .label return = $92
    .label return_1 = $94
    .label return_2 = $48
    // [314] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    jmp __b2
    // diff::@2
  __b2:
    // [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z a
    sec
    sbc.z b
    sta.z return_2
    // [316] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
  __breturn_from___b1:
  __breturn_from___b2:
    // [316] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    jmp __breturn
    // diff::@return
  __breturn:
    // [317] return 
    rts
    // diff::@1
  __b1:
    // [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z b
    sec
    sbc.z a
    sta.z return_2
    jmp __breturn_from___b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (dword) count ← (dword) 0 [ count printf_buffer ] (  [ count printf_buffer ] { }  ) always clobbers reg byte a 
Statement [16] stackpush(byte) ← (byte) 1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer ] ( main:6 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] ( main:6::printf_uint:15 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a 
Statement [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ printf_number_buffer::format_min_length#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:44 [ print::i#2 print::i#1 ]
Statement [30] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Statement [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:45 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:44 [ print::i#2 print::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:46 [ print::j#2 print::j#1 ]
Statement [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ print::j#2 print::j#1 ]
Statement [75] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_y printf_scroll::$4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  ) always clobbers reg byte a 
Statement [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [89] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ memset::c#4 ]
Statement [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:19 [ memset::c#4 ]
Statement [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a 
Statement [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] ( main:6::printf_str:11 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::printf_str:13 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200 [ queen::r queen::column count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:204 [ queen::r queen::column count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:211 [ queen::r queen::column count printf_buffer print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:219 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:222 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  ) always clobbers reg byte a 
Statement [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  ) always clobbers reg byte a 
Statement [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [118] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte y 
Statement [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54::toupper:127 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54::toupper:127 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54::toupper:127 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54::toupper:127 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strlen:29 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strlen:29 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strlen:29 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strlen:29 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ printf_number_buffer::format_min_length#3 ]
Statement [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [149] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ utoa::started#2 utoa::started#4 ]
Statement [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [158] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [162] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Statement [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [173] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [174] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [175] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::row#0 ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::row#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [179] (byte) queen::column ← (byte) 1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a reg byte y 
Statement [189] if((byte) queen::r==(byte) 8) goto queen::@4 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement asm { ldacolumn pha ldar pha  } always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement asm { pla star pla stacolumn  } always clobbers reg byte a 
Statement [201] (dword) printf_ulong::uvalue#0 ← (dword) count [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer printf_ulong::uvalue#0 ] ( main:6::queen:17::print:198 [ queen::r queen::column printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer printf_ulong::uvalue#0 ] { { printf_ulong::uvalue#0 = count } }  ) always clobbers reg byte a 
Statement [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer print::i1#2 print::j#2 ] ( main:6::queen:17::print:198 [ queen::r queen::column printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer print::i1#2 print::j#2 ] { }  ) always clobbers reg byte a 
Statement [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] ( main:6::queen:17::print:198::printf_uchar:213 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Statement [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [238] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:122 [ uctoa::digit_value#0 ]
Statement [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:125 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_ulong::uvalue#0 ] ( main:6::queen:17::print:198::printf_ulong:202 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_ulong::uvalue#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::value#1 ] ( main:6::queen:17::print:198::printf_ulong:202 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [272] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:60 [ ultoa::started#2 ultoa::started#4 ]
Statement [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#2 ] ( main:6::queen:17::legal:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 ] { { legal::row#0 = queen::r } { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:111 [ legal::row#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:112 [ legal::column#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:68 [ legal::i#2 legal::i#1 ]
Statement [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 [ diff::return#3 ] ( main:6::queen:17::legal:184::diff:303 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 diff::return#3 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:6::queen:17::legal:184::diff:308 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#3 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:147 [ legal::$3 ]
Statement [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 [ diff::return#2 ] ( main:6::queen:17::legal:184::diff:303 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 diff::return#2 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:6::queen:17::legal:184::diff:308 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#2 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (dword) count ← (dword) 0 [ count printf_buffer ] (  [ count printf_buffer ] { }  ) always clobbers reg byte a 
Statement [16] stackpush(byte) ← (byte) 1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer ] ( main:6 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer ] { }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] ( main:6::printf_uint:15 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a 
Statement [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::str#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [30] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::str#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] ( main:6::printf_uint:15::printf_number_buffer:24 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a 
Statement [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte y 
Statement [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [75] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  ) always clobbers reg byte a 
Statement [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_y printf_scroll::$4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_scroll::$4 ] { }  ) always clobbers reg byte a 
Statement [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4 [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [89] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memset:83 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { }  main:6::printf_cls:9::memset:172 [ count printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a 
Statement [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::printf_char:47::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_char:47::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:44::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:51::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_padding:61::printf_char:68::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { printf_char::ch#0 = printf_char::ch#3 printf_padding::pad#5 } }  main:6::printf_str:11::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:13::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:200::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:204::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:211::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:219::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::queen:17::print:198::printf_str:222::printf_char:112::printf_scroll:77::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:6::printf_str:11::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_str:13::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114::printf_scroll:120::memcpy:81 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] ( main:6::printf_str:11 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::printf_str:13 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200 [ queen::r queen::column count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:204 [ queen::r queen::column count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:211 [ queen::r queen::column count printf_buffer print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:219 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  main:6::queen:17::print:198::printf_str:222 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#10 printf_str::ch#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  ) always clobbers reg byte a 
Statement [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  ) always clobbers reg byte a 
Statement [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [118] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_str:11::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_str:13::printf_ln:114 [ count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::printf_uint:15::printf_number_buffer:24::printf_str:56::printf_ln:114 [ count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::printf_str:56::printf_ln:114 [ queen::r queen::column count print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::printf_str:56::printf_ln:114 [ queen::r queen::column count printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_str::str#1 = printf_str::str#11 printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_str:200::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:204::printf_ln:114 [ queen::r queen::column count printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:211::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:219::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:6::queen:17::print:198::printf_str:222::printf_ln:114 [ queen::r queen::column count printf_buffer print::i1#2 print::j#2 printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte a reg byte y 
Statement [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } }  ) always clobbers reg byte y 
Statement [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::printf_uint:15::printf_number_buffer:24::strupr:54::toupper:127 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strupr:54::toupper:127 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strupr:54::toupper:127 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strupr:54::toupper:127 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strupr::str#0 = printf_number_buffer::buffer_digits#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:6::printf_uint:15::printf_number_buffer:24::strlen:29 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:213::printf_number_buffer:231::strlen:29 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_uchar:224::printf_number_buffer:231::strlen:29 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queen:17::print:198::printf_ulong:202::printf_number_buffer:264::strlen:29 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_digits#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = count } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::str#1 = printf_number_buffer::buffer_digits#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [149] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Statement [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [158] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [162] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:15::utoa:22 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:15::utoa:22::utoa_append:160 [ count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [173] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [174] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [175] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:6::printf_cls:9 [ count printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::row#0 ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::row#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [179] (byte) queen::column ← (byte) 1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a reg byte y 
Statement [189] if((byte) queen::r==(byte) 8) goto queen::@4 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] ( main:6::queen:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column ] { }  ) always clobbers reg byte a 
Statement asm { ldacolumn pha ldar pha  } always clobbers reg byte a 
Statement sideeffect stackpullbytes((number) 1) always clobbers reg byte a 
Statement asm { pla star pla stacolumn  } always clobbers reg byte a 
Statement [201] (dword) printf_ulong::uvalue#0 ← (dword) count [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer printf_ulong::uvalue#0 ] ( main:6::queen:17::print:198 [ queen::r queen::column printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer printf_ulong::uvalue#0 ] { { printf_ulong::uvalue#0 = count } }  ) always clobbers reg byte a 
Statement [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer print::i1#2 print::j#2 ] ( main:6::queen:17::print:198 [ queen::r queen::column printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer print::i1#2 print::j#2 ] { }  ) always clobbers reg byte a 
Statement [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] ( main:6::queen:17::print:198::printf_uchar:213 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [238] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::queen:17::print:198::printf_uchar:213::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i1#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queen:17::print:198::printf_uchar:224::uctoa:229::uctoa_append:248 [ queen::r queen::column count print::i#2 printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_ulong::uvalue#0 ] ( main:6::queen:17::print:198::printf_ulong:202 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_ulong::uvalue#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::value#1 ] ( main:6::queen:17::print:198::printf_ulong:202 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [272] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:6::queen:17::print:198::printf_ulong:202::ultoa:262::ultoa_append:283 [ queen::r queen::column count printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = count ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#2 ] ( main:6::queen:17::legal:184 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 ] { { legal::row#0 = queen::r } { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 [ diff::return#3 ] ( main:6::queen:17::legal:184::diff:303 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 diff::return#3 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:6::queen:17::legal:184::diff:308 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#3 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Statement [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 [ diff::return#2 ] ( main:6::queen:17::legal:184::diff:303 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 diff::return#2 ] { { legal::row#0 = queen::r } { legal::return#0 = legal::return#4 } { diff::a#0 = diff::a#2 } { diff::b#0 = diff::b#2 legal::column#0 queen::column } { diff::return#0 = diff::return#4 } }  main:6::queen:17::legal:184::diff:308 [ printf_cursor_x printf_cursor_y printf_cursor_ptr count printf_buffer queen::r queen::column legal::row#0 legal::column#0 legal::i#2 legal::$3 diff::return#2 ] { { legal::column#0 = queen::column } { legal::return#0 = legal::return#4 } { diff::a#1 = diff::a#2 legal::i#2 } { diff::b#1 = diff::b#2 legal::row#0 queen::r } { diff::return#1 = diff::return#4 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printf_number_buffer::format_min_length#3 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ] : zp[1]:4 , reg byte x , 
Potential registers zp[2]:5 [ printf_number_buffer::buffer_digits#10 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:11 , reg byte x , 
Potential registers zp[1]:12 [ printf_padding::pad#5 ] : zp[1]:12 , reg byte x , 
Potential registers zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:15 [ memset::num#2 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ memset::str#3 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ memset::c#4 ] : zp[1]:19 , reg byte x , 
Potential registers zp[2]:20 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ memcpy::src#2 memcpy::src#1 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ memcpy::dst#2 memcpy::dst#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ strlen::len#2 strlen::len#1 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:35 , reg byte x , 
Potential registers zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] : zp[2]:36 , 
Potential registers zp[1]:38 [ utoa::started#2 utoa::started#4 ] : zp[1]:38 , reg byte x , reg byte y , 
Potential registers zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ print::i#2 print::i#1 ] : zp[1]:44 , reg byte x , 
Potential registers zp[1]:45 [ print::i1#2 print::i1#1 ] : zp[1]:45 , reg byte x , 
Potential registers zp[1]:46 [ print::j#2 print::j#1 ] : zp[1]:46 , reg byte x , 
Potential registers zp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:48 , reg byte x , 
Potential registers zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:53 , reg byte x , 
Potential registers zp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:55 , reg byte x , 
Potential registers zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] : zp[4]:56 , 
Potential registers zp[1]:60 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] : zp[2]:61 , 
Potential registers zp[4]:63 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:63 , 
Potential registers zp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:67 , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ legal::i#2 legal::i#1 ] : zp[1]:68 , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ legal::return#4 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ diff::b#2 diff::b#0 diff::b#1 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ diff::return#4 diff::return#2 diff::return#3 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ printf_cursor_x ] : zp[1]:73 , 
Potential registers zp[1]:74 [ printf_cursor_y ] : zp[1]:74 , 
Potential registers zp[2]:75 [ printf_cursor_ptr ] : zp[2]:75 , 
Potential registers zp[4]:77 [ count ] : zp[4]:77 , 
Potential registers zp[2]:81 [ strlen::return#2 ] : zp[2]:81 , 
Potential registers zp[2]:83 [ printf_number_buffer::$19 ] : zp[2]:83 , 
Potential registers zp[2]:85 [ printf_scroll::$4 ] : zp[2]:85 , 
Potential registers zp[2]:87 [ memset::end#0 ] : zp[2]:87 , 
Potential registers zp[1]:89 [ printf_str::ch#0 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:90 [ printf_ln::$0 ] : zp[2]:90 , 
Potential registers zp[2]:92 [ printf_ln::$1 ] : zp[2]:92 , 
Potential registers zp[1]:94 [ toupper::return#3 ] : zp[1]:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ strupr::$0 ] : zp[1]:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ utoa::$11 ] : zp[1]:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:97 [ utoa::buffer#3 ] : zp[2]:97 , 
Potential registers zp[1]:99 [ utoa::$10 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:100 [ utoa::digit_value#0 ] : zp[2]:100 , 
Potential registers zp[2]:102 [ utoa_append::buffer#0 ] : zp[2]:102 , 
Potential registers zp[2]:104 [ utoa_append::sub#0 ] : zp[2]:104 , 
Potential registers zp[2]:106 [ utoa_append::return#0 ] : zp[2]:106 , 
Potential registers zp[1]:108 [ queen::row#0 ] : zp[1]:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:109 [ queen::r ] : zp[1]:109 , 
Potential registers zp[1]:110 [ queen::column ] : zp[1]:110 , 
Potential registers zp[1]:111 [ legal::row#0 ] : zp[1]:111 , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ legal::column#0 ] : zp[1]:112 , reg byte x , reg byte y , 
Potential registers zp[1]:113 [ legal::return#0 ] : zp[1]:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:114 [ queen::$1 ] : zp[1]:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:115 [ queen::$4 ] : zp[1]:115 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:116 [ printf_ulong::uvalue#0 ] : zp[4]:116 , 
Potential registers zp[2]:120 [ uctoa::buffer#3 ] : zp[2]:120 , 
Potential registers zp[1]:122 [ uctoa::digit_value#0 ] : zp[1]:122 , reg byte x , reg byte y , 
Potential registers zp[2]:123 [ uctoa_append::buffer#0 ] : zp[2]:123 , 
Potential registers zp[1]:125 [ uctoa_append::sub#0 ] : zp[1]:125 , reg byte x , reg byte y , 
Potential registers zp[1]:126 [ uctoa_append::return#0 ] : zp[1]:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:127 [ ultoa::$11 ] : zp[1]:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:128 [ ultoa::buffer#3 ] : zp[2]:128 , 
Potential registers zp[1]:130 [ ultoa::$10 ] : zp[1]:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:131 [ ultoa::digit_value#0 ] : zp[4]:131 , 
Potential registers zp[2]:135 [ ultoa_append::buffer#0 ] : zp[2]:135 , 
Potential registers zp[4]:137 [ ultoa_append::sub#0 ] : zp[4]:137 , 
Potential registers zp[4]:141 [ ultoa_append::return#0 ] : zp[4]:141 , 
Potential registers zp[1]:145 [ legal::$0 ] : zp[1]:145 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:146 [ diff::return#0 ] : zp[1]:146 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:147 [ legal::$3 ] : zp[1]:147 , reg byte x , reg byte y , 
Potential registers zp[1]:148 [ diff::return#1 ] : zp[1]:148 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:149 [ legal::$4 ] : zp[1]:149 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 30,000,000,000,000,000,000,000,000,000,000,000,000,000,000: zp[2]:22 [ memcpy::src#2 memcpy::src#1 ] 20,000,000,000,000,000,000,000,000,000,000,000,000,000,000: zp[2]:24 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplift Scope [memset] 33,333,333,333,335,670,000,000,000,000,000,000,000,000,000: zp[2]:20 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,666,666,666,666,833,500,000,000,000,000,000,000,000,000: zp[2]:87 [ memset::end#0 ] 1,250,000,000,000,000,000,000,000,000,000,000,000,000,000: zp[1]:19 [ memset::c#4 ] 1,000,000,000,000,000,000,000,000,000,000: zp[2]:15 [ memset::num#2 ] 0: zp[2]:17 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,000,000,000,000,550,000,000,000,000,000,000,000,000: zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,000,000,000,000,500,000,000,000,000,000,000,000,000: zp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,333,333,333,333,350,000,000,000,000,000,000,000,000: zp[1]:125 [ uctoa_append::sub#0 ] 200,000,000,000,000,000,000,000,000: zp[1]:126 [ uctoa_append::return#0 ] 137,500,000,000,000,010,000,000,000: zp[2]:123 [ uctoa_append::buffer#0 ] 
Uplift Scope [printf_scroll] 200,000,000,000,000,000,000,000,000,000: zp[2]:85 [ printf_scroll::$4 ] 
Uplift Scope [toupper] 47,333,333,333,333,330,000,000,000,000: zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 2,000,000,000,000,000,000,000,000,000: zp[1]:94 [ toupper::return#3 ] 
Uplift Scope [printf_char] 13,300,000,000,000,300,000,000,000,000: zp[1]:14 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] 
Uplift Scope [ultoa_append] 2,500,000,000,000,550,000,000,000,000: zp[4]:63 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 2,000,000,000,000,500,000,000,000,000: zp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 333,333,333,333,350,000,000,000,000: zp[4]:137 [ ultoa_append::sub#0 ] 200,000,000,000,002: zp[4]:141 [ ultoa_append::return#0 ] 137,500,000,000,000.25: zp[2]:135 [ ultoa_append::buffer#0 ] 
Uplift Scope [strupr] 2,714,285,714,286,407,300,000,000,000: zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] 2,000,000,000,000,000,000,000,000,000: zp[1]:95 [ strupr::$0 ] 
Uplift Scope [strlen] 3,000,000,000,000,883,000,000,000,000: zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] 1,500,000,000,000,025,000,000,000,000: zp[2]:33 [ strlen::len#2 strlen::len#1 ] 200,000,000,000,002: zp[2]:81 [ strlen::return#2 ] 
Uplift Scope [printf_ln] 2,000,000,000,000,000,000,000,000,000: zp[2]:90 [ printf_ln::$0 ] 2,000,000,000,000,000,000,000,000,000: zp[2]:92 [ printf_ln::$1 ] 
Uplift Scope [] 2,025,157,232,704,402,300,000,000,000: zp[1]:74 [ printf_cursor_y ] 1,468,354,430,379,746,500,000,000,000: zp[2]:75 [ printf_cursor_ptr ] 283,783,783,783,783,800,000,000,000: zp[1]:73 [ printf_cursor_x ] 0.58: zp[4]:77 [ count ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [printf_padding] 2,750,000,000,000,000,400,000,000,000: zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ] 166,666,666,667,316,670,000,000,000: zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 166,666,666,666,666,660,000,000,000: zp[1]:12 [ printf_padding::pad#5 ] 
Uplift Scope [uctoa] 383,333,333,333,350,040,000,000,000: zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 316,666,666,666,755,000,000,000,000: zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 230,769,230,769,230,770,000,000,000: zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ] 160,000,000,000,000,000,000,000,000: zp[1]:50 [ uctoa::started#2 uctoa::started#4 ] 60,000,000,000,000,010,000,000,000: zp[1]:122 [ uctoa::digit_value#0 ] 200,000,000,000,002: zp[2]:120 [ uctoa::buffer#3 ] 
Uplift Scope [printf_str] 242,857,142,858,942,900,000,000,000: zp[2]:26 [ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ] 100,000,000,000,000,000,000,000,000: zp[1]:89 [ printf_str::ch#0 ] 
Uplift Scope [ultoa] 378,571,428,571,575.4: zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] 307,142,857,143,554.25: zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] 228,571,428,571,430.84: zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ] 200,000,000,000,002: zp[1]:130 [ ultoa::$10 ] 150,000,000,000,001.5: zp[1]:60 [ ultoa::started#2 ultoa::started#4 ] 60,000,000,000,000.59: zp[4]:131 [ ultoa::digit_value#0 ] 2,002: zp[1]:127 [ ultoa::$11 ] 2,002: zp[2]:128 [ ultoa::buffer#3 ] 
Uplift Scope [printf_number_buffer] 650,000,000,000,006.5: zp[1]:9 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 119,047,619,047,620.23: zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 100,000,000,000,001: zp[2]:83 [ printf_number_buffer::$19 ] 35,500,000,000,416.3: zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 10,344,827,586,207: zp[2]:5 [ printf_number_buffer::buffer_digits#10 ] 10,000,000,000,000.1: zp[1]:2 [ printf_number_buffer::format_min_length#3 ] 9,375,000,000,000.09: zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ] 6,451,612,903,225.87: zp[1]:3 [ printf_number_buffer::format_justify_left#10 ] 3,846,153,846,153.88: zp[1]:8 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [diff] 45,500,000,000,005: zp[1]:72 [ diff::return#4 diff::return#2 diff::return#3 ] 20,000,000,000,006.5: zp[1]:71 [ diff::b#2 diff::b#0 diff::b#1 ] 18,000,000,000,004.5: zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 ] 2,000,000,000,002: zp[1]:146 [ diff::return#0 ] 2,000,000,000,002: zp[1]:148 [ diff::return#1 ] 
Uplift Scope [print] 25,714,285,714,288.29: zp[1]:46 [ print::j#2 print::j#1 ] 3,000,000,000,003: zp[1]:44 [ print::i#2 print::i#1 ] 3,000,000,000,002.36: zp[1]:45 [ print::i1#2 print::i1#1 ] 
Uplift Scope [printf_uchar] 10,000,000,000,005.5: zp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] 
Uplift Scope [legal] 2,400,000,000,002.4: zp[1]:68 [ legal::i#2 legal::i#1 ] 2,000,000,000,002: zp[1]:145 [ legal::$0 ] 2,000,000,000,002: zp[1]:149 [ legal::$4 ] 333,333,333,333.67: zp[1]:147 [ legal::$3 ] 200,000,000,002: zp[1]:113 [ legal::return#0 ] 116,666,666,666.83: zp[1]:112 [ legal::column#0 ] 110,526,315,789.63: zp[1]:111 [ legal::row#0 ] 33,333,333,333.67: zp[1]:69 [ legal::return#4 ] 
Uplift Scope [queen] 200,000,000,002: zp[1]:114 [ queen::$1 ] 200,000,000,002: zp[1]:115 [ queen::$4 ] 29,411,764,706.82: zp[1]:110 [ queen::column ] 21,052,631,579.74: zp[1]:109 [ queen::r ] 22: zp[1]:108 [ queen::row#0 ] 
Uplift Scope [utoa_append] 25,055,003.5: zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,050,002.5: zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,335,000.5: zp[2]:104 [ utoa_append::sub#0 ] 20,002: zp[2]:106 [ utoa_append::return#0 ] 13,750.25: zp[2]:102 [ utoa_append::buffer#0 ] 
Uplift Scope [utoa] 38,003.93: zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 30,717.36: zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] 22,859.43: zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] 20,002: zp[1]:99 [ utoa::$10 ] 15,001.5: zp[1]:38 [ utoa::started#2 utoa::started#4 ] 6,000.6: zp[2]:100 [ utoa::digit_value#0 ] 2,002: zp[1]:96 [ utoa::$11 ] 2,002: zp[2]:97 [ utoa::buffer#3 ] 
Uplift Scope [printf_ulong] 37.33: zp[4]:116 [ printf_ulong::uvalue#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_cls] 
Uplift Scope [printf_uint] 
Uplift Scope [main] 

Limited combination testing to 100 combinations of 256 possible.
Limited combination testing to 100 combinations of 1024 possible.
Limited combination testing to 100 combinations of 20736 possible.
Attempting to uplift remaining variables inzp[1]:19 [ memset::c#4 ]
Attempting to uplift remaining variables inzp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Attempting to uplift remaining variables inzp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:125 [ uctoa_append::sub#0 ]
Attempting to uplift remaining variables inzp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Attempting to uplift remaining variables inzp[1]:14 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
Attempting to uplift remaining variables inzp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ]
Attempting to uplift remaining variables inzp[1]:74 [ printf_cursor_y ]
Attempting to uplift remaining variables inzp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:94 [ toupper::return#3 ]
Attempting to uplift remaining variables inzp[1]:95 [ strupr::$0 ]
Attempting to uplift remaining variables inzp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Attempting to uplift remaining variables inzp[1]:73 [ printf_cursor_x ]
Attempting to uplift remaining variables inzp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:126 [ uctoa_append::return#0 ]
Attempting to uplift remaining variables inzp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Attempting to uplift remaining variables inzp[1]:12 [ printf_padding::pad#5 ]
Attempting to uplift remaining variables inzp[1]:50 [ uctoa::started#2 uctoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:89 [ printf_str::ch#0 ]
Attempting to uplift remaining variables inzp[1]:122 [ uctoa::digit_value#0 ]
Attempting to uplift remaining variables inzp[1]:9 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Attempting to uplift remaining variables inzp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:130 [ ultoa::$10 ]
Attempting to uplift remaining variables inzp[1]:60 [ ultoa::started#2 ultoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Attempting to uplift remaining variables inzp[1]:72 [ diff::return#4 diff::return#2 diff::return#3 ]
Attempting to uplift remaining variables inzp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Attempting to uplift remaining variables inzp[1]:46 [ print::j#2 print::j#1 ]
Attempting to uplift remaining variables inzp[1]:71 [ diff::b#2 diff::b#0 diff::b#1 ]
Attempting to uplift remaining variables inzp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 ]
Attempting to uplift remaining variables inzp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Attempting to uplift remaining variables inzp[1]:2 [ printf_number_buffer::format_min_length#3 ]
Attempting to uplift remaining variables inzp[1]:4 [ printf_number_buffer::format_zero_padding#10 ]
Attempting to uplift remaining variables inzp[1]:3 [ printf_number_buffer::format_justify_left#10 ]
Attempting to uplift remaining variables inzp[1]:8 [ printf_number_buffer::format_upper_case#10 ]
Attempting to uplift remaining variables inzp[1]:44 [ print::i#2 print::i#1 ]
Attempting to uplift remaining variables inzp[1]:45 [ print::i1#2 print::i1#1 ]
Attempting to uplift remaining variables inzp[1]:68 [ legal::i#2 legal::i#1 ]
Attempting to uplift remaining variables inzp[1]:145 [ legal::$0 ]
Attempting to uplift remaining variables inzp[1]:146 [ diff::return#0 ]
Attempting to uplift remaining variables inzp[1]:148 [ diff::return#1 ]
Attempting to uplift remaining variables inzp[1]:149 [ legal::$4 ]
Attempting to uplift remaining variables inzp[1]:147 [ legal::$3 ]
Attempting to uplift remaining variables inzp[1]:113 [ legal::return#0 ]
Attempting to uplift remaining variables inzp[1]:114 [ queen::$1 ]
Attempting to uplift remaining variables inzp[1]:115 [ queen::$4 ]
Attempting to uplift remaining variables inzp[1]:112 [ legal::column#0 ]
Attempting to uplift remaining variables inzp[1]:111 [ legal::row#0 ]
Attempting to uplift remaining variables inzp[1]:69 [ legal::return#4 ]
Attempting to uplift remaining variables inzp[1]:110 [ queen::column ]
Attempting to uplift remaining variables inzp[1]:109 [ queen::r ]
Attempting to uplift remaining variables inzp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ]
Attempting to uplift remaining variables inzp[1]:35 [ utoa::digit#2 utoa::digit#1 ]
Attempting to uplift remaining variables inzp[1]:99 [ utoa::$10 ]
Attempting to uplift remaining variables inzp[1]:38 [ utoa::started#2 utoa::started#4 ]
Attempting to uplift remaining variables inzp[1]:96 [ utoa::$11 ]
Attempting to uplift remaining variables inzp[1]:127 [ ultoa::$11 ]
Attempting to uplift remaining variables inzp[1]:108 [ queen::row#0 ]
Coalescing zero page register [ zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 ] ] with [ zp[1]:72 [ diff::return#4 diff::return#2 diff::return#3 ] ] - score: 2
Coalescing zero page register [ zp[2]:75 [ printf_cursor_ptr ] ] with [ zp[2]:85 [ printf_scroll::$4 ] ] - score: 2
Coalescing zero page register [ zp[1]:2 [ printf_number_buffer::format_min_length#3 ] ] with [ zp[1]:10 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ printf_number_buffer::buffer_digits#10 ] ] with [ zp[2]:26 [ printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:12 [ printf_padding::pad#5 ] ] with [ zp[1]:14 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ memset::num#2 ] ] with [ zp[2]:87 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ memset::str#3 ] ] with [ zp[2]:20 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] ] with [ zp[1]:94 [ toupper::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:81 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 ] ] with [ zp[2]:41 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:106 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:97 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:102 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:44 [ print::i#2 print::i#1 ] ] with [ zp[1]:47 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] ] with [ zp[1]:53 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] ] with [ zp[1]:126 [ uctoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:120 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:123 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] ] with [ zp[4]:63 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:116 [ printf_ulong::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:56 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ] ] with [ zp[4]:141 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] ] with [ zp[2]:128 [ ultoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ] ] with [ zp[2]:135 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:69 [ legal::return#4 ] ] with [ zp[1]:113 [ legal::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:75 [ printf_cursor_ptr printf_scroll::$4 ] ] with [ zp[2]:90 [ printf_ln::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:75 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 ] ] with [ zp[2]:92 [ printf_ln::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:100 [ utoa::digit_value#0 ] ] with [ zp[2]:104 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ queen::row#0 ] ] with [ zp[1]:109 [ queen::r ] ] - score: 1
Coalescing zero page register [ zp[1]:110 [ queen::column ] ] with [ zp[1]:112 [ legal::column#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:122 [ uctoa::digit_value#0 ] ] with [ zp[1]:125 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:131 [ ultoa::digit_value#0 ] ] with [ zp[4]:137 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:146 [ diff::return#0 ] ] with [ zp[1]:147 [ legal::$3 ] ] - score: 1
Coalescing zero page register [ zp[1]:148 [ diff::return#1 ] ] with [ zp[1]:149 [ legal::$4 ] ] - score: 1
Coalescing zero page register [ zp[1]:12 [ printf_padding::pad#5 printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] ] with [ zp[1]:89 [ printf_str::ch#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 ] ] with [ zp[1]:95 [ strupr::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:83 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[1]:44 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] ] with [ zp[1]:45 [ print::i1#2 print::i1#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:69 [ legal::return#4 legal::return#0 ] ] with [ zp[1]:114 [ queen::$1 ] ] - score: 1
Coalescing zero page register [ zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 ] ] with [ zp[1]:148 [ diff::return#1 legal::$4 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ queen::row#0 queen::r ] ] with [ zp[1]:111 [ legal::row#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:108 [ queen::row#0 queen::r legal::row#0 ] ] with [ zp[1]:115 [ queen::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ memcpy::src#2 memcpy::src#1 ] ] with [ zp[2]:15 [ memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:24 [ memcpy::dst#2 memcpy::dst#1 ] ] with [ zp[2]:17 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 ] ] with [ zp[1]:11 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ]
Coalescing zero page register [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 ] ] with [ zp[2]:28 [ strupr::src#2 strupr::str#0 strupr::src#1 ] ]
Coalescing zero page register [ zp[1]:35 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:2 [ printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:5 [ printf_number_buffer::buffer_digits#10 printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ] ]
Coalescing zero page register [ zp[1]:38 [ utoa::started#2 utoa::started#4 ] ] with [ zp[1]:3 [ printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:33 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 ] ] with [ zp[1]:4 [ printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[1]:46 [ print::j#2 print::j#1 ] ] with [ zp[1]:7 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 ] ] with [ zp[1]:8 [ printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 ] ] with [ zp[1]:9 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] ]
Coalescing zero page register [ zp[1]:50 [ uctoa::started#2 uctoa::started#4 ] ] with [ zp[1]:12 [ printf_padding::pad#5 printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 printf_str::ch#0 ] ]
Coalescing zero page register [ zp[1]:54 [ uctoa_append::digit#2 uctoa_append::digit#1 ] ] with [ zp[1]:13 [ printf_padding::i#2 printf_padding::i#1 ] ]
Coalescing zero page register [ zp[1]:55 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:19 [ memset::c#4 ] ]
Coalescing zero page register [ zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ] with [ zp[2]:51 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[1]:68 [ legal::i#2 legal::i#1 ] ] with [ zp[1]:44 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 ] ]
Coalescing zero page register [ zp[1]:69 [ legal::return#4 legal::return#0 queen::$1 ] ] with [ zp[1]:60 [ ultoa::started#2 ultoa::started#4 ] ]
Coalescing zero page register [ zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ] ] with [ zp[1]:67 [ ultoa_append::digit#2 ultoa_append::digit#1 ] ]
Coalescing zero page register [ zp[1]:96 [ utoa::$11 ] ] with [ zp[1]:71 [ diff::b#2 diff::b#0 diff::b#1 ] ]
Coalescing zero page register [ zp[1]:108 [ queen::row#0 queen::r legal::row#0 queen::$4 ] ] with [ zp[1]:99 [ utoa::$10 ] ]
Coalescing zero page register [ zp[1]:127 [ ultoa::$11 ] ] with [ zp[1]:122 [ uctoa::digit_value#0 uctoa_append::sub#0 ] ]
Coalescing zero page register [ zp[1]:145 [ legal::$0 ] ] with [ zp[1]:130 [ ultoa::$10 ] ]
Coalescing zero page register [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 ] ] with [ zp[2]:22 [ memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:39 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:24 [ memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:49 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] ] with [ zp[1]:30 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ]
Coalescing zero page register [ zp[2]:61 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:36 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ] ]
Coalescing zero page register [ zp[1]:69 [ legal::return#4 legal::return#0 queen::$1 ultoa::started#2 ultoa::started#4 ] ] with [ zp[1]:35 [ utoa::digit#2 utoa::digit#1 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ultoa_append::digit#2 ultoa_append::digit#1 ] ] with [ zp[1]:38 [ utoa::started#2 utoa::started#4 printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[1]:96 [ utoa::$11 diff::b#2 diff::b#0 diff::b#1 ] ] with [ zp[1]:43 [ utoa_append::digit#2 utoa_append::digit#1 printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[1]:145 [ legal::$0 ultoa::$10 ] ] with [ zp[1]:48 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:146 [ diff::return#0 legal::$3 ] ] with [ zp[1]:46 [ print::j#2 print::j#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[2]:100 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:31 [ strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[1]:127 [ ultoa::$11 uctoa::digit_value#0 uctoa_append::sub#0 ] ] with [ zp[1]:70 [ diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ultoa_append::digit#2 ultoa_append::digit#1 utoa::started#2 utoa::started#4 printf_number_buffer::format_justify_left#10 ] ]
Allocated (was zp[2]:39) zp[2]:2 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:49) zp[1]:4 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated (was zp[1]:50) zp[1]:5 [ uctoa::started#2 uctoa::started#4 printf_padding::pad#5 printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 printf_str::ch#0 ]
Allocated (was zp[1]:54) zp[1]:6 [ uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[1]:55) zp[1]:7 [ ultoa::digit#2 ultoa::digit#1 memset::c#4 ]
Allocated (was zp[4]:56) zp[4]:8 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 ]
Allocated (was zp[2]:61) zp[2]:12 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ]
Allocated (was zp[1]:68) zp[1]:14 [ legal::i#2 legal::i#1 print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 ]
Allocated (was zp[1]:69) zp[1]:15 [ legal::return#4 legal::return#0 queen::$1 ultoa::started#2 ultoa::started#4 utoa::digit#2 utoa::digit#1 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated (was zp[1]:73) zp[1]:16 [ printf_cursor_x ]
Allocated (was zp[1]:74) zp[1]:17 [ printf_cursor_y ]
Allocated (was zp[2]:75) zp[2]:18 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 printf_ln::$1 ]
Allocated (was zp[4]:77) zp[4]:20 [ count ]
Allocated (was zp[1]:96) zp[1]:24 [ utoa::$11 diff::b#2 diff::b#0 diff::b#1 utoa_append::digit#2 utoa_append::digit#1 printf_number_buffer::format_zero_padding#10 ]
Allocated (was zp[2]:100) zp[2]:25 [ utoa::digit_value#0 utoa_append::sub#0 strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
Allocated (was zp[1]:108) zp[1]:27 [ queen::row#0 queen::r legal::row#0 queen::$4 utoa::$10 ]
Allocated (was zp[1]:110) zp[1]:28 [ queen::column legal::column#0 ]
Allocated (was zp[1]:127) zp[1]:29 [ ultoa::$11 uctoa::digit_value#0 uctoa_append::sub#0 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ultoa_append::digit#2 ultoa_append::digit#1 utoa::started#2 utoa::started#4 printf_number_buffer::format_justify_left#10 ]
Allocated (was zp[4]:131) zp[4]:30 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
Allocated (was zp[1]:145) zp[1]:34 [ legal::$0 ultoa::$10 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[1]:146) zp[1]:35 [ diff::return#0 legal::$3 print::j#2 print::j#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = $10
  .label printf_cursor_y = $11
  .label printf_cursor_ptr = $12
  .label count = $14
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  jmp __b2
  // @2
__b2:
  // [4] (dword) count ← (dword) 0 -- vduz1=vduc1 
  // The number of found solutions
  lda #<0
  sta.z count
  lda #>0
  sta.z count+1
  lda #<0>>$10
  sta.z count+2
  lda #>0>>$10
  sta.z count+3
  // [5] phi from @2 to @3 [phi:@2->@3]
__b3_from___b2:
  jmp __b3
  // @3
__b3:
  // [6] call main 
  // [8] phi from @3 to main [phi:@3->main]
main_from___b3:
  jsr main
  // [7] phi from @3 to @end [phi:@3->@end]
__bend_from___b3:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call printf_cls 
    // [171] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call printf_str 
    // [104] phi from main::@1 to printf_str [phi:main::@1->printf_str]
  printf_str_from___b1:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str [phi:main::@1->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call printf_str 
    // [104] phi from main::@2 to printf_str [phi:main::@2->printf_str]
  printf_str_from___b2:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str1 [phi:main::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_uint 
    // [20] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [16] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [17] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    jmp __breturn
    // main::@return
  __breturn:
    // [19] return 
    rts
    str: .text " - n queens problem using backtracking -"
    .byte 0
    str1: .text @"\nNumber of queens:"
    .byte 0
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = 8
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    jmp __b1
    // printf_uint::@1
  __b1:
    // [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [22] call utoa 
  // Format number into buffer
    // [143] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [23] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [24] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [25] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($23) buffer_sign, byte* zp($c) buffer_digits, byte zp($f) format_min_length, byte zp($1d) format_justify_left, byte zp($18) format_zero_padding, byte zp($22) format_upper_case)
printf_number_buffer: {
    .label __19 = 2
    .label buffer_sign = $23
    .label len = 4
    .label padding = $f
    .label format_min_length = $f
    .label format_zero_padding = $18
    .label format_justify_left = $1d
    .label buffer_digits = $c
    .label format_upper_case = $22
    // [27] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [29] call strlen 
    // [137] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [30] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [33] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [34] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [35] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [35] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz1_minus_vbsz2 
    lda.z padding
    sec
    sbc.z len
    sta.z padding
    // [37] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [39] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [38] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [39] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [40] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [41] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [42] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [43] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [63] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [45] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [46] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z printf_char.ch
    // [47] call printf_char 
    // [70] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
  printf_char_from___b9:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [48] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [49] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [50] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [51] call printf_padding 
    // [63] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [63] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [52] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [54] call strupr 
    // [122] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
    // [56] call printf_str 
    // [104] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
  printf_str_from___b5:
    // [104] phi (byte*) printf_str::str#11 = (byte*) printf_str::str#1 [phi:printf_number_buffer::@5->printf_str#0] -- register_copy 
    jsr printf_str
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [57] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [58] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [59] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [60] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [61] call printf_padding 
    // [63] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [62] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(5) pad, byte zp(4) length)
printf_padding: {
    .label i = 6
    .label length = 4
    .label pad = 5
    // [64] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [64] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [65] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [66] return 
    rts
    // printf_padding::@2
  __b2:
    // [67] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
    // [68] call printf_char 
    // [70] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [69] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [64] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [64] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp(5) ch)
printf_char: {
    .label ch = 5
    // [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_cursor_ptr),y
    // [72] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [73] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [75] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [76] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [77] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [78] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $12
    // [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [80] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
  __b1_from_printf_scroll:
    jmp __b1
    // printf_scroll::@1
  __b1:
    // [81] call memcpy 
    // [97] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [82] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
  __b2_from___b1:
    jmp __b2
    // printf_scroll::@2
  __b2:
    // [83] call memset 
    // [88] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
  memset_from___b2:
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_scroll::@3
  __b3:
    // [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __4
    sec
    sbc #<$28
    sta.z __4
    lda.z __4+1
    sbc #>$28
    sta.z __4+1
    // [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
    // [86] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_scroll::@return
  __breturn:
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(2) str, byte zp(7) c, word zp($19) num)
memset: {
    .label end = $19
    .label dst = 2
    .label num = $19
    .label str = 2
    .label c = 7
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [94] return 
    rts
    // memset::@3
  __b3:
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = 2
    .label src = $19
    // [98] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [98] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [98] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [100] return 
    rts
    // memcpy::@2
  __b2:
    // [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [102] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [103] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [98] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [98] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [98] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($c) str)
printf_str: {
    .label ch = 5
    .label str = $c
    // [105] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [105] phi (byte*) printf_str::str#10 = (byte*) printf_str::str#11 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [107] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [108] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [109] return 
    rts
    // printf_str::@3
  __b3:
    // [110] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z ch
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [111] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [112] call printf_char 
    // [70] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [113] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [114] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $12
    .label __1 = $12
    // [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // [118] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [119] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [120] call printf_scroll 
    jsr printf_scroll
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [121] return 
    rts
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($19) str)
strupr: {
    .label __0 = 4
    .label src = $19
    .label str = $19
    // [123] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
  __b1_from_strupr:
  __b1_from___b3:
    // [123] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
    // strupr::@1
  __b1:
    // [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [125] return 
    rts
    // strupr::@2
  __b2:
    // [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [127] call toupper 
    jsr toupper
    // [128] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [129] (byte~) strupr::$0 ← (byte) toupper::return#3
    // [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [131] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b3
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp(4) ch)
toupper: {
    .label return = 4
    .label ch = 4
    // [132] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [133] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [135] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [135] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [136] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($19) str)
strlen: {
    .label len = 2
    .label str = $19
    .label return = 2
    // [138] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [138] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [140] return 
    rts
    // strlen::@2
  __b2:
    // [141] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [142] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [138] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [138] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($c) value, byte* zp(2) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $1b
    .label __11 = $18
    .label digit_value = $19
    .label buffer = 2
    .label digit = $f
    .label value = $c
    .label started = $1d
    // [144] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [144] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [144] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [144] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [144] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [145] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [149] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [150] return 
    rts
    // utoa::@2
  __b2:
    // [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [153] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [155] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [155] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [156] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [144] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [144] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [144] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [144] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [144] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [158] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [160] call utoa_append 
    // [164] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [162] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [163] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [155] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [155] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(2) buffer, word zp($c) value, word zp($19) sub)
utoa_append: {
    .label buffer = 2
    .label value = $c
    .label sub = $19
    .label return = $c
    .label digit = $18
    // [165] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [165] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [168] return 
    rts
    // utoa_append::@2
  __b2:
    // [169] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [165] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [165] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [172] call memset 
    // [88] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [173] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [174] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [175] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [176] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($1b) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $1b
    .label column = $1c
    .label __1 = $f
    .label __4 = $1b
    .label row = $1b
    // [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // [178] (byte) queen::r ← (byte) queen::row#0
    // [179] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    jmp __b1
    // queen::@1
  __b1:
    // [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    jmp __breturn
    // queen::@return
  __breturn:
    // [181] return 
    rts
    // queen::@2
  __b2:
    // [182] (byte) legal::row#0 ← (byte) queen::r
    // [183] (byte) legal::column#0 ← (byte) queen::column
    // [184] call legal 
    // [294] phi from queen::@2 to legal [phi:queen::@2->legal]
  legal_from___b2:
    jsr legal
    // [185] (byte) legal::return#0 ← (byte) legal::return#4
    jmp __b7
    // queen::@7
  __b7:
    // [186] (byte~) queen::$1 ← (byte) legal::return#0
    // [187] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    jmp __b5
    // queen::@5
  __b5:
    // [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // [189] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4_from___b5
    jmp __b6
    // queen::@6
  __b6:
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    lda r
    pha
    // [191] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z __4
    // [192] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [193] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    jmp __b3
    // queen::@3
  __b3:
    // [196] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // [197] phi from queen::@5 to queen::@4 [phi:queen::@5->queen::@4]
  __b4_from___b5:
    jmp __b4
    // queen::@4
  __b4:
    // [198] call print 
    // we are done! Print the board configuration
    jsr print
    jmp __b3
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = $e
    .label i1 = $e
    .label j = $23
    // [199] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [200] call printf_str 
    // [104] phi from print to printf_str [phi:print->printf_str]
  printf_str_from_print:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str [phi:print->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b11
    // print::@11
  __b11:
    // [201] (dword) printf_ulong::uvalue#0 ← (dword) count -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [202] call printf_ulong 
    // [259] phi from print::@11 to printf_ulong [phi:print::@11->printf_ulong]
  printf_ulong_from___b11:
    jsr printf_ulong
    // [203] phi from print::@11 to print::@12 [phi:print::@11->print::@12]
  __b12_from___b11:
    jmp __b12
    // print::@12
  __b12:
    // [204] call printf_str 
    // [104] phi from print::@12 to printf_str [phi:print::@12->printf_str]
  printf_str_from___b12:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str1 [phi:print::@12->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [205] phi from print::@12 to print::@1 [phi:print::@12->print::@1]
  __b1_from___b12:
    // [205] phi (byte) print::i#2 = (byte) 1 [phi:print::@12->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [206] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [207] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [207] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [208] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [209] return 
    rts
    // [210] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [211] call printf_str 
    // [104] phi from print::@4 to printf_str [phi:print::@4->printf_str]
  printf_str_from___b4:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str2 [phi:print::@4->printf_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z printf_str.str
    lda #>str2
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b14
    // print::@14
  __b14:
    // [212] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
    // [213] call printf_uchar 
    // [226] phi from print::@14 to printf_uchar [phi:print::@14->printf_uchar]
  printf_uchar_from___b14:
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@14->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [214] phi from print::@14 to print::@5 [phi:print::@14->print::@5]
  __b5_from___b14:
    // [214] phi (byte) print::j#2 = (byte) 1 [phi:print::@14->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [215] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [216] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [207] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [207] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [218] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [219] call printf_str 
    // [104] phi from print::@10 to printf_str [phi:print::@10->printf_str]
  printf_str_from___b10:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str4 [phi:print::@10->printf_str#0] -- pbuz1=pbuc1 
    lda #<str4
    sta.z printf_str.str
    lda #>str4
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b9
    // print::@9
  __b9:
    // [220] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [214] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [214] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [221] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [222] call printf_str 
    // [104] phi from print::@8 to printf_str [phi:print::@8->printf_str]
  printf_str_from___b8:
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str3 [phi:print::@8->printf_str#0] -- pbuz1=pbuc1 
    lda #<str3
    sta.z printf_str.str
    lda #>str3
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b9
    // print::@2
  __b2:
    // [223] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
    // [224] call printf_uchar 
    // [226] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b13
    // print::@13
  __b13:
    // [225] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [205] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [205] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@13->print::@1#0] -- register_copy 
    jmp __b1
    str: .text @"\n#"
    .byte 0
    str1: .text @":\n "
    .byte 0
    str2: .text @"\n"
    .byte 0
    str3: .text "Q"
    .byte 0
    str4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($e) uvalue)
printf_uchar: {
    .label uvalue = $e
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [228] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [229] call uctoa 
  // Format number into buffer
    // [233] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [230] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [231] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uchar::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [232] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp(4) value, byte* zp($c) buffer)
uctoa: {
    .label digit_value = $1d
    .label buffer = $c
    .label digit = $22
    .label value = 4
    .label started = 5
    // [234] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [234] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [234] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [235] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [238] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [239] return 
    rts
    // uctoa::@2
  __b2:
    // [240] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [241] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [242] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [243] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [244] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [234] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [234] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [234] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [246] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [247] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [248] call uctoa_append 
    // [252] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [249] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [250] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [251] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [243] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($c) buffer, byte zp(4) value, byte zp($1d) sub)
uctoa_append: {
    .label buffer = $c
    .label value = 4
    .label sub = $1d
    .label return = 4
    .label digit = 6
    // [253] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [253] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [254] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [256] return 
    rts
    // uctoa_append::@2
  __b2:
    // [257] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [253] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [253] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(8) uvalue)
printf_ulong: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
    // [262] call ultoa 
  // Format number into buffer
    // [266] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [263] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [264] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_ulong::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [265] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(8) value, byte* zp($c) buffer)
ultoa: {
    .const max_digits = $a
    .label __10 = $22
    .label __11 = $1d
    .label digit_value = $1e
    .label buffer = $c
    .label digit = 7
    .label value = 8
    .label started = $f
    // [267] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [267] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [267] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [268] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [272] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [273] return 
    rts
    // ultoa::@2
  __b2:
    // [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [276] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [278] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [279] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [267] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [267] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [267] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [283] call ultoa_append 
    // [287] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // [286] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [278] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($c) buffer, dword zp(8) value, dword zp($1e) sub)
ultoa_append: {
    .label buffer = $c
    .label value = 8
    .label sub = $1e
    .label return = 8
    .label digit = $1d
    // [288] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [288] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [291] return 
    rts
    // ultoa_append::@2
  __b2:
    // [292] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [288] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [288] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($1b) row, byte zp($1c) column)
legal: {
    .label __0 = $22
    .label __3 = $23
    .label __4 = $1d
    .label row = $1b
    .label column = $1c
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $f
    .label i = $e
    // [295] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [295] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // legal::@1
  __b1:
    // [296] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // [297] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    lda.z __0
    cmp.z i
    bcs __b2
    // [298] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [298] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return
    jmp __breturn
    // [298] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __breturn_from___b2:
  __breturn_from___b6:
    // [298] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return
    jmp __breturn
    // legal::@return
  __breturn:
    // [299] return 
    rts
    // legal::@2
  __b2:
    // [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [301] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda board,y
    sta.z diff.a
    // [302] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [303] call diff 
    // [313] phi from legal::@4 to diff [phi:legal::@4->diff]
  diff_from___b4:
    // [313] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // [304] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z diff.return
    jmp __b5
    // legal::@5
  __b5:
    // [305] (byte~) legal::$3 ← (byte) diff::return#0
    // [306] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [307] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [308] call diff 
    // [313] phi from legal::@5 to diff [phi:legal::@5->diff]
  diff_from___b5:
    // [313] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // [309] (byte) diff::return#1 ← (byte) diff::return#4
    jmp __b6
    // legal::@6
  __b6:
    // [310] (byte~) legal::$4 ← (byte) diff::return#1
    // [311] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __breturn_from___b6
    // legal::@3
  __b3:
    // [312] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [295] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [295] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($1d) a, byte zp($18) b)
diff: {
    .label a = $1d
    .label b = $18
    .label return = $23
    .label return_1 = $1d
    // [314] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    jmp __b2
    // diff::@2
  __b2:
    // [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z return_1
    sec
    sbc.z b
    sta.z return_1
    // [316] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
  __breturn_from___b1:
  __breturn_from___b2:
    // [316] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    jmp __breturn
    // diff::@return
  __breturn:
    // [317] return 
    rts
    // diff::@1
  __b1:
    // [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz1 
    lda.z b
    sec
    sbc.z return_1
    sta.z return_1
    jmp __breturn_from___b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda.z padding
Removing instruction ldy #0
Removing instruction lda #>0
Replacing instruction ldy.z __11 with TAY
Replacing instruction ldy #0 with TAY
Replacing instruction ldy.z __10 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Replacing instruction ldy.z __11 with TAY
Replacing instruction ldy #0 with TAY
Replacing instruction ldy.z __10 with TAY
Replacing instruction lda.z __0 with TXA
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b4_from___b3 with __b4
Replacing label __b1_from___b5 with __b2
Replacing label __b1_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b4_from___b5 with __b4
Replacing label __b4_from___b3 with __b4
Replacing label __b8_from___b6 with __b8
Replacing label __breturn_from___b2 with __breturn_from___b6
Replacing label __breturn_from___b1 with __breturn
Removing instruction __b1:
Removing instruction __b3_from___b2:
Removing instruction main_from___b3:
Removing instruction __bend_from___b3:
Removing instruction __b1_from_main:
Removing instruction printf_str_from___b1:
Removing instruction __b2_from___b1:
Removing instruction printf_str_from___b2:
Removing instruction __b3_from___b2:
Removing instruction printf_uint_from___b3:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction printf_str_from___b5:
Removing instruction printf_char_from___b2:
Removing instruction __b1_from_printf_scroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memset_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b1:
Removing instruction printf_char_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b1_from_strupr:
Removing instruction __b1_from___b3:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction legal_from___b2:
Removing instruction __b4_from___b5:
Removing instruction __b12_from___b11:
Removing instruction printf_str_from___b12:
Removing instruction __b4_from___b3:
Removing instruction printf_str_from___b4:
Removing instruction printf_uchar_from___b14:
Removing instruction __b10_from___b6:
Removing instruction printf_str_from___b10:
Removing instruction __b8_from___b6:
Removing instruction printf_str_from___b8:
Removing instruction printf_uchar_from___b2:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Removing instruction __breturn_from___b2:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __bend:
Removing instruction printf_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b6:
Removing instruction strlen_from___b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction printf_char_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction strupr_from___b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1:
Removing instruction __b1_from_memcpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction memset_from_printf_cls:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction printf_str_from_print:
Removing instruction __b11:
Removing instruction printf_ulong_from___b11:
Removing instruction __b12:
Removing instruction __b1_from___b12:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b5_from___b14:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b10:
Removing instruction __b5_from___b9:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction ultoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_legal:
Removing instruction __breturn_from___b1:
Removing instruction __b4:
Removing instruction diff_from___b4:
Removing instruction __b5:
Removing instruction diff_from___b5:
Removing instruction __b6:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __breturn_from___b6 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda r with TYA
Removing instruction ldy.z i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(const word) STACK_BASE = (word) $103
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(dword) count loadstore zp[4]:20 0.5833333333333333
(byte()) diff((byte) diff::a , (byte) diff::b)
(label) diff::@1
(label) diff::@2
(label) diff::@return
(byte) diff::a
(byte) diff::a#0 a zp[1]:29 1.000000000001E12
(byte) diff::a#1 a zp[1]:29 1.000000000001E12
(byte) diff::a#2 a zp[1]:29 1.60000000000025E13
(byte) diff::b
(byte) diff::b#0 b zp[1]:24 2.000000000002E12
(byte) diff::b#1 b zp[1]:24 2.000000000002E12
(byte) diff::b#2 b zp[1]:24 1.60000000000025E13
(byte) diff::return
(byte) diff::return#0 return zp[1]:35 2.000000000002E12
(byte) diff::return#1 return_1 zp[1]:29 2.000000000002E12
(byte) diff::return#2 return_1 zp[1]:29 2.0000000000002E13
(byte) diff::return#3 return_1 zp[1]:29 2.0000000000002E13
(byte) diff::return#4 return_1 zp[1]:29 5.500000000001E12
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 zp[1]:34 2.000000000002E12
(byte~) legal::$3 zp[1]:35 3.333333333336667E11
(byte~) legal::$4 zp[1]:29 2.000000000002E12
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@6
(label) legal::@return
(byte) legal::column
(byte) legal::column#0 column zp[1]:28 1.1666666666683334E11
(byte) legal::i
(byte) legal::i#1 i zp[1]:14 2.000000000002E12
(byte) legal::i#2 i zp[1]:14 4.0000000000039996E11
(byte) legal::return
(byte) legal::return#0 return zp[1]:15 2.00000000002E11
(byte) legal::return#4 return zp[1]:15 3.3333333333666668E10
(byte) legal::row
(byte) legal::row#0 row zp[1]:27 1.1052631578963158E11
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(const byte*) main::str[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::str1[(byte) $13]  = (byte*) "
Number of queens:"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(const void*) memcpy::destination#0 destination = (void*) 1024
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:2 1.0E43
(byte*) memcpy::dst#2 dst zp[2]:2 1.0E43
(word) memcpy::num
(const word) memcpy::num#0 num = (word)(number) $28*(number) $19-(number) $28
(void*) memcpy::return
(void*) memcpy::source
(const void*) memcpy::source#0 source = (void*)(number) $400+(number) $28
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:25 2.0E43
(byte*) memcpy::src#2 src zp[2]:25 1.0E43
(byte*) memcpy::src_end
(const byte*) memcpy::src_end#0 src_end = (byte*)(const void*) memcpy::source#0+(const word) memcpy::num#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 c zp[1]:7 1.25E42
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:2 2.0E43
(byte*) memset::dst#2 dst zp[2]:2 1.3333333333333668E43
(byte*) memset::dst#4 dst zp[2]:2 2.0E30
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:25 1.6666666666668335E42
(word) memset::num
(word) memset::num#2 num zp[2]:25 1.0E30
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:2
(void()) print()
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@2
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#1 i zp[1]:14 2.000000000002E12
(byte) print::i#2 i zp[1]:14 1.000000000001E12
(byte) print::i1
(byte) print::i1#1 i1 zp[1]:14 2.000000000002E12
(byte) print::i1#2 i1 zp[1]:14 1.0000000000003572E12
(byte) print::j
(byte) print::j#1 j zp[1]:35 2.0000000000002E13
(byte) print::j#2 j zp[1]:35 5.714285714286286E12
(const byte*) print::str[(byte) 3]  = (byte*) "
#"
(const byte*) print::str1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::str2[(byte) 2]  = (byte*) "
"
(const byte*) print::str3[(byte) 2]  = (byte*) "Q"
(const byte*) print::str4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(label) printf_char::@1
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0 ch zp[1]:5 2.0E27
(byte) printf_char::ch#1 ch zp[1]:5 2.0E26
(byte) printf_char::ch#2 ch zp[1]:5 2.00000000000002E14
(byte) printf_char::ch#3 ch zp[1]:5 1.11000000000001E28
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore zp[2]:18 1.4683544303797465E27
(byte) printf_cursor_x loadstore zp[1]:16 2.837837837837838E26
(byte) printf_cursor_y loadstore zp[1]:17 2.0251572327044023E27
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 zp[2]:18 2.0E27
(byte*~) printf_ln::$1 zp[2]:18 2.0E27
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 zp[2]:2 1.00000000000001E14
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#10 buffer_digits zp[2]:12 1.0344827586207E13
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:35 202.0
(byte) printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:35 202.0
(byte) printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:35 1.55000000000103E13
(byte) printf_number_buffer::buffer_sign#2 buffer_sign zp[1]:35 2.0000000000002E13
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:29 6.451612903225871E12
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 format_min_length zp[1]:15 1.00000000000001E13
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:34 3.846153846153885E12
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:24 9.375000000000094E12
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 len zp[1]:4 1.500000000000015E14
(signed byte) printf_number_buffer::len#1 len zp[1]:4 2.00000000000002E14
(signed byte) printf_number_buffer::len#2 len zp[1]:4 3.00000000000003E14
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 padding zp[1]:15 1.00000000000001E14
(signed byte) printf_number_buffer::padding#10 padding zp[1]:15 1.904761904761924E13
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:6 2.0E27
(byte) printf_padding::i#2 i zp[1]:6 7.500000000000001E26
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:4 2.00000000000002E14
(byte) printf_padding::length#1 length zp[1]:4 2.00000000000002E14
(byte) printf_padding::length#2 length zp[1]:4 2.00000000000002E14
(byte) printf_padding::length#4 length zp[1]:4 1.6666666666671665E26
(byte) printf_padding::pad
(byte) printf_padding::pad#5 pad zp[1]:5 1.6666666666666666E26
(void()) printf_scroll()
(byte*~) printf_scroll::$4 zp[2]:18 2.0E29
(label) printf_scroll::@1
(label) printf_scroll::@2
(label) printf_scroll::@3
(label) printf_scroll::@return
(void()) printf_str((byte*) printf_str::str)
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0 ch zp[1]:5 1.0E26
(byte*) printf_str::str
(byte*) printf_str::str#0 str zp[2]:12 4.285714285714285E25
(byte*) printf_str::str#1 str zp[2]:12 2.00000000000002E14
(byte*) printf_str::str#10 str zp[2]:12 2.000000000005E26
(byte*) printf_str::str#11 str zp[2]:12 1.100000000000002E15
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 uvalue zp[1]:14 2.000000000002E12
(byte) printf_uchar::uvalue#1 uvalue zp[1]:14 2.000000000002E12
(byte) printf_uchar::uvalue#2 uvalue zp[1]:14 6.0000000000015E12
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(const byte) printf_uint::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_uint::format_min_length
(const byte) printf_uint::format_min_length#0 format_min_length = (byte) 0
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(const byte) printf_uint::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_uint::format_zero_padding
(const byte) printf_uint::format_zero_padding#0 format_zero_padding = (byte) 0
(word) printf_uint::uvalue
(const word) printf_uint::uvalue#0 uvalue = (byte) 8
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(const byte) printf_ulong::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_ulong::format_min_length
(const byte) printf_ulong::format_min_length#0 format_min_length = (byte) 0
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(const byte) printf_ulong::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_ulong::format_zero_padding
(const byte) printf_ulong::format_zero_padding#0 format_zero_padding = (byte) 0
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 uvalue zp[4]:8 37.33333333333333
__stackcall (void()) queen((byte) queen::row)
(byte~) queen::$1 zp[1]:15 2.00000000002E11
(byte~) queen::$4 zp[1]:27 2.00000000002E11
(label) queen::@1
(label) queen::@2
(label) queen::@3
(label) queen::@4
(label) queen::@5
(label) queen::@6
(label) queen::@7
(label) queen::@return
(const byte) queen::OFFSET_STACK_ROW = (byte) 0
(byte) queen::column loadstore zp[1]:28 2.9411764706823532E10
(byte) queen::r loadstore zp[1]:27 2.1052631579736843E10
(byte) queen::row
(byte) queen::row#0 row zp[1]:27 22.0
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:2 1.0E27
(word) strlen::len#2 len zp[2]:2 5.00000000000025E26
(word) strlen::return
(word) strlen::return#2 return zp[2]:2 2.00000000000002E14
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:25 2.0E27
(byte*) strlen::str#1 str zp[2]:25 5.50000000000001E14
(byte*) strlen::str#2 str zp[2]:25 1.0000000000003332E27
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 zp[1]:4 2.0E27
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 src zp[2]:25 2.0E27
(byte*) strupr::src#2 src zp[2]:25 7.142857142858572E26
(byte*) strupr::str
(byte*) strupr::str#0 str zp[2]:25 5.50000000000001E14
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 ch zp[1]:4 1.6999999999999998E28
(byte) toupper::return
(byte) toupper::return#0 return zp[1]:4 2.0E28
(byte) toupper::return#2 return zp[1]:4 1.0333333333333333E28
(byte) toupper::return#3 return zp[1]:4 2.0E27
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:12 3.3333333333350004E25
(byte*) uctoa::buffer#14 buffer zp[2]:12 1.5000000000000002E26
(byte*) uctoa::buffer#3 buffer zp[2]:12 2.00000000000002E14
(byte*) uctoa::buffer#4 buffer zp[2]:12 2.0E26
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:34 2.0E26
(byte) uctoa::digit#2 digit zp[1]:34 3.076923076923077E25
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:29 6.000000000000001E25
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:5 6.000000000000001E25
(byte) uctoa::started#4 started zp[1]:5 1.0E26
(byte) uctoa::value
(byte) uctoa::value#0 value zp[1]:4 1.0E26
(byte) uctoa::value#1 value zp[1]:4 5.5000000000001E13
(byte) uctoa::value#2 value zp[1]:4 6.666666666670001E25
(byte) uctoa::value#6 value zp[1]:4 1.5000000000000002E26
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:12 1.3750000000000001E26
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 digit zp[1]:6 1.0E40
(byte) uctoa_append::digit#2 digit zp[1]:6 1.00000000000005E40
(byte) uctoa_append::return
(byte) uctoa_append::return#0 return zp[1]:4 2.0E26
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:29 3.33333333333335E39
(byte) uctoa_append::value
(byte) uctoa_append::value#0 value zp[1]:4 3.666666666666667E26
(byte) uctoa_append::value#1 value zp[1]:4 2.0E40
(byte) uctoa_append::value#2 value zp[1]:4 5.0000000000001833E39
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 zp[1]:34 2.00000000000002E14
(byte~) ultoa::$11 zp[1]:29 2002.0
(label) ultoa::@1
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 buffer zp[2]:12 2.8571428571571855E13
(byte*) ultoa::buffer#14 buffer zp[2]:12 1.500000000000015E14
(byte*) ultoa::buffer#3 buffer zp[2]:12 2002.0
(byte*) ultoa::buffer#4 buffer zp[2]:12 2.00000000000002E14
(byte) ultoa::digit
(byte) ultoa::digit#1 digit zp[1]:7 2.00000000000002E14
(byte) ultoa::digit#2 digit zp[1]:7 2.8571428571428855E13
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 digit_value zp[4]:30 6.000000000000059E13
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(const byte) ultoa::max_digits#1 max_digits = (byte) $a
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 started zp[1]:15 5.00000000000005E13
(byte) ultoa::started#4 started zp[1]:15 1.00000000000001E14
(dword) ultoa::value
(dword) ultoa::value#0 value zp[4]:8 1.00000000000001E14
(dword) ultoa::value#1 value zp[4]:8 551.0
(dword) ultoa::value#2 value zp[4]:8 5.714285714300071E13
(dword) ultoa::value#6 value zp[4]:8 1.500000000000015E14
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 buffer zp[2]:12 1.3750000000000025E14
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 digit zp[1]:29 1.0E27
(byte) ultoa_append::digit#2 digit zp[1]:29 1.0000000000005E27
(dword) ultoa_append::return
(dword) ultoa_append::return#0 return zp[4]:8 2.00000000000002E14
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 sub zp[4]:30 3.3333333333335E26
(dword) ultoa_append::value
(dword) ultoa_append::value#0 value zp[4]:8 3.666666666666674E14
(dword) ultoa_append::value#1 value zp[4]:8 2.0E27
(dword) ultoa_append::value#2 value zp[4]:8 5.0000000000018335E26
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 zp[1]:27 20002.0
(byte~) utoa::$11 zp[1]:24 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:2 3000.4285714285716
(byte*) utoa::buffer#14 buffer zp[2]:2 15001.5
(byte*) utoa::buffer#3 buffer zp[2]:2 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:2 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:15 20002.0
(byte) utoa::digit#2 digit zp[1]:15 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:25 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 started zp[1]:29 5000.5
(byte) utoa::started#4 started zp[1]:29 10001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:12 10001.0
(word) utoa::value#2 value zp[2]:12 5714.857142857143
(word) utoa::value#6 value zp[2]:12 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:2 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 digit zp[1]:24 1.0000001E7
(byte) utoa_append::digit#2 digit zp[1]:24 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:12 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:25 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:12 36667.33333333333
(word) utoa_append::value#1 value zp[2]:12 2.0000002E7
(word) utoa_append::value#2 value zp[2]:12 5018334.166666666

zp[2]:2 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[1]:4 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[1]:5 [ uctoa::started#2 uctoa::started#4 printf_padding::pad#5 printf_char::ch#3 printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 printf_str::ch#0 ]
zp[1]:6 [ uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ]
zp[1]:7 [ ultoa::digit#2 ultoa::digit#1 memset::c#4 ]
zp[4]:8 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 ]
zp[2]:12 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_number_buffer::buffer_digits#10 printf_str::str#10 printf_str::str#11 printf_str::str#1 printf_str::str#0 ]
zp[1]:14 [ legal::i#2 legal::i#1 print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 ]
zp[1]:15 [ legal::return#4 legal::return#0 queen::$1 ultoa::started#2 ultoa::started#4 utoa::digit#2 utoa::digit#1 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[1]:16 [ printf_cursor_x ]
zp[1]:17 [ printf_cursor_y ]
zp[2]:18 [ printf_cursor_ptr printf_scroll::$4 printf_ln::$0 printf_ln::$1 ]
zp[4]:20 [ count ]
zp[1]:24 [ utoa::$11 diff::b#2 diff::b#0 diff::b#1 utoa_append::digit#2 utoa_append::digit#1 printf_number_buffer::format_zero_padding#10 ]
zp[2]:25 [ utoa::digit_value#0 utoa_append::sub#0 strlen::str#2 strlen::str#1 strlen::str#0 strupr::src#2 strupr::str#0 strupr::src#1 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
zp[1]:27 [ queen::row#0 queen::r legal::row#0 queen::$4 utoa::$10 ]
zp[1]:28 [ queen::column legal::column#0 ]
zp[1]:29 [ ultoa::$11 uctoa::digit_value#0 uctoa_append::sub#0 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ultoa_append::digit#2 ultoa_append::digit#1 utoa::started#2 utoa::started#4 printf_number_buffer::format_justify_left#10 ]
zp[4]:30 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[1]:34 [ legal::$0 ultoa::$10 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_upper_case#10 ]
zp[1]:35 [ diff::return#0 legal::$3 print::j#2 print::j#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 2147483647

  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.  
//
// This is a recursive solution
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = $10
  .label printf_cursor_y = $11
  .label printf_cursor_ptr = $12
  .label count = $14
  // @begin
__bbegin:
  // @1
  // printf_cursor_x = 0
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // printf_cursor_y = 0
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  sta.z printf_cursor_y
  // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // @2
  // count = 0
  // [4] (dword) count ← (dword) 0 -- vduz1=vduc1 
  // The number of found solutions
  lda #<0
  sta.z count
  sta.z count+1
  lda #<0>>$10
  sta.z count+2
  lda #>0>>$10
  sta.z count+3
  // [5] phi from @2 to @3 [phi:@2->@3]
  // @3
  // [6] call main 
  // [8] phi from @3 to main [phi:@3->main]
  jsr main
  rts
  // [7] phi from @3 to @end [phi:@3->@end]
  // @end
  // main
main: {
    // printf_cls()
    // [9] call printf_cls 
    // [171] phi from main to printf_cls [phi:main->printf_cls]
    jsr printf_cls
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf(" - n queens problem using backtracking -")
    // [11] call printf_str 
    // [104] phi from main::@1 to printf_str [phi:main::@1->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str [phi:main::@1->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("\nNumber of queens:%u",QUEENS)
    // [13] call printf_str 
    // [104] phi from main::@2 to printf_str [phi:main::@2->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) main::str1 [phi:main::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf("\nNumber of queens:%u",QUEENS)
    // [15] call printf_uint 
    // [20] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
    jsr printf_uint
    // main::@4
    // queen(1)
    // [16] stackpush(byte) ← (byte) 1 -- _stackpushbyte_=vbuc1 
    lda #1
    pha
    // [17] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // main::@return
    // }
    // [19] return 
    rts
    str: .text " - n queens problem using backtracking -"
    .byte 0
    str1: .text @"\nNumber of queens:"
    .byte 0
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .label uvalue = 8
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [21] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [22] call utoa 
  // Format number into buffer
    // [143] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [23] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [24] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uint::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [25] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($23) buffer_sign, byte* zp($c) buffer_digits, byte zp($f) format_min_length, byte zp($1d) format_justify_left, byte zp($18) format_zero_padding, byte zp($22) format_upper_case)
printf_number_buffer: {
    .label __19 = 2
    .label buffer_sign = $23
    .label len = 4
    .label padding = $f
    .label format_min_length = $f
    .label format_zero_padding = $18
    .label format_justify_left = $1d
    .label buffer_digits = $c
    .label format_upper_case = $22
    // if(format.min_length)
    // [27] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b6
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [28] (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strlen.str
    lda.z buffer_digits+1
    sta.z strlen.str+1
    // [29] call strlen 
    // [137] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [30] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_number_buffer::@14
    // [31] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // len = (signed char)strlen(buffer.digits)
    // [32] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // if(buffer.sign)
    // [33] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [34] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [35] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [35] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [36] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz1_minus_vbsz2 
    lda.z padding
    sec
    sbc.z len
    sta.z padding
    // if(padding<0)
    // [37] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [39] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [38] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [39] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [39] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [40] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [41] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [42] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [43] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [44] call printf_padding 
    // [63] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [45] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // printf_char(buffer.sign)
    // [46] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z printf_char.ch
    // [47] call printf_char 
    // [70] phi from printf_number_buffer::@9 to printf_char [phi:printf_number_buffer::@9->printf_char]
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@9->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [48] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [49] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [50] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [51] call printf_padding 
    // [63] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [63] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [52] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [53] (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#10 -- pbuz1=pbuz2 
    lda.z buffer_digits
    sta.z strupr.str
    lda.z buffer_digits+1
    sta.z strupr.str+1
    // [54] call strupr 
    // [122] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // printf_number_buffer::@5
  __b5:
    // printf_str(buffer.digits)
    // [55] (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#10
    // [56] call printf_str 
    // [104] phi from printf_number_buffer::@5 to printf_str [phi:printf_number_buffer::@5->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (byte*) printf_str::str#1 [phi:printf_number_buffer::@5->printf_str#0] -- register_copy 
    jsr printf_str
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [57] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [58] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [59] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [60] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [61] call printf_padding 
    // [63] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [63] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [63] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [62] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(5) pad, byte zp(4) length)
printf_padding: {
    .label i = 6
    .label length = 4
    .label pad = 5
    // [64] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [64] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [65] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [66] return 
    rts
    // printf_padding::@2
  __b2:
    // printf_char(pad)
    // [67] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
    // [68] call printf_char 
    // [70] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [69] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [64] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [64] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp(5) ch)
printf_char: {
    .label ch = 5
    // *(printf_cursor_ptr++) = ch
    // [71] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_cursor_ptr),y
    // *(printf_cursor_ptr++) = ch;
    // [72] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // if(++printf_cursor_x==PRINTF_SCREEN_WIDTH)
    // [73] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [74] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    // printf_char::@1
    // printf_cursor_x = 0
    // [75] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // ++printf_cursor_y;
    // [76] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // printf_scroll()
    // [77] call printf_scroll 
    jsr printf_scroll
    // printf_char::@return
  __breturn:
    // }
    // [78] return 
    rts
}
  // printf_scroll
// Scroll the entire screen if the cursor is on the last line
printf_scroll: {
    .label __4 = $12
    // if(printf_cursor_y==PRINTF_SCREEN_HEIGHT)
    // [79] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [80] phi from printf_scroll to printf_scroll::@1 [phi:printf_scroll->printf_scroll::@1]
    // printf_scroll::@1
    // memcpy(PRINTF_SCREEN_ADDRESS, PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_WIDTH, PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH)
    // [81] call memcpy 
    // [97] phi from printf_scroll::@1 to memcpy [phi:printf_scroll::@1->memcpy]
    jsr memcpy
    // [82] phi from printf_scroll::@1 to printf_scroll::@2 [phi:printf_scroll::@1->printf_scroll::@2]
    // printf_scroll::@2
    // memset(PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH, ' ', PRINTF_SCREEN_WIDTH)
    // [83] call memset 
    // [88] phi from printf_scroll::@2 to memset [phi:printf_scroll::@2->memset]
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_scroll::@2->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_scroll::@2->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (byte) $28 [phi:printf_scroll::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // printf_scroll::@3
    // printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [84] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __4
    sec
    sbc #<$28
    sta.z __4
    lda.z __4+1
    sbc #>$28
    sta.z __4+1
    // printf_cursor_ptr = printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [85] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
    // printf_cursor_y--;
    // [86] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    // printf_scroll::@return
  __breturn:
    // }
    // [87] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(2) str, byte zp(7) c, word zp($19) num)
memset: {
    .label end = $19
    .label dst = 2
    .label num = $19
    .label str = 2
    .label c = 7
    // if(num>0)
    // [89] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [90] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [91] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [92] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [92] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [93] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [94] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [95] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [96] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = 2
    .label src = $19
    // [98] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
    // [98] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [98] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [99] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    // memcpy::@return
    // }
    // [100] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [101] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [102] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [103] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [98] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
    // [98] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [98] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp($c) str)
printf_str: {
    .label ch = 5
    .label str = $c
    // [105] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
    // [105] phi (byte*) printf_str::str#10 = (byte*) printf_str::str#11 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    // printf_str::@1
    // printf_str::@2
  __b2:
    // ch = *str++
    // [106] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [107] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch==0)
    // [108] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b3
    // printf_str::@return
    // }
    // [109] return 
    rts
    // printf_str::@3
  __b3:
    // if(ch=='\n')
    // [110] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z ch
    beq __b4
    // printf_str::@5
    // printf_char(ch)
    // [111] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [112] call printf_char 
    // [70] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
    // [70] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b2
    // [113] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
    // printf_str::@4
  __b4:
    // printf_ln()
    // [114] call printf_ln 
    jsr printf_ln
    jmp __b2
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $12
    .label __1 = $12
    // printf_cursor_ptr - printf_cursor_x
    // [115] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [116] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // printf_cursor_ptr =  printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [117] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // printf_cursor_x = 0
    // [118] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y++;
    // [119] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // printf_scroll()
    // [120] call printf_scroll 
    jsr printf_scroll
    // printf_ln::@return
    // }
    // [121] return 
    rts
}
  // strupr
// Converts a string to uppercase.
// strupr(byte* zp($19) str)
strupr: {
    .label __0 = 4
    .label src = $19
    .label str = $19
    // [123] phi from strupr strupr::@3 to strupr::@1 [phi:strupr/strupr::@3->strupr::@1]
    // [123] phi (byte*) strupr::src#2 = (byte*) strupr::str#0 [phi:strupr/strupr::@3->strupr::@1#0] -- register_copy 
    // strupr::@1
  __b1:
    // while(*src)
    // [124] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [125] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [126] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [127] call toupper 
    jsr toupper
    // [128] (byte) toupper::return#3 ← (byte) toupper::return#2
    // strupr::@3
    // [129] (byte~) strupr::$0 ← (byte) toupper::return#3
    // *src = toupper(*src)
    // [130] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // src++;
    // [131] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp(4) ch)
toupper: {
    .label return = 4
    .label ch = 4
    // if(ch>='a' && ch<='z')
    // [132] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [133] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [135] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [135] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [134] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    // toupper::@return
  __breturn:
    // }
    // [136] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($19) str)
strlen: {
    .label len = 2
    .label str = $19
    .label return = 2
    // [138] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [138] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    // strlen::@1
  __b1:
    // while(*str)
    // [139] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [140] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [141] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [142] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [138] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [138] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [138] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($c) value, byte* zp(2) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $1b
    .label __11 = $18
    .label digit_value = $19
    .label buffer = 2
    .label digit = $f
    .label value = $c
    .label started = $1d
    // [144] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [144] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [144] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [144] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [144] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [145] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [146] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [147] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [148] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [149] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [150] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [151] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [152] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [153] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // utoa::@7
    // [154] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [155] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [155] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [156] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [144] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [144] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [144] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [144] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [144] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [157] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [158] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [159] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [160] call utoa_append 
    // [164] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [161] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [162] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [163] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [155] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [155] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [155] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [155] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(2) buffer, word zp($c) value, word zp($19) sub)
utoa_append: {
    .label buffer = 2
    .label value = $c
    .label sub = $19
    .label return = $c
    .label digit = $18
    // [165] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [165] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [166] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [167] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [168] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [169] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [170] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [165] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [165] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [165] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // memset(PRINTF_SCREEN_ADDRESS, ' ', PRINTF_SCREEN_BYTES)
    // [172] call memset 
    // [88] phi from printf_cls to memset [phi:printf_cls->memset]
    // [88] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [88] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [88] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // printf_cls::@1
    // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
    // [173] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // printf_cursor_x = 0
    // [174] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y = 0
    // [175] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z printf_cursor_y
    // printf_cls::@return
    // }
    // [176] return 
    rts
}
  // queen
// Generates all valid placements of queens on a NxN board recursively
// Works by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then recursively generating all legal placements on the rows above.  
// queen(byte zp($1b) row)
queen: {
    .const OFFSET_STACK_ROW = 0
    .label r = $1b
    .label column = $1c
    .label __1 = $f
    .label __4 = $1b
    .label row = $1b
    // [177] (byte) queen::row#0 ← stackidx(byte,(const byte) queen::OFFSET_STACK_ROW) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_ROW,x
    sta.z row
    // r = row
    // [178] (byte) queen::r ← (byte) queen::row#0
    // column=1
    // [179] (byte) queen::column ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z column
    // queen::@1
  __b1:
    // for(__ma char column=1;column<=QUEENS;++column)
    // [180] if((byte) queen::column<(byte) 8+(byte) 1) goto queen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z column
    cmp #8+1
    bcc __b2
    // queen::@return
    // }
    // [181] return 
    rts
    // queen::@2
  __b2:
    // legal(r,column)
    // [182] (byte) legal::row#0 ← (byte) queen::r
    // [183] (byte) legal::column#0 ← (byte) queen::column
    // [184] call legal 
    // [294] phi from queen::@2 to legal [phi:queen::@2->legal]
    jsr legal
    // legal(r,column)
    // [185] (byte) legal::return#0 ← (byte) legal::return#4
    // queen::@7
    // [186] (byte~) queen::$1 ← (byte) legal::return#0
    // if(legal(r,column))
    // [187] if((byte) 0==(byte~) queen::$1) goto queen::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b3
    // queen::@5
    // board[r]=column
    // [188] *((const byte*) board + (byte) queen::r) ← (byte) queen::column -- pbuc1_derefidx_vbuz1=vbuz2 
    //no conflicts so place queen
    lda.z column
    ldy.z r
    sta board,y
    // if(r==QUEENS)
    // [189] if((byte) queen::r==(byte) 8) goto queen::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z r
    beq __b4
    // queen::@6
    // asm
    // asm { ldacolumn pha ldar pha  }
    // Perform recussive placement on rows above
    // Push the local vars on the stack (waiting for proper recursion support)
    lda column
    pha
    tya
    pha
    // r+1
    // [191] (byte~) queen::$4 ← (byte) queen::r + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z __4
    // queen(r+1)
    // [192] stackpush(byte) ← (byte~) queen::$4 -- _stackpushbyte_=vbuz1 
    // Do recursion        
    lda.z __4
    pha
    // [193] callexecute queen  -- jsr 
    jsr queen
    // sideeffect stackpullbytes((number) 1) -- _stackpullbyte_1 
    pla
    // asm
    // asm { pla star pla stacolumn  }
    // Pop the local vars on the stack (waiting for proper recursion support)
    pla
    sta r
    pla
    sta column
    // queen::@3
  __b3:
    // for(__ma char column=1;column<=QUEENS;++column)
    // [196] (byte) queen::column ← ++ (byte) queen::column -- vbuz1=_inc_vbuz1 
    inc.z column
    jmp __b1
    // [197] phi from queen::@5 to queen::@4 [phi:queen::@5->queen::@4]
    // queen::@4
  __b4:
    // print()
    // [198] call print 
    // we are done! Print the board configuration
    jsr print
    jmp __b3
}
  // print
// Print the board with a legal placement. Also increments the solution count.
print: {
    .label i = $e
    .label i1 = $e
    .label j = $23
    // printf("\n#%lu:\n ",++count);
    // [199] (dword) count ← ++ (dword) count -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // printf("\n#%lu:\n ",++count)
    // [200] call printf_str 
    // [104] phi from print to printf_str [phi:print->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str [phi:print->printf_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // print::@11
    // printf("\n#%lu:\n ",++count)
    // [201] (dword) printf_ulong::uvalue#0 ← (dword) count -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [202] call printf_ulong 
    // [259] phi from print::@11 to printf_ulong [phi:print::@11->printf_ulong]
    jsr printf_ulong
    // [203] phi from print::@11 to print::@12 [phi:print::@11->print::@12]
    // print::@12
    // printf("\n#%lu:\n ",++count)
    // [204] call printf_str 
    // [104] phi from print::@12 to printf_str [phi:print::@12->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str1 [phi:print::@12->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [205] phi from print::@12 to print::@1 [phi:print::@12->print::@1]
    // [205] phi (byte) print::i#2 = (byte) 1 [phi:print::@12->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // print::@1
  __b1:
    // for(char i=1;i<=QUEENS;++i)
    // [206] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [207] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
    // [207] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    // print::@3
  __b3:
    // for(char i=1;i<=QUEENS;++i)
    // [208] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4
    // print::@return
    // }
    // [209] return 
    rts
    // [210] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
    // print::@4
  __b4:
    // printf("\n%x",i)
    // [211] call printf_str 
    // [104] phi from print::@4 to printf_str [phi:print::@4->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str2 [phi:print::@4->printf_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z printf_str.str
    lda #>str2
    sta.z printf_str.str+1
    jsr printf_str
    // print::@14
    // printf("\n%x",i)
    // [212] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
    // [213] call printf_uchar 
    // [226] phi from print::@14 to printf_uchar [phi:print::@14->printf_uchar]
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@14->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [214] phi from print::@14 to print::@5 [phi:print::@14->print::@5]
    // [214] phi (byte) print::j#2 = (byte) 1 [phi:print::@14->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    // print::@5
  __b5:
    // for(char j=1;j<=QUEENS;++j)
    // [215] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    // print::@7
    // for(char i=1;i<=QUEENS;++i)
    // [216] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [207] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
    // [207] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // if(board[i]==j)
    // [217] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8
    // [218] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
    // print::@10
    // printf("-")
    // [219] call printf_str 
    // [104] phi from print::@10 to printf_str [phi:print::@10->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str4 [phi:print::@10->printf_str#0] -- pbuz1=pbuc1 
    lda #<str4
    sta.z printf_str.str
    lda #>str4
    sta.z printf_str.str+1
    jsr printf_str
    // print::@9
  __b9:
    // for(char j=1;j<=QUEENS;++j)
    // [220] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [214] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
    // [214] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [221] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
    // print::@8
  __b8:
    // printf("Q")
    // [222] call printf_str 
    // [104] phi from print::@8 to printf_str [phi:print::@8->printf_str]
    // [104] phi (byte*) printf_str::str#11 = (const byte*) print::str3 [phi:print::@8->printf_str#0] -- pbuz1=pbuc1 
    lda #<str3
    sta.z printf_str.str
    lda #>str3
    sta.z printf_str.str+1
    jsr printf_str
    jmp __b9
    // print::@2
  __b2:
    // printf("%x",i)
    // [223] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
    // [224] call printf_uchar 
    // [226] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
    // [226] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // print::@13
    // for(char i=1;i<=QUEENS;++i)
    // [225] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [205] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
    // [205] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@13->print::@1#0] -- register_copy 
    jmp __b1
    str: .text @"\n#"
    .byte 0
    str1: .text @":\n "
    .byte 0
    str2: .text @"\n"
    .byte 0
    str3: .text "Q"
    .byte 0
    str4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($e) uvalue)
printf_uchar: {
    .label uvalue = $e
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [227] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [228] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [229] call uctoa 
  // Format number into buffer
    // [233] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [230] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [231] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_uchar::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [232] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp(4) value, byte* zp($c) buffer)
uctoa: {
    .label digit_value = $1d
    .label buffer = $c
    .label digit = $22
    .label value = 4
    .label started = 5
    // [234] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [234] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [234] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [235] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [236] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [237] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [238] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [239] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [240] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [241] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // uctoa::@7
    // [242] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [243] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [244] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [234] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [234] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [234] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [234] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [234] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [245] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [246] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [247] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [248] call uctoa_append 
    // [252] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [249] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [250] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [251] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [243] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [243] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [243] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [243] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($c) buffer, byte zp(4) value, byte zp($1d) sub)
uctoa_append: {
    .label buffer = $c
    .label value = 4
    .label sub = $1d
    .label return = 4
    .label digit = 6
    // [253] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [253] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [254] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [255] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [256] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [257] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [258] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [253] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [253] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [253] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(8) uvalue)
printf_ulong: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    // printf_ulong::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [260] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // ultoa(uvalue, printf_buffer.digits, format.radix)
    // [261] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
    // [262] call ultoa 
  // Format number into buffer
    // [266] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
    jsr ultoa
    // printf_ulong::@2
    // printf_number_buffer(printf_buffer, format)
    // [263] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [264] call printf_number_buffer 
  // Print using format
    // [26] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
    // [26] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [26] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [26] phi (byte*) printf_number_buffer::buffer_digits#10 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_ulong::@2->printf_number_buffer#2] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z printf_number_buffer.buffer_digits+1
    // [26] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [26] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [26] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#5] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    // printf_ulong::@return
    // }
    // [265] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(8) value, byte* zp($c) buffer)
ultoa: {
    .const max_digits = $a
    .label __10 = $22
    .label __11 = $1d
    .label digit_value = $1e
    .label buffer = $c
    .label digit = 7
    .label value = 8
    .label started = $f
    // [267] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [267] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [267] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [268] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [269] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [270] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [271] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [272] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [273] return 
    rts
    // ultoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [274] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [275] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [276] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // ultoa::@7
    // [277] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [278] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [279] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [267] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [267] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [267] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [267] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [267] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [280] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [281] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [282] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [283] call ultoa_append 
    // [287] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [284] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [285] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [286] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [278] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [278] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [278] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [278] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($c) buffer, dword zp(8) value, dword zp($1e) sub)
ultoa_append: {
    .label buffer = $c
    .label value = 8
    .label sub = $1e
    .label return = 8
    .label digit = $1d
    // [288] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [288] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [289] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [290] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [291] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [292] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // value -= sub
    // [293] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [288] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [288] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [288] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($1b) row, byte zp($1c) column)
legal: {
    .label __0 = $22
    .label __3 = $23
    .label __4 = $1d
    .label row = $1b
    .label column = $1c
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $f
    .label i = $e
    // [295] phi from legal to legal::@1 [phi:legal->legal::@1]
    // [295] phi (byte) legal::i#2 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // legal::@1
  __b1:
    // row-1
    // [296] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // for(char i=1;i<=row-1;++i)
    // [297] if((byte) legal::i#2<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    txa
    cmp.z i
    bcs __b2
    // [298] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
    // [298] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return
    rts
    // [298] phi from legal::@2 legal::@6 to legal::@return [phi:legal::@2/legal::@6->legal::@return]
  __b4:
    // [298] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@6->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return
    // legal::@return
    // }
    // [299] return 
    rts
    // legal::@2
  __b2:
    // if(board[i]==column)
    // [300] if(*((const byte*) board + (byte) legal::i#2)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __b4
    // legal::@4
    // diff(board[i],column)
    // [301] (byte) diff::a#0 ← *((const byte*) board + (byte) legal::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda board,y
    sta.z diff.a
    // [302] (byte) diff::b#0 ← (byte) legal::column#0 -- vbuz1=vbuz2 
    lda.z column
    sta.z diff.b
    // [303] call diff 
    // [313] phi from legal::@4 to diff [phi:legal::@4->diff]
    // [313] phi (byte) diff::b#2 = (byte) diff::b#0 [phi:legal::@4->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#0 [phi:legal::@4->diff#1] -- register_copy 
    jsr diff
    // diff(board[i],column)
    // [304] (byte) diff::return#0 ← (byte) diff::return#4 -- vbuz1=vbuz2 
    lda.z diff.return_1
    sta.z diff.return
    // legal::@5
    // [305] (byte~) legal::$3 ← (byte) diff::return#0
    // diff(i,row)
    // [306] (byte) diff::a#1 ← (byte) legal::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z diff.a
    // [307] (byte) diff::b#1 ← (byte) legal::row#0 -- vbuz1=vbuz2 
    lda.z row
    sta.z diff.b
    // [308] call diff 
    // [313] phi from legal::@5 to diff [phi:legal::@5->diff]
    // [313] phi (byte) diff::b#2 = (byte) diff::b#1 [phi:legal::@5->diff#0] -- register_copy 
    // [313] phi (byte) diff::a#2 = (byte) diff::a#1 [phi:legal::@5->diff#1] -- register_copy 
    jsr diff
    // diff(i,row)
    // [309] (byte) diff::return#1 ← (byte) diff::return#4
    // legal::@6
    // [310] (byte~) legal::$4 ← (byte) diff::return#1
    // if(diff(board[i],column)==diff(i,row))
    // [311] if((byte~) legal::$3!=(byte~) legal::$4) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z __3
    cmp.z __4
    bne __b3
    jmp __b4
    // legal::@3
  __b3:
    // for(char i=1;i<=row-1;++i)
    // [312] (byte) legal::i#1 ← ++ (byte) legal::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [295] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
    // [295] phi (byte) legal::i#2 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
}
  // diff
// Find the absolute difference between two unsigned chars
// diff(byte zp($1d) a, byte zp($18) b)
diff: {
    .label a = $1d
    .label b = $18
    .label return = $23
    .label return_1 = $1d
    // if(a<b)
    // [314] if((byte) diff::a#2<(byte) diff::b#2) goto diff::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b1
    // diff::@2
    // return a-b;
    // [315] (byte) diff::return#3 ← (byte) diff::a#2 - (byte) diff::b#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z return_1
    sec
    sbc.z b
    sta.z return_1
    // [316] phi from diff::@1 diff::@2 to diff::@return [phi:diff::@1/diff::@2->diff::@return]
    // [316] phi (byte) diff::return#4 = (byte) diff::return#2 [phi:diff::@1/diff::@2->diff::@return#0] -- register_copy 
    // diff::@return
    // }
    // [317] return 
    rts
    // diff::@1
  __b1:
    // return b-a;
    // [318] (byte) diff::return#2 ← (byte) diff::b#2 - (byte) diff::a#2 -- vbuz1=vbuz2_minus_vbuz1 
    lda.z b
    sec
    sbc.z return_1
    sta.z return_1
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

