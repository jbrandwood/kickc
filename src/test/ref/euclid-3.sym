(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(byte()) euclid((byte) euclid::a , (byte) euclid::b)
(label) euclid::@1
(label) euclid::@2
(label) euclid::@3
(label) euclid::@4
(label) euclid::@return
(byte) euclid::a
(byte) euclid::a#0 a zp ZP_BYTE:2 1.3333333333333333
(byte) euclid::a#1 a zp ZP_BYTE:2 22.0
(byte) euclid::a#2 a zp ZP_BYTE:2 13.5
(byte) euclid::b
(byte) euclid::b#0 reg byte x 2.0
(byte) euclid::b#1 reg byte x 22.0
(byte) euclid::b#2 reg byte x 19.75
(byte) euclid::return
(byte) euclid::return#0 reg byte a 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:8 16.5
(byte*) memset::dst#2 dst zp ZP_WORD:8 16.5
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte x 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 4.0
(byte) print_byte::b#3 reg byte x 2.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#31 print_char_cursor zp ZP_WORD:6 6.0
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:6 0.9199999999999998
(byte*) print_char_cursor#51 print_char_cursor zp ZP_WORD:6 2.6666666666666665
(byte*) print_char_cursor#53 print_char_cursor zp ZP_WORD:6 6.0
(byte*~) print_char_cursor#64 print_char_cursor zp ZP_WORD:6 4.0
(byte*~) print_char_cursor#65 print_char_cursor zp ZP_WORD:6 4.0
(byte*~) print_char_cursor#66 print_char_cursor zp ZP_WORD:6 4.0
(byte*~) print_char_cursor#67 print_char_cursor zp ZP_WORD:6 4.0
(byte*~) print_char_cursor#68 print_char_cursor zp ZP_WORD:6 4.0
(void()) print_cls()
(label) print_cls::@return
(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
(label) print_euclid::@1
(label) print_euclid::@2
(label) print_euclid::@3
(label) print_euclid::@4
(label) print_euclid::@5
(label) print_euclid::@6
(label) print_euclid::@return
(byte) print_euclid::a
(byte) print_euclid::a#10 a zp ZP_BYTE:2 0.4444444444444444
(byte) print_euclid::b
(byte) print_euclid::b#10 b zp ZP_BYTE:3 0.4
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:4 3.533333333333333
(byte*) print_line_cursor#16 print_line_cursor zp ZP_WORD:4 24.0
(byte*) print_line_cursor#33 print_line_cursor zp ZP_WORD:4 0.7058823529411765
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen

zp ZP_BYTE:2 [ print_euclid::a#10 euclid::a#2 euclid::a#0 euclid::a#1 ]
zp ZP_BYTE:3 [ print_euclid::b#10 ]
zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]
reg byte x [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
reg byte a [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:6 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
reg byte x [ euclid::b#2 euclid::b#0 euclid::b#1 ]
zp ZP_WORD:8 [ memset::dst#2 memset::dst#1 ]
reg byte a [ euclid::return#0 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]
