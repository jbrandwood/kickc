
void main()
main: scope:[main]  from
  [0] phi()
  to:main::SEI1
main::SEI1: scope:[main]  from main
  asm { sei  }
  to:main::@11
main::@11: scope:[main]  from main::SEI1
  [2] phi()
  [3] call memoryRemap 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [4] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) | $40
  [5] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | $40
  [6] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_KEY) = $47
  [7] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_KEY) = $53
  [8] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO) = 0
  [9] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_HI) = 0
  [10] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TBDRPOS_LO) = 0
  [11] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TBDRPOS_HI) = 0
  [12] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_BBDRPOS_LO) = 0
  [13] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_BBDRPOS_HI) = 2
  [14] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLC) | 1
  [15] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) = *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CONTROLB) & $7f
  [16] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_LO) = $5a
  [17] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_HI) = 0
  [18] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO) = $28
  [19] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_HI) = 0
  [20] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHRCOUNT) = $2d
  [21] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOLO) = 0
  [22] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOHI) = byte1 SCREEN
  [23] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_HILO) = 0
  [24] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_HIHI) = 0
  [25] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOLO) = 0
  [26] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOHI) = byte1 CHARSET
  [27] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_HILO) = 0
  [28] call memset_dma 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [29] phi()
  [30] call memset_dma256 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [31] phi()
  [32] call memset_dma 
  to:main::@1
main::@1: scope:[main]  from main::@14 main::@5
  [33] main::erow#5 = phi( main::@14/SCREEN, main::@5/main::erow#1 )
  [33] main::r#2 = phi( main::@14/0, main::@5/main::r#1 )
  [34] if(main::r#2<$19) goto main::@2
  to:main::@6
main::@6: scope:[main]  from main::@1 main::@9
  [35] main::logo_dest#5 = phi( main::@9/main::logo_dest#1, main::@1/CHARSET )
  [35] main::logo_src#5 = phi( main::@9/main::logo_src#1, main::@1/LOGO )
  [35] main::col#2 = phi( main::@9/main::col#1, main::@1/0 )
  [36] if(main::col#2<$2d) goto main::@7
  to:main::@10
main::@10: scope:[main]  from main::@10 main::@6
  [37] *((byte*)VICIV+OFFSET_STRUCT_MEGA65_VICIV_BG_COLOR) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)
  to:main::@10
main::@7: scope:[main]  from main::@6 main::@8
  [38] main::y#2 = phi( main::@8/main::y#1, main::@6/0 )
  [39] if(main::y#2<$19*8) goto main::@8
  to:main::@9
main::@9: scope:[main]  from main::@7
  [40] main::logo_dest#1 = main::logo_dest#5 + (word)$20*8
  [41] main::logo_src#1 = main::logo_src#5 + $19*8
  [42] main::col#1 = ++ main::col#2
  to:main::@6
main::@8: scope:[main]  from main::@7
  [43] main::logo_dest#5[main::y#2] = main::logo_src#5[main::y#2]
  [44] main::y#1 = ++ main::y#2
  to:main::@7
main::@2: scope:[main]  from main::@1
  [45] main::c#0 = (word)main::r#2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [46] main::c#2 = phi( main::@2/main::c#0, main::@4/main::c#1 )
  [46] main::i#2 = phi( main::@2/0, main::@4/main::i#1 )
  [47] if(main::i#2<$2d) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [48] main::erow#1 = main::erow#5 + $2d*SIZEOF_WORD
  [49] main::r#1 = ++ main::r#2
  to:main::@1
main::@4: scope:[main]  from main::@3
  [50] main::$10 = main::i#2 << 1
  [51] main::erow#5[main::$10] = main::c#2
  [52] main::c#1 = main::c#2 + $20
  [53] main::i#1 = ++ main::i#2
  to:main::@3

void memoryRemap(byte memoryRemap::remapBlocks , word memoryRemap::lowerPageOffset , word memoryRemap::upperPageOffset)
memoryRemap: scope:[memoryRemap]  from main::@11
  [54] memoryRemap::aVal = 0
  [55] memoryRemap::xVal = 0
  [56] memoryRemap::yVal = 0
  [57] memoryRemap::zVal = 0
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [59] return 
  to:@return

void memset_dma(void* memset_dma::dest , byte memset_dma::fill , word memset_dma::num)
memset_dma: scope:[memset_dma]  from main::@12 main::@14
  [60] memset_dma::dest#2 = phi( main::@12/(void*)SCREEN, main::@14/(void*)CHARSET )
  [60] memset_dma::fill#2 = phi( main::@12/0, main::@14/$55 )
  [60] memset_dma::num#2 = phi( main::@12/(word)$2d*$19*2, main::@14/(word)$2d*$20*8 )
  [61] memset_dma::dmaMode#0 = *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B)
  [62] *((word*)&memset_dma_command+OFFSET_STRUCT_DMA_LIST_F018B_COUNT) = memset_dma::num#2
  [63] *((byte**)&memset_dma_command+OFFSET_STRUCT_DMA_LIST_F018B_SRC) = (byte*)memset_dma::fill#2
  [64] *((byte**)&memset_dma_command+OFFSET_STRUCT_DMA_LIST_F018B_DEST) = (byte*)memset_dma::dest#2
  [65] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B) = 1
  [66] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRMB) = 0
  [67] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRBANK) = 0
  [68] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRMSB) = byte1 &memset_dma_command
  [69] *((byte*)DMA) = byte0 &memset_dma_command
  [70] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B) = memset_dma::dmaMode#0
  to:memset_dma::@return
memset_dma::@return: scope:[memset_dma]  from memset_dma
  [71] return 
  to:@return

void memset_dma256(byte memset_dma256::dest_mb , byte memset_dma256::dest_bank , void* memset_dma256::dest , byte memset_dma256::fill , word memset_dma256::num)
memset_dma256: scope:[memset_dma256]  from main::@13
  [72] memset_dma256::dmaMode#0 = *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B)
  [73] *(memset_dma_command256+1) = memset_dma256::dest_mb#0
  [74] *((word*)memset_dma256::f018b#0+OFFSET_STRUCT_DMA_LIST_F018B_COUNT) = memset_dma256::num#0
  [75] *((byte*)memset_dma256::f018b#0+OFFSET_STRUCT_DMA_LIST_F018B_DEST_BANK) = memset_dma256::dest_bank#0
  [76] *((byte**)memset_dma256::f018b#0+OFFSET_STRUCT_DMA_LIST_F018B_DEST) = (byte*)memset_dma256::dest#0
  [77] *((byte**)memset_dma256::f018b#0+OFFSET_STRUCT_DMA_LIST_F018B_SRC) = (byte*)WHITE
  [78] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B) = 1
  [79] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRMB) = 0
  [80] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRBANK) = 0
  [81] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ADDRMSB) = byte1 memset_dma_command256
  [82] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_ETRIG) = byte0 memset_dma_command256
  [83] *((byte*)DMA+OFFSET_STRUCT_F018_DMAGIC_EN018B) = memset_dma256::dmaMode#0
  to:memset_dma256::@return
memset_dma256::@return: scope:[memset_dma256]  from memset_dma256
  [84] return 
  to:@return
