Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#5 = phi( __start::@1/idx#9 )
  main::$0 = A + 1
  SCREEN[idx#5] = main::$0
  idx#0 = ++ idx#5
  to:main::@return
main::@return: scope:[main]  from main
  idx#6 = phi( main/idx#0 )
  idx#1 = idx#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#2 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#9 = phi( __start::__init1/idx#2 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#7 = phi( __start::@1/idx#1 )
  idx#3 = idx#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#8 = phi( __start::@2/idx#3 )
  idx#4 = idx#8
  return 
  to:@return

SYMBOL TABLE SSA
const byte A = 'a'
const byte* SCREEN = (byte*)$400
void __start()
byte idx
byte idx#0
byte idx#1
byte idx#2
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
number~ main::$0

Adding number conversion cast (unumber) 1 in main::$0 = A + 1
Adding number conversion cast (unumber) main::$0 in main::$0 = A + (unumber)1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = A + 1
Alias idx#0 = idx#6 idx#1 
Alias idx#2 = idx#9 
Alias idx#3 = idx#7 idx#8 idx#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#5 idx#2
Identical Phi Values idx#3 idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [1] main::$0 = A + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = A+1
Constant idx#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [2] SCREEN[idx#2] = main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable idx#0 and assignment [1] idx#0 = ++ idx#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant idx#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$0 = A+1
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = A+1
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = A+1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the preprocessor
// Test macro recursion
  // Upstart
  // Commodore 64 PRG executable file
.file [name="preprocessor-6.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const A = 'a'
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [0] *SCREEN = A+1 -- _deref_pbuc1=vbuc2 
    lda #A+1
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte A = 'a'
const byte* SCREEN = (byte*) 1024
byte idx
void main()



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test the preprocessor
// Test macro recursion
  // Upstart
  // Commodore 64 PRG executable file
.file [name="preprocessor-6.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const A = 'a'
  .label SCREEN = $400
.segment Code
  // main
main: {
    // SCREEN[idx++] = A
    // [0] *SCREEN = A+1 -- _deref_pbuc1=vbuc2 
    lda #A+1
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

