@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call cputc 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call printf_sint 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [24] phi()
  [25] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] phi()
  [27] call cputc 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] phi()
  [29] call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [30] phi()
  [31] call cputc 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [32] phi()
  [33] call cputs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [34] phi()
  [35] call printf_sint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [36] phi()
  [37] call cputs 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [38] phi()
  [39] call printf_sint 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [40] phi()
  [41] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [42] phi()
  [43] call cputc 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [44] phi()
  [45] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [46] phi()
  [47] call cputc 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [48] phi()
  [49] call cputs 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [50] phi()
  [51] call printf_sint 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [52] phi()
  [53] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [54] phi()
  [55] call printf_sint 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [56] phi()
  [57] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [58] phi()
  [59] call cputc 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [60] phi()
  [61] call cputs 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [62] phi()
  [63] call cputc 
  to:main::@28
main::@28: scope:[main]  from main::@27
  [64] phi()
  [65] call cputs 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [66] phi()
  [67] call printf_sint 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [68] phi()
  [69] call cputs 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [70] phi()
  [71] call printf_sint 
  to:main::@32
main::@32: scope:[main]  from main::@31
  [72] phi()
  [73] call cputs 
  to:main::@33
main::@33: scope:[main]  from main::@32
  [74] phi()
  [75] call cputc 
  to:main::@34
main::@34: scope:[main]  from main::@33
  [76] phi()
  [77] call cputs 
  to:main::@35
main::@35: scope:[main]  from main::@34
  [78] phi()
  [79] call cputc 
  to:main::@36
main::@36: scope:[main]  from main::@35
  [80] phi()
  [81] call cputs 
  to:main::@37
main::@37: scope:[main]  from main::@36
  [82] phi()
  [83] call printf_sint 
  to:main::@38
main::@38: scope:[main]  from main::@37
  [84] phi()
  [85] call cputs 
  to:main::@39
main::@39: scope:[main]  from main::@38
  [86] phi()
  [87] call printf_sint 
  to:main::@40
main::@40: scope:[main]  from main::@39
  [88] phi()
  [89] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@40
  [90] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@10 main::@12 main::@14 main::@16 main::@18 main::@2 main::@20 main::@22 main::@24 main::@26 main::@28 main::@30 main::@32 main::@34 main::@36 main::@38 main::@4 main::@40 main::@6 main::@8 printf_number_buffer::@2
  [91] (to_nomodify byte*) cputs::s#23 ← phi( main::@10/(const byte*) main::s4 main::@12/(const byte*) main::s5 main::@14/(const byte*) main::s2 main::@16/(const byte*) main::s3 main::@18/(const byte*) main::s4 main::@2/(const byte*) main::s main::@20/(const byte*) main::s9 main::@22/(const byte*) main::s2 main::@24/(const byte*) main::s3 main::@26/(const byte*) main::s12 main::@28/(const byte*) main::s5 main::@30/(const byte*) main::s2 main::@32/(const byte*) main::s3 main::@34/(const byte*) main::s12 main::@36/(const byte*) main::s9 main::@38/(const byte*) main::s2 main::@4/(const byte*) main::s1 main::@40/(const byte*) main::s3 main::@6/(const byte*) main::s2 main::@8/(const byte*) main::s3 printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [92] (to_nomodify byte*) cputs::s#22 ← phi( cputs/(to_nomodify byte*) cputs::s#23 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [93] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#22)
  [94] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#22
  [95] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [96] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [97] (byte) cputc::c#0 ← (byte) cputs::c#1
  [98] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 main::@1 main::@11 main::@17 main::@19 main::@25 main::@27 main::@3 main::@33 main::@35 main::@9 printf_number_buffer::@3
  [99] (byte) cputc::c#13 ← phi( cputs::@2/(byte) cputc::c#0 main::@1/(byte) '%' main::@11/(byte) '%' main::@17/(byte) '%' main::@19/(byte) '%' main::@25/(byte) '%' main::@27/(byte) '%' main::@3/(byte) '%' main::@33/(byte) '%' main::@35/(byte) '%' main::@9/(byte) '%' printf_number_buffer::@3/(byte) cputc::c#2 )
  [100] if((byte) cputc::c#13==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [101] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#13
  [102] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [103] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [104] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [105] phi()
  [106] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [107] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [108] phi()
  [109] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [110] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [111] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [112] (byte) conio_cursor_x ← (byte) 0
  [113] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [114] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [115] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [116] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [117] phi()
  [118] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [119] phi()
  [120] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [121] phi()
  [122] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [123] phi()
  [124] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [125] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [126] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [127] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [128] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [129] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [129] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [130] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [131] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [132] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [133] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [134] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [135] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [136] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [137] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [137] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [138] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [139] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [140] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [141] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [141] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [142] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [143] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [144] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [145] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [146] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@13 main::@15 main::@21 main::@23 main::@29 main::@31 main::@37 main::@39 main::@5 main::@7
  [147] (signed word) printf_sint::value#11 ← phi( main::@13/(signed byte) 1 main::@15/(signed byte) 2 main::@21/(signed byte) 1 main::@23/(signed byte) 1 main::@29/(signed byte) 2 main::@31/(signed byte) 2 main::@37/(signed byte) 2 main::@39/(signed byte) 1 main::@5/(signed byte) 1 main::@7/(signed byte) 2 )
  [148] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [149] if((signed word) printf_sint::value#11<(signed byte) 0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [150] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#11
  [151] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [152] (signed word) printf_sint::value#13 ← phi( printf_sint::@1/(signed word) printf_sint::value#0 printf_sint/(signed word) printf_sint::value#11 )
  [153] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#13
  [154] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [155] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [156] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [157] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [158] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [159] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [160] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [161] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [162] phi()
  [163] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [164] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [165] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [166] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [166] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [166] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [166] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [167] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [168] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [169] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [170] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [171] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [172] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [173] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [174] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [175] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [176] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [177] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [177] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [177] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [178] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [179] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [180] (word) utoa_append::value#0 ← (word) utoa::value#2
  [181] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [182] call utoa_append 
  [183] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [184] (word) utoa::value#0 ← (word) utoa_append::return#0
  [185] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [186] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [187] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [187] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [188] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [189] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [190] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [191] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [192] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [193] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [194] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) COLORRAM clrscr::@5/(byte*) clrscr::line_cols#1 )
  [194] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) DEFAULT_SCREEN clrscr::@5/(byte*) clrscr::line_text#1 )
  [194] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [195] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [196] (byte) conio_cursor_x ← (byte) 0
  [197] (byte) conio_cursor_y ← (byte) 0
  [198] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [199] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [200] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [201] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [202] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [203] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [204] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [205] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [206] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [207] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) LIGHT_BLUE
  [208] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3
