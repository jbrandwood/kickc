Loading link script "procedure-callingconvention-phi-bank.ld"

CONTROL FLOW GRAPH SSA

__bank(bank) char func_bank1_a(char a , char b)
func_bank1_a: scope:[func_bank1_a]  from func_bank1_c func_bank1_e func_bank2_c main
  func_bank1_a::b#4 = phi( func_bank1_c/func_bank1_a::b#0, func_bank1_e/func_bank1_a::b#2, func_bank2_c/func_bank1_a::b#1, main/func_bank1_a::b#3 )
  func_bank1_a::a#4 = phi( func_bank1_c/func_bank1_a::a#0, func_bank1_e/func_bank1_a::a#2, func_bank2_c/func_bank1_a::a#1, main/func_bank1_a::a#3 )
  func_bank1_a::$0 = func_bank1_a::a#4 + func_bank1_a::b#4
  func_bank1_a::return#0 = func_bank1_a::$0
  to:func_bank1_a::@return
func_bank1_a::@return: scope:[func_bank1_a]  from func_bank1_a
  func_bank1_a::return#6 = phi( func_bank1_a/func_bank1_a::return#0 )
  func_bank1_a::return#1 = func_bank1_a::return#6
  return 
  to:@return

__bank(bank) char func_bank1_c(char a , char b)
func_bank1_c: scope:[func_bank1_c]  from main::@2
  func_bank1_c::b#1 = phi( main::@2/func_bank1_c::b#0 )
  func_bank1_c::a#1 = phi( main::@2/func_bank1_c::a#0 )
  func_bank1_a::a#0 = func_bank1_c::a#1
  func_bank1_a::b#0 = func_bank1_c::b#1
  call func_bank1_a
  func_bank1_a::return#2 = func_bank1_a::return#1
  to:func_bank1_c::@1
func_bank1_c::@1: scope:[func_bank1_c]  from func_bank1_c
  func_bank1_a::return#7 = phi( func_bank1_c/func_bank1_a::return#2 )
  func_bank1_c::$0 = func_bank1_a::return#7
  func_bank1_c::return#0 = func_bank1_c::$0
  to:func_bank1_c::@return
func_bank1_c::@return: scope:[func_bank1_c]  from func_bank1_c::@1
  func_bank1_c::return#3 = phi( func_bank1_c::@1/func_bank1_c::return#0 )
  func_bank1_c::return#1 = func_bank1_c::return#3
  return 
  to:@return

__bank(bank) char func_bank1_d(char a , char b)
func_bank1_d: scope:[func_bank1_d]  from main::@3
  func_bank1_d::b#1 = phi( main::@3/func_bank1_d::b#0 )
  func_bank1_d::a#1 = phi( main::@3/func_bank1_d::a#0 )
  func_bank2_a::a#0 = func_bank1_d::a#1
  func_bank2_a::b#0 = func_bank1_d::b#1
  call func_bank2_a
  func_bank2_a::return#0 = func_bank2_a::return#2
  to:func_bank1_d::@1
func_bank1_d::@1: scope:[func_bank1_d]  from func_bank1_d
  func_bank2_a::return#6 = phi( func_bank1_d/func_bank2_a::return#0 )
  func_bank1_d::$0 = func_bank2_a::return#6
  func_bank1_d::return#0 = func_bank1_d::$0
  to:func_bank1_d::@return
func_bank1_d::@return: scope:[func_bank1_d]  from func_bank1_d::@1
  func_bank1_d::return#3 = phi( func_bank1_d::@1/func_bank1_d::return#0 )
  func_bank1_d::return#1 = func_bank1_d::return#3
  return 
  to:@return

__bank(bank) char func_bank2_a(char a , char b)
func_bank2_a: scope:[func_bank2_a]  from func_bank1_d func_bank1_f func_bank2_d main::@6
  func_bank2_a::b#4 = phi( func_bank1_d/func_bank2_a::b#0, func_bank1_f/func_bank2_a::b#2, func_bank2_d/func_bank2_a::b#1, main::@6/func_bank2_a::b#3 )
  func_bank2_a::a#4 = phi( func_bank1_d/func_bank2_a::a#0, func_bank1_f/func_bank2_a::a#2, func_bank2_d/func_bank2_a::a#1, main::@6/func_bank2_a::a#3 )
  func_bank2_a::$0 = func_bank2_a::a#4 + func_bank2_a::b#4
  func_bank2_a::return#1 = func_bank2_a::$0
  to:func_bank2_a::@return
func_bank2_a::@return: scope:[func_bank2_a]  from func_bank2_a
  func_bank2_a::return#7 = phi( func_bank2_a/func_bank2_a::return#1 )
  func_bank2_a::return#2 = func_bank2_a::return#7
  return 
  to:@return

__bank(bank) char func_bank2_c(char a , char b)
func_bank2_c: scope:[func_bank2_c]  from main::@8
  func_bank2_c::b#1 = phi( main::@8/func_bank2_c::b#0 )
  func_bank2_c::a#1 = phi( main::@8/func_bank2_c::a#0 )
  func_bank1_a::a#1 = func_bank2_c::a#1
  func_bank1_a::b#1 = func_bank2_c::b#1
  call func_bank1_a
  func_bank1_a::return#3 = func_bank1_a::return#1
  to:func_bank2_c::@1
func_bank2_c::@1: scope:[func_bank2_c]  from func_bank2_c
  func_bank1_a::return#8 = phi( func_bank2_c/func_bank1_a::return#3 )
  func_bank2_c::$0 = func_bank1_a::return#8
  func_bank2_c::return#0 = func_bank2_c::$0
  to:func_bank2_c::@return
func_bank2_c::@return: scope:[func_bank2_c]  from func_bank2_c::@1
  func_bank2_c::return#3 = phi( func_bank2_c::@1/func_bank2_c::return#0 )
  func_bank2_c::return#1 = func_bank2_c::return#3
  return 
  to:@return

__bank(bank) char func_bank2_d(char a , char b)
func_bank2_d: scope:[func_bank2_d]  from main::@9
  func_bank2_d::b#1 = phi( main::@9/func_bank2_d::b#0 )
  func_bank2_d::a#1 = phi( main::@9/func_bank2_d::a#0 )
  func_bank2_a::a#1 = func_bank2_d::a#1
  func_bank2_a::b#1 = func_bank2_d::b#1
  call func_bank2_a
  func_bank2_a::return#3 = func_bank2_a::return#2
  to:func_bank2_d::@1
func_bank2_d::@1: scope:[func_bank2_d]  from func_bank2_d
  func_bank2_a::return#8 = phi( func_bank2_d/func_bank2_a::return#3 )
  func_bank2_d::$0 = func_bank2_a::return#8
  func_bank2_d::return#0 = func_bank2_d::$0
  to:func_bank2_d::@return
func_bank2_d::@return: scope:[func_bank2_d]  from func_bank2_d::@1
  func_bank2_d::return#3 = phi( func_bank2_d::@1/func_bank2_d::return#0 )
  func_bank2_d::return#1 = func_bank2_d::return#3
  return 
  to:@return

__bank(bank) char func_bank2_e(char a , char b)
func_bank2_e: scope:[func_bank2_e]  from main::@10
  func_bank2_e::b#1 = phi( main::@10/func_bank2_e::b#0 )
  func_bank2_e::a#1 = phi( main::@10/func_bank2_e::a#0 )
  func_bank2_b::a#0 = func_bank2_e::a#1
  func_bank2_b::b#0 = func_bank2_e::b#1
  call func_bank2_b
  func_bank2_b::return#0 = func_bank2_b::return#2
  to:func_bank2_e::@1
func_bank2_e::@1: scope:[func_bank2_e]  from func_bank2_e
  func_bank2_b::return#4 = phi( func_bank2_e/func_bank2_b::return#0 )
  func_bank2_e::$0 = func_bank2_b::return#4
  func_bank2_e::return#0 = func_bank2_e::$0
  to:func_bank2_e::@return
func_bank2_e::@return: scope:[func_bank2_e]  from func_bank2_e::@1
  func_bank2_e::return#3 = phi( func_bank2_e::@1/func_bank2_e::return#0 )
  func_bank2_e::return#1 = func_bank2_e::return#3
  return 
  to:@return

__bank(bank) char func_bank2_f(char a , char b)
func_bank2_f: scope:[func_bank2_f]  from main::@11
  func_bank2_f::b#1 = phi( main::@11/func_bank2_f::b#0 )
  func_bank2_f::a#1 = phi( main::@11/func_bank2_f::a#0 )
  func_bank1_b::a#0 = func_bank2_f::a#1
  func_bank1_b::b#0 = func_bank2_f::b#1
  call func_bank1_b
  func_bank1_b::return#0 = func_bank1_b::return#2
  to:func_bank2_f::@1
func_bank2_f::@1: scope:[func_bank2_f]  from func_bank2_f
  func_bank1_b::return#4 = phi( func_bank2_f/func_bank1_b::return#0 )
  func_bank2_f::$0 = func_bank1_b::return#4
  func_bank2_f::return#0 = func_bank2_f::$0
  to:func_bank2_f::@return
func_bank2_f::@return: scope:[func_bank2_f]  from func_bank2_f::@1
  func_bank2_f::return#3 = phi( func_bank2_f::@1/func_bank2_f::return#0 )
  func_bank2_f::return#1 = func_bank2_f::return#3
  return 
  to:@return

char func_bank1_b(char a , char b)
func_bank1_b: scope:[func_bank1_b]  from func_bank2_f main::@1
  func_bank1_b::b#2 = phi( func_bank2_f/func_bank1_b::b#0, main::@1/func_bank1_b::b#1 )
  func_bank1_b::a#2 = phi( func_bank2_f/func_bank1_b::a#0, main::@1/func_bank1_b::a#1 )
  func_bank1_b::$0 = func_bank1_b::a#2 + func_bank1_b::b#2
  func_bank1_b::return#1 = func_bank1_b::$0
  to:func_bank1_b::@return
func_bank1_b::@return: scope:[func_bank1_b]  from func_bank1_b
  func_bank1_b::return#5 = phi( func_bank1_b/func_bank1_b::return#1 )
  func_bank1_b::return#2 = func_bank1_b::return#5
  return 
  to:@return

char func_bank2_b(char a , char b)
func_bank2_b: scope:[func_bank2_b]  from func_bank2_e main::@7
  func_bank2_b::b#2 = phi( func_bank2_e/func_bank2_b::b#0, main::@7/func_bank2_b::b#1 )
  func_bank2_b::a#2 = phi( func_bank2_e/func_bank2_b::a#0, main::@7/func_bank2_b::a#1 )
  func_bank2_b::$0 = func_bank2_b::a#2 + func_bank2_b::b#2
  func_bank2_b::return#1 = func_bank2_b::$0
  to:func_bank2_b::@return
func_bank2_b::@return: scope:[func_bank2_b]  from func_bank2_b
  func_bank2_b::return#5 = phi( func_bank2_b/func_bank2_b::return#1 )
  func_bank2_b::return#2 = func_bank2_b::return#5
  return 
  to:@return

char func_bank1_e(char a , char b)
func_bank1_e: scope:[func_bank1_e]  from main::@4
  func_bank1_e::b#1 = phi( main::@4/func_bank1_e::b#0 )
  func_bank1_e::a#1 = phi( main::@4/func_bank1_e::a#0 )
  func_bank1_a::a#2 = func_bank1_e::a#1
  func_bank1_a::b#2 = func_bank1_e::b#1
  call func_bank1_a
  func_bank1_a::return#4 = func_bank1_a::return#1
  to:func_bank1_e::@1
func_bank1_e::@1: scope:[func_bank1_e]  from func_bank1_e
  func_bank1_a::return#9 = phi( func_bank1_e/func_bank1_a::return#4 )
  func_bank1_e::$0 = func_bank1_a::return#9
  func_bank1_e::return#0 = func_bank1_e::$0
  to:func_bank1_e::@return
func_bank1_e::@return: scope:[func_bank1_e]  from func_bank1_e::@1
  func_bank1_e::return#3 = phi( func_bank1_e::@1/func_bank1_e::return#0 )
  func_bank1_e::return#1 = func_bank1_e::return#3
  return 
  to:@return

char func_bank1_f(char a , char b)
func_bank1_f: scope:[func_bank1_f]  from main::@5
  func_bank1_f::b#1 = phi( main::@5/func_bank1_f::b#0 )
  func_bank1_f::a#1 = phi( main::@5/func_bank1_f::a#0 )
  func_bank2_a::a#2 = func_bank1_f::a#1
  func_bank2_a::b#2 = func_bank1_f::b#1
  call func_bank2_a
  func_bank2_a::return#4 = func_bank2_a::return#2
  to:func_bank1_f::@1
func_bank1_f::@1: scope:[func_bank1_f]  from func_bank1_f
  func_bank2_a::return#9 = phi( func_bank1_f/func_bank2_a::return#4 )
  func_bank1_f::$0 = func_bank2_a::return#9
  func_bank1_f::return#0 = func_bank1_f::$0
  to:func_bank1_f::@return
func_bank1_f::@return: scope:[func_bank1_f]  from func_bank1_f::@1
  func_bank1_f::return#3 = phi( func_bank1_f::@1/func_bank1_f::return#0 )
  func_bank1_f::return#1 = func_bank1_f::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start
  func_bank1_a::a#3 = '0'
  func_bank1_a::b#3 = 7
  call func_bank1_a
  func_bank1_a::return#5 = func_bank1_a::return#1
  to:main::@1
main::@1: scope:[main]  from main
  func_bank1_a::return#10 = phi( main/func_bank1_a::return#5 )
  main::$0 = func_bank1_a::return#10
  SCREEN[0] = main::$0
  func_bank1_b::a#1 = '0'
  func_bank1_b::b#1 = 7
  call func_bank1_b
  func_bank1_b::return#3 = func_bank1_b::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  func_bank1_b::return#6 = phi( main::@1/func_bank1_b::return#3 )
  main::$1 = func_bank1_b::return#6
  SCREEN[0] = main::$1
  func_bank1_c::a#0 = '0'
  func_bank1_c::b#0 = 7
  call func_bank1_c
  func_bank1_c::return#2 = func_bank1_c::return#1
  to:main::@3
main::@3: scope:[main]  from main::@2
  func_bank1_c::return#4 = phi( main::@2/func_bank1_c::return#2 )
  main::$2 = func_bank1_c::return#4
  SCREEN[0] = main::$2
  func_bank1_d::a#0 = '0'
  func_bank1_d::b#0 = 7
  call func_bank1_d
  func_bank1_d::return#2 = func_bank1_d::return#1
  to:main::@4
main::@4: scope:[main]  from main::@3
  func_bank1_d::return#4 = phi( main::@3/func_bank1_d::return#2 )
  main::$3 = func_bank1_d::return#4
  SCREEN[0] = main::$3
  func_bank1_e::a#0 = '0'
  func_bank1_e::b#0 = 7
  call func_bank1_e
  func_bank1_e::return#2 = func_bank1_e::return#1
  to:main::@5
main::@5: scope:[main]  from main::@4
  func_bank1_e::return#4 = phi( main::@4/func_bank1_e::return#2 )
  main::$4 = func_bank1_e::return#4
  SCREEN[0] = main::$4
  func_bank1_f::a#0 = '0'
  func_bank1_f::b#0 = 7
  call func_bank1_f
  func_bank1_f::return#2 = func_bank1_f::return#1
  to:main::@6
main::@6: scope:[main]  from main::@5
  func_bank1_f::return#4 = phi( main::@5/func_bank1_f::return#2 )
  main::$5 = func_bank1_f::return#4
  SCREEN[0] = main::$5
  func_bank2_a::a#3 = '0'
  func_bank2_a::b#3 = 7
  call func_bank2_a
  func_bank2_a::return#5 = func_bank2_a::return#2
  to:main::@7
main::@7: scope:[main]  from main::@6
  func_bank2_a::return#10 = phi( main::@6/func_bank2_a::return#5 )
  main::$6 = func_bank2_a::return#10
  SCREEN[0] = main::$6
  func_bank2_b::a#1 = '0'
  func_bank2_b::b#1 = 7
  call func_bank2_b
  func_bank2_b::return#3 = func_bank2_b::return#2
  to:main::@8
main::@8: scope:[main]  from main::@7
  func_bank2_b::return#6 = phi( main::@7/func_bank2_b::return#3 )
  main::$7 = func_bank2_b::return#6
  SCREEN[0] = main::$7
  func_bank2_c::a#0 = '0'
  func_bank2_c::b#0 = 7
  call func_bank2_c
  func_bank2_c::return#2 = func_bank2_c::return#1
  to:main::@9
main::@9: scope:[main]  from main::@8
  func_bank2_c::return#4 = phi( main::@8/func_bank2_c::return#2 )
  main::$8 = func_bank2_c::return#4
  SCREEN[0] = main::$8
  func_bank2_d::a#0 = '0'
  func_bank2_d::b#0 = 7
  call func_bank2_d
  func_bank2_d::return#2 = func_bank2_d::return#1
  to:main::@10
main::@10: scope:[main]  from main::@9
  func_bank2_d::return#4 = phi( main::@9/func_bank2_d::return#2 )
  main::$9 = func_bank2_d::return#4
  SCREEN[0] = main::$9
  func_bank2_e::a#0 = '0'
  func_bank2_e::b#0 = 7
  call func_bank2_e
  func_bank2_e::return#2 = func_bank2_e::return#1
  to:main::@11
main::@11: scope:[main]  from main::@10
  func_bank2_e::return#4 = phi( main::@10/func_bank2_e::return#2 )
  main::$10 = func_bank2_e::return#4
  SCREEN[0] = main::$10
  func_bank2_f::a#0 = '0'
  func_bank2_f::b#0 = 7
  call func_bank2_f
  func_bank2_f::return#2 = func_bank2_f::return#1
  to:main::@12
main::@12: scope:[main]  from main::@11
  func_bank2_f::return#4 = phi( main::@11/func_bank2_f::return#2 )
  main::$11 = func_bank2_f::return#4
  SCREEN[0] = main::$11
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
__bank(bank) char func_bank1_a(char a , char b)
char func_bank1_a::$0
char func_bank1_a::a
char func_bank1_a::a#0
char func_bank1_a::a#1
char func_bank1_a::a#2
char func_bank1_a::a#3
char func_bank1_a::a#4
char func_bank1_a::b
char func_bank1_a::b#0
char func_bank1_a::b#1
char func_bank1_a::b#2
char func_bank1_a::b#3
char func_bank1_a::b#4
char func_bank1_a::return
char func_bank1_a::return#0
char func_bank1_a::return#1
char func_bank1_a::return#10
char func_bank1_a::return#2
char func_bank1_a::return#3
char func_bank1_a::return#4
char func_bank1_a::return#5
char func_bank1_a::return#6
char func_bank1_a::return#7
char func_bank1_a::return#8
char func_bank1_a::return#9
char func_bank1_b(char a , char b)
char func_bank1_b::$0
char func_bank1_b::a
char func_bank1_b::a#0
char func_bank1_b::a#1
char func_bank1_b::a#2
char func_bank1_b::b
char func_bank1_b::b#0
char func_bank1_b::b#1
char func_bank1_b::b#2
char func_bank1_b::return
char func_bank1_b::return#0
char func_bank1_b::return#1
char func_bank1_b::return#2
char func_bank1_b::return#3
char func_bank1_b::return#4
char func_bank1_b::return#5
char func_bank1_b::return#6
__bank(bank) char func_bank1_c(char a , char b)
char func_bank1_c::$0
char func_bank1_c::a
char func_bank1_c::a#0
char func_bank1_c::a#1
char func_bank1_c::b
char func_bank1_c::b#0
char func_bank1_c::b#1
char func_bank1_c::return
char func_bank1_c::return#0
char func_bank1_c::return#1
char func_bank1_c::return#2
char func_bank1_c::return#3
char func_bank1_c::return#4
__bank(bank) char func_bank1_d(char a , char b)
char func_bank1_d::$0
char func_bank1_d::a
char func_bank1_d::a#0
char func_bank1_d::a#1
char func_bank1_d::b
char func_bank1_d::b#0
char func_bank1_d::b#1
char func_bank1_d::return
char func_bank1_d::return#0
char func_bank1_d::return#1
char func_bank1_d::return#2
char func_bank1_d::return#3
char func_bank1_d::return#4
char func_bank1_e(char a , char b)
char func_bank1_e::$0
char func_bank1_e::a
char func_bank1_e::a#0
char func_bank1_e::a#1
char func_bank1_e::b
char func_bank1_e::b#0
char func_bank1_e::b#1
char func_bank1_e::return
char func_bank1_e::return#0
char func_bank1_e::return#1
char func_bank1_e::return#2
char func_bank1_e::return#3
char func_bank1_e::return#4
char func_bank1_f(char a , char b)
char func_bank1_f::$0
char func_bank1_f::a
char func_bank1_f::a#0
char func_bank1_f::a#1
char func_bank1_f::b
char func_bank1_f::b#0
char func_bank1_f::b#1
char func_bank1_f::return
char func_bank1_f::return#0
char func_bank1_f::return#1
char func_bank1_f::return#2
char func_bank1_f::return#3
char func_bank1_f::return#4
__bank(bank) char func_bank2_a(char a , char b)
char func_bank2_a::$0
char func_bank2_a::a
char func_bank2_a::a#0
char func_bank2_a::a#1
char func_bank2_a::a#2
char func_bank2_a::a#3
char func_bank2_a::a#4
char func_bank2_a::b
char func_bank2_a::b#0
char func_bank2_a::b#1
char func_bank2_a::b#2
char func_bank2_a::b#3
char func_bank2_a::b#4
char func_bank2_a::return
char func_bank2_a::return#0
char func_bank2_a::return#1
char func_bank2_a::return#10
char func_bank2_a::return#2
char func_bank2_a::return#3
char func_bank2_a::return#4
char func_bank2_a::return#5
char func_bank2_a::return#6
char func_bank2_a::return#7
char func_bank2_a::return#8
char func_bank2_a::return#9
char func_bank2_b(char a , char b)
char func_bank2_b::$0
char func_bank2_b::a
char func_bank2_b::a#0
char func_bank2_b::a#1
char func_bank2_b::a#2
char func_bank2_b::b
char func_bank2_b::b#0
char func_bank2_b::b#1
char func_bank2_b::b#2
char func_bank2_b::return
char func_bank2_b::return#0
char func_bank2_b::return#1
char func_bank2_b::return#2
char func_bank2_b::return#3
char func_bank2_b::return#4
char func_bank2_b::return#5
char func_bank2_b::return#6
__bank(bank) char func_bank2_c(char a , char b)
char func_bank2_c::$0
char func_bank2_c::a
char func_bank2_c::a#0
char func_bank2_c::a#1
char func_bank2_c::b
char func_bank2_c::b#0
char func_bank2_c::b#1
char func_bank2_c::return
char func_bank2_c::return#0
char func_bank2_c::return#1
char func_bank2_c::return#2
char func_bank2_c::return#3
char func_bank2_c::return#4
__bank(bank) char func_bank2_d(char a , char b)
char func_bank2_d::$0
char func_bank2_d::a
char func_bank2_d::a#0
char func_bank2_d::a#1
char func_bank2_d::b
char func_bank2_d::b#0
char func_bank2_d::b#1
char func_bank2_d::return
char func_bank2_d::return#0
char func_bank2_d::return#1
char func_bank2_d::return#2
char func_bank2_d::return#3
char func_bank2_d::return#4
__bank(bank) char func_bank2_e(char a , char b)
char func_bank2_e::$0
char func_bank2_e::a
char func_bank2_e::a#0
char func_bank2_e::a#1
char func_bank2_e::b
char func_bank2_e::b#0
char func_bank2_e::b#1
char func_bank2_e::return
char func_bank2_e::return#0
char func_bank2_e::return#1
char func_bank2_e::return#2
char func_bank2_e::return#3
char func_bank2_e::return#4
__bank(bank) char func_bank2_f(char a , char b)
char func_bank2_f::$0
char func_bank2_f::a
char func_bank2_f::a#0
char func_bank2_f::a#1
char func_bank2_f::b
char func_bank2_f::b#0
char func_bank2_f::b#1
char func_bank2_f::return
char func_bank2_f::return#0
char func_bank2_f::return#1
char func_bank2_f::return#2
char func_bank2_f::return#3
char func_bank2_f::return#4
void main()
char main::$0
char main::$1
char main::$10
char main::$11
char main::$2
char main::$3
char main::$4
char main::$5
char main::$6
char main::$7
char main::$8
char main::$9

Adding number conversion cast (unumber) 7 in func_bank1_a::b#3 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$0
Adding number conversion cast (unumber) 7 in func_bank1_b::b#1 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$1
Adding number conversion cast (unumber) 7 in func_bank1_c::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$2
Adding number conversion cast (unumber) 7 in func_bank1_d::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$3
Adding number conversion cast (unumber) 7 in func_bank1_e::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$4
Adding number conversion cast (unumber) 7 in func_bank1_f::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$5
Adding number conversion cast (unumber) 7 in func_bank2_a::b#3 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$6
Adding number conversion cast (unumber) 7 in func_bank2_b::b#1 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$7
Adding number conversion cast (unumber) 7 in func_bank2_c::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$8
Adding number conversion cast (unumber) 7 in func_bank2_d::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$9
Adding number conversion cast (unumber) 7 in func_bank2_e::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$10
Adding number conversion cast (unumber) 7 in func_bank2_f::b#0 = 7
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$11
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast func_bank1_a::b#3 = (unumber)7
Inlining cast func_bank1_b::b#1 = (unumber)7
Inlining cast func_bank1_c::b#0 = (unumber)7
Inlining cast func_bank1_d::b#0 = (unumber)7
Inlining cast func_bank1_e::b#0 = (unumber)7
Inlining cast func_bank1_f::b#0 = (unumber)7
Inlining cast func_bank2_a::b#3 = (unumber)7
Inlining cast func_bank2_b::b#1 = (unumber)7
Inlining cast func_bank2_c::b#0 = (unumber)7
Inlining cast func_bank2_d::b#0 = (unumber)7
Inlining cast func_bank2_e::b#0 = (unumber)7
Inlining cast func_bank2_f::b#0 = (unumber)7
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias func_bank1_a::return#0 = func_bank1_a::$0 func_bank1_a::return#6 func_bank1_a::return#1 
Alias func_bank1_a::return#2 = func_bank1_a::return#7 
Alias func_bank1_c::return#0 = func_bank1_c::$0 func_bank1_c::return#3 func_bank1_c::return#1 
Alias func_bank2_a::return#0 = func_bank2_a::return#6 
Alias func_bank1_d::return#0 = func_bank1_d::$0 func_bank1_d::return#3 func_bank1_d::return#1 
Alias func_bank2_a::return#1 = func_bank2_a::$0 func_bank2_a::return#7 func_bank2_a::return#2 
Alias func_bank1_a::return#3 = func_bank1_a::return#8 
Alias func_bank2_c::return#0 = func_bank2_c::$0 func_bank2_c::return#3 func_bank2_c::return#1 
Alias func_bank2_a::return#3 = func_bank2_a::return#8 
Alias func_bank2_d::return#0 = func_bank2_d::$0 func_bank2_d::return#3 func_bank2_d::return#1 
Alias func_bank2_b::return#0 = func_bank2_b::return#4 
Alias func_bank2_e::return#0 = func_bank2_e::$0 func_bank2_e::return#3 func_bank2_e::return#1 
Alias func_bank1_b::return#0 = func_bank1_b::return#4 
Alias func_bank2_f::return#0 = func_bank2_f::$0 func_bank2_f::return#3 func_bank2_f::return#1 
Alias func_bank1_b::return#1 = func_bank1_b::$0 func_bank1_b::return#5 func_bank1_b::return#2 
Alias func_bank2_b::return#1 = func_bank2_b::$0 func_bank2_b::return#5 func_bank2_b::return#2 
Alias func_bank1_a::return#4 = func_bank1_a::return#9 
Alias func_bank1_e::return#0 = func_bank1_e::$0 func_bank1_e::return#3 func_bank1_e::return#1 
Alias func_bank2_a::return#4 = func_bank2_a::return#9 
Alias func_bank1_f::return#0 = func_bank1_f::$0 func_bank1_f::return#3 func_bank1_f::return#1 
Alias func_bank1_a::return#10 = func_bank1_a::return#5 
Alias func_bank1_b::return#3 = func_bank1_b::return#6 
Alias func_bank1_c::return#2 = func_bank1_c::return#4 
Alias func_bank1_d::return#2 = func_bank1_d::return#4 
Alias func_bank1_e::return#2 = func_bank1_e::return#4 
Alias func_bank1_f::return#2 = func_bank1_f::return#4 
Alias func_bank2_a::return#10 = func_bank2_a::return#5 
Alias func_bank2_b::return#3 = func_bank2_b::return#6 
Alias func_bank2_c::return#2 = func_bank2_c::return#4 
Alias func_bank2_d::return#2 = func_bank2_d::return#4 
Alias func_bank2_e::return#2 = func_bank2_e::return#4 
Alias func_bank2_f::return#2 = func_bank2_f::return#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values func_bank1_c::a#1 func_bank1_c::a#0
Identical Phi Values func_bank1_c::b#1 func_bank1_c::b#0
Identical Phi Values func_bank1_d::a#1 func_bank1_d::a#0
Identical Phi Values func_bank1_d::b#1 func_bank1_d::b#0
Identical Phi Values func_bank2_c::a#1 func_bank2_c::a#0
Identical Phi Values func_bank2_c::b#1 func_bank2_c::b#0
Identical Phi Values func_bank2_d::a#1 func_bank2_d::a#0
Identical Phi Values func_bank2_d::b#1 func_bank2_d::b#0
Identical Phi Values func_bank2_e::a#1 func_bank2_e::a#0
Identical Phi Values func_bank2_e::b#1 func_bank2_e::b#0
Identical Phi Values func_bank2_f::a#1 func_bank2_f::a#0
Identical Phi Values func_bank2_f::b#1 func_bank2_f::b#0
Identical Phi Values func_bank1_e::a#1 func_bank1_e::a#0
Identical Phi Values func_bank1_e::b#1 func_bank1_e::b#0
Identical Phi Values func_bank1_f::a#1 func_bank1_f::a#0
Identical Phi Values func_bank1_f::b#1 func_bank1_f::b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant func_bank1_a::a#3 = '0'
Constant func_bank1_a::b#3 = 7
Constant func_bank1_b::a#1 = '0'
Constant func_bank1_b::b#1 = 7
Constant func_bank1_c::a#0 = '0'
Constant func_bank1_c::b#0 = 7
Constant func_bank1_d::a#0 = '0'
Constant func_bank1_d::b#0 = 7
Constant func_bank1_e::a#0 = '0'
Constant func_bank1_e::b#0 = 7
Constant func_bank1_f::a#0 = '0'
Constant func_bank1_f::b#0 = 7
Constant func_bank2_a::a#3 = '0'
Constant func_bank2_a::b#3 = 7
Constant func_bank2_b::a#1 = '0'
Constant func_bank2_b::b#1 = 7
Constant func_bank2_c::a#0 = '0'
Constant func_bank2_c::b#0 = 7
Constant func_bank2_d::a#0 = '0'
Constant func_bank2_d::b#0 = 7
Constant func_bank2_e::a#0 = '0'
Constant func_bank2_e::b#0 = 7
Constant func_bank2_f::a#0 = '0'
Constant func_bank2_f::b#0 = 7
Successful SSA optimization Pass2ConstantIdentification
Constant func_bank1_a::a#0 = func_bank1_c::a#0
Constant func_bank1_a::b#0 = func_bank1_c::b#0
Constant func_bank2_a::a#0 = func_bank1_d::a#0
Constant func_bank2_a::b#0 = func_bank1_d::b#0
Constant func_bank1_a::a#1 = func_bank2_c::a#0
Constant func_bank1_a::b#1 = func_bank2_c::b#0
Constant func_bank2_a::a#1 = func_bank2_d::a#0
Constant func_bank2_a::b#1 = func_bank2_d::b#0
Constant func_bank2_b::a#0 = func_bank2_e::a#0
Constant func_bank2_b::b#0 = func_bank2_e::b#0
Constant func_bank1_b::a#0 = func_bank2_f::a#0
Constant func_bank1_b::b#0 = func_bank2_f::b#0
Constant func_bank1_a::a#2 = func_bank1_e::a#0
Constant func_bank1_a::b#2 = func_bank1_e::b#0
Constant func_bank2_a::a#2 = func_bank1_f::a#0
Constant func_bank2_a::b#2 = func_bank1_f::b#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [73] SCREEN[0] = main::$0
Simplifying expression containing zero SCREEN in [79] SCREEN[0] = main::$1
Simplifying expression containing zero SCREEN in [85] SCREEN[0] = main::$2
Simplifying expression containing zero SCREEN in [91] SCREEN[0] = main::$3
Simplifying expression containing zero SCREEN in [97] SCREEN[0] = main::$4
Simplifying expression containing zero SCREEN in [103] SCREEN[0] = main::$5
Simplifying expression containing zero SCREEN in [109] SCREEN[0] = main::$6
Simplifying expression containing zero SCREEN in [115] SCREEN[0] = main::$7
Simplifying expression containing zero SCREEN in [121] SCREEN[0] = main::$8
Simplifying expression containing zero SCREEN in [127] SCREEN[0] = main::$9
Simplifying expression containing zero SCREEN in [133] SCREEN[0] = main::$10
Simplifying expression containing zero SCREEN in [139] SCREEN[0] = main::$11
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings func_bank1_a::a#3
Inlining constant with var siblings func_bank1_a::b#3
Inlining constant with var siblings func_bank1_a::a#0
Inlining constant with var siblings func_bank1_a::b#0
Inlining constant with var siblings func_bank1_a::a#1
Inlining constant with var siblings func_bank1_a::b#1
Inlining constant with var siblings func_bank1_a::a#2
Inlining constant with var siblings func_bank1_a::b#2
Inlining constant with var siblings func_bank2_a::a#3
Inlining constant with var siblings func_bank2_a::b#3
Inlining constant with var siblings func_bank2_a::a#0
Inlining constant with var siblings func_bank2_a::b#0
Inlining constant with var siblings func_bank2_a::a#1
Inlining constant with var siblings func_bank2_a::b#1
Inlining constant with var siblings func_bank2_a::a#2
Inlining constant with var siblings func_bank2_a::b#2
Inlining constant with var siblings func_bank1_b::a#1
Inlining constant with var siblings func_bank1_b::b#1
Inlining constant with var siblings func_bank1_b::a#0
Inlining constant with var siblings func_bank1_b::b#0
Inlining constant with var siblings func_bank2_b::a#1
Inlining constant with var siblings func_bank2_b::b#1
Inlining constant with var siblings func_bank2_b::a#0
Inlining constant with var siblings func_bank2_b::b#0
Constant inlined func_bank1_a::b#0 = func_bank1_c::b#0
Constant inlined func_bank1_a::a#1 = func_bank2_c::a#0
Constant inlined func_bank2_a::b#2 = func_bank1_f::b#0
Constant inlined func_bank2_a::a#3 = '0'
Constant inlined func_bank1_a::a#0 = func_bank1_c::a#0
Constant inlined func_bank2_a::b#3 = 7
Constant inlined func_bank2_a::a#0 = func_bank1_d::a#0
Constant inlined func_bank1_a::b#3 = 7
Constant inlined func_bank1_a::b#2 = func_bank1_e::b#0
Constant inlined func_bank2_a::b#0 = func_bank1_d::b#0
Constant inlined func_bank2_a::a#1 = func_bank2_d::a#0
Constant inlined func_bank1_a::a#3 = '0'
Constant inlined func_bank1_a::b#1 = func_bank2_c::b#0
Constant inlined func_bank1_a::a#2 = func_bank1_e::a#0
Constant inlined func_bank2_a::b#1 = func_bank2_d::b#0
Constant inlined func_bank2_a::a#2 = func_bank1_f::a#0
Constant inlined func_bank2_b::b#0 = func_bank2_e::b#0
Constant inlined func_bank2_b::a#1 = '0'
Constant inlined func_bank1_b::a#0 = func_bank2_f::a#0
Constant inlined func_bank2_b::a#0 = func_bank2_e::a#0
Constant inlined func_bank1_b::b#0 = func_bank2_f::b#0
Constant inlined func_bank1_b::a#1 = '0'
Constant inlined func_bank1_b::b#1 = 7
Constant inlined func_bank2_b::b#1 = 7
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of func_bank1_c
Adding NOP phi() at start of func_bank1_d
Adding NOP phi() at start of func_bank1_e
Adding NOP phi() at start of func_bank1_f
Adding NOP phi() at start of func_bank2_c
Adding NOP phi() at start of func_bank2_d
Adding NOP phi() at start of func_bank2_e
Adding NOP phi() at start of func_bank2_f
CALL GRAPH
Calls in [main] to func_bank1_a:1 func_bank1_b:5 func_bank1_c:9 func_bank1_d:13 func_bank1_e:17 func_bank1_f:21 func_bank2_a:25 func_bank2_b:29 func_bank2_c:33 func_bank2_d:37 func_bank2_e:41 func_bank2_f:45 
Calls in [func_bank1_c] to func_bank1_a:57 
Calls in [func_bank1_d] to func_bank2_a:62 
Calls in [func_bank1_e] to func_bank1_a:67 
Calls in [func_bank1_f] to func_bank2_a:72 
Calls in [func_bank2_c] to func_bank1_a:83 
Calls in [func_bank2_d] to func_bank2_a:88 
Calls in [func_bank2_e] to func_bank2_b:93 
Calls in [func_bank2_f] to func_bank1_b:98 

Created 8 initial phi equivalence classes
Coalesced down to 8 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of func_bank1_c
Adding NOP phi() at start of func_bank1_d
Adding NOP phi() at start of func_bank1_e
Adding NOP phi() at start of func_bank1_f
Adding NOP phi() at start of func_bank2_c
Adding NOP phi() at start of func_bank2_d
Adding NOP phi() at start of func_bank2_e
Adding NOP phi() at start of func_bank2_f

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call func_bank1_a
  [2] func_bank1_a::return#10 = func_bank1_a::return#0
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::$0 = func_bank1_a::return#10
  [4] *SCREEN = main::$0
  [5] call func_bank1_b
  [6] func_bank1_b::return#3 = func_bank1_b::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] main::$1 = func_bank1_b::return#3
  [8] *SCREEN = main::$1
  [9] call func_bank1_c
  [10] func_bank1_c::return#2 = func_bank1_c::return#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [11] main::$2 = func_bank1_c::return#2
  [12] *SCREEN = main::$2
  [13] call func_bank1_d
  [14] func_bank1_d::return#2 = func_bank1_d::return#0
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] main::$3 = func_bank1_d::return#2
  [16] *SCREEN = main::$3
  [17] call func_bank1_e
  [18] func_bank1_e::return#2 = func_bank1_e::return#0
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] main::$4 = func_bank1_e::return#2
  [20] *SCREEN = main::$4
  [21] call func_bank1_f
  [22] func_bank1_f::return#2 = func_bank1_f::return#0
  to:main::@6
main::@6: scope:[main]  from main::@5
  [23] main::$5 = func_bank1_f::return#2
  [24] *SCREEN = main::$5
  [25] call func_bank2_a
  [26] func_bank2_a::return#10 = func_bank2_a::return#1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [27] main::$6 = func_bank2_a::return#10
  [28] *SCREEN = main::$6
  [29] call func_bank2_b
  [30] func_bank2_b::return#3 = func_bank2_b::return#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  [31] main::$7 = func_bank2_b::return#3
  [32] *SCREEN = main::$7
  [33] call func_bank2_c
  [34] func_bank2_c::return#2 = func_bank2_c::return#0
  to:main::@9
main::@9: scope:[main]  from main::@8
  [35] main::$8 = func_bank2_c::return#2
  [36] *SCREEN = main::$8
  [37] call func_bank2_d
  [38] func_bank2_d::return#2 = func_bank2_d::return#0
  to:main::@10
main::@10: scope:[main]  from main::@9
  [39] main::$9 = func_bank2_d::return#2
  [40] *SCREEN = main::$9
  [41] call func_bank2_e
  [42] func_bank2_e::return#2 = func_bank2_e::return#0
  to:main::@11
main::@11: scope:[main]  from main::@10
  [43] main::$10 = func_bank2_e::return#2
  [44] *SCREEN = main::$10
  [45] call func_bank2_f
  [46] func_bank2_f::return#2 = func_bank2_f::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [47] main::$11 = func_bank2_f::return#2
  [48] *SCREEN = main::$11
  to:main::@return
main::@return: scope:[main]  from main::@12
  [49] return 
  to:@return

__bank(bank) char func_bank1_a(char a , char b)
func_bank1_a: scope:[func_bank1_a]  from func_bank1_c func_bank1_e func_bank2_c main
  [50] func_bank1_a::b#4 = phi( func_bank1_c/func_bank1_c::b#0, func_bank1_e/func_bank1_e::b#0, func_bank2_c/func_bank2_c::b#0, main/7 )
  [50] func_bank1_a::a#4 = phi( func_bank1_c/func_bank1_c::a#0, func_bank1_e/func_bank1_e::a#0, func_bank2_c/func_bank2_c::a#0, main/'0' )
  [51] func_bank1_a::return#0 = func_bank1_a::a#4 + func_bank1_a::b#4
  to:func_bank1_a::@return
func_bank1_a::@return: scope:[func_bank1_a]  from func_bank1_a
  [52] return 
  to:@return

char func_bank1_b(char a , char b)
func_bank1_b: scope:[func_bank1_b]  from func_bank2_f main::@1
  [53] func_bank1_b::b#2 = phi( func_bank2_f/func_bank2_f::b#0, main::@1/7 )
  [53] func_bank1_b::a#2 = phi( func_bank2_f/func_bank2_f::a#0, main::@1/'0' )
  [54] func_bank1_b::return#1 = func_bank1_b::a#2 + func_bank1_b::b#2
  to:func_bank1_b::@return
func_bank1_b::@return: scope:[func_bank1_b]  from func_bank1_b
  [55] return 
  to:@return

__bank(bank) char func_bank1_c(char a , char b)
func_bank1_c: scope:[func_bank1_c]  from main::@2
  [56] phi()
  [57] call func_bank1_a
  [58] func_bank1_a::return#2 = func_bank1_a::return#0
  to:func_bank1_c::@1
func_bank1_c::@1: scope:[func_bank1_c]  from func_bank1_c
  [59] func_bank1_c::return#0 = func_bank1_a::return#2
  to:func_bank1_c::@return
func_bank1_c::@return: scope:[func_bank1_c]  from func_bank1_c::@1
  [60] return 
  to:@return

__bank(bank) char func_bank1_d(char a , char b)
func_bank1_d: scope:[func_bank1_d]  from main::@3
  [61] phi()
  [62] call func_bank2_a
  [63] func_bank2_a::return#0 = func_bank2_a::return#1
  to:func_bank1_d::@1
func_bank1_d::@1: scope:[func_bank1_d]  from func_bank1_d
  [64] func_bank1_d::return#0 = func_bank2_a::return#0
  to:func_bank1_d::@return
func_bank1_d::@return: scope:[func_bank1_d]  from func_bank1_d::@1
  [65] return 
  to:@return

char func_bank1_e(char a , char b)
func_bank1_e: scope:[func_bank1_e]  from main::@4
  [66] phi()
  [67] call func_bank1_a
  [68] func_bank1_a::return#4 = func_bank1_a::return#0
  to:func_bank1_e::@1
func_bank1_e::@1: scope:[func_bank1_e]  from func_bank1_e
  [69] func_bank1_e::return#0 = func_bank1_a::return#4
  to:func_bank1_e::@return
func_bank1_e::@return: scope:[func_bank1_e]  from func_bank1_e::@1
  [70] return 
  to:@return

char func_bank1_f(char a , char b)
func_bank1_f: scope:[func_bank1_f]  from main::@5
  [71] phi()
  [72] call func_bank2_a
  [73] func_bank2_a::return#4 = func_bank2_a::return#1
  to:func_bank1_f::@1
func_bank1_f::@1: scope:[func_bank1_f]  from func_bank1_f
  [74] func_bank1_f::return#0 = func_bank2_a::return#4
  to:func_bank1_f::@return
func_bank1_f::@return: scope:[func_bank1_f]  from func_bank1_f::@1
  [75] return 
  to:@return

__bank(bank) char func_bank2_a(char a , char b)
func_bank2_a: scope:[func_bank2_a]  from func_bank1_d func_bank1_f func_bank2_d main::@6
  [76] func_bank2_a::b#4 = phi( func_bank1_d/func_bank1_d::b#0, func_bank1_f/func_bank1_f::b#0, func_bank2_d/func_bank2_d::b#0, main::@6/7 )
  [76] func_bank2_a::a#4 = phi( func_bank1_d/func_bank1_d::a#0, func_bank1_f/func_bank1_f::a#0, func_bank2_d/func_bank2_d::a#0, main::@6/'0' )
  [77] func_bank2_a::return#1 = func_bank2_a::a#4 + func_bank2_a::b#4
  to:func_bank2_a::@return
func_bank2_a::@return: scope:[func_bank2_a]  from func_bank2_a
  [78] return 
  to:@return

char func_bank2_b(char a , char b)
func_bank2_b: scope:[func_bank2_b]  from func_bank2_e main::@7
  [79] func_bank2_b::b#2 = phi( func_bank2_e/func_bank2_e::b#0, main::@7/7 )
  [79] func_bank2_b::a#2 = phi( func_bank2_e/func_bank2_e::a#0, main::@7/'0' )
  [80] func_bank2_b::return#1 = func_bank2_b::a#2 + func_bank2_b::b#2
  to:func_bank2_b::@return
func_bank2_b::@return: scope:[func_bank2_b]  from func_bank2_b
  [81] return 
  to:@return

__bank(bank) char func_bank2_c(char a , char b)
func_bank2_c: scope:[func_bank2_c]  from main::@8
  [82] phi()
  [83] call func_bank1_a
  [84] func_bank1_a::return#3 = func_bank1_a::return#0
  to:func_bank2_c::@1
func_bank2_c::@1: scope:[func_bank2_c]  from func_bank2_c
  [85] func_bank2_c::return#0 = func_bank1_a::return#3
  to:func_bank2_c::@return
func_bank2_c::@return: scope:[func_bank2_c]  from func_bank2_c::@1
  [86] return 
  to:@return

__bank(bank) char func_bank2_d(char a , char b)
func_bank2_d: scope:[func_bank2_d]  from main::@9
  [87] phi()
  [88] call func_bank2_a
  [89] func_bank2_a::return#3 = func_bank2_a::return#1
  to:func_bank2_d::@1
func_bank2_d::@1: scope:[func_bank2_d]  from func_bank2_d
  [90] func_bank2_d::return#0 = func_bank2_a::return#3
  to:func_bank2_d::@return
func_bank2_d::@return: scope:[func_bank2_d]  from func_bank2_d::@1
  [91] return 
  to:@return

__bank(bank) char func_bank2_e(char a , char b)
func_bank2_e: scope:[func_bank2_e]  from main::@10
  [92] phi()
  [93] call func_bank2_b
  [94] func_bank2_b::return#0 = func_bank2_b::return#1
  to:func_bank2_e::@1
func_bank2_e::@1: scope:[func_bank2_e]  from func_bank2_e
  [95] func_bank2_e::return#0 = func_bank2_b::return#0
  to:func_bank2_e::@return
func_bank2_e::@return: scope:[func_bank2_e]  from func_bank2_e::@1
  [96] return 
  to:@return

__bank(bank) char func_bank2_f(char a , char b)
func_bank2_f: scope:[func_bank2_f]  from main::@11
  [97] phi()
  [98] call func_bank1_b
  [99] func_bank1_b::return#0 = func_bank1_b::return#1
  to:func_bank2_f::@1
func_bank2_f::@1: scope:[func_bank2_f]  from func_bank2_f
  [100] func_bank2_f::return#0 = func_bank1_b::return#0
  to:func_bank2_f::@return
func_bank2_f::@return: scope:[func_bank2_f]  from func_bank2_f::@1
  [101] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__bank(bank) char func_bank1_a(char a , char b)
char func_bank1_a::a
char func_bank1_a::a#4 // 101.0
char func_bank1_a::b
char func_bank1_a::b#4 // 101.0
char func_bank1_a::return
char func_bank1_a::return#0 // 22.66666666666666
char func_bank1_a::return#10 // 4.0
char func_bank1_a::return#2 // 22.0
char func_bank1_a::return#3 // 22.0
char func_bank1_a::return#4 // 22.0
char func_bank1_b(char a , char b)
char func_bank1_b::a
char func_bank1_b::a#2 // 101.0
char func_bank1_b::b
char func_bank1_b::b#2 // 101.0
char func_bank1_b::return
char func_bank1_b::return#0 // 22.0
char func_bank1_b::return#1 // 28.5
char func_bank1_b::return#3 // 4.0
__bank(bank) char func_bank1_c(char a , char b)
char func_bank1_c::a
char func_bank1_c::b
char func_bank1_c::return
char func_bank1_c::return#0 // 4.333333333333333
char func_bank1_c::return#2 // 4.0
__bank(bank) char func_bank1_d(char a , char b)
char func_bank1_d::a
char func_bank1_d::b
char func_bank1_d::return
char func_bank1_d::return#0 // 4.333333333333333
char func_bank1_d::return#2 // 4.0
char func_bank1_e(char a , char b)
char func_bank1_e::a
char func_bank1_e::b
char func_bank1_e::return
char func_bank1_e::return#0 // 4.333333333333333
char func_bank1_e::return#2 // 4.0
char func_bank1_f(char a , char b)
char func_bank1_f::a
char func_bank1_f::b
char func_bank1_f::return
char func_bank1_f::return#0 // 4.333333333333333
char func_bank1_f::return#2 // 4.0
__bank(bank) char func_bank2_a(char a , char b)
char func_bank2_a::a
char func_bank2_a::a#4 // 101.0
char func_bank2_a::b
char func_bank2_a::b#4 // 101.0
char func_bank2_a::return
char func_bank2_a::return#0 // 22.0
char func_bank2_a::return#1 // 22.666666666666664
char func_bank2_a::return#10 // 4.0
char func_bank2_a::return#3 // 22.0
char func_bank2_a::return#4 // 22.0
char func_bank2_b(char a , char b)
char func_bank2_b::a
char func_bank2_b::a#2 // 101.0
char func_bank2_b::b
char func_bank2_b::b#2 // 101.0
char func_bank2_b::return
char func_bank2_b::return#0 // 22.0
char func_bank2_b::return#1 // 28.5
char func_bank2_b::return#3 // 4.0
__bank(bank) char func_bank2_c(char a , char b)
char func_bank2_c::a
char func_bank2_c::b
char func_bank2_c::return
char func_bank2_c::return#0 // 4.333333333333333
char func_bank2_c::return#2 // 4.0
__bank(bank) char func_bank2_d(char a , char b)
char func_bank2_d::a
char func_bank2_d::b
char func_bank2_d::return
char func_bank2_d::return#0 // 4.333333333333333
char func_bank2_d::return#2 // 4.0
__bank(bank) char func_bank2_e(char a , char b)
char func_bank2_e::a
char func_bank2_e::b
char func_bank2_e::return
char func_bank2_e::return#0 // 4.333333333333333
char func_bank2_e::return#2 // 4.0
__bank(bank) char func_bank2_f(char a , char b)
char func_bank2_f::a
char func_bank2_f::b
char func_bank2_f::return
char func_bank2_f::return#0 // 4.333333333333333
char func_bank2_f::return#2 // 4.0
void main()
char main::$0 // 4.0
char main::$1 // 4.0
char main::$10 // 4.0
char main::$11 // 4.0
char main::$2 // 4.0
char main::$3 // 4.0
char main::$4 // 4.0
char main::$5 // 4.0
char main::$6 // 4.0
char main::$7 // 4.0
char main::$8 // 4.0
char main::$9 // 4.0

Initial phi equivalence classes
[ func_bank1_a::a#4 ]
[ func_bank1_a::b#4 ]
[ func_bank1_b::a#2 ]
[ func_bank1_b::b#2 ]
[ func_bank2_a::a#4 ]
[ func_bank2_a::b#4 ]
[ func_bank2_b::a#2 ]
[ func_bank2_b::b#2 ]
Added variable func_bank1_a::return#10 to live range equivalence class [ func_bank1_a::return#10 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable func_bank1_b::return#3 to live range equivalence class [ func_bank1_b::return#3 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable func_bank1_c::return#2 to live range equivalence class [ func_bank1_c::return#2 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable func_bank1_d::return#2 to live range equivalence class [ func_bank1_d::return#2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable func_bank1_e::return#2 to live range equivalence class [ func_bank1_e::return#2 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable func_bank1_f::return#2 to live range equivalence class [ func_bank1_f::return#2 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable func_bank2_a::return#10 to live range equivalence class [ func_bank2_a::return#10 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable func_bank2_b::return#3 to live range equivalence class [ func_bank2_b::return#3 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable func_bank2_c::return#2 to live range equivalence class [ func_bank2_c::return#2 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Added variable func_bank2_d::return#2 to live range equivalence class [ func_bank2_d::return#2 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable func_bank2_e::return#2 to live range equivalence class [ func_bank2_e::return#2 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable func_bank2_f::return#2 to live range equivalence class [ func_bank2_f::return#2 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable func_bank1_a::return#0 to live range equivalence class [ func_bank1_a::return#0 ]
Added variable func_bank1_b::return#1 to live range equivalence class [ func_bank1_b::return#1 ]
Added variable func_bank1_a::return#2 to live range equivalence class [ func_bank1_a::return#2 ]
Added variable func_bank1_c::return#0 to live range equivalence class [ func_bank1_c::return#0 ]
Added variable func_bank2_a::return#0 to live range equivalence class [ func_bank2_a::return#0 ]
Added variable func_bank1_d::return#0 to live range equivalence class [ func_bank1_d::return#0 ]
Added variable func_bank1_a::return#4 to live range equivalence class [ func_bank1_a::return#4 ]
Added variable func_bank1_e::return#0 to live range equivalence class [ func_bank1_e::return#0 ]
Added variable func_bank2_a::return#4 to live range equivalence class [ func_bank2_a::return#4 ]
Added variable func_bank1_f::return#0 to live range equivalence class [ func_bank1_f::return#0 ]
Added variable func_bank2_a::return#1 to live range equivalence class [ func_bank2_a::return#1 ]
Added variable func_bank2_b::return#1 to live range equivalence class [ func_bank2_b::return#1 ]
Added variable func_bank1_a::return#3 to live range equivalence class [ func_bank1_a::return#3 ]
Added variable func_bank2_c::return#0 to live range equivalence class [ func_bank2_c::return#0 ]
Added variable func_bank2_a::return#3 to live range equivalence class [ func_bank2_a::return#3 ]
Added variable func_bank2_d::return#0 to live range equivalence class [ func_bank2_d::return#0 ]
Added variable func_bank2_b::return#0 to live range equivalence class [ func_bank2_b::return#0 ]
Added variable func_bank2_e::return#0 to live range equivalence class [ func_bank2_e::return#0 ]
Added variable func_bank1_b::return#0 to live range equivalence class [ func_bank1_b::return#0 ]
Added variable func_bank2_f::return#0 to live range equivalence class [ func_bank2_f::return#0 ]
Complete equivalence classes
[ func_bank1_a::a#4 ]
[ func_bank1_a::b#4 ]
[ func_bank1_b::a#2 ]
[ func_bank1_b::b#2 ]
[ func_bank2_a::a#4 ]
[ func_bank2_a::b#4 ]
[ func_bank2_b::a#2 ]
[ func_bank2_b::b#2 ]
[ func_bank1_a::return#10 ]
[ main::$0 ]
[ func_bank1_b::return#3 ]
[ main::$1 ]
[ func_bank1_c::return#2 ]
[ main::$2 ]
[ func_bank1_d::return#2 ]
[ main::$3 ]
[ func_bank1_e::return#2 ]
[ main::$4 ]
[ func_bank1_f::return#2 ]
[ main::$5 ]
[ func_bank2_a::return#10 ]
[ main::$6 ]
[ func_bank2_b::return#3 ]
[ main::$7 ]
[ func_bank2_c::return#2 ]
[ main::$8 ]
[ func_bank2_d::return#2 ]
[ main::$9 ]
[ func_bank2_e::return#2 ]
[ main::$10 ]
[ func_bank2_f::return#2 ]
[ main::$11 ]
[ func_bank1_a::return#0 ]
[ func_bank1_b::return#1 ]
[ func_bank1_a::return#2 ]
[ func_bank1_c::return#0 ]
[ func_bank2_a::return#0 ]
[ func_bank1_d::return#0 ]
[ func_bank1_a::return#4 ]
[ func_bank1_e::return#0 ]
[ func_bank2_a::return#4 ]
[ func_bank1_f::return#0 ]
[ func_bank2_a::return#1 ]
[ func_bank2_b::return#1 ]
[ func_bank1_a::return#3 ]
[ func_bank2_c::return#0 ]
[ func_bank2_a::return#3 ]
[ func_bank2_d::return#0 ]
[ func_bank2_b::return#0 ]
[ func_bank2_e::return#0 ]
[ func_bank1_b::return#0 ]
[ func_bank2_f::return#0 ]
Allocated zp[1]:2 [ func_bank1_a::a#4 ]
Allocated zp[1]:3 [ func_bank1_a::b#4 ]
Allocated zp[1]:4 [ func_bank1_b::a#2 ]
Allocated zp[1]:5 [ func_bank1_b::b#2 ]
Allocated zp[1]:6 [ func_bank2_a::a#4 ]
Allocated zp[1]:7 [ func_bank2_a::b#4 ]
Allocated zp[1]:8 [ func_bank2_b::a#2 ]
Allocated zp[1]:9 [ func_bank2_b::b#2 ]
Allocated zp[1]:10 [ func_bank1_b::return#1 ]
Allocated zp[1]:11 [ func_bank2_b::return#1 ]
Allocated zp[1]:12 [ func_bank2_a::return#1 ]
Allocated zp[1]:13 [ func_bank1_a::return#0 ]
Allocated zp[1]:14 [ func_bank1_a::return#2 ]
Allocated zp[1]:15 [ func_bank2_a::return#0 ]
Allocated zp[1]:16 [ func_bank1_a::return#4 ]
Allocated zp[1]:17 [ func_bank2_a::return#4 ]
Allocated zp[1]:18 [ func_bank1_a::return#3 ]
Allocated zp[1]:19 [ func_bank2_a::return#3 ]
Allocated zp[1]:20 [ func_bank2_b::return#0 ]
Allocated zp[1]:21 [ func_bank1_b::return#0 ]
Allocated zp[1]:22 [ func_bank1_c::return#0 ]
Allocated zp[1]:23 [ func_bank1_d::return#0 ]
Allocated zp[1]:24 [ func_bank1_e::return#0 ]
Allocated zp[1]:25 [ func_bank1_f::return#0 ]
Allocated zp[1]:26 [ func_bank2_c::return#0 ]
Allocated zp[1]:27 [ func_bank2_d::return#0 ]
Allocated zp[1]:28 [ func_bank2_e::return#0 ]
Allocated zp[1]:29 [ func_bank2_f::return#0 ]
Allocated zp[1]:30 [ func_bank1_a::return#10 ]
Allocated zp[1]:31 [ main::$0 ]
Allocated zp[1]:32 [ func_bank1_b::return#3 ]
Allocated zp[1]:33 [ main::$1 ]
Allocated zp[1]:34 [ func_bank1_c::return#2 ]
Allocated zp[1]:35 [ main::$2 ]
Allocated zp[1]:36 [ func_bank1_d::return#2 ]
Allocated zp[1]:37 [ main::$3 ]
Allocated zp[1]:38 [ func_bank1_e::return#2 ]
Allocated zp[1]:39 [ main::$4 ]
Allocated zp[1]:40 [ func_bank1_f::return#2 ]
Allocated zp[1]:41 [ main::$5 ]
Allocated zp[1]:42 [ func_bank2_a::return#10 ]
Allocated zp[1]:43 [ main::$6 ]
Allocated zp[1]:44 [ func_bank2_b::return#3 ]
Allocated zp[1]:45 [ main::$7 ]
Allocated zp[1]:46 [ func_bank2_c::return#2 ]
Allocated zp[1]:47 [ main::$8 ]
Allocated zp[1]:48 [ func_bank2_d::return#2 ]
Allocated zp[1]:49 [ main::$9 ]
Allocated zp[1]:50 [ func_bank2_e::return#2 ]
Allocated zp[1]:51 [ main::$10 ]
Allocated zp[1]:52 [ func_bank2_f::return#2 ]
Allocated zp[1]:53 [ main::$11 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [51] func_bank1_a::return#0 = func_bank1_a::a#4 + func_bank1_a::b#4 [ func_bank1_a::return#0 ] ( func_bank1_a:1 [ func_bank1_a::return#0 ] { { func_bank1_a::return#0 = func_bank1_a::return#10 } }  func_bank1_c:9::func_bank1_a:57 [ func_bank1_a::return#0 ] { { func_bank1_c::return#0 = func_bank1_c::return#2 } { func_bank1_a::return#0 = func_bank1_a::return#2 } }  func_bank1_e:17::func_bank1_a:67 [ func_bank1_a::return#0 ] { { func_bank1_e::return#0 = func_bank1_e::return#2 } { func_bank1_a::return#0 = func_bank1_a::return#4 } }  func_bank2_c:33::func_bank1_a:83 [ func_bank1_a::return#0 ] { { func_bank2_c::return#0 = func_bank2_c::return#2 } { func_bank1_a::return#0 = func_bank1_a::return#3 } }  ) always clobbers reg byte a 
Statement [54] func_bank1_b::return#1 = func_bank1_b::a#2 + func_bank1_b::b#2 [ func_bank1_b::return#1 ] ( func_bank1_b:5 [ func_bank1_b::return#1 ] { { func_bank1_b::return#1 = func_bank1_b::return#3 } }  func_bank2_f:45::func_bank1_b:98 [ func_bank1_b::return#1 ] { { func_bank2_f::return#0 = func_bank2_f::return#2 } { func_bank1_b::return#0 = func_bank1_b::return#1 } }  ) always clobbers reg byte a 
Statement [77] func_bank2_a::return#1 = func_bank2_a::a#4 + func_bank2_a::b#4 [ func_bank2_a::return#1 ] ( func_bank2_a:25 [ func_bank2_a::return#1 ] { { func_bank2_a::return#1 = func_bank2_a::return#10 } }  func_bank1_d:13::func_bank2_a:62 [ func_bank2_a::return#1 ] { { func_bank1_d::return#0 = func_bank1_d::return#2 } { func_bank2_a::return#0 = func_bank2_a::return#1 } }  func_bank1_f:21::func_bank2_a:72 [ func_bank2_a::return#1 ] { { func_bank1_f::return#0 = func_bank1_f::return#2 } { func_bank2_a::return#1 = func_bank2_a::return#4 } }  func_bank2_d:37::func_bank2_a:88 [ func_bank2_a::return#1 ] { { func_bank2_d::return#0 = func_bank2_d::return#2 } { func_bank2_a::return#1 = func_bank2_a::return#3 } }  ) always clobbers reg byte a 
Statement [80] func_bank2_b::return#1 = func_bank2_b::a#2 + func_bank2_b::b#2 [ func_bank2_b::return#1 ] ( func_bank2_b:29 [ func_bank2_b::return#1 ] { { func_bank2_b::return#1 = func_bank2_b::return#3 } }  func_bank2_e:41::func_bank2_b:93 [ func_bank2_b::return#1 ] { { func_bank2_e::return#0 = func_bank2_e::return#2 } { func_bank2_b::return#0 = func_bank2_b::return#1 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ func_bank1_a::a#4 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ func_bank1_a::b#4 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ func_bank1_b::a#2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ func_bank1_b::b#2 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ func_bank2_a::a#4 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ func_bank2_a::b#4 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ func_bank2_b::a#2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ func_bank2_b::b#2 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ func_bank1_a::return#10 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ main::$0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ func_bank1_b::return#3 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ main::$1 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ func_bank1_c::return#2 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ main::$2 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ func_bank1_d::return#2 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ main::$3 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ func_bank1_e::return#2 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ main::$4 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ func_bank1_f::return#2 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ main::$5 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ func_bank2_a::return#10 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ main::$6 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ func_bank2_b::return#3 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ main::$7 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ func_bank2_c::return#2 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ main::$8 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ func_bank2_d::return#2 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ main::$9 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ func_bank2_e::return#2 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ main::$10 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ func_bank2_f::return#2 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ main::$11 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ func_bank1_a::return#0 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ func_bank1_b::return#1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ func_bank1_a::return#2 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ func_bank1_c::return#0 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ func_bank2_a::return#0 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ func_bank1_d::return#0 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ func_bank1_a::return#4 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ func_bank1_e::return#0 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ func_bank2_a::return#4 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ func_bank1_f::return#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ func_bank2_a::return#1 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ func_bank2_b::return#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ func_bank1_a::return#3 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ func_bank2_c::return#0 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ func_bank2_a::return#3 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ func_bank2_d::return#0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ func_bank2_b::return#0 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ func_bank2_e::return#0 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ func_bank1_b::return#0 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ func_bank2_f::return#0 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [func_bank1_a] 101: zp[1]:2 [ func_bank1_a::a#4 ] 101: zp[1]:3 [ func_bank1_a::b#4 ] 22.67: zp[1]:13 [ func_bank1_a::return#0 ] 22: zp[1]:14 [ func_bank1_a::return#2 ] 22: zp[1]:16 [ func_bank1_a::return#4 ] 22: zp[1]:18 [ func_bank1_a::return#3 ] 4: zp[1]:30 [ func_bank1_a::return#10 ] 
Uplift Scope [func_bank2_a] 101: zp[1]:6 [ func_bank2_a::a#4 ] 101: zp[1]:7 [ func_bank2_a::b#4 ] 22.67: zp[1]:12 [ func_bank2_a::return#1 ] 22: zp[1]:15 [ func_bank2_a::return#0 ] 22: zp[1]:17 [ func_bank2_a::return#4 ] 22: zp[1]:19 [ func_bank2_a::return#3 ] 4: zp[1]:42 [ func_bank2_a::return#10 ] 
Uplift Scope [func_bank1_b] 101: zp[1]:4 [ func_bank1_b::a#2 ] 101: zp[1]:5 [ func_bank1_b::b#2 ] 28.5: zp[1]:10 [ func_bank1_b::return#1 ] 22: zp[1]:21 [ func_bank1_b::return#0 ] 4: zp[1]:32 [ func_bank1_b::return#3 ] 
Uplift Scope [func_bank2_b] 101: zp[1]:8 [ func_bank2_b::a#2 ] 101: zp[1]:9 [ func_bank2_b::b#2 ] 28.5: zp[1]:11 [ func_bank2_b::return#1 ] 22: zp[1]:20 [ func_bank2_b::return#0 ] 4: zp[1]:44 [ func_bank2_b::return#3 ] 
Uplift Scope [main] 4: zp[1]:31 [ main::$0 ] 4: zp[1]:33 [ main::$1 ] 4: zp[1]:35 [ main::$2 ] 4: zp[1]:37 [ main::$3 ] 4: zp[1]:39 [ main::$4 ] 4: zp[1]:41 [ main::$5 ] 4: zp[1]:43 [ main::$6 ] 4: zp[1]:45 [ main::$7 ] 4: zp[1]:47 [ main::$8 ] 4: zp[1]:49 [ main::$9 ] 4: zp[1]:51 [ main::$10 ] 4: zp[1]:53 [ main::$11 ] 
Uplift Scope [func_bank1_c] 4.33: zp[1]:22 [ func_bank1_c::return#0 ] 4: zp[1]:34 [ func_bank1_c::return#2 ] 
Uplift Scope [func_bank1_d] 4.33: zp[1]:23 [ func_bank1_d::return#0 ] 4: zp[1]:36 [ func_bank1_d::return#2 ] 
Uplift Scope [func_bank2_c] 4.33: zp[1]:26 [ func_bank2_c::return#0 ] 4: zp[1]:46 [ func_bank2_c::return#2 ] 
Uplift Scope [func_bank2_d] 4.33: zp[1]:27 [ func_bank2_d::return#0 ] 4: zp[1]:48 [ func_bank2_d::return#2 ] 
Uplift Scope [func_bank2_e] 4.33: zp[1]:28 [ func_bank2_e::return#0 ] 4: zp[1]:50 [ func_bank2_e::return#2 ] 
Uplift Scope [func_bank2_f] 4.33: zp[1]:29 [ func_bank2_f::return#0 ] 4: zp[1]:52 [ func_bank2_f::return#2 ] 
Uplift Scope [func_bank1_e] 4.33: zp[1]:24 [ func_bank1_e::return#0 ] 4: zp[1]:38 [ func_bank1_e::return#2 ] 
Uplift Scope [func_bank1_f] 4.33: zp[1]:25 [ func_bank1_f::return#0 ] 4: zp[1]:40 [ func_bank1_f::return#2 ] 
Uplift Scope [] 

Uplifting [func_bank1_a] best 740 combination reg byte x [ func_bank1_a::a#4 ] reg byte a [ func_bank1_a::b#4 ] reg byte a [ func_bank1_a::return#0 ] reg byte a [ func_bank1_a::return#2 ] zp[1]:16 [ func_bank1_a::return#4 ] zp[1]:18 [ func_bank1_a::return#3 ] zp[1]:30 [ func_bank1_a::return#10 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [func_bank2_a] best 695 combination reg byte x [ func_bank2_a::a#4 ] reg byte a [ func_bank2_a::b#4 ] reg byte a [ func_bank2_a::return#1 ] reg byte a [ func_bank2_a::return#0 ] zp[1]:17 [ func_bank2_a::return#4 ] zp[1]:19 [ func_bank2_a::return#3 ] zp[1]:42 [ func_bank2_a::return#10 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [func_bank1_b] best 668 combination reg byte x [ func_bank1_b::a#2 ] reg byte a [ func_bank1_b::b#2 ] reg byte a [ func_bank1_b::return#1 ] reg byte a [ func_bank1_b::return#0 ] zp[1]:32 [ func_bank1_b::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [func_bank2_b] best 641 combination reg byte x [ func_bank2_b::a#2 ] reg byte a [ func_bank2_b::b#2 ] reg byte a [ func_bank2_b::return#1 ] reg byte a [ func_bank2_b::return#0 ] zp[1]:44 [ func_bank2_b::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 617 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] zp[1]:39 [ main::$4 ] zp[1]:41 [ main::$5 ] zp[1]:43 [ main::$6 ] zp[1]:45 [ main::$7 ] zp[1]:47 [ main::$8 ] zp[1]:49 [ main::$9 ] zp[1]:51 [ main::$10 ] zp[1]:53 [ main::$11 ] 
Limited combination testing to 100 combinations of 16777216 possible.
Uplifting [func_bank1_c] best 605 combination reg byte a [ func_bank1_c::return#0 ] reg byte a [ func_bank1_c::return#2 ] 
Uplifting [func_bank1_d] best 593 combination reg byte a [ func_bank1_d::return#0 ] reg byte a [ func_bank1_d::return#2 ] 
Uplifting [func_bank2_c] best 581 combination reg byte a [ func_bank2_c::return#0 ] reg byte a [ func_bank2_c::return#2 ] 
Uplifting [func_bank2_d] best 569 combination reg byte a [ func_bank2_d::return#0 ] reg byte a [ func_bank2_d::return#2 ] 
Uplifting [func_bank2_e] best 557 combination reg byte a [ func_bank2_e::return#0 ] reg byte a [ func_bank2_e::return#2 ] 
Uplifting [func_bank2_f] best 545 combination reg byte a [ func_bank2_f::return#0 ] reg byte a [ func_bank2_f::return#2 ] 
Uplifting [func_bank1_e] best 533 combination reg byte a [ func_bank1_e::return#0 ] reg byte a [ func_bank1_e::return#2 ] 
Uplifting [func_bank1_f] best 521 combination reg byte a [ func_bank1_f::return#0 ] reg byte a [ func_bank1_f::return#2 ] 
Uplifting [] best 521 combination 
Attempting to uplift remaining variables inzp[1]:16 [ func_bank1_a::return#4 ]
Uplifting [func_bank1_a] best 515 combination reg byte a [ func_bank1_a::return#4 ] 
Attempting to uplift remaining variables inzp[1]:17 [ func_bank2_a::return#4 ]
Uplifting [func_bank2_a] best 509 combination reg byte a [ func_bank2_a::return#4 ] 
Attempting to uplift remaining variables inzp[1]:18 [ func_bank1_a::return#3 ]
Uplifting [func_bank1_a] best 503 combination reg byte a [ func_bank1_a::return#3 ] 
Attempting to uplift remaining variables inzp[1]:19 [ func_bank2_a::return#3 ]
Uplifting [func_bank2_a] best 497 combination reg byte a [ func_bank2_a::return#3 ] 
Attempting to uplift remaining variables inzp[1]:30 [ func_bank1_a::return#10 ]
Uplifting [func_bank1_a] best 491 combination reg byte a [ func_bank1_a::return#10 ] 
Attempting to uplift remaining variables inzp[1]:32 [ func_bank1_b::return#3 ]
Uplifting [func_bank1_b] best 485 combination reg byte a [ func_bank1_b::return#3 ] 
Attempting to uplift remaining variables inzp[1]:39 [ main::$4 ]
Uplifting [main] best 479 combination reg byte a [ main::$4 ] 
Attempting to uplift remaining variables inzp[1]:41 [ main::$5 ]
Uplifting [main] best 473 combination reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:42 [ func_bank2_a::return#10 ]
Uplifting [func_bank2_a] best 467 combination reg byte a [ func_bank2_a::return#10 ] 
Attempting to uplift remaining variables inzp[1]:43 [ main::$6 ]
Uplifting [main] best 461 combination reg byte a [ main::$6 ] 
Attempting to uplift remaining variables inzp[1]:44 [ func_bank2_b::return#3 ]
Uplifting [func_bank2_b] best 455 combination reg byte a [ func_bank2_b::return#3 ] 
Attempting to uplift remaining variables inzp[1]:45 [ main::$7 ]
Uplifting [main] best 449 combination reg byte a [ main::$7 ] 
Attempting to uplift remaining variables inzp[1]:47 [ main::$8 ]
Uplifting [main] best 443 combination reg byte a [ main::$8 ] 
Attempting to uplift remaining variables inzp[1]:49 [ main::$9 ]
Uplifting [main] best 437 combination reg byte a [ main::$9 ] 
Attempting to uplift remaining variables inzp[1]:51 [ main::$10 ]
Uplifting [main] best 431 combination reg byte a [ main::$10 ] 
Attempting to uplift remaining variables inzp[1]:53 [ main::$11 ]
Uplifting [main] best 425 combination reg byte a [ main::$11 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a far call procedure with a calling convention phi
  // Upstart
.cpu _65c02
  .segmentdef Program                 [segments="Basic, Code, Data, stage, platform"]
.segmentdef Basic                   [start=$0801]
.segmentdef Code                    [start=$80d]
.segmentdef Data                    [startAfter="Code"]
.segmentdef stage                   [start=$0400, min=$0400, max=$07FF, align=$100]
.segmentdef platform                [start=$C000, min=$C000, max=$C7FF, align=$100]


  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] call func_bank1_a
    // [50] phi from main to func_bank1_a [phi:main->func_bank1_a]
  func_bank1_a_from_main:
    // [50] phi func_bank1_a::b#4 = 7 [phi:main->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #7
    // [50] phi func_bank1_a::a#4 = '0' [phi:main->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // [2] func_bank1_a::return#10 = func_bank1_a::return#0
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$0 = func_bank1_a::return#10
    // [4] *SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [5] call func_bank1_b
    // [53] phi from main::@1 to func_bank1_b [phi:main::@1->func_bank1_b]
  func_bank1_b_from___b1:
    // [53] phi func_bank1_b::b#2 = 7 [phi:main::@1->func_bank1_b#0] -- vbuaa=vbuc1 
    lda #7
    // [53] phi func_bank1_b::a#2 = '0' [phi:main::@1->func_bank1_b#1] -- vbuxx=vbuc1 
    ldx #'0'
    jsr func_bank1_b
    // [6] func_bank1_b::return#3 = func_bank1_b::return#1
    jmp __b2
    // main::@2
  __b2:
    // [7] main::$1 = func_bank1_b::return#3
    // [8] *SCREEN = main::$1 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [9] call func_bank1_c
    // [56] phi from main::@2 to func_bank1_c [phi:main::@2->func_bank1_c] -- call_far_cx16_ram_finalize 
  func_bank1_c_from___b2:
    jsr $ff6e
    .byte <func_bank1_c
    .byte >func_bank1_c
    .byte 1
    // [10] func_bank1_c::return#2 = func_bank1_c::return#0
    jmp __b3
    // main::@3
  __b3:
    // [11] main::$2 = func_bank1_c::return#2
    // [12] *SCREEN = main::$2 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [13] call func_bank1_d
    // [61] phi from main::@3 to func_bank1_d [phi:main::@3->func_bank1_d] -- call_far_cx16_ram_finalize 
  func_bank1_d_from___b3:
    jsr $ff6e
    .byte <func_bank1_d
    .byte >func_bank1_d
    .byte 1
    // [14] func_bank1_d::return#2 = func_bank1_d::return#0
    jmp __b4
    // main::@4
  __b4:
    // [15] main::$3 = func_bank1_d::return#2
    // [16] *SCREEN = main::$3 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [17] call func_bank1_e
    // [66] phi from main::@4 to func_bank1_e [phi:main::@4->func_bank1_e]
  func_bank1_e_from___b4:
    jsr func_bank1_e
    // [18] func_bank1_e::return#2 = func_bank1_e::return#0
    jmp __b5
    // main::@5
  __b5:
    // [19] main::$4 = func_bank1_e::return#2
    // [20] *SCREEN = main::$4 -- _deref_pbuc1=vbuaa 
    // near call
    sta SCREEN
    // [21] call func_bank1_f
    // [71] phi from main::@5 to func_bank1_f [phi:main::@5->func_bank1_f]
  func_bank1_f_from___b5:
    jsr func_bank1_f
    // [22] func_bank1_f::return#2 = func_bank1_f::return#0
    jmp __b6
    // main::@6
  __b6:
    // [23] main::$5 = func_bank1_f::return#2
    // [24] *SCREEN = main::$5 -- _deref_pbuc1=vbuaa 
    // near call
    sta SCREEN
    // [25] call func_bank2_a
    // [76] phi from main::@6 to func_bank2_a [phi:main::@6->func_bank2_a]
  func_bank2_a_from___b6:
    // [76] phi func_bank2_a::b#4 = 7 [phi:main::@6->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #7
    // [76] phi func_bank2_a::a#4 = '0' [phi:main::@6->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // [26] func_bank2_a::return#10 = func_bank2_a::return#1
    jmp __b7
    // main::@7
  __b7:
    // [27] main::$6 = func_bank2_a::return#10
    // [28] *SCREEN = main::$6 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [29] call func_bank2_b
    // [79] phi from main::@7 to func_bank2_b [phi:main::@7->func_bank2_b]
  func_bank2_b_from___b7:
    // [79] phi func_bank2_b::b#2 = 7 [phi:main::@7->func_bank2_b#0] -- vbuaa=vbuc1 
    lda #7
    // [79] phi func_bank2_b::a#2 = '0' [phi:main::@7->func_bank2_b#1] -- vbuxx=vbuc1 
    ldx #'0'
    jsr func_bank2_b
    // [30] func_bank2_b::return#3 = func_bank2_b::return#1
    jmp __b8
    // main::@8
  __b8:
    // [31] main::$7 = func_bank2_b::return#3
    // [32] *SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [33] call func_bank2_c
    // [82] phi from main::@8 to func_bank2_c [phi:main::@8->func_bank2_c] -- call_far_cx16_ram_finalize 
  func_bank2_c_from___b8:
    jsr $ff6e
    .byte <func_bank2_c
    .byte >func_bank2_c
    .byte 2
    // [34] func_bank2_c::return#2 = func_bank2_c::return#0
    jmp __b9
    // main::@9
  __b9:
    // [35] main::$8 = func_bank2_c::return#2
    // [36] *SCREEN = main::$8 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [37] call func_bank2_d
    // [87] phi from main::@9 to func_bank2_d [phi:main::@9->func_bank2_d] -- call_far_cx16_ram_finalize 
  func_bank2_d_from___b9:
    jsr $ff6e
    .byte <func_bank2_d
    .byte >func_bank2_d
    .byte 2
    // [38] func_bank2_d::return#2 = func_bank2_d::return#0
    jmp __b10
    // main::@10
  __b10:
    // [39] main::$9 = func_bank2_d::return#2
    // [40] *SCREEN = main::$9 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [41] call func_bank2_e
    // [92] phi from main::@10 to func_bank2_e [phi:main::@10->func_bank2_e] -- call_far_cx16_ram_finalize 
  func_bank2_e_from___b10:
    jsr $ff6e
    .byte <func_bank2_e
    .byte >func_bank2_e
    .byte 2
    // [42] func_bank2_e::return#2 = func_bank2_e::return#0
    jmp __b11
    // main::@11
  __b11:
    // [43] main::$10 = func_bank2_e::return#2
    // [44] *SCREEN = main::$10 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // [45] call func_bank2_f
    // [97] phi from main::@11 to func_bank2_f [phi:main::@11->func_bank2_f] -- call_far_cx16_ram_finalize 
  func_bank2_f_from___b11:
    jsr $ff6e
    .byte <func_bank2_f
    .byte >func_bank2_f
    .byte 2
    // [46] func_bank2_f::return#2 = func_bank2_f::return#0
    jmp __b12
    // main::@12
  __b12:
    // [47] main::$11 = func_bank2_f::return#2
    // [48] *SCREEN = main::$11 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [49] return 
    rts
}
.segment stage
  // func_bank1_a
// __register(A) char func_bank1_a(__register(X) char a, __register(A) char b)
func_bank1_a: {
    // [51] func_bank1_a::return#0 = func_bank1_a::a#4 + func_bank1_a::b#4 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_bank1_a::@return
  __breturn:
    // [52] return 
    rts
}
.segment platform
  // func_bank1_b
// __register(A) char func_bank1_b(__register(X) char a, __register(A) char b)
func_bank1_b: {
    // [54] func_bank1_b::return#1 = func_bank1_b::a#2 + func_bank1_b::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_bank1_b::@return
  __breturn:
    // [55] return 
    rts
}
.segment stage
  // func_bank1_c
// __register(A) char func_bank1_c(char a, char b)
func_bank1_c: {
    .const a = '0'
    .const b = 7
    // [57] call func_bank1_a
    // [50] phi from func_bank1_c to func_bank1_a [phi:func_bank1_c->func_bank1_a]
  func_bank1_a_from_func_bank1_c:
    // [50] phi func_bank1_a::b#4 = func_bank1_c::b#0 [phi:func_bank1_c->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank1_c::a#0 [phi:func_bank1_c->func_bank1_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank1_a
    // [58] func_bank1_a::return#2 = func_bank1_a::return#0
    jmp __b1
    // func_bank1_c::@1
  __b1:
    // [59] func_bank1_c::return#0 = func_bank1_a::return#2
    jmp __breturn
    // func_bank1_c::@return
  __breturn:
    // [60] return 
    rts
}
  // func_bank1_d
// __register(A) char func_bank1_d(char a, char b)
func_bank1_d: {
    .const a = '0'
    .const b = 7
    // [62] call func_bank2_a
    // [76] phi from func_bank1_d to func_bank2_a [phi:func_bank1_d->func_bank2_a]
  func_bank2_a_from_func_bank1_d:
    // [76] phi func_bank2_a::b#4 = func_bank1_d::b#0 [phi:func_bank1_d->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank1_d::a#0 [phi:func_bank1_d->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // [63] func_bank2_a::return#0 = func_bank2_a::return#1
    jmp __b1
    // func_bank1_d::@1
  __b1:
    // [64] func_bank1_d::return#0 = func_bank2_a::return#0
    jmp __breturn
    // func_bank1_d::@return
  __breturn:
    // [65] return 
    rts
}
.segment platform
  // func_bank1_e
// __register(A) char func_bank1_e(char a, char b)
func_bank1_e: {
    .const a = '0'
    .const b = 7
    // [67] call func_bank1_a
    // [50] phi from func_bank1_e to func_bank1_a [phi:func_bank1_e->func_bank1_a]
  func_bank1_a_from_func_bank1_e:
    // [50] phi func_bank1_a::b#4 = func_bank1_e::b#0 [phi:func_bank1_e->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank1_e::a#0 [phi:func_bank1_e->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // [68] func_bank1_a::return#4 = func_bank1_a::return#0
    jmp __b1
    // func_bank1_e::@1
  __b1:
    // [69] func_bank1_e::return#0 = func_bank1_a::return#4
    jmp __breturn
    // func_bank1_e::@return
  __breturn:
    // [70] return 
    rts
}
  // func_bank1_f
// __register(A) char func_bank1_f(char a, char b)
func_bank1_f: {
    .const a = '0'
    .const b = 7
    // [72] call func_bank2_a
    // [76] phi from func_bank1_f to func_bank2_a [phi:func_bank1_f->func_bank2_a]
  func_bank2_a_from_func_bank1_f:
    // [76] phi func_bank2_a::b#4 = func_bank1_f::b#0 [phi:func_bank1_f->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank1_f::a#0 [phi:func_bank1_f->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // [73] func_bank2_a::return#4 = func_bank2_a::return#1
    jmp __b1
    // func_bank1_f::@1
  __b1:
    // [74] func_bank1_f::return#0 = func_bank2_a::return#4
    jmp __breturn
    // func_bank1_f::@return
  __breturn:
    // [75] return 
    rts
}
  // func_bank2_a
// __register(A) char func_bank2_a(__register(X) char a, __register(A) char b)
func_bank2_a: {
    // [77] func_bank2_a::return#1 = func_bank2_a::a#4 + func_bank2_a::b#4 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_bank2_a::@return
  __breturn:
    // [78] return 
    rts
}
  // func_bank2_b
// __register(A) char func_bank2_b(__register(X) char a, __register(A) char b)
func_bank2_b: {
    // [80] func_bank2_b::return#1 = func_bank2_b::a#2 + func_bank2_b::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // func_bank2_b::@return
  __breturn:
    // [81] return 
    rts
}
  // func_bank2_c
// __register(A) char func_bank2_c(char a, char b)
func_bank2_c: {
    .const a = '0'
    .const b = 7
    // [83] call func_bank1_a
    // [50] phi from func_bank2_c to func_bank1_a [phi:func_bank2_c->func_bank1_a]
  func_bank1_a_from_func_bank2_c:
    // [50] phi func_bank1_a::b#4 = func_bank2_c::b#0 [phi:func_bank2_c->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank2_c::a#0 [phi:func_bank2_c->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // [84] func_bank1_a::return#3 = func_bank1_a::return#0
    jmp __b1
    // func_bank2_c::@1
  __b1:
    // [85] func_bank2_c::return#0 = func_bank1_a::return#3
    jmp __breturn
    // func_bank2_c::@return
  __breturn:
    // [86] return 
    rts
}
  // func_bank2_d
// __register(A) char func_bank2_d(char a, char b)
func_bank2_d: {
    .const a = '0'
    .const b = 7
    // [88] call func_bank2_a
    // [76] phi from func_bank2_d to func_bank2_a [phi:func_bank2_d->func_bank2_a]
  func_bank2_a_from_func_bank2_d:
    // [76] phi func_bank2_a::b#4 = func_bank2_d::b#0 [phi:func_bank2_d->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank2_d::a#0 [phi:func_bank2_d->func_bank2_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank2_a
    // [89] func_bank2_a::return#3 = func_bank2_a::return#1
    jmp __b1
    // func_bank2_d::@1
  __b1:
    // [90] func_bank2_d::return#0 = func_bank2_a::return#3
    jmp __breturn
    // func_bank2_d::@return
  __breturn:
    // [91] return 
    rts
}
  // func_bank2_e
// __register(A) char func_bank2_e(char a, char b)
func_bank2_e: {
    .const a = '0'
    .const b = 7
    // [93] call func_bank2_b
    // [79] phi from func_bank2_e to func_bank2_b [phi:func_bank2_e->func_bank2_b]
  func_bank2_b_from_func_bank2_e:
    // [79] phi func_bank2_b::b#2 = func_bank2_e::b#0 [phi:func_bank2_e->func_bank2_b#0] -- vbuaa=vbuc1 
    lda #b
    // [79] phi func_bank2_b::a#2 = func_bank2_e::a#0 [phi:func_bank2_e->func_bank2_b#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank2_b
    // [94] func_bank2_b::return#0 = func_bank2_b::return#1
    jmp __b1
    // func_bank2_e::@1
  __b1:
    // [95] func_bank2_e::return#0 = func_bank2_b::return#0
    jmp __breturn
    // func_bank2_e::@return
  __breturn:
    // [96] return 
    rts
}
  // func_bank2_f
// __register(A) char func_bank2_f(char a, char b)
func_bank2_f: {
    .const a = '0'
    .const b = 7
    // [98] call func_bank1_b
    // [53] phi from func_bank2_f to func_bank1_b [phi:func_bank2_f->func_bank1_b]
  func_bank1_b_from_func_bank2_f:
    // [53] phi func_bank1_b::b#2 = func_bank2_f::b#0 [phi:func_bank2_f->func_bank1_b#0] -- vbuaa=vbuc1 
    lda #b
    // [53] phi func_bank1_b::a#2 = func_bank2_f::a#0 [phi:func_bank2_f->func_bank1_b#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank1_b
    // [99] func_bank1_b::return#0 = func_bank1_b::return#1
    jmp __b1
    // func_bank2_f::@1
  __b1:
    // [100] func_bank2_f::return#0 = func_bank1_b::return#0
    jmp __breturn
    // func_bank2_f::@return
  __breturn:
    // [101] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction func_bank1_a_from_main:
Removing instruction __b1:
Removing instruction func_bank1_b_from___b1:
Removing instruction __b2:
Removing instruction func_bank1_c_from___b2:
Removing instruction __b3:
Removing instruction func_bank1_d_from___b3:
Removing instruction __b4:
Removing instruction func_bank1_e_from___b4:
Removing instruction __b5:
Removing instruction func_bank1_f_from___b5:
Removing instruction __b6:
Removing instruction func_bank2_a_from___b6:
Removing instruction __b7:
Removing instruction func_bank2_b_from___b7:
Removing instruction __b8:
Removing instruction func_bank2_c_from___b8:
Removing instruction __b9:
Removing instruction func_bank2_d_from___b9:
Removing instruction __b10:
Removing instruction func_bank2_e_from___b10:
Removing instruction __b11:
Removing instruction func_bank2_f_from___b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction func_bank1_a_from_func_bank1_c:
Removing instruction __b1:
Removing instruction func_bank2_a_from_func_bank1_d:
Removing instruction __b1:
Removing instruction func_bank1_a_from_func_bank1_e:
Removing instruction __b1:
Removing instruction func_bank2_a_from_func_bank1_f:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction func_bank1_a_from_func_bank2_c:
Removing instruction __b1:
Removing instruction func_bank2_a_from_func_bank2_d:
Removing instruction __b1:
Removing instruction func_bank2_b_from_func_bank2_e:
Removing instruction __b1:
Removing instruction func_bank1_b_from_func_bank2_f:
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
__bank(bank) char func_bank1_a(char a , char b)
char func_bank1_a::a
char func_bank1_a::a#4 // reg byte x 101.0
char func_bank1_a::b
char func_bank1_a::b#4 // reg byte a 101.0
char func_bank1_a::return
char func_bank1_a::return#0 // reg byte a 22.66666666666666
char func_bank1_a::return#10 // reg byte a 4.0
char func_bank1_a::return#2 // reg byte a 22.0
char func_bank1_a::return#3 // reg byte a 22.0
char func_bank1_a::return#4 // reg byte a 22.0
char func_bank1_b(char a , char b)
char func_bank1_b::a
char func_bank1_b::a#2 // reg byte x 101.0
char func_bank1_b::b
char func_bank1_b::b#2 // reg byte a 101.0
char func_bank1_b::return
char func_bank1_b::return#0 // reg byte a 22.0
char func_bank1_b::return#1 // reg byte a 28.5
char func_bank1_b::return#3 // reg byte a 4.0
__bank(bank) char func_bank1_c(char a , char b)
char func_bank1_c::a
__constant char func_bank1_c::a#0 = '0' // a
char func_bank1_c::b
__constant char func_bank1_c::b#0 = 7 // b
char func_bank1_c::return
char func_bank1_c::return#0 // reg byte a 4.333333333333333
char func_bank1_c::return#2 // reg byte a 4.0
__bank(bank) char func_bank1_d(char a , char b)
char func_bank1_d::a
__constant char func_bank1_d::a#0 = '0' // a
char func_bank1_d::b
__constant char func_bank1_d::b#0 = 7 // b
char func_bank1_d::return
char func_bank1_d::return#0 // reg byte a 4.333333333333333
char func_bank1_d::return#2 // reg byte a 4.0
char func_bank1_e(char a , char b)
char func_bank1_e::a
__constant char func_bank1_e::a#0 = '0' // a
char func_bank1_e::b
__constant char func_bank1_e::b#0 = 7 // b
char func_bank1_e::return
char func_bank1_e::return#0 // reg byte a 4.333333333333333
char func_bank1_e::return#2 // reg byte a 4.0
char func_bank1_f(char a , char b)
char func_bank1_f::a
__constant char func_bank1_f::a#0 = '0' // a
char func_bank1_f::b
__constant char func_bank1_f::b#0 = 7 // b
char func_bank1_f::return
char func_bank1_f::return#0 // reg byte a 4.333333333333333
char func_bank1_f::return#2 // reg byte a 4.0
__bank(bank) char func_bank2_a(char a , char b)
char func_bank2_a::a
char func_bank2_a::a#4 // reg byte x 101.0
char func_bank2_a::b
char func_bank2_a::b#4 // reg byte a 101.0
char func_bank2_a::return
char func_bank2_a::return#0 // reg byte a 22.0
char func_bank2_a::return#1 // reg byte a 22.666666666666664
char func_bank2_a::return#10 // reg byte a 4.0
char func_bank2_a::return#3 // reg byte a 22.0
char func_bank2_a::return#4 // reg byte a 22.0
char func_bank2_b(char a , char b)
char func_bank2_b::a
char func_bank2_b::a#2 // reg byte x 101.0
char func_bank2_b::b
char func_bank2_b::b#2 // reg byte a 101.0
char func_bank2_b::return
char func_bank2_b::return#0 // reg byte a 22.0
char func_bank2_b::return#1 // reg byte a 28.5
char func_bank2_b::return#3 // reg byte a 4.0
__bank(bank) char func_bank2_c(char a , char b)
char func_bank2_c::a
__constant char func_bank2_c::a#0 = '0' // a
char func_bank2_c::b
__constant char func_bank2_c::b#0 = 7 // b
char func_bank2_c::return
char func_bank2_c::return#0 // reg byte a 4.333333333333333
char func_bank2_c::return#2 // reg byte a 4.0
__bank(bank) char func_bank2_d(char a , char b)
char func_bank2_d::a
__constant char func_bank2_d::a#0 = '0' // a
char func_bank2_d::b
__constant char func_bank2_d::b#0 = 7 // b
char func_bank2_d::return
char func_bank2_d::return#0 // reg byte a 4.333333333333333
char func_bank2_d::return#2 // reg byte a 4.0
__bank(bank) char func_bank2_e(char a , char b)
char func_bank2_e::a
__constant char func_bank2_e::a#0 = '0' // a
char func_bank2_e::b
__constant char func_bank2_e::b#0 = 7 // b
char func_bank2_e::return
char func_bank2_e::return#0 // reg byte a 4.333333333333333
char func_bank2_e::return#2 // reg byte a 4.0
__bank(bank) char func_bank2_f(char a , char b)
char func_bank2_f::a
__constant char func_bank2_f::a#0 = '0' // a
char func_bank2_f::b
__constant char func_bank2_f::b#0 = 7 // b
char func_bank2_f::return
char func_bank2_f::return#0 // reg byte a 4.333333333333333
char func_bank2_f::return#2 // reg byte a 4.0
void main()
char main::$0 // reg byte a 4.0
char main::$1 // reg byte a 4.0
char main::$10 // reg byte a 4.0
char main::$11 // reg byte a 4.0
char main::$2 // reg byte a 4.0
char main::$3 // reg byte a 4.0
char main::$4 // reg byte a 4.0
char main::$5 // reg byte a 4.0
char main::$6 // reg byte a 4.0
char main::$7 // reg byte a 4.0
char main::$8 // reg byte a 4.0
char main::$9 // reg byte a 4.0

reg byte x [ func_bank1_a::a#4 ]
reg byte a [ func_bank1_a::b#4 ]
reg byte x [ func_bank1_b::a#2 ]
reg byte a [ func_bank1_b::b#2 ]
reg byte x [ func_bank2_a::a#4 ]
reg byte a [ func_bank2_a::b#4 ]
reg byte x [ func_bank2_b::a#2 ]
reg byte a [ func_bank2_b::b#2 ]
reg byte a [ func_bank1_a::return#10 ]
reg byte a [ main::$0 ]
reg byte a [ func_bank1_b::return#3 ]
reg byte a [ main::$1 ]
reg byte a [ func_bank1_c::return#2 ]
reg byte a [ main::$2 ]
reg byte a [ func_bank1_d::return#2 ]
reg byte a [ main::$3 ]
reg byte a [ func_bank1_e::return#2 ]
reg byte a [ main::$4 ]
reg byte a [ func_bank1_f::return#2 ]
reg byte a [ main::$5 ]
reg byte a [ func_bank2_a::return#10 ]
reg byte a [ main::$6 ]
reg byte a [ func_bank2_b::return#3 ]
reg byte a [ main::$7 ]
reg byte a [ func_bank2_c::return#2 ]
reg byte a [ main::$8 ]
reg byte a [ func_bank2_d::return#2 ]
reg byte a [ main::$9 ]
reg byte a [ func_bank2_e::return#2 ]
reg byte a [ main::$10 ]
reg byte a [ func_bank2_f::return#2 ]
reg byte a [ main::$11 ]
reg byte a [ func_bank1_a::return#0 ]
reg byte a [ func_bank1_b::return#1 ]
reg byte a [ func_bank1_a::return#2 ]
reg byte a [ func_bank1_c::return#0 ]
reg byte a [ func_bank2_a::return#0 ]
reg byte a [ func_bank1_d::return#0 ]
reg byte a [ func_bank1_a::return#4 ]
reg byte a [ func_bank1_e::return#0 ]
reg byte a [ func_bank2_a::return#4 ]
reg byte a [ func_bank1_f::return#0 ]
reg byte a [ func_bank2_a::return#1 ]
reg byte a [ func_bank2_b::return#1 ]
reg byte a [ func_bank1_a::return#3 ]
reg byte a [ func_bank2_c::return#0 ]
reg byte a [ func_bank2_a::return#3 ]
reg byte a [ func_bank2_d::return#0 ]
reg byte a [ func_bank2_b::return#0 ]
reg byte a [ func_bank2_e::return#0 ]
reg byte a [ func_bank1_b::return#0 ]
reg byte a [ func_bank2_f::return#0 ]


FINAL ASSEMBLER
Score: 326

  // File Comments
// Test a far call procedure with a calling convention phi
  // Upstart
.cpu _65c02
  .segmentdef Program                 [segments="Basic, Code, Data, stage, platform"]
.segmentdef Basic                   [start=$0801]
.segmentdef Code                    [start=$80d]
.segmentdef Data                    [startAfter="Code"]
.segmentdef stage                   [start=$0400, min=$0400, max=$07FF, align=$100]
.segmentdef platform                [start=$C000, min=$C000, max=$C7FF, align=$100]


  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // func_bank1_a('0', 7)
    // [1] call func_bank1_a
    // [50] phi from main to func_bank1_a [phi:main->func_bank1_a]
    // [50] phi func_bank1_a::b#4 = 7 [phi:main->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #7
    // [50] phi func_bank1_a::a#4 = '0' [phi:main->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // func_bank1_a('0', 7)
    // [2] func_bank1_a::return#10 = func_bank1_a::return#0
    // main::@1
    // [3] main::$0 = func_bank1_a::return#10
    // SCREEN[0] = func_bank1_a('0', 7)
    // [4] *SCREEN = main::$0 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank1_b('0', 7)
    // [5] call func_bank1_b
    // [53] phi from main::@1 to func_bank1_b [phi:main::@1->func_bank1_b]
    // [53] phi func_bank1_b::b#2 = 7 [phi:main::@1->func_bank1_b#0] -- vbuaa=vbuc1 
    lda #7
    // [53] phi func_bank1_b::a#2 = '0' [phi:main::@1->func_bank1_b#1] -- vbuxx=vbuc1 
    ldx #'0'
    jsr func_bank1_b
    // func_bank1_b('0', 7)
    // [6] func_bank1_b::return#3 = func_bank1_b::return#1
    // main::@2
    // [7] main::$1 = func_bank1_b::return#3
    // SCREEN[0] = func_bank1_b('0', 7)
    // [8] *SCREEN = main::$1 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank1_c('0', 7)
    // [9] call func_bank1_c
    // [56] phi from main::@2 to func_bank1_c [phi:main::@2->func_bank1_c] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank1_c
    .byte >func_bank1_c
    .byte 1
    // func_bank1_c('0', 7)
    // [10] func_bank1_c::return#2 = func_bank1_c::return#0
    // main::@3
    // [11] main::$2 = func_bank1_c::return#2
    // SCREEN[0] = func_bank1_c('0', 7)
    // [12] *SCREEN = main::$2 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank1_d('0', 7)
    // [13] call func_bank1_d
    // [61] phi from main::@3 to func_bank1_d [phi:main::@3->func_bank1_d] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank1_d
    .byte >func_bank1_d
    .byte 1
    // func_bank1_d('0', 7)
    // [14] func_bank1_d::return#2 = func_bank1_d::return#0
    // main::@4
    // [15] main::$3 = func_bank1_d::return#2
    // SCREEN[0] = func_bank1_d('0', 7)
    // [16] *SCREEN = main::$3 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank1_e('0', 7)
    // [17] call func_bank1_e
    // [66] phi from main::@4 to func_bank1_e [phi:main::@4->func_bank1_e]
    jsr func_bank1_e
    // func_bank1_e('0', 7)
    // [18] func_bank1_e::return#2 = func_bank1_e::return#0
    // main::@5
    // [19] main::$4 = func_bank1_e::return#2
    // SCREEN[0] = func_bank1_e('0', 7)
    // [20] *SCREEN = main::$4 -- _deref_pbuc1=vbuaa 
    // near call
    sta SCREEN
    // func_bank1_f('0', 7)
    // [21] call func_bank1_f
    // [71] phi from main::@5 to func_bank1_f [phi:main::@5->func_bank1_f]
    jsr func_bank1_f
    // func_bank1_f('0', 7)
    // [22] func_bank1_f::return#2 = func_bank1_f::return#0
    // main::@6
    // [23] main::$5 = func_bank1_f::return#2
    // SCREEN[0] = func_bank1_f('0', 7)
    // [24] *SCREEN = main::$5 -- _deref_pbuc1=vbuaa 
    // near call
    sta SCREEN
    // func_bank2_a('0', 7)
    // [25] call func_bank2_a
    // [76] phi from main::@6 to func_bank2_a [phi:main::@6->func_bank2_a]
    // [76] phi func_bank2_a::b#4 = 7 [phi:main::@6->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #7
    // [76] phi func_bank2_a::a#4 = '0' [phi:main::@6->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #'0'
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // func_bank2_a('0', 7)
    // [26] func_bank2_a::return#10 = func_bank2_a::return#1
    // main::@7
    // [27] main::$6 = func_bank2_a::return#10
    // SCREEN[0] = func_bank2_a('0', 7)
    // [28] *SCREEN = main::$6 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank2_b('0', 7)
    // [29] call func_bank2_b
    // [79] phi from main::@7 to func_bank2_b [phi:main::@7->func_bank2_b]
    // [79] phi func_bank2_b::b#2 = 7 [phi:main::@7->func_bank2_b#0] -- vbuaa=vbuc1 
    lda #7
    // [79] phi func_bank2_b::a#2 = '0' [phi:main::@7->func_bank2_b#1] -- vbuxx=vbuc1 
    ldx #'0'
    jsr func_bank2_b
    // func_bank2_b('0', 7)
    // [30] func_bank2_b::return#3 = func_bank2_b::return#1
    // main::@8
    // [31] main::$7 = func_bank2_b::return#3
    // SCREEN[0] = func_bank2_b('0', 7)
    // [32] *SCREEN = main::$7 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank2_c('0', 7)
    // [33] call func_bank2_c
    // [82] phi from main::@8 to func_bank2_c [phi:main::@8->func_bank2_c] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank2_c
    .byte >func_bank2_c
    .byte 2
    // func_bank2_c('0', 7)
    // [34] func_bank2_c::return#2 = func_bank2_c::return#0
    // main::@9
    // [35] main::$8 = func_bank2_c::return#2
    // SCREEN[0] = func_bank2_c('0', 7)
    // [36] *SCREEN = main::$8 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank2_d('0', 7)
    // [37] call func_bank2_d
    // [87] phi from main::@9 to func_bank2_d [phi:main::@9->func_bank2_d] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank2_d
    .byte >func_bank2_d
    .byte 2
    // func_bank2_d('0', 7)
    // [38] func_bank2_d::return#2 = func_bank2_d::return#0
    // main::@10
    // [39] main::$9 = func_bank2_d::return#2
    // SCREEN[0] = func_bank2_d('0', 7)
    // [40] *SCREEN = main::$9 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank2_e('0', 7)
    // [41] call func_bank2_e
    // [92] phi from main::@10 to func_bank2_e [phi:main::@10->func_bank2_e] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank2_e
    .byte >func_bank2_e
    .byte 2
    // func_bank2_e('0', 7)
    // [42] func_bank2_e::return#2 = func_bank2_e::return#0
    // main::@11
    // [43] main::$10 = func_bank2_e::return#2
    // SCREEN[0] = func_bank2_e('0', 7)
    // [44] *SCREEN = main::$10 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // func_bank2_f('0', 7)
    // [45] call func_bank2_f
    // [97] phi from main::@11 to func_bank2_f [phi:main::@11->func_bank2_f] -- call_far_cx16_ram_finalize 
    jsr $ff6e
    .byte <func_bank2_f
    .byte >func_bank2_f
    .byte 2
    // func_bank2_f('0', 7)
    // [46] func_bank2_f::return#2 = func_bank2_f::return#0
    // main::@12
    // [47] main::$11 = func_bank2_f::return#2
    // SCREEN[0] = func_bank2_f('0', 7)
    // [48] *SCREEN = main::$11 -- _deref_pbuc1=vbuaa 
    // far call
    sta SCREEN
    // main::@return
    // }
    // [49] return 
    rts
}
.segment stage
  // func_bank1_a
// __register(A) char func_bank1_a(__register(X) char a, __register(A) char b)
func_bank1_a: {
    // a+b
    // [51] func_bank1_a::return#0 = func_bank1_a::a#4 + func_bank1_a::b#4 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_bank1_a::@return
    // }
    // [52] return 
    rts
}
.segment platform
  // func_bank1_b
// __register(A) char func_bank1_b(__register(X) char a, __register(A) char b)
func_bank1_b: {
    // a+b
    // [54] func_bank1_b::return#1 = func_bank1_b::a#2 + func_bank1_b::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_bank1_b::@return
    // }
    // [55] return 
    rts
}
.segment stage
  // func_bank1_c
// __register(A) char func_bank1_c(char a, char b)
func_bank1_c: {
    .const a = '0'
    .const b = 7
    // func_bank1_a(a,b)
    // [57] call func_bank1_a
    // [50] phi from func_bank1_c to func_bank1_a [phi:func_bank1_c->func_bank1_a]
    // [50] phi func_bank1_a::b#4 = func_bank1_c::b#0 [phi:func_bank1_c->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank1_c::a#0 [phi:func_bank1_c->func_bank1_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank1_a
    // func_bank1_a(a,b)
    // [58] func_bank1_a::return#2 = func_bank1_a::return#0
    // func_bank1_c::@1
    // [59] func_bank1_c::return#0 = func_bank1_a::return#2
    // func_bank1_c::@return
    // }
    // [60] return 
    rts
}
  // func_bank1_d
// __register(A) char func_bank1_d(char a, char b)
func_bank1_d: {
    .const a = '0'
    .const b = 7
    // func_bank2_a(a,b)
    // [62] call func_bank2_a
    // [76] phi from func_bank1_d to func_bank2_a [phi:func_bank1_d->func_bank2_a]
    // [76] phi func_bank2_a::b#4 = func_bank1_d::b#0 [phi:func_bank1_d->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank1_d::a#0 [phi:func_bank1_d->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // func_bank2_a(a,b)
    // [63] func_bank2_a::return#0 = func_bank2_a::return#1
    // func_bank1_d::@1
    // [64] func_bank1_d::return#0 = func_bank2_a::return#0
    // func_bank1_d::@return
    // }
    // [65] return 
    rts
}
.segment platform
  // func_bank1_e
// __register(A) char func_bank1_e(char a, char b)
func_bank1_e: {
    .const a = '0'
    .const b = 7
    // func_bank1_a(a,b)
    // [67] call func_bank1_a
    // [50] phi from func_bank1_e to func_bank1_a [phi:func_bank1_e->func_bank1_a]
    // [50] phi func_bank1_a::b#4 = func_bank1_e::b#0 [phi:func_bank1_e->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank1_e::a#0 [phi:func_bank1_e->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // func_bank1_a(a,b)
    // [68] func_bank1_a::return#4 = func_bank1_a::return#0
    // func_bank1_e::@1
    // [69] func_bank1_e::return#0 = func_bank1_a::return#4
    // func_bank1_e::@return
    // }
    // [70] return 
    rts
}
  // func_bank1_f
// __register(A) char func_bank1_f(char a, char b)
func_bank1_f: {
    .const a = '0'
    .const b = 7
    // func_bank2_a(a,b)
    // [72] call func_bank2_a
    // [76] phi from func_bank1_f to func_bank2_a [phi:func_bank1_f->func_bank2_a]
    // [76] phi func_bank2_a::b#4 = func_bank1_f::b#0 [phi:func_bank1_f->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank1_f::a#0 [phi:func_bank1_f->func_bank2_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank2_a
    .byte >func_bank2_a
    .byte 2
    // func_bank2_a(a,b)
    // [73] func_bank2_a::return#4 = func_bank2_a::return#1
    // func_bank1_f::@1
    // [74] func_bank1_f::return#0 = func_bank2_a::return#4
    // func_bank1_f::@return
    // }
    // [75] return 
    rts
}
  // func_bank2_a
// __register(A) char func_bank2_a(__register(X) char a, __register(A) char b)
func_bank2_a: {
    // a+b
    // [77] func_bank2_a::return#1 = func_bank2_a::a#4 + func_bank2_a::b#4 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_bank2_a::@return
    // }
    // [78] return 
    rts
}
  // func_bank2_b
// __register(A) char func_bank2_b(__register(X) char a, __register(A) char b)
func_bank2_b: {
    // a+b
    // [80] func_bank2_b::return#1 = func_bank2_b::a#2 + func_bank2_b::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // func_bank2_b::@return
    // }
    // [81] return 
    rts
}
  // func_bank2_c
// __register(A) char func_bank2_c(char a, char b)
func_bank2_c: {
    .const a = '0'
    .const b = 7
    // func_bank1_a(a,b)
    // [83] call func_bank1_a
    // [50] phi from func_bank2_c to func_bank1_a [phi:func_bank2_c->func_bank1_a]
    // [50] phi func_bank1_a::b#4 = func_bank2_c::b#0 [phi:func_bank2_c->func_bank1_a#0] -- vbuaa=vbuc1 
    lda #b
    // [50] phi func_bank1_a::a#4 = func_bank2_c::a#0 [phi:func_bank2_c->func_bank1_a#1] -- call_far_cx16_ram_finalize 
    ldx #a
    jsr $ff6e
    .byte <func_bank1_a
    .byte >func_bank1_a
    .byte 1
    // func_bank1_a(a,b)
    // [84] func_bank1_a::return#3 = func_bank1_a::return#0
    // func_bank2_c::@1
    // [85] func_bank2_c::return#0 = func_bank1_a::return#3
    // func_bank2_c::@return
    // }
    // [86] return 
    rts
}
  // func_bank2_d
// __register(A) char func_bank2_d(char a, char b)
func_bank2_d: {
    .const a = '0'
    .const b = 7
    // func_bank2_a(a,b)
    // [88] call func_bank2_a
    // [76] phi from func_bank2_d to func_bank2_a [phi:func_bank2_d->func_bank2_a]
    // [76] phi func_bank2_a::b#4 = func_bank2_d::b#0 [phi:func_bank2_d->func_bank2_a#0] -- vbuaa=vbuc1 
    lda #b
    // [76] phi func_bank2_a::a#4 = func_bank2_d::a#0 [phi:func_bank2_d->func_bank2_a#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank2_a
    // func_bank2_a(a,b)
    // [89] func_bank2_a::return#3 = func_bank2_a::return#1
    // func_bank2_d::@1
    // [90] func_bank2_d::return#0 = func_bank2_a::return#3
    // func_bank2_d::@return
    // }
    // [91] return 
    rts
}
  // func_bank2_e
// __register(A) char func_bank2_e(char a, char b)
func_bank2_e: {
    .const a = '0'
    .const b = 7
    // func_bank2_b(a,b)
    // [93] call func_bank2_b
    // [79] phi from func_bank2_e to func_bank2_b [phi:func_bank2_e->func_bank2_b]
    // [79] phi func_bank2_b::b#2 = func_bank2_e::b#0 [phi:func_bank2_e->func_bank2_b#0] -- vbuaa=vbuc1 
    lda #b
    // [79] phi func_bank2_b::a#2 = func_bank2_e::a#0 [phi:func_bank2_e->func_bank2_b#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank2_b
    // func_bank2_b(a,b)
    // [94] func_bank2_b::return#0 = func_bank2_b::return#1
    // func_bank2_e::@1
    // [95] func_bank2_e::return#0 = func_bank2_b::return#0
    // func_bank2_e::@return
    // }
    // [96] return 
    rts
}
  // func_bank2_f
// __register(A) char func_bank2_f(char a, char b)
func_bank2_f: {
    .const a = '0'
    .const b = 7
    // func_bank1_b(a,b)
    // [98] call func_bank1_b
    // [53] phi from func_bank2_f to func_bank1_b [phi:func_bank2_f->func_bank1_b]
    // [53] phi func_bank1_b::b#2 = func_bank2_f::b#0 [phi:func_bank2_f->func_bank1_b#0] -- vbuaa=vbuc1 
    lda #b
    // [53] phi func_bank1_b::a#2 = func_bank2_f::a#0 [phi:func_bank2_f->func_bank1_b#1] -- vbuxx=vbuc1 
    ldx #a
    jsr func_bank1_b
    // func_bank1_b(a,b)
    // [99] func_bank1_b::return#0 = func_bank1_b::return#1
    // func_bank2_f::@1
    // [100] func_bank2_f::return#0 = func_bank1_b::return#0
    // func_bank2_f::@return
    // }
    // [101] return 
    rts
}
  // File Data

