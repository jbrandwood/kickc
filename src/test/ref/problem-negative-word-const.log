Fixing pointer array-indexing *((word*) screen + (byte) main::i)
Warning! Adding boolean cast to non-boolean sub-expression (number~) main::$0
Identified constant variable (word*) screen
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (word*) screen#0 ← ((word*)) (number) $400
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (word) main::w#0 ← (byte) main::i#2
  (number~) main::$0 ← (byte) main::i#2 & (number) 1
  (bool~) main::$4 ← (number) 0 != (number~) main::$0
  (bool~) main::$1 ← ! (bool~) main::$4
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (word) main::w#2 ← phi( main::@1/(word) main::w#0 main::@3/(word) main::w#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte~) main::$3 ← (byte) main::i#3 * (const byte) SIZEOF_WORD
  *((word*) screen#0 + (byte~) main::$3) ← (word) main::w#2
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,7)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,7)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (word) main::w#1 ← (number) -1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(number~) main::$0
(bool~) main::$1
(bool~) main::$2
(byte~) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(word) main::w
(word) main::w#0
(word) main::w#1
(word) main::w#2
(word*) screen
(word*) screen#0

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) main::i#2 & (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) main::$4 ← (number) 0 != (unumber~) main::$0
Adding number conversion cast (unumber) -1 in (word) main::w#1 ← (number) -1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word*) screen#0 ← (word*)(number) $400
Inlining cast (word) main::w#1 ← (unumber)(number) -1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::i#2 & (byte) 1
Inversing boolean not [6] (bool~) main::$1 ← (byte) 0 == (byte~) main::$0 from [5] (bool~) main::$4 ← (byte) 0 != (byte~) main::$0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::i#2 = (word) main::w#0 (byte) main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) main::i#2 = (byte) main::i#3 
Identical Phi Values (byte) main::i#3 (byte) main::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [7] if((byte) 0==(byte~) main::$0) goto main::@2
Simple Condition (bool~) main::$2 [13] if((byte) main::i#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word*) screen#0 = (word*) 1024
Constant (const byte) main::i#0 = 0
Constant (const word) main::w#1 = -1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,7)) goto main::@1 to (number) 8
Adding number conversion cast (unumber) 8 in if((byte) main::i#1!=(number) 8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [4] (byte~) main::$3 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const word) main::w#1
Constant inlined main::i#0 = (byte) 0
Constant inlined main::w#1 = (byte) -1
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [16] main::i#5 ← main::i#1
Not coalescing [17] main::w#3 ← main::i#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Renumbering block main::@6 to main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1
  [7] if((byte) 0==(byte~) main::$0) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@1
  [8] (word~) main::w#3 ← (byte) main::i#2
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [9] (word) main::w#2 ← phi( main::@3/(word~) main::w#3 main::@1/(byte) -1 )
  [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1
  [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 22.0
(byte~) main::$3 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 7.857142857142857
(word) main::w
(word) main::w#2 11.0
(word~) main::w#3 22.0
(word*) screen

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::w#2 main::w#3 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::w#2 main::w#3 ]
[ main::$0 ]
[ main::$3 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ main::w#2 main::w#3 ]
Allocated zp ZP_BYTE:5 [ main::$0 ]
Allocated zp ZP_BYTE:6 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Problem with assigning negative word constant (vwuz1=vbuc1)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label _0 = 5
    .label _3 = 6
    .label i = 2
    .label w = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z i
    sta.z _0
    // [7] if((byte) 0==(byte~) main::$0) goto main::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z _0
    beq b3
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [9] phi (word) main::w#2 = (byte) -1 [phi:main::@1->main::@2#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z w
    lda #>-1
    sta.z w+1
    jmp b2
    // main::@3
  b3:
    // [8] (word~) main::w#3 ← (byte) main::i#2 -- vwuz1=vbuz2 
    lda.z i
    sta.z w
    lda #0
    sta.z w+1
    // [9] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [9] phi (word) main::w#2 = (word~) main::w#3 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _3
    // [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy.z _3
    lda.z w
    sta screen,y
    lda.z w+1
    sta screen+1,y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne b1_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [14] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (word~) main::w#3 ← (byte) main::i#2 [ main::i#2 main::w#3 ] ( main:2 [ main::i#2 main::w#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::w#2 main::$3 ] ( main:2 [ main::i#2 main::w#2 main::$3 ] ) always clobbers reg byte a 
Statement [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [6] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1 [ main::i#2 main::$0 ] ( main:2 [ main::i#2 main::$0 ] ) always clobbers reg byte a 
Statement [8] (word~) main::w#3 ← (byte) main::i#2 [ main::i#2 main::w#3 ] ( main:2 [ main::i#2 main::w#3 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::w#2 main::$3 ] ( main:2 [ main::i#2 main::w#2 main::$3 ] ) always clobbers reg byte a 
Statement [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ main::w#2 main::w#3 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ main::$0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp ZP_WORD:3 [ main::w#2 main::w#3 ] 24.36: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:5 [ main::$0 ] 22: zp ZP_BYTE:6 [ main::$3 ] 
Uplift Scope [] 

Uplifting [main] best 758 combination zp ZP_WORD:3 [ main::w#2 main::w#3 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::$3 ] 
Uplifting [] best 758 combination 
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ main::w#2 main::w#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Problem with assigning negative word constant (vwuz1=vbuc1)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label w = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [7] if((byte) 0==(byte~) main::$0) goto main::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq b3
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [9] phi (word) main::w#2 = (byte) -1 [phi:main::@1->main::@2#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z w
    lda #>-1
    sta.z w+1
    jmp b2
    // main::@3
  b3:
    // [8] (word~) main::w#3 ← (byte) main::i#2 -- vwuz1=vbuxx 
    txa
    sta.z w
    lda #0
    sta.z w+1
    // [9] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [9] phi (word) main::w#2 = (word~) main::w#3 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta screen,y
    lda.z w+1
    sta screen+1,y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) main::i#1!=(byte) 8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0 reg byte a 22.0
(byte~) main::$3 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 7.857142857142857
(word) main::w
(word) main::w#2 w zp ZP_WORD:2 11.0
(word~) main::w#3 w zp ZP_WORD:2 22.0
(word*) screen
(const word*) screen#0 screen = (word*) 1024

reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ main::w#2 main::w#3 ]
reg byte a [ main::$0 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 626

  // File Comments
// Problem with assigning negative word constant (vwuz1=vbuc1)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label w = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // i&1
    // [6] (byte~) main::$0 ← (byte) main::i#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(i&1)
    // [7] if((byte) 0==(byte~) main::$0) goto main::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq b3
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [9] phi (word) main::w#2 = (byte) -1 [phi:main::@1->main::@2#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z w
    lda #>-1
    sta.z w+1
    jmp b2
    // main::@3
  b3:
    // [8] (word~) main::w#3 ← (byte) main::i#2 -- vwuz1=vbuxx 
    txa
    sta.z w
    lda #0
    sta.z w+1
    // [9] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [9] phi (word) main::w#2 = (word~) main::w#3 [phi:main::@3->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // screen[i] = w
    // [10] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [11] *((const word*) screen#0 + (byte~) main::$3) ← (word) main::w#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta screen,y
    lda.z w+1
    sta screen+1,y
    // for( byte i:0..7)
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) main::i#1!=(byte) 8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data

