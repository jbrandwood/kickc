Fixing pointer increment (signed word*) sin16s_gen::sintab ← ++ (signed word*) sin16s_gen::sintab
Fixing pointer increment (signed word*) sin16s_gen2::sintab ← ++ (signed word*) sin16s_gen2::sintab
Fixing pointer addition (signed word*~) loop::$1 ← (signed word[XSIN_SIZE]) xsin + (word) xsin_idx
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Identified constant variable (byte*) SCREEN
Identified constant variable (byte*) LOGO
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) main::$0 ← call toD018 (byte*) SCREEN (byte*) LOGO 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) div32u16u::@1
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) mul16u::@5
Culled Empty Block (label) mul16u::@6
Culled Empty Block (label) mul16u::@8
Culled Empty Block (label) mul16u::@9
Culled Empty Block (label) @16
Culled Empty Block (label) mul16s::@5
Culled Empty Block (label) @18
Culled Empty Block (label) sin16s_gen2::@2
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) sin16s::@7
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) mulu16_sel::@1
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) memset::@5
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @27
Culled Empty Block (label) main::toD0181_@1
Culled Empty Block (label) loop::@2
Culled Empty Block (label) loop::@12
Culled Empty Block (label) loop::@3
Culled Empty Block (label) loop::@13
Culled Empty Block (label) loop::@5
Culled Empty Block (label) loop::@7
Culled Empty Block (label) loop::@8
Culled Empty Block (label) loop::@9
Culled Empty Block (label) loop::@14
Culled Empty Block (label) @30
Culled Empty Block (label) render_logo::@10
Culled Empty Block (label) render_logo::@11
Culled Empty Block (label) render_logo::@9
Culled Empty Block (label) render_logo::@18
Culled Empty Block (label) render_logo::@14
Culled Empty Block (label) render_logo::@19
Culled Empty Block (label) render_logo::@17
Culled Empty Block (label) render_logo::@2
Culled Empty Block (label) render_logo::@20
Culled Empty Block (label) render_logo::@27
Culled Empty Block (label) render_logo::@23
Culled Empty Block (label) render_logo::@28
Culled Empty Block (label) render_logo::@26
Culled Empty Block (label) render_logo::@35
Culled Empty Block (label) render_logo::@31
Culled Empty Block (label) render_logo::@36
Culled Empty Block (label) render_logo::@34

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) BGCOL#0 ← ((byte*)) (number) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (number) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (number) $d023
  (byte*) D016#0 ← ((byte*)) (number) $d016
  (byte) VIC_MCM#0 ← (number) $10
  (byte*) D018#0 ← ((byte*)) (number) $d018
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  (byte) BLACK#0 ← (number) 0
  (byte) WHITE#0 ← (number) 1
  (byte) DARK_GREY#0 ← (number) $b
  to:@6
@6: scope:[]  from @begin
  (word) rem16u#0 ← (number) 0
  to:@17
divr16u: scope:[divr16u]  from div32u16u div32u16u::@2
  (word) divr16u::divisor#6 ← phi( div32u16u/(word) divr16u::divisor#0 div32u16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( div32u16u/(word) divr16u::dividend#1 div32u16u::@2/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( div32u16u/(word) divr16u::rem#3 div32u16u::@2/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (number) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#1 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#11 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#11
  return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen2
  (word) rem16u#20 ← phi( sin16s_gen2/(word) rem16u#21 )
  (word) div32u16u::divisor#1 ← phi( sin16s_gen2/(word) div32u16u::divisor#0 )
  (dword) div32u16u::dividend#1 ← phi( sin16s_gen2/(dword) div32u16u::dividend#0 )
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend#1
  (word) divr16u::dividend#1 ← (word~) div32u16u::$0
  (word) divr16u::divisor#0 ← (word) div32u16u::divisor#1
  (word) divr16u::rem#3 ← (number) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  (word) div32u16u::divisor#2 ← phi( div32u16u/(word) div32u16u::divisor#1 )
  (dword) div32u16u::dividend#2 ← phi( div32u16u/(dword) div32u16u::dividend#1 )
  (word) rem16u#12 ← phi( div32u16u/(word) rem16u#2 )
  (word) divr16u::return#5 ← phi( div32u16u/(word) divr16u::return#2 )
  (word~) div32u16u::$1 ← (word) divr16u::return#5
  (word) rem16u#3 ← (word) rem16u#12
  (word) div32u16u::quotient_hi#0 ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend#2
  (word) divr16u::dividend#2 ← (word~) div32u16u::$2
  (word) divr16u::divisor#1 ← (word) div32u16u::divisor#2
  (word) divr16u::rem#4 ← (word) rem16u#3
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  (word) div32u16u::quotient_hi#1 ← phi( div32u16u::@2/(word) div32u16u::quotient_hi#0 )
  (word) rem16u#13 ← phi( div32u16u::@2/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( div32u16u::@2/(word) divr16u::return#3 )
  (word~) div32u16u::$3 ← (word) divr16u::return#6
  (word) rem16u#4 ← (word) rem16u#13
  (word) div32u16u::quotient_lo#0 ← (word~) div32u16u::$3
  (dword) div32u16u::quotient#0 ← ((dword)) { (word) div32u16u::quotient_hi#1, (word) div32u16u::quotient_lo#0 }
  (dword) div32u16u::return#0 ← (dword) div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  (word) rem16u#14 ← phi( div32u16u::@3/(word) rem16u#4 )
  (dword) div32u16u::return#3 ← phi( div32u16u::@3/(dword) div32u16u::return#0 )
  (dword) div32u16u::return#1 ← (dword) div32u16u::return#3
  (word) rem16u#5 ← (word) rem16u#14
  return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mulu16_sel/(word) mul16u::a#2 )
  (word) mul16u::b#2 ← phi( mul16s/(word) mul16u::b#0 mulu16_sel/(word) mul16u::b#1 )
  (dword) mul16u::res#0 ← (number) 0
  (dword) mul16u::mb#0 ← (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#3 != (number) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#4 ← phi( mul16u::@1/(word) mul16u::a#3 )
  (number~) mul16u::$1 ← (word) mul16u::a#4 & (number) 1
  (bool~) mul16u::$2 ← (number~) mul16u::$1 != (number) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@7/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@7/(dword) mul16u::mb#3 )
  (word) mul16u::a#5 ← phi( mul16u::@2/(word) mul16u::a#4 mul16u::@7/(word) mul16u::a#7 )
  (word~) mul16u::$5 ← (word) mul16u::a#5 >> (number) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#7 ← phi( mul16u::@2/(word) mul16u::a#4 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#4 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#4
  return 
  to:@return
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  (signed word) mul16s::b#1 ← phi( sin16s_gen2::@4/(signed word) mul16s::b#0 )
  (signed word) mul16s::a#1 ← phi( sin16s_gen2::@4/(signed word) mul16s::a#0 )
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a#1
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b#1
  (word) mul16u::a#1 ← (word~) mul16s::$0
  (word) mul16u::b#0 ← (word~) mul16s::$1
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mul16s::@6
mul16s::@6: scope:[mul16s]  from mul16s
  (signed word) mul16s::b#4 ← phi( mul16s/(signed word) mul16s::b#1 )
  (signed word) mul16s::a#2 ← phi( mul16s/(signed word) mul16s::a#1 )
  (dword) mul16u::return#5 ← phi( mul16s/(dword) mul16u::return#2 )
  (dword~) mul16s::$2 ← (dword) mul16u::return#5
  (dword) mul16s::m#0 ← (dword~) mul16s::$2
  (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (number) 0
  (bool~) mul16s::$4 ← ! (bool~) mul16s::$3
  if((bool~) mul16s::$4) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@6
  (signed word) mul16s::a#4 ← phi( mul16s::@3/(signed word) mul16s::a#5 mul16s::@6/(signed word) mul16s::a#2 )
  (dword) mul16s::m#6 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@6/(dword) mul16s::m#0 )
  (signed word) mul16s::b#2 ← phi( mul16s::@3/(signed word) mul16s::b#3 mul16s::@6/(signed word) mul16s::b#4 )
  (bool~) mul16s::$5 ← (signed word) mul16s::b#2 < (number) 0
  (bool~) mul16s::$6 ← ! (bool~) mul16s::$5
  if((bool~) mul16s::$6) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@6
  (signed word) mul16s::a#5 ← phi( mul16s::@6/(signed word) mul16s::a#2 )
  (signed word) mul16s::b#3 ← phi( mul16s::@6/(signed word) mul16s::b#4 )
  (dword) mul16s::m#3 ← phi( mul16s::@6/(dword) mul16s::m#0 )
  (word~) mul16s::$9 ← > (dword) mul16s::m#3
  (word~) mul16s::$10 ← ((word)) (signed word) mul16s::b#3
  (word~) mul16s::$11 ← (word~) mul16s::$9 - (word~) mul16s::$10
  (word~) mul16s::$16 ← (word~) mul16s::$11
  (dword) mul16s::m#1 ← (dword) mul16s::m#3 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#6 mul16s::@4/(dword) mul16s::m#2 )
  (signed dword~) mul16s::$7 ← ((signed dword)) (dword) mul16s::m#4
  (signed dword) mul16s::return#0 ← (signed dword~) mul16s::$7
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (signed word) mul16s::a#3 ← phi( mul16s::@1/(signed word) mul16s::a#4 )
  (dword) mul16s::m#5 ← phi( mul16s::@1/(dword) mul16s::m#6 )
  (word~) mul16s::$13 ← > (dword) mul16s::m#5
  (word~) mul16s::$14 ← ((word)) (signed word) mul16s::a#3
  (word~) mul16s::$15 ← (word~) mul16s::$13 - (word~) mul16s::$14
  (word~) mul16s::$17 ← (word~) mul16s::$15
  (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  (signed dword) mul16s::return#3 ← phi( mul16s::@2/(signed dword) mul16s::return#0 )
  (signed dword) mul16s::return#1 ← (signed dword) mul16s::return#3
  return 
  to:@return
@17: scope:[]  from @6
  (word) rem16u#32 ← phi( @6/(word) rem16u#0 )
  (dword) PI2_u4f28#0 ← (number) $6487ed51
  (dword) PI_u4f28#0 ← (number) $3243f6a9
  (dword) PI_HALF_u4f28#0 ← (number) $1921fb54
  to:@28
sin16s_gen2: scope:[sin16s_gen2]  from main::@2
  (signed word*) sin16s_gen2::sintab#6 ← phi( main::@2/(signed word*) sin16s_gen2::sintab#1 )
  (word) rem16u#21 ← phi( main::@2/(word) rem16u#23 )
  (word) sin16s_gen2::wavelength#1 ← phi( main::@2/(word) sin16s_gen2::wavelength#0 )
  (signed word) sin16s_gen2::min#1 ← phi( main::@2/(signed word) sin16s_gen2::min#0 )
  (signed word) sin16s_gen2::max#1 ← phi( main::@2/(signed word) sin16s_gen2::max#0 )
  (signed word~) sin16s_gen2::$0 ← (signed word) sin16s_gen2::max#1 - (signed word) sin16s_gen2::min#1
  (signed word) sin16s_gen2::ampl#0 ← (signed word~) sin16s_gen2::$0
  (signed word~) sin16s_gen2::$1 ← (signed word) sin16s_gen2::ampl#0 >> (number) 1
  (signed word~) sin16s_gen2::$2 ← (signed word) sin16s_gen2::min#1 + (signed word~) sin16s_gen2::$1
  (signed word) sin16s_gen2::offs#0 ← (signed word~) sin16s_gen2::$2
  (dword) div32u16u::dividend#0 ← (dword) PI2_u4f28#0
  (word) div32u16u::divisor#0 ← (word) sin16s_gen2::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#2 ← (dword) div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  (word) sin16s_gen2::wavelength#5 ← phi( sin16s_gen2/(word) sin16s_gen2::wavelength#1 )
  (signed word*) sin16s_gen2::sintab#5 ← phi( sin16s_gen2/(signed word*) sin16s_gen2::sintab#6 )
  (signed word) sin16s_gen2::offs#4 ← phi( sin16s_gen2/(signed word) sin16s_gen2::offs#0 )
  (signed word) sin16s_gen2::ampl#3 ← phi( sin16s_gen2/(signed word) sin16s_gen2::ampl#0 )
  (word) rem16u#15 ← phi( sin16s_gen2/(word) rem16u#5 )
  (dword) div32u16u::return#4 ← phi( sin16s_gen2/(dword) div32u16u::return#2 )
  (dword~) sin16s_gen2::$3 ← (dword) div32u16u::return#4
  (word) rem16u#6 ← (word) rem16u#15
  (dword) sin16s_gen2::step#0 ← (dword~) sin16s_gen2::$3
  (dword) sin16s_gen2::x#0 ← (number) 0
  (word) sin16s_gen2::i#0 ← (number) 0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  (word) rem16u#29 ← phi( sin16s_gen2::@3/(word) rem16u#6 sin16s_gen2::@5/(word) rem16u#22 )
  (word) sin16s_gen2::wavelength#4 ← phi( sin16s_gen2::@3/(word) sin16s_gen2::wavelength#5 sin16s_gen2::@5/(word) sin16s_gen2::wavelength#2 )
  (word) sin16s_gen2::i#4 ← phi( sin16s_gen2::@3/(word) sin16s_gen2::i#0 sin16s_gen2::@5/(word) sin16s_gen2::i#1 )
  (dword) sin16s_gen2::step#3 ← phi( sin16s_gen2::@3/(dword) sin16s_gen2::step#0 sin16s_gen2::@5/(dword) sin16s_gen2::step#1 )
  (signed word*) sin16s_gen2::sintab#4 ← phi( sin16s_gen2::@3/(signed word*) sin16s_gen2::sintab#5 sin16s_gen2::@5/(signed word*) sin16s_gen2::sintab#0 )
  (signed word) sin16s_gen2::offs#3 ← phi( sin16s_gen2::@3/(signed word) sin16s_gen2::offs#4 sin16s_gen2::@5/(signed word) sin16s_gen2::offs#1 )
  (signed word) sin16s_gen2::ampl#2 ← phi( sin16s_gen2::@3/(signed word) sin16s_gen2::ampl#3 sin16s_gen2::@5/(signed word) sin16s_gen2::ampl#4 )
  (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@3/(dword) sin16s_gen2::x#0 sin16s_gen2::@5/(dword) sin16s_gen2::x#1 )
  (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  call sin16s 
  (signed word) sin16s::return#0 ← (signed word) sin16s::return#2
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@1
  (word) rem16u#26 ← phi( sin16s_gen2::@1/(word) rem16u#29 )
  (word) sin16s_gen2::wavelength#3 ← phi( sin16s_gen2::@1/(word) sin16s_gen2::wavelength#4 )
  (word) sin16s_gen2::i#3 ← phi( sin16s_gen2::@1/(word) sin16s_gen2::i#4 )
  (dword) sin16s_gen2::step#2 ← phi( sin16s_gen2::@1/(dword) sin16s_gen2::step#3 )
  (dword) sin16s_gen2::x#4 ← phi( sin16s_gen2::@1/(dword) sin16s_gen2::x#2 )
  (signed word*) sin16s_gen2::sintab#3 ← phi( sin16s_gen2::@1/(signed word*) sin16s_gen2::sintab#4 )
  (signed word) sin16s_gen2::offs#2 ← phi( sin16s_gen2::@1/(signed word) sin16s_gen2::offs#3 )
  (signed word) sin16s_gen2::ampl#1 ← phi( sin16s_gen2::@1/(signed word) sin16s_gen2::ampl#2 )
  (signed word) sin16s::return#3 ← phi( sin16s_gen2::@1/(signed word) sin16s::return#0 )
  (signed word~) sin16s_gen2::$4 ← (signed word) sin16s::return#3
  (signed word) mul16s::a#0 ← (signed word~) sin16s_gen2::$4
  (signed word) mul16s::b#0 ← (signed word) sin16s_gen2::ampl#1
  call mul16s 
  (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  (signed word) sin16s_gen2::ampl#4 ← phi( sin16s_gen2::@4/(signed word) sin16s_gen2::ampl#1 )
  (word) rem16u#22 ← phi( sin16s_gen2::@4/(word) rem16u#26 )
  (word) sin16s_gen2::wavelength#2 ← phi( sin16s_gen2::@4/(word) sin16s_gen2::wavelength#3 )
  (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@4/(word) sin16s_gen2::i#3 )
  (dword) sin16s_gen2::step#1 ← phi( sin16s_gen2::@4/(dword) sin16s_gen2::step#2 )
  (dword) sin16s_gen2::x#3 ← phi( sin16s_gen2::@4/(dword) sin16s_gen2::x#4 )
  (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@4/(signed word*) sin16s_gen2::sintab#3 )
  (signed word) sin16s_gen2::offs#1 ← phi( sin16s_gen2::@4/(signed word) sin16s_gen2::offs#2 )
  (signed dword) mul16s::return#4 ← phi( sin16s_gen2::@4/(signed dword) mul16s::return#2 )
  (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#4
  (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5
  (signed word~) sin16s_gen2::$7 ← ((signed word)) (word~) sin16s_gen2::$6
  (signed word~) sin16s_gen2::$8 ← (signed word) sin16s_gen2::offs#1 + (signed word~) sin16s_gen2::$7
  *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8
  (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  (dword~) sin16s_gen2::$9 ← (dword) sin16s_gen2::x#3 + (dword) sin16s_gen2::step#1
  (dword) sin16s_gen2::x#1 ← (dword~) sin16s_gen2::$9
  (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  (bool~) sin16s_gen2::$10 ← (word) sin16s_gen2::i#1 < (word) sin16s_gen2::wavelength#2
  if((bool~) sin16s_gen2::$10) goto sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@5
  (word) rem16u#16 ← phi( sin16s_gen2::@5/(word) rem16u#22 )
  (word) rem16u#7 ← (word) rem16u#16
  return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen2::@1
  (dword) sin16s::x#3 ← phi( sin16s_gen2::@1/(dword) sin16s::x#0 )
  (byte) sin16s::isUpper#0 ← (number) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (byte) sin16s::isUpper#8 ← phi( sin16s/(byte) sin16s::isUpper#0 sin16s::@4/(byte) sin16s::isUpper#1 )
  (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#3 sin16s::@4/(dword) sin16s::x#1 )
  (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
  (bool~) sin16s::$3 ← ! (bool~) sin16s::$2
  if((bool~) sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword) sin16s::x#5 ← phi( sin16s/(dword) sin16s::x#3 )
  (dword~) sin16s::$17 ← (dword) sin16s::x#5 - (dword) PI_u4f28#0
  (dword) sin16s::x#1 ← (dword~) sin16s::$17
  (byte) sin16s::isUpper#1 ← (number) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (byte) sin16s::isUpper#7 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 sin16s::@5/(byte) sin16s::isUpper#9 )
  (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
  (word~) sin16s::$5 ← > (dword~) sin16s::$4
  (word) sin16s::x1#0 ← (word~) sin16s::$5
  (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  (byte) mulu16_sel::select#0 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  (byte) sin16s::isUpper#6 ← phi( sin16s::@2/(byte) sin16s::isUpper#7 )
  (word) sin16s::x1#1 ← phi( sin16s::@2/(word) sin16s::x1#0 )
  (word) mulu16_sel::return#7 ← phi( sin16s::@2/(word) mulu16_sel::return#0 )
  (word~) sin16s::$6 ← (word) mulu16_sel::return#7
  (word) sin16s::x2#0 ← (word~) sin16s::$6
  (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  (word) mulu16_sel::v2#1 ← (word) sin16s::x1#1
  (byte) mulu16_sel::select#1 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  (byte) sin16s::isUpper#5 ← phi( sin16s::@8/(byte) sin16s::isUpper#6 )
  (word) sin16s::x1#4 ← phi( sin16s::@8/(word) sin16s::x1#1 )
  (word) mulu16_sel::return#8 ← phi( sin16s::@8/(word) mulu16_sel::return#1 )
  (word~) sin16s::$7 ← (word) mulu16_sel::return#8
  (word) sin16s::x3#0 ← (word~) sin16s::$7
  (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
  (byte) mulu16_sel::select#2 ← (number) 1
  call mulu16_sel 
  (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  (byte) sin16s::isUpper#4 ← phi( sin16s::@9/(byte) sin16s::isUpper#5 )
  (word) sin16s::x3#1 ← phi( sin16s::@9/(word) sin16s::x3#0 )
  (word) sin16s::x1#2 ← phi( sin16s::@9/(word) sin16s::x1#4 )
  (word) mulu16_sel::return#9 ← phi( sin16s::@9/(word) mulu16_sel::return#2 )
  (word~) sin16s::$8 ← (word) mulu16_sel::return#9
  (word) sin16s::x3_6#0 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← (word) sin16s::x1#2 - (word) sin16s::x3_6#0
  (word) sin16s::usinx#0 ← (word~) sin16s::$9
  (word) mulu16_sel::v1#3 ← (word) sin16s::x3#1
  (word) mulu16_sel::v2#3 ← (word) sin16s::x1#2
  (byte) mulu16_sel::select#3 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#3 ← (word) mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  (byte) sin16s::isUpper#3 ← phi( sin16s::@10/(byte) sin16s::isUpper#4 )
  (word) sin16s::usinx#4 ← phi( sin16s::@10/(word) sin16s::usinx#0 )
  (word) sin16s::x1#3 ← phi( sin16s::@10/(word) sin16s::x1#2 )
  (word) mulu16_sel::return#10 ← phi( sin16s::@10/(word) mulu16_sel::return#3 )
  (word~) sin16s::$10 ← (word) mulu16_sel::return#10
  (word) sin16s::x4#0 ← (word~) sin16s::$10
  (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  (word) mulu16_sel::v2#4 ← (word) sin16s::x1#3
  (byte) mulu16_sel::select#4 ← (number) 0
  call mulu16_sel 
  (word) mulu16_sel::return#4 ← (word) mulu16_sel::return#6
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  (byte) sin16s::isUpper#2 ← phi( sin16s::@11/(byte) sin16s::isUpper#3 )
  (word) sin16s::usinx#2 ← phi( sin16s::@11/(word) sin16s::usinx#4 )
  (word) mulu16_sel::return#11 ← phi( sin16s::@11/(word) mulu16_sel::return#4 )
  (word~) sin16s::$11 ← (word) mulu16_sel::return#11
  (word) sin16s::x5#0 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
  (word) sin16s::x5_128#0 ← (word~) sin16s::$12
  (word~) sin16s::$13 ← (word) sin16s::usinx#2 + (word) sin16s::x5_128#0
  (word) sin16s::usinx#1 ← (word~) sin16s::$13
  (signed word~) sin16s::$14 ← ((signed word)) (word) sin16s::usinx#1
  (signed word) sin16s::sinx#0 ← (signed word~) sin16s::$14
  (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (number) 0
  (bool~) sin16s::$16 ← ! (bool~) sin16s::$15
  if((bool~) sin16s::$16) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (byte) sin16s::isUpper#9 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 )
  (dword) sin16s::x#7 ← phi( sin16s::@1/(dword) sin16s::x#4 )
  (dword~) sin16s::$18 ← (dword) PI_u4f28#0 - (dword) sin16s::x#7
  (dword) sin16s::x#2 ← (dword~) sin16s::$18
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  (signed word) sin16s::sinx#2 ← phi( sin16s::@12/(signed word) sin16s::sinx#0 sin16s::@6/(signed word) sin16s::sinx#1 )
  (signed word) sin16s::return#1 ← (signed word) sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@12
  (word) sin16s::usinx#3 ← phi( sin16s::@12/(word) sin16s::usinx#1 )
  (signed word~) sin16s::$19 ← ((signed word)) (word) sin16s::usinx#3
  (signed word~) sin16s::$20 ← - (signed word~) sin16s::$19
  (signed word) sin16s::sinx#1 ← (signed word~) sin16s::$20
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  (signed word) sin16s::return#4 ← phi( sin16s::@3/(signed word) sin16s::return#1 )
  (signed word) sin16s::return#2 ← (signed word) sin16s::return#4
  return 
  to:@return
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9
  (byte) mulu16_sel::select#6 ← phi( sin16s::@10/(byte) mulu16_sel::select#3 sin16s::@11/(byte) mulu16_sel::select#4 sin16s::@2/(byte) mulu16_sel::select#0 sin16s::@8/(byte) mulu16_sel::select#1 sin16s::@9/(byte) mulu16_sel::select#2 )
  (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(word) mulu16_sel::v2#2 )
  (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 )
  (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  call mul16u 
  (dword) mul16u::return#3 ← (dword) mul16u::return#1
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  (byte) mulu16_sel::select#5 ← phi( mulu16_sel/(byte) mulu16_sel::select#6 )
  (dword) mul16u::return#6 ← phi( mulu16_sel/(dword) mul16u::return#3 )
  (dword~) mulu16_sel::$0 ← (dword) mul16u::return#6
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return#5 ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  (word) mulu16_sel::return#12 ← phi( mulu16_sel::@2/(word) mulu16_sel::return#5 )
  (word) mulu16_sel::return#6 ← (word) mulu16_sel::return#12
  return 
  to:@return
memset: scope:[memset]  from main::@3 main::@4
  (byte) memset::c#4 ← phi( main::@3/(byte) memset::c#0 main::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( main::@3/(void*) memset::str#0 main::@4/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( main::@3/(word) memset::num#0 main::@4/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@4/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#3
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@4
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#2) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  (bool~) memset::$4 ← (byte*) memset::dst#1 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@4
  to:memset::@1
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return
@28: scope:[]  from @17
  (word) rem16u#31 ← phi( @17/(word) rem16u#32 )
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte*) LOGO#0 ← ((byte*)) (number) $2000
  kickasm(location (byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)
 }}
  (word) XSIN_SIZE#0 ← (number) $200
  (signed word[XSIN_SIZE#0]) xsin#0 ← { fill( XSIN_SIZE#0, 0) }
  to:@29
main: scope:[main]  from @31
  (word) xsin_idx#26 ← phi( @31/(word) xsin_idx#16 )
  (word) rem16u#37 ← phi( @31/(word) rem16u#25 )
  asm { sei  }
  *((byte*) BORDERCOL#0) ← (byte) WHITE#0
  *((byte*) BGCOL2#0) ← (byte) DARK_GREY#0
  *((byte*) BGCOL#0) ← *((byte*) BGCOL2#0)
  *((byte*) BGCOL3#0) ← (byte) BLACK#0
  (byte*) main::toD0181_screen#0 ← (byte*) SCREEN#0
  (byte*) main::toD0181_gfx#0 ← (byte*) LOGO#0
  to:main::toD0181
main::toD0181: scope:[main]  from main
  (word) xsin_idx#25 ← phi( main/(word) xsin_idx#26 )
  (word) rem16u#36 ← phi( main/(word) rem16u#37 )
  (byte*) main::toD0181_gfx#1 ← phi( main/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
  (number~) main::toD0181_$2#0 ← (number~) main::toD0181_$1#0 * (number) 4
  (number~) main::toD0181_$3#0 ← > (number~) main::toD0181_$2#0
  (word~) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte~) main::toD0181_$5#0 ← > (word~) main::toD0181_$4#0
  (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
  (number~) main::toD0181_$7#0 ← (number~) main::toD0181_$6#0 & (number) $f
  (number~) main::toD0181_$8#0 ← (number~) main::toD0181_$3#0 | (number~) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (word) xsin_idx#24 ← phi( main::toD0181/(word) xsin_idx#25 )
  (word) rem16u#35 ← phi( main::toD0181/(word) rem16u#36 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@3
main::@3: scope:[main]  from main::toD0181_@return
  (word) xsin_idx#23 ← phi( main::toD0181_@return/(word) xsin_idx#24 )
  (word) rem16u#34 ← phi( main::toD0181_@return/(word) rem16u#35 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$0 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$0
  *((byte*) D016#0) ← (byte) VIC_MCM#0
  (void*) memset::str#0 ← (void*)(byte*) SCREEN#0
  (byte) memset::c#0 ← (byte) BLACK#0
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:main::@4
main::@4: scope:[main]  from main::@3
  (word) xsin_idx#22 ← phi( main::@3/(word) xsin_idx#23 )
  (word) rem16u#33 ← phi( main::@3/(word) rem16u#34 )
  (number~) main::$2 ← (byte) WHITE#0 | (number) 8
  (void*) memset::str#1 ← (void*)(byte*) COLS#0
  (byte) memset::c#1 ← (number~) main::$2
  (word) memset::num#1 ← (number) $3e8
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) xsin_idx#21 ← phi( main::@4/(word) xsin_idx#22 )
  (word) rem16u#30 ← phi( main::@4/(word) rem16u#33 )
  (byte) main::ch#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@5
  (word) xsin_idx#20 ← phi( main::@1/(word) xsin_idx#20 main::@5/(word) xsin_idx#21 )
  (word) rem16u#27 ← phi( main::@1/(word) rem16u#27 main::@5/(word) rem16u#30 )
  (byte) main::ch#2 ← phi( main::@1/(byte) main::ch#1 main::@5/(byte) main::ch#0 )
  *((byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2
  (byte) main::ch#1 ← (byte) main::ch#2 + rangenext(0,$ef)
  (bool~) main::$6 ← (byte) main::ch#1 != rangelast(0,$ef)
  if((bool~) main::$6) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word) xsin_idx#17 ← phi( main::@1/(word) xsin_idx#20 )
  (word) rem16u#23 ← phi( main::@1/(word) rem16u#27 )
  (signed word*) sin16s_gen2::sintab#1 ← (signed word[XSIN_SIZE#0]) xsin#0
  (word) sin16s_gen2::wavelength#0 ← (word) XSIN_SIZE#0
  (signed word) sin16s_gen2::min#0 ← (number) -$140
  (signed word) sin16s_gen2::max#0 ← (number) $140
  call sin16s_gen2 
  to:main::@6
main::@6: scope:[main]  from main::@2
  (word) xsin_idx#13 ← phi( main::@2/(word) xsin_idx#17 )
  (word) rem16u#17 ← phi( main::@2/(word) rem16u#7 )
  (word) rem16u#8 ← (word) rem16u#17
  call loop 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (word) rem16u#24 ← phi( main::@6/(word) rem16u#8 )
  (word) xsin_idx#7 ← phi( main::@6/(word) xsin_idx#5 )
  (word) xsin_idx#0 ← (word) xsin_idx#7
  to:main::@return
main::@return: scope:[main]  from main::@7
  (word) xsin_idx#8 ← phi( main::@7/(word) xsin_idx#0 )
  (word) rem16u#18 ← phi( main::@7/(word) rem16u#24 )
  (word) rem16u#9 ← (word) rem16u#18
  (word) xsin_idx#1 ← (word) xsin_idx#8
  return 
  to:@return
@29: scope:[]  from @28
  (word) rem16u#28 ← phi( @28/(word) rem16u#31 )
  (word) xsin_idx#2 ← (number) 0
  to:@31
loop: scope:[loop]  from main::@6
  (word) xsin_idx#18 ← phi( main::@6/(word) xsin_idx#13 )
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@11
  (word) xsin_idx#15 ← phi( loop/(word) xsin_idx#18 loop::@11/(word) xsin_idx#19 )
  if(true) goto loop::@4
  to:loop::@return
loop::@4: scope:[loop]  from loop::@1 loop::@4
  (word) xsin_idx#14 ← phi( loop::@1/(word) xsin_idx#15 loop::@4/(word) xsin_idx#14 )
  (bool~) loop::$0 ← *((byte*) RASTER#0) != (number) $ff
  if((bool~) loop::$0) goto loop::@4
  to:loop::@6
loop::@6: scope:[loop]  from loop::@4
  (word) xsin_idx#9 ← phi( loop::@4/(word) xsin_idx#14 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (word~) loop::$5 ← (word) xsin_idx#9 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) loop::$1 ← (signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5
  (signed word) loop::xpos#0 ← *((signed word*~) loop::$1)
  (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0
  call render_logo 
  to:loop::@15
loop::@15: scope:[loop]  from loop::@6
  (word) xsin_idx#10 ← phi( loop::@6/(word) xsin_idx#9 )
  (word) xsin_idx#3 ← ++ (word) xsin_idx#10
  (bool~) loop::$3 ← (word) xsin_idx#3 == (word) XSIN_SIZE#0
  (bool~) loop::$4 ← ! (bool~) loop::$3
  if((bool~) loop::$4) goto loop::@11
  to:loop::@10
loop::@11: scope:[loop]  from loop::@10 loop::@15
  (word) xsin_idx#19 ← phi( loop::@10/(word) xsin_idx#4 loop::@15/(word) xsin_idx#3 )
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:loop::@1
loop::@10: scope:[loop]  from loop::@15
  (word) xsin_idx#4 ← (number) 0
  to:loop::@11
loop::@return: scope:[loop]  from loop::@1
  (word) xsin_idx#11 ← phi( loop::@1/(word) xsin_idx#15 )
  (word) xsin_idx#5 ← (word) xsin_idx#11
  return 
  to:@return
render_logo: scope:[render_logo]  from loop::@6
  (signed word) render_logo::xpos#1 ← phi( loop::@6/(signed word) render_logo::xpos#0 )
  (byte) render_logo::logo_idx#0 ← (byte) 0
  (byte) render_logo::screen_idx#0 ← (byte) 0
  (byte~) render_logo::$0 ← ((byte)) (signed word) render_logo::xpos#1
  (number~) render_logo::$1 ← (byte~) render_logo::$0 & (number) 7
  (number~) render_logo::$2 ← (byte) VIC_MCM#0 | (number~) render_logo::$1
  *((byte*) D016#0) ← (number~) render_logo::$2
  (number~) render_logo::$3 ← (signed word) render_logo::xpos#1 / (number) 8
  (signed byte~) render_logo::$4 ← ((signed byte)) (number~) render_logo::$3
  (signed byte) render_logo::x_char#0 ← (signed byte~) render_logo::$4
  (byte) render_logo::line#0 ← (number) 0
  (bool~) render_logo::$5 ← (signed word) render_logo::xpos#1 < (number) 0
  if((bool~) render_logo::$5) goto render_logo::@1
  to:render_logo::@3
render_logo::@1: scope:[render_logo]  from render_logo
  (signed byte) render_logo::x_char#1 ← phi( render_logo/(signed byte) render_logo::x_char#0 )
  (signed byte~) render_logo::$17 ← - (signed byte) render_logo::x_char#1
  (byte~) render_logo::$18 ← ((byte)) (signed byte~) render_logo::$17
  (byte) render_logo::logo_idx#1 ← (byte~) render_logo::$18
  (byte) render_logo::screen_idx#1 ← (number) 0
  to:render_logo::@21
render_logo::@3: scope:[render_logo]  from render_logo
  (signed byte) render_logo::x_char#2 ← phi( render_logo/(signed byte) render_logo::x_char#0 )
  (byte~) render_logo::$6 ← ((byte)) (signed byte) render_logo::x_char#2
  (byte) render_logo::logo_start#0 ← (byte~) render_logo::$6
  (byte) render_logo::screen_idx#2 ← (number) 0
  to:render_logo::@4
render_logo::@4: scope:[render_logo]  from render_logo::@3 render_logo::@8
  (byte) render_logo::logo_start#1 ← phi( render_logo::@3/(byte) render_logo::logo_start#0 render_logo::@8/(byte) render_logo::logo_start#2 )
  (byte) render_logo::screen_idx#7 ← phi( render_logo::@3/(byte) render_logo::screen_idx#2 render_logo::@8/(byte) render_logo::screen_idx#3 )
  (bool~) render_logo::$7 ← (byte) render_logo::screen_idx#7 != (byte) render_logo::logo_start#1
  if((bool~) render_logo::$7) goto render_logo::@5
  to:render_logo::@6
render_logo::@5: scope:[render_logo]  from render_logo::@4
  (byte) render_logo::logo_start#4 ← phi( render_logo::@4/(byte) render_logo::logo_start#1 )
  (byte) render_logo::screen_idx#18 ← phi( render_logo::@4/(byte) render_logo::screen_idx#7 )
  (byte) render_logo::line#1 ← (number) 0
  to:render_logo::@7
render_logo::@6: scope:[render_logo]  from render_logo::@4
  (byte) render_logo::screen_idx#19 ← phi( render_logo::@4/(byte) render_logo::screen_idx#7 )
  (byte) render_logo::logo_idx#2 ← (number) 0
  to:render_logo::@12
render_logo::@7: scope:[render_logo]  from render_logo::@5 render_logo::@7
  (byte) render_logo::logo_start#3 ← phi( render_logo::@5/(byte) render_logo::logo_start#4 render_logo::@7/(byte) render_logo::logo_start#3 )
  (byte) render_logo::screen_idx#8 ← phi( render_logo::@5/(byte) render_logo::screen_idx#18 render_logo::@7/(byte) render_logo::screen_idx#8 )
  (byte) render_logo::line#9 ← phi( render_logo::@5/(byte) render_logo::line#1 render_logo::@7/(byte) render_logo::line#2 )
  (number~) render_logo::$8 ← (number) $28 * (byte) render_logo::line#9
  (byte*~) render_logo::$9 ← (byte*) SCREEN#0 + (number~) render_logo::$8
  *((byte*~) render_logo::$9 + (byte) render_logo::screen_idx#8) ← (number) 0
  (byte) render_logo::line#2 ← (byte) render_logo::line#9 + rangenext(0,5)
  (bool~) render_logo::$10 ← (byte) render_logo::line#2 != rangelast(0,5)
  unroll if((bool~) render_logo::$10) goto render_logo::@7
  to:render_logo::@8
render_logo::@8: scope:[render_logo]  from render_logo::@7
  (byte) render_logo::logo_start#2 ← phi( render_logo::@7/(byte) render_logo::logo_start#3 )
  (byte) render_logo::screen_idx#9 ← phi( render_logo::@7/(byte) render_logo::screen_idx#8 )
  (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#9
  to:render_logo::@4
render_logo::@12: scope:[render_logo]  from render_logo::@16 render_logo::@6
  (byte) render_logo::logo_idx#12 ← phi( render_logo::@16/(byte) render_logo::logo_idx#3 render_logo::@6/(byte) render_logo::logo_idx#2 )
  (byte) render_logo::screen_idx#10 ← phi( render_logo::@16/(byte) render_logo::screen_idx#4 render_logo::@6/(byte) render_logo::screen_idx#19 )
  (bool~) render_logo::$11 ← (byte) render_logo::screen_idx#10 != (number) $28
  if((bool~) render_logo::$11) goto render_logo::@13
  to:render_logo::@return
render_logo::@13: scope:[render_logo]  from render_logo::@12
  (byte) render_logo::screen_idx#20 ← phi( render_logo::@12/(byte) render_logo::screen_idx#10 )
  (byte) render_logo::logo_idx#10 ← phi( render_logo::@12/(byte) render_logo::logo_idx#12 )
  (byte) render_logo::line#3 ← (number) 0
  to:render_logo::@15
render_logo::@15: scope:[render_logo]  from render_logo::@13 render_logo::@15
  (byte) render_logo::screen_idx#11 ← phi( render_logo::@13/(byte) render_logo::screen_idx#20 render_logo::@15/(byte) render_logo::screen_idx#11 )
  (byte) render_logo::logo_idx#5 ← phi( render_logo::@13/(byte) render_logo::logo_idx#10 render_logo::@15/(byte) render_logo::logo_idx#5 )
  (byte) render_logo::line#10 ← phi( render_logo::@13/(byte) render_logo::line#3 render_logo::@15/(byte) render_logo::line#4 )
  (number~) render_logo::$12 ← (number) $28 * (byte) render_logo::line#10
  (byte*~) render_logo::$13 ← (byte*) SCREEN#0 + (number~) render_logo::$12
  (number~) render_logo::$14 ← (number) $28 * (byte) render_logo::line#10
  (number~) render_logo::$15 ← (byte) render_logo::logo_idx#5 + (number~) render_logo::$14
  *((byte*~) render_logo::$13 + (byte) render_logo::screen_idx#11) ← (number~) render_logo::$15
  (byte) render_logo::line#4 ← (byte) render_logo::line#10 + rangenext(0,5)
  (bool~) render_logo::$16 ← (byte) render_logo::line#4 != rangelast(0,5)
  unroll if((bool~) render_logo::$16) goto render_logo::@15
  to:render_logo::@16
render_logo::@16: scope:[render_logo]  from render_logo::@15
  (byte) render_logo::logo_idx#6 ← phi( render_logo::@15/(byte) render_logo::logo_idx#5 )
  (byte) render_logo::screen_idx#12 ← phi( render_logo::@15/(byte) render_logo::screen_idx#11 )
  (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#12
  (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#6
  to:render_logo::@12
render_logo::@21: scope:[render_logo]  from render_logo::@1 render_logo::@25
  (byte) render_logo::screen_idx#22 ← phi( render_logo::@1/(byte) render_logo::screen_idx#1 render_logo::@25/(byte) render_logo::screen_idx#5 )
  (byte) render_logo::logo_idx#7 ← phi( render_logo::@1/(byte) render_logo::logo_idx#1 render_logo::@25/(byte) render_logo::logo_idx#4 )
  (bool~) render_logo::$19 ← (byte) render_logo::logo_idx#7 != (number) $28
  if((bool~) render_logo::$19) goto render_logo::@22
  to:render_logo::@29
render_logo::@22: scope:[render_logo]  from render_logo::@21
  (byte) render_logo::screen_idx#21 ← phi( render_logo::@21/(byte) render_logo::screen_idx#22 )
  (byte) render_logo::logo_idx#11 ← phi( render_logo::@21/(byte) render_logo::logo_idx#7 )
  (byte) render_logo::line#5 ← (number) 0
  to:render_logo::@24
render_logo::@24: scope:[render_logo]  from render_logo::@22 render_logo::@24
  (byte) render_logo::screen_idx#13 ← phi( render_logo::@22/(byte) render_logo::screen_idx#21 render_logo::@24/(byte) render_logo::screen_idx#13 )
  (byte) render_logo::logo_idx#8 ← phi( render_logo::@22/(byte) render_logo::logo_idx#11 render_logo::@24/(byte) render_logo::logo_idx#8 )
  (byte) render_logo::line#11 ← phi( render_logo::@22/(byte) render_logo::line#5 render_logo::@24/(byte) render_logo::line#6 )
  (number~) render_logo::$20 ← (number) $28 * (byte) render_logo::line#11
  (byte*~) render_logo::$21 ← (byte*) SCREEN#0 + (number~) render_logo::$20
  (number~) render_logo::$22 ← (number) $28 * (byte) render_logo::line#11
  (number~) render_logo::$23 ← (byte) render_logo::logo_idx#8 + (number~) render_logo::$22
  *((byte*~) render_logo::$21 + (byte) render_logo::screen_idx#13) ← (number~) render_logo::$23
  (byte) render_logo::line#6 ← (byte) render_logo::line#11 + rangenext(0,5)
  (bool~) render_logo::$24 ← (byte) render_logo::line#6 != rangelast(0,5)
  unroll if((bool~) render_logo::$24) goto render_logo::@24
  to:render_logo::@25
render_logo::@25: scope:[render_logo]  from render_logo::@24
  (byte) render_logo::logo_idx#9 ← phi( render_logo::@24/(byte) render_logo::logo_idx#8 )
  (byte) render_logo::screen_idx#14 ← phi( render_logo::@24/(byte) render_logo::screen_idx#13 )
  (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#14
  (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#9
  to:render_logo::@21
render_logo::@29: scope:[render_logo]  from render_logo::@21 render_logo::@33
  (byte) render_logo::screen_idx#15 ← phi( render_logo::@21/(byte) render_logo::screen_idx#22 render_logo::@33/(byte) render_logo::screen_idx#6 )
  (bool~) render_logo::$25 ← (byte) render_logo::screen_idx#15 != (number) $28
  if((bool~) render_logo::$25) goto render_logo::@30
  to:render_logo::@return
render_logo::@30: scope:[render_logo]  from render_logo::@29
  (byte) render_logo::screen_idx#23 ← phi( render_logo::@29/(byte) render_logo::screen_idx#15 )
  (byte) render_logo::line#7 ← (number) 0
  to:render_logo::@32
render_logo::@32: scope:[render_logo]  from render_logo::@30 render_logo::@32
  (byte) render_logo::screen_idx#16 ← phi( render_logo::@30/(byte) render_logo::screen_idx#23 render_logo::@32/(byte) render_logo::screen_idx#16 )
  (byte) render_logo::line#12 ← phi( render_logo::@30/(byte) render_logo::line#7 render_logo::@32/(byte) render_logo::line#8 )
  (number~) render_logo::$26 ← (number) $28 * (byte) render_logo::line#12
  (byte*~) render_logo::$27 ← (byte*) SCREEN#0 + (number~) render_logo::$26
  *((byte*~) render_logo::$27 + (byte) render_logo::screen_idx#16) ← (number) 0
  (byte) render_logo::line#8 ← (byte) render_logo::line#12 + rangenext(0,5)
  (bool~) render_logo::$28 ← (byte) render_logo::line#8 != rangelast(0,5)
  unroll if((bool~) render_logo::$28) goto render_logo::@32
  to:render_logo::@33
render_logo::@33: scope:[render_logo]  from render_logo::@32
  (byte) render_logo::screen_idx#17 ← phi( render_logo::@32/(byte) render_logo::screen_idx#16 )
  (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#17
  to:render_logo::@29
render_logo::@return: scope:[render_logo]  from render_logo::@12 render_logo::@29
  return 
  to:@return
@31: scope:[]  from @29
  (word) xsin_idx#16 ← phi( @29/(word) xsin_idx#2 )
  (word) rem16u#25 ← phi( @29/(word) rem16u#28 )
  call main 
  to:@32
@32: scope:[]  from @31
  (word) xsin_idx#12 ← phi( @31/(word) xsin_idx#1 )
  (word) rem16u#19 ← phi( @31/(word) rem16u#9 )
  (word) rem16u#10 ← (word) rem16u#19
  (word) xsin_idx#6 ← (word) xsin_idx#12
  to:@end
@end: scope:[]  from @32

SYMBOL TABLE SSA
(label) @17
(label) @28
(label) @29
(label) @31
(label) @32
(label) @6
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte) BLACK
(byte) BLACK#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) COLS
(byte*) COLS#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte*) LOGO
(byte*) LOGO#0
(dword) PI2_u4f28
(dword) PI2_u4f28#0
(dword) PI_HALF_u4f28
(dword) PI_HALF_u4f28#0
(dword) PI_u4f28
(dword) PI_u4f28#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte) WHITE
(byte) WHITE#0
(word) XSIN_SIZE
(word) XSIN_SIZE#0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0
(dword) div32u16u::dividend#1
(dword) div32u16u::dividend#2
(word) div32u16u::divisor
(word) div32u16u::divisor#0
(word) div32u16u::divisor#1
(word) div32u16u::divisor#2
(dword) div32u16u::quotient
(dword) div32u16u::quotient#0
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0
(word) div32u16u::quotient_hi#1
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0
(dword) div32u16u::return
(dword) div32u16u::return#0
(dword) div32u16u::return#1
(dword) div32u16u::return#2
(dword) div32u16u::return#3
(dword) div32u16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(void()) loop()
(bool~) loop::$0
(signed word*~) loop::$1
(bool~) loop::$3
(bool~) loop::$4
(word~) loop::$5
(label) loop::@1
(label) loop::@10
(label) loop::@11
(label) loop::@15
(label) loop::@4
(label) loop::@6
(label) loop::@return
(signed word) loop::xpos
(signed word) loop::xpos#0
(void()) main()
(byte~) main::$0
(number~) main::$2
(bool~) main::$6
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::ch
(byte) main::ch#0
(byte) main::ch#1
(byte) main::ch#2
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$0#0
(number~) main::toD0181_$1
(number~) main::toD0181_$1#0
(number~) main::toD0181_$2
(number~) main::toD0181_$2#0
(number~) main::toD0181_$3
(number~) main::toD0181_$3#0
(word~) main::toD0181_$4
(word~) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte~) main::toD0181_$5#0
(number~) main::toD0181_$6
(number~) main::toD0181_$6#0
(number~) main::toD0181_$7
(number~) main::toD0181_$7#0
(number~) main::toD0181_$8
(number~) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$0
(word~) mul16s::$1
(word~) mul16s::$10
(word~) mul16s::$11
(word~) mul16s::$13
(word~) mul16s::$14
(word~) mul16s::$15
(word~) mul16s::$16
(word~) mul16s::$17
(dword~) mul16s::$2
(bool~) mul16s::$3
(bool~) mul16s::$4
(bool~) mul16s::$5
(bool~) mul16s::$6
(signed dword~) mul16s::$7
(word~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@6
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0
(signed word) mul16s::a#1
(signed word) mul16s::a#2
(signed word) mul16s::a#3
(signed word) mul16s::a#4
(signed word) mul16s::a#5
(signed word) mul16s::b
(signed word) mul16s::b#0
(signed word) mul16s::b#1
(signed word) mul16s::b#2
(signed word) mul16s::b#3
(signed word) mul16s::b#4
(dword) mul16s::m
(dword) mul16s::m#0
(dword) mul16s::m#1
(dword) mul16s::m#2
(dword) mul16s::m#3
(dword) mul16s::m#4
(dword) mul16s::m#5
(dword) mul16s::m#6
(signed dword) mul16s::return
(signed dword) mul16s::return#0
(signed dword) mul16s::return#1
(signed dword) mul16s::return#2
(signed dword) mul16s::return#3
(signed dword) mul16s::return#4
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(number~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::a#7
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(word) mul16u::b#2
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(dword) mul16u::return#5
(dword) mul16u::return#6
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0
(word) mulu16_sel::return#1
(word) mulu16_sel::return#10
(word) mulu16_sel::return#11
(word) mulu16_sel::return#12
(word) mulu16_sel::return#2
(word) mulu16_sel::return#3
(word) mulu16_sel::return#4
(word) mulu16_sel::return#5
(word) mulu16_sel::return#6
(word) mulu16_sel::return#7
(word) mulu16_sel::return#8
(word) mulu16_sel::return#9
(byte) mulu16_sel::select
(byte) mulu16_sel::select#0
(byte) mulu16_sel::select#1
(byte) mulu16_sel::select#2
(byte) mulu16_sel::select#3
(byte) mulu16_sel::select#4
(byte) mulu16_sel::select#5
(byte) mulu16_sel::select#6
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0
(word) mulu16_sel::v1#1
(word) mulu16_sel::v1#2
(word) mulu16_sel::v1#3
(word) mulu16_sel::v1#4
(word) mulu16_sel::v1#5
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0
(word) mulu16_sel::v2#1
(word) mulu16_sel::v2#2
(word) mulu16_sel::v2#3
(word) mulu16_sel::v2#4
(word) mulu16_sel::v2#5
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#4
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(void()) render_logo((signed word) render_logo::xpos)
(byte~) render_logo::$0
(number~) render_logo::$1
(bool~) render_logo::$10
(bool~) render_logo::$11
(number~) render_logo::$12
(byte*~) render_logo::$13
(number~) render_logo::$14
(number~) render_logo::$15
(bool~) render_logo::$16
(signed byte~) render_logo::$17
(byte~) render_logo::$18
(bool~) render_logo::$19
(number~) render_logo::$2
(number~) render_logo::$20
(byte*~) render_logo::$21
(number~) render_logo::$22
(number~) render_logo::$23
(bool~) render_logo::$24
(bool~) render_logo::$25
(number~) render_logo::$26
(byte*~) render_logo::$27
(bool~) render_logo::$28
(number~) render_logo::$3
(signed byte~) render_logo::$4
(bool~) render_logo::$5
(byte~) render_logo::$6
(bool~) render_logo::$7
(number~) render_logo::$8
(byte*~) render_logo::$9
(label) render_logo::@1
(label) render_logo::@12
(label) render_logo::@13
(label) render_logo::@15
(label) render_logo::@16
(label) render_logo::@21
(label) render_logo::@22
(label) render_logo::@24
(label) render_logo::@25
(label) render_logo::@29
(label) render_logo::@3
(label) render_logo::@30
(label) render_logo::@32
(label) render_logo::@33
(label) render_logo::@4
(label) render_logo::@5
(label) render_logo::@6
(label) render_logo::@7
(label) render_logo::@8
(label) render_logo::@return
(byte) render_logo::line
(byte) render_logo::line#0
(byte) render_logo::line#1
(byte) render_logo::line#10
(byte) render_logo::line#11
(byte) render_logo::line#12
(byte) render_logo::line#2
(byte) render_logo::line#3
(byte) render_logo::line#4
(byte) render_logo::line#5
(byte) render_logo::line#6
(byte) render_logo::line#7
(byte) render_logo::line#8
(byte) render_logo::line#9
(byte) render_logo::logo_idx
(byte) render_logo::logo_idx#0
(byte) render_logo::logo_idx#1
(byte) render_logo::logo_idx#10
(byte) render_logo::logo_idx#11
(byte) render_logo::logo_idx#12
(byte) render_logo::logo_idx#2
(byte) render_logo::logo_idx#3
(byte) render_logo::logo_idx#4
(byte) render_logo::logo_idx#5
(byte) render_logo::logo_idx#6
(byte) render_logo::logo_idx#7
(byte) render_logo::logo_idx#8
(byte) render_logo::logo_idx#9
(byte) render_logo::logo_start
(byte) render_logo::logo_start#0
(byte) render_logo::logo_start#1
(byte) render_logo::logo_start#2
(byte) render_logo::logo_start#3
(byte) render_logo::logo_start#4
(byte) render_logo::screen_idx
(byte) render_logo::screen_idx#0
(byte) render_logo::screen_idx#1
(byte) render_logo::screen_idx#10
(byte) render_logo::screen_idx#11
(byte) render_logo::screen_idx#12
(byte) render_logo::screen_idx#13
(byte) render_logo::screen_idx#14
(byte) render_logo::screen_idx#15
(byte) render_logo::screen_idx#16
(byte) render_logo::screen_idx#17
(byte) render_logo::screen_idx#18
(byte) render_logo::screen_idx#19
(byte) render_logo::screen_idx#2
(byte) render_logo::screen_idx#20
(byte) render_logo::screen_idx#21
(byte) render_logo::screen_idx#22
(byte) render_logo::screen_idx#23
(byte) render_logo::screen_idx#3
(byte) render_logo::screen_idx#4
(byte) render_logo::screen_idx#5
(byte) render_logo::screen_idx#6
(byte) render_logo::screen_idx#7
(byte) render_logo::screen_idx#8
(byte) render_logo::screen_idx#9
(signed byte) render_logo::x_char
(signed byte) render_logo::x_char#0
(signed byte) render_logo::x_char#1
(signed byte) render_logo::x_char#2
(signed word) render_logo::xpos
(signed word) render_logo::xpos#0
(signed word) render_logo::xpos#1
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(signed word~) sin16s::$14
(bool~) sin16s::$15
(bool~) sin16s::$16
(dword~) sin16s::$17
(dword~) sin16s::$18
(signed word~) sin16s::$19
(bool~) sin16s::$2
(signed word~) sin16s::$20
(bool~) sin16s::$3
(dword~) sin16s::$4
(word~) sin16s::$5
(word~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#0
(byte) sin16s::isUpper#1
(byte) sin16s::isUpper#2
(byte) sin16s::isUpper#3
(byte) sin16s::isUpper#4
(byte) sin16s::isUpper#5
(byte) sin16s::isUpper#6
(byte) sin16s::isUpper#7
(byte) sin16s::isUpper#8
(byte) sin16s::isUpper#9
(signed word) sin16s::return
(signed word) sin16s::return#0
(signed word) sin16s::return#1
(signed word) sin16s::return#2
(signed word) sin16s::return#3
(signed word) sin16s::return#4
(signed word) sin16s::sinx
(signed word) sin16s::sinx#0
(signed word) sin16s::sinx#1
(signed word) sin16s::sinx#2
(word) sin16s::usinx
(word) sin16s::usinx#0
(word) sin16s::usinx#1
(word) sin16s::usinx#2
(word) sin16s::usinx#3
(word) sin16s::usinx#4
(dword) sin16s::x
(dword) sin16s::x#0
(dword) sin16s::x#1
(dword) sin16s::x#2
(dword) sin16s::x#3
(dword) sin16s::x#4
(dword) sin16s::x#5
(dword) sin16s::x#6
(dword) sin16s::x#7
(word) sin16s::x1
(word) sin16s::x1#0
(word) sin16s::x1#1
(word) sin16s::x1#2
(word) sin16s::x1#3
(word) sin16s::x1#4
(word) sin16s::x2
(word) sin16s::x2#0
(word) sin16s::x3
(word) sin16s::x3#0
(word) sin16s::x3#1
(word) sin16s::x3_6
(word) sin16s::x3_6#0
(word) sin16s::x4
(word) sin16s::x4#0
(word) sin16s::x5
(word) sin16s::x5#0
(word) sin16s::x5_128
(word) sin16s::x5_128#0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed word~) sin16s_gen2::$0
(signed word~) sin16s_gen2::$1
(bool~) sin16s_gen2::$10
(signed word~) sin16s_gen2::$2
(dword~) sin16s_gen2::$3
(signed word~) sin16s_gen2::$4
(signed dword~) sin16s_gen2::$5
(word~) sin16s_gen2::$6
(signed word~) sin16s_gen2::$7
(signed word~) sin16s_gen2::$8
(dword~) sin16s_gen2::$9
(label) sin16s_gen2::@1
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@5
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(signed word) sin16s_gen2::ampl#0
(signed word) sin16s_gen2::ampl#1
(signed word) sin16s_gen2::ampl#2
(signed word) sin16s_gen2::ampl#3
(signed word) sin16s_gen2::ampl#4
(word) sin16s_gen2::i
(word) sin16s_gen2::i#0
(word) sin16s_gen2::i#1
(word) sin16s_gen2::i#2
(word) sin16s_gen2::i#3
(word) sin16s_gen2::i#4
(signed word) sin16s_gen2::max
(signed word) sin16s_gen2::max#0
(signed word) sin16s_gen2::max#1
(signed word) sin16s_gen2::min
(signed word) sin16s_gen2::min#0
(signed word) sin16s_gen2::min#1
(signed word) sin16s_gen2::offs
(signed word) sin16s_gen2::offs#0
(signed word) sin16s_gen2::offs#1
(signed word) sin16s_gen2::offs#2
(signed word) sin16s_gen2::offs#3
(signed word) sin16s_gen2::offs#4
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0
(signed word*) sin16s_gen2::sintab#1
(signed word*) sin16s_gen2::sintab#2
(signed word*) sin16s_gen2::sintab#3
(signed word*) sin16s_gen2::sintab#4
(signed word*) sin16s_gen2::sintab#5
(signed word*) sin16s_gen2::sintab#6
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0
(dword) sin16s_gen2::step#1
(dword) sin16s_gen2::step#2
(dword) sin16s_gen2::step#3
(word) sin16s_gen2::wavelength
(word) sin16s_gen2::wavelength#0
(word) sin16s_gen2::wavelength#1
(word) sin16s_gen2::wavelength#2
(word) sin16s_gen2::wavelength#3
(word) sin16s_gen2::wavelength#4
(word) sin16s_gen2::wavelength#5
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#0
(dword) sin16s_gen2::x#1
(dword) sin16s_gen2::x#2
(dword) sin16s_gen2::x#3
(dword) sin16s_gen2::x#4
(signed word[XSIN_SIZE#0]) xsin
(signed word[XSIN_SIZE#0]) xsin#0
(word) xsin_idx
(word) xsin_idx#0
(word) xsin_idx#1
(word) xsin_idx#10
(word) xsin_idx#11
(word) xsin_idx#12
(word) xsin_idx#13
(word) xsin_idx#14
(word) xsin_idx#15
(word) xsin_idx#16
(word) xsin_idx#17
(word) xsin_idx#18
(word) xsin_idx#19
(word) xsin_idx#2
(word) xsin_idx#20
(word) xsin_idx#21
(word) xsin_idx#22
(word) xsin_idx#23
(word) xsin_idx#24
(word) xsin_idx#25
(word) xsin_idx#26
(word) xsin_idx#3
(word) xsin_idx#4
(word) xsin_idx#5
(word) xsin_idx#6
(word) xsin_idx#7
(word) xsin_idx#8
(word) xsin_idx#9

Fixing inline constructor with div32u16u::$4 ← (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $10 in (byte) VIC_MCM#0 ← (number) $10
Adding number conversion cast (unumber) 0 in (byte) BLACK#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) WHITE#0 ← (number) 1
Adding number conversion cast (unumber) $b in (byte) DARK_GREY#0 ← (number) $b
Adding number conversion cast (unumber) 0 in (word) rem16u#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) divr16u::quotient#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#5 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#7 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (word) divr16u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (dword) mul16u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$0 ← (word) mul16u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul16u::$1 ← (word) mul16u::a#4 & (number) 1
Adding number conversion cast (unumber) mul16u::$1 in (number~) mul16u::$1 ← (word) mul16u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$2 ← (unumber~) mul16u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) mul16u::$5 ← (word) mul16u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mul16s::$5 ← (signed word) mul16s::b#2 < (number) 0
Adding number conversion cast (unumber) $6487ed51 in (dword) PI2_u4f28#0 ← (number) $6487ed51
Adding number conversion cast (unumber) $3243f6a9 in (dword) PI_u4f28#0 ← (number) $3243f6a9
Adding number conversion cast (unumber) $1921fb54 in (dword) PI_HALF_u4f28#0 ← (number) $1921fb54
Adding number conversion cast (snumber) 1 in (signed word~) sin16s_gen2::$1 ← (signed word) sin16s_gen2::ampl#0 >> (number) 1
Adding number conversion cast (unumber) 0 in (dword) sin16s_gen2::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) sin16s_gen2::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin16s::isUpper#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) sin16s::isUpper#1 ← (number) 1
Adding number conversion cast (unumber) 3 in (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (number) 3
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#1 ← (number) 1
Adding number conversion cast (unumber) $10000/6 in (word) mulu16_sel::v2#2 ← (number) $10000/(number) 6
Adding number conversion cast (unumber) 1 in (byte) mulu16_sel::select#2 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulu16_sel::select#4 ← (number) 0
Adding number conversion cast (unumber) 4 in (word~) sin16s::$12 ← (word) sin16s::x5#0 >> (number) 4
Adding number conversion cast (unumber) 0 in (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) $200 in (word) XSIN_SIZE#0 ← (number) $200
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$1#0 in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$2#0 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$3#0 in (number~) main::toD0181_$3#0 ← > (unumber~) main::toD0181_$2#0
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$6#0 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$7#0 in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$8#0 in (number~) main::toD0181_$8#0 ← (unumber~) main::toD0181_$3#0 | (unumber~) main::toD0181_$7#0
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 8 in (number~) main::$2 ← (byte) WHITE#0 | (number) 8
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte) WHITE#0 | (unumber)(number) 8
Adding number conversion cast (unumber) $3e8 in (word) memset::num#1 ← (number) $3e8
Adding number conversion cast (snumber) -$140 in (signed word) sin16s_gen2::min#0 ← (number) -$140
Adding number conversion cast (snumber) $140 in (signed word) sin16s_gen2::max#0 ← (number) $140
Adding number conversion cast (unumber) 0 in (word) xsin_idx#2 ← (number) 0
Adding number conversion cast (unumber) $ff in (bool~) loop::$0 ← *((byte*) RASTER#0) != (number) $ff
Adding number conversion cast (unumber) 0 in (word) xsin_idx#4 ← (number) 0
Adding number conversion cast (unumber) 7 in (number~) render_logo::$1 ← (byte~) render_logo::$0 & (number) 7
Adding number conversion cast (unumber) render_logo::$1 in (number~) render_logo::$1 ← (byte~) render_logo::$0 & (unumber)(number) 7
Adding number conversion cast (unumber) render_logo::$2 in (number~) render_logo::$2 ← (byte) VIC_MCM#0 | (unumber~) render_logo::$1
Adding number conversion cast (snumber) 8 in (number~) render_logo::$3 ← (signed word) render_logo::xpos#1 / (number) 8
Adding number conversion cast (snumber) render_logo::$3 in (number~) render_logo::$3 ← (signed word) render_logo::xpos#1 / (snumber)(number) 8
Adding number conversion cast (unumber) 0 in (byte) render_logo::line#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) render_logo::$5 ← (signed word) render_logo::xpos#1 < (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_logo::screen_idx#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_logo::screen_idx#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_logo::line#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_logo::logo_idx#2 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) render_logo::$8 ← (number) $28 * (byte) render_logo::line#9
Adding number conversion cast (unumber) render_logo::$8 in (number~) render_logo::$8 ← (unumber)(number) $28 * (byte) render_logo::line#9
Adding number conversion cast (unumber) 0 in *((byte*~) render_logo::$9 + (byte) render_logo::screen_idx#8) ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) render_logo::$11 ← (byte) render_logo::screen_idx#10 != (number) $28
Adding number conversion cast (unumber) 0 in (byte) render_logo::line#3 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) render_logo::$12 ← (number) $28 * (byte) render_logo::line#10
Adding number conversion cast (unumber) render_logo::$12 in (number~) render_logo::$12 ← (unumber)(number) $28 * (byte) render_logo::line#10
Adding number conversion cast (unumber) $28 in (number~) render_logo::$14 ← (number) $28 * (byte) render_logo::line#10
Adding number conversion cast (unumber) render_logo::$14 in (number~) render_logo::$14 ← (unumber)(number) $28 * (byte) render_logo::line#10
Adding number conversion cast (unumber) render_logo::$15 in (number~) render_logo::$15 ← (byte) render_logo::logo_idx#5 + (unumber~) render_logo::$14
Adding number conversion cast (unumber) $28 in (bool~) render_logo::$19 ← (byte) render_logo::logo_idx#7 != (number) $28
Adding number conversion cast (unumber) 0 in (byte) render_logo::line#5 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) render_logo::$20 ← (number) $28 * (byte) render_logo::line#11
Adding number conversion cast (unumber) render_logo::$20 in (number~) render_logo::$20 ← (unumber)(number) $28 * (byte) render_logo::line#11
Adding number conversion cast (unumber) $28 in (number~) render_logo::$22 ← (number) $28 * (byte) render_logo::line#11
Adding number conversion cast (unumber) render_logo::$22 in (number~) render_logo::$22 ← (unumber)(number) $28 * (byte) render_logo::line#11
Adding number conversion cast (unumber) render_logo::$23 in (number~) render_logo::$23 ← (byte) render_logo::logo_idx#8 + (unumber~) render_logo::$22
Adding number conversion cast (unumber) $28 in (bool~) render_logo::$25 ← (byte) render_logo::screen_idx#15 != (number) $28
Adding number conversion cast (unumber) 0 in (byte) render_logo::line#7 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) render_logo::$26 ← (number) $28 * (byte) render_logo::line#12
Adding number conversion cast (unumber) render_logo::$26 in (number~) render_logo::$26 ← (unumber)(number) $28 * (byte) render_logo::line#12
Adding number conversion cast (unumber) 0 in *((byte*~) render_logo::$27 + (byte) render_logo::screen_idx#16) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL#0 ← (byte*)(number) $d021
Inlining cast (byte*) BGCOL2#0 ← (byte*)(number) $d022
Inlining cast (byte*) BGCOL3#0 ← (byte*)(number) $d023
Inlining cast (byte*) D016#0 ← (byte*)(number) $d016
Inlining cast (byte) VIC_MCM#0 ← (unumber)(number) $10
Inlining cast (byte*) D018#0 ← (byte*)(number) $d018
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte) BLACK#0 ← (unumber)(number) 0
Inlining cast (byte) WHITE#0 ← (unumber)(number) 1
Inlining cast (byte) DARK_GREY#0 ← (unumber)(number) $b
Inlining cast (word) rem16u#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::quotient#0 ← (unumber)(number) 0
Inlining cast (word) divr16u::rem#3 ← (unumber)(number) 0
Inlining cast (dword) mul16u::res#0 ← (unumber)(number) 0
Inlining cast (word~) mul16s::$0 ← (word)(signed word) mul16s::a#1
Inlining cast (word~) mul16s::$1 ← (word)(signed word) mul16s::b#1
Inlining cast (word~) mul16s::$10 ← (word)(signed word) mul16s::b#3
Inlining cast (signed dword~) mul16s::$7 ← (signed dword)(dword) mul16s::m#4
Inlining cast (word~) mul16s::$14 ← (word)(signed word) mul16s::a#3
Inlining cast (dword) PI2_u4f28#0 ← (unumber)(number) $6487ed51
Inlining cast (dword) PI_u4f28#0 ← (unumber)(number) $3243f6a9
Inlining cast (dword) PI_HALF_u4f28#0 ← (unumber)(number) $1921fb54
Inlining cast (dword) sin16s_gen2::x#0 ← (unumber)(number) 0
Inlining cast (word) sin16s_gen2::i#0 ← (unumber)(number) 0
Inlining cast (signed word~) sin16s_gen2::$7 ← (signed word)(word~) sin16s_gen2::$6
Inlining cast (byte) sin16s::isUpper#0 ← (unumber)(number) 0
Inlining cast (byte) sin16s::isUpper#1 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#0 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#1 ← (unumber)(number) 1
Inlining cast (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Inlining cast (byte) mulu16_sel::select#2 ← (unumber)(number) 1
Inlining cast (byte) mulu16_sel::select#3 ← (unumber)(number) 0
Inlining cast (byte) mulu16_sel::select#4 ← (unumber)(number) 0
Inlining cast (signed word~) sin16s::$14 ← (signed word)(word) sin16s::usinx#1
Inlining cast (signed word~) sin16s::$19 ← (signed word)(word) sin16s::usinx#3
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#3
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte*) LOGO#0 ← (byte*)(number) $2000
Inlining cast (word) XSIN_SIZE#0 ← (unumber)(number) $200
Inlining cast (word~) main::toD0181_$0#0 ← (word)(byte*) main::toD0181_screen#1
Inlining cast (word~) main::toD0181_$4#0 ← (word)(byte*) main::toD0181_gfx#1
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (word) memset::num#1 ← (unumber)(number) $3e8
Inlining cast (signed word) sin16s_gen2::min#0 ← (snumber)(number) -$140
Inlining cast (signed word) sin16s_gen2::max#0 ← (snumber)(number) $140
Inlining cast (word) xsin_idx#2 ← (unumber)(number) 0
Inlining cast (word) xsin_idx#4 ← (unumber)(number) 0
Inlining cast (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#1
Inlining cast (signed byte~) render_logo::$4 ← (signed byte)(snumber~) render_logo::$3
Inlining cast (byte) render_logo::line#0 ← (unumber)(number) 0
Inlining cast (byte~) render_logo::$18 ← (byte)(signed byte~) render_logo::$17
Inlining cast (byte) render_logo::screen_idx#1 ← (unumber)(number) 0
Inlining cast (byte~) render_logo::$6 ← (byte)(signed byte) render_logo::x_char#2
Inlining cast (byte) render_logo::screen_idx#2 ← (unumber)(number) 0
Inlining cast (byte) render_logo::line#1 ← (unumber)(number) 0
Inlining cast (byte) render_logo::logo_idx#2 ← (unumber)(number) 0
Inlining cast *((byte*~) render_logo::$9 + (byte) render_logo::screen_idx#8) ← (unumber)(number) 0
Inlining cast (byte) render_logo::line#3 ← (unumber)(number) 0
Inlining cast (byte) render_logo::line#5 ← (unumber)(number) 0
Inlining cast (byte) render_logo::line#7 ← (unumber)(number) 0
Inlining cast *((byte*~) render_logo::$27 + (byte) render_logo::screen_idx#16) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53270
Simplifying constant integer cast $10
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $b
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast (word) div32u16u::quotient_hi#1
Simplifying constant integer cast (word) div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $6487ed51
Simplifying constant integer cast $3243f6a9
Simplifying constant integer cast $1921fb54
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $200
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 8
Simplifying constant integer cast $3e8
Simplifying constant integer cast -$140
Simplifying constant integer cast $140
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (dword) $6487ed51
Finalized unsigned number type (dword) $3243f6a9
Finalized unsigned number type (dword) $1921fb54
Finalized signed number type (signed byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3e8
Finalized signed number type (signed word) -$140
Finalized signed number type (signed word) $140
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 7
Finalized signed number type (signed byte) 8
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#7 | (byte) 1
Inferred type updated to byte in (unumber~) mul16u::$1 ← (word) mul16u::a#4 & (byte) 1
Inferred type updated to word in (unumber~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$2#0 ← (word~) main::toD0181_$1#0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$3#0 ← > (word~) main::toD0181_$2#0
Inferred type updated to byte in (unumber~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$7#0 ← (byte~) main::toD0181_$6#0 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$8#0 ← (byte~) main::toD0181_$3#0 | (byte~) main::toD0181_$7#0
Inferred type updated to byte in (unumber~) main::$2 ← (byte) WHITE#0 | (byte) 8
Inferred type updated to byte in (unumber~) render_logo::$1 ← (byte~) render_logo::$0 & (byte) 7
Inferred type updated to byte in (unumber~) render_logo::$2 ← (byte) VIC_MCM#0 | (byte~) render_logo::$1
Inferred type updated to signed word in (snumber~) render_logo::$3 ← (signed word) render_logo::xpos#1 / (signed byte) 8
Inferred type updated to byte in (unumber~) render_logo::$8 ← (byte) $28 * (byte) render_logo::line#9
Inferred type updated to byte in (unumber~) render_logo::$12 ← (byte) $28 * (byte) render_logo::line#10
Inferred type updated to byte in (unumber~) render_logo::$14 ← (byte) $28 * (byte) render_logo::line#10
Inferred type updated to byte in (unumber~) render_logo::$15 ← (byte) render_logo::logo_idx#5 + (byte~) render_logo::$14
Inferred type updated to byte in (unumber~) render_logo::$20 ← (byte) $28 * (byte) render_logo::line#11
Inferred type updated to byte in (unumber~) render_logo::$22 ← (byte) $28 * (byte) render_logo::line#11
Inferred type updated to byte in (unumber~) render_logo::$23 ← (byte) render_logo::logo_idx#8 + (byte~) render_logo::$22
Inferred type updated to byte in (unumber~) render_logo::$26 ← (byte) $28 * (byte) render_logo::line#12
Inversing boolean not [22] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [21] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [30] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [29] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Inversing boolean not [87] (bool~) mul16u::$3 ← (byte~) mul16u::$1 == (byte) 0 from [86] (bool~) mul16u::$2 ← (byte~) mul16u::$1 != (byte) 0
Inversing boolean not [113] (bool~) mul16s::$4 ← (signed word) mul16s::a#2 >= (signed byte) 0 from [112] (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (signed byte) 0
Inversing boolean not [117] (bool~) mul16s::$6 ← (signed word) mul16s::b#2 >= (signed byte) 0 from [116] (bool~) mul16s::$5 ← (signed word) mul16s::b#2 < (signed byte) 0
Inversing boolean not [185] (bool~) sin16s::$1 ← (dword) sin16s::x#3 < (dword) PI_u4f28#0 from [184] (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
Inversing boolean not [189] (bool~) sin16s::$3 ← (dword) sin16s::x#4 < (dword) PI_HALF_u4f28#0 from [188] (bool~) sin16s::$2 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
Inversing boolean not [248] (bool~) sin16s::$16 ← (byte) sin16s::isUpper#2 == (byte) 0 from [247] (bool~) sin16s::$15 ← (byte) sin16s::isUpper#2 != (byte) 0
Inversing boolean not [277] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [276] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [377] (bool~) loop::$4 ← (word) xsin_idx#3 != (word) XSIN_SIZE#0 from [376] (bool~) loop::$3 ← (word) xsin_idx#3 == (word) XSIN_SIZE#0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#7 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#4 = (word) divr16u::divisor#5 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word~) divr16u::$5 
Alias (word) divr16u::rem#6 = (word) divr16u::rem#8 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#3 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#11 = (word) divr16u::rem#9 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#11 (word) rem16u#2 
Alias (word) divr16u::dividend#1 = (word~) div32u16u::$0 
Alias (word) divr16u::return#2 = (word) divr16u::return#5 
Alias (dword) div32u16u::dividend#1 = (dword) div32u16u::dividend#2 
Alias (word) div32u16u::divisor#1 = (word) div32u16u::divisor#2 
Alias (word) rem16u#12 = (word) rem16u#3 
Alias (word) div32u16u::quotient_hi#0 = (word~) div32u16u::$1 (word) div32u16u::quotient_hi#1 
Alias (word) divr16u::dividend#2 = (word~) div32u16u::$2 
Alias (word) divr16u::return#3 = (word) divr16u::return#6 
Alias (word) rem16u#13 = (word) rem16u#4 (word) rem16u#14 (word) rem16u#5 
Alias (word) div32u16u::quotient_lo#0 = (word~) div32u16u::$3 
Alias (dword) div32u16u::return#0 = (dword) div32u16u::quotient#0 (dword~) div32u16u::$4 (dword) div32u16u::return#3 (dword) div32u16u::return#1 
Alias (dword) mul16u::mb#0 = (word) mul16u::b#2 
Alias (word) mul16u::a#3 = (word) mul16u::a#4 (word) mul16u::a#7 
Alias (dword) mul16u::mb#3 = (dword) mul16u::mb#4 (dword) mul16u::mb#5 
Alias (dword) mul16u::res#2 = (dword) mul16u::res#5 (dword) mul16u::res#4 (dword) mul16u::return#0 (dword) mul16u::res#3 (dword) mul16u::return#4 (dword) mul16u::return#1 
Alias (word) mul16u::a#0 = (word~) mul16u::$5 
Alias (dword) mul16u::mb#1 = (dword~) mul16u::$6 
Alias (dword) mul16u::res#1 = (dword~) mul16u::$4 
Alias (word) mul16u::a#1 = (word~) mul16s::$0 
Alias (word) mul16u::b#0 = (word~) mul16s::$1 
Alias (dword) mul16u::return#2 = (dword) mul16u::return#5 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#2 (signed word) mul16s::a#5 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#4 (signed word) mul16s::b#3 
Alias (dword) mul16s::m#0 = (dword~) mul16s::$2 (dword) mul16s::m#3 
Alias (word~) mul16s::$16 = (word~) mul16s::$11 
Alias (signed dword) mul16s::return#0 = (signed dword~) mul16s::$7 (signed dword) mul16s::return#3 (signed dword) mul16s::return#1 
Alias (dword) mul16s::m#5 = (dword) mul16s::m#6 
Alias (signed word) mul16s::a#3 = (signed word) mul16s::a#4 
Alias (word~) mul16s::$17 = (word~) mul16s::$15 
Alias (word) rem16u#0 = (word) rem16u#32 (word) rem16u#31 (word) rem16u#28 (word) rem16u#25 
Alias (signed word) sin16s_gen2::ampl#0 = (signed word~) sin16s_gen2::$0 (signed word) sin16s_gen2::ampl#3 
Alias (signed word) sin16s_gen2::offs#0 = (signed word~) sin16s_gen2::$2 (signed word) sin16s_gen2::offs#4 
Alias (dword) div32u16u::return#2 = (dword) div32u16u::return#4 
Alias (signed word*) sin16s_gen2::sintab#5 = (signed word*) sin16s_gen2::sintab#6 
Alias (word) sin16s_gen2::wavelength#1 = (word) sin16s_gen2::wavelength#5 
Alias (word) rem16u#15 = (word) rem16u#6 
Alias (dword) sin16s_gen2::step#0 = (dword~) sin16s_gen2::$3 
Alias (signed word) sin16s::return#0 = (signed word) sin16s::return#3 
Alias (signed word) sin16s_gen2::ampl#1 = (signed word) sin16s_gen2::ampl#2 (signed word) sin16s_gen2::ampl#4 
Alias (signed word) sin16s_gen2::offs#1 = (signed word) sin16s_gen2::offs#2 (signed word) sin16s_gen2::offs#3 
Alias (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#3 (signed word*) sin16s_gen2::sintab#4 
Alias (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#4 (dword) sin16s_gen2::x#3 
Alias (dword) sin16s_gen2::step#1 = (dword) sin16s_gen2::step#2 (dword) sin16s_gen2::step#3 
Alias (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#3 (word) sin16s_gen2::i#4 
Alias (word) sin16s_gen2::wavelength#2 = (word) sin16s_gen2::wavelength#3 (word) sin16s_gen2::wavelength#4 
Alias (word) rem16u#16 = (word) rem16u#26 (word) rem16u#29 (word) rem16u#22 (word) rem16u#7 
Alias (signed word) mul16s::a#0 = (signed word~) sin16s_gen2::$4 
Alias (signed dword) mul16s::return#2 = (signed dword) mul16s::return#4 
Alias (dword) sin16s_gen2::x#1 = (dword~) sin16s_gen2::$9 
Alias (dword) sin16s::x#3 = (dword) sin16s::x#5 
Alias (dword) sin16s::x#1 = (dword~) sin16s::$17 
Alias (word) sin16s::x1#0 = (word~) sin16s::$5 (word) sin16s::x1#1 (word) sin16s::x1#4 (word) sin16s::x1#2 (word) sin16s::x1#3 
Alias (word) mulu16_sel::return#0 = (word) mulu16_sel::return#7 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#6 (byte) sin16s::isUpper#7 (byte) sin16s::isUpper#5 (byte) sin16s::isUpper#4 (byte) sin16s::isUpper#3 
Alias (word) sin16s::x2#0 = (word~) sin16s::$6 
Alias (word) mulu16_sel::return#1 = (word) mulu16_sel::return#8 
Alias (word) sin16s::x3#0 = (word~) sin16s::$7 (word) sin16s::x3#1 
Alias (word) mulu16_sel::return#2 = (word) mulu16_sel::return#9 
Alias (word) sin16s::x3_6#0 = (word~) sin16s::$8 
Alias (word) sin16s::usinx#0 = (word~) sin16s::$9 (word) sin16s::usinx#4 (word) sin16s::usinx#2 
Alias (word) mulu16_sel::return#10 = (word) mulu16_sel::return#3 
Alias (word) sin16s::x4#0 = (word~) sin16s::$10 
Alias (word) mulu16_sel::return#11 = (word) mulu16_sel::return#4 
Alias (word) sin16s::x5#0 = (word~) sin16s::$11 
Alias (word) sin16s::x5_128#0 = (word~) sin16s::$12 
Alias (word) sin16s::usinx#1 = (word~) sin16s::$13 (word) sin16s::usinx#3 
Alias (signed word) sin16s::sinx#0 = (signed word~) sin16s::$14 
Alias (dword) sin16s::x#4 = (dword) sin16s::x#7 
Alias (byte) sin16s::isUpper#8 = (byte) sin16s::isUpper#9 
Alias (dword) sin16s::x#2 = (dword~) sin16s::$18 
Alias (signed word) sin16s::return#1 = (signed word) sin16s::sinx#2 (signed word) sin16s::return#4 (signed word) sin16s::return#2 
Alias (signed word) sin16s::sinx#1 = (signed word~) sin16s::$20 
Alias (dword) mul16u::return#3 = (dword) mul16u::return#6 
Alias (byte) mulu16_sel::select#5 = (byte) mulu16_sel::select#6 
Alias (word) mulu16_sel::return#12 = (word) mulu16_sel::return#5 (word~) mulu16_sel::$2 (word) mulu16_sel::return#6 
Alias (void*) memset::return#0 = (void*) memset::str#2 (void*) memset::return#4 (void*) memset::return#1 
Alias (void*) memset::str#3 = (void*) memset::str#4 
Alias (word) memset::num#2 = (word) memset::num#3 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (word) rem16u#30 = (word) rem16u#36 (word) rem16u#37 (word) rem16u#35 (word) rem16u#34 (word) rem16u#33 
Alias (word) xsin_idx#21 = (word) xsin_idx#25 (word) xsin_idx#26 (word) xsin_idx#24 (word) xsin_idx#23 (word) xsin_idx#22 
Alias (byte) main::toD0181_return#0 = (byte~) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$0 
Alias (byte) memset::c#1 = (byte~) main::$2 
Alias (word) rem16u#23 = (word) rem16u#27 
Alias (word) xsin_idx#13 = (word) xsin_idx#17 (word) xsin_idx#20 
Alias (word) rem16u#17 = (word) rem16u#8 (word) rem16u#24 (word) rem16u#18 (word) rem16u#9 
Alias (word) xsin_idx#0 = (word) xsin_idx#7 (word) xsin_idx#8 (word) xsin_idx#1 
Alias (word) xsin_idx#10 = (word) xsin_idx#9 (word) xsin_idx#14 
Alias (word) xsin_idx#11 = (word) xsin_idx#15 (word) xsin_idx#5 
Alias (signed byte) render_logo::x_char#0 = (signed byte~) render_logo::$4 (signed byte) render_logo::x_char#1 (signed byte) render_logo::x_char#2 
Alias (byte) render_logo::logo_idx#1 = (byte~) render_logo::$18 
Alias (byte) render_logo::logo_start#0 = (byte~) render_logo::$6 
Alias (byte) render_logo::screen_idx#18 = (byte) render_logo::screen_idx#7 (byte) render_logo::screen_idx#19 
Alias (byte) render_logo::logo_start#1 = (byte) render_logo::logo_start#4 
Alias (byte) render_logo::screen_idx#8 = (byte) render_logo::screen_idx#9 
Alias (byte) render_logo::logo_start#2 = (byte) render_logo::logo_start#3 
Alias (byte) render_logo::logo_idx#10 = (byte) render_logo::logo_idx#12 
Alias (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#20 
Alias (byte) render_logo::screen_idx#11 = (byte) render_logo::screen_idx#12 
Alias (byte) render_logo::logo_idx#5 = (byte) render_logo::logo_idx#6 
Alias (byte) render_logo::logo_idx#11 = (byte) render_logo::logo_idx#7 
Alias (byte) render_logo::screen_idx#21 = (byte) render_logo::screen_idx#22 
Alias (byte) render_logo::screen_idx#13 = (byte) render_logo::screen_idx#14 
Alias (byte) render_logo::logo_idx#8 = (byte) render_logo::logo_idx#9 
Alias (byte) render_logo::screen_idx#15 = (byte) render_logo::screen_idx#23 
Alias (byte) render_logo::screen_idx#16 = (byte) render_logo::screen_idx#17 
Alias (word) xsin_idx#16 = (word) xsin_idx#2 
Alias (word) rem16u#10 = (word) rem16u#19 
Alias (word) xsin_idx#12 = (word) xsin_idx#6 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#4 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#4 (word) divr16u::divisor#7 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#6 
Alias (word) mul16u::a#3 = (word) mul16u::a#5 
Alias (dword) mul16u::mb#2 = (dword) mul16u::mb#3 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#2 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#3 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) divr16u::divisor#2 (word) divr16u::divisor#6
Identical Phi Values (dword) div32u16u::dividend#1 (dword) div32u16u::dividend#0
Identical Phi Values (word) div32u16u::divisor#1 (word) div32u16u::divisor#0
Identical Phi Values (word) rem16u#20 (word) rem16u#21
Identical Phi Values (word) rem16u#12 (word) rem16u#1
Identical Phi Values (word) rem16u#13 (word) rem16u#1
Identical Phi Values (signed word) mul16s::a#1 (signed word) mul16s::a#0
Identical Phi Values (signed word) mul16s::b#1 (signed word) mul16s::b#0
Identical Phi Values (signed word) sin16s_gen2::max#1 (signed word) sin16s_gen2::max#0
Identical Phi Values (signed word) sin16s_gen2::min#1 (signed word) sin16s_gen2::min#0
Identical Phi Values (word) sin16s_gen2::wavelength#1 (word) sin16s_gen2::wavelength#0
Identical Phi Values (word) rem16u#21 (word) rem16u#23
Identical Phi Values (signed word*) sin16s_gen2::sintab#5 (signed word*) sin16s_gen2::sintab#1
Identical Phi Values (word) rem16u#15 (word) rem16u#13
Identical Phi Values (signed word) sin16s_gen2::ampl#1 (signed word) sin16s_gen2::ampl#0
Identical Phi Values (signed word) sin16s_gen2::offs#1 (signed word) sin16s_gen2::offs#0
Identical Phi Values (dword) sin16s_gen2::step#1 (dword) sin16s_gen2::step#0
Identical Phi Values (word) sin16s_gen2::wavelength#2 (word) sin16s_gen2::wavelength#1
Identical Phi Values (word) rem16u#16 (word) rem16u#15
Identical Phi Values (dword) sin16s::x#3 (dword) sin16s::x#0
Identical Phi Values (byte) memset::c#2 (byte) memset::c#3
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (word) rem16u#30 (word) rem16u#0
Identical Phi Values (word) xsin_idx#21 (word) xsin_idx#16
Identical Phi Values (word) rem16u#23 (word) rem16u#30
Identical Phi Values (word) xsin_idx#13 (word) xsin_idx#21
Identical Phi Values (word) rem16u#17 (word) rem16u#16
Identical Phi Values (word) xsin_idx#0 (word) xsin_idx#11
Identical Phi Values (word) xsin_idx#18 (word) xsin_idx#13
Identical Phi Values (word) xsin_idx#10 (word) xsin_idx#11
Identical Phi Values (signed word) render_logo::xpos#1 (signed word) render_logo::xpos#0
Identical Phi Values (byte) render_logo::screen_idx#8 (byte) render_logo::screen_idx#18
Identical Phi Values (byte) render_logo::logo_start#2 (byte) render_logo::logo_start#1
Identical Phi Values (byte) render_logo::logo_idx#5 (byte) render_logo::logo_idx#10
Identical Phi Values (byte) render_logo::screen_idx#11 (byte) render_logo::screen_idx#10
Identical Phi Values (byte) render_logo::logo_idx#8 (byte) render_logo::logo_idx#11
Identical Phi Values (byte) render_logo::screen_idx#13 (byte) render_logo::screen_idx#21
Identical Phi Values (byte) render_logo::screen_idx#16 (byte) render_logo::screen_idx#15
Identical Phi Values (word) rem16u#10 (word) rem16u#17
Identical Phi Values (word) xsin_idx#12 (word) xsin_idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Identical Phi Values (byte) render_logo::logo_start#1 (byte) render_logo::logo_start#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [431] (byte~) render_logo::$14 ← (byte) $28 * (byte) render_logo::line#10
Identified duplicate assignment right side [448] (byte~) render_logo::$22 ← (byte) $28 * (byte) render_logo::line#11
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) divr16u::$4 [23] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [31] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [38] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul16u::$0 [83] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [88] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@4
Simple Condition (bool~) mul16s::$4 [114] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
Simple Condition (bool~) mul16s::$6 [118] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2
Simple Condition (bool~) sin16s_gen2::$10 [178] if((word) sin16s_gen2::i#1<(word) sin16s_gen2::wavelength#0) goto sin16s_gen2::@1
Simple Condition (bool~) sin16s::$1 [186] if((dword) sin16s::x#0<(dword) PI_u4f28#0) goto sin16s::@1
Simple Condition (bool~) sin16s::$3 [190] if((dword) sin16s::x#4<(dword) PI_HALF_u4f28#0) goto sin16s::@2
Simple Condition (bool~) sin16s::$16 [249] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@3
Simple Condition (bool~) memset::$1 [278] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [290] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) main::$6 [343] if((byte) main::ch#1!=rangelast(0,$ef)) goto main::@1
Simple Condition (bool~) loop::$0 [366] if(*((byte*) RASTER#0)!=(byte) $ff) goto loop::@4
Simple Condition (bool~) loop::$4 [378] if((word) xsin_idx#3!=(word) XSIN_SIZE#0) goto loop::@11
Simple Condition (bool~) render_logo::$5 [397] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1
Simple Condition (bool~) render_logo::$7 [409] if((byte) render_logo::screen_idx#18!=(byte) render_logo::logo_start#0) goto render_logo::@5
Simple Condition (bool~) render_logo::$10 [420] unroll if((byte) render_logo::line#2!=rangelast(0,5)) goto render_logo::@7
Simple Condition (bool~) render_logo::$11 [425] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@13
Simple Condition (bool~) render_logo::$16 [436] unroll if((byte) render_logo::line#4!=rangelast(0,5)) goto render_logo::@15
Simple Condition (bool~) render_logo::$19 [442] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@22
Simple Condition (bool~) render_logo::$24 [453] unroll if((byte) render_logo::line#6!=rangelast(0,5)) goto render_logo::@24
Simple Condition (bool~) render_logo::$25 [459] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@30
Simple Condition (bool~) render_logo::$28 [468] unroll if((byte) render_logo::line#8!=rangelast(0,5)) goto render_logo::@32
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [216] (word) mulu16_sel::v2#2 ← (unumber)(number) $10000/(number) 6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) BGCOL#0 = (byte*) 53281
Constant (const byte*) BGCOL2#0 = (byte*) 53282
Constant (const byte*) BGCOL3#0 = (byte*) 53283
Constant (const byte*) D016#0 = (byte*) 53270
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte*) D018#0 = (byte*) 53272
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) DARK_GREY#0 = $b
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const dword) mul16u::res#0 = 0
Constant (const dword) PI2_u4f28#0 = $6487ed51
Constant (const dword) PI_u4f28#0 = $3243f6a9
Constant (const dword) PI_HALF_u4f28#0 = $1921fb54
Constant (const dword) sin16s_gen2::x#0 = 0
Constant (const word) sin16s_gen2::i#0 = 0
Constant (const byte) sin16s::isUpper#0 = 0
Constant (const byte) sin16s::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#0 = 0
Constant (const byte) mulu16_sel::select#1 = 1
Constant (const word) mulu16_sel::v2#2 = (unumber)$10000/6
Constant (const byte) mulu16_sel::select#2 = 1
Constant (const byte) mulu16_sel::select#3 = 0
Constant (const byte) mulu16_sel::select#4 = 0
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte*) LOGO#0 = (byte*) 8192
Constant (const word) XSIN_SIZE#0 = $200
Constant (const word) memset::num#0 = $3e8
Constant (const word) memset::num#1 = $3e8
Constant (const byte) main::ch#0 = 0
Constant (const signed word) sin16s_gen2::min#0 = -$140
Constant (const signed word) sin16s_gen2::max#0 = $140
Constant (const word) xsin_idx#16 = 0
Constant (const word) xsin_idx#4 = 0
Constant (const byte) render_logo::logo_idx#0 = 0
Constant (const byte) render_logo::screen_idx#0 = 0
Constant (const byte) render_logo::line#0 = 0
Constant (const byte) render_logo::screen_idx#1 = 0
Constant (const byte) render_logo::screen_idx#2 = 0
Constant (const byte) render_logo::line#1 = 0
Constant (const byte) render_logo::logo_idx#2 = 0
Constant (const byte) render_logo::line#3 = 0
Constant (const byte) render_logo::line#5 = 0
Constant (const byte) render_logo::line#7 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const dword) div32u16u::dividend#0 = PI2_u4f28#0
Constant (const byte*) main::toD0181_screen#0 = SCREEN#0
Constant (const byte*) main::toD0181_gfx#0 = LOGO#0
Constant (const byte) memset::c#0 = BLACK#0
Constant (const word) sin16s_gen2::wavelength#0 = XSIN_SIZE#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) div32u16u::divisor#0 = sin16s_gen2::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div32u16u::divisor#0
Constant (const word) divr16u::divisor#1 = div32u16u::divisor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( XSIN_SIZE#0, 0) } in [299] (signed word[XSIN_SIZE#0]) xsin#0 ← { fill( XSIN_SIZE#0, 0) }
Constant value identified (word)main::toD0181_screen#0 in [309] (word~) main::toD0181_$0#0 ← (word)(const byte*) main::toD0181_screen#0
Constant value identified (word)main::toD0181_gfx#0 in [313] (word~) main::toD0181_$4#0 ← (word)(const byte*) main::toD0181_gfx#0
Constant value identified (void*)SCREEN#0 in [325] (void*) memset::str#0 ← (void*)(const byte*) SCREEN#0
Constant value identified (void*)COLS#0 in [332] (void*) memset::str#1 ← (void*)(const byte*) COLS#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [363] if(true) goto loop::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [36] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [38] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
Resolved ranged next value [341] main::ch#1 ← ++ main::ch#2 to ++
Resolved ranged comparison value [343] if(main::ch#1!=rangelast(0,$ef)) goto main::@1 to (number) $f0
Resolved ranged next value [418] render_logo::line#2 ← ++ render_logo::line#9 to ++
Resolved ranged comparison value [420] unroll if(render_logo::line#2!=rangelast(0,5)) goto render_logo::@7 to (number) 6
Resolved ranged next value [434] render_logo::line#4 ← ++ render_logo::line#10 to ++
Resolved ranged comparison value [436] unroll if(render_logo::line#4!=rangelast(0,5)) goto render_logo::@15 to (number) 6
Resolved ranged next value [451] render_logo::line#6 ← ++ render_logo::line#11 to ++
Resolved ranged comparison value [453] unroll if(render_logo::line#6!=rangelast(0,5)) goto render_logo::@24 to (number) 6
Resolved ranged next value [466] render_logo::line#8 ← ++ render_logo::line#12 to ++
Resolved ranged comparison value [468] unroll if(render_logo::line#8!=rangelast(0,5)) goto render_logo::@32 to (number) 6
Eliminating unused variable (void*) memset::return#2 and assignment [162] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [166] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte) render_logo::logo_idx#0
Eliminating unused constant (const byte) render_logo::screen_idx#0
Eliminating unused constant (const byte) render_logo::line#0
Eliminating unused constant (const word) rem16u#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block loop::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $10 in if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Adding number conversion cast (unumber) $f0 in if((byte) main::ch#1!=(number) $f0) goto main::@1
Adding number conversion cast (unumber) 6 in unroll if((byte) render_logo::line#2!=(number) 6) goto render_logo::@7
Adding number conversion cast (unumber) 6 in unroll if((byte) render_logo::line#4!=(number) 6) goto render_logo::@15
Adding number conversion cast (unumber) 6 in unroll if((byte) render_logo::line#6!=(number) 6) goto render_logo::@24
Adding number conversion cast (unumber) 6 in unroll if((byte) render_logo::line#8!=(number) 6) goto render_logo::@32
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $f0
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) render_logo::$14 = (byte~) render_logo::$12 
Alias (byte~) render_logo::$22 = (byte~) render_logo::$20 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [18] (word) divr16u::dividend#1 ← > (const dword) div32u16u::dividend#0
Constant right-side identified [22] (word) divr16u::dividend#2 ← < (const dword) div32u16u::dividend#0
Constant right-side identified [58] (signed word) sin16s_gen2::ampl#0 ← (const signed word) sin16s_gen2::max#0 - (const signed word) sin16s_gen2::min#0
Constant right-side identified [162] (byte) memset::c#1 ← (const byte) WHITE#0 | (byte) 8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) divr16u::dividend#1 = >div32u16u::dividend#0
Constant (const word) divr16u::dividend#2 = <div32u16u::dividend#0
Constant (const signed word) sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0
Constant (const signed word[XSIN_SIZE#0]) xsin#0 = { fill( XSIN_SIZE#0, 0) }
Constant (const word) main::toD0181_$0#0 = (word)main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = (word)main::toD0181_gfx#0
Constant (const void*) memset::str#0 = (void*)SCREEN#0
Constant (const byte) memset::c#1 = WHITE#0|8
Constant (const void*) memset::str#1 = (void*)COLS#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed word) mul16s::b#0 = sin16s_gen2::ampl#0
Constant (const signed word*) sin16s_gen2::sintab#1 = xsin#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)mul16s::b#0 in [40] (word) mul16u::b#0 ← (word)(const signed word) mul16s::b#0
Constant value identified (word)mul16s::b#0 in [48] (word~) mul16s::$10 ← (word)(const signed word) mul16s::b#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [46] if((const signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating variable (word~) mul16s::$13 from unused block mul16s::@4
Eliminating variable (word~) mul16s::$14 from unused block mul16s::@4
Eliminating variable (word~) mul16s::$17 from unused block mul16s::@4
Eliminating variable (dword) mul16s::m#2 from unused block mul16s::@4
Removing PHI-reference to removed block (mul16s::@4) in block mul16s::@2
Removing unused block mul16s::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias (dword) mul16s::m#4 = (dword) mul16s::m#5 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [51] (signed word~) sin16s_gen2::$1 ← (const signed word) sin16s_gen2::ampl#0 >> (signed byte) 1
Constant right-side identified [139] (word~) main::toD0181_$1#0 ← (const word) main::toD0181_$0#0 & (word) $3fff
Constant right-side identified [142] (byte~) main::toD0181_$5#0 ← > (const word) main::toD0181_$4#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) mul16u::b#0 = (word)mul16s::b#0
Constant (const word) mul16s::$10 = (word)mul16s::b#0
Constant (const signed word) sin16s_gen2::$1 = sin16s_gen2::ampl#0>>1
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&$3fff
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [48] (signed word) sin16s_gen2::offs#0 ← (const signed word) sin16s_gen2::min#0 + (const signed word) sin16s_gen2::$1
Constant right-side identified [135] (word~) main::toD0181_$2#0 ← (const word) main::toD0181_$1#0 * (byte) 4
Constant right-side identified [137] (byte~) main::toD0181_$6#0 ← (const byte) main::toD0181_$5#0 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const signed word) sin16s_gen2::offs#0 = sin16s_gen2::min#0+sin16s_gen2::$1
Constant (const word) main::toD0181_$2#0 = main::toD0181_$1#0*4
Constant (const byte) main::toD0181_$6#0 = main::toD0181_$5#0/4
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const signed word) sin16s_gen2::min#0+(const signed word) sin16s_gen2::$1 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero sin16s_gen2::$7 in [62] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word~) sin16s_gen2::$7
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const signed word) sin16s_gen2::$1
Eliminating unused constant (const signed word) sin16s_gen2::offs#0
Successful SSA optimization PassNEliminateUnusedVars
Alias (signed word~) sin16s_gen2::$8 = (signed word~) sin16s_gen2::$7 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [134] (byte~) main::toD0181_$3#0 ← > (const word) main::toD0181_$2#0
Constant right-side identified [135] (byte~) main::toD0181_$7#0 ← (const byte) main::toD0181_$6#0 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte) main::toD0181_$7#0 = main::toD0181_$6#0&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [133] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$3#0 | (const byte) main::toD0181_$7#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7 tails: render_logo::@7 blocks: render_logo::@7 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#9 (const byte) render_logo::line#1
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [173] if((byte) render_logo::line#2==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [169] (byte~) render_logo::$8 ← (byte) $28 * (const byte) render_logo::line#1
Constant right-side identified [172] (byte) render_logo::line#2 ← ++ (const byte) render_logo::line#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$8 = $28*render_logo::line#1
Constant (const byte) render_logo::line#2 = ++render_logo::line#1
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [173] if((const byte) render_logo::line#2==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte) $28*(const byte) render_logo::line#1 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN#0 in [170] (byte*~) render_logo::$9 ← (const byte*) SCREEN#0 + (const byte) render_logo::$8
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_logo::$8
Successful SSA optimization PassNEliminateUnusedVars
Constant (const byte*) render_logo::$9 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15 tails: render_logo::@15 blocks: render_logo::@15 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#10 (const byte) render_logo::line#3
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [49] if((byte) render_logo::line#4==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [44] (byte~) render_logo::$14 ← (byte) $28 * (const byte) render_logo::line#3
Constant right-side identified [48] (byte) render_logo::line#4 ← ++ (const byte) render_logo::line#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$14 = $28*render_logo::line#3
Constant (const byte) render_logo::line#4 = ++render_logo::line#3
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [49] if((const byte) render_logo::line#4==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte) $28*(const byte) render_logo::line#3 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN#0 in [45] (byte*~) render_logo::$13 ← (const byte*) SCREEN#0 + (const byte) render_logo::$14
Simplifying expression containing zero render_logo::logo_idx#10 in [46] (byte~) render_logo::$15 ← (byte) render_logo::logo_idx#10 + (const byte) render_logo::$14
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_logo::$14
Successful SSA optimization PassNEliminateUnusedVars
Alias (byte) render_logo::logo_idx#10 = (byte~) render_logo::$15 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) render_logo::$13 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15_1 tails: render_logo::@15_1 blocks: render_logo::@15_1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#15 (const byte) render_logo::line#4
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [50] if((byte) render_logo::line#16==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [45] (byte~) render_logo::$31 ← (byte) $28 * (const byte) render_logo::line#4
Constant right-side identified [49] (byte) render_logo::line#16 ← ++ (const byte) render_logo::line#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$31 = $28*render_logo::line#4
Constant (const byte) render_logo::line#16 = ++render_logo::line#4
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [50] if((const byte) render_logo::line#16==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [44] (byte*~) render_logo::$32 ← (const byte*) SCREEN#0 + (const byte) render_logo::$31
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$32 = SCREEN#0+render_logo::$31
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15_2 tails: render_logo::@15_2 blocks: render_logo::@15_2 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#17 (const byte) render_logo::line#16
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [52] if((byte) render_logo::line#18==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [47] (byte~) render_logo::$34 ← (byte) $28 * (const byte) render_logo::line#16
Constant right-side identified [51] (byte) render_logo::line#18 ← ++ (const byte) render_logo::line#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$34 = $28*render_logo::line#16
Constant (const byte) render_logo::line#18 = ++render_logo::line#16
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [52] if((const byte) render_logo::line#18==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [46] (byte*~) render_logo::$35 ← (const byte*) SCREEN#0 + (const byte) render_logo::$34
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$35 = SCREEN#0+render_logo::$34
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15_3 tails: render_logo::@15_3 blocks: render_logo::@15_3 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#19 (const byte) render_logo::line#18
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [54] if((byte) render_logo::line#20==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [49] (byte~) render_logo::$37 ← (byte) $28 * (const byte) render_logo::line#18
Constant right-side identified [53] (byte) render_logo::line#20 ← ++ (const byte) render_logo::line#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$37 = $28*render_logo::line#18
Constant (const byte) render_logo::line#20 = ++render_logo::line#18
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [54] if((const byte) render_logo::line#20==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [48] (byte*~) render_logo::$38 ← (const byte*) SCREEN#0 + (const byte) render_logo::$37
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$38 = SCREEN#0+render_logo::$37
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15_4 tails: render_logo::@15_4 blocks: render_logo::@15_4 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#21 (const byte) render_logo::line#20
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [56] if((byte) render_logo::line#22==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [51] (byte~) render_logo::$40 ← (byte) $28 * (const byte) render_logo::line#20
Constant right-side identified [55] (byte) render_logo::line#22 ← ++ (const byte) render_logo::line#20
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$40 = $28*render_logo::line#20
Constant (const byte) render_logo::line#22 = ++render_logo::line#20
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [56] if((const byte) render_logo::line#22==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [50] (byte*~) render_logo::$41 ← (const byte*) SCREEN#0 + (const byte) render_logo::$40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$41 = SCREEN#0+render_logo::$40
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@15_5 tails: render_logo::@15_5 blocks: render_logo::@15_5 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#23 (const byte) render_logo::line#22
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [58] if((byte) render_logo::line#24==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [53] (byte~) render_logo::$43 ← (byte) $28 * (const byte) render_logo::line#22
Constant right-side identified [57] (byte) render_logo::line#24 ← ++ (const byte) render_logo::line#22
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$43 = $28*render_logo::line#22
Constant (const byte) render_logo::line#24 = ++render_logo::line#22
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (render_logo::@15_5) in block render_logo::@15_6
if() condition always true - replacing block destination [58] if((const byte) render_logo::line#24==(byte) 6) goto render_logo::@16
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) render_logo::line#24
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) render_logo::line#25 from unused block render_logo::@15_6
Eliminating variable (byte~) render_logo::$46 from unused block render_logo::@15_6
Eliminating variable (byte*~) render_logo::$47 from unused block render_logo::@15_6
Eliminating variable (byte~) render_logo::$48 from unused block render_logo::@15_6
Eliminating variable (byte) render_logo::line#26 from unused block render_logo::@15_6
Removing unused block render_logo::@15_6
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant right-side identified [52] (byte*~) render_logo::$44 ← (const byte*) SCREEN#0 + (const byte) render_logo::$43
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$44 = SCREEN#0+render_logo::$43
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7_1 tails: render_logo::@7_1 blocks: render_logo::@7_1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#13 (const byte) render_logo::line#2
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [62] if((byte) render_logo::line#14==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [58] (byte~) render_logo::$29 ← (byte) $28 * (const byte) render_logo::line#2
Constant right-side identified [61] (byte) render_logo::line#14 ← ++ (const byte) render_logo::line#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$29 = $28*render_logo::line#2
Constant (const byte) render_logo::line#14 = ++render_logo::line#2
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [62] if((const byte) render_logo::line#14==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [57] (byte*~) render_logo::$30 ← (const byte*) SCREEN#0 + (const byte) render_logo::$29
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$30 = SCREEN#0+render_logo::$29
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7_2 tails: render_logo::@7_2 blocks: render_logo::@7_2 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#27 (const byte) render_logo::line#14
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [63] if((byte) render_logo::line#28==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [59] (byte~) render_logo::$49 ← (byte) $28 * (const byte) render_logo::line#14
Constant right-side identified [62] (byte) render_logo::line#28 ← ++ (const byte) render_logo::line#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$49 = $28*render_logo::line#14
Constant (const byte) render_logo::line#28 = ++render_logo::line#14
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [63] if((const byte) render_logo::line#28==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [58] (byte*~) render_logo::$50 ← (const byte*) SCREEN#0 + (const byte) render_logo::$49
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$50 = SCREEN#0+render_logo::$49
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7_3 tails: render_logo::@7_3 blocks: render_logo::@7_3 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#29 (const byte) render_logo::line#28
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [64] if((byte) render_logo::line#30==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [60] (byte~) render_logo::$51 ← (byte) $28 * (const byte) render_logo::line#28
Constant right-side identified [63] (byte) render_logo::line#30 ← ++ (const byte) render_logo::line#28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$51 = $28*render_logo::line#28
Constant (const byte) render_logo::line#30 = ++render_logo::line#28
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [64] if((const byte) render_logo::line#30==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [59] (byte*~) render_logo::$52 ← (const byte*) SCREEN#0 + (const byte) render_logo::$51
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$52 = SCREEN#0+render_logo::$51
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7_4 tails: render_logo::@7_4 blocks: render_logo::@7_4 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#31 (const byte) render_logo::line#30
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [65] if((byte) render_logo::line#32==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [61] (byte~) render_logo::$53 ← (byte) $28 * (const byte) render_logo::line#30
Constant right-side identified [64] (byte) render_logo::line#32 ← ++ (const byte) render_logo::line#30
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$53 = $28*render_logo::line#30
Constant (const byte) render_logo::line#32 = ++render_logo::line#30
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [65] if((const byte) render_logo::line#32==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [60] (byte*~) render_logo::$54 ← (const byte*) SCREEN#0 + (const byte) render_logo::$53
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$54 = SCREEN#0+render_logo::$53
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@7_5 tails: render_logo::@7_5 blocks: render_logo::@7_5 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#33 (const byte) render_logo::line#32
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [66] if((byte) render_logo::line#34==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [62] (byte~) render_logo::$55 ← (byte) $28 * (const byte) render_logo::line#32
Constant right-side identified [65] (byte) render_logo::line#34 ← ++ (const byte) render_logo::line#32
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$55 = $28*render_logo::line#32
Constant (const byte) render_logo::line#34 = ++render_logo::line#32
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (render_logo::@7_5) in block render_logo::@7_6
if() condition always true - replacing block destination [66] if((const byte) render_logo::line#34==(byte) 6) goto render_logo::@8
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) render_logo::line#34
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) render_logo::line#35 from unused block render_logo::@7_6
Eliminating variable (byte~) render_logo::$57 from unused block render_logo::@7_6
Eliminating variable (byte*~) render_logo::$58 from unused block render_logo::@7_6
Eliminating variable (byte) render_logo::line#36 from unused block render_logo::@7_6
Removing unused block render_logo::@7_6
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant right-side identified [61] (byte*~) render_logo::$56 ← (const byte*) SCREEN#0 + (const byte) render_logo::$55
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$56 = SCREEN#0+render_logo::$55
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32 tails: render_logo::@32 blocks: render_logo::@32 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#12 (const byte) render_logo::line#7
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [74] if((byte) render_logo::line#8==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [70] (byte~) render_logo::$26 ← (byte) $28 * (const byte) render_logo::line#7
Constant right-side identified [73] (byte) render_logo::line#8 ← ++ (const byte) render_logo::line#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$26 = $28*render_logo::line#7
Constant (const byte) render_logo::line#8 = ++render_logo::line#7
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [74] if((const byte) render_logo::line#8==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte) $28*(const byte) render_logo::line#7 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN#0 in [71] (byte*~) render_logo::$27 ← (const byte*) SCREEN#0 + (const byte) render_logo::$26
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_logo::$26
Successful SSA optimization PassNEliminateUnusedVars
Constant (const byte*) render_logo::$27 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32_1 tails: render_logo::@32_1 blocks: render_logo::@32_1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#37 (const byte) render_logo::line#8
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [75] if((byte) render_logo::line#38==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [71] (byte~) render_logo::$59 ← (byte) $28 * (const byte) render_logo::line#8
Constant right-side identified [74] (byte) render_logo::line#38 ← ++ (const byte) render_logo::line#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$59 = $28*render_logo::line#8
Constant (const byte) render_logo::line#38 = ++render_logo::line#8
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [75] if((const byte) render_logo::line#38==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [70] (byte*~) render_logo::$60 ← (const byte*) SCREEN#0 + (const byte) render_logo::$59
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$60 = SCREEN#0+render_logo::$59
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32_2 tails: render_logo::@32_2 blocks: render_logo::@32_2 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#39 (const byte) render_logo::line#38
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [76] if((byte) render_logo::line#40==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [72] (byte~) render_logo::$61 ← (byte) $28 * (const byte) render_logo::line#38
Constant right-side identified [75] (byte) render_logo::line#40 ← ++ (const byte) render_logo::line#38
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$61 = $28*render_logo::line#38
Constant (const byte) render_logo::line#40 = ++render_logo::line#38
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [76] if((const byte) render_logo::line#40==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [71] (byte*~) render_logo::$62 ← (const byte*) SCREEN#0 + (const byte) render_logo::$61
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$62 = SCREEN#0+render_logo::$61
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32_3 tails: render_logo::@32_3 blocks: render_logo::@32_3 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#41 (const byte) render_logo::line#40
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [77] if((byte) render_logo::line#42==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [73] (byte~) render_logo::$63 ← (byte) $28 * (const byte) render_logo::line#40
Constant right-side identified [76] (byte) render_logo::line#42 ← ++ (const byte) render_logo::line#40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$63 = $28*render_logo::line#40
Constant (const byte) render_logo::line#42 = ++render_logo::line#40
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [77] if((const byte) render_logo::line#42==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [72] (byte*~) render_logo::$64 ← (const byte*) SCREEN#0 + (const byte) render_logo::$63
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$64 = SCREEN#0+render_logo::$63
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32_4 tails: render_logo::@32_4 blocks: render_logo::@32_4 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#43 (const byte) render_logo::line#42
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [78] if((byte) render_logo::line#44==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [74] (byte~) render_logo::$65 ← (byte) $28 * (const byte) render_logo::line#42
Constant right-side identified [77] (byte) render_logo::line#44 ← ++ (const byte) render_logo::line#42
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$65 = $28*render_logo::line#42
Constant (const byte) render_logo::line#44 = ++render_logo::line#42
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [78] if((const byte) render_logo::line#44==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [73] (byte*~) render_logo::$66 ← (const byte*) SCREEN#0 + (const byte) render_logo::$65
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$66 = SCREEN#0+render_logo::$65
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@32_5 tails: render_logo::@32_5 blocks: render_logo::@32_5 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#45 (const byte) render_logo::line#44
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [79] if((byte) render_logo::line#46==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [75] (byte~) render_logo::$67 ← (byte) $28 * (const byte) render_logo::line#44
Constant right-side identified [78] (byte) render_logo::line#46 ← ++ (const byte) render_logo::line#44
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$67 = $28*render_logo::line#44
Constant (const byte) render_logo::line#46 = ++render_logo::line#44
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (render_logo::@32_5) in block render_logo::@32_6
if() condition always true - replacing block destination [79] if((const byte) render_logo::line#46==(byte) 6) goto render_logo::@33
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) render_logo::line#46
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) render_logo::line#47 from unused block render_logo::@32_6
Eliminating variable (byte~) render_logo::$69 from unused block render_logo::@32_6
Eliminating variable (byte*~) render_logo::$70 from unused block render_logo::@32_6
Eliminating variable (byte) render_logo::line#48 from unused block render_logo::@32_6
Removing unused block render_logo::@32_6
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant right-side identified [74] (byte*~) render_logo::$68 ← (const byte*) SCREEN#0 + (const byte) render_logo::$67
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$68 = SCREEN#0+render_logo::$67
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24 tails: render_logo::@24 blocks: render_logo::@24 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#11 (const byte) render_logo::line#5
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [82] if((byte) render_logo::line#6==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [77] (byte~) render_logo::$22 ← (byte) $28 * (const byte) render_logo::line#5
Constant right-side identified [81] (byte) render_logo::line#6 ← ++ (const byte) render_logo::line#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$22 = $28*render_logo::line#5
Constant (const byte) render_logo::line#6 = ++render_logo::line#5
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [82] if((const byte) render_logo::line#6==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte) $28*(const byte) render_logo::line#5 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN#0 in [78] (byte*~) render_logo::$21 ← (const byte*) SCREEN#0 + (const byte) render_logo::$22
Simplifying expression containing zero render_logo::logo_idx#11 in [79] (byte~) render_logo::$23 ← (byte) render_logo::logo_idx#11 + (const byte) render_logo::$22
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_logo::$22
Successful SSA optimization PassNEliminateUnusedVars
Alias (byte) render_logo::logo_idx#11 = (byte~) render_logo::$23 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) render_logo::$21 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24_1 tails: render_logo::@24_1 blocks: render_logo::@24_1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#49 (const byte) render_logo::line#6
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [83] if((byte) render_logo::line#50==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [78] (byte~) render_logo::$71 ← (byte) $28 * (const byte) render_logo::line#6
Constant right-side identified [82] (byte) render_logo::line#50 ← ++ (const byte) render_logo::line#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$71 = $28*render_logo::line#6
Constant (const byte) render_logo::line#50 = ++render_logo::line#6
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [83] if((const byte) render_logo::line#50==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [77] (byte*~) render_logo::$72 ← (const byte*) SCREEN#0 + (const byte) render_logo::$71
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$72 = SCREEN#0+render_logo::$71
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24_2 tails: render_logo::@24_2 blocks: render_logo::@24_2 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#51 (const byte) render_logo::line#50
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [85] if((byte) render_logo::line#52==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [80] (byte~) render_logo::$74 ← (byte) $28 * (const byte) render_logo::line#50
Constant right-side identified [84] (byte) render_logo::line#52 ← ++ (const byte) render_logo::line#50
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$74 = $28*render_logo::line#50
Constant (const byte) render_logo::line#52 = ++render_logo::line#50
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [85] if((const byte) render_logo::line#52==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [79] (byte*~) render_logo::$75 ← (const byte*) SCREEN#0 + (const byte) render_logo::$74
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$75 = SCREEN#0+render_logo::$74
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24_3 tails: render_logo::@24_3 blocks: render_logo::@24_3 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#53 (const byte) render_logo::line#52
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [87] if((byte) render_logo::line#54==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [82] (byte~) render_logo::$77 ← (byte) $28 * (const byte) render_logo::line#52
Constant right-side identified [86] (byte) render_logo::line#54 ← ++ (const byte) render_logo::line#52
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$77 = $28*render_logo::line#52
Constant (const byte) render_logo::line#54 = ++render_logo::line#52
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [87] if((const byte) render_logo::line#54==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [81] (byte*~) render_logo::$78 ← (const byte*) SCREEN#0 + (const byte) render_logo::$77
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$78 = SCREEN#0+render_logo::$77
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24_4 tails: render_logo::@24_4 blocks: render_logo::@24_4 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#55 (const byte) render_logo::line#54
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [89] if((byte) render_logo::line#56==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [84] (byte~) render_logo::$80 ← (byte) $28 * (const byte) render_logo::line#54
Constant right-side identified [88] (byte) render_logo::line#56 ← ++ (const byte) render_logo::line#54
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$80 = $28*render_logo::line#54
Constant (const byte) render_logo::line#56 = ++render_logo::line#54
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [89] if((const byte) render_logo::line#56==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Constant right-side identified [83] (byte*~) render_logo::$81 ← (const byte*) SCREEN#0 + (const byte) render_logo::$80
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$81 = SCREEN#0+render_logo::$80
Successful SSA optimization Pass2ConstantIdentification
Unrolling loop Loop head: render_logo::@24_5 tails: render_logo::@24_5 blocks: render_logo::@24_5 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values (byte) render_logo::line#57 (const byte) render_logo::line#56
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [91] if((byte) render_logo::line#58==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [86] (byte~) render_logo::$83 ← (byte) $28 * (const byte) render_logo::line#56
Constant right-side identified [90] (byte) render_logo::line#58 ← ++ (const byte) render_logo::line#56
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_logo::$83 = $28*render_logo::line#56
Constant (const byte) render_logo::line#58 = ++render_logo::line#56
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (render_logo::@24_5) in block render_logo::@24_6
if() condition always true - replacing block destination [91] if((const byte) render_logo::line#58==(byte) 6) goto render_logo::@25
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) render_logo::line#58
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) render_logo::line#59 from unused block render_logo::@24_6
Eliminating variable (byte~) render_logo::$86 from unused block render_logo::@24_6
Eliminating variable (byte*~) render_logo::$87 from unused block render_logo::@24_6
Eliminating variable (byte~) render_logo::$88 from unused block render_logo::@24_6
Eliminating variable (byte) render_logo::line#60 from unused block render_logo::@24_6
Removing unused block render_logo::@24_6
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant right-side identified [85] (byte*~) render_logo::$84 ← (const byte*) SCREEN#0 + (const byte) render_logo::$83
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) render_logo::$84 = SCREEN#0+render_logo::$83
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [37] (byte) render_logo::logo_start#0 ← (byte)(signed byte) render_logo::x_char#0 keeping render_logo::x_char#0
Inlining Noop Cast [164] (signed word) sin16s::sinx#0 ← (signed word)(word) sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [166] (signed word~) sin16s::$19 ← (signed word)(word) sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [208] (byte*~) memset::$2 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [210] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [64] (byte) render_logo::logo_idx#1 ← (byte)(signed byte~) render_logo::$17 keeping render_logo::logo_idx#1
Inlining Noop Cast [101] (signed word~) sin16s_gen2::$8 ← (signed word)(word~) sin16s_gen2::$6 keeping sin16s_gen2::$8
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [21] (word~) loop::$5 ← (word) xsin_idx#11 * (const byte) SIZEOF_SIGNED_WORD
Rewriting division to use shift [34] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 / (signed byte) 8
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::divisor#1
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const word) mul16u::b#0
Inlining constant with var siblings (const dword) sin16s_gen2::x#0
Inlining constant with var siblings (const word) sin16s_gen2::i#0
Inlining constant with var siblings (const signed word*) sin16s_gen2::sintab#1
Inlining constant with var siblings (const byte) sin16s::isUpper#0
Inlining constant with var siblings (const byte) sin16s::isUpper#1
Inlining constant with var siblings (const byte) mulu16_sel::select#0
Inlining constant with var siblings (const byte) mulu16_sel::select#1
Inlining constant with var siblings (const word) mulu16_sel::v2#2
Inlining constant with var siblings (const byte) mulu16_sel::select#2
Inlining constant with var siblings (const byte) mulu16_sel::select#3
Inlining constant with var siblings (const byte) mulu16_sel::select#4
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) main::ch#0
Inlining constant with var siblings (const byte) render_logo::screen_idx#1
Inlining constant with var siblings (const byte) render_logo::screen_idx#2
Inlining constant with different constant siblings (const byte) render_logo::line#1
Inlining constant with var siblings (const byte) render_logo::logo_idx#2
Inlining constant with different constant siblings (const byte) render_logo::line#3
Inlining constant with different constant siblings (const byte) render_logo::line#5
Inlining constant with different constant siblings (const byte) render_logo::line#7
Inlining constant with different constant siblings (const byte) render_logo::line#2
Inlining constant with different constant siblings (const byte) render_logo::line#4
Inlining constant with different constant siblings (const byte) render_logo::line#16
Inlining constant with different constant siblings (const byte) render_logo::line#18
Inlining constant with different constant siblings (const byte) render_logo::line#20
Inlining constant with different constant siblings (const byte) render_logo::line#22
Inlining constant with different constant siblings (const byte) render_logo::line#14
Inlining constant with different constant siblings (const byte) render_logo::line#28
Inlining constant with different constant siblings (const byte) render_logo::line#30
Inlining constant with different constant siblings (const byte) render_logo::line#32
Inlining constant with different constant siblings (const byte) render_logo::line#8
Inlining constant with different constant siblings (const byte) render_logo::line#38
Inlining constant with different constant siblings (const byte) render_logo::line#40
Inlining constant with different constant siblings (const byte) render_logo::line#42
Inlining constant with different constant siblings (const byte) render_logo::line#44
Inlining constant with different constant siblings (const byte) render_logo::line#6
Inlining constant with different constant siblings (const byte) render_logo::line#50
Inlining constant with different constant siblings (const byte) render_logo::line#52
Inlining constant with different constant siblings (const byte) render_logo::line#54
Inlining constant with different constant siblings (const byte) render_logo::line#56
Inlining constant with var siblings (const word) xsin_idx#16
Inlining constant with var siblings (const word) xsin_idx#4
Constant inlined render_logo::line#56 = ++++++++++(byte) 0
Constant inlined divr16u::rem#3 = (byte) 0
Constant inlined render_logo::$30 = (const byte*) SCREEN#0+(byte) $28*++(byte) 0
Constant inlined render_logo::line#52 = ++++++(byte) 0
Constant inlined render_logo::$32 = (const byte*) SCREEN#0+(byte) $28*++(byte) 0
Constant inlined render_logo::line#54 = ++++++++(byte) 0
Constant inlined render_logo::$31 = (byte) $28*++(byte) 0
Constant inlined sin16s::isUpper#0 = (byte) 0
Constant inlined render_logo::line#50 = ++++(byte) 0
Constant inlined mulu16_sel::select#4 = (byte) 0
Constant inlined mulu16_sel::select#2 = (byte) 1
Constant inlined mulu16_sel::select#3 = (byte) 0
Constant inlined mulu16_sel::select#0 = (byte) 0
Constant inlined sin16s::isUpper#1 = (byte) 1
Constant inlined mulu16_sel::select#1 = (byte) 1
Constant inlined render_logo::$34 = (byte) $28*++++(byte) 0
Constant inlined render_logo::$35 = (const byte*) SCREEN#0+(byte) $28*++++(byte) 0
Constant inlined render_logo::$38 = (const byte*) SCREEN#0+(byte) $28*++++++(byte) 0
Constant inlined render_logo::$37 = (byte) $28*++++++(byte) 0
Constant inlined main::ch#0 = (byte) 0
Constant inlined render_logo::$41 = (const byte*) SCREEN#0+(byte) $28*++++++++(byte) 0
Constant inlined render_logo::$40 = (byte) $28*++++++++(byte) 0
Constant inlined render_logo::$43 = (byte) $28*++++++++++(byte) 0
Constant inlined sin16s_gen2::wavelength#0 = (const word) XSIN_SIZE#0
Constant inlined main::toD0181_$7#0 = >(word)(const byte*) LOGO#0/(byte) 4&(byte) $f
Constant inlined xsin_idx#16 = (byte) 0
Constant inlined main::toD0181_$3#0 = >(word)(const byte*) SCREEN#0&(word) $3fff*(byte) 4
Constant inlined sin16s_gen2::sintab#1 = (const signed word[XSIN_SIZE#0]) xsin#0
Constant inlined render_logo::$44 = (const byte*) SCREEN#0+(byte) $28*++++++++++(byte) 0
Constant inlined memset::c#0 = (const byte) BLACK#0
Constant inlined render_logo::$49 = (byte) $28*++++(byte) 0
Constant inlined memset::c#1 = (const byte) WHITE#0|(byte) 8
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN#0
Constant inlined render_logo::$50 = (const byte*) SCREEN#0+(byte) $28*++++(byte) 0
Constant inlined render_logo::$52 = (const byte*) SCREEN#0+(byte) $28*++++++(byte) 0
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined render_logo::$51 = (byte) $28*++++++(byte) 0
Constant inlined render_logo::$54 = (const byte*) SCREEN#0+(byte) $28*++++++++(byte) 0
Constant inlined render_logo::$53 = (byte) $28*++++++++(byte) 0
Constant inlined sin16s_gen2::x#0 = (byte) 0
Constant inlined render_logo::$56 = (const byte*) SCREEN#0+(byte) $28*++++++++++(byte) 0
Constant inlined render_logo::$55 = (byte) $28*++++++++++(byte) 0
Constant inlined render_logo::screen_idx#1 = (byte) 0
Constant inlined render_logo::$59 = (byte) $28*++(byte) 0
Constant inlined render_logo::screen_idx#2 = (byte) 0
Constant inlined render_logo::$61 = (byte) $28*++++(byte) 0
Constant inlined render_logo::$60 = (const byte*) SCREEN#0+(byte) $28*++(byte) 0
Constant inlined render_logo::$63 = (byte) $28*++++++(byte) 0
Constant inlined render_logo::$62 = (const byte*) SCREEN#0+(byte) $28*++++(byte) 0
Constant inlined render_logo::$65 = (byte) $28*++++++++(byte) 0
Constant inlined render_logo::$64 = (const byte*) SCREEN#0+(byte) $28*++++++(byte) 0
Constant inlined main::toD0181_$0#0 = (word)(const byte*) SCREEN#0
Constant inlined divr16u::dividend#1 = >(const dword) PI2_u4f28#0
Constant inlined divr16u::dividend#2 = <(const dword) PI2_u4f28#0
Constant inlined main::toD0181_$4#0 = (word)(const byte*) LOGO#0
Constant inlined render_logo::line#2 = ++(byte) 0
Constant inlined mulu16_sel::v2#2 = (word)(number) $10000/(number) 6
Constant inlined render_logo::line#1 = (byte) 0
Constant inlined render_logo::$67 = (byte) $28*++++++++++(byte) 0
Constant inlined render_logo::line#4 = ++(byte) 0
Constant inlined render_logo::$66 = (const byte*) SCREEN#0+(byte) $28*++++++++(byte) 0
Constant inlined render_logo::line#3 = (byte) 0
Constant inlined render_logo::line#6 = ++(byte) 0
Constant inlined render_logo::$68 = (const byte*) SCREEN#0+(byte) $28*++++++++++(byte) 0
Constant inlined render_logo::line#5 = (byte) 0
Constant inlined render_logo::line#8 = ++(byte) 0
Constant inlined render_logo::line#7 = (byte) 0
Constant inlined render_logo::$9 = (const byte*) SCREEN#0
Constant inlined render_logo::$72 = (const byte*) SCREEN#0+(byte) $28*++(byte) 0
Constant inlined render_logo::line#14 = ++++(byte) 0
Constant inlined render_logo::$71 = (byte) $28*++(byte) 0
Constant inlined sin16s_gen2::i#0 = (byte) 0
Constant inlined render_logo::$74 = (byte) $28*++++(byte) 0
Constant inlined render_logo::$75 = (const byte*) SCREEN#0+(byte) $28*++++(byte) 0
Constant inlined memset::num#1 = (word) $3e8
Constant inlined memset::num#0 = (word) $3e8
Constant inlined mul16u::b#0 = (word)(const signed word) sin16s_gen2::ampl#0
Constant inlined render_logo::$78 = (const byte*) SCREEN#0+(byte) $28*++++++(byte) 0
Constant inlined render_logo::$77 = (byte) $28*++++++(byte) 0
Constant inlined mul16s::$10 = (word)(const signed word) sin16s_gen2::ampl#0
Constant inlined render_logo::$81 = (const byte*) SCREEN#0+(byte) $28*++++++++(byte) 0
Constant inlined mul16s::b#0 = (const signed word) sin16s_gen2::ampl#0
Constant inlined render_logo::$80 = (byte) $28*++++++++(byte) 0
Constant inlined render_logo::$83 = (byte) $28*++++++++++(byte) 0
Constant inlined render_logo::$84 = (const byte*) SCREEN#0+(byte) $28*++++++++++(byte) 0
Constant inlined render_logo::line#20 = ++++++++(byte) 0
Constant inlined render_logo::line#22 = ++++++++++(byte) 0
Constant inlined main::toD0181_$1#0 = (word)(const byte*) SCREEN#0&(word) $3fff
Constant inlined main::toD0181_$5#0 = >(word)(const byte*) LOGO#0
Constant inlined render_logo::line#16 = ++++(byte) 0
Constant inlined render_logo::line#18 = ++++++(byte) 0
Constant inlined render_logo::logo_idx#2 = (byte) 0
Constant inlined main::toD0181_gfx#0 = (const byte*) LOGO#0
Constant inlined render_logo::line#30 = ++++++++(byte) 0
Constant inlined render_logo::line#32 = ++++++++++(byte) 0
Constant inlined xsin_idx#4 = (byte) 0
Constant inlined div32u16u::dividend#0 = (const dword) PI2_u4f28#0
Constant inlined divr16u::quotient#0 = (byte) 0
Constant inlined mul16u::res#0 = (byte) 0
Constant inlined render_logo::$13 = (const byte*) SCREEN#0
Constant inlined divr16u::divisor#1 = (const word) XSIN_SIZE#0
Constant inlined divr16u::divisor#0 = (const word) XSIN_SIZE#0
Constant inlined render_logo::line#28 = ++++++(byte) 0
Constant inlined memset::str#1 = (void*)(const byte*) COLS#0
Constant inlined memset::str#0 = (void*)(const byte*) SCREEN#0
Constant inlined render_logo::line#42 = ++++++++(byte) 0
Constant inlined render_logo::$21 = (const byte*) SCREEN#0
Constant inlined render_logo::line#44 = ++++++++++(byte) 0
Constant inlined render_logo::line#40 = ++++++(byte) 0
Constant inlined main::toD0181_$6#0 = >(word)(const byte*) LOGO#0/(byte) 4
Constant inlined main::toD0181_$2#0 = (word)(const byte*) SCREEN#0&(word) $3fff*(byte) 4
Constant inlined div32u16u::divisor#0 = (const word) XSIN_SIZE#0
Constant inlined render_logo::$27 = (const byte*) SCREEN#0
Constant inlined render_logo::line#38 = ++++(byte) 0
Constant inlined render_logo::$29 = (byte) $28*++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Identical Phi Values (word) divr16u::divisor#6 (const word) XSIN_SIZE#0
Identical Phi Values (word) memset::num#2 (word) $3e8
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [202] if((word) $3e8<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Added new block during phi lifting main::@8(between main::@1 and main::@1)
Added new block during phi lifting loop::@16(between loop::@15 and loop::@11)
Added new block during phi lifting render_logo::@37(between render_logo::@21 and render_logo::@29)
Added new block during phi lifting sin16s_gen2::@6(between sin16s_gen2::@5 and sin16s_gen2::@1)
Added new block during phi lifting mul16s::@7(between mul16s::@6 and mul16s::@1)
Added new block during phi lifting mul16u::@10(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting sin16s::@13(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@13 ) during phi lifting.
Added new block during phi lifting sin16s::@14(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@15(between sin16s::@12 and sin16s::@3)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting memset::@6(between memset::@4 and memset::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @6
Adding NOP phi() at start of @17
Adding NOP phi() at start of @29
Adding NOP phi() at start of @31
Adding NOP phi() at start of @32
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of loop
Adding NOP phi() at start of loop::@10
Adding NOP phi() at start of render_logo::@3
Adding NOP phi() at start of render_logo::@13
Adding NOP phi() at start of render_logo::@5
Adding NOP phi() at start of render_logo::@30
Adding NOP phi() at start of render_logo::@22
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of mul16u::@3
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to memset:18 memset:20 sin16s_gen2:27 loop:29 
Calls in [loop] to render_logo:41 
Calls in [sin16s_gen2] to div32u16u:121 sin16s:126 mul16s:129 
Calls in [mul16s] to mul16u:144 
Calls in [sin16s] to mulu16_sel:188 mulu16_sel:195 mulu16_sel:200 mulu16_sel:208 mulu16_sel:215 
Calls in [mulu16_sel] to mul16u:233 
Calls in [div32u16u] to divr16u:240 divr16u:245 

Created 38 initial phi equivalence classes
Coalesced [32] main::ch#3 ← main::ch#1
Coalesced [47] xsin_idx#27 ← xsin_idx#19
Coalesced [48] xsin_idx#28 ← xsin_idx#3
Coalesced [59] render_logo::screen_idx#26 ← render_logo::screen_idx#18
Coalesced [77] render_logo::screen_idx#25 ← render_logo::screen_idx#4
Coalesced [78] render_logo::logo_idx#13 ← render_logo::logo_idx#3
Coalesced [87] render_logo::screen_idx#24 ← render_logo::screen_idx#3
Coalesced [92] render_logo::screen_idx#28 ← render_logo::screen_idx#21
Coalesced [103] render_logo::screen_idx#29 ← render_logo::screen_idx#6
Coalesced [118] render_logo::logo_idx#15 ← render_logo::logo_idx#4
Coalesced [119] render_logo::screen_idx#27 ← render_logo::screen_idx#5
Coalesced [139] sin16s_gen2::x#5 ← sin16s_gen2::x#1
Coalesced [140] sin16s_gen2::sintab#7 ← sin16s_gen2::sintab#0
Coalesced [141] sin16s_gen2::i#5 ← sin16s_gen2::i#1
Coalesced [143] mul16u::a#8 ← mul16u::a#1
Coalesced [151] mul16s::m#7 ← mul16s::m#1
Coalesced [155] mul16s::m#8 ← mul16s::m#0
Coalesced [157] mul16u::a#10 ← mul16u::a#6
Coalesced [158] mul16u::mb#7 ← mul16u::mb#0
Coalesced [166] mul16u::res#9 ← mul16u::res#1
Coalesced [170] mul16u::a#11 ← mul16u::a#0
Coalesced [171] mul16u::res#7 ← mul16u::res#6
Coalesced [172] mul16u::mb#8 ← mul16u::mb#1
Coalesced (already) [173] mul16u::res#8 ← mul16u::res#2
Coalesced [176] sin16s::x#9 ← sin16s::x#1
Coalesced [180] sin16s::x#11 ← sin16s::x#2
Coalesced [186] mulu16_sel::v1#8 ← mulu16_sel::v1#0
Coalesced [187] mulu16_sel::v2#8 ← mulu16_sel::v2#0
Coalesced [193] mulu16_sel::v1#9 ← mulu16_sel::v1#1
Coalesced [194] mulu16_sel::v2#9 ← mulu16_sel::v2#1
Coalesced [199] mulu16_sel::v1#10 ← mulu16_sel::v1#2
Coalesced [206] mulu16_sel::v1#6 ← mulu16_sel::v1#3
Coalesced [207] mulu16_sel::v2#6 ← mulu16_sel::v2#3
Coalesced [213] mulu16_sel::v1#7 ← mulu16_sel::v1#4
Coalesced [214] mulu16_sel::v2#7 ← mulu16_sel::v2#4
Coalesced [222] sin16s::return#6 ← sin16s::sinx#1
Coalesced [226] sin16s::x#10 ← sin16s::x#4
Coalesced [227] sin16s::x#8 ← sin16s::x#0
Coalesced [231] mul16u::mb#6 ← mul16u::b#1
Coalesced [232] mul16u::a#9 ← mul16u::a#2
Coalesced [244] divr16u::rem#12 ← divr16u::rem#4
Coalesced [251] divr16u::rem#13 ← divr16u::rem#10
Coalesced [252] divr16u::dividend#9 ← divr16u::dividend#5
Coalesced [259] divr16u::rem#16 ← divr16u::rem#1
Coalesced [266] divr16u::rem#18 ← divr16u::rem#2
Coalesced [267] divr16u::return#8 ← divr16u::quotient#2
Coalesced [273] divr16u::rem#14 ← divr16u::rem#11
Coalesced [274] divr16u::dividend#10 ← divr16u::dividend#0
Coalesced [275] divr16u::quotient#9 ← divr16u::return#0
Coalesced [276] divr16u::i#7 ← divr16u::i#1
Coalesced [277] divr16u::rem#17 ← divr16u::rem#6
Coalesced [278] divr16u::return#7 ← divr16u::quotient#1
Coalesced [279] divr16u::rem#15 ← divr16u::rem#0
Coalesced [289] memset::dst#4 ← memset::dst#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block (label) @6
Culled Empty Block (label) @17
Culled Empty Block (label) @29
Culled Empty Block (label) @32
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) loop::@10
Culled Empty Block (label) render_logo::@3
Culled Empty Block (label) render_logo::@6
Culled Empty Block (label) render_logo::@13
Culled Empty Block (label) render_logo::@5
Culled Empty Block (label) render_logo::@37
Culled Empty Block (label) render_logo::@30
Culled Empty Block (label) render_logo::@22
Culled Empty Block (label) sin16s_gen2::@6
Culled Empty Block (label) mul16s::@7
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) mul16u::@10
Culled Empty Block (label) sin16s::@14
Culled Empty Block (label) sin16s::@13
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memset::@6
Renumbering block @28 to @1
Renumbering block @31 to @2
Renumbering block div32u16u::@2 to div32u16u::@1
Renumbering block div32u16u::@3 to div32u16u::@2
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@7 to mul16u::@4
Renumbering block mul16s::@6 to mul16s::@4
Renumbering block sin16s_gen2::@3 to sin16s_gen2::@2
Renumbering block sin16s_gen2::@4 to sin16s_gen2::@3
Renumbering block sin16s_gen2::@5 to sin16s_gen2::@4
Renumbering block sin16s::@8 to sin16s::@7
Renumbering block sin16s::@9 to sin16s::@8
Renumbering block sin16s::@10 to sin16s::@9
Renumbering block sin16s::@11 to sin16s::@10
Renumbering block sin16s::@12 to sin16s::@11
Renumbering block sin16s::@15 to sin16s::@12
Renumbering block mulu16_sel::@2 to mulu16_sel::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@6 to main::@5
Renumbering block loop::@4 to loop::@2
Renumbering block loop::@6 to loop::@3
Renumbering block loop::@11 to loop::@4
Renumbering block loop::@15 to loop::@5
Renumbering block loop::@16 to loop::@6
Renumbering block render_logo::@4 to render_logo::@2
Renumbering block render_logo::@7 to render_logo::@3
Renumbering block render_logo::@8 to render_logo::@4
Renumbering block render_logo::@12 to render_logo::@5
Renumbering block render_logo::@15 to render_logo::@6
Renumbering block render_logo::@16 to render_logo::@7
Renumbering block render_logo::@21 to render_logo::@8
Renumbering block render_logo::@24 to render_logo::@9
Renumbering block render_logo::@25 to render_logo::@10
Renumbering block render_logo::@29 to render_logo::@11
Renumbering block render_logo::@32 to render_logo::@12
Renumbering block render_logo::@33 to render_logo::@13
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of loop
Adding NOP phi() at start of loop::@6
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of div32u16u

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0
  [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0)
  [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [10] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0
  [13] call memset 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] phi()
  [15] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  [16] (byte) main::ch#2 ← phi( main::@1/(byte) main::ch#1 main::@4/(byte) 0 )
  [17] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2
  [18] (byte) main::ch#1 ← ++ (byte) main::ch#2
  [19] if((byte) main::ch#1!=(byte) $f0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [20] phi()
  [21] call sin16s_gen2 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [22] phi()
  [23] call loop 
  to:main::@return
main::@return: scope:[main]  from main::@5
  [24] return 
  to:@return
loop: scope:[loop]  from main::@5
  [25] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@4
  [26] (word) xsin_idx#11 ← phi( loop/(byte) 0 loop::@4/(word) xsin_idx#19 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [28] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1
  [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5
  [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1)
  [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0
  [33] call render_logo 
  to:loop::@5
loop::@5: scope:[loop]  from loop::@3
  [34] (word) xsin_idx#3 ← ++ (word) xsin_idx#11
  [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6
  to:loop::@4
loop::@6: scope:[loop]  from loop::@5
  [36] phi()
  to:loop::@4
loop::@4: scope:[loop]  from loop::@5 loop::@6
  [37] (word) xsin_idx#19 ← phi( loop::@5/(byte) 0 loop::@6/(word) xsin_idx#3 )
  [38] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:loop::@1
render_logo: scope:[render_logo]  from loop::@3
  [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0
  [40] (byte~) render_logo::$1 ← (byte~) render_logo::$0 & (byte) 7
  [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1
  [42] *((const byte*) D016#0) ← (byte~) render_logo::$2
  [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3
  [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3
  [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1
  to:render_logo::@2
render_logo::@2: scope:[render_logo]  from render_logo render_logo::@4
  [46] (byte) render_logo::screen_idx#18 ← phi( render_logo/(byte) 0 render_logo::@4/(byte) render_logo::screen_idx#3 )
  [47] if((byte) render_logo::screen_idx#18!=(byte)(signed byte) render_logo::x_char#0) goto render_logo::@3
  to:render_logo::@5
render_logo::@5: scope:[render_logo]  from render_logo::@2 render_logo::@7
  [48] (byte) render_logo::logo_idx#10 ← phi( render_logo::@7/(byte) render_logo::logo_idx#3 render_logo::@2/(byte) 0 )
  [48] (byte) render_logo::screen_idx#10 ← phi( render_logo::@7/(byte) render_logo::screen_idx#4 render_logo::@2/(byte) render_logo::screen_idx#18 )
  [49] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@6
  to:render_logo::@return
render_logo::@return: scope:[render_logo]  from render_logo::@11 render_logo::@5
  [50] return 
  to:@return
render_logo::@6: scope:[render_logo]  from render_logo::@5
  [51] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#10) ← (byte) render_logo::logo_idx#10
  to:render_logo::@15_1
render_logo::@15_1: scope:[render_logo]  from render_logo::@6
  [52] (byte~) render_logo::$33 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 1
  [53] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$33
  to:render_logo::@15_2
render_logo::@15_2: scope:[render_logo]  from render_logo::@15_1
  [54] (byte~) render_logo::$36 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 2
  [55] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$36
  to:render_logo::@15_3
render_logo::@15_3: scope:[render_logo]  from render_logo::@15_2
  [56] (byte~) render_logo::$39 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 3
  [57] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$39
  to:render_logo::@15_4
render_logo::@15_4: scope:[render_logo]  from render_logo::@15_3
  [58] (byte~) render_logo::$42 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 4
  [59] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$42
  to:render_logo::@15_5
render_logo::@15_5: scope:[render_logo]  from render_logo::@15_4
  [60] (byte~) render_logo::$45 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 5
  [61] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$45
  to:render_logo::@7
render_logo::@7: scope:[render_logo]  from render_logo::@15_5
  [62] (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#10
  [63] (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#10
  to:render_logo::@5
render_logo::@3: scope:[render_logo]  from render_logo::@2
  [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@7_1
render_logo::@7_1: scope:[render_logo]  from render_logo::@3
  [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@7_2
render_logo::@7_2: scope:[render_logo]  from render_logo::@7_1
  [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@7_3
render_logo::@7_3: scope:[render_logo]  from render_logo::@7_2
  [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@7_4
render_logo::@7_4: scope:[render_logo]  from render_logo::@7_3
  [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@7_5
render_logo::@7_5: scope:[render_logo]  from render_logo::@7_4
  [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@4
render_logo::@4: scope:[render_logo]  from render_logo::@7_5
  [70] (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#18
  to:render_logo::@2
render_logo::@1: scope:[render_logo]  from render_logo
  [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0
  [72] (byte~) render_logo::logo_idx#14 ← (byte)(signed byte) render_logo::logo_idx#1
  to:render_logo::@8
render_logo::@8: scope:[render_logo]  from render_logo::@1 render_logo::@10
  [73] (byte) render_logo::screen_idx#21 ← phi( render_logo::@1/(byte) 0 render_logo::@10/(byte) render_logo::screen_idx#5 )
  [73] (byte) render_logo::logo_idx#11 ← phi( render_logo::@1/(byte~) render_logo::logo_idx#14 render_logo::@10/(byte) render_logo::logo_idx#4 )
  [74] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@9
  to:render_logo::@11
render_logo::@11: scope:[render_logo]  from render_logo::@13 render_logo::@8
  [75] (byte) render_logo::screen_idx#15 ← phi( render_logo::@8/(byte) render_logo::screen_idx#21 render_logo::@13/(byte) render_logo::screen_idx#6 )
  [76] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@12
  to:render_logo::@return
render_logo::@12: scope:[render_logo]  from render_logo::@11
  [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@32_1
render_logo::@32_1: scope:[render_logo]  from render_logo::@12
  [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@32_2
render_logo::@32_2: scope:[render_logo]  from render_logo::@32_1
  [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@32_3
render_logo::@32_3: scope:[render_logo]  from render_logo::@32_2
  [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@32_4
render_logo::@32_4: scope:[render_logo]  from render_logo::@32_3
  [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@32_5
render_logo::@32_5: scope:[render_logo]  from render_logo::@32_4
  [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@13
render_logo::@13: scope:[render_logo]  from render_logo::@32_5
  [83] (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#15
  to:render_logo::@11
render_logo::@9: scope:[render_logo]  from render_logo::@8
  [84] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#21) ← (byte) render_logo::logo_idx#11
  to:render_logo::@24_1
render_logo::@24_1: scope:[render_logo]  from render_logo::@9
  [85] (byte~) render_logo::$73 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 1
  [86] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$73
  to:render_logo::@24_2
render_logo::@24_2: scope:[render_logo]  from render_logo::@24_1
  [87] (byte~) render_logo::$76 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 2
  [88] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$76
  to:render_logo::@24_3
render_logo::@24_3: scope:[render_logo]  from render_logo::@24_2
  [89] (byte~) render_logo::$79 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 3
  [90] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$79
  to:render_logo::@24_4
render_logo::@24_4: scope:[render_logo]  from render_logo::@24_3
  [91] (byte~) render_logo::$82 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 4
  [92] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$82
  to:render_logo::@24_5
render_logo::@24_5: scope:[render_logo]  from render_logo::@24_4
  [93] (byte~) render_logo::$85 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 5
  [94] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$85
  to:render_logo::@10
render_logo::@10: scope:[render_logo]  from render_logo::@24_5
  [95] (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#21
  [96] (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#11
  to:render_logo::@8
sin16s_gen2: scope:[sin16s_gen2]  from main::@2
  [97] phi()
  [98] call div32u16u 
  [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen2::@2
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2
  [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@2 sin16s_gen2::@4
  [101] (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@2/(byte) 0 sin16s_gen2::@4/(word) sin16s_gen2::i#1 )
  [101] (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@2/(const signed word[XSIN_SIZE#0]) xsin#0 sin16s_gen2::@4/(signed word*) sin16s_gen2::sintab#0 )
  [101] (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@2/(byte) 0 sin16s_gen2::@4/(dword) sin16s_gen2::x#1 )
  [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  [103] call sin16s 
  [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  [106] call mul16s 
  [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@3
  [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
  [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5
  [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8
  [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0
  [113] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [115] return 
  to:@return
mul16s: scope:[mul16s]  from sin16s_gen2::@3
  [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0
  [117] call mul16u 
  [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0
  [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0
  [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [124] (dword) mul16s::m#4 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@4/(dword) mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [126] return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [127] (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mulu16_sel/(word) mul16u::a#2 )
  [127] (dword) mul16u::mb#0 ← phi( mul16s/(word)(const signed word) sin16s_gen2::ampl#0 mulu16_sel/(word) mul16u::b#1 )
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [128] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [128] (dword) mul16u::res#2 ← phi( mul16u/(byte) 0 mul16u::@3/(dword) mul16u::res#6 )
  [128] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@3/(word) mul16u::a#0 )
  [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [130] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
  [132] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [134] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [135] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1
  [136] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
sin16s: scope:[sin16s]  from sin16s_gen2::@1
  [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [139] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [139] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [142] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [147] call mulu16_sel 
  [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [152] call mulu16_sel 
  [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [156] call mulu16_sel 
  [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [162] call mulu16_sel 
  [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [167] call mulu16_sel 
  [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [172] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [174] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [175] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [177] (byte) mulu16_sel::select#5 ← phi( sin16s::@9/(byte) 0 sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 )
  [177] (word) mulu16_sel::v2#5 ← phi( sin16s::@9/(word) mulu16_sel::v2#3 sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 )
  [177] (word) mulu16_sel::v1#5 ← phi( sin16s::@9/(word) mulu16_sel::v1#3 sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 )
  [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  [180] call mul16u 
  [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [185] return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [186] phi()
  [187] call divr16u 
  [188] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [190] (word) divr16u::rem#4 ← (word) rem16u#1
  [191] call divr16u 
  [192] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [195] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [196] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@1/<(const dword) PI2_u4f28#0 )
  [196] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [197] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [197] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [197] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [197] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [198] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [203] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [209] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [209] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [212] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [213] return 
  to:@return
memset: scope:[memset]  from main::@3 main::@4
  [214] (byte) memset::c#3 ← phi( main::@3/(const byte) BLACK#0 main::@4/(const byte) WHITE#0|(byte) 8 )
  [214] (void*) memset::str#3 ← phi( main::@3/(void*)(const byte*) SCREEN#0 main::@4/(void*)(const byte*) COLS#0 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8
  [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@2
  [217] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#3 memset::@2/(byte*) memset::dst#1 )
  [218] *((byte*) memset::dst#2) ← (byte) memset::c#3
  [219] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [221] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL2
(byte*) BGCOL3
(byte) BLACK
(byte*) BORDERCOL
(byte*) COLS
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte*) LOGO
(dword) PI2_u4f28
(dword) PI_HALF_u4f28
(dword) PI_u4f28
(byte*) RASTER
(byte*) SCREEN
(byte) VIC_MCM
(byte) WHITE
(word) XSIN_SIZE
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 1.3333333333333333
(dword) div32u16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#3 5.0
(word) divr16u::dividend#5 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 4.0
(word) divr16u::rem#11 11.666666666666666
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 4.0
(word) divr16u::rem#5 24.0
(word) divr16u::rem#6 11.0
(word) divr16u::return
(word) divr16u::return#0 5.285714285714286
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(void()) loop()
(signed word*~) loop::$1 22.0
(word~) loop::$5 22.0
(signed word) loop::xpos
(signed word) loop::xpos#0 22.0
(void()) main()
(byte) main::ch
(byte) main::ch#1 16.5
(byte) main::ch#2 22.0
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#3 1.5714285714285714
(byte*) memset::dst
(byte*) memset::dst#1 16.5
(byte*) memset::dst#2 17.5
(byte*~) memset::dst#3 4.0
(byte*) memset::end
(byte*) memset::end#0 2.1666666666666665
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$16 4.0
(word~) mul16s::$9 4.0
(signed word) mul16s::a
(signed word) mul16s::a#0 2.6
(signed word) mul16s::b
(dword) mul16s::m
(dword) mul16s::m#0 2.0
(dword) mul16s::m#1 4.0
(dword) mul16s::m#4 4.0
(signed dword) mul16s::return
(signed dword) mul16s::return#0 4.333333333333333
(signed dword) mul16s::return#2 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 202.0
(word) mul16u::a
(word) mul16u::a#0 101.0
(word) mul16u::a#1 4.0
(word) mul16u::a#2 2.0
(word) mul16u::a#3 67.66666666666666
(word) mul16u::a#6 6.0
(word) mul16u::b
(word) mul16u::b#1 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 4.0
(dword) mul16u::mb#1 202.0
(dword) mul16u::mb#2 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 202.0
(dword) mul16u::res#2 43.85714285714286
(dword) mul16u::res#6 101.0
(dword) mul16u::return
(dword) mul16u::return#2 4.0
(dword) mul16u::return#3 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 4.0
(dword~) mulu16_sel::$1 4.0
(word) mulu16_sel::return
(word) mulu16_sel::return#0 4.0
(word) mulu16_sel::return#1 4.0
(word) mulu16_sel::return#10 4.0
(word) mulu16_sel::return#11 4.0
(word) mulu16_sel::return#12 1.714285714285714
(word) mulu16_sel::return#2 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 2.0
(word) mulu16_sel::v1#1 2.0
(word) mulu16_sel::v1#2 4.0
(word) mulu16_sel::v1#3 2.0
(word) mulu16_sel::v1#4 2.0
(word) mulu16_sel::v1#5 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 4.0
(word) mulu16_sel::v2#1 4.0
(word) mulu16_sel::v2#3 4.0
(word) mulu16_sel::v2#4 4.0
(word) mulu16_sel::v2#5 5.0
(word) rem16u
(word) rem16u#1 0.8
(void()) render_logo((signed word) render_logo::xpos)
(byte~) render_logo::$0 4.0
(byte~) render_logo::$1 4.0
(byte~) render_logo::$2 4.0
(signed word~) render_logo::$3 2.0
(byte~) render_logo::$33 202.0
(byte~) render_logo::$36 202.0
(byte~) render_logo::$39 202.0
(byte~) render_logo::$42 202.0
(byte~) render_logo::$45 202.0
(byte~) render_logo::$73 202.0
(byte~) render_logo::$76 202.0
(byte~) render_logo::$79 202.0
(byte~) render_logo::$82 202.0
(byte~) render_logo::$85 202.0
(byte) render_logo::line
(byte) render_logo::logo_idx
(signed byte) render_logo::logo_idx#1 2.0
(byte) render_logo::logo_idx#10 57.714285714285715
(byte) render_logo::logo_idx#11 65.07142857142857
(byte~) render_logo::logo_idx#14 4.0
(byte) render_logo::logo_idx#3 202.0
(byte) render_logo::logo_idx#4 202.0
(byte) render_logo::logo_start
(byte) render_logo::screen_idx
(byte) render_logo::screen_idx#10 77.6923076923077
(byte) render_logo::screen_idx#15 126.25
(byte) render_logo::screen_idx#18 126.25
(byte) render_logo::screen_idx#21 69.92307692307692
(byte) render_logo::screen_idx#3 202.0
(byte) render_logo::screen_idx#4 101.0
(byte) render_logo::screen_idx#5 101.0
(byte) render_logo::screen_idx#6 202.0
(signed byte) render_logo::x_char
(signed byte) render_logo::x_char#0 0.36363636363636365
(signed word) render_logo::xpos
(signed word) render_logo::xpos#0 2.142857142857143
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 4.0
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 22.0
(signed word) sin16s::return#1 5.0
(signed word~) sin16s::return#5 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 0.3333333333333333
(word) sin16s::usinx#1 1.0
(dword) sin16s::x
(dword) sin16s::x#0 8.5
(dword) sin16s::x#1 4.0
(dword) sin16s::x#2 4.0
(dword) sin16s::x#4 5.0
(dword) sin16s::x#6 6.0
(word) sin16s::x1
(word) sin16s::x1#0 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 4.0
(word) sin16s::x3
(word) sin16s::x3#0 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 4.0
(word) sin16s::x4
(word) sin16s::x4#0 4.0
(word) sin16s::x5
(word) sin16s::x5#0 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$5 22.0
(word~) sin16s_gen2::$8 11.0
(signed word) sin16s_gen2::ampl
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 16.5
(word) sin16s_gen2::i#2 1.8333333333333333
(signed word) sin16s_gen2::max
(signed word) sin16s_gen2::min
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 5.5
(signed word*) sin16s_gen2::sintab#2 3.3000000000000003
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 0.8666666666666666
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 7.333333333333333
(dword) sin16s_gen2::x#2 3.0
(signed word[XSIN_SIZE#0]) xsin
(word) xsin_idx
(word) xsin_idx#11 4.125
(word) xsin_idx#19 11.0
(word) xsin_idx#3 11.0

Not consolidating phi with different size mul16u::mb#0 mul16u::b#1
Initial phi equivalence classes
[ main::ch#2 main::ch#1 ]
[ xsin_idx#11 xsin_idx#19 xsin_idx#3 ]
[ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
[ render_logo::logo_idx#10 render_logo::logo_idx#3 ]
[ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
[ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::str#3 ]
[ memset::c#3 ]
[ memset::dst#2 memset::dst#3 memset::dst#1 ]
Added variable loop::$5 to zero page equivalence class [ loop::$5 ]
Added variable loop::$1 to zero page equivalence class [ loop::$1 ]
Added variable loop::xpos#0 to zero page equivalence class [ loop::xpos#0 ]
Added variable render_logo::xpos#0 to zero page equivalence class [ render_logo::xpos#0 ]
Added variable render_logo::$0 to zero page equivalence class [ render_logo::$0 ]
Added variable render_logo::$1 to zero page equivalence class [ render_logo::$1 ]
Added variable render_logo::$2 to zero page equivalence class [ render_logo::$2 ]
Added variable render_logo::$3 to zero page equivalence class [ render_logo::$3 ]
Added variable render_logo::x_char#0 to zero page equivalence class [ render_logo::x_char#0 ]
Added variable render_logo::$33 to zero page equivalence class [ render_logo::$33 ]
Added variable render_logo::$36 to zero page equivalence class [ render_logo::$36 ]
Added variable render_logo::$39 to zero page equivalence class [ render_logo::$39 ]
Added variable render_logo::$42 to zero page equivalence class [ render_logo::$42 ]
Added variable render_logo::$45 to zero page equivalence class [ render_logo::$45 ]
Added variable render_logo::logo_idx#1 to zero page equivalence class [ render_logo::logo_idx#1 ]
Added variable render_logo::$73 to zero page equivalence class [ render_logo::$73 ]
Added variable render_logo::$76 to zero page equivalence class [ render_logo::$76 ]
Added variable render_logo::$79 to zero page equivalence class [ render_logo::$79 ]
Added variable render_logo::$82 to zero page equivalence class [ render_logo::$82 ]
Added variable render_logo::$85 to zero page equivalence class [ render_logo::$85 ]
Added variable div32u16u::return#2 to zero page equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen2::step#0 to zero page equivalence class [ sin16s_gen2::step#0 ]
Added variable sin16s::return#0 to zero page equivalence class [ sin16s::return#0 ]
Added variable mul16s::a#0 to zero page equivalence class [ mul16s::a#0 ]
Added variable mul16s::return#2 to zero page equivalence class [ mul16s::return#2 ]
Added variable sin16s_gen2::$5 to zero page equivalence class [ sin16s_gen2::$5 ]
Added variable sin16s_gen2::$8 to zero page equivalence class [ sin16s_gen2::$8 ]
Added variable mul16u::return#2 to zero page equivalence class [ mul16u::return#2 ]
Added variable mul16s::$9 to zero page equivalence class [ mul16s::$9 ]
Added variable mul16s::$16 to zero page equivalence class [ mul16s::$16 ]
Added variable mul16s::return#0 to zero page equivalence class [ mul16s::return#0 ]
Added variable mul16u::$1 to zero page equivalence class [ mul16u::$1 ]
Added variable sin16s::$4 to zero page equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to zero page equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to zero page equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to zero page equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to zero page equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to zero page equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to zero page equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to zero page equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to zero page equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to zero page equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to zero page equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to zero page equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to zero page equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to zero page equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to zero page equivalence class [ sin16s::usinx#1 ]
Added variable mul16u::return#3 to zero page equivalence class [ mul16u::return#3 ]
Added variable mulu16_sel::$0 to zero page equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to zero page equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to zero page equivalence class [ mulu16_sel::return#12 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to zero page equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to zero page equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to zero page equivalence class [ div32u16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable memset::end#0 to zero page equivalence class [ memset::end#0 ]
Complete equivalence classes
[ main::ch#2 main::ch#1 ]
[ xsin_idx#11 xsin_idx#19 xsin_idx#3 ]
[ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
[ render_logo::logo_idx#10 render_logo::logo_idx#3 ]
[ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
[ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ memset::str#3 ]
[ memset::c#3 ]
[ memset::dst#2 memset::dst#3 memset::dst#1 ]
[ loop::$5 ]
[ loop::$1 ]
[ loop::xpos#0 ]
[ render_logo::xpos#0 ]
[ render_logo::$0 ]
[ render_logo::$1 ]
[ render_logo::$2 ]
[ render_logo::$3 ]
[ render_logo::x_char#0 ]
[ render_logo::$33 ]
[ render_logo::$36 ]
[ render_logo::$39 ]
[ render_logo::$42 ]
[ render_logo::$45 ]
[ render_logo::logo_idx#1 ]
[ render_logo::$73 ]
[ render_logo::$76 ]
[ render_logo::$79 ]
[ render_logo::$82 ]
[ render_logo::$85 ]
[ div32u16u::return#2 ]
[ sin16s_gen2::step#0 ]
[ sin16s::return#0 ]
[ mul16s::a#0 ]
[ mul16s::return#2 ]
[ sin16s_gen2::$5 ]
[ sin16s_gen2::$8 ]
[ mul16u::return#2 ]
[ mul16s::$9 ]
[ mul16s::$16 ]
[ mul16s::return#0 ]
[ mul16u::$1 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ mul16u::return#3 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ memset::end#0 ]
Allocated zp ZP_BYTE:2 [ main::ch#2 main::ch#1 ]
Allocated zp ZP_WORD:3 [ xsin_idx#11 xsin_idx#19 xsin_idx#3 ]
Allocated zp ZP_BYTE:5 [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
Allocated zp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ]
Allocated zp ZP_BYTE:7 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
Allocated zp ZP_BYTE:8 [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
Allocated zp ZP_DWORD:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated zp ZP_WORD:15 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
Allocated zp ZP_WORD:21 [ mul16u::b#1 ]
Allocated zp ZP_WORD:23 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
Allocated zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp ZP_DWORD:29 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp ZP_BYTE:33 [ sin16s::isUpper#2 ]
Allocated zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
Allocated zp ZP_WORD:42 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
Allocated zp ZP_BYTE:44 [ mulu16_sel::select#5 ]
Allocated zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
Allocated zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_WORD:52 [ memset::str#3 ]
Allocated zp ZP_BYTE:54 [ memset::c#3 ]
Allocated zp ZP_WORD:55 [ memset::dst#2 memset::dst#3 memset::dst#1 ]
Allocated zp ZP_WORD:57 [ loop::$5 ]
Allocated zp ZP_WORD:59 [ loop::$1 ]
Allocated zp ZP_WORD:61 [ loop::xpos#0 ]
Allocated zp ZP_WORD:63 [ render_logo::xpos#0 ]
Allocated zp ZP_BYTE:65 [ render_logo::$0 ]
Allocated zp ZP_BYTE:66 [ render_logo::$1 ]
Allocated zp ZP_BYTE:67 [ render_logo::$2 ]
Allocated zp ZP_WORD:68 [ render_logo::$3 ]
Allocated zp ZP_BYTE:70 [ render_logo::x_char#0 ]
Allocated zp ZP_BYTE:71 [ render_logo::$33 ]
Allocated zp ZP_BYTE:72 [ render_logo::$36 ]
Allocated zp ZP_BYTE:73 [ render_logo::$39 ]
Allocated zp ZP_BYTE:74 [ render_logo::$42 ]
Allocated zp ZP_BYTE:75 [ render_logo::$45 ]
Allocated zp ZP_BYTE:76 [ render_logo::logo_idx#1 ]
Allocated zp ZP_BYTE:77 [ render_logo::$73 ]
Allocated zp ZP_BYTE:78 [ render_logo::$76 ]
Allocated zp ZP_BYTE:79 [ render_logo::$79 ]
Allocated zp ZP_BYTE:80 [ render_logo::$82 ]
Allocated zp ZP_BYTE:81 [ render_logo::$85 ]
Allocated zp ZP_DWORD:82 [ div32u16u::return#2 ]
Allocated zp ZP_DWORD:86 [ sin16s_gen2::step#0 ]
Allocated zp ZP_WORD:90 [ sin16s::return#0 ]
Allocated zp ZP_WORD:92 [ mul16s::a#0 ]
Allocated zp ZP_DWORD:94 [ mul16s::return#2 ]
Allocated zp ZP_DWORD:98 [ sin16s_gen2::$5 ]
Allocated zp ZP_WORD:102 [ sin16s_gen2::$8 ]
Allocated zp ZP_DWORD:104 [ mul16u::return#2 ]
Allocated zp ZP_WORD:108 [ mul16s::$9 ]
Allocated zp ZP_WORD:110 [ mul16s::$16 ]
Allocated zp ZP_DWORD:112 [ mul16s::return#0 ]
Allocated zp ZP_BYTE:116 [ mul16u::$1 ]
Allocated zp ZP_DWORD:117 [ sin16s::$4 ]
Allocated zp ZP_WORD:121 [ sin16s::x1#0 ]
Allocated zp ZP_WORD:123 [ mulu16_sel::return#0 ]
Allocated zp ZP_WORD:125 [ sin16s::x2#0 ]
Allocated zp ZP_WORD:127 [ mulu16_sel::return#1 ]
Allocated zp ZP_WORD:129 [ sin16s::x3#0 ]
Allocated zp ZP_WORD:131 [ mulu16_sel::return#2 ]
Allocated zp ZP_WORD:133 [ sin16s::x3_6#0 ]
Allocated zp ZP_WORD:135 [ sin16s::usinx#0 ]
Allocated zp ZP_WORD:137 [ mulu16_sel::return#10 ]
Allocated zp ZP_WORD:139 [ sin16s::x4#0 ]
Allocated zp ZP_WORD:141 [ mulu16_sel::return#11 ]
Allocated zp ZP_WORD:143 [ sin16s::x5#0 ]
Allocated zp ZP_WORD:145 [ sin16s::x5_128#0 ]
Allocated zp ZP_WORD:147 [ sin16s::usinx#1 ]
Allocated zp ZP_DWORD:149 [ mul16u::return#3 ]
Allocated zp ZP_DWORD:153 [ mulu16_sel::$0 ]
Allocated zp ZP_DWORD:157 [ mulu16_sel::$1 ]
Allocated zp ZP_WORD:161 [ mulu16_sel::return#12 ]
Allocated zp ZP_WORD:163 [ divr16u::return#2 ]
Allocated zp ZP_WORD:165 [ div32u16u::quotient_hi#0 ]
Allocated zp ZP_WORD:167 [ divr16u::return#3 ]
Allocated zp ZP_WORD:169 [ div32u16u::quotient_lo#0 ]
Allocated zp ZP_DWORD:171 [ div32u16u::return#0 ]
Allocated zp ZP_BYTE:175 [ divr16u::$1 ]
Allocated zp ZP_BYTE:176 [ divr16u::$2 ]
Allocated zp ZP_WORD:177 [ rem16u#1 ]
Allocated zp ZP_WORD:179 [ memset::end#0 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label D016 = $d016
  .const VIC_MCM = $10
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const DARK_GREY = $b
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label LOGO = $2000
  .const XSIN_SIZE = $200
  .label rem16u = $b1
  .label xsin_idx = 3
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))     .for (var y=0; y<6	; y++)         .for (var x=0;x<40; x++)             .for(var cp=0; cp<8; cp++)                 .byte logoPic.getMulticolorByte(x,cp+y*8)  }}
  // [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
  // @2
b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
  // @end
bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>LOGO)/4&$f
    .label ch = 2
    // asm { sei  }
    sei
    // [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
    // [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BGCOL2
    // [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0) -- _deref_pbuc1=_deref_pbuc2 
    lda BGCOL2
    sta BGCOL
    // [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL3
    // [10] phi from main to main::toD0181 [phi:main->main::toD0181]
  toD0181_from_main:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp b3
    // main::@3
  b3:
    // [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM
    sta D016
    // [13] call memset 
    // [214] phi from main::@3 to memset [phi:main::@3->memset]
  memset_from_b3:
    // [214] phi (byte) memset::c#3 = (const byte) BLACK#0 [phi:main::@3->memset#0] -- vbuz1=vbuc1 
    lda #BLACK
    sta memset.c
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) SCREEN#0 [phi:main::@3->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta memset.str
    lda #>SCREEN
    sta memset.str+1
    jsr memset
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
    // main::@4
  b4:
    // [15] call memset 
    // [214] phi from main::@4 to memset [phi:main::@4->memset]
  memset_from_b4:
    // [214] phi (byte) memset::c#3 = (const byte) WHITE#0|(byte) 8 [phi:main::@4->memset#0] -- vbuz1=vbuc1 
    lda #WHITE|8
    sta memset.c
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) COLS#0 [phi:main::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta memset.str
    lda #>COLS
    sta memset.str+1
    jsr memset
    // [16] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [16] phi (byte) main::ch#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
    jmp b1
    // [16] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [16] phi (byte) main::ch#2 = (byte) main::ch#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [17] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy ch
    tya
    sta SCREEN,y
    // [18] (byte) main::ch#1 ← ++ (byte) main::ch#2 -- vbuz1=_inc_vbuz1 
    inc ch
    // [19] if((byte) main::ch#1!=(byte) $f0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$f0
    cmp ch
    bne b1_from_b1
    // [20] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [21] call sin16s_gen2 
    // [97] phi from main::@2 to sin16s_gen2 [phi:main::@2->sin16s_gen2]
  sin16s_gen2_from_b2:
    jsr sin16s_gen2
    // [22] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
    // main::@5
  b5:
    // [23] call loop 
    // [25] phi from main::@5 to loop [phi:main::@5->loop]
  loop_from_b5:
    jsr loop
    jmp breturn
    // main::@return
  breturn:
    // [24] return 
    rts
}
  // loop
loop: {
    .label _1 = $3b
    .label _5 = $39
    .label xpos = $3d
    // [26] phi from loop to loop::@1 [phi:loop->loop::@1]
  b1_from_loop:
    // [26] phi (word) xsin_idx#11 = (byte) 0 [phi:loop->loop::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    lda #>0
    sta xsin_idx+1
    jmp b1
    // loop::@1
  b1:
    jmp b2
  // Wait for the raster to reach the bottom of the screen
    // loop::@2
  b2:
    // [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    jmp b3
    // loop::@3
  b3:
    // [28] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda xsin_idx
    asl
    sta _5
    lda xsin_idx+1
    rol
    sta _5+1
    // [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5 -- pwsz1=pwsc1_plus_vwuz2 
    lda _5
    clc
    adc #<xsin
    sta _1
    lda _5+1
    adc #>xsin
    sta _1+1
    // [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_1),y
    sta xpos
    iny
    lda (_1),y
    sta xpos+1
    // [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0 -- vwsz1=vwsz2 
    lda xpos
    sta render_logo.xpos
    lda xpos+1
    sta render_logo.xpos+1
    // [33] call render_logo 
    jsr render_logo
    jmp b5
    // loop::@5
  b5:
    // [34] (word) xsin_idx#3 ← ++ (word) xsin_idx#11 -- vwuz1=_inc_vwuz1 
    inc xsin_idx
    bne !+
    inc xsin_idx+1
  !:
    // [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda xsin_idx+1
    cmp #>XSIN_SIZE
    bne b6_from_b5
    lda xsin_idx
    cmp #<XSIN_SIZE
    bne b6_from_b5
    // [37] phi from loop::@5 to loop::@4 [phi:loop::@5->loop::@4]
  b4_from_b5:
    // [37] phi (word) xsin_idx#19 = (byte) 0 [phi:loop::@5->loop::@4#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    lda #>0
    sta xsin_idx+1
    jmp b4
    // [36] phi from loop::@5 to loop::@6 [phi:loop::@5->loop::@6]
  b6_from_b5:
    jmp b6
    // loop::@6
  b6:
    // [37] phi from loop::@6 to loop::@4 [phi:loop::@6->loop::@4]
  b4_from_b6:
    // [37] phi (word) xsin_idx#19 = (word) xsin_idx#3 [phi:loop::@6->loop::@4#0] -- register_copy 
    jmp b4
    // loop::@4
  b4:
    // [38] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [26] phi from loop::@4 to loop::@1 [phi:loop::@4->loop::@1]
  b1_from_b4:
    // [26] phi (word) xsin_idx#11 = (word) xsin_idx#19 [phi:loop::@4->loop::@1#0] -- register_copy 
    jmp b1
}
  // render_logo
// render_logo(signed word zeropage($3f) xpos)
render_logo: {
    .label _0 = $41
    .label _1 = $42
    .label _2 = $43
    .label _3 = $44
    .label xpos = $3f
    .label x_char = $46
    .label logo_idx = $4c
    .label screen_idx = 5
    .label logo_idx_3 = 6
    .label screen_idx_5 = 8
    .label logo_idx_4 = 7
    .label screen_idx_6 = 8
    .label screen_idx_15 = 8
    .label logo_idx_10 = 6
    .label logo_idx_11 = 7
    .label screen_idx_21 = 8
    .label _33 = $47
    .label _36 = $48
    .label _39 = $49
    .label _42 = $4a
    .label _45 = $4b
    .label _73 = $4d
    .label _76 = $4e
    .label _79 = $4f
    .label _82 = $50
    .label _85 = $51
    .label logo_idx_14 = 7
    // [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0 -- vbuz1=_byte_vwsz2 
    lda xpos
    sta _0
    // [40] (byte~) render_logo::$1 ← (byte~) render_logo::$0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and _0
    sta _1
    // [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1 -- vbuz1=vbuc1_bor_vbuz2 
    lda #VIC_MCM
    ora _1
    sta _2
    // [42] *((const byte*) D016#0) ← (byte~) render_logo::$2 -- _deref_pbuc1=vbuz1 
    lda _2
    sta D016
    // [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3 -- vwsz1=vwsz2_ror_3 
    lda xpos+1
    cmp #$80
    ror
    sta _3+1
    lda xpos
    ror
    sta _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    // [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3 -- vbsz1=_sbyte_vwsz2 
    lda _3
    sta x_char
    // [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1 -- vwsz1_lt_0_then_la1 
    lda xpos+1
    bmi b1
    // [46] phi from render_logo to render_logo::@2 [phi:render_logo->render_logo::@2]
  b2_from_render_logo:
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) 0 [phi:render_logo->render_logo::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta screen_idx
    jmp b2
    // render_logo::@2
  b2:
    // [47] if((byte) render_logo::screen_idx#18!=(byte)(signed byte) render_logo::x_char#0) goto render_logo::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda screen_idx
    cmp x_char
    bne b3
    // [48] phi from render_logo::@2 to render_logo::@5 [phi:render_logo::@2->render_logo::@5]
  b5_from_b2:
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) 0 [phi:render_logo::@2->render_logo::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta logo_idx_10
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#18 [phi:render_logo::@2->render_logo::@5#1] -- register_copy 
    jmp b5
    // render_logo::@5
  b5:
    // [49] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp screen_idx
    bne b6
    jmp breturn
    // render_logo::@return
  breturn:
    // [50] return 
    rts
    // render_logo::@6
  b6:
    // [51] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#10) ← (byte) render_logo::logo_idx#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda logo_idx_10
    ldy screen_idx
    sta SCREEN,y
    jmp b15_1
    // render_logo::@15_1
  b15_1:
    // [52] (byte~) render_logo::$33 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 1 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_10
    axs #-[$28*1]
    stx _33
    // [53] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$33 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _33
    ldy screen_idx
    sta SCREEN+$28*1,y
    jmp b15_2
    // render_logo::@15_2
  b15_2:
    // [54] (byte~) render_logo::$36 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 2 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_10
    axs #-[$28*2]
    stx _36
    // [55] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$36 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _36
    ldy screen_idx
    sta SCREEN+$28*2,y
    jmp b15_3
    // render_logo::@15_3
  b15_3:
    // [56] (byte~) render_logo::$39 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 3 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_10
    axs #-[$28*3]
    stx _39
    // [57] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$39 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _39
    ldy screen_idx
    sta SCREEN+$28*3,y
    jmp b15_4
    // render_logo::@15_4
  b15_4:
    // [58] (byte~) render_logo::$42 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 4 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_10
    axs #-[$28*4]
    stx _42
    // [59] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$42 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _42
    ldy screen_idx
    sta SCREEN+$28*4,y
    jmp b15_5
    // render_logo::@15_5
  b15_5:
    // [60] (byte~) render_logo::$45 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 5 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_10
    axs #-[$28*5]
    stx _45
    // [61] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$45 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _45
    ldy screen_idx
    sta SCREEN+$28*5,y
    jmp b7
    // render_logo::@7
  b7:
    // [62] (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#10 -- vbuz1=_inc_vbuz1 
    inc screen_idx
    // [63] (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#10 -- vbuz1=_inc_vbuz1 
    inc logo_idx_3
    // [48] phi from render_logo::@7 to render_logo::@5 [phi:render_logo::@7->render_logo::@5]
  b5_from_b7:
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) render_logo::logo_idx#3 [phi:render_logo::@7->render_logo::@5#0] -- register_copy 
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#4 [phi:render_logo::@7->render_logo::@5#1] -- register_copy 
    jmp b5
    // render_logo::@3
  b3:
    // [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN,y
    jmp b7_1
    // render_logo::@7_1
  b7_1:
    // [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN+$28*1,y
    jmp b7_2
    // render_logo::@7_2
  b7_2:
    // [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN+$28*2,y
    jmp b7_3
    // render_logo::@7_3
  b7_3:
    // [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN+$28*3,y
    jmp b7_4
    // render_logo::@7_4
  b7_4:
    // [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN+$28*4,y
    jmp b7_5
    // render_logo::@7_5
  b7_5:
    // [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx
    sta SCREEN+$28*5,y
    jmp b4
    // render_logo::@4
  b4:
    // [70] (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#18 -- vbuz1=_inc_vbuz1 
    inc screen_idx
    // [46] phi from render_logo::@4 to render_logo::@2 [phi:render_logo::@4->render_logo::@2]
  b2_from_b4:
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) render_logo::screen_idx#3 [phi:render_logo::@4->render_logo::@2#0] -- register_copy 
    jmp b2
    // render_logo::@1
  b1:
    // [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0 -- vbsz1=_neg_vbsz2 
    lda x_char
    eor #$ff
    clc
    adc #1
    sta logo_idx
    // [72] (byte~) render_logo::logo_idx#14 ← (byte)(signed byte) render_logo::logo_idx#1 -- vbuz1=vbuz2 
    lda logo_idx
    sta logo_idx_14
    // [73] phi from render_logo::@1 to render_logo::@8 [phi:render_logo::@1->render_logo::@8]
  b8_from_b1:
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) 0 [phi:render_logo::@1->render_logo::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta screen_idx_21
    // [73] phi (byte) render_logo::logo_idx#11 = (byte~) render_logo::logo_idx#14 [phi:render_logo::@1->render_logo::@8#1] -- register_copy 
    jmp b8
    // render_logo::@8
  b8:
    // [74] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp logo_idx_11
    bne b9
    // [75] phi from render_logo::@13 render_logo::@8 to render_logo::@11 [phi:render_logo::@13/render_logo::@8->render_logo::@11]
  b11_from_b13:
  b11_from_b8:
    // [75] phi (byte) render_logo::screen_idx#15 = (byte) render_logo::screen_idx#6 [phi:render_logo::@13/render_logo::@8->render_logo::@11#0] -- register_copy 
    jmp b11
    // render_logo::@11
  b11:
    // [76] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@12 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp screen_idx_15
    bne b12
    jmp breturn
    // render_logo::@12
  b12:
    // [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN,y
    jmp b32_1
    // render_logo::@32_1
  b32_1:
    // [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN+$28*1,y
    jmp b32_2
    // render_logo::@32_2
  b32_2:
    // [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN+$28*2,y
    jmp b32_3
    // render_logo::@32_3
  b32_3:
    // [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN+$28*3,y
    jmp b32_4
    // render_logo::@32_4
  b32_4:
    // [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN+$28*4,y
    jmp b32_5
    // render_logo::@32_5
  b32_5:
    // [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy screen_idx_15
    sta SCREEN+$28*5,y
    jmp b13
    // render_logo::@13
  b13:
    // [83] (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#15 -- vbuz1=_inc_vbuz1 
    inc screen_idx_6
    jmp b11_from_b13
    // render_logo::@9
  b9:
    // [84] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#21) ← (byte) render_logo::logo_idx#11 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda logo_idx_11
    ldy screen_idx_21
    sta SCREEN,y
    jmp b24_1
    // render_logo::@24_1
  b24_1:
    // [85] (byte~) render_logo::$73 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 1 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_11
    axs #-[$28*1]
    stx _73
    // [86] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$73 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _73
    ldy screen_idx_21
    sta SCREEN+$28*1,y
    jmp b24_2
    // render_logo::@24_2
  b24_2:
    // [87] (byte~) render_logo::$76 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 2 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_11
    axs #-[$28*2]
    stx _76
    // [88] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$76 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _76
    ldy screen_idx_21
    sta SCREEN+$28*2,y
    jmp b24_3
    // render_logo::@24_3
  b24_3:
    // [89] (byte~) render_logo::$79 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 3 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_11
    axs #-[$28*3]
    stx _79
    // [90] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$79 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _79
    ldy screen_idx_21
    sta SCREEN+$28*3,y
    jmp b24_4
    // render_logo::@24_4
  b24_4:
    // [91] (byte~) render_logo::$82 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 4 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_11
    axs #-[$28*4]
    stx _82
    // [92] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$82 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _82
    ldy screen_idx_21
    sta SCREEN+$28*4,y
    jmp b24_5
    // render_logo::@24_5
  b24_5:
    // [93] (byte~) render_logo::$85 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 5 -- vbuz1=vbuz2_plus_vbuc1 
    lax logo_idx_11
    axs #-[$28*5]
    stx _85
    // [94] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$85 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _85
    ldy screen_idx_21
    sta SCREEN+$28*5,y
    jmp b10
    // render_logo::@10
  b10:
    // [95] (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#21 -- vbuz1=_inc_vbuz1 
    inc screen_idx_5
    // [96] (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#11 -- vbuz1=_inc_vbuz1 
    inc logo_idx_4
    // [73] phi from render_logo::@10 to render_logo::@8 [phi:render_logo::@10->render_logo::@8]
  b8_from_b10:
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) render_logo::screen_idx#5 [phi:render_logo::@10->render_logo::@8#0] -- register_copy 
    // [73] phi (byte) render_logo::logo_idx#11 = (byte) render_logo::logo_idx#4 [phi:render_logo::@10->render_logo::@8#1] -- register_copy 
    jmp b8
}
  // sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage($d) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .label _5 = $62
    .label _8 = $66
    .label step = $56
    .label sintab = $d
    .label x = 9
    .label i = $f
    // [98] call div32u16u 
    // [186] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
    // [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda div32u16u.return
    sta div32u16u.return_2
    lda div32u16u.return+1
    sta div32u16u.return_2+1
    lda div32u16u.return+2
    sta div32u16u.return_2+2
    lda div32u16u.return+3
    sta div32u16u.return_2+3
    jmp b2
    // sin16s_gen2::@2
  b2:
    // [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 -- vduz1=vduz2 
    lda div32u16u.return_2
    sta step
    lda div32u16u.return_2+1
    sta step+1
    lda div32u16u.return_2+2
    sta step+2
    lda div32u16u.return_2+3
    sta step+3
    // [101] phi from sin16s_gen2::@2 to sin16s_gen2::@1 [phi:sin16s_gen2::@2->sin16s_gen2::@1]
  b1_from_b2:
    // [101] phi (word) sin16s_gen2::i#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[XSIN_SIZE#0]) xsin#0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<xsin
    sta sintab
    lda #>xsin
    sta sintab+1
    // [101] phi (dword) sin16s_gen2::x#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
    // [101] phi from sin16s_gen2::@4 to sin16s_gen2::@1 [phi:sin16s_gen2::@4->sin16s_gen2::@1]
  b1_from_b4:
    // [101] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#0] -- register_copy 
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@4->sin16s_gen2::@1#1] -- register_copy 
    // [101] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#2] -- register_copy 
    jmp b1
    // sin16s_gen2::@1
  b1:
    // [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
    // [103] call sin16s 
    jsr sin16s
    // [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 -- vwsz1=vwsz2 
    lda sin16s.return_1
    sta sin16s.return
    lda sin16s.return_1+1
    sta sin16s.return+1
    jmp b3
    // sin16s_gen2::@3
  b3:
    // [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 -- vwsz1=vwsz2 
    lda sin16s.return
    sta mul16s.a
    lda sin16s.return+1
    sta mul16s.a+1
    // [106] call mul16s 
    jsr mul16s
    // [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 -- vdsz1=vdsz2 
    lda mul16s.return
    sta mul16s.return_2
    lda mul16s.return+1
    sta mul16s.return_2+1
    lda mul16s.return+2
    sta mul16s.return_2+2
    lda mul16s.return+3
    sta mul16s.return_2+3
    jmp b4
    // sin16s_gen2::@4
  b4:
    // [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 -- vdsz1=vdsz2 
    lda mul16s.return_2
    sta _5
    lda mul16s.return_2+1
    sta _5+1
    lda mul16s.return_2+2
    sta _5+2
    lda mul16s.return_2+3
    sta _5+3
    // [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _8
    lda _5+3
    sta _8+1
    // [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
    // [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
    // [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
    // [113] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>XSIN_SIZE
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<XSIN_SIZE
    bcc b1_from_b4
  !:
    jmp breturn
    // sin16s_gen2::@return
  breturn:
    // [115] return 
    rts
}
  // mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($5c) a)
mul16s: {
    .label _9 = $6c
    .label _16 = $6e
    .label m = $11
    .label return = $70
    .label a = $5c
    .label return_2 = $5e
    // [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
    // [117] call mul16u 
    // [127] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#1 [phi:mul16s->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word)(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vduz1=vduc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.mb
    lda #>sin16s_gen2.ampl
    sta mul16u.mb+1
    lda #<sin16s_gen2.ampl>>$10
    sta mul16u.mb+2
    lda #>sin16s_gen2.ampl>>$10
    sta mul16u.mb+3
    jsr mul16u
    // [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return
    lda mul16u.res+1
    sta mul16u.return+1
    lda mul16u.res+2
    sta mul16u.return+2
    lda mul16u.res+3
    sta mul16u.return+3
    jmp b4
    // mul16s::@4
  b4:
    // [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda mul16u.return
    sta m
    lda mul16u.return+1
    sta m+1
    lda mul16u.return+2
    sta m+2
    lda mul16u.return+3
    sta m+3
    // [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b4
    jmp b3
    // mul16s::@3
  b3:
    // [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _9
    lda m+3
    sta _9+1
    // [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz2_minus_vwuc1 
    lda _9
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _9+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
    // [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
    // [124] phi from mul16s::@3 mul16s::@4 to mul16s::@1 [phi:mul16s::@3/mul16s::@4->mul16s::@1]
  b1_from_b3:
  b1_from_b4:
    // [124] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@4->mul16s::@1#0] -- register_copy 
    jmp b1
    // mul16s::@1
  b1:
    jmp b2
    // mul16s::@2
  b2:
    // [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 -- vdsz1=vdsz2 
    lda m
    sta return
    lda m+1
    sta return+1
    lda m+2
    sta return+2
    lda m+3
    sta return+3
    jmp breturn
    // mul16s::@return
  breturn:
    // [126] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($17) a, word zeropage($15) b)
mul16u: {
    .label _1 = $74
    .label mb = $1d
    .label a = $17
    .label res = $19
    .label return = $68
    .label b = $15
    .label return_3 = $95
    // [128] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
    // mul16u::@1
  b1:
    // [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
    // mul16u::@return
  breturn:
    // [130] return 
    rts
    // mul16u::@2
  b2:
    // [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda a
    and #1
    sta _1
    // [132] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3_from_b2
    jmp b4
    // mul16u::@4
  b4:
    // [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
    // [134] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  b3_from_b2:
  b3_from_b4:
    // [134] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp b3
    // mul16u::@3
  b3:
    // [135] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
    // [136] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
    // [128] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  b1_from_b3:
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
  // sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($22) x)
sin16s: {
    .label _4 = $75
    .label x = $22
    .label return = $5a
    .label x1 = $79
    .label x2 = $7d
    .label x3 = $81
    .label x3_6 = $85
    .label usinx = $87
    .label x4 = $8b
    .label x5 = $8f
    .label x5_128 = $91
    .label usinx_1 = $93
    .label return_1 = $26
    .label sinx = $26
    .label isUpper = $21
    .label return_5 = $26
    // [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
    // sin16s::@4
  b4:
    // [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
    // [139] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
    // [139] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
    // sin16s::@1
  b1:
    // [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
    // sin16s::@5
  b5:
    // [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
    // [142] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
    // [142] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
    // sin16s::@2
  b2:
    // [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz2_rol_3 
    lda x
    sta _4
    lda x+1
    sta _4+1
    lda x+2
    sta _4+2
    lda x+3
    sta _4+3
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
    // [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
    // [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
    // [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [147] call mulu16_sel 
    // [177] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return+1
    jmp b7
    // sin16s::@7
  b7:
    // [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
    // [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 -- vwuz1=vwuz2 
    lda x2
    sta mulu16_sel.v1
    lda x2+1
    sta mulu16_sel.v1+1
    // [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [152] call mulu16_sel 
    // [177] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from_b7:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_1
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_1+1
    jmp b8
    // sin16s::@8
  b8:
    // [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 -- vwuz1=vwuz2 
    lda mulu16_sel.return_1
    sta x3
    lda mulu16_sel.return_1+1
    sta x3+1
    // [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
    // [156] call mulu16_sel 
    // [177] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
    // [177] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_2
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_2+1
    jmp b9
    // sin16s::@9
  b9:
    // [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 -- vwuz1=vwuz2 
    lda mulu16_sel.return_2
    sta x3_6
    lda mulu16_sel.return_2+1
    sta x3_6+1
    // [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
    // [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
    // [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [162] call mulu16_sel 
    // [177] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_10
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_10+1
    jmp b10
    // sin16s::@10
  b10:
    // [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 -- vwuz1=vwuz2 
    lda mulu16_sel.return_10
    sta x4
    lda mulu16_sel.return_10+1
    sta x4+1
    // [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 -- vwuz1=vwuz2 
    lda x4
    sta mulu16_sel.v1
    lda x4+1
    sta mulu16_sel.v1+1
    // [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [167] call mulu16_sel 
    // [177] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_11
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_11+1
    jmp b11
    // sin16s::@11
  b11:
    // [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 -- vwuz1=vwuz2 
    lda mulu16_sel.return_11
    sta x5
    lda mulu16_sel.return_11+1
    sta x5+1
    // [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz2_ror_4 
    lda x5+1
    lsr
    sta x5_128+1
    lda x5
    ror
    sta x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    // [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
    lda usinx+1
    adc x5_128+1
    sta usinx_1+1
    // [172] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b12
    jmp b6
    // sin16s::@6
  b6:
    // [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc usinx_1
    sta sinx
    lda #0
    sbc usinx_1+1
    sta sinx+1
    // [174] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  b3_from_b12:
  b3_from_b6:
    // [174] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
    // sin16s::@3
  b3:
    jmp breturn
    // sin16s::@return
  breturn:
    // [175] return 
    rts
    // sin16s::@12
  b12:
    // [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 -- vwsz1=vwsz2 
    lda usinx_1
    sta return_5
    lda usinx_1+1
    sta return_5+1
    jmp b3_from_b12
}
  // mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($28) v1, word zeropage($2a) v2, byte zeropage($2c) select)
mulu16_sel: {
    .label _0 = $99
    .label _1 = $9d
    .label v1 = $28
    .label v2 = $2a
    .label return = $7b
    .label return_1 = $7f
    .label return_2 = $83
    .label return_10 = $89
    .label return_11 = $8d
    .label select = $2c
    .label return_12 = $a1
    // [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
    // [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 -- vwuz1=vwuz2 
    lda v2
    sta mul16u.b
    lda v2+1
    sta mul16u.b+1
    // [180] call mul16u 
    // [127] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- vduz1=vwuz2 
    lda mul16u.b
    sta mul16u.mb
    lda mul16u.b+1
    sta mul16u.mb+1
    lda #0
    sta mul16u.mb+2
    sta mul16u.mb+3
    jsr mul16u
    // [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return_3
    lda mul16u.res+1
    sta mul16u.return_3+1
    lda mul16u.res+2
    sta mul16u.return_3+2
    lda mul16u.res+3
    sta mul16u.return_3+3
    jmp b1
    // mulu16_sel::@1
  b1:
    // [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 -- vduz1=vduz2 
    lda mul16u.return_3
    sta _0
    lda mul16u.return_3+1
    sta _0+1
    lda mul16u.return_3+2
    sta _0+2
    lda mul16u.return_3+3
    sta _0+3
    // [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    lda _0+2
    sta _1+2
    lda _0+3
    sta _1+3
    ldx select
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
    // [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_12
    lda _1+3
    sta return_12+1
    jmp breturn
    // mulu16_sel::@return
  breturn:
    // [185] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $a5
    .label quotient_lo = $a9
    .label return = $ab
    .label return_2 = $52
    // [187] call divr16u 
    // [196] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [196] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    lda #>0
    sta divr16u.rem+1
    jsr divr16u
    // [188] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b1
    // div32u16u::@1
  b1:
    // [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta quotient_hi
    lda divr16u.return_2+1
    sta quotient_hi+1
    // [190] (word) divr16u::rem#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta divr16u.rem
    lda rem16u+1
    sta divr16u.rem+1
    // [191] call divr16u 
    // [196] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from_b1:
    // [196] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [192] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b2
    // div32u16u::@2
  b2:
    // [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta quotient_lo
    lda divr16u.return_3+1
    sta quotient_lo+1
    // [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
    // div32u16u::@return
  breturn:
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($2f) dividend, word zeropage($2d) rem)
divr16u: {
    .label _1 = $af
    .label _2 = $b0
    .label rem = $2d
    .label dividend = $2f
    .label quotient = $31
    .label i = $33
    .label return = $31
    .label return_2 = $a3
    .label return_3 = $a7
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    // [197] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
    // divr16u::@1
  b1:
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
    // divr16u::@4
  b4:
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
    // [203] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
    // divr16u::@2
  b2:
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
    // [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>XSIN_SIZE
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<XSIN_SIZE
    bcc b3_from_b2
  !:
    jmp b5
    // divr16u::@5
  b5:
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<XSIN_SIZE
    sta rem
    lda rem+1
    sbc #>XSIN_SIZE
    sta rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
    // divr16u::@3
  b3:
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b3
    jmp b6
    // divr16u::@6
  b6:
    // [212] (word) rem16u#1 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
    // divr16u::@return
  breturn:
    // [213] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($34) str, byte zeropage($36) c)
memset: {
    .label end = $b3
    .label dst = $37
    .label str = $34
    .label c = $36
    jmp b1
    // memset::@1
  b1:
    // [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda str
    clc
    adc #<$3e8
    sta end
    lda str+1
    adc #>$3e8
    sta end+1
    // [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda str
    sta dst
    lda str+1
    sta dst+1
    // [217] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
  b2_from_b1:
  b2_from_b2:
    // [217] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [218] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (dst),y
    // [219] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2_from_b2
    lda dst
    cmp end
    bne b2_from_b2
    jmp breturn
    // memset::@return
  breturn:
    // [221] return 
    rts
}
  // File Data
  .align $100
  xsin: .fill 2*XSIN_SIZE, 0
.pc = LOGO "LOGO"
  .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0) [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2 [ xsin_idx#11 ] ( main:3::loop:23 [ xsin_idx#11 ] ) always clobbers reg byte a 
Statement [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1 [ xsin_idx#11 loop::$5 ] ( main:3::loop:23 [ xsin_idx#11 loop::$5 ] ) always clobbers reg byte a 
Statement [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5 [ xsin_idx#11 loop::$1 ] ( main:3::loop:23 [ xsin_idx#11 loop::$1 ] ) always clobbers reg byte a 
Statement [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1) [ xsin_idx#11 loop::xpos#0 ] ( main:3::loop:23 [ xsin_idx#11 loop::xpos#0 ] ) always clobbers reg byte a reg byte y 
Statement [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0 [ xsin_idx#11 render_logo::xpos#0 ] ( main:3::loop:23 [ xsin_idx#11 render_logo::xpos#0 ] ) always clobbers reg byte a 
Statement [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6 [ xsin_idx#3 ] ( main:3::loop:23 [ xsin_idx#3 ] ) always clobbers reg byte a 
Statement [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0 [ render_logo::xpos#0 render_logo::$0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$0 ] ) always clobbers reg byte a 
Statement [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1 [ render_logo::xpos#0 render_logo::$2 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$2 ] ) always clobbers reg byte a 
Statement [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3 [ render_logo::xpos#0 render_logo::$3 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$3 ] ) always clobbers reg byte a 
Statement [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3 [ render_logo::xpos#0 render_logo::x_char#0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::x_char#0 ] ) always clobbers reg byte a 
Statement [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1 [ render_logo::x_char#0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ render_logo::x_char#0 ]
Statement [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
Statement [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0 [ render_logo::logo_idx#1 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::logo_idx#1 ] ) always clobbers reg byte a 
Statement [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
Statement [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:3::sin16s_gen2:21 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 ] ) always clobbers reg byte a 
Statement [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ) always clobbers reg byte a 
Statement [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ) always clobbers reg byte a 
Statement [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ) always clobbers reg byte a 
Statement [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16u::a#1 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#1 ] ) always clobbers reg byte a 
Statement [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 [ mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0 [ mul16s::m#0 mul16s::$9 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$9 ] ) always clobbers reg byte a 
Statement [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$16 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::m#1 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 [ mul16s::return#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ sin16s::isUpper#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ mulu16_sel::select#5 ]
Statement [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::$4 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ sin16s::isUpper#2 ]
Statement [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a 
Statement [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 [ mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 [ mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [188] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [190] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [192] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ]
Statement [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [212] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::return#0 rem16u#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 [ memset::str#3 memset::c#3 memset::end#0 ] ( main:3::memset:13 [ memset::str#3 memset::c#3 memset::end#0 ] main:3::memset:15 [ memset::str#3 memset::c#3 memset::end#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ memset::c#3 ]
Statement [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 [ memset::c#3 memset::end#0 memset::dst#3 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#3 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#3 ] ) always clobbers reg byte a 
Statement [218] *((byte*) memset::dst#2) ← (byte) memset::c#3 [ memset::c#3 memset::end#0 memset::dst#2 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#2 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:54 [ memset::c#3 ]
Statement [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 [ memset::c#3 memset::end#0 memset::dst#1 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#1 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#1 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0) [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2 [ xsin_idx#11 ] ( main:3::loop:23 [ xsin_idx#11 ] ) always clobbers reg byte a 
Statement [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1 [ xsin_idx#11 loop::$5 ] ( main:3::loop:23 [ xsin_idx#11 loop::$5 ] ) always clobbers reg byte a 
Statement [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5 [ xsin_idx#11 loop::$1 ] ( main:3::loop:23 [ xsin_idx#11 loop::$1 ] ) always clobbers reg byte a 
Statement [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1) [ xsin_idx#11 loop::xpos#0 ] ( main:3::loop:23 [ xsin_idx#11 loop::xpos#0 ] ) always clobbers reg byte a reg byte y 
Statement [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0 [ xsin_idx#11 render_logo::xpos#0 ] ( main:3::loop:23 [ xsin_idx#11 render_logo::xpos#0 ] ) always clobbers reg byte a 
Statement [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6 [ xsin_idx#3 ] ( main:3::loop:23 [ xsin_idx#3 ] ) always clobbers reg byte a 
Statement [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0 [ render_logo::xpos#0 render_logo::$0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$0 ] ) always clobbers reg byte a 
Statement [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1 [ render_logo::xpos#0 render_logo::$2 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$2 ] ) always clobbers reg byte a 
Statement [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3 [ render_logo::xpos#0 render_logo::$3 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::$3 ] ) always clobbers reg byte a 
Statement [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3 [ render_logo::xpos#0 render_logo::x_char#0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::xpos#0 render_logo::x_char#0 ] ) always clobbers reg byte a 
Statement [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1 [ render_logo::x_char#0 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 ] ) always clobbers reg byte a 
Statement [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0 [ render_logo::x_char#0 render_logo::screen_idx#18 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::x_char#0 render_logo::screen_idx#18 ] ) always clobbers reg byte a 
Statement [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0 [ render_logo::logo_idx#1 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::logo_idx#1 ] ) always clobbers reg byte a 
Statement [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0 [ render_logo::screen_idx#15 ] ( main:3::loop:23::render_logo:33 [ xsin_idx#11 render_logo::screen_idx#15 ] ) always clobbers reg byte a 
Statement [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:3::sin16s_gen2:21 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 ] ) always clobbers reg byte a 
Statement [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ) always clobbers reg byte a 
Statement [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ) always clobbers reg byte a 
Statement [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ) always clobbers reg byte a 
Statement [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16u::a#1 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#1 ] ) always clobbers reg byte a 
Statement [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 [ mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0 [ mul16s::m#0 mul16s::$9 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$9 ] ) always clobbers reg byte a 
Statement [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$16 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::m#1 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 [ mul16s::return#0 ] ( main:3::sin16s_gen2:21::mul16s:106 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::sin16s_gen2:21::mul16s:106::mul16u:117 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167::mul16u:180 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::$4 ] ) always clobbers reg byte a reg byte y 
Statement [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a 
Statement [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:21::sin16s:103 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 [ mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 [ mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:147 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:152 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:156 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:162 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:103::mulu16_sel:167 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [188] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [190] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [192] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:21::div32u16u:98 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [212] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:98::divr16u:187 [ divr16u::return#0 rem16u#1 ] main:3::sin16s_gen2:21::div32u16u:98::divr16u:191 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 [ memset::str#3 memset::c#3 memset::end#0 ] ( main:3::memset:13 [ memset::str#3 memset::c#3 memset::end#0 ] main:3::memset:15 [ memset::str#3 memset::c#3 memset::end#0 ] ) always clobbers reg byte a 
Statement [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 [ memset::c#3 memset::end#0 memset::dst#3 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#3 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#3 ] ) always clobbers reg byte a 
Statement [218] *((byte*) memset::dst#2) ← (byte) memset::c#3 [ memset::c#3 memset::end#0 memset::dst#2 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#2 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 [ memset::c#3 memset::end#0 memset::dst#1 ] ( main:3::memset:13 [ memset::c#3 memset::end#0 memset::dst#1 ] main:3::memset:15 [ memset::c#3 memset::end#0 memset::dst#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::ch#2 main::ch#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ xsin_idx#11 xsin_idx#19 xsin_idx#3 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] : zp ZP_DWORD:9 , 
Potential registers zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] : zp ZP_DWORD:17 , 
Potential registers zp ZP_WORD:21 [ mul16u::b#1 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp ZP_DWORD:25 , 
Potential registers zp ZP_DWORD:29 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp ZP_DWORD:29 , 
Potential registers zp ZP_BYTE:33 [ sin16s::isUpper#2 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp ZP_DWORD:34 , 
Potential registers zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_BYTE:44 [ mulu16_sel::select#5 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:49 , 
Potential registers zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:52 [ memset::str#3 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_BYTE:54 [ memset::c#3 ] : zp ZP_BYTE:54 , reg byte x , 
Potential registers zp ZP_WORD:55 [ memset::dst#2 memset::dst#3 memset::dst#1 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_WORD:57 [ loop::$5 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_WORD:59 [ loop::$1 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_WORD:61 [ loop::xpos#0 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_WORD:63 [ render_logo::xpos#0 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_BYTE:65 [ render_logo::$0 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ render_logo::$1 ] : zp ZP_BYTE:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:67 [ render_logo::$2 ] : zp ZP_BYTE:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:68 [ render_logo::$3 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_BYTE:70 [ render_logo::x_char#0 ] : zp ZP_BYTE:70 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ render_logo::$33 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ render_logo::$36 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:73 [ render_logo::$39 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ render_logo::$42 ] : zp ZP_BYTE:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:75 [ render_logo::$45 ] : zp ZP_BYTE:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:76 [ render_logo::logo_idx#1 ] : zp ZP_BYTE:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:77 [ render_logo::$73 ] : zp ZP_BYTE:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:78 [ render_logo::$76 ] : zp ZP_BYTE:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:79 [ render_logo::$79 ] : zp ZP_BYTE:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:80 [ render_logo::$82 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ render_logo::$85 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:82 [ div32u16u::return#2 ] : zp ZP_DWORD:82 , 
Potential registers zp ZP_DWORD:86 [ sin16s_gen2::step#0 ] : zp ZP_DWORD:86 , 
Potential registers zp ZP_WORD:90 [ sin16s::return#0 ] : zp ZP_WORD:90 , 
Potential registers zp ZP_WORD:92 [ mul16s::a#0 ] : zp ZP_WORD:92 , 
Potential registers zp ZP_DWORD:94 [ mul16s::return#2 ] : zp ZP_DWORD:94 , 
Potential registers zp ZP_DWORD:98 [ sin16s_gen2::$5 ] : zp ZP_DWORD:98 , 
Potential registers zp ZP_WORD:102 [ sin16s_gen2::$8 ] : zp ZP_WORD:102 , 
Potential registers zp ZP_DWORD:104 [ mul16u::return#2 ] : zp ZP_DWORD:104 , 
Potential registers zp ZP_WORD:108 [ mul16s::$9 ] : zp ZP_WORD:108 , 
Potential registers zp ZP_WORD:110 [ mul16s::$16 ] : zp ZP_WORD:110 , 
Potential registers zp ZP_DWORD:112 [ mul16s::return#0 ] : zp ZP_DWORD:112 , 
Potential registers zp ZP_BYTE:116 [ mul16u::$1 ] : zp ZP_BYTE:116 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:117 [ sin16s::$4 ] : zp ZP_DWORD:117 , 
Potential registers zp ZP_WORD:121 [ sin16s::x1#0 ] : zp ZP_WORD:121 , 
Potential registers zp ZP_WORD:123 [ mulu16_sel::return#0 ] : zp ZP_WORD:123 , 
Potential registers zp ZP_WORD:125 [ sin16s::x2#0 ] : zp ZP_WORD:125 , 
Potential registers zp ZP_WORD:127 [ mulu16_sel::return#1 ] : zp ZP_WORD:127 , 
Potential registers zp ZP_WORD:129 [ sin16s::x3#0 ] : zp ZP_WORD:129 , 
Potential registers zp ZP_WORD:131 [ mulu16_sel::return#2 ] : zp ZP_WORD:131 , 
Potential registers zp ZP_WORD:133 [ sin16s::x3_6#0 ] : zp ZP_WORD:133 , 
Potential registers zp ZP_WORD:135 [ sin16s::usinx#0 ] : zp ZP_WORD:135 , 
Potential registers zp ZP_WORD:137 [ mulu16_sel::return#10 ] : zp ZP_WORD:137 , 
Potential registers zp ZP_WORD:139 [ sin16s::x4#0 ] : zp ZP_WORD:139 , 
Potential registers zp ZP_WORD:141 [ mulu16_sel::return#11 ] : zp ZP_WORD:141 , 
Potential registers zp ZP_WORD:143 [ sin16s::x5#0 ] : zp ZP_WORD:143 , 
Potential registers zp ZP_WORD:145 [ sin16s::x5_128#0 ] : zp ZP_WORD:145 , 
Potential registers zp ZP_WORD:147 [ sin16s::usinx#1 ] : zp ZP_WORD:147 , 
Potential registers zp ZP_DWORD:149 [ mul16u::return#3 ] : zp ZP_DWORD:149 , 
Potential registers zp ZP_DWORD:153 [ mulu16_sel::$0 ] : zp ZP_DWORD:153 , 
Potential registers zp ZP_DWORD:157 [ mulu16_sel::$1 ] : zp ZP_DWORD:157 , 
Potential registers zp ZP_WORD:161 [ mulu16_sel::return#12 ] : zp ZP_WORD:161 , 
Potential registers zp ZP_WORD:163 [ divr16u::return#2 ] : zp ZP_WORD:163 , 
Potential registers zp ZP_WORD:165 [ div32u16u::quotient_hi#0 ] : zp ZP_WORD:165 , 
Potential registers zp ZP_WORD:167 [ divr16u::return#3 ] : zp ZP_WORD:167 , 
Potential registers zp ZP_WORD:169 [ div32u16u::quotient_lo#0 ] : zp ZP_WORD:169 , 
Potential registers zp ZP_DWORD:171 [ div32u16u::return#0 ] : zp ZP_DWORD:171 , 
Potential registers zp ZP_BYTE:175 [ divr16u::$1 ] : zp ZP_BYTE:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:176 [ divr16u::$2 ] : zp ZP_BYTE:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:177 [ rem16u#1 ] : zp ZP_WORD:177 , 
Potential registers zp ZP_WORD:179 [ memset::end#0 ] : zp ZP_WORD:179 , 

REGISTER UPLIFT SCOPES
Uplift Scope [render_logo] 506.94: zp ZP_BYTE:5 [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ] 499.17: zp ZP_BYTE:8 [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ] 271.07: zp ZP_BYTE:7 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ] 259.71: zp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ] 202: zp ZP_BYTE:71 [ render_logo::$33 ] 202: zp ZP_BYTE:72 [ render_logo::$36 ] 202: zp ZP_BYTE:73 [ render_logo::$39 ] 202: zp ZP_BYTE:74 [ render_logo::$42 ] 202: zp ZP_BYTE:75 [ render_logo::$45 ] 202: zp ZP_BYTE:77 [ render_logo::$73 ] 202: zp ZP_BYTE:78 [ render_logo::$76 ] 202: zp ZP_BYTE:79 [ render_logo::$79 ] 202: zp ZP_BYTE:80 [ render_logo::$82 ] 202: zp ZP_BYTE:81 [ render_logo::$85 ] 4: zp ZP_BYTE:65 [ render_logo::$0 ] 4: zp ZP_BYTE:66 [ render_logo::$1 ] 4: zp ZP_BYTE:67 [ render_logo::$2 ] 2.14: zp ZP_WORD:63 [ render_logo::xpos#0 ] 2: zp ZP_WORD:68 [ render_logo::$3 ] 2: zp ZP_BYTE:76 [ render_logo::logo_idx#1 ] 0.36: zp ZP_BYTE:70 [ render_logo::x_char#0 ] 
Uplift Scope [mul16u] 346.86: zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 249.57: zp ZP_DWORD:29 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 202: zp ZP_BYTE:116 [ mul16u::$1 ] 180.67: zp ZP_WORD:23 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] 4: zp ZP_WORD:21 [ mul16u::b#1 ] 4: zp ZP_DWORD:104 [ mul16u::return#2 ] 4: zp ZP_DWORD:149 [ mul16u::return#3 ] 
Uplift Scope [divr16u] 106.92: zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 35.54: zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:175 [ divr16u::$1 ] 22: zp ZP_BYTE:176 [ divr16u::$2 ] 18.19: zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ] 9.75: zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] 4: zp ZP_WORD:163 [ divr16u::return#2 ] 4: zp ZP_WORD:167 [ divr16u::return#3 ] 
Uplift Scope [sin16s] 27.5: zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 22: zp ZP_WORD:90 [ sin16s::return#0 ] 13: zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 4: zp ZP_DWORD:117 [ sin16s::$4 ] 4: zp ZP_WORD:125 [ sin16s::x2#0 ] 4: zp ZP_WORD:133 [ sin16s::x3_6#0 ] 4: zp ZP_WORD:139 [ sin16s::x4#0 ] 4: zp ZP_WORD:143 [ sin16s::x5#0 ] 4: zp ZP_WORD:145 [ sin16s::x5_128#0 ] 1: zp ZP_WORD:129 [ sin16s::x3#0 ] 1: zp ZP_WORD:147 [ sin16s::usinx#1 ] 0.64: zp ZP_WORD:121 [ sin16s::x1#0 ] 0.33: zp ZP_WORD:135 [ sin16s::usinx#0 ] 0.06: zp ZP_BYTE:33 [ sin16s::isUpper#2 ] 
Uplift Scope [mulu16_sel] 24: zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] 21: zp ZP_WORD:42 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] 4: zp ZP_WORD:123 [ mulu16_sel::return#0 ] 4: zp ZP_WORD:127 [ mulu16_sel::return#1 ] 4: zp ZP_WORD:131 [ mulu16_sel::return#2 ] 4: zp ZP_WORD:137 [ mulu16_sel::return#10 ] 4: zp ZP_WORD:141 [ mulu16_sel::return#11 ] 4: zp ZP_DWORD:153 [ mulu16_sel::$0 ] 4: zp ZP_DWORD:157 [ mulu16_sel::$1 ] 1.71: zp ZP_WORD:161 [ mulu16_sel::return#12 ] 0.33: zp ZP_BYTE:44 [ mulu16_sel::select#5 ] 
Uplift Scope [sin16s_gen2] 22: zp ZP_DWORD:98 [ sin16s_gen2::$5 ] 18.33: zp ZP_WORD:15 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] 11: zp ZP_WORD:102 [ sin16s_gen2::$8 ] 10.33: zp ZP_DWORD:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] 8.8: zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] 0.87: zp ZP_DWORD:86 [ sin16s_gen2::step#0 ] 
Uplift Scope [loop] 22: zp ZP_WORD:57 [ loop::$5 ] 22: zp ZP_WORD:59 [ loop::$1 ] 22: zp ZP_WORD:61 [ loop::xpos#0 ] 
Uplift Scope [mul16s] 22: zp ZP_DWORD:94 [ mul16s::return#2 ] 10: zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] 4.33: zp ZP_DWORD:112 [ mul16s::return#0 ] 4: zp ZP_WORD:108 [ mul16s::$9 ] 4: zp ZP_WORD:110 [ mul16s::$16 ] 2.6: zp ZP_WORD:92 [ mul16s::a#0 ] 
Uplift Scope [memset] 38: zp ZP_WORD:55 [ memset::dst#2 memset::dst#3 memset::dst#1 ] 2.17: zp ZP_WORD:179 [ memset::end#0 ] 1.57: zp ZP_BYTE:54 [ memset::c#3 ] 0: zp ZP_WORD:52 [ memset::str#3 ] 
Uplift Scope [main] 38.5: zp ZP_BYTE:2 [ main::ch#2 main::ch#1 ] 
Uplift Scope [] 26.12: zp ZP_WORD:3 [ xsin_idx#11 xsin_idx#19 xsin_idx#3 ] 0.8: zp ZP_WORD:177 [ rem16u#1 ] 
Uplift Scope [div32u16u] 4: zp ZP_DWORD:82 [ div32u16u::return#2 ] 4: zp ZP_WORD:169 [ div32u16u::quotient_lo#0 ] 1.33: zp ZP_DWORD:171 [ div32u16u::return#0 ] 0.8: zp ZP_WORD:165 [ div32u16u::quotient_hi#0 ] 

Uplifting [mul16u] best 75022 combination zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp ZP_DWORD:29 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp ZP_WORD:23 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] zp ZP_WORD:21 [ mul16u::b#1 ] zp ZP_DWORD:104 [ mul16u::return#2 ] zp ZP_DWORD:149 [ mul16u::return#3 ] 
Uplifting [divr16u] best 74812 combination zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] zp ZP_WORD:163 [ divr16u::return#2 ] zp ZP_WORD:167 [ divr16u::return#3 ] 
Uplifting [sin16s] best 74812 combination zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp ZP_WORD:90 [ sin16s::return#0 ] zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp ZP_DWORD:117 [ sin16s::$4 ] zp ZP_WORD:125 [ sin16s::x2#0 ] zp ZP_WORD:133 [ sin16s::x3_6#0 ] zp ZP_WORD:139 [ sin16s::x4#0 ] zp ZP_WORD:143 [ sin16s::x5#0 ] zp ZP_WORD:145 [ sin16s::x5_128#0 ] zp ZP_WORD:129 [ sin16s::x3#0 ] zp ZP_WORD:147 [ sin16s::usinx#1 ] zp ZP_WORD:121 [ sin16s::x1#0 ] zp ZP_WORD:135 [ sin16s::usinx#0 ] zp ZP_BYTE:33 [ sin16s::isUpper#2 ] 
Uplifting [mulu16_sel] best 74796 combination zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] zp ZP_WORD:42 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] zp ZP_WORD:123 [ mulu16_sel::return#0 ] zp ZP_WORD:127 [ mulu16_sel::return#1 ] zp ZP_WORD:131 [ mulu16_sel::return#2 ] zp ZP_WORD:137 [ mulu16_sel::return#10 ] zp ZP_WORD:141 [ mulu16_sel::return#11 ] zp ZP_DWORD:153 [ mulu16_sel::$0 ] zp ZP_DWORD:157 [ mulu16_sel::$1 ] zp ZP_WORD:161 [ mulu16_sel::return#12 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [sin16s_gen2] best 74796 combination zp ZP_DWORD:98 [ sin16s_gen2::$5 ] zp ZP_WORD:15 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] zp ZP_WORD:102 [ sin16s_gen2::$8 ] zp ZP_DWORD:9 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] zp ZP_DWORD:86 [ sin16s_gen2::step#0 ] 
Uplifting [loop] best 74796 combination zp ZP_WORD:57 [ loop::$5 ] zp ZP_WORD:59 [ loop::$1 ] zp ZP_WORD:61 [ loop::xpos#0 ] 
Uplifting [mul16s] best 74796 combination zp ZP_DWORD:94 [ mul16s::return#2 ] zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] zp ZP_DWORD:112 [ mul16s::return#0 ] zp ZP_WORD:108 [ mul16s::$9 ] zp ZP_WORD:110 [ mul16s::$16 ] zp ZP_WORD:92 [ mul16s::a#0 ] 
Uplifting [memset] best 74780 combination zp ZP_WORD:55 [ memset::dst#2 memset::dst#3 memset::dst#1 ] zp ZP_WORD:179 [ memset::end#0 ] reg byte x [ memset::c#3 ] zp ZP_WORD:52 [ memset::str#3 ] 
Uplifting [main] best 74660 combination reg byte x [ main::ch#2 main::ch#1 ] 
Uplifting [] best 74660 combination zp ZP_WORD:3 [ xsin_idx#11 xsin_idx#19 xsin_idx#3 ] zp ZP_WORD:177 [ rem16u#1 ] 
Uplifting [div32u16u] best 74660 combination zp ZP_DWORD:82 [ div32u16u::return#2 ] zp ZP_WORD:169 [ div32u16u::quotient_lo#0 ] zp ZP_DWORD:171 [ div32u16u::return#0 ] zp ZP_WORD:165 [ div32u16u::quotient_hi#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
Uplifting [render_logo] best 69560 combination reg byte y [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
Uplifting [render_logo] best 64760 combination reg byte y [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
Uplifting [render_logo] best 64760 combination zp ZP_BYTE:7 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ]
Uplifting [render_logo] best 64760 combination zp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ render_logo::$33 ]
Uplifting [render_logo] best 64360 combination reg byte a [ render_logo::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ render_logo::$36 ]
Uplifting [render_logo] best 63960 combination reg byte a [ render_logo::$36 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:73 [ render_logo::$39 ]
Uplifting [render_logo] best 63560 combination reg byte a [ render_logo::$39 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:74 [ render_logo::$42 ]
Uplifting [render_logo] best 63160 combination reg byte a [ render_logo::$42 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:75 [ render_logo::$45 ]
Uplifting [render_logo] best 62760 combination reg byte a [ render_logo::$45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:77 [ render_logo::$73 ]
Uplifting [render_logo] best 62360 combination reg byte a [ render_logo::$73 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:78 [ render_logo::$76 ]
Uplifting [render_logo] best 61960 combination reg byte a [ render_logo::$76 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:79 [ render_logo::$79 ]
Uplifting [render_logo] best 61560 combination reg byte a [ render_logo::$79 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:80 [ render_logo::$82 ]
Uplifting [render_logo] best 61160 combination reg byte a [ render_logo::$82 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:81 [ render_logo::$85 ]
Uplifting [render_logo] best 60760 combination reg byte a [ render_logo::$85 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ render_logo::$0 ]
Uplifting [render_logo] best 60754 combination reg byte a [ render_logo::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:66 [ render_logo::$1 ]
Uplifting [render_logo] best 60748 combination reg byte a [ render_logo::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:67 [ render_logo::$2 ]
Uplifting [render_logo] best 60742 combination reg byte a [ render_logo::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:76 [ render_logo::logo_idx#1 ]
Uplifting [render_logo] best 60736 combination reg byte a [ render_logo::logo_idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ render_logo::x_char#0 ]
Uplifting [render_logo] best 60736 combination zp ZP_BYTE:70 [ render_logo::x_char#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ sin16s::isUpper#2 ]
Uplifting [sin16s] best 60736 combination zp ZP_BYTE:33 [ sin16s::isUpper#2 ] 
Coalescing zero page register [ zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp ZP_WORD:147 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] ] with [ zp ZP_WORD:129 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register [ zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:177 [ rem16u#1 ] ] - score: 2
Coalescing zero page register [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] ] with [ zp ZP_DWORD:104 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 ] ] with [ zp ZP_DWORD:112 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:21 [ mul16u::b#1 ] ] with [ zp ZP_WORD:42 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp ZP_DWORD:149 [ mul16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] ] with [ zp ZP_DWORD:117 [ sin16s::$4 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp ZP_WORD:90 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 ] ] with [ zp ZP_WORD:125 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp ZP_WORD:139 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:163 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:167 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:52 [ memset::str#3 ] ] with [ zp ZP_WORD:55 [ memset::dst#2 memset::dst#3 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:57 [ loop::$5 ] ] with [ zp ZP_WORD:59 [ loop::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:61 [ loop::xpos#0 ] ] with [ zp ZP_WORD:63 [ render_logo::xpos#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:82 [ div32u16u::return#2 ] ] with [ zp ZP_DWORD:86 [ sin16s_gen2::step#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:82 [ div32u16u::return#2 sin16s_gen2::step#0 ] ] with [ zp ZP_DWORD:171 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:94 [ mul16s::return#2 ] ] with [ zp ZP_DWORD:98 [ sin16s_gen2::$5 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:108 [ mul16s::$9 ] ] with [ zp ZP_WORD:110 [ mul16s::$16 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:123 [ mulu16_sel::return#0 ] ] with [ zp ZP_WORD:161 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:131 [ mulu16_sel::return#2 ] ] with [ zp ZP_WORD:133 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:141 [ mulu16_sel::return#11 ] ] with [ zp ZP_WORD:143 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:153 [ mulu16_sel::$0 ] ] with [ zp ZP_DWORD:157 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 ] ] with [ zp ZP_DWORD:25 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] with [ zp ZP_DWORD:94 [ mul16s::return#2 sin16s_gen2::$5 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp ZP_WORD:92 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 ] ] with [ zp ZP_WORD:135 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp ZP_WORD:127 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp ZP_WORD:137 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp ZP_WORD:169 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:57 [ loop::$5 loop::$1 ] ] with [ zp ZP_WORD:61 [ loop::xpos#0 render_logo::xpos#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:123 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp ZP_WORD:131 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:123 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp ZP_WORD:141 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 ] ] with [ zp ZP_DWORD:153 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:123 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp ZP_WORD:145 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ] with [ zp ZP_WORD:3 [ xsin_idx#11 xsin_idx#19 xsin_idx#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:33 [ sin16s::isUpper#2 ] ] with [ zp ZP_BYTE:6 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ] ]
Coalescing zero page register [ zp ZP_DWORD:34 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 ] ] with [ zp ZP_DWORD:17 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 ] ]
Coalescing zero page register [ zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ] ] with [ zp ZP_WORD:15 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ] with [ zp ZP_WORD:21 [ mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ]
Coalescing zero page register [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ] with [ zp ZP_WORD:23 [ mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ] ]
Coalescing zero page register [ zp ZP_WORD:52 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 ] ] with [ zp ZP_WORD:38 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ] ]
Coalescing zero page register [ zp ZP_WORD:57 [ loop::$5 loop::$1 loop::xpos#0 render_logo::xpos#0 ] ] with [ zp ZP_WORD:40 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ]
Coalescing zero page register [ zp ZP_WORD:102 [ sin16s_gen2::$8 ] ] with [ zp ZP_WORD:68 [ render_logo::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:121 [ sin16s::x1#0 ] ] with [ zp ZP_WORD:108 [ mul16s::$9 mul16s::$16 ] ]
Coalescing zero page register [ zp ZP_WORD:165 [ div32u16u::quotient_hi#0 ] ] with [ zp ZP_WORD:123 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ]
Coalescing zero page register [ zp ZP_WORD:102 [ sin16s_gen2::$8 render_logo::$3 ] ] with [ zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ]
Coalescing zero page register [ zp ZP_WORD:179 [ memset::end#0 ] ] with [ zp ZP_WORD:13 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 xsin_idx#11 xsin_idx#19 xsin_idx#3 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:2 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
Allocated (was zp ZP_DWORD:9) zp ZP_DWORD:3 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated (was zp ZP_DWORD:29) zp ZP_DWORD:7 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:11 [ sin16s::isUpper#2 render_logo::logo_idx#10 render_logo::logo_idx#3 ]
Allocated (was zp ZP_DWORD:34) zp ZP_DWORD:12 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp ZP_WORD:45) zp ZP_WORD:16 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated (was zp ZP_WORD:49) zp ZP_WORD:18 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
Allocated (was zp ZP_WORD:52) zp ZP_WORD:20 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
Allocated (was zp ZP_WORD:57) zp ZP_WORD:22 [ loop::$5 loop::$1 loop::xpos#0 render_logo::xpos#0 mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
Allocated (was zp ZP_BYTE:70) zp ZP_BYTE:24 [ render_logo::x_char#0 ]
Allocated (was zp ZP_DWORD:82) zp ZP_DWORD:25 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
Allocated (was zp ZP_WORD:102) zp ZP_WORD:29 [ sin16s_gen2::$8 render_logo::$3 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
Allocated (was zp ZP_WORD:121) zp ZP_WORD:31 [ sin16s::x1#0 mul16s::$9 mul16s::$16 ]
Allocated (was zp ZP_WORD:165) zp ZP_WORD:33 [ div32u16u::quotient_hi#0 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
Allocated (was zp ZP_WORD:179) zp ZP_WORD:35 [ memset::end#0 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 xsin_idx#11 xsin_idx#19 xsin_idx#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label D016 = $d016
  .const VIC_MCM = $10
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const DARK_GREY = $b
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label LOGO = $2000
  .const XSIN_SIZE = $200
  .label rem16u = $10
  .label xsin_idx = $23
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))     .for (var y=0; y<6	; y++)         .for (var x=0;x<40; x++)             .for(var cp=0; cp<8; cp++)                 .byte logoPic.getMulticolorByte(x,cp+y*8)  }}
  // [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
  // @2
b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
  // @end
bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>LOGO)/4&$f
    // asm { sei  }
    sei
    // [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
    // [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BGCOL2
    // [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0) -- _deref_pbuc1=_deref_pbuc2 
    lda BGCOL2
    sta BGCOL
    // [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL3
    // [10] phi from main to main::toD0181 [phi:main->main::toD0181]
  toD0181_from_main:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp b3
    // main::@3
  b3:
    // [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM
    sta D016
    // [13] call memset 
    // [214] phi from main::@3 to memset [phi:main::@3->memset]
  memset_from_b3:
    // [214] phi (byte) memset::c#3 = (const byte) BLACK#0 [phi:main::@3->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) SCREEN#0 [phi:main::@3->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta memset.str
    lda #>SCREEN
    sta memset.str+1
    jsr memset
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
    // main::@4
  b4:
    // [15] call memset 
    // [214] phi from main::@4 to memset [phi:main::@4->memset]
  memset_from_b4:
    // [214] phi (byte) memset::c#3 = (const byte) WHITE#0|(byte) 8 [phi:main::@4->memset#0] -- vbuxx=vbuc1 
    ldx #WHITE|8
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) COLS#0 [phi:main::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta memset.str
    lda #>COLS
    sta memset.str+1
    jsr memset
    // [16] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [16] phi (byte) main::ch#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [16] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [16] phi (byte) main::ch#2 = (byte) main::ch#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [17] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // [18] (byte) main::ch#1 ← ++ (byte) main::ch#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] if((byte) main::ch#1!=(byte) $f0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f0
    bne b1_from_b1
    // [20] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [21] call sin16s_gen2 
    // [97] phi from main::@2 to sin16s_gen2 [phi:main::@2->sin16s_gen2]
  sin16s_gen2_from_b2:
    jsr sin16s_gen2
    // [22] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
    // main::@5
  b5:
    // [23] call loop 
    // [25] phi from main::@5 to loop [phi:main::@5->loop]
  loop_from_b5:
    jsr loop
    jmp breturn
    // main::@return
  breturn:
    // [24] return 
    rts
}
  // loop
loop: {
    .label _1 = $16
    .label _5 = $16
    .label xpos = $16
    // [26] phi from loop to loop::@1 [phi:loop->loop::@1]
  b1_from_loop:
    // [26] phi (word) xsin_idx#11 = (byte) 0 [phi:loop->loop::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    lda #>0
    sta xsin_idx+1
    jmp b1
    // loop::@1
  b1:
    jmp b2
  // Wait for the raster to reach the bottom of the screen
    // loop::@2
  b2:
    // [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    jmp b3
    // loop::@3
  b3:
    // [28] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda xsin_idx
    asl
    sta _5
    lda xsin_idx+1
    rol
    sta _5+1
    // [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _1
    adc #<xsin
    sta _1
    lda _1+1
    adc #>xsin
    sta _1+1
    // [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (xpos),y
    tax
    iny
    lda (xpos),y
    stx xpos
    sta xpos+1
    // [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0
    // [33] call render_logo 
    jsr render_logo
    jmp b5
    // loop::@5
  b5:
    // [34] (word) xsin_idx#3 ← ++ (word) xsin_idx#11 -- vwuz1=_inc_vwuz1 
    inc xsin_idx
    bne !+
    inc xsin_idx+1
  !:
    // [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda xsin_idx+1
    cmp #>XSIN_SIZE
    bne b6_from_b5
    lda xsin_idx
    cmp #<XSIN_SIZE
    bne b6_from_b5
    // [37] phi from loop::@5 to loop::@4 [phi:loop::@5->loop::@4]
  b4_from_b5:
    // [37] phi (word) xsin_idx#19 = (byte) 0 [phi:loop::@5->loop::@4#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    lda #>0
    sta xsin_idx+1
    jmp b4
    // [36] phi from loop::@5 to loop::@6 [phi:loop::@5->loop::@6]
  b6_from_b5:
    jmp b6
    // loop::@6
  b6:
    // [37] phi from loop::@6 to loop::@4 [phi:loop::@6->loop::@4]
  b4_from_b6:
    // [37] phi (word) xsin_idx#19 = (word) xsin_idx#3 [phi:loop::@6->loop::@4#0] -- register_copy 
    jmp b4
    // loop::@4
  b4:
    // [38] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [26] phi from loop::@4 to loop::@1 [phi:loop::@4->loop::@1]
  b1_from_b4:
    // [26] phi (word) xsin_idx#11 = (word) xsin_idx#19 [phi:loop::@4->loop::@1#0] -- register_copy 
    jmp b1
}
  // render_logo
// render_logo(signed word zeropage($16) xpos)
render_logo: {
    .label _3 = $1d
    .label xpos = $16
    .label x_char = $18
    .label logo_idx = $b
    .label logo_idx_4 = 2
    .label logo_idx_11 = 2
    .label logo_idx_14 = 2
    // [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0 -- vbuaa=_byte_vwsz1 
    lda xpos
    // [40] (byte~) render_logo::$1 ← (byte~) render_logo::$0 & (byte) 7 -- vbuaa=vbuaa_band_vbuc1 
    and #7
    // [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1 -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_MCM
    // [42] *((const byte*) D016#0) ← (byte~) render_logo::$2 -- _deref_pbuc1=vbuaa 
    sta D016
    // [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3 -- vwsz1=vwsz2_ror_3 
    lda xpos+1
    cmp #$80
    ror
    sta _3+1
    lda xpos
    ror
    sta _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    // [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3 -- vbsz1=_sbyte_vwsz2 
    lda _3
    sta x_char
    // [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1 -- vwsz1_lt_0_then_la1 
    lda xpos+1
    bmi b1
    // [46] phi from render_logo to render_logo::@2 [phi:render_logo->render_logo::@2]
  b2_from_render_logo:
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) 0 [phi:render_logo->render_logo::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
    // render_logo::@2
  b2:
    // [47] if((byte) render_logo::screen_idx#18!=(byte)(signed byte) render_logo::x_char#0) goto render_logo::@3 -- vbuyy_neq_vbuz1_then_la1 
    cpy x_char
    bne b3
    // [48] phi from render_logo::@2 to render_logo::@5 [phi:render_logo::@2->render_logo::@5]
  b5_from_b2:
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) 0 [phi:render_logo::@2->render_logo::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta logo_idx
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#18 [phi:render_logo::@2->render_logo::@5#1] -- register_copy 
    jmp b5
    // render_logo::@5
  b5:
    // [49] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@6 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b6
    jmp breturn
    // render_logo::@return
  breturn:
    // [50] return 
    rts
    // render_logo::@6
  b6:
    // [51] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#10) ← (byte) render_logo::logo_idx#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda logo_idx
    sta SCREEN,y
    jmp b15_1
    // render_logo::@15_1
  b15_1:
    // [52] (byte~) render_logo::$33 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 1 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*1
    clc
    adc logo_idx
    // [53] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$33 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*1,y
    jmp b15_2
    // render_logo::@15_2
  b15_2:
    // [54] (byte~) render_logo::$36 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 2 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*2
    clc
    adc logo_idx
    // [55] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$36 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*2,y
    jmp b15_3
    // render_logo::@15_3
  b15_3:
    // [56] (byte~) render_logo::$39 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 3 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*3
    clc
    adc logo_idx
    // [57] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$39 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*3,y
    jmp b15_4
    // render_logo::@15_4
  b15_4:
    // [58] (byte~) render_logo::$42 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 4 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*4
    clc
    adc logo_idx
    // [59] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$42 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*4,y
    jmp b15_5
    // render_logo::@15_5
  b15_5:
    // [60] (byte~) render_logo::$45 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 5 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*5
    clc
    adc logo_idx
    // [61] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$45 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*5,y
    jmp b7
    // render_logo::@7
  b7:
    // [62] (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#10 -- vbuyy=_inc_vbuyy 
    iny
    // [63] (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#10 -- vbuz1=_inc_vbuz1 
    inc logo_idx
    // [48] phi from render_logo::@7 to render_logo::@5 [phi:render_logo::@7->render_logo::@5]
  b5_from_b7:
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) render_logo::logo_idx#3 [phi:render_logo::@7->render_logo::@5#0] -- register_copy 
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#4 [phi:render_logo::@7->render_logo::@5#1] -- register_copy 
    jmp b5
    // render_logo::@3
  b3:
    // [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN,y
    jmp b7_1
    // render_logo::@7_1
  b7_1:
    // [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*1,y
    jmp b7_2
    // render_logo::@7_2
  b7_2:
    // [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*2,y
    jmp b7_3
    // render_logo::@7_3
  b7_3:
    // [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*3,y
    jmp b7_4
    // render_logo::@7_4
  b7_4:
    // [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*4,y
    jmp b7_5
    // render_logo::@7_5
  b7_5:
    // [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*5,y
    jmp b4
    // render_logo::@4
  b4:
    // [70] (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#18 -- vbuyy=_inc_vbuyy 
    iny
    // [46] phi from render_logo::@4 to render_logo::@2 [phi:render_logo::@4->render_logo::@2]
  b2_from_b4:
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) render_logo::screen_idx#3 [phi:render_logo::@4->render_logo::@2#0] -- register_copy 
    jmp b2
    // render_logo::@1
  b1:
    // [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0 -- vbsaa=_neg_vbsz1 
    lda x_char
    eor #$ff
    clc
    adc #1
    // [72] (byte~) render_logo::logo_idx#14 ← (byte)(signed byte) render_logo::logo_idx#1 -- vbuz1=vbuaa 
    sta logo_idx_14
    // [73] phi from render_logo::@1 to render_logo::@8 [phi:render_logo::@1->render_logo::@8]
  b8_from_b1:
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) 0 [phi:render_logo::@1->render_logo::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [73] phi (byte) render_logo::logo_idx#11 = (byte~) render_logo::logo_idx#14 [phi:render_logo::@1->render_logo::@8#1] -- register_copy 
    jmp b8
    // render_logo::@8
  b8:
    // [74] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp logo_idx_11
    bne b9
    // [75] phi from render_logo::@13 render_logo::@8 to render_logo::@11 [phi:render_logo::@13/render_logo::@8->render_logo::@11]
  b11_from_b13:
  b11_from_b8:
    // [75] phi (byte) render_logo::screen_idx#15 = (byte) render_logo::screen_idx#6 [phi:render_logo::@13/render_logo::@8->render_logo::@11#0] -- register_copy 
    jmp b11
    // render_logo::@11
  b11:
    // [76] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@12 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b12
    jmp breturn
    // render_logo::@12
  b12:
    // [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN,y
    jmp b32_1
    // render_logo::@32_1
  b32_1:
    // [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*1,y
    jmp b32_2
    // render_logo::@32_2
  b32_2:
    // [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*2,y
    jmp b32_3
    // render_logo::@32_3
  b32_3:
    // [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*3,y
    jmp b32_4
    // render_logo::@32_4
  b32_4:
    // [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*4,y
    jmp b32_5
    // render_logo::@32_5
  b32_5:
    // [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN+$28*5,y
    jmp b13
    // render_logo::@13
  b13:
    // [83] (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#15 -- vbuyy=_inc_vbuyy 
    iny
    jmp b11_from_b13
    // render_logo::@9
  b9:
    // [84] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#21) ← (byte) render_logo::logo_idx#11 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda logo_idx_11
    sta SCREEN,y
    jmp b24_1
    // render_logo::@24_1
  b24_1:
    // [85] (byte~) render_logo::$73 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 1 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*1
    clc
    adc logo_idx_11
    // [86] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$73 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*1,y
    jmp b24_2
    // render_logo::@24_2
  b24_2:
    // [87] (byte~) render_logo::$76 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 2 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*2
    clc
    adc logo_idx_11
    // [88] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$76 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*2,y
    jmp b24_3
    // render_logo::@24_3
  b24_3:
    // [89] (byte~) render_logo::$79 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 3 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*3
    clc
    adc logo_idx_11
    // [90] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$79 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*3,y
    jmp b24_4
    // render_logo::@24_4
  b24_4:
    // [91] (byte~) render_logo::$82 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 4 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*4
    clc
    adc logo_idx_11
    // [92] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$82 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*4,y
    jmp b24_5
    // render_logo::@24_5
  b24_5:
    // [93] (byte~) render_logo::$85 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 5 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*5
    clc
    adc logo_idx_11
    // [94] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$85 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*5,y
    jmp b10
    // render_logo::@10
  b10:
    // [95] (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#21 -- vbuyy=_inc_vbuyy 
    iny
    // [96] (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#11 -- vbuz1=_inc_vbuz1 
    inc logo_idx_4
    // [73] phi from render_logo::@10 to render_logo::@8 [phi:render_logo::@10->render_logo::@8]
  b8_from_b10:
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) render_logo::screen_idx#5 [phi:render_logo::@10->render_logo::@8#0] -- register_copy 
    // [73] phi (byte) render_logo::logo_idx#11 = (byte) render_logo::logo_idx#4 [phi:render_logo::@10->render_logo::@8#1] -- register_copy 
    jmp b8
}
  // sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage($23) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .label _5 = $c
    .label _8 = $1d
    .label step = $19
    .label sintab = $23
    .label x = 3
    .label i = $10
    // [98] call div32u16u 
    // [186] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
    // [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    jmp b2
    // sin16s_gen2::@2
  b2:
    // [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
    // [101] phi from sin16s_gen2::@2 to sin16s_gen2::@1 [phi:sin16s_gen2::@2->sin16s_gen2::@1]
  b1_from_b2:
    // [101] phi (word) sin16s_gen2::i#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    lda #>0
    sta i+1
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[XSIN_SIZE#0]) xsin#0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<xsin
    sta sintab
    lda #>xsin
    sta sintab+1
    // [101] phi (dword) sin16s_gen2::x#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
    // [101] phi from sin16s_gen2::@4 to sin16s_gen2::@1 [phi:sin16s_gen2::@4->sin16s_gen2::@1]
  b1_from_b4:
    // [101] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#0] -- register_copy 
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@4->sin16s_gen2::@1#1] -- register_copy 
    // [101] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#2] -- register_copy 
    jmp b1
    // sin16s_gen2::@1
  b1:
    // [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
    // [103] call sin16s 
    jsr sin16s
    // [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    jmp b3
    // sin16s_gen2::@3
  b3:
    // [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
    // [106] call mul16s 
    jsr mul16s
    // [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    jmp b4
    // sin16s_gen2::@4
  b4:
    // [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
    // [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _8
    lda _5+3
    sta _8+1
    // [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
    // [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
    // [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
    // [113] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>XSIN_SIZE
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<XSIN_SIZE
    bcc b1_from_b4
  !:
    jmp breturn
    // sin16s_gen2::@return
  breturn:
    // [115] return 
    rts
}
  // mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($14) a)
mul16s: {
    .label _9 = $1f
    .label _16 = $1f
    .label m = $c
    .label return = $c
    .label a = $14
    // [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
    // [117] call mul16u 
    // [127] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#1 [phi:mul16s->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word)(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vduz1=vduc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.mb
    lda #>sin16s_gen2.ampl
    sta mul16u.mb+1
    lda #<sin16s_gen2.ampl>>$10
    sta mul16u.mb+2
    lda #>sin16s_gen2.ampl>>$10
    sta mul16u.mb+3
    jsr mul16u
    // [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp b4
    // mul16s::@4
  b4:
    // [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2
    // [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b4
    jmp b3
    // mul16s::@3
  b3:
    // [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _9
    lda m+3
    sta _9+1
    // [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda _16
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _16+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
    // [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
    // [124] phi from mul16s::@3 mul16s::@4 to mul16s::@1 [phi:mul16s::@3/mul16s::@4->mul16s::@1]
  b1_from_b3:
  b1_from_b4:
    // [124] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@4->mul16s::@1#0] -- register_copy 
    jmp b1
    // mul16s::@1
  b1:
    jmp b2
    // mul16s::@2
  b2:
    // [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
    jmp breturn
    // mul16s::@return
  breturn:
    // [126] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($12) a, word zeropage($1d) b)
mul16u: {
    .label mb = 7
    .label a = $12
    .label res = $c
    .label return = $c
    .label b = $1d
    // [128] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
    // mul16u::@1
  b1:
    // [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
    // mul16u::@return
  breturn:
    // [130] return 
    rts
    // mul16u::@2
  b2:
    // [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
    // [132] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
    // mul16u::@4
  b4:
    // [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
    // [134] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  b3_from_b2:
  b3_from_b4:
    // [134] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp b3
    // mul16u::@3
  b3:
    // [135] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
    // [136] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
    // [128] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  b1_from_b3:
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
  // sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($c) x)
sin16s: {
    .label _4 = $c
    .label x = $c
    .label return = $14
    .label x1 = $1f
    .label x2 = $16
    .label x3 = $16
    .label x3_6 = $21
    .label usinx = $14
    .label x4 = $16
    .label x5 = $21
    .label x5_128 = $21
    .label sinx = $14
    .label isUpper = $b
    // [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
    // sin16s::@4
  b4:
    // [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
    // [139] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
    // [139] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
    // sin16s::@1
  b1:
    // [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
    // sin16s::@5
  b5:
    // [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
    // [142] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
    // [142] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
    // sin16s::@2
  b2:
    // [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
    // [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
    // [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
    // [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [147] call mulu16_sel 
    // [177] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    jmp b7
    // sin16s::@7
  b7:
    // [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
    // [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
    // [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [152] call mulu16_sel 
    // [177] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from_b7:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
    jmp b8
    // sin16s::@8
  b8:
    // [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
    // [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
    // [156] call mulu16_sel 
    // [177] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [177] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    jmp b9
    // sin16s::@9
  b9:
    // [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
    // [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
    // [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
    // [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [162] call mulu16_sel 
    // [177] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
    jmp b10
    // sin16s::@10
  b10:
    // [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
    // [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
    // [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [167] call mulu16_sel 
    // [177] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    jmp b11
    // sin16s::@11
  b11:
    // [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
    // [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    // [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
    // [172] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b12
    jmp b6
    // sin16s::@6
  b6:
    // [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc sinx
    sta sinx
    lda #0
    sbc sinx+1
    sta sinx+1
    // [174] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  b3_from_b12:
  b3_from_b6:
    // [174] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
    // sin16s::@3
  b3:
    jmp breturn
    // sin16s::@return
  breturn:
    // [175] return 
    rts
    // sin16s::@12
  b12:
    // [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
    jmp b3_from_b12
}
  // mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($16) v1, word zeropage($1d) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $c
    .label _1 = $c
    .label v1 = $16
    .label v2 = $1d
    .label return = $21
    .label return_1 = $16
    .label return_10 = $16
    // [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
    // [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
    // [180] call mul16u 
    // [127] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- vduz1=vwuz2 
    lda mul16u.b
    sta mul16u.mb
    lda mul16u.b+1
    sta mul16u.mb+1
    lda #0
    sta mul16u.mb+2
    sta mul16u.mb+3
    jsr mul16u
    // [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2
    jmp b1
    // mulu16_sel::@1
  b1:
    // [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
    // [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
    // [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
    jmp breturn
    // mulu16_sel::@return
  breturn:
    // [185] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $21
    .label quotient_lo = $12
    .label return = $19
    // [187] call divr16u 
    // [196] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [196] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    lda #>0
    sta divr16u.rem+1
    jsr divr16u
    // [188] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b1
    // div32u16u::@1
  b1:
    // [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
    // [190] (word) divr16u::rem#4 ← (word) rem16u#1
    // [191] call divr16u 
    // [196] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from_b1:
    // [196] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [192] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b2
    // div32u16u::@2
  b2:
    // [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
    // [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
    // div32u16u::@return
  breturn:
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($1d) dividend, word zeropage($10) rem)
divr16u: {
    .label rem = $10
    .label dividend = $1d
    .label quotient = $12
    .label return = $12
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
    // divr16u::@1
  b1:
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
    // divr16u::@4
  b4:
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
    // [203] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
    // divr16u::@2
  b2:
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
    // [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>XSIN_SIZE
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<XSIN_SIZE
    bcc b3_from_b2
  !:
    jmp b5
    // divr16u::@5
  b5:
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<XSIN_SIZE
    sta rem
    lda rem+1
    sbc #>XSIN_SIZE
    sta rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
    // divr16u::@3
  b3:
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
    // divr16u::@6
  b6:
    // [212] (word) rem16u#1 ← (word) divr16u::rem#11
    jmp breturn
    // divr16u::@return
  breturn:
    // [213] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($14) str, byte register(X) c)
memset: {
    .label end = $23
    .label dst = $14
    .label str = $14
    jmp b1
    // memset::@1
  b1:
    // [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda str
    clc
    adc #<$3e8
    sta end
    lda str+1
    adc #>$3e8
    sta end+1
    // [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
    // [217] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
  b2_from_b1:
  b2_from_b2:
    // [217] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [218] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [219] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2_from_b2
    lda dst
    cmp end
    bne b2_from_b2
    jmp breturn
    // memset::@return
  breturn:
    // [221] return 
    rts
}
  // File Data
  .align $100
  xsin: .fill 2*XSIN_SIZE, 0
.pc = LOGO "LOGO"
  .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp toD0181
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b15_1
Removing instruction jmp b15_2
Removing instruction jmp b15_3
Removing instruction jmp b15_4
Removing instruction jmp b15_5
Removing instruction jmp b7
Removing instruction jmp b7_1
Removing instruction jmp b7_2
Removing instruction jmp b7_3
Removing instruction jmp b7_4
Removing instruction jmp b7_5
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp b11
Removing instruction jmp b32_1
Removing instruction jmp b32_2
Removing instruction jmp b32_3
Removing instruction jmp b32_4
Removing instruction jmp b32_5
Removing instruction jmp b13
Removing instruction jmp b24_1
Removing instruction jmp b24_2
Removing instruction jmp b24_3
Removing instruction jmp b24_4
Removing instruction jmp b24_5
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda BGCOL2
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b6_from_b5 with b4
Replacing label b6_from_b5 with b4
Replacing label b11_from_b13 with b11
Replacing label b1_from_b4 with b1
Replacing label b1_from_b4 with b1
Replacing label b1_from_b4 with b2
Replacing label b3_from_b2 with b3
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b12 with b3
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction b2:
Removing instruction bend_from_b2:
Removing instruction toD0181_from_main:
Removing instruction toD0181:
Removing instruction b4_from_b3:
Removing instruction memset_from_b4:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction sin16s_gen2_from_b2:
Removing instruction b5_from_b2:
Removing instruction loop_from_b5:
Removing instruction b6_from_b5:
Removing instruction b6:
Removing instruction b4_from_b6:
Removing instruction b11_from_b13:
Removing instruction b11_from_b8:
Removing instruction b1_from_b2:
Removing instruction b1_from_b4:
Removing instruction b1_from_b3:
Removing instruction b1_from_b4:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulu16_sel_from_b8:
Removing instruction b3_from_b12:
Removing instruction b3_from_b6:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b3:
Removing instruction memset_from_b3:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b2:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_loop:
Removing instruction b3:
Removing instruction b5:
Removing instruction b4_from_b5:
Removing instruction b1_from_b4:
Removing instruction b2_from_render_logo:
Removing instruction b5_from_b2:
Removing instruction b15_1:
Removing instruction b15_2:
Removing instruction b15_3:
Removing instruction b15_4:
Removing instruction b15_5:
Removing instruction b7:
Removing instruction b5_from_b7:
Removing instruction b7_1:
Removing instruction b7_2:
Removing instruction b7_3:
Removing instruction b7_4:
Removing instruction b7_5:
Removing instruction b4:
Removing instruction b2_from_b4:
Removing instruction b8_from_b1:
Removing instruction b32_1:
Removing instruction b32_2:
Removing instruction b32_3:
Removing instruction b32_4:
Removing instruction b32_5:
Removing instruction b13:
Removing instruction b24_1:
Removing instruction b24_2:
Removing instruction b24_3:
Removing instruction b24_4:
Removing instruction b24_5:
Removing instruction b10:
Removing instruction b8_from_b10:
Removing instruction div32u16u_from_sin16s_gen2:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction mul16u_from_mul16s:
Removing instruction b4:
Removing instruction b3:
Removing instruction b1_from_mul16u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction mulu16_sel_from_b2:
Removing instruction b7:
Removing instruction mulu16_sel_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction mulu16_sel_from_b9:
Removing instruction b10:
Removing instruction mulu16_sel_from_b10:
Removing instruction b11:
Removing instruction b6:
Removing instruction mul16u_from_mulu16_sel:
Removing instruction b1:
Removing instruction breturn:
Removing instruction divr16u_from_div32u16u:
Removing instruction b1:
Removing instruction divr16u_from_b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp breturn
Skipping double jump to b3 in beq b12
Replacing jump to rts with rts in jmp b3
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin16s to b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction breturn:
Removing instruction b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = (byte*) 53282
(byte*) BGCOL3
(const byte*) BGCOL3#0 BGCOL3 = (byte*) 53283
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(byte*) D016
(const byte*) D016#0 D016 = (byte*) 53270
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte) $b
(byte*) LOGO
(const byte*) LOGO#0 LOGO = (byte*) 8192
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword) $6487ed51
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword) $1921fb54
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword) $3243f6a9
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte) 2
(byte) VIC_MCM
(const byte) VIC_MCM#0 VIC_MCM = (byte) $10
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte) 1
(word) XSIN_SIZE
(const word) XSIN_SIZE#0 XSIN_SIZE = (word) $200
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@1
(label) div32u16u::@2
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:33 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:18 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:25 1.3333333333333333
(dword) div32u16u::return#2 return zp ZP_DWORD:25 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:29 2.75
(word) divr16u::dividend#3 dividend zp ZP_WORD:29 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:29 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:18 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:18 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:18 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:16 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:16 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:16 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:16 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:16 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:16 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:16 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:16 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:18 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:18 4.0
(word) divr16u::return#3 return zp ZP_WORD:18 4.0
(void()) loop()
(signed word*~) loop::$1 $1 zp ZP_WORD:22 22.0
(word~) loop::$5 $5 zp ZP_WORD:22 22.0
(label) loop::@1
(label) loop::@2
(label) loop::@3
(label) loop::@4
(label) loop::@5
(label) loop::@6
(signed word) loop::xpos
(signed word) loop::xpos#0 xpos zp ZP_WORD:22 22.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::ch
(byte) main::ch#1 reg byte x 16.5
(byte) main::ch#2 reg byte x 22.0
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN#0&(word) $3fff*(byte) 4|>(word)(const byte*) LOGO#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(byte) memset::c#3 reg byte x 1.5714285714285714
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:20 16.5
(byte*) memset::dst#2 dst zp ZP_WORD:20 17.5
(byte*~) memset::dst#3 dst zp ZP_WORD:20 4.0
(byte*) memset::end
(byte*) memset::end#0 end zp ZP_WORD:35 2.1666666666666665
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp ZP_WORD:20
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$16 $16 zp ZP_WORD:31 4.0
(word~) mul16s::$9 $9 zp ZP_WORD:31 4.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp ZP_WORD:20 2.6
(signed word) mul16s::b
(dword) mul16s::m
(dword) mul16s::m#0 m zp ZP_DWORD:12 2.0
(dword) mul16s::m#1 m zp ZP_DWORD:12 4.0
(dword) mul16s::m#4 m zp ZP_DWORD:12 4.0
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp ZP_DWORD:12 4.333333333333333
(signed dword) mul16s::return#2 return zp ZP_DWORD:12 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:18 101.0
(word) mul16u::a#1 a zp ZP_WORD:18 4.0
(word) mul16u::a#2 a zp ZP_WORD:18 2.0
(word) mul16u::a#3 a zp ZP_WORD:18 67.66666666666666
(word) mul16u::a#6 a zp ZP_WORD:18 6.0
(word) mul16u::b
(word) mul16u::b#1 b zp ZP_WORD:29 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:7 4.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:7 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:7 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:12 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:12 43.85714285714286
(dword) mul16u::res#6 res zp ZP_DWORD:12 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:12 4.0
(dword) mul16u::return#3 return zp ZP_DWORD:12 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:12 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:12 4.0
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:33 4.0
(word) mulu16_sel::return#1 return#1 zp ZP_WORD:22 4.0
(word) mulu16_sel::return#10 return#10 zp ZP_WORD:22 4.0
(word) mulu16_sel::return#11 return zp ZP_WORD:33 4.0
(word) mulu16_sel::return#12 return zp ZP_WORD:33 1.714285714285714
(word) mulu16_sel::return#2 return zp ZP_WORD:33 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:22 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:22 2.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:22 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:22 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:22 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:22 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:29 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:29 4.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:29 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:29 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:29 5.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:16 0.8
(void()) render_logo((signed word) render_logo::xpos)
(byte~) render_logo::$0 reg byte a 4.0
(byte~) render_logo::$1 reg byte a 4.0
(byte~) render_logo::$2 reg byte a 4.0
(signed word~) render_logo::$3 $3 zp ZP_WORD:29 2.0
(byte~) render_logo::$33 reg byte a 202.0
(byte~) render_logo::$36 reg byte a 202.0
(byte~) render_logo::$39 reg byte a 202.0
(byte~) render_logo::$42 reg byte a 202.0
(byte~) render_logo::$45 reg byte a 202.0
(byte~) render_logo::$73 reg byte a 202.0
(byte~) render_logo::$76 reg byte a 202.0
(byte~) render_logo::$79 reg byte a 202.0
(byte~) render_logo::$82 reg byte a 202.0
(byte~) render_logo::$85 reg byte a 202.0
(label) render_logo::@1
(label) render_logo::@10
(label) render_logo::@11
(label) render_logo::@12
(label) render_logo::@13
(label) render_logo::@15_1
(label) render_logo::@15_2
(label) render_logo::@15_3
(label) render_logo::@15_4
(label) render_logo::@15_5
(label) render_logo::@2
(label) render_logo::@24_1
(label) render_logo::@24_2
(label) render_logo::@24_3
(label) render_logo::@24_4
(label) render_logo::@24_5
(label) render_logo::@3
(label) render_logo::@32_1
(label) render_logo::@32_2
(label) render_logo::@32_3
(label) render_logo::@32_4
(label) render_logo::@32_5
(label) render_logo::@4
(label) render_logo::@5
(label) render_logo::@6
(label) render_logo::@7
(label) render_logo::@7_1
(label) render_logo::@7_2
(label) render_logo::@7_3
(label) render_logo::@7_4
(label) render_logo::@7_5
(label) render_logo::@8
(label) render_logo::@9
(label) render_logo::@return
(byte) render_logo::line
(byte) render_logo::logo_idx
(signed byte) render_logo::logo_idx#1 reg byte a 2.0
(byte) render_logo::logo_idx#10 logo_idx zp ZP_BYTE:11 57.714285714285715
(byte) render_logo::logo_idx#11 logo_idx#11 zp ZP_BYTE:2 65.07142857142857
(byte~) render_logo::logo_idx#14 logo_idx#14 zp ZP_BYTE:2 4.0
(byte) render_logo::logo_idx#3 logo_idx zp ZP_BYTE:11 202.0
(byte) render_logo::logo_idx#4 logo_idx#4 zp ZP_BYTE:2 202.0
(byte) render_logo::logo_start
(byte) render_logo::screen_idx
(byte) render_logo::screen_idx#10 reg byte y 77.6923076923077
(byte) render_logo::screen_idx#15 reg byte y 126.25
(byte) render_logo::screen_idx#18 reg byte y 126.25
(byte) render_logo::screen_idx#21 reg byte y 69.92307692307692
(byte) render_logo::screen_idx#3 reg byte y 202.0
(byte) render_logo::screen_idx#4 reg byte y 101.0
(byte) render_logo::screen_idx#5 reg byte y 101.0
(byte) render_logo::screen_idx#6 reg byte y 202.0
(signed byte) render_logo::x_char
(signed byte) render_logo::x_char#0 x_char zp ZP_BYTE:24 0.36363636363636365
(signed word) render_logo::xpos
(signed word) render_logo::xpos#0 xpos zp ZP_WORD:22 2.142857142857143
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$4 $4 zp ZP_DWORD:12 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:11 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:20 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:20 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:20 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:20 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:20 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:20 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:12 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:12 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:12 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:12 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:12 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:31 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:22 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:22 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:33 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:22 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:33 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:33 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$5 $5 zp ZP_DWORD:12 22.0
(word~) sin16s_gen2::$8 $8 zp ZP_WORD:29 11.0
(label) sin16s_gen2::@1
(label) sin16s_gen2::@2
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(const signed word) sin16s_gen2::ampl#0 ampl = (const signed word) sin16s_gen2::max#0-(const signed word) sin16s_gen2::min#0
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 i zp ZP_WORD:16 16.5
(word) sin16s_gen2::i#2 i zp ZP_WORD:16 1.8333333333333333
(signed word) sin16s_gen2::max
(const signed word) sin16s_gen2::max#0 max = (signed word) $140
(signed word) sin16s_gen2::min
(const signed word) sin16s_gen2::min#0 min = (signed word) -$140
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 sintab zp ZP_WORD:35 5.5
(signed word*) sin16s_gen2::sintab#2 sintab zp ZP_WORD:35 3.3000000000000003
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 step zp ZP_DWORD:25 0.8666666666666666
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 x zp ZP_DWORD:3 7.333333333333333
(dword) sin16s_gen2::x#2 x zp ZP_DWORD:3 3.0
(signed word[XSIN_SIZE#0]) xsin
(const signed word[XSIN_SIZE#0]) xsin#0 xsin = { fill( XSIN_SIZE#0, 0) }
(word) xsin_idx
(word) xsin_idx#11 xsin_idx zp ZP_WORD:35 4.125
(word) xsin_idx#19 xsin_idx zp ZP_WORD:35 11.0
(word) xsin_idx#3 xsin_idx zp ZP_WORD:35 11.0

reg byte x [ main::ch#2 main::ch#1 ]
reg byte y [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
zp ZP_BYTE:2 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
reg byte y [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
zp ZP_DWORD:3 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp ZP_DWORD:7 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp ZP_BYTE:11 [ sin16s::isUpper#2 render_logo::logo_idx#10 render_logo::logo_idx#3 ]
zp ZP_DWORD:12 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$4 mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte x [ mulu16_sel::select#5 ]
zp ZP_WORD:16 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ]
zp ZP_WORD:18 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp ZP_WORD:20 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
reg byte x [ memset::c#3 ]
zp ZP_WORD:22 [ loop::$5 loop::$1 loop::xpos#0 render_logo::xpos#0 mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
reg byte a [ render_logo::$0 ]
reg byte a [ render_logo::$1 ]
reg byte a [ render_logo::$2 ]
zp ZP_BYTE:24 [ render_logo::x_char#0 ]
reg byte a [ render_logo::$33 ]
reg byte a [ render_logo::$36 ]
reg byte a [ render_logo::$39 ]
reg byte a [ render_logo::$42 ]
reg byte a [ render_logo::$45 ]
reg byte a [ render_logo::logo_idx#1 ]
reg byte a [ render_logo::$73 ]
reg byte a [ render_logo::$76 ]
reg byte a [ render_logo::$79 ]
reg byte a [ render_logo::$82 ]
reg byte a [ render_logo::$85 ]
zp ZP_DWORD:25 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
zp ZP_WORD:29 [ sin16s_gen2::$8 render_logo::$3 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
reg byte a [ mul16u::$1 ]
zp ZP_WORD:31 [ sin16s::x1#0 mul16s::$9 mul16s::$16 ]
zp ZP_WORD:33 [ div32u16u::quotient_hi#0 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_WORD:35 [ memset::end#0 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 xsin_idx#11 xsin_idx#19 xsin_idx#3 ]


FINAL ASSEMBLER
Score: 46354

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label D016 = $d016
  .const VIC_MCM = $10
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const DARK_GREY = $b
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label LOGO = $2000
  .const XSIN_SIZE = $200
  .label rem16u = $10
  .label xsin_idx = $23
  // @begin
  // @1
  // kickasm
  // kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))     .for (var y=0; y<6	; y++)         .for (var x=0;x<40; x++)             .for(var cp=0; cp<8; cp++)                 .byte logoPic.getMulticolorByte(x,cp+y*8)  }}
  // [2] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [3] call main 
  // [4] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>LOGO)/4&$f
    // asm
    // asm { sei  }
    sei
    // *BORDERCOL = WHITE
    // [6] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
    // *BGCOL2 = DARK_GREY
    // [7] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #DARK_GREY
    sta BGCOL2
    // *BGCOL = *BGCOL2 = DARK_GREY
    // [8] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0) -- _deref_pbuc1=_deref_pbuc2 
    sta BGCOL
    // *BGCOL3 = BLACK
    // [9] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL3
    // [10] phi from main to main::toD0181 [phi:main->main::toD0181]
    // main::toD0181
    // main::@3
    // *D018 = toD018(SCREEN, LOGO)
    // [11] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // *D016 = VIC_MCM
    // [12] *((const byte*) D016#0) ← (const byte) VIC_MCM#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM
    sta D016
    // memset(SCREEN, BLACK, 1000)
    // [13] call memset 
    // [214] phi from main::@3 to memset [phi:main::@3->memset]
    // [214] phi (byte) memset::c#3 = (const byte) BLACK#0 [phi:main::@3->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) SCREEN#0 [phi:main::@3->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta memset.str
    lda #>SCREEN
    sta memset.str+1
    jsr memset
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // memset(COLS, WHITE|8, 1000)
    // [15] call memset 
    // [214] phi from main::@4 to memset [phi:main::@4->memset]
    // [214] phi (byte) memset::c#3 = (const byte) WHITE#0|(byte) 8 [phi:main::@4->memset#0] -- vbuxx=vbuc1 
    ldx #WHITE|8
    // [214] phi (void*) memset::str#3 = (void*)(const byte*) COLS#0 [phi:main::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta memset.str
    lda #>COLS
    sta memset.str+1
    jsr memset
    // [16] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [16] phi (byte) main::ch#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [16] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [16] phi (byte) main::ch#2 = (byte) main::ch#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // SCREEN[ch] = ch
    // [17] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // for(byte ch: 0..239)
    // [18] (byte) main::ch#1 ← ++ (byte) main::ch#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] if((byte) main::ch#1!=(byte) $f0) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f0
    bne b1
    // [20] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // sin16s_gen2(xsin, XSIN_SIZE, -320, 320)
    // [21] call sin16s_gen2 
    // [97] phi from main::@2 to sin16s_gen2 [phi:main::@2->sin16s_gen2]
    jsr sin16s_gen2
    // [22] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // main::@5
    // loop()
    // [23] call loop 
    // [25] phi from main::@5 to loop [phi:main::@5->loop]
    jsr loop
    // main::@return
    // }
    // [24] return 
    rts
}
  // loop
loop: {
    .label _1 = $16
    .label _5 = $16
    .label xpos = $16
    // [26] phi from loop to loop::@1 [phi:loop->loop::@1]
    // [26] phi (word) xsin_idx#11 = (byte) 0 [phi:loop->loop::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    sta xsin_idx+1
    // loop::@1
  b1:
  // Wait for the raster to reach the bottom of the screen
    // loop::@2
  b2:
    // while(*RASTER!=$ff)
    // [27] if(*((const byte*) RASTER#0)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    // loop::@3
    // (*BORDERCOL)++;
    // [28] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // xsin+xsin_idx
    // [29] (word~) loop::$5 ← (word) xsin_idx#11 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda xsin_idx
    asl
    sta _5
    lda xsin_idx+1
    rol
    sta _5+1
    // [30] (signed word*~) loop::$1 ← (const signed word[XSIN_SIZE#0]) xsin#0 + (word~) loop::$5 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _1
    adc #<xsin
    sta _1
    lda _1+1
    adc #>xsin
    sta _1+1
    // xpos = *(xsin+xsin_idx)
    // [31] (signed word) loop::xpos#0 ← *((signed word*~) loop::$1) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (xpos),y
    tax
    iny
    lda (xpos),y
    stx xpos
    sta xpos+1
    // render_logo(xpos)
    // [32] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0
    // [33] call render_logo 
    jsr render_logo
    // loop::@5
    // if(++xsin_idx==XSIN_SIZE)
    // [34] (word) xsin_idx#3 ← ++ (word) xsin_idx#11 -- vwuz1=_inc_vwuz1 
    inc xsin_idx
    bne !+
    inc xsin_idx+1
  !:
    // [35] if((word) xsin_idx#3!=(const word) XSIN_SIZE#0) goto loop::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda xsin_idx+1
    cmp #>XSIN_SIZE
    bne b4
    lda xsin_idx
    cmp #<XSIN_SIZE
    bne b4
    // [37] phi from loop::@5 to loop::@4 [phi:loop::@5->loop::@4]
    // [37] phi (word) xsin_idx#19 = (byte) 0 [phi:loop::@5->loop::@4#0] -- vwuz1=vbuc1 
    lda #<0
    sta xsin_idx
    sta xsin_idx+1
    // [36] phi from loop::@5 to loop::@6 [phi:loop::@5->loop::@6]
    // loop::@6
    // [37] phi from loop::@6 to loop::@4 [phi:loop::@6->loop::@4]
    // [37] phi (word) xsin_idx#19 = (word) xsin_idx#3 [phi:loop::@6->loop::@4#0] -- register_copy 
    // loop::@4
  b4:
    // (*BORDERCOL)--;
    // [38] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // [26] phi from loop::@4 to loop::@1 [phi:loop::@4->loop::@1]
    // [26] phi (word) xsin_idx#11 = (word) xsin_idx#19 [phi:loop::@4->loop::@1#0] -- register_copy 
    jmp b1
}
  // render_logo
// render_logo(signed word zeropage($16) xpos)
render_logo: {
    .label _3 = $1d
    .label xpos = $16
    .label x_char = $18
    .label logo_idx = $b
    .label logo_idx_4 = 2
    .label logo_idx_11 = 2
    .label logo_idx_14 = 2
    // (byte)xpos
    // [39] (byte~) render_logo::$0 ← (byte)(signed word) render_logo::xpos#0 -- vbuaa=_byte_vwsz1 
    lda xpos
    // (byte)xpos&7
    // [40] (byte~) render_logo::$1 ← (byte~) render_logo::$0 & (byte) 7 -- vbuaa=vbuaa_band_vbuc1 
    and #7
    // VIC_MCM|((byte)xpos&7)
    // [41] (byte~) render_logo::$2 ← (const byte) VIC_MCM#0 | (byte~) render_logo::$1 -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_MCM
    // *D016 = VIC_MCM|((byte)xpos&7)
    // [42] *((const byte*) D016#0) ← (byte~) render_logo::$2 -- _deref_pbuc1=vbuaa 
    sta D016
    // xpos/8
    // [43] (signed word~) render_logo::$3 ← (signed word) render_logo::xpos#0 >> (byte) 3 -- vwsz1=vwsz2_ror_3 
    lda xpos+1
    cmp #$80
    ror
    sta _3+1
    lda xpos
    ror
    sta _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    lda _3+1
    cmp #$80
    ror _3+1
    ror _3
    // x_char = (signed byte)(xpos/8)
    // [44] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$3 -- vbsz1=_sbyte_vwsz2 
    lda _3
    sta x_char
    // if(xpos<0)
    // [45] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1 -- vwsz1_lt_0_then_la1 
    lda xpos+1
    bmi b1
    // [46] phi from render_logo to render_logo::@2 [phi:render_logo->render_logo::@2]
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) 0 [phi:render_logo->render_logo::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // render_logo::@2
  b2:
    // while(screen_idx!=logo_start)
    // [47] if((byte) render_logo::screen_idx#18!=(byte)(signed byte) render_logo::x_char#0) goto render_logo::@3 -- vbuyy_neq_vbuz1_then_la1 
    cpy x_char
    bne b3
    // [48] phi from render_logo::@2 to render_logo::@5 [phi:render_logo::@2->render_logo::@5]
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) 0 [phi:render_logo::@2->render_logo::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta logo_idx
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#18 [phi:render_logo::@2->render_logo::@5#1] -- register_copy 
    // render_logo::@5
  b5:
    // while(screen_idx!=40)
    // [49] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@6 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b6
    // render_logo::@return
    // }
    // [50] return 
    rts
    // render_logo::@6
  b6:
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [51] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#10) ← (byte) render_logo::logo_idx#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda logo_idx
    sta SCREEN,y
    // render_logo::@15_1
    // logo_idx+40*line
    // [52] (byte~) render_logo::$33 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 1 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*1
    clc
    adc logo_idx
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [53] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$33 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*1,y
    // render_logo::@15_2
    // logo_idx+40*line
    // [54] (byte~) render_logo::$36 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 2 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*2
    clc
    adc logo_idx
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [55] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$36 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*2,y
    // render_logo::@15_3
    // logo_idx+40*line
    // [56] (byte~) render_logo::$39 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 3 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*3
    clc
    adc logo_idx
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [57] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$39 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*3,y
    // render_logo::@15_4
    // logo_idx+40*line
    // [58] (byte~) render_logo::$42 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 4 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*4
    clc
    adc logo_idx
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [59] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$42 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*4,y
    // render_logo::@15_5
    // logo_idx+40*line
    // [60] (byte~) render_logo::$45 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 5 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*5
    clc
    adc logo_idx
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [61] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$45 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*5,y
    // render_logo::@7
    // screen_idx++;
    // [62] (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#10 -- vbuyy=_inc_vbuyy 
    iny
    // logo_idx++;
    // [63] (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#10 -- vbuz1=_inc_vbuz1 
    inc logo_idx
    // [48] phi from render_logo::@7 to render_logo::@5 [phi:render_logo::@7->render_logo::@5]
    // [48] phi (byte) render_logo::logo_idx#10 = (byte) render_logo::logo_idx#3 [phi:render_logo::@7->render_logo::@5#0] -- register_copy 
    // [48] phi (byte) render_logo::screen_idx#10 = (byte) render_logo::screen_idx#4 [phi:render_logo::@7->render_logo::@5#1] -- register_copy 
    jmp b5
    // render_logo::@3
  b3:
    // (SCREEN+40*line)[screen_idx] = $00
    // [64] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN,y
    // render_logo::@7_1
    // [65] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*1,y
    // render_logo::@7_2
    // [66] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*2,y
    // render_logo::@7_3
    // [67] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*3,y
    // render_logo::@7_4
    // [68] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*4,y
    // render_logo::@7_5
    // [69] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*5,y
    // render_logo::@4
    // screen_idx++;
    // [70] (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#18 -- vbuyy=_inc_vbuyy 
    iny
    // [46] phi from render_logo::@4 to render_logo::@2 [phi:render_logo::@4->render_logo::@2]
    // [46] phi (byte) render_logo::screen_idx#18 = (byte) render_logo::screen_idx#3 [phi:render_logo::@4->render_logo::@2#0] -- register_copy 
    jmp b2
    // render_logo::@1
  b1:
    // -x_char
    // [71] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0 -- vbsaa=_neg_vbsz1 
    lda x_char
    eor #$ff
    clc
    adc #1
    // [72] (byte~) render_logo::logo_idx#14 ← (byte)(signed byte) render_logo::logo_idx#1 -- vbuz1=vbuaa 
    sta logo_idx_14
    // [73] phi from render_logo::@1 to render_logo::@8 [phi:render_logo::@1->render_logo::@8]
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) 0 [phi:render_logo::@1->render_logo::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [73] phi (byte) render_logo::logo_idx#11 = (byte~) render_logo::logo_idx#14 [phi:render_logo::@1->render_logo::@8#1] -- register_copy 
    // render_logo::@8
  b8:
    // while(logo_idx!=40)
    // [74] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp logo_idx_11
    bne b9
    // [75] phi from render_logo::@13 render_logo::@8 to render_logo::@11 [phi:render_logo::@13/render_logo::@8->render_logo::@11]
    // [75] phi (byte) render_logo::screen_idx#15 = (byte) render_logo::screen_idx#6 [phi:render_logo::@13/render_logo::@8->render_logo::@11#0] -- register_copy 
    // render_logo::@11
  b11:
    // while(screen_idx!=40)
    // [76] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@12 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b12
    rts
    // render_logo::@12
  b12:
    // (SCREEN+40*line)[screen_idx] = $00
    // [77] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SCREEN,y
    // render_logo::@32_1
    // [78] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*1,y
    // render_logo::@32_2
    // [79] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*2,y
    // render_logo::@32_3
    // [80] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*3,y
    // render_logo::@32_4
    // [81] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*4,y
    // render_logo::@32_5
    // [82] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    sta SCREEN+$28*5,y
    // render_logo::@13
    // screen_idx++;
    // [83] (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#15 -- vbuyy=_inc_vbuyy 
    iny
    jmp b11
    // render_logo::@9
  b9:
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [84] *((const byte*) SCREEN#0 + (byte) render_logo::screen_idx#21) ← (byte) render_logo::logo_idx#11 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda logo_idx_11
    sta SCREEN,y
    // render_logo::@24_1
    // logo_idx+40*line
    // [85] (byte~) render_logo::$73 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 1 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*1
    clc
    adc logo_idx_11
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [86] *((const byte*) SCREEN#0+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$73 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*1,y
    // render_logo::@24_2
    // logo_idx+40*line
    // [87] (byte~) render_logo::$76 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 2 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*2
    clc
    adc logo_idx_11
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [88] *((const byte*) SCREEN#0+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$76 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*2,y
    // render_logo::@24_3
    // logo_idx+40*line
    // [89] (byte~) render_logo::$79 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 3 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*3
    clc
    adc logo_idx_11
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [90] *((const byte*) SCREEN#0+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$79 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*3,y
    // render_logo::@24_4
    // logo_idx+40*line
    // [91] (byte~) render_logo::$82 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 4 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*4
    clc
    adc logo_idx_11
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [92] *((const byte*) SCREEN#0+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$82 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*4,y
    // render_logo::@24_5
    // logo_idx+40*line
    // [93] (byte~) render_logo::$85 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 5 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$28*5
    clc
    adc logo_idx_11
    // (SCREEN+40*line)[screen_idx] = logo_idx+40*line
    // [94] *((const byte*) SCREEN#0+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$85 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SCREEN+$28*5,y
    // render_logo::@10
    // screen_idx++;
    // [95] (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#21 -- vbuyy=_inc_vbuyy 
    iny
    // logo_idx++;
    // [96] (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#11 -- vbuz1=_inc_vbuz1 
    inc logo_idx_4
    // [73] phi from render_logo::@10 to render_logo::@8 [phi:render_logo::@10->render_logo::@8]
    // [73] phi (byte) render_logo::screen_idx#21 = (byte) render_logo::screen_idx#5 [phi:render_logo::@10->render_logo::@8#0] -- register_copy 
    // [73] phi (byte) render_logo::logo_idx#11 = (byte) render_logo::logo_idx#4 [phi:render_logo::@10->render_logo::@8#1] -- register_copy 
    jmp b8
}
  // sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage($23) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .label _5 = $c
    .label _8 = $1d
    .label step = $19
    .label sintab = $23
    .label x = 3
    .label i = $10
    // div32u16u(PI2_u4f28, wavelength)
    // [98] call div32u16u 
    // [186] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
    jsr div32u16u
    // div32u16u(PI2_u4f28, wavelength)
    // [99] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    // sin16s_gen2::@2
    // step = div32u16u(PI2_u4f28, wavelength)
    // [100] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
    // [101] phi from sin16s_gen2::@2 to sin16s_gen2::@1 [phi:sin16s_gen2::@2->sin16s_gen2::@1]
    // [101] phi (word) sin16s_gen2::i#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta i
    sta i+1
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[XSIN_SIZE#0]) xsin#0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<xsin
    sta sintab
    lda #>xsin
    sta sintab+1
    // [101] phi (dword) sin16s_gen2::x#2 = (byte) 0 [phi:sin16s_gen2::@2->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    sta x+1
    sta x+2
    sta x+3
  // u[4.28]
    // [101] phi from sin16s_gen2::@4 to sin16s_gen2::@1 [phi:sin16s_gen2::@4->sin16s_gen2::@1]
    // [101] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#0] -- register_copy 
    // [101] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@4->sin16s_gen2::@1#1] -- register_copy 
    // [101] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@4->sin16s_gen2::@1#2] -- register_copy 
    // sin16s_gen2::@1
  b1:
    // sin16s(x)
    // [102] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
    // [103] call sin16s 
    jsr sin16s
    // [104] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    // sin16s_gen2::@3
    // mul16s(sin16s(x), ampl)
    // [105] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
    // [106] call mul16s 
    jsr mul16s
    // [107] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    // sin16s_gen2::@4
    // [108] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
    // >mul16s(sin16s(x), ampl)
    // [109] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _8
    lda _5+3
    sta _8+1
    // *sintab++ = offs + (signed word)>mul16s(sin16s(x), ampl)
    // [110] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
    // *sintab++ = offs + (signed word)>mul16s(sin16s(x), ampl);
    // [111] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc sintab
    sta sintab
    bcc !+
    inc sintab+1
  !:
    // x = x + step
    // [112] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
    // for( word i=0; i<wavelength; i++)
    // [113] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
    // [114] if((word) sin16s_gen2::i#1<(const word) XSIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>XSIN_SIZE
    bcc b1
    bne !+
    lda i
    cmp #<XSIN_SIZE
    bcc b1
  !:
    // sin16s_gen2::@return
    // }
    // [115] return 
    rts
}
  // mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($14) a)
mul16s: {
    .label _9 = $1f
    .label _16 = $1f
    .label m = $c
    .label return = $c
    .label a = $14
    // mul16u((word)a, (word) b)
    // [116] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
    // [117] call mul16u 
    // [127] phi from mul16s to mul16u [phi:mul16s->mul16u]
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#1 [phi:mul16s->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word)(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vduz1=vduc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.mb
    lda #>sin16s_gen2.ampl
    sta mul16u.mb+1
    lda #<sin16s_gen2.ampl>>$10
    sta mul16u.mb+2
    lda #>sin16s_gen2.ampl>>$10
    sta mul16u.mb+3
    jsr mul16u
    // mul16u((word)a, (word) b)
    // [118] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    // mul16s::@4
    // m = mul16u((word)a, (word) b)
    // [119] (dword) mul16s::m#0 ← (dword) mul16u::return#2
    // if(a<0)
    // [120] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b2
    // mul16s::@3
    // >m
    // [121] (word~) mul16s::$9 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _9
    lda m+3
    sta _9+1
    // >m = (>m)-(word)b
    // [122] (word~) mul16s::$16 ← (word~) mul16s::$9 - (word)(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda _16
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _16+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
    // [123] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
    // [124] phi from mul16s::@3 mul16s::@4 to mul16s::@1 [phi:mul16s::@3/mul16s::@4->mul16s::@1]
    // [124] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@4->mul16s::@1#0] -- register_copy 
    // mul16s::@1
    // mul16s::@2
  b2:
    // (signed dword)m
    // [125] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
    // mul16s::@return
    // }
    // [126] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($12) a, word zeropage($1d) b)
mul16u: {
    .label mb = 7
    .label a = $12
    .label res = $c
    .label return = $c
    .label b = $1d
    // [128] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (byte) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    sta res+1
    sta res+2
    sta res+3
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  b1:
    // while(a!=0)
    // [129] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    // mul16u::@return
    // }
    // [130] return 
    rts
    // mul16u::@2
  b2:
    // a&1
    // [131] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
    // if( (a&1) != 0)
    // [132] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
    // mul16u::@4
    // res = res + mb
    // [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
    // [134] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [134] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  b3:
    // a = a>>1
    // [135] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr a+1
    ror a
    // mb = mb<<1
    // [136] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
    // [128] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [128] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [128] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [128] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp b1
}
  // sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($c) x)
sin16s: {
    .label _4 = $c
    .label x = $c
    .label return = $14
    .label x1 = $1f
    .label x2 = $16
    .label x3 = $16
    .label x3_6 = $21
    .label usinx = $14
    .label x4 = $16
    .label x5 = $21
    .label x5_128 = $21
    .label sinx = $14
    .label isUpper = $b
    // if(x >= PI_u4f28 )
    // [137] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b4
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b4
  !:
    // sin16s::@4
    // x = x - PI_u4f28
    // [138] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
    // [139] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
    // [139] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b4:
    // [139] phi (byte) sin16s::isUpper#2 = (byte) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
    // [139] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    // sin16s::@1
  b1:
    // if(x >= PI_HALF_u4f28 )
    // [140] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2
  !:
    // sin16s::@5
    // x = PI_u4f28 - x
    // [141] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
    // [142] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
    // [142] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    // sin16s::@2
  b2:
    // x<<3
    // [143] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _4
    rol _4+1
    rol _4+2
    rol _4+3
    dey
    bne !-
    // x1 = >x<<3
    // [144] (word) sin16s::x1#0 ← > (dword~) sin16s::$4 -- vwuz1=_hi_vduz2 
    lda _4+2
    sta x1
    lda _4+3
    sta x1+1
    // mulu16_sel(x1, x1, 0)
    // [145] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
    // [146] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [147] call mulu16_sel 
    // [177] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x1, x1, 0)
    // [148] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    // sin16s::@7
    // x2 = mulu16_sel(x1, x1, 0)
    // [149] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
    // mulu16_sel(x2, x1, 1)
    // [150] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
    // [151] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [152] call mulu16_sel 
    // [177] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x2, x1, 1)
    // [153] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
    // sin16s::@8
    // x3 = mulu16_sel(x2, x1, 1)
    // [154] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
    // mulu16_sel(x3, $10000/6, 1)
    // [155] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
    // [156] call mulu16_sel 
    // [177] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [177] phi (word) mulu16_sel::v2#5 = (word)(number) $10000/(number) 6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, $10000/6, 1)
    // [157] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    // sin16s::@9
    // x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [158] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
    // usinx = x1 - x3_6
    // [159] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
    // mulu16_sel(x3, x1, 0)
    // [160] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
    // [161] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [162] call mulu16_sel 
    // [177] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, x1, 0)
    // [163] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
    // sin16s::@10
    // x4 = mulu16_sel(x3, x1, 0)
    // [164] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
    // mulu16_sel(x4, x1, 0)
    // [165] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
    // [166] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
    // [167] call mulu16_sel 
    // [177] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
    // [177] phi (byte) mulu16_sel::select#5 = (byte) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [177] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x4, x1, 0)
    // [168] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    // sin16s::@11
    // x5 = mulu16_sel(x4, x1, 0)
    // [169] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
    // x5_128 = x5>>4
    // [170] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4 -- vwuz1=vwuz1_ror_4 
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    lsr x5_128+1
    ror x5_128
    // usinx = usinx + x5_128
    // [171] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
    // if(isUpper!=0)
    // [172] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b3
    // sin16s::@6
    // sinx = -(signed word)usinx
    // [173] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc sinx
    sta sinx
    lda #0
    sbc sinx+1
    sta sinx+1
    // [174] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
    // [174] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    // sin16s::@3
  b3:
    // sin16s::@return
    // }
    // [175] return 
    rts
    // sin16s::@12
    // [176] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
}
  // mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($16) v1, word zeropage($1d) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $c
    .label _1 = $c
    .label v1 = $16
    .label v2 = $1d
    .label return = $21
    .label return_1 = $16
    .label return_10 = $16
    // mul16u(v1, v2)
    // [178] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
    // [179] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
    // [180] call mul16u 
    // [127] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
    // [127] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [127] phi (dword) mul16u::mb#0 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- vduz1=vwuz2 
    lda mul16u.b
    sta mul16u.mb
    lda mul16u.b+1
    sta mul16u.mb+1
    lda #0
    sta mul16u.mb+2
    sta mul16u.mb+3
    jsr mul16u
    // mul16u(v1, v2)
    // [181] (dword) mul16u::return#3 ← (dword) mul16u::res#2
    // mulu16_sel::@1
    // [182] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
    // mul16u(v1, v2)<<select
    // [183] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
    // >mul16u(v1, v2)<<select
    // [184] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
    // mulu16_sel::@return
    // }
    // [185] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $21
    .label quotient_lo = $12
    .label return = $19
    // divr16u(>dividend, divisor, 0)
    // [187] call divr16u 
    // [196] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [196] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (byte) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
    // divr16u(>dividend, divisor, 0)
    // [188] (word) divr16u::return#2 ← (word) divr16u::return#0
    // div32u16u::@1
    // quotient_hi = divr16u(>dividend, divisor, 0)
    // [189] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
    // divr16u(<dividend, divisor, rem16u)
    // [190] (word) divr16u::rem#4 ← (word) rem16u#1
    // [191] call divr16u 
    // [196] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [196] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
    // [196] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(<dividend, divisor, rem16u)
    // [192] (word) divr16u::return#3 ← (word) divr16u::return#0
    // div32u16u::@2
    // quotient_lo = divr16u(<dividend, divisor, rem16u)
    // [193] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
    // quotient = { quotient_hi, quotient_lo}
    // [194] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    // div32u16u::@return
    // }
    // [195] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($1d) dividend, word zeropage($10) rem)
divr16u: {
    .label rem = $10
    .label dividend = $1d
    .label quotient = $12
    .label return = $12
    // [197] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [197] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [197] phi (word) divr16u::quotient#3 = (byte) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [197] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [197] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [197] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [197] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [197] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  b1:
    // rem = rem << 1
    // [198] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
    // >dividend
    // [199] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
    // >dividend & $80
    // [200] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [201] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
    // divr16u::@4
    // rem = rem | 1
    // [202] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
    // [203] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [203] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  b2:
    // dividend = dividend << 1
    // [204] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
    // quotient = quotient << 1
    // [205] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
    // if(rem>=divisor)
    // [206] if((word) divr16u::rem#6<(const word) XSIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>XSIN_SIZE
    bcc b3
    bne !+
    lda rem
    cmp #<XSIN_SIZE
    bcc b3
  !:
    // divr16u::@5
    // quotient++;
    // [207] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
    // rem = rem - divisor
    // [208] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) XSIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<XSIN_SIZE
    sta rem
    lda rem+1
    sbc #>XSIN_SIZE
    sta rem+1
    // [209] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [209] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [209] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  b3:
    // for( byte i : 0..15)
    // [210] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [211] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
    // divr16u::@6
    // rem16u = rem
    // [212] (word) rem16u#1 ← (word) divr16u::rem#11
    // divr16u::@return
    // }
    // [213] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($14) str, byte register(X) c)
memset: {
    .label end = $23
    .label dst = $14
    .label str = $14
    // memset::@1
    // end = (char*)str + num
    // [215] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda str
    clc
    adc #<$3e8
    sta end
    lda str+1
    adc #>$3e8
    sta end+1
    // [216] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
    // [217] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
    // [217] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    // memset::@2
  b2:
    // *dst = c
    // [218] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [219] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [220] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2
    lda dst
    cmp end
    bne b2
    // memset::@return
    // }
    // [221] return 
    rts
}
  // File Data
  .align $100
  xsin: .fill 2*XSIN_SIZE, 0
.pc = LOGO "LOGO"
  .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)


