const nomodify byte* CHARSET = (byte*) 24576
const nomodify struct F018_DMAGIC* DMA = (struct F018_DMAGIC*) 55040
const nomodify byte DMA_COMMAND_FILL = 3
const nomodify byte DMA_OPTION_DEST_MB = $81
const nomodify byte DMA_OPTION_END = 0
const nomodify byte DMA_OPTION_FORMAT_F018B = $a
const byte* LOGO[$2d*$19*8]  = kickasm {{ .var pic = LoadPicture("camelot.png", List().add($ffffff, $000000))
	.for (var x=0;x<45; x++)
    	.for (var y=0; y<25*8; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const byte OFFSET_STRUCT_DMA_LIST_F018B_COUNT = 1
const byte OFFSET_STRUCT_DMA_LIST_F018B_DEST = 6
const byte OFFSET_STRUCT_DMA_LIST_F018B_DEST_BANK = 8
const byte OFFSET_STRUCT_DMA_LIST_F018B_SRC = 3
const byte OFFSET_STRUCT_F018_DMAGIC_ADDRBANK = 2
const byte OFFSET_STRUCT_F018_DMAGIC_ADDRMB = 4
const byte OFFSET_STRUCT_F018_DMAGIC_ADDRMSB = 1
const byte OFFSET_STRUCT_F018_DMAGIC_EN018B = 3
const byte OFFSET_STRUCT_F018_DMAGIC_ETRIG = 5
const byte OFFSET_STRUCT_MEGA65_VICIV_BBDRPOS_HI = $4b
const byte OFFSET_STRUCT_MEGA65_VICIV_BBDRPOS_LO = $4a
const byte OFFSET_STRUCT_MEGA65_VICIV_BG_COLOR = $21
const byte OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_HILO = $6a
const byte OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOHI = $69
const byte OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOLO = $68
const byte OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_HI = $59
const byte OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_LO = $58
const byte OFFSET_STRUCT_MEGA65_VICIV_CHRCOUNT = $5e
const byte OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
const byte OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
const byte OFFSET_STRUCT_MEGA65_VICIV_KEY = $2f
const byte OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_HIHI = $63
const byte OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_HILO = $62
const byte OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOHI = $61
const byte OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOLO = $60
const byte OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_HI = $5d
const byte OFFSET_STRUCT_MEGA65_VICIV_SIDBDRWD_LO = $5c
const byte OFFSET_STRUCT_MEGA65_VICIV_TBDRPOS_HI = $49
const byte OFFSET_STRUCT_MEGA65_VICIV_TBDRPOS_LO = $48
const byte OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_HI = $4d
const byte OFFSET_STRUCT_MEGA65_VICIV_TEXTXPOS_LO = $4c
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* SCREEN = (byte*) 20480
const byte SIZEOF_WORD = 2
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify struct MEGA65_VICIV* VICIV = (struct MEGA65_VICIV*) 53248
const nomodify byte WHITE = 1
void main()
byte~ main::$10 reg byte a 202.0
word main::c
word main::c#0 c zp[2]:8 22.0
word main::c#1 c zp[2]:8 101.0
word main::c#2 c zp[2]:8 78.5
byte main::col
byte main::col#1 reg byte x 22.0
byte main::col#2 reg byte x 4.125
word* main::erow
word* main::erow#1 erow zp[2]:2 11.0
word* main::erow#5 erow zp[2]:2 13.666666666666666
byte main::i
byte main::i#1 reg byte z 202.0
byte main::i#2 reg byte z 80.8
byte* main::logo_dest
byte* main::logo_dest#1 logo_dest zp[2]:6 7.333333333333333
byte* main::logo_dest#5 logo_dest zp[2]:6 20.5
byte* main::logo_src
byte* main::logo_src#1 logo_src zp[2]:4 11.0
byte* main::logo_src#5 logo_src zp[2]:4 17.571428571428573
byte main::r
byte main::r#1 reg byte x 22.0
byte main::r#2 reg byte x 3.3000000000000003
byte main::y
byte main::y#1 reg byte y 202.0
byte main::y#2 reg byte y 168.33333333333331
void memoryRemap(byte memoryRemap::remapBlocks , word memoryRemap::lowerPageOffset , word memoryRemap::upperPageOffset)
const byte* memoryRemap::aVal = (byte*) 252
word memoryRemap::lowerPageOffset
byte memoryRemap::remapBlocks
word memoryRemap::upperPageOffset
const byte* memoryRemap::xVal = (byte*) 253
const byte* memoryRemap::yVal = (byte*) 254
const byte* memoryRemap::zVal = (byte*) 255
void memset_dma(void* memset_dma::dest , byte memset_dma::fill , word memset_dma::num)
void* memset_dma::dest
void* memset_dma::dest#2 dest zp[2]:12
byte memset_dma::dmaMode
byte memset_dma::dmaMode#0 reg byte x 2.4444444444444446
byte memset_dma::fill
byte memset_dma::fill#2 reg byte z
word memset_dma::num
word memset_dma::num#2 num zp[2]:10 5.5
void memset_dma256(byte memset_dma256::dest_mb , byte memset_dma256::dest_bank , void* memset_dma256::dest , byte memset_dma256::fill , word memset_dma256::num)
void* memset_dma256::dest
const void* memset_dma256::dest#0 dest = (void*) 0
byte memset_dma256::dest_bank
const byte memset_dma256::dest_bank#0 dest_bank = 8
byte memset_dma256::dest_mb
const byte memset_dma256::dest_mb#0 dest_mb = $ff
byte memset_dma256::dmaMode
byte memset_dma256::dmaMode#0 reg byte x 2.0
struct DMA_LIST_F018B* memset_dma256::f018b
const struct DMA_LIST_F018B* memset_dma256::f018b#0 f018b = (struct DMA_LIST_F018B*)memset_dma_command256+4
byte memset_dma256::fill
word memset_dma256::num
const word memset_dma256::num#0 num = (word)$2d*$19*2
struct DMA_LIST_F018B memset_dma_command loadstore mem[12] = { command: DMA_COMMAND_FILL, count: 0, src: (byte*) 0, src_bank: 0, dest: (byte*) 0, dest_bank: 0, sub_command: 0, modulo: 0 }
const byte* memset_dma_command256[]  = { DMA_OPTION_DEST_MB, 0, DMA_OPTION_FORMAT_F018B, DMA_OPTION_END, DMA_COMMAND_FILL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

reg byte x [ main::r#2 main::r#1 ]
zp[2]:2 [ main::erow#5 main::erow#1 ]
reg byte x [ main::col#2 main::col#1 ]
zp[2]:4 [ main::logo_src#5 main::logo_src#1 ]
zp[2]:6 [ main::logo_dest#5 main::logo_dest#1 ]
reg byte y [ main::y#2 main::y#1 ]
reg byte z [ main::i#2 main::i#1 ]
zp[2]:8 [ main::c#2 main::c#0 main::c#1 ]
zp[2]:10 [ memset_dma::num#2 ]
reg byte z [ memset_dma::fill#2 ]
zp[2]:12 [ memset_dma::dest#2 ]
reg byte a [ main::$10 ]
reg byte x [ memset_dma::dmaMode#0 ]
reg byte x [ memset_dma256::dmaMode#0 ]
mem[12] [ memset_dma_command ]
