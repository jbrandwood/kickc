Inlined call call __init 

CONTROL FLOW GRAPH SSA

(byte*()) malloc()
malloc: scope:[malloc]  from __start::@2 __start::__init1
  (byte*) MEM#6 ← phi( __start::@2/(byte*) MEM#3 __start::__init1/(byte*) MEM#2 )
  (byte*) MEM#0 ← ++ (byte*) MEM#6
  (byte*) malloc::return#0 ← (byte*) MEM#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  (byte*) MEM#7 ← phi( malloc/(byte*) MEM#0 )
  (byte*) malloc::return#4 ← phi( malloc/(byte*) malloc::return#0 )
  (byte*) malloc::return#1 ← (byte*) malloc::return#4
  (byte*) MEM#1 ← (byte*) MEM#7
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) SCREEN_2#2 ← phi( __start::@1/(byte*) SCREEN_2#4 )
  (byte*) SCREEN_1#2 ← phi( __start::@1/(byte*) SCREEN_1#4 )
  *((byte*) SCREEN_1#2) ← (number) 0
  *((byte*) SCREEN_2#2) ← (number) 0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) MEM#2 ← (byte*)(number) $400
  call malloc 
  (byte*) malloc::return#2 ← (byte*) malloc::return#1
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  (byte*) MEM#8 ← phi( __start::__init1/(byte*) MEM#1 )
  (byte*) malloc::return#5 ← phi( __start::__init1/(byte*) malloc::return#2 )
  (byte*~) __start::__init1_$0 ← (byte*) malloc::return#5
  (byte*) MEM#3 ← (byte*) MEM#8
  (byte*) SCREEN_1#0 ← (byte*~) __start::__init1_$0
  call malloc 
  (byte*) malloc::return#3 ← (byte*) malloc::return#1
  to:__start::@3
__start::@3: scope:[__start]  from __start::@2
  (byte*) SCREEN_1#6 ← phi( __start::@2/(byte*) SCREEN_1#0 )
  (byte*) MEM#9 ← phi( __start::@2/(byte*) MEM#1 )
  (byte*) malloc::return#6 ← phi( __start::@2/(byte*) malloc::return#3 )
  (byte*~) __start::__init1_$1 ← (byte*) malloc::return#6
  (byte*) MEM#4 ← (byte*) MEM#9
  (byte*) SCREEN_2#0 ← (byte*~) __start::__init1_$1
  to:__start::@1
__start::@1: scope:[__start]  from __start::@3
  (byte*) MEM#12 ← phi( __start::@3/(byte*) MEM#4 )
  (byte*) SCREEN_2#4 ← phi( __start::@3/(byte*) SCREEN_2#0 )
  (byte*) SCREEN_1#4 ← phi( __start::@3/(byte*) SCREEN_1#6 )
  call main 
  to:__start::@4
__start::@4: scope:[__start]  from __start::@1
  (byte*) SCREEN_2#5 ← phi( __start::@1/(byte*) SCREEN_2#4 )
  (byte*) SCREEN_1#5 ← phi( __start::@1/(byte*) SCREEN_1#4 )
  (byte*) MEM#11 ← phi( __start::@1/(byte*) MEM#12 )
  to:__start::@return
__start::@return: scope:[__start]  from __start::@4
  (byte*) SCREEN_2#3 ← phi( __start::@4/(byte*) SCREEN_2#5 )
  (byte*) SCREEN_1#3 ← phi( __start::@4/(byte*) SCREEN_1#5 )
  (byte*) MEM#10 ← phi( __start::@4/(byte*) MEM#11 )
  (byte*) MEM#5 ← (byte*) MEM#10
  (byte*) SCREEN_1#1 ← (byte*) SCREEN_1#3
  (byte*) SCREEN_2#1 ← (byte*) SCREEN_2#3
  return 
  to:@return

SYMBOL TABLE SSA
(byte*) MEM
(byte*) MEM#0
(byte*) MEM#1
(byte*) MEM#10
(byte*) MEM#11
(byte*) MEM#12
(byte*) MEM#2
(byte*) MEM#3
(byte*) MEM#4
(byte*) MEM#5
(byte*) MEM#6
(byte*) MEM#7
(byte*) MEM#8
(byte*) MEM#9
(byte*) SCREEN_1
(byte*) SCREEN_1#0
(byte*) SCREEN_1#1
(byte*) SCREEN_1#2
(byte*) SCREEN_1#3
(byte*) SCREEN_1#4
(byte*) SCREEN_1#5
(byte*) SCREEN_1#6
(byte*) SCREEN_2
(byte*) SCREEN_2#0
(byte*) SCREEN_2#1
(byte*) SCREEN_2#2
(byte*) SCREEN_2#3
(byte*) SCREEN_2#4
(byte*) SCREEN_2#5
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@3
(label) __start::@4
(label) __start::@return
(label) __start::__init1
(byte*~) __start::__init1_$0
(byte*~) __start::__init1_$1
(void()) main()
(label) main::@return
(byte*()) malloc()
(label) malloc::@return
(byte*) malloc::return
(byte*) malloc::return#0
(byte*) malloc::return#1
(byte*) malloc::return#2
(byte*) malloc::return#3
(byte*) malloc::return#4
(byte*) malloc::return#5
(byte*) malloc::return#6

Adding number conversion cast (unumber) 0 in *((byte*) SCREEN_1#2) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) SCREEN_2#2) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*) SCREEN_1#2) ← (unumber)(number) 0
Inlining cast *((byte*) SCREEN_2#2) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias malloc::return#0 = malloc::return#4 malloc::return#1 
Alias MEM#0 = MEM#7 MEM#1 
Alias malloc::return#2 = malloc::return#5 
Alias MEM#3 = MEM#8 
Alias SCREEN_1#0 = __start::__init1_$0 SCREEN_1#6 SCREEN_1#4 SCREEN_1#5 SCREEN_1#3 SCREEN_1#1 
Alias malloc::return#3 = malloc::return#6 
Alias MEM#10 = MEM#4 MEM#9 MEM#12 MEM#11 MEM#5 
Alias SCREEN_2#0 = __start::__init1_$1 SCREEN_2#4 SCREEN_2#5 SCREEN_2#3 SCREEN_2#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) SCREEN_1#2 (byte*) SCREEN_1#0
Identical Phi Values (byte*) SCREEN_2#2 (byte*) SCREEN_2#0
Identical Phi Values (byte*) MEM#3 (byte*) MEM#0
Identical Phi Values (byte*) MEM#10 (byte*) MEM#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) MEM#2 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) MEM#2
Constant inlined MEM#2 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@4
CALL GRAPH
Calls in [__start] to malloc:2 malloc:6 main:10 

Created 1 initial phi equivalence classes
Coalesced [5] MEM#13 ← MEM#0
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) __start::@4
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] phi()
  [2] call malloc 
  [3] (byte*) malloc::return#2 ← (byte*) malloc::return#0
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  [4] (byte*) SCREEN_1#0 ← (byte*) malloc::return#2
  [5] call malloc 
  [6] (byte*) malloc::return#3 ← (byte*) malloc::return#0
  to:__start::@3
__start::@3: scope:[__start]  from __start::@2
  [7] (byte*) SCREEN_2#0 ← (byte*) malloc::return#3
  to:__start::@1
__start::@1: scope:[__start]  from __start::@3
  [8] phi()
  [9] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [10] return 
  to:@return

(byte*()) malloc()
malloc: scope:[malloc]  from __start::@2 __start::__init1
  [11] (byte*) MEM#6 ← phi( __start::@2/(byte*) MEM#0 __start::__init1/(byte*) 1024 )
  [12] (byte*) MEM#0 ← ++ (byte*) MEM#6
  [13] (byte*) malloc::return#0 ← (byte*) MEM#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [14] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [15] *((byte*) SCREEN_1#0) ← (byte) 0
  [16] *((byte*) SCREEN_2#0) ← (byte) 0
  to:main::@return
main::@return: scope:[main]  from main
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) MEM
(byte*) MEM#0 4.0
(byte*) MEM#6 13.0
(byte*) SCREEN_1
(byte*) SCREEN_1#0 2.6
(byte*) SCREEN_2
(byte*) SCREEN_2#0 4.333333333333333
(void()) __start()
(void()) main()
(byte*()) malloc()
(byte*) malloc::return
(byte*) malloc::return#0 3.75
(byte*) malloc::return#2 4.0
(byte*) malloc::return#3 4.0

Initial phi equivalence classes
[ MEM#6 MEM#0 ]
Added variable malloc::return#2 to live range equivalence class [ malloc::return#2 ]
Added variable SCREEN_1#0 to live range equivalence class [ SCREEN_1#0 ]
Added variable malloc::return#3 to live range equivalence class [ malloc::return#3 ]
Added variable SCREEN_2#0 to live range equivalence class [ SCREEN_2#0 ]
Added variable malloc::return#0 to live range equivalence class [ malloc::return#0 ]
Complete equivalence classes
[ MEM#6 MEM#0 ]
[ malloc::return#2 ]
[ SCREEN_1#0 ]
[ malloc::return#3 ]
[ SCREEN_2#0 ]
[ malloc::return#0 ]
Allocated zp[2]:2 [ MEM#6 MEM#0 ]
Allocated zp[2]:4 [ malloc::return#2 ]
Allocated zp[2]:6 [ SCREEN_1#0 ]
Allocated zp[2]:8 [ malloc::return#3 ]
Allocated zp[2]:10 [ SCREEN_2#0 ]
Allocated zp[2]:12 [ malloc::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Error where the compiler is reusing the same ZP for two byte* variables.
// SCREEN_1 and SCREEN_2 are both allocated to ZP: 4
// Problem is that outside main() scope statements have zero call-paths and then isStatementAllocationOverlapping() never checks liveranges
// CallPath code must be rewritten to use @begin as the outermost call instead of main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label MEM = 2
  .label SCREEN_1 = 6
  .label SCREEN_2 = $a
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] call malloc 
    // [11] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
  malloc_from___init1:
    // [11] phi (byte*) MEM#6 = (byte*) 1024 [phi:__start::__init1->malloc#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z MEM
    lda #>$400
    sta.z MEM+1
    jsr malloc
    // [3] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda.z malloc.return
    sta.z malloc.return_1
    lda.z malloc.return+1
    sta.z malloc.return_1+1
    jmp __b2
    // __start::@2
  __b2:
    // [4] (byte*) SCREEN_1#0 ← (byte*) malloc::return#2 -- pbuz1=pbuz2 
    lda.z malloc.return_1
    sta.z SCREEN_1
    lda.z malloc.return_1+1
    sta.z SCREEN_1+1
    // [5] call malloc 
    // [11] phi from __start::@2 to malloc [phi:__start::@2->malloc]
  malloc_from___b2:
    // [11] phi (byte*) MEM#6 = (byte*) MEM#0 [phi:__start::@2->malloc#0] -- register_copy 
    jsr malloc
    // [6] (byte*) malloc::return#3 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda.z malloc.return
    sta.z malloc.return_2
    lda.z malloc.return+1
    sta.z malloc.return_2+1
    jmp __b3
    // __start::@3
  __b3:
    // [7] (byte*) SCREEN_2#0 ← (byte*) malloc::return#3 -- pbuz1=pbuz2 
    lda.z malloc.return_2
    sta.z SCREEN_2
    lda.z malloc.return_2+1
    sta.z SCREEN_2+1
    // [8] phi from __start::@3 to __start::@1 [phi:__start::@3->__start::@1]
  __b1_from___b3:
    jmp __b1
    // __start::@1
  __b1:
    // [9] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [10] return 
    rts
}
  // malloc
malloc: {
    .label return = $c
    .label return_1 = 4
    .label return_2 = 8
    // [12] (byte*) MEM#0 ← ++ (byte*) MEM#6 -- pbuz1=_inc_pbuz1 
    inc.z MEM
    bne !+
    inc.z MEM+1
  !:
    // [13] (byte*) malloc::return#0 ← (byte*) MEM#0 -- pbuz1=pbuz2 
    lda.z MEM
    sta.z return
    lda.z MEM+1
    sta.z return+1
    jmp __breturn
    // malloc::@return
  __breturn:
    // [14] return 
    rts
}
  // main
main: {
    // [15] *((byte*) SCREEN_1#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (SCREEN_1),y
    // [16] *((byte*) SCREEN_2#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (SCREEN_2),y
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] (byte*) malloc::return#2 ← (byte*) malloc::return#0 [ malloc::return#2 MEM#0 ] (  [ malloc::return#2 MEM#0 ] { { malloc::return#0 = malloc::return#2 } }  ) always clobbers reg byte a 
Statement [4] (byte*) SCREEN_1#0 ← (byte*) malloc::return#2 [ SCREEN_1#0 MEM#0 ] (  [ SCREEN_1#0 MEM#0 ] { { MEM#0 = MEM#6 } { malloc::return#0 = malloc::return#3 } }  ) always clobbers reg byte a 
Statement [6] (byte*) malloc::return#3 ← (byte*) malloc::return#0 [ SCREEN_1#0 malloc::return#3 ] (  [ SCREEN_1#0 malloc::return#3 ] { { MEM#0 = MEM#6 } { malloc::return#0 = malloc::return#3 } }  ) always clobbers reg byte a 
Statement [7] (byte*) SCREEN_2#0 ← (byte*) malloc::return#3 [ SCREEN_1#0 SCREEN_2#0 ] (  [ SCREEN_1#0 SCREEN_2#0 ] { }  ) always clobbers reg byte a 
Statement [13] (byte*) malloc::return#0 ← (byte*) MEM#0 [ malloc::return#0 MEM#0 ] ( malloc:2 [ malloc::return#0 MEM#0 ] { { malloc::return#0 = malloc::return#2 } }  malloc:5 [ SCREEN_1#0 malloc::return#0 MEM#0 ] { { MEM#0 = MEM#6 } { malloc::return#0 = malloc::return#3 } }  ) always clobbers reg byte a 
Statement [15] *((byte*) SCREEN_1#0) ← (byte) 0 [ SCREEN_2#0 ] ( main:9 [ SCREEN_2#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [16] *((byte*) SCREEN_2#0) ← (byte) 0 [ ] ( main:9 [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ MEM#6 MEM#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ malloc::return#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ SCREEN_1#0 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ malloc::return#3 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ SCREEN_2#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ malloc::return#0 ] : zp[2]:12 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 17: zp[2]:2 [ MEM#6 MEM#0 ] 4.33: zp[2]:10 [ SCREEN_2#0 ] 2.6: zp[2]:6 [ SCREEN_1#0 ] 
Uplift Scope [malloc] 4: zp[2]:4 [ malloc::return#2 ] 4: zp[2]:8 [ malloc::return#3 ] 3.75: zp[2]:12 [ malloc::return#0 ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [] best 159 combination zp[2]:2 [ MEM#6 MEM#0 ] zp[2]:10 [ SCREEN_2#0 ] zp[2]:6 [ SCREEN_1#0 ] 
Uplifting [malloc] best 159 combination zp[2]:4 [ malloc::return#2 ] zp[2]:8 [ malloc::return#3 ] zp[2]:12 [ malloc::return#0 ] 
Uplifting [main] best 159 combination 
Uplifting [__start] best 159 combination 
Coalescing zero page register [ zp[2]:4 [ malloc::return#2 ] ] with [ zp[2]:6 [ SCREEN_1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ malloc::return#3 ] ] with [ zp[2]:10 [ SCREEN_2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:8 [ malloc::return#3 SCREEN_2#0 ] ] with [ zp[2]:12 [ malloc::return#0 ] ] - score: 1
Allocated (was zp[2]:8) zp[2]:6 [ malloc::return#3 SCREEN_2#0 malloc::return#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Error where the compiler is reusing the same ZP for two byte* variables.
// SCREEN_1 and SCREEN_2 are both allocated to ZP: 4
// Problem is that outside main() scope statements have zero call-paths and then isStatementAllocationOverlapping() never checks liveranges
// CallPath code must be rewritten to use @begin as the outermost call instead of main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label MEM = 2
  .label SCREEN_1 = 4
  .label SCREEN_2 = 6
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] call malloc 
    // [11] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
  malloc_from___init1:
    // [11] phi (byte*) MEM#6 = (byte*) 1024 [phi:__start::__init1->malloc#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z MEM
    lda #>$400
    sta.z MEM+1
    jsr malloc
    // [3] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda.z malloc.return
    sta.z malloc.return_1
    lda.z malloc.return+1
    sta.z malloc.return_1+1
    jmp __b2
    // __start::@2
  __b2:
    // [4] (byte*) SCREEN_1#0 ← (byte*) malloc::return#2
    // [5] call malloc 
    // [11] phi from __start::@2 to malloc [phi:__start::@2->malloc]
  malloc_from___b2:
    // [11] phi (byte*) MEM#6 = (byte*) MEM#0 [phi:__start::@2->malloc#0] -- register_copy 
    jsr malloc
    // [6] (byte*) malloc::return#3 ← (byte*) malloc::return#0
    jmp __b3
    // __start::@3
  __b3:
    // [7] (byte*) SCREEN_2#0 ← (byte*) malloc::return#3
    // [8] phi from __start::@3 to __start::@1 [phi:__start::@3->__start::@1]
  __b1_from___b3:
    jmp __b1
    // __start::@1
  __b1:
    // [9] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [10] return 
    rts
}
  // malloc
malloc: {
    .label return = 6
    .label return_1 = 4
    // [12] (byte*) MEM#0 ← ++ (byte*) MEM#6 -- pbuz1=_inc_pbuz1 
    inc.z MEM
    bne !+
    inc.z MEM+1
  !:
    // [13] (byte*) malloc::return#0 ← (byte*) MEM#0 -- pbuz1=pbuz2 
    lda.z MEM
    sta.z return
    lda.z MEM+1
    sta.z return+1
    jmp __breturn
    // malloc::@return
  __breturn:
    // [14] return 
    rts
}
  // main
main: {
    // [15] *((byte*) SCREEN_1#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (SCREEN_1),y
    // [16] *((byte*) SCREEN_2#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (SCREEN_2),y
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __init1_from___start:
Removing instruction malloc_from___init1:
Removing instruction malloc_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(byte*) MEM
(byte*) MEM#0 MEM zp[2]:2 4.0
(byte*) MEM#6 MEM zp[2]:2 13.0
(byte*) SCREEN_1
(byte*) SCREEN_1#0 SCREEN_1 zp[2]:4 2.6
(byte*) SCREEN_2
(byte*) SCREEN_2#0 SCREEN_2 zp[2]:6 4.333333333333333
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@3
(label) __start::@return
(label) __start::__init1
(void()) main()
(label) main::@return
(byte*()) malloc()
(label) malloc::@return
(byte*) malloc::return
(byte*) malloc::return#0 return zp[2]:6 3.75
(byte*) malloc::return#2 return_1 zp[2]:4 4.0
(byte*) malloc::return#3 return zp[2]:6 4.0

zp[2]:2 [ MEM#6 MEM#0 ]
zp[2]:4 [ malloc::return#2 SCREEN_1#0 ]
zp[2]:6 [ malloc::return#3 SCREEN_2#0 malloc::return#0 ]


FINAL ASSEMBLER
Score: 98

  // File Comments
// Error where the compiler is reusing the same ZP for two byte* variables.
// SCREEN_1 and SCREEN_2 are both allocated to ZP: 4
// Problem is that outside main() scope statements have zero call-paths and then isStatementAllocationOverlapping() never checks liveranges
// CallPath code must be rewritten to use @begin as the outermost call instead of main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label MEM = 2
  .label SCREEN_1 = 4
  .label SCREEN_2 = 6
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
    // __start::__init1
    // malloc()
    // [2] call malloc 
    // [11] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
    // [11] phi (byte*) MEM#6 = (byte*) 1024 [phi:__start::__init1->malloc#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z MEM
    lda #>$400
    sta.z MEM+1
    jsr malloc
    // malloc()
    // [3] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda.z malloc.return
    sta.z malloc.return_1
    lda.z malloc.return+1
    sta.z malloc.return_1+1
    // __start::@2
    // [4] (byte*) SCREEN_1#0 ← (byte*) malloc::return#2
    // [5] call malloc 
    // [11] phi from __start::@2 to malloc [phi:__start::@2->malloc]
    // [11] phi (byte*) MEM#6 = (byte*) MEM#0 [phi:__start::@2->malloc#0] -- register_copy 
    jsr malloc
    // malloc()
    // [6] (byte*) malloc::return#3 ← (byte*) malloc::return#0
    // __start::@3
    // [7] (byte*) SCREEN_2#0 ← (byte*) malloc::return#3
    // [8] phi from __start::@3 to __start::@1 [phi:__start::@3->__start::@1]
    // __start::@1
    // [9] call main 
    jsr main
    // __start::@return
    // [10] return 
    rts
}
  // malloc
malloc: {
    .label return = 6
    .label return_1 = 4
    // return ++MEM;
    // [12] (byte*) MEM#0 ← ++ (byte*) MEM#6 -- pbuz1=_inc_pbuz1 
    inc.z MEM
    bne !+
    inc.z MEM+1
  !:
    // [13] (byte*) malloc::return#0 ← (byte*) MEM#0 -- pbuz1=pbuz2 
    lda.z MEM
    sta.z return
    lda.z MEM+1
    sta.z return+1
    // malloc::@return
    // }
    // [14] return 
    rts
}
  // main
main: {
    // *SCREEN_1 = 0
    // [15] *((byte*) SCREEN_1#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (SCREEN_1),y
    // *SCREEN_2 = 0
    // [16] *((byte*) SCREEN_2#0) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    sta (SCREEN_2),y
    // main::@return
    // }
    // [17] return 
    rts
}
  // File Data

