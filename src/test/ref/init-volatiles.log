Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (volatile byte) x ← ++ (volatile byte) x
  (bool~) main::$0 ← (volatile byte) x < (number) $32
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (volatile byte) x ← (number) 0
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (volatile byte) x ← (byte) $c
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(volatile byte) x loadstore

Adding number conversion cast (unumber) $32 in (bool~) main::$0 ← (volatile byte) x < (number) $32
Adding number conversion cast (unumber) 0 in (volatile byte) x ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (volatile byte) x ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $32
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [2] if((volatile byte) x<(byte) $32) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
Adding NOP phi() at start of main
CALL GRAPH
Calls in [_start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) x ← (byte) $c
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (volatile byte) x ← ++ (volatile byte) x
  [7] if((volatile byte) x<(byte) $32) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (volatile byte) x ← (byte) 0
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _start()
(void()) main()
(volatile byte) x loadstore 63.2

Initial phi equivalence classes
Added variable x to live range equivalence class [ x ]
Complete equivalence classes
[ x ]
Allocated zp[1]:2 [ x ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates a problem where volatiles with initializers are initialized outside the main()-routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label x = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) x ← (byte) $c -- vbuz1=vbuc1 
    lda #$c
    sta.z x
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [6] (volatile byte) x ← ++ (volatile byte) x -- vbuz1=_inc_vbuz1 
    inc.z x
    // [7] if((volatile byte) x<(byte) $32) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$32
    bcc __b1
    jmp __b2
    // main::@2
  __b2:
    // [8] (volatile byte) x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) x ← (byte) $c [ x ] (  [ x ] { }  ) always clobbers reg byte a 
Statement [7] if((volatile byte) x<(byte) $32) goto main::@1 [ x ] ( main:3 [ x ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) x ← (byte) 0 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ x ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 63.2: zp[1]:2 [ x ] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [] best 252 combination zp[1]:2 [ x ] 
Uplifting [main] best 252 combination 
Uplifting [_start] best 252 combination 
Attempting to uplift remaining variables inzp[1]:2 [ x ]
Uplifting [] best 252 combination zp[1]:2 [ x ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem where volatiles with initializers are initialized outside the main()-routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label x = 2
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte) x ← (byte) $c -- vbuz1=vbuc1 
    lda #$c
    sta.z x
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [6] (volatile byte) x ← ++ (volatile byte) x -- vbuz1=_inc_vbuz1 
    inc.z x
    // [7] if((volatile byte) x<(byte) $32) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$32
    bcc __b1
    jmp __b2
    // main::@2
  __b2:
    // [8] (volatile byte) x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Removing instruction main_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(volatile byte) x loadstore zp[1]:2 63.2

zp[1]:2 [ x ]


FINAL ASSEMBLER
Score: 153

  // File Comments
// Illustrates a problem where volatiles with initializers are initialized outside the main()-routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label x = 2
  // _start
_start: {
    // _start::_init1
    // x = 12
    // [1] (volatile byte) x ← (byte) $c -- vbuz1=vbuc1 
    lda #$c
    sta.z x
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
main: {
    // main::@1
  __b1:
    // while(++x<50)
    // [6] (volatile byte) x ← ++ (volatile byte) x -- vbuz1=_inc_vbuz1 
    inc.z x
    // [7] if((volatile byte) x<(byte) $32) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$32
    bcc __b1
    // main::@2
    // x = 0
    // [8] (volatile byte) x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

