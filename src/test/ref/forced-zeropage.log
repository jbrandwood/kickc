
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::u#0 = $22b
  main::$0 = *((word*)$a0) - main::u#0
  main::u#1 = main::$0
  *((word*)$400) = main::u#1
  main::$1 = *((byte**)$d1) + $d400
  *((byte**)$f3) = main::$1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
word~ main::$0
byte*~ main::$1
word main::u
word main::u#0
word main::u#1

Adding number conversion cast (unumber) $d400 in main::$1 = *((byte**)$d1) + $d400
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 160
Simplifying constant pointer cast (word*) 1024
Simplifying constant pointer cast (byte**) 209
Simplifying constant integer cast $d400
Simplifying constant pointer cast (byte**) 243
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $d400
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::u#1 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant main::u#0 = $22b
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::u#0
Constant inlined main::u#0 = $22b
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::u#1 = *((word*) 160) - $22b
  [1] *((word*) 1024) = main::u#1
  [2] main::$1 = *((byte**) 209) + $d400
  [3] *((byte**) 243) = main::$1
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte*~ main::$1 4.0
word main::u
word main::u#1 4.0

Initial phi equivalence classes
Added variable main::u#1 to live range equivalence class [ main::u#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::u#1 ]
[ main::$1 ]
Allocated zp[2]:2 [ main::u#1 ]
Allocated zp[2]:4 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::u#1 = *((word*) 160) - $22b [ main::u#1 ] (  [ main::u#1 ] { }  ) always clobbers reg byte a 
Statement [1] *((word*) 1024) = main::u#1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::$1 = *((byte**) 209) + $d400 [ main::$1 ] (  [ main::$1 ] { }  ) always clobbers reg byte a 
Statement [3] *((byte**) 243) = main::$1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::u#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$1 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp[2]:2 [ main::u#1 ] 4: zp[2]:4 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 77 combination zp[2]:2 [ main::u#1 ] zp[2]:4 [ main::$1 ] 
Uplifting [] best 77 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test some forced zeropage access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label __1 = 4
    .label u = 2
    // [0] main::u#1 = *((word*) 160) - $22b -- vwuz1=_deref_pwuc1_minus_vwuc2 
    sec
    lda $a0
    sbc #<$22b
    sta.z u
    lda $a0+1
    sbc #>$22b
    sta.z u+1
    // [1] *((word*) 1024) = main::u#1 -- _deref_pwuc1=vwuz1 
    lda.z u
    sta $400
    lda.z u+1
    sta $400+1
    // [2] main::$1 = *((byte**) 209) + $d400 -- pbuz1=_deref_qbuc1_plus_vwuc2 
    clc
    lda $d1
    adc #<$d400
    sta.z __1
    lda $d1+1
    adc #>$d400
    sta.z __1+1
    // [3] *((byte**) 243) = main::$1 -- _deref_qbuc1=pbuz1 
    lda.z __1
    sta $f3
    lda.z __1+1
    sta $f3+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
byte*~ main::$1 zp[2]:4 4.0
word main::u
word main::u#1 u zp[2]:2 4.0

zp[2]:2 [ main::u#1 ]
zp[2]:4 [ main::$1 ]


FINAL ASSEMBLER
Score: 74

  // File Comments
// Test some forced zeropage access
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label __1 = 4
    .label u = 2
    // u = *(word *)0xA0 - u
    // [0] main::u#1 = *((word*) 160) - $22b -- vwuz1=_deref_pwuc1_minus_vwuc2 
    sec
    lda $a0
    sbc #<$22b
    sta.z u
    lda $a0+1
    sbc #>$22b
    sta.z u+1
    // *((word*)0x0400) = u
    // [1] *((word*) 1024) = main::u#1 -- _deref_pwuc1=vwuz1 
    lda.z u
    sta $400
    lda.z u+1
    sta $400+1
    // *(byte **)0xD1 + 0xD400
    // [2] main::$1 = *((byte**) 209) + $d400 -- pbuz1=_deref_qbuc1_plus_vwuc2 
    clc
    lda $d1
    adc #<$d400
    sta.z __1
    lda $d1+1
    adc #>$d400
    sta.z __1+1
    // *(byte **)0xF3 = *(byte **)0xD1 + 0xD400
    // [3] *((byte**) 243) = main::$1 -- _deref_qbuc1=pbuz1 
    lda.z __1
    sta $f3
    lda.z __1+1
    sta $f3+1
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

