@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#4 ← phi( main/(byte) 0 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [6] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  [7] *((const byte*) SCREEN + (byte) main::i#4) ← (byte) main::j#2
  [8] (byte) main::j#1 ← ++ (byte) main::j#2
  [9] if((byte) main::j#1!=(byte) $65) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] (byte) main::i#1 ← ++ (byte) main::i#4
  [11] if((byte) main::i#1!=(byte) $65) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@6
  [12] (byte) main::k#4 ← phi( main::@3/(byte) 0 main::@6/(byte) main::k#1 )
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@5
  [13] (byte) main::l#2 ← phi( main::@4/(byte) 0 main::@5/(byte) main::l#1 )
  asm { eor#$55 tax  }
  [15] *((const byte*) SCREEN + (byte) main::k#4) ← (byte) main::l#2
  [16] (byte) main::l#1 ← ++ (byte) main::l#2
  [17] if((byte) main::l#1!=(byte) $65) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  [18] (byte) main::k#1 ← ++ (byte) main::k#4
  [19] if((byte) main::k#1!=(byte) $65) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@6
  [20] return 
  to:@return
