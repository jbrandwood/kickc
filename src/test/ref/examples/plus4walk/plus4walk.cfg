@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call memset 
  to:main::@10
main::@10: scope:[main]  from main
  [6] phi()
  [7] call memset 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [8] phi()
  [9] call memset 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [10] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_BG_COLOR) ← (byte) 0
  [11] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_BORDER_COLOR) ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@6
  [12] (word) rand_state#11 ← phi( main::@12/(word) 1 main::@6/(word) rand_state#3 )
  [12] (byte) main::x#11 ← phi( main::@12/(byte) $14 main::@6/(byte) main::x#10 )
  [12] (byte) main::y#11 ← phi( main::@12/(byte) $c main::@6/(byte) main::y#10 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] (word~) main::$24 ← (word)(byte) main::y#11
  [14] (word~) main::$29 ← (word~) main::$24 << (byte) 2
  [15] (word~) main::$30 ← (word~) main::$29 + (word~) main::$24
  [16] (word~) main::$3 ← (word~) main::$30 << (byte) 3
  [17] (word) main::offset#0 ← (word~) main::$3 + (byte) main::x#11
  [18] (byte*~) main::$5 ← (const byte*) VISITS + (word) main::offset#0
  [19] *((byte*~) main::$5) ← ++ *((byte*~) main::$5)
  [20] (byte*~) main::$6 ← (const byte*) VISITS + (word) main::offset#0
  [21] (byte) main::cnt#0 ← *((byte*~) main::$6)
  [22] (byte*~) main::$8 ← (const nomodify byte*) DEFAULT_COLORRAM + (word) main::offset#0
  [23] (byte~) main::$9 ← (byte) main::cnt#0 & (byte) $f
  [24] *((byte*~) main::$8) ← *((const byte*) FADE + (byte~) main::$9)
  [25] call rand 
  [26] (word) rand::return#2 ← (word) rand::return#0
  to:main::@13
main::@13: scope:[main]  from main::@2
  [27] (word~) main::$10 ← (word) rand::return#2
  [28] (byte) main::rnd#0 ← > (word~) main::$10
  [29] (byte~) main::$12 ← (byte) main::rnd#0 & (byte) $80
  [30] if((byte) 0!=(byte~) main::$12) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@13
  [31] (byte~) main::$13 ← (byte) main::rnd#0 & (byte) $40
  [32] if((byte) 0!=(byte~) main::$13) goto main::@4
  to:main::@8
main::@8: scope:[main]  from main::@7
  [33] (byte) main::y#2 ← -- (byte) main::y#11
  [34] if((byte) main::y#2!=(byte) $ff) goto main::@14
  to:main::@6
main::@14: scope:[main]  from main::@8
  [35] phi()
  to:main::@6
main::@6: scope:[main]  from main::@14 main::@15 main::@16 main::@17 main::@4 main::@5 main::@6 main::@8 main::@9
  [36] (byte) main::x#10 ← phi( main::@14/(byte) main::x#11 main::@8/(byte) main::x#11 main::@15/(byte) main::x#2 main::@9/(byte) 0 main::@16/(byte) main::x#11 main::@4/(byte) main::x#11 main::@17/(byte) main::x#1 main::@5/(byte) $27 main::@6/(byte) main::x#10 )
  [36] (byte) main::y#10 ← phi( main::@14/(byte) main::y#2 main::@8/(byte) 0 main::@15/(byte) main::y#11 main::@9/(byte) main::y#11 main::@16/(byte) main::y#1 main::@4/(byte) $18 main::@17/(byte) main::y#11 main::@5/(byte) main::y#11 main::@6/(byte) main::y#10 )
  [37] if(*((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_RASTER_LO)!=(byte) $ff) goto main::@6
  to:main::@1
main::@4: scope:[main]  from main::@7
  [38] (byte) main::y#1 ← ++ (byte) main::y#11
  [39] if((byte) main::y#1!=(byte) $19) goto main::@16
  to:main::@6
main::@16: scope:[main]  from main::@4
  [40] phi()
  to:main::@6
main::@3: scope:[main]  from main::@13
  [41] (byte~) main::$18 ← (byte) main::rnd#0 & (byte) $40
  [42] if((byte) 0!=(byte~) main::$18) goto main::@5
  to:main::@9
main::@9: scope:[main]  from main::@3
  [43] (byte) main::x#2 ← -- (byte) main::x#11
  [44] if((byte) main::x#2!=(byte) $ff) goto main::@15
  to:main::@6
main::@15: scope:[main]  from main::@9
  [45] phi()
  to:main::@6
main::@5: scope:[main]  from main::@3
  [46] (byte) main::x#1 ← ++ (byte) main::x#11
  [47] if((byte) main::x#1!=(byte) $28) goto main::@17
  to:main::@6
main::@17: scope:[main]  from main::@5
  [48] phi()
  to:main::@6

(word()) rand()
rand: scope:[rand]  from main::@2
  [49] (word~) rand::$0 ← (word) rand_state#11 << (byte) 7
  [50] (word) rand_state#1 ← (word) rand_state#11 ^ (word~) rand::$0
  [51] (word~) rand::$1 ← (word) rand_state#1 >> (byte) 9
  [52] (word) rand_state#2 ← (word) rand_state#1 ^ (word~) rand::$1
  [53] (word~) rand::$2 ← (word) rand_state#2 << (byte) 8
  [54] (word) rand_state#3 ← (word) rand_state#2 ^ (word~) rand::$2
  [55] (word) rand::return#0 ← (word) rand_state#3
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [56] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main main::@10 main::@11
  [57] (byte) memset::c#5 ← phi( main/(byte) $a0 main::@10/(byte) 0 main::@11/(byte) 0 )
  [57] (void*) memset::str#4 ← phi( main/(void*)(const nomodify byte*) DEFAULT_SCREEN main::@10/(void*)(const nomodify byte*) DEFAULT_COLORRAM main::@11/(void*)(const byte*) VISITS )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [58] (byte*) memset::end#0 ← (byte*)(void*) memset::str#4 + (word) $3e8
  [59] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#4
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [60] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [61] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [62] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [63] *((byte*) memset::dst#2) ← (byte) memset::c#5
  [64] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
