
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call atoi 
  [12] atoi::return#3 = atoi::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] printf_sint::value#1 = atoi::return#3
  [14] call printf_sint 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [15] phi()
  [16] call cputs 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] phi()
  [18] call atoi 
  [19] atoi::return#4 = atoi::return#2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [20] printf_sint::value#2 = atoi::return#4
  [21] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [22] phi()
  [23] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [24] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [25] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [26] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [26] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [26] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [27] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [28] conio_cursor_x = 0
  [29] conio_cursor_y = 0
  [30] conio_line_text = DEFAULT_SCREEN
  [31] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [32] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [33] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [34] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [35] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [37] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [38] clrscr::line_text#5[clrscr::c#2] = ' '
  [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [40] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

signed word atoi(to_nomodify byte* atoi::str)
atoi: scope:[atoi]  from main::@1 main::@4
  [41] atoi::str#2 = phi( main::@1/main::str, main::@4/main::str1 )
  [42] if(*atoi::str#2!='-') goto atoi::@3
  to:atoi::@2
atoi::@2: scope:[atoi]  from atoi
  [43] phi()
  to:atoi::@3
atoi::@3: scope:[atoi]  from atoi atoi::@2 atoi::@4
  [44] atoi::negative#2 = phi( atoi/0, atoi::@2/1, atoi::@4/atoi::negative#2 )
  [44] atoi::res#2 = phi( atoi/0, atoi::@2/0, atoi::@4/atoi::res#1 )
  [44] atoi::i#4 = phi( atoi/0, atoi::@2/1, atoi::@4/atoi::i#2 )
  [45] if(0!=atoi::str#2[atoi::i#4]) goto atoi::@4
  to:atoi::@5
atoi::@5: scope:[atoi]  from atoi::@3
  [46] if(0!=atoi::negative#2) goto atoi::@1
  to:atoi::@return
atoi::@1: scope:[atoi]  from atoi::@5
  [47] atoi::return#0 = - atoi::res#2
  to:atoi::@return
atoi::@return: scope:[atoi]  from atoi::@1 atoi::@5
  [48] atoi::return#2 = phi( atoi::@1/atoi::return#0, atoi::@5/atoi::res#2 )
  [49] return 
  to:@return
atoi::@4: scope:[atoi]  from atoi::@3
  [50] atoi::$8 = atoi::res#2 << 2
  [51] atoi::$9 = atoi::$8 + atoi::res#2
  [52] atoi::$3 = atoi::$9 << 1
  [53] atoi::$4 = atoi::$3 + atoi::str#2[atoi::i#4]
  [54] atoi::res#1 = atoi::$4 - '0'
  [55] atoi::i#2 = ++ atoi::i#4
  to:atoi::@3

void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@2 main::@5
  [56] printf_sint::value#3 = phi( main::@2/printf_sint::value#1, main::@5/printf_sint::value#2 )
  [57] *((byte*)&printf_buffer) = 0
  [58] if(printf_sint::value#3<0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [59] printf_sint::value#0 = - printf_sint::value#3
  [60] *((byte*)&printf_buffer) = '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [61] printf_sint::value#5 = phi( printf_sint::@1/printf_sint::value#0, printf_sint/printf_sint::value#3 )
  [62] utoa::value#1 = (word)printf_sint::value#5
  [63] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [64] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [65] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [66] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@3 main::@6 printf_number_buffer::@2
  [67] cputs::s#5 = phi( main::@3/main::s, main::@6/main::s, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [68] cputs::s#4 = phi( cputs/cputs::s#5, cputs::@2/cputs::s#0 )
  [69] cputs::c#1 = *cputs::s#4
  [70] cputs::s#0 = ++ cputs::s#4
  [71] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [72] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [73] cputc::c#0 = cputs::c#1
  [74] call cputc 
  to:cputs::@1

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [75] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [76] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [76] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [76] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [76] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [77] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [78] utoa::$11 = (byte)utoa::value#2
  [79] *utoa::buffer#11 = DIGITS[utoa::$11]
  [80] utoa::buffer#3 = ++ utoa::buffer#11
  [81] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [82] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [83] utoa::$10 = utoa::digit#2 << 1
  [84] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [85] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [86] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [87] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [87] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [87] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [88] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [89] utoa_append::buffer#0 = utoa::buffer#11
  [90] utoa_append::value#0 = utoa::value#2
  [91] utoa_append::sub#0 = utoa::digit_value#0
  [92] call utoa_append 
  [93] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [94] utoa::value#0 = utoa_append::return#0
  [95] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [96] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [97] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [98] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [99] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [100] phi()
  [101] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [102] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [103] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [104] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [105] conio_line_text[conio_cursor_x] = cputc::c#3
  [106] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [107] conio_cursor_x = ++ conio_cursor_x
  [108] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [109] phi()
  [110] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [111] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [112] phi()
  [113] call cputln 
  to:cputc::@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [114] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [115] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [115] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [116] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [117] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [118] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [119] utoa_append::digit#1 = ++ utoa_append::digit#2
  [120] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [121] conio_line_text = conio_line_text + $28
  [122] conio_line_color = conio_line_color + $28
  [123] conio_cursor_x = 0
  [124] conio_cursor_y = ++ conio_cursor_y
  [125] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [126] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [127] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [128] phi()
  [129] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [130] phi()
  [131] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [132] phi()
  [133] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [134] phi()
  [135] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [136] conio_line_text = conio_line_text - $28
  [137] conio_line_color = conio_line_color - $28
  [138] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [139] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [140] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [140] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [141] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [142] memcpy::src#4 = (byte*)memcpy::source#2
  [143] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [144] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [144] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [145] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [146] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [147] *memcpy::dst#2 = *memcpy::src#2
  [148] memcpy::dst#1 = ++ memcpy::dst#2
  [149] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [150] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [150] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [151] memset::end#0 = (byte*)memset::str#3 + $28
  [152] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [153] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [154] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [155] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [156] *memset::dst#2 = memset::c#4
  [157] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
