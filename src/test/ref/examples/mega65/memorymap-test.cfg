
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call memoryRemapBlock 
  to:main::@7
main::@7: scope:[main]  from main
  [2] *((const byte*) main::BLOCK_4000) ← (byte) '-'
  [3] *((const byte*) main::BLOCK_4000+(byte) 1) ← (byte) '*'
  [4] call memoryRemapBlock 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [5] *((const byte*) main::BLOCK_8000+(byte) 2) ← (byte) '-'
  [6] *((const byte*) main::BLOCK_8000+(byte) 3) ← (byte) '*'
  [7] call memoryRemap 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [8] *((const byte*) main::BLOCK_8000+(byte) 4) ← *((const byte*) main::BLOCK_4000+(byte) 2)
  [9] *((const byte*) main::BLOCK_4000+(byte) 5) ← *((const byte*) main::BLOCK_8000+(byte) 1)
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@9
  [10] (byte) main::i#2 ← phi( main::@2/(byte) main::i#1 main::@9/(byte) 0 )
  [11] if((byte) main::i#2<(byte) 6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] phi()
  [13] call memoryRemap256M 
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  [14] (byte) main::i1#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i1#1 )
  [15] if((byte) main::i1#2<(byte) $10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [16] phi()
  [17] call memoryRemap256M 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [18] return 
  to:@return
main::@5: scope:[main]  from main::@4
  [19] (byte~) main::$7 ← (byte) $40 + (byte) main::i1#2
  [20] *((const byte*) main::BLOCK_4000 + (byte) main::i1#2) ← (byte~) main::$7
  [21] (byte) main::i1#1 ← ++ (byte) main::i1#2
  to:main::@4
main::@2: scope:[main]  from main::@1
  [22] *((const nomodify byte*) DEFAULT_SCREEN+(byte) $50-(byte) 6 + (byte) main::i#2) ← *((const byte*) main::BLOCK_4000 + (byte) main::i#2)
  [23] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1

(void()) memoryRemapBlock((byte) memoryRemapBlock::blockPage , (word) memoryRemapBlock::memoryPage)
memoryRemapBlock: scope:[memoryRemapBlock]  from main main::@7
  [24] (byte) memoryRemapBlock::blockPage#2 ← phi( main/(byte) $40 main::@7/(byte) $80 )
  [25] (word) memoryRemapBlock::pageOffset#0 ← (word) $100 - (byte) memoryRemapBlock::blockPage#2
  [26] (byte) memoryRemapBlock::block#0 ← (byte) memoryRemapBlock::blockPage#2 >> (byte) 5
  [27] (byte) memoryRemapBlock::blockBits#0 ← (byte) 1 << (byte) memoryRemapBlock::block#0
  [28] (byte) memoryRemap::remapBlocks#0 ← (byte) memoryRemapBlock::blockBits#0
  [29] (word) memoryRemap::lowerPageOffset#0 ← (word) memoryRemapBlock::pageOffset#0
  [30] (word) memoryRemap::upperPageOffset#0 ← (word) memoryRemapBlock::pageOffset#0
  [31] call memoryRemap 
  to:memoryRemapBlock::@return
memoryRemapBlock::@return: scope:[memoryRemapBlock]  from memoryRemapBlock
  [32] return 
  to:@return

(void()) memoryRemap((byte) memoryRemap::remapBlocks , (word) memoryRemap::lowerPageOffset , (word) memoryRemap::upperPageOffset)
memoryRemap: scope:[memoryRemap]  from main::@8 memoryRemapBlock
  [33] (word) memoryRemap::upperPageOffset#2 ← phi( main::@8/(byte) $80 memoryRemapBlock/(word) memoryRemap::upperPageOffset#0 )
  [33] (byte) memoryRemap::remapBlocks#2 ← phi( main::@8/(const nomodify byte) MEMORYBLOCK_4000|(const nomodify byte) MEMORYBLOCK_8000 memoryRemapBlock/(byte) memoryRemap::remapBlocks#0 )
  [33] (word) memoryRemap::lowerPageOffset#2 ← phi( main::@8/(byte) $c0 memoryRemapBlock/(word) memoryRemap::lowerPageOffset#0 )
  [34] (byte~) memoryRemap::$0 ← < (word) memoryRemap::lowerPageOffset#2
  [35] *((const byte*) memoryRemap::aVal) ← (byte~) memoryRemap::$0
  [36] (byte~) memoryRemap::$1 ← (byte) memoryRemap::remapBlocks#2 << (byte) 4
  [37] (byte~) memoryRemap::$2 ← > (word) memoryRemap::lowerPageOffset#2
  [38] (byte~) memoryRemap::$3 ← (byte~) memoryRemap::$2 & (byte) $f
  [39] (byte~) memoryRemap::$4 ← (byte~) memoryRemap::$1 | (byte~) memoryRemap::$3
  [40] *((const byte*) memoryRemap::xVal) ← (byte~) memoryRemap::$4
  [41] (byte~) memoryRemap::$5 ← < (word) memoryRemap::upperPageOffset#2
  [42] *((const byte*) memoryRemap::yVal) ← (byte~) memoryRemap::$5
  [43] (byte~) memoryRemap::$6 ← (byte) memoryRemap::remapBlocks#2 & (byte) $f0
  [44] (byte~) memoryRemap::$7 ← > (word) memoryRemap::upperPageOffset#2
  [45] (byte~) memoryRemap::$8 ← (byte~) memoryRemap::$7 & (byte) $f
  [46] (byte~) memoryRemap::$9 ← (byte~) memoryRemap::$6 | (byte~) memoryRemap::$8
  [47] *((const byte*) memoryRemap::zVal) ← (byte~) memoryRemap::$9
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [49] return 
  to:@return

(void()) memoryRemap256M((byte) memoryRemap256M::remapBlocks , (dword) memoryRemap256M::lowerPageOffset , (dword) memoryRemap256M::upperPageOffset)
memoryRemap256M: scope:[memoryRemap256M]  from main::@3 main::@6
  [50] (byte) memoryRemap256M::remapBlocks#2 ← phi( main::@3/(const nomodify byte) MEMORYBLOCK_4000 main::@6/(byte) 0 )
  [50] (dword) memoryRemap256M::lowerPageOffset#2 ← phi( main::@3/(dword)(number) $ff800-(number) $40 main::@6/(byte) 0 )
  [51] (dword~) memoryRemap256M::$0 ← (dword) memoryRemap256M::lowerPageOffset#2 >> (byte) 4
  [52] (byte~) memoryRemap256M::$1 ← > (word)(dword~) memoryRemap256M::$0
  [53] *((const byte*) memoryRemap256M::lMb) ← (byte~) memoryRemap256M::$1
  [54] *((const byte*) memoryRemap256M::uMb) ← (byte) 0
  [55] (word~) memoryRemap256M::$4 ← < (dword) memoryRemap256M::lowerPageOffset#2
  [56] (byte~) memoryRemap256M::$5 ← < (word~) memoryRemap256M::$4
  [57] *((const byte*) memoryRemap256M::aVal) ← (byte~) memoryRemap256M::$5
  [58] (byte~) memoryRemap256M::$6 ← (byte) memoryRemap256M::remapBlocks#2 << (byte) 4
  [59] (word~) memoryRemap256M::$7 ← < (dword) memoryRemap256M::lowerPageOffset#2
  [60] (byte~) memoryRemap256M::$8 ← > (word~) memoryRemap256M::$7
  [61] (byte~) memoryRemap256M::$9 ← (byte~) memoryRemap256M::$8 & (byte) $f
  [62] (byte~) memoryRemap256M::$10 ← (byte~) memoryRemap256M::$6 | (byte~) memoryRemap256M::$9
  [63] *((const byte*) memoryRemap256M::xVal) ← (byte~) memoryRemap256M::$10
  [64] *((const byte*) memoryRemap256M::yVal) ← (byte) 0
  [65] (byte~) memoryRemap256M::$17 ← (byte) memoryRemap256M::remapBlocks#2 & (byte) $f0
  [66] *((const byte*) memoryRemap256M::zVal) ← (byte~) memoryRemap256M::$17
  asm { ldalMb ldx#$0f ldyuMb ldz#$00 map ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap256M::@return
memoryRemap256M::@return: scope:[memoryRemap256M]  from memoryRemap256M
  [68] return 
  to:@return
