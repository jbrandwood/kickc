Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) main::$4 ← call toD018 (byte*) SCREEN1 (byte*) CHARSET 
Inlined call (byte~) main::$6 ← call toD018 (byte*) SCREEN2 (byte*) CHARSET 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@16
@16: scope:[]  from @4
  (byte*) print_screen#13 ← phi( @4/(byte*) print_screen#0 )
  (byte*) print_char_cursor#38 ← phi( @4/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#33 ← phi( @4/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@23
print_char: scope:[print_char]  from makecharset::@8
  (byte*) print_char_cursor#11 ← phi( makecharset::@8/(byte*) print_char_cursor#20 )
  (byte) print_char::ch#1 ← phi( makecharset::@8/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#11) ← (byte) print_char::ch#1
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#11
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#12 ← phi( print_char/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#12
  return 
  to:@return
print_cls: scope:[print_cls]  from makecharset::@11
  (byte*) print_screen#1 ← phi( makecharset::@11/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#1 ← (byte*) print_screen#3
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#13 ← phi( print_cls::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#8 ← phi( print_cls::@2/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#13
  return 
  to:@return
@23: scope:[]  from @16
  (byte*) print_screen#12 ← phi( @16/(byte*) print_screen#13 )
  (byte*) print_char_cursor#35 ← phi( @16/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#30 ← phi( @16/(byte*) print_line_cursor#33 )
  (word*) SID_VOICE3_FREQ#0 ← ((word*)) (word/dword/signed dword) $d40e
  (byte*) SID_VOICE3_FREQ_LOW#0 ← ((byte*)) (word/dword/signed dword) $d40e
  (byte*) SID_VOICE3_FREQ_HIGH#0 ← ((byte*)) (word/dword/signed dword) $d40f
  (byte*) SID_VOICE3_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d412
  (byte) SID_CONTROL_NOISE#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) SID_CONTROL_PULSE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) SID_CONTROL_SAWTOOTH#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) SID_CONTROL_TRIANGLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) SID_CONTROL_TEST#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) SID_CONTROL_RING#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) SID_CONTROL_SYNC#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) SID_CONTROL_GATE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) SID_VOICE3_OSC#0 ← ((byte*)) (word/dword/signed dword) $d41b
  to:@25
sid_rnd_init: scope:[sid_rnd_init]  from makecharset
  *((word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff
  *((byte*) SID_VOICE3_CONTROL#0) ← (byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  return 
  to:@return
sid_rnd: scope:[sid_rnd]  from makecharset::@3
  (byte) sid_rnd::return#0 ← *((byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  (byte) sid_rnd::return#3 ← phi( sid_rnd/(byte) sid_rnd::return#0 )
  (byte) sid_rnd::return#1 ← (byte) sid_rnd::return#3
  return 
  to:@return
@25: scope:[]  from @23
  (byte*) print_screen#11 ← phi( @23/(byte*) print_screen#12 )
  (byte*) print_char_cursor#33 ← phi( @23/(byte*) print_char_cursor#35 )
  (byte*) print_line_cursor#27 ← phi( @23/(byte*) print_line_cursor#30 )
  (byte*) SCREEN1#0 ← ((byte*)) (word/signed word/dword/signed dword) $2800
  (byte*) SCREEN2#0 ← ((byte*)) (word/signed word/dword/signed dword) $2c00
  (byte*) CHARSET#0 ← ((byte*)) (word/signed word/dword/signed dword) $2000
  (byte*) SINTABLE#0 ← ((byte*)) (word/signed word/dword/signed dword) $1f00
  kickasm(location (byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))
 }}
  to:@26
main: scope:[main]  from @28
  (byte*) print_screen#8 ← phi( @28/(byte*) print_screen#9 )
  (byte) c2B#32 ← phi( @28/(byte) c2B#20 )
  (byte) c2A#32 ← phi( @28/(byte) c2A#20 )
  (byte) c1B#31 ← phi( @28/(byte) c1B#19 )
  (byte) c1A#31 ← phi( @28/(byte) c1A#19 )
  (byte*) print_char_cursor#31 ← phi( @28/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#25 ← phi( @28/(byte*) print_line_cursor#18 )
  asm { sei  }
  *((byte*) BORDERCOL#0) ← (byte) BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  (byte*~) main::$1 ← (byte*) COLS#0 + (word/signed word/dword/signed dword) $3e8
  (byte*) main::col#0 ← (byte*) COLS#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) print_screen#7 ← phi( main/(byte*) print_screen#8 main::@1/(byte*) print_screen#7 )
  (byte) c2B#30 ← phi( main/(byte) c2B#32 main::@1/(byte) c2B#30 )
  (byte) c2A#30 ← phi( main/(byte) c2A#32 main::@1/(byte) c2A#30 )
  (byte) c1B#28 ← phi( main/(byte) c1B#31 main::@1/(byte) c1B#28 )
  (byte) c1A#28 ← phi( main/(byte) c1A#31 main::@1/(byte) c1A#28 )
  (byte*) print_char_cursor#26 ← phi( main/(byte*) print_char_cursor#31 main::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#19 ← phi( main/(byte*) print_line_cursor#25 main::@1/(byte*) print_line_cursor#19 )
  (byte*) main::col#2 ← phi( main/(byte*) main::col#0 main::@1/(byte*) main::col#1 )
  *((byte*) main::col#2) ← (byte) BLACK#0
  (byte*) main::col#1 ← (byte*) main::col#2 + rangenext(COLS#0,main::$1)
  (bool~) main::$2 ← (byte*) main::col#1 != rangelast(COLS#0,main::$1)
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_screen#6 ← phi( main::@1/(byte*) print_screen#7 )
  (byte) c2B#26 ← phi( main::@1/(byte) c2B#30 )
  (byte) c2A#26 ← phi( main::@1/(byte) c2A#30 )
  (byte) c1B#24 ← phi( main::@1/(byte) c1B#28 )
  (byte) c1A#24 ← phi( main::@1/(byte) c1A#28 )
  (byte*) print_char_cursor#21 ← phi( main::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#14 ← phi( main::@1/(byte*) print_line_cursor#19 )
  (byte*) makecharset::charset#0 ← (byte*) CHARSET#0
  call makecharset 
  to:main::@11
main::@11: scope:[main]  from main::@2
  (byte) c2B#22 ← phi( main::@2/(byte) c2B#26 )
  (byte) c2A#22 ← phi( main::@2/(byte) c2A#26 )
  (byte) c1B#21 ← phi( main::@2/(byte) c1B#24 )
  (byte) c1A#21 ← phi( main::@2/(byte) c1A#24 )
  (byte*) print_char_cursor#14 ← phi( main::@2/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#9 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#14
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@11
  (byte) c2B#16 ← phi( main::@10/(byte) c2B#21 main::@11/(byte) c2B#22 )
  (byte) c2A#16 ← phi( main::@10/(byte) c2A#21 main::@11/(byte) c2A#22 )
  (byte) c1B#16 ← phi( main::@10/(byte) c1B#20 main::@11/(byte) c1B#21 )
  (byte) c1A#16 ← phi( main::@10/(byte) c1A#20 main::@11/(byte) c1A#21 )
  (byte*) print_char_cursor#22 ← phi( main::@10/(byte*) print_char_cursor#27 main::@11/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#15 ← phi( main::@10/(byte*) print_line_cursor#20 main::@11/(byte*) print_line_cursor#3 )
  if(true) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@3
  (byte*) print_char_cursor#49 ← phi( main::@3/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#44 ← phi( main::@3/(byte*) print_line_cursor#15 )
  (byte) c2B#14 ← phi( main::@3/(byte) c2B#16 )
  (byte) c2A#14 ← phi( main::@3/(byte) c2A#16 )
  (byte) c1B#14 ← phi( main::@3/(byte) c1B#16 )
  (byte) c1A#14 ← phi( main::@3/(byte) c1A#16 )
  (byte*) doplasma::screen#0 ← (byte*) SCREEN1#0
  call doplasma 
  to:main::@12
main::@12: scope:[main]  from main::@4
  (byte*) print_char_cursor#48 ← phi( main::@4/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#43 ← phi( main::@4/(byte*) print_line_cursor#44 )
  (byte) c2B#7 ← phi( main::@4/(byte) c2B#5 )
  (byte) c2A#7 ← phi( main::@4/(byte) c2A#5 )
  (byte) c1B#7 ← phi( main::@4/(byte) c1B#5 )
  (byte) c1A#7 ← phi( main::@4/(byte) c1A#5 )
  (byte) c1A#0 ← (byte) c1A#7
  (byte) c1B#0 ← (byte) c1B#7
  (byte) c2A#0 ← (byte) c2A#7
  (byte) c2B#0 ← (byte) c2B#7
  (byte*) main::toD0181_screen#0 ← (byte*) SCREEN1#0
  (byte*) main::toD0181_gfx#0 ← (byte*) CHARSET#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::@12
  (byte*) print_char_cursor#46 ← phi( main::@12/(byte*) print_char_cursor#48 )
  (byte*) print_line_cursor#41 ← phi( main::@12/(byte*) print_line_cursor#43 )
  (byte) c2B#27 ← phi( main::@12/(byte) c2B#0 )
  (byte) c2A#27 ← phi( main::@12/(byte) c2A#0 )
  (byte) c1B#25 ← phi( main::@12/(byte) c1B#0 )
  (byte) c1A#25 ← phi( main::@12/(byte) c1A#0 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@12/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@12/(byte*) main::toD0181_screen#0 )
  (word) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (word) main::toD0181_$1#0 ← (word) main::toD0181_$0#0 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword) main::toD0181_$2#0 ← (word) main::toD0181_$1#0 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/word) main::toD0181_$3#0 ← > (word/signed dword/dword) main::toD0181_$2#0
  (word) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte) main::toD0181_$5#0 ← > (word) main::toD0181_$4#0
  (byte/signed word/word/dword/signed dword) main::toD0181_$6#0 ← (byte) main::toD0181_$5#0 / (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/word/dword) main::toD0181_$7#0 ← (byte/signed word/word/dword/signed dword) main::toD0181_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte/word/dword) main::toD0181_$8#0 ← (byte/word) main::toD0181_$3#0 | (byte/word/dword) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (byte/word/dword) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte*) print_char_cursor#44 ← phi( main::toD0181/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#39 ← phi( main::toD0181/(byte*) print_line_cursor#41 )
  (byte) c2B#23 ← phi( main::toD0181/(byte) c2B#27 )
  (byte) c2A#23 ← phi( main::toD0181/(byte) c2A#27 )
  (byte) c1B#22 ← phi( main::toD0181/(byte) c1B#25 )
  (byte) c1A#22 ← phi( main::toD0181/(byte) c1A#25 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@9
main::@9: scope:[main]  from main::toD0181_@return
  (byte*) print_char_cursor#42 ← phi( main::toD0181_@return/(byte*) print_char_cursor#44 )
  (byte*) print_line_cursor#37 ← phi( main::toD0181_@return/(byte*) print_line_cursor#39 )
  (byte) c2B#15 ← phi( main::toD0181_@return/(byte) c2B#23 )
  (byte) c2A#15 ← phi( main::toD0181_@return/(byte) c2A#23 )
  (byte) c1B#15 ← phi( main::toD0181_@return/(byte) c1B#22 )
  (byte) c1A#15 ← phi( main::toD0181_@return/(byte) c1A#22 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$4 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$4
  (byte*) doplasma::screen#1 ← (byte*) SCREEN2#0
  call doplasma 
  to:main::@13
main::@13: scope:[main]  from main::@9
  (byte*) print_char_cursor#39 ← phi( main::@9/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#34 ← phi( main::@9/(byte*) print_line_cursor#37 )
  (byte) c2B#8 ← phi( main::@9/(byte) c2B#5 )
  (byte) c2A#8 ← phi( main::@9/(byte) c2A#5 )
  (byte) c1B#8 ← phi( main::@9/(byte) c1B#5 )
  (byte) c1A#8 ← phi( main::@9/(byte) c1A#5 )
  (byte) c1A#1 ← (byte) c1A#8
  (byte) c1B#1 ← (byte) c1B#8
  (byte) c2A#1 ← (byte) c2A#8
  (byte) c2B#1 ← (byte) c2B#8
  (byte*) main::toD0182_screen#0 ← (byte*) SCREEN2#0
  (byte*) main::toD0182_gfx#0 ← (byte*) CHARSET#0
  to:main::toD0182
main::toD0182: scope:[main]  from main::@13
  (byte) c2B#31 ← phi( main::@13/(byte) c2B#1 )
  (byte) c2A#31 ← phi( main::@13/(byte) c2A#1 )
  (byte) c1B#29 ← phi( main::@13/(byte) c1B#1 )
  (byte) c1A#29 ← phi( main::@13/(byte) c1A#1 )
  (byte*) print_char_cursor#36 ← phi( main::@13/(byte*) print_char_cursor#39 )
  (byte*) print_line_cursor#31 ← phi( main::@13/(byte*) print_line_cursor#34 )
  (byte*) main::toD0182_gfx#1 ← phi( main::@13/(byte*) main::toD0182_gfx#0 )
  (byte*) main::toD0182_screen#1 ← phi( main::@13/(byte*) main::toD0182_screen#0 )
  (word) main::toD0182_$0#0 ← ((word)) (byte*) main::toD0182_screen#1
  (word) main::toD0182_$1#0 ← (word) main::toD0182_$0#0 & (word/signed word/dword/signed dword) $3fff
  (word/signed dword/dword) main::toD0182_$2#0 ← (word) main::toD0182_$1#0 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/word) main::toD0182_$3#0 ← > (word/signed dword/dword) main::toD0182_$2#0
  (word) main::toD0182_$4#0 ← ((word)) (byte*) main::toD0182_gfx#1
  (byte) main::toD0182_$5#0 ← > (word) main::toD0182_$4#0
  (byte/signed word/word/dword/signed dword) main::toD0182_$6#0 ← (byte) main::toD0182_$5#0 / (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/word/dword) main::toD0182_$7#0 ← (byte/signed word/word/dword/signed dword) main::toD0182_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte/word/dword) main::toD0182_$8#0 ← (byte/word) main::toD0182_$3#0 | (byte/word/dword) main::toD0182_$7#0
  (byte) main::toD0182_return#0 ← (byte/word/dword) main::toD0182_$8#0
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  (byte) c2B#28 ← phi( main::toD0182/(byte) c2B#31 )
  (byte) c2A#28 ← phi( main::toD0182/(byte) c2A#31 )
  (byte) c1B#26 ← phi( main::toD0182/(byte) c1B#29 )
  (byte) c1A#26 ← phi( main::toD0182/(byte) c1A#29 )
  (byte*) print_char_cursor#32 ← phi( main::toD0182/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#26 ← phi( main::toD0182/(byte*) print_line_cursor#31 )
  (byte) main::toD0182_return#2 ← phi( main::toD0182/(byte) main::toD0182_return#0 )
  (byte) main::toD0182_return#1 ← (byte) main::toD0182_return#2
  to:main::@10
main::@10: scope:[main]  from main::toD0182_@return
  (byte) c2B#21 ← phi( main::toD0182_@return/(byte) c2B#28 )
  (byte) c2A#21 ← phi( main::toD0182_@return/(byte) c2A#28 )
  (byte) c1B#20 ← phi( main::toD0182_@return/(byte) c1B#26 )
  (byte) c1A#20 ← phi( main::toD0182_@return/(byte) c1A#26 )
  (byte*) print_char_cursor#27 ← phi( main::toD0182_@return/(byte*) print_char_cursor#32 )
  (byte*) print_line_cursor#20 ← phi( main::toD0182_@return/(byte*) print_line_cursor#26 )
  (byte) main::toD0182_return#3 ← phi( main::toD0182_@return/(byte) main::toD0182_return#1 )
  (byte~) main::$6 ← (byte) main::toD0182_return#3
  *((byte*) D018#0) ← (byte~) main::$6
  to:main::@3
main::@return: scope:[main]  from main::@3
  (byte) c2B#9 ← phi( main::@3/(byte) c2B#16 )
  (byte) c2A#9 ← phi( main::@3/(byte) c2A#16 )
  (byte) c1B#9 ← phi( main::@3/(byte) c1B#16 )
  (byte) c1A#9 ← phi( main::@3/(byte) c1A#16 )
  (byte*) print_char_cursor#15 ← phi( main::@3/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#10 ← phi( main::@3/(byte*) print_line_cursor#15 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#10
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#15
  (byte) c1A#2 ← (byte) c1A#9
  (byte) c1B#2 ← (byte) c1B#9
  (byte) c2A#2 ← (byte) c2A#9
  (byte) c2B#2 ← (byte) c2B#9
  return 
  to:@return
@26: scope:[]  from @25
  (byte*) print_screen#10 ← phi( @25/(byte*) print_screen#11 )
  (byte*) print_char_cursor#30 ← phi( @25/(byte*) print_char_cursor#33 )
  (byte*) print_line_cursor#24 ← phi( @25/(byte*) print_line_cursor#27 )
  (byte) c1A#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) c1B#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) c2A#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) c2B#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@28
doplasma: scope:[doplasma]  from main::@4 main::@9
  (byte*) doplasma::screen#10 ← phi( main::@4/(byte*) doplasma::screen#0 main::@9/(byte*) doplasma::screen#1 )
  (byte) c2B#24 ← phi( main::@4/(byte) c2B#14 main::@9/(byte) c2B#15 )
  (byte) c2A#24 ← phi( main::@4/(byte) c2A#14 main::@9/(byte) c2A#15 )
  (byte) c1B#10 ← phi( main::@4/(byte) c1B#14 main::@9/(byte) c1B#15 )
  (byte) c1A#10 ← phi( main::@4/(byte) c1A#14 main::@9/(byte) c1A#15 )
  (byte[$28]) doplasma::xbuf#0 ← { fill( $28, 0) }
  (byte[$19]) doplasma::ybuf#0 ← { fill( $19, 0) }
  (byte) doplasma::c1a#0 ← (byte) c1A#10
  (byte) doplasma::c1b#0 ← (byte) c1B#10
  (byte) doplasma::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@1
  (byte*) doplasma::screen#9 ← phi( doplasma/(byte*) doplasma::screen#10 doplasma::@1/(byte*) doplasma::screen#9 )
  (byte) c2B#17 ← phi( doplasma/(byte) c2B#24 doplasma::@1/(byte) c2B#17 )
  (byte) c2A#17 ← phi( doplasma/(byte) c2A#24 doplasma::@1/(byte) c2A#17 )
  (byte) c1B#17 ← phi( doplasma/(byte) c1B#10 doplasma::@1/(byte) c1B#17 )
  (byte) c1A#17 ← phi( doplasma/(byte) c1A#10 doplasma::@1/(byte) c1A#17 )
  (byte) doplasma::i#2 ← phi( doplasma/(byte) doplasma::i#0 doplasma::@1/(byte) doplasma::i#1 )
  (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@1/(byte) doplasma::c1b#1 )
  (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@1/(byte) doplasma::c1a#1 )
  (byte~) doplasma::$0 ← *((byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((byte*) SINTABLE#0 + (byte) doplasma::c1b#2)
  *((byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$0
  (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  (bool~) doplasma::$1 ← (byte) doplasma::i#1 < (byte/signed byte/word/signed word/dword/signed dword) $19
  if((bool~) doplasma::$1) goto doplasma::@1
  to:doplasma::@2
doplasma::@2: scope:[doplasma]  from doplasma::@1
  (byte*) doplasma::screen#8 ← phi( doplasma::@1/(byte*) doplasma::screen#9 )
  (byte) c2B#10 ← phi( doplasma::@1/(byte) c2B#17 )
  (byte) c2A#10 ← phi( doplasma::@1/(byte) c2A#17 )
  (byte) c1B#11 ← phi( doplasma::@1/(byte) c1B#17 )
  (byte) c1A#11 ← phi( doplasma::@1/(byte) c1A#17 )
  (byte) c1A#4 ← (byte) c1A#11 + (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) c1B#4 ← (byte) c1B#11 - (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) doplasma::c2a#0 ← (byte) c2A#10
  (byte) doplasma::c2b#0 ← (byte) c2B#10
  (byte) doplasma::i1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@2 doplasma::@3
  (byte) c1B#32 ← phi( doplasma::@2/(byte) c1B#4 doplasma::@3/(byte) c1B#32 )
  (byte) c1A#32 ← phi( doplasma::@2/(byte) c1A#4 doplasma::@3/(byte) c1A#32 )
  (byte*) doplasma::screen#7 ← phi( doplasma::@2/(byte*) doplasma::screen#8 doplasma::@3/(byte*) doplasma::screen#7 )
  (byte) c2B#18 ← phi( doplasma::@2/(byte) c2B#10 doplasma::@3/(byte) c2B#18 )
  (byte) c2A#18 ← phi( doplasma::@2/(byte) c2A#10 doplasma::@3/(byte) c2A#18 )
  (byte) doplasma::i1#2 ← phi( doplasma::@2/(byte) doplasma::i1#0 doplasma::@3/(byte) doplasma::i1#1 )
  (byte) doplasma::c2b#2 ← phi( doplasma::@2/(byte) doplasma::c2b#0 doplasma::@3/(byte) doplasma::c2b#1 )
  (byte) doplasma::c2a#2 ← phi( doplasma::@2/(byte) doplasma::c2a#0 doplasma::@3/(byte) doplasma::c2a#1 )
  (byte~) doplasma::$2 ← *((byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((byte*) SINTABLE#0 + (byte) doplasma::c2b#2)
  *((byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$2
  (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  (bool~) doplasma::$3 ← (byte) doplasma::i1#1 < (byte/signed byte/word/signed word/dword/signed dword) $28
  if((bool~) doplasma::$3) goto doplasma::@3
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3
  (byte) c1B#30 ← phi( doplasma::@3/(byte) c1B#32 )
  (byte) c1A#30 ← phi( doplasma::@3/(byte) c1A#32 )
  (byte*) doplasma::screen#6 ← phi( doplasma::@3/(byte*) doplasma::screen#7 )
  (byte) c2B#11 ← phi( doplasma::@3/(byte) c2B#18 )
  (byte) c2A#11 ← phi( doplasma::@3/(byte) c2A#18 )
  (byte) c2A#4 ← (byte) c2A#11 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) c2B#4 ← (byte) c2B#11 - (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) doplasma::ii#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@4 doplasma::@7
  (byte) c2B#29 ← phi( doplasma::@4/(byte) c2B#4 doplasma::@7/(byte) c2B#19 )
  (byte) c2A#29 ← phi( doplasma::@4/(byte) c2A#4 doplasma::@7/(byte) c2A#19 )
  (byte) c1B#27 ← phi( doplasma::@4/(byte) c1B#30 doplasma::@7/(byte) c1B#18 )
  (byte) c1A#27 ← phi( doplasma::@4/(byte) c1A#30 doplasma::@7/(byte) c1A#18 )
  (byte*) doplasma::screen#5 ← phi( doplasma::@4/(byte*) doplasma::screen#6 doplasma::@7/(byte*) doplasma::screen#2 )
  (byte) doplasma::ii#4 ← phi( doplasma::@4/(byte) doplasma::ii#0 doplasma::@7/(byte) doplasma::ii#1 )
  (byte) doplasma::i2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@5 doplasma::@6
  (byte) c2B#25 ← phi( doplasma::@5/(byte) c2B#29 doplasma::@6/(byte) c2B#25 )
  (byte) c2A#25 ← phi( doplasma::@5/(byte) c2A#29 doplasma::@6/(byte) c2A#25 )
  (byte) c1B#23 ← phi( doplasma::@5/(byte) c1B#27 doplasma::@6/(byte) c1B#23 )
  (byte) c1A#23 ← phi( doplasma::@5/(byte) c1A#27 doplasma::@6/(byte) c1A#23 )
  (byte*) doplasma::screen#3 ← phi( doplasma::@5/(byte*) doplasma::screen#5 doplasma::@6/(byte*) doplasma::screen#3 )
  (byte) doplasma::ii#2 ← phi( doplasma::@5/(byte) doplasma::ii#4 doplasma::@6/(byte) doplasma::ii#2 )
  (byte) doplasma::i2#2 ← phi( doplasma::@5/(byte) doplasma::i2#0 doplasma::@6/(byte) doplasma::i2#1 )
  (byte~) doplasma::$4 ← *((byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#2)
  *((byte*) doplasma::screen#3 + (byte) doplasma::i2#2) ← (byte~) doplasma::$4
  (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2
  (bool~) doplasma::$5 ← (byte) doplasma::i2#1 < (byte/signed byte/word/signed word/dword/signed dword) $28
  if((bool~) doplasma::$5) goto doplasma::@6
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@6
  (byte) c2B#19 ← phi( doplasma::@6/(byte) c2B#25 )
  (byte) c2A#19 ← phi( doplasma::@6/(byte) c2A#25 )
  (byte) c1B#18 ← phi( doplasma::@6/(byte) c1B#23 )
  (byte) c1A#18 ← phi( doplasma::@6/(byte) c1A#23 )
  (byte) doplasma::ii#3 ← phi( doplasma::@6/(byte) doplasma::ii#2 )
  (byte*) doplasma::screen#4 ← phi( doplasma::@6/(byte*) doplasma::screen#3 )
  (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#4 + (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#3
  (bool~) doplasma::$6 ← (byte) doplasma::ii#1 < (byte/signed byte/word/signed word/dword/signed dword) $19
  if((bool~) doplasma::$6) goto doplasma::@5
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  (byte) c2B#12 ← phi( doplasma::@7/(byte) c2B#19 )
  (byte) c2A#12 ← phi( doplasma::@7/(byte) c2A#19 )
  (byte) c1B#12 ← phi( doplasma::@7/(byte) c1B#18 )
  (byte) c1A#12 ← phi( doplasma::@7/(byte) c1A#18 )
  (byte) c1A#5 ← (byte) c1A#12
  (byte) c1B#5 ← (byte) c1B#12
  (byte) c2A#5 ← (byte) c2A#12
  (byte) c2B#5 ← (byte) c2B#12
  return 
  to:@return
makecharset: scope:[makecharset]  from main::@2
  (byte*) makecharset::charset#13 ← phi( main::@2/(byte*) makecharset::charset#0 )
  (byte*) print_char_cursor#28 ← phi( main::@2/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#21 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_screen#5 ← phi( main::@2/(byte*) print_screen#6 )
  (byte[8]) makecharset::bittab#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
  call sid_rnd_init 
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset
  (byte*) makecharset::charset#10 ← phi( makecharset/(byte*) makecharset::charset#13 )
  (byte*) print_char_cursor#23 ← phi( makecharset/(byte*) print_char_cursor#28 )
  (byte*) print_line_cursor#16 ← phi( makecharset/(byte*) print_line_cursor#21 )
  (byte*) print_screen#4 ← phi( makecharset/(byte*) print_screen#5 )
  call print_cls 
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@11
  (byte*) makecharset::charset#8 ← phi( makecharset::@11/(byte*) makecharset::charset#10 )
  (byte*) print_char_cursor#16 ← phi( makecharset::@11/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#11 ← phi( makecharset::@11/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#16
  (word) makecharset::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@12 makecharset::@9
  (byte*) print_char_cursor#47 ← phi( makecharset::@12/(byte*) print_char_cursor#7 makecharset::@9/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#42 ← phi( makecharset::@12/(byte*) print_line_cursor#5 makecharset::@9/(byte*) print_line_cursor#17 )
  (byte*) makecharset::charset#7 ← phi( makecharset::@12/(byte*) makecharset::charset#8 makecharset::@9/(byte*) makecharset::charset#9 )
  (word) makecharset::c#2 ← phi( makecharset::@12/(word) makecharset::c#0 makecharset::@9/(word) makecharset::c#1 )
  (byte~) makecharset::$2 ← < (word) makecharset::c#2
  (byte) makecharset::s#0 ← *((byte*) SINTABLE#0 + (byte~) makecharset::$2)
  (byte) makecharset::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:makecharset::@2
makecharset::@2: scope:[makecharset]  from makecharset::@1 makecharset::@6
  (byte*) print_char_cursor#45 ← phi( makecharset::@1/(byte*) print_char_cursor#47 makecharset::@6/(byte*) print_char_cursor#34 )
  (byte*) print_line_cursor#40 ← phi( makecharset::@1/(byte*) print_line_cursor#42 makecharset::@6/(byte*) print_line_cursor#28 )
  (byte*) makecharset::charset#6 ← phi( makecharset::@1/(byte*) makecharset::charset#7 makecharset::@6/(byte*) makecharset::charset#1 )
  (byte) makecharset::i#7 ← phi( makecharset::@1/(byte) makecharset::i#0 makecharset::@6/(byte) makecharset::i#1 )
  (word) makecharset::c#12 ← phi( makecharset::@1/(word) makecharset::c#2 makecharset::@6/(word) makecharset::c#3 )
  (byte) makecharset::s#3 ← phi( makecharset::@1/(byte) makecharset::s#0 makecharset::@6/(byte) makecharset::s#5 )
  (byte) makecharset::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) makecharset::ii#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@4
  (byte*) print_char_cursor#43 ← phi( makecharset::@2/(byte*) print_char_cursor#45 makecharset::@4/(byte*) print_char_cursor#37 )
  (byte*) print_line_cursor#38 ← phi( makecharset::@2/(byte*) print_line_cursor#40 makecharset::@4/(byte*) print_line_cursor#32 )
  (byte*) makecharset::charset#5 ← phi( makecharset::@2/(byte*) makecharset::charset#6 makecharset::@4/(byte*) makecharset::charset#2 )
  (byte) makecharset::i#6 ← phi( makecharset::@2/(byte) makecharset::i#7 makecharset::@4/(byte) makecharset::i#3 )
  (word) makecharset::c#11 ← phi( makecharset::@2/(word) makecharset::c#12 makecharset::@4/(word) makecharset::c#6 )
  (byte) makecharset::b#6 ← phi( makecharset::@2/(byte) makecharset::b#0 makecharset::@4/(byte) makecharset::b#5 )
  (byte) makecharset::ii#5 ← phi( makecharset::@2/(byte) makecharset::ii#0 makecharset::@4/(byte) makecharset::ii#1 )
  (byte) makecharset::s#2 ← phi( makecharset::@2/(byte) makecharset::s#3 makecharset::@4/(byte) makecharset::s#4 )
  call sid_rnd 
  (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#1
  to:makecharset::@13
makecharset::@13: scope:[makecharset]  from makecharset::@3
  (byte*) print_char_cursor#40 ← phi( makecharset::@3/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#35 ← phi( makecharset::@3/(byte*) print_line_cursor#38 )
  (byte*) makecharset::charset#3 ← phi( makecharset::@3/(byte*) makecharset::charset#5 )
  (byte) makecharset::i#4 ← phi( makecharset::@3/(byte) makecharset::i#6 )
  (word) makecharset::c#8 ← phi( makecharset::@3/(word) makecharset::c#11 )
  (byte) makecharset::b#4 ← phi( makecharset::@3/(byte) makecharset::b#6 )
  (byte) makecharset::ii#4 ← phi( makecharset::@3/(byte) makecharset::ii#5 )
  (byte) makecharset::s#1 ← phi( makecharset::@3/(byte) makecharset::s#2 )
  (byte) sid_rnd::return#4 ← phi( makecharset::@3/(byte) sid_rnd::return#2 )
  (byte~) makecharset::$3 ← (byte) sid_rnd::return#4
  (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte/word/signed word/dword/signed dword) $ff
  (bool~) makecharset::$5 ← (byte~) makecharset::$4 > (byte) makecharset::s#1
  (bool~) makecharset::$6 ← ! (bool~) makecharset::$5
  if((bool~) makecharset::$6) goto makecharset::@4
  to:makecharset::@5
makecharset::@4: scope:[makecharset]  from makecharset::@13 makecharset::@5
  (byte*) print_char_cursor#37 ← phi( makecharset::@13/(byte*) print_char_cursor#40 makecharset::@5/(byte*) print_char_cursor#41 )
  (byte*) print_line_cursor#32 ← phi( makecharset::@13/(byte*) print_line_cursor#35 makecharset::@5/(byte*) print_line_cursor#36 )
  (byte) makecharset::s#4 ← phi( makecharset::@13/(byte) makecharset::s#1 makecharset::@5/(byte) makecharset::s#6 )
  (byte*) makecharset::charset#2 ← phi( makecharset::@13/(byte*) makecharset::charset#3 makecharset::@5/(byte*) makecharset::charset#4 )
  (byte) makecharset::b#5 ← phi( makecharset::@13/(byte) makecharset::b#4 makecharset::@5/(byte) makecharset::b#1 )
  (byte) makecharset::i#3 ← phi( makecharset::@13/(byte) makecharset::i#4 makecharset::@5/(byte) makecharset::i#5 )
  (word) makecharset::c#6 ← phi( makecharset::@13/(word) makecharset::c#8 makecharset::@5/(word) makecharset::c#9 )
  (byte) makecharset::ii#2 ← phi( makecharset::@13/(byte) makecharset::ii#4 makecharset::@5/(byte) makecharset::ii#3 )
  (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  (bool~) makecharset::$7 ← (byte) makecharset::ii#1 < (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) makecharset::$7) goto makecharset::@3
  to:makecharset::@6
makecharset::@5: scope:[makecharset]  from makecharset::@13
  (byte*) print_char_cursor#41 ← phi( makecharset::@13/(byte*) print_char_cursor#40 )
  (byte*) print_line_cursor#36 ← phi( makecharset::@13/(byte*) print_line_cursor#35 )
  (byte) makecharset::s#6 ← phi( makecharset::@13/(byte) makecharset::s#1 )
  (byte*) makecharset::charset#4 ← phi( makecharset::@13/(byte*) makecharset::charset#3 )
  (byte) makecharset::i#5 ← phi( makecharset::@13/(byte) makecharset::i#4 )
  (word) makecharset::c#9 ← phi( makecharset::@13/(word) makecharset::c#8 )
  (byte) makecharset::ii#3 ← phi( makecharset::@13/(byte) makecharset::ii#4 )
  (byte) makecharset::b#2 ← phi( makecharset::@13/(byte) makecharset::b#4 )
  (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#3)
  to:makecharset::@4
makecharset::@6: scope:[makecharset]  from makecharset::@4
  (byte*) print_char_cursor#34 ← phi( makecharset::@4/(byte*) print_char_cursor#37 )
  (byte*) print_line_cursor#28 ← phi( makecharset::@4/(byte*) print_line_cursor#32 )
  (byte) makecharset::s#5 ← phi( makecharset::@4/(byte) makecharset::s#4 )
  (byte*) makecharset::charset#1 ← phi( makecharset::@4/(byte*) makecharset::charset#2 )
  (byte) makecharset::b#3 ← phi( makecharset::@4/(byte) makecharset::b#5 )
  (byte) makecharset::i#2 ← phi( makecharset::@4/(byte) makecharset::i#3 )
  (word) makecharset::c#3 ← phi( makecharset::@4/(word) makecharset::c#6 )
  (word/signed dword/dword~) makecharset::$8 ← (word) makecharset::c#3 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (word/signed dword/dword~) makecharset::$9 ← (word/signed dword/dword~) makecharset::$8 + (byte) makecharset::i#2
  *((byte*) makecharset::charset#1 + (word/signed dword/dword~) makecharset::$9) ← (byte) makecharset::b#3
  (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  (bool~) makecharset::$10 ← (byte) makecharset::i#1 < (byte/signed byte/word/signed word/dword/signed dword) 8
  if((bool~) makecharset::$10) goto makecharset::@2
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  (byte*) makecharset::charset#12 ← phi( makecharset::@6/(byte*) makecharset::charset#1 )
  (byte*) print_char_cursor#29 ← phi( makecharset::@6/(byte*) print_char_cursor#34 )
  (byte*) print_line_cursor#23 ← phi( makecharset::@6/(byte*) print_line_cursor#28 )
  (word) makecharset::c#4 ← phi( makecharset::@6/(word) makecharset::c#3 )
  (byte/word~) makecharset::$11 ← (word) makecharset::c#4 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) makecharset::$12 ← (byte/word~) makecharset::$11 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) makecharset::$13 ← ! (bool~) makecharset::$12
  if((bool~) makecharset::$13) goto makecharset::@9
  to:makecharset::@8
makecharset::@9: scope:[makecharset]  from makecharset::@14 makecharset::@7
  (byte*) makecharset::charset#9 ← phi( makecharset::@14/(byte*) makecharset::charset#11 makecharset::@7/(byte*) makecharset::charset#12 )
  (byte*) print_char_cursor#24 ← phi( makecharset::@14/(byte*) print_char_cursor#8 makecharset::@7/(byte*) print_char_cursor#29 )
  (byte*) print_line_cursor#17 ← phi( makecharset::@14/(byte*) print_line_cursor#22 makecharset::@7/(byte*) print_line_cursor#23 )
  (word) makecharset::c#5 ← phi( makecharset::@14/(word) makecharset::c#7 makecharset::@7/(word) makecharset::c#4 )
  (word) makecharset::c#1 ← ++ (word) makecharset::c#5
  (bool~) makecharset::$15 ← (word) makecharset::c#1 < (word/signed word/dword/signed dword) $100
  if((bool~) makecharset::$15) goto makecharset::@1
  to:makecharset::@return
makecharset::@8: scope:[makecharset]  from makecharset::@7
  (byte*) makecharset::charset#14 ← phi( makecharset::@7/(byte*) makecharset::charset#12 )
  (byte*) print_line_cursor#29 ← phi( makecharset::@7/(byte*) print_line_cursor#23 )
  (word) makecharset::c#10 ← phi( makecharset::@7/(word) makecharset::c#4 )
  (byte*) print_char_cursor#20 ← phi( makecharset::@7/(byte*) print_char_cursor#29 )
  (byte) print_char::ch#0 ← (byte) '.'
  call print_char 
  to:makecharset::@14
makecharset::@14: scope:[makecharset]  from makecharset::@8
  (byte*) makecharset::charset#11 ← phi( makecharset::@8/(byte*) makecharset::charset#14 )
  (byte*) print_line_cursor#22 ← phi( makecharset::@8/(byte*) print_line_cursor#29 )
  (word) makecharset::c#7 ← phi( makecharset::@8/(word) makecharset::c#10 )
  (byte*) print_char_cursor#17 ← phi( makecharset::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#17
  to:makecharset::@9
makecharset::@return: scope:[makecharset]  from makecharset::@9
  (byte*) print_char_cursor#18 ← phi( makecharset::@9/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#12 ← phi( makecharset::@9/(byte*) print_line_cursor#17 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#18
  return 
  to:@return
@28: scope:[]  from @26
  (byte*) print_screen#9 ← phi( @26/(byte*) print_screen#10 )
  (byte) c2B#20 ← phi( @26/(byte) c2B#3 )
  (byte) c2A#20 ← phi( @26/(byte) c2A#3 )
  (byte) c1B#19 ← phi( @26/(byte) c1B#3 )
  (byte) c1A#19 ← phi( @26/(byte) c1A#3 )
  (byte*) print_char_cursor#25 ← phi( @26/(byte*) print_char_cursor#30 )
  (byte*) print_line_cursor#18 ← phi( @26/(byte*) print_line_cursor#24 )
  call main 
  to:@29
@29: scope:[]  from @28
  (byte) c2B#13 ← phi( @28/(byte) c2B#2 )
  (byte) c2A#13 ← phi( @28/(byte) c2A#2 )
  (byte) c1B#13 ← phi( @28/(byte) c1B#2 )
  (byte) c1A#13 ← phi( @28/(byte) c1A#2 )
  (byte*) print_char_cursor#19 ← phi( @28/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#13 ← phi( @28/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#19
  (byte) c1A#6 ← (byte) c1A#13
  (byte) c1B#6 ← (byte) c1B#13
  (byte) c2A#6 ← (byte) c2A#13
  (byte) c2B#6 ← (byte) c2B#13
  to:@end
@end: scope:[]  from @29

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @16
(label) @23
(label) @25
(label) @26
(label) @28
(label) @29
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CHARSET
(byte*) CHARSET#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(byte) PINK
(byte) PINK#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SCREEN1
(byte*) SCREEN1#0
(byte*) SCREEN2
(byte*) SCREEN2#0
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_GATE#0
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_NOISE#0
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_PULSE#0
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_RING#0
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SAWTOOTH#0
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_SYNC#0
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TEST#0
(byte) SID_CONTROL_TRIANGLE
(byte) SID_CONTROL_TRIANGLE#0
(byte*) SID_VOICE3_CONTROL
(byte*) SID_VOICE3_CONTROL#0
(word*) SID_VOICE3_FREQ
(word*) SID_VOICE3_FREQ#0
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_HIGH#0
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_FREQ_LOW#0
(byte*) SID_VOICE3_OSC
(byte*) SID_VOICE3_OSC#0
(byte*) SINTABLE
(byte*) SINTABLE#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(byte) c1A
(byte) c1A#0
(byte) c1A#1
(byte) c1A#10
(byte) c1A#11
(byte) c1A#12
(byte) c1A#13
(byte) c1A#14
(byte) c1A#15
(byte) c1A#16
(byte) c1A#17
(byte) c1A#18
(byte) c1A#19
(byte) c1A#2
(byte) c1A#20
(byte) c1A#21
(byte) c1A#22
(byte) c1A#23
(byte) c1A#24
(byte) c1A#25
(byte) c1A#26
(byte) c1A#27
(byte) c1A#28
(byte) c1A#29
(byte) c1A#3
(byte) c1A#30
(byte) c1A#31
(byte) c1A#32
(byte) c1A#4
(byte) c1A#5
(byte) c1A#6
(byte) c1A#7
(byte) c1A#8
(byte) c1A#9
(byte) c1B
(byte) c1B#0
(byte) c1B#1
(byte) c1B#10
(byte) c1B#11
(byte) c1B#12
(byte) c1B#13
(byte) c1B#14
(byte) c1B#15
(byte) c1B#16
(byte) c1B#17
(byte) c1B#18
(byte) c1B#19
(byte) c1B#2
(byte) c1B#20
(byte) c1B#21
(byte) c1B#22
(byte) c1B#23
(byte) c1B#24
(byte) c1B#25
(byte) c1B#26
(byte) c1B#27
(byte) c1B#28
(byte) c1B#29
(byte) c1B#3
(byte) c1B#30
(byte) c1B#31
(byte) c1B#32
(byte) c1B#4
(byte) c1B#5
(byte) c1B#6
(byte) c1B#7
(byte) c1B#8
(byte) c1B#9
(byte) c2A
(byte) c2A#0
(byte) c2A#1
(byte) c2A#10
(byte) c2A#11
(byte) c2A#12
(byte) c2A#13
(byte) c2A#14
(byte) c2A#15
(byte) c2A#16
(byte) c2A#17
(byte) c2A#18
(byte) c2A#19
(byte) c2A#2
(byte) c2A#20
(byte) c2A#21
(byte) c2A#22
(byte) c2A#23
(byte) c2A#24
(byte) c2A#25
(byte) c2A#26
(byte) c2A#27
(byte) c2A#28
(byte) c2A#29
(byte) c2A#3
(byte) c2A#30
(byte) c2A#31
(byte) c2A#32
(byte) c2A#4
(byte) c2A#5
(byte) c2A#6
(byte) c2A#7
(byte) c2A#8
(byte) c2A#9
(byte) c2B
(byte) c2B#0
(byte) c2B#1
(byte) c2B#10
(byte) c2B#11
(byte) c2B#12
(byte) c2B#13
(byte) c2B#14
(byte) c2B#15
(byte) c2B#16
(byte) c2B#17
(byte) c2B#18
(byte) c2B#19
(byte) c2B#2
(byte) c2B#20
(byte) c2B#21
(byte) c2B#22
(byte) c2B#23
(byte) c2B#24
(byte) c2B#25
(byte) c2B#26
(byte) c2B#27
(byte) c2B#28
(byte) c2B#29
(byte) c2B#3
(byte) c2B#30
(byte) c2B#31
(byte) c2B#32
(byte) c2B#4
(byte) c2B#5
(byte) c2B#6
(byte) c2B#7
(byte) c2B#8
(byte) c2B#9
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$0
(bool~) doplasma::$1
(byte~) doplasma::$2
(bool~) doplasma::$3
(byte~) doplasma::$4
(bool~) doplasma::$5
(bool~) doplasma::$6
(label) doplasma::@1
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@return
(byte) doplasma::c1a
(byte) doplasma::c1a#0
(byte) doplasma::c1a#1
(byte) doplasma::c1a#2
(byte) doplasma::c1b
(byte) doplasma::c1b#0
(byte) doplasma::c1b#1
(byte) doplasma::c1b#2
(byte) doplasma::c2a
(byte) doplasma::c2a#0
(byte) doplasma::c2a#1
(byte) doplasma::c2a#2
(byte) doplasma::c2b
(byte) doplasma::c2b#0
(byte) doplasma::c2b#1
(byte) doplasma::c2b#2
(byte) doplasma::i
(byte) doplasma::i#0
(byte) doplasma::i#1
(byte) doplasma::i#2
(byte) doplasma::i1
(byte) doplasma::i1#0
(byte) doplasma::i1#1
(byte) doplasma::i1#2
(byte) doplasma::i2
(byte) doplasma::i2#0
(byte) doplasma::i2#1
(byte) doplasma::i2#2
(byte) doplasma::ii
(byte) doplasma::ii#0
(byte) doplasma::ii#1
(byte) doplasma::ii#2
(byte) doplasma::ii#3
(byte) doplasma::ii#4
(byte*) doplasma::screen
(byte*) doplasma::screen#0
(byte*) doplasma::screen#1
(byte*) doplasma::screen#10
(byte*) doplasma::screen#2
(byte*) doplasma::screen#3
(byte*) doplasma::screen#4
(byte*) doplasma::screen#5
(byte*) doplasma::screen#6
(byte*) doplasma::screen#7
(byte*) doplasma::screen#8
(byte*) doplasma::screen#9
(byte[$28]) doplasma::xbuf
(byte[$28]) doplasma::xbuf#0
(byte[$19]) doplasma::ybuf
(byte[$19]) doplasma::ybuf#0
(void()) main()
(byte*~) main::$1
(bool~) main::$2
(byte~) main::$4
(byte~) main::$6
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@9
(label) main::@return
(byte*) main::col
(byte*) main::col#0
(byte*) main::col#1
(byte*) main::col#2
(label) main::toD0181
(word~) main::toD0181_$0
(word) main::toD0181_$0#0
(word~) main::toD0181_$1
(word) main::toD0181_$1#0
(word/signed dword/dword~) main::toD0181_$2
(word/signed dword/dword) main::toD0181_$2#0
(byte/word~) main::toD0181_$3
(byte/word) main::toD0181_$3#0
(word~) main::toD0181_$4
(word) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte) main::toD0181_$5#0
(byte/signed word/word/dword/signed dword~) main::toD0181_$6
(byte/signed word/word/dword/signed dword) main::toD0181_$6#0
(byte/word/dword~) main::toD0181_$7
(byte/word/dword) main::toD0181_$7#0
(byte/word/dword~) main::toD0181_$8
(byte/word/dword) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::toD0182
(word~) main::toD0182_$0
(word) main::toD0182_$0#0
(word~) main::toD0182_$1
(word) main::toD0182_$1#0
(word/signed dword/dword~) main::toD0182_$2
(word/signed dword/dword) main::toD0182_$2#0
(byte/word~) main::toD0182_$3
(byte/word) main::toD0182_$3#0
(word~) main::toD0182_$4
(word) main::toD0182_$4#0
(byte~) main::toD0182_$5
(byte) main::toD0182_$5#0
(byte/signed word/word/dword/signed dword~) main::toD0182_$6
(byte/signed word/word/dword/signed dword) main::toD0182_$6#0
(byte/word/dword~) main::toD0182_$7
(byte/word/dword) main::toD0182_$7#0
(byte/word/dword~) main::toD0182_$8
(byte/word/dword) main::toD0182_$8#0
(label) main::toD0182_@return
(byte*) main::toD0182_gfx
(byte*) main::toD0182_gfx#0
(byte*) main::toD0182_gfx#1
(byte) main::toD0182_return
(byte) main::toD0182_return#0
(byte) main::toD0182_return#1
(byte) main::toD0182_return#2
(byte) main::toD0182_return#3
(byte*) main::toD0182_screen
(byte*) main::toD0182_screen#0
(byte*) main::toD0182_screen#1
(void()) makecharset((byte*) makecharset::charset)
(bool~) makecharset::$10
(byte/word~) makecharset::$11
(bool~) makecharset::$12
(bool~) makecharset::$13
(bool~) makecharset::$15
(byte~) makecharset::$2
(byte~) makecharset::$3
(byte~) makecharset::$4
(bool~) makecharset::$5
(bool~) makecharset::$6
(bool~) makecharset::$7
(word/signed dword/dword~) makecharset::$8
(word/signed dword/dword~) makecharset::$9
(label) makecharset::@1
(label) makecharset::@11
(label) makecharset::@12
(label) makecharset::@13
(label) makecharset::@14
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#0
(byte) makecharset::b#1
(byte) makecharset::b#2
(byte) makecharset::b#3
(byte) makecharset::b#4
(byte) makecharset::b#5
(byte) makecharset::b#6
(byte[8]) makecharset::bittab
(byte[8]) makecharset::bittab#0
(word) makecharset::c
(word) makecharset::c#0
(word) makecharset::c#1
(word) makecharset::c#10
(word) makecharset::c#11
(word) makecharset::c#12
(word) makecharset::c#2
(word) makecharset::c#3
(word) makecharset::c#4
(word) makecharset::c#5
(word) makecharset::c#6
(word) makecharset::c#7
(word) makecharset::c#8
(word) makecharset::c#9
(byte*) makecharset::charset
(byte*) makecharset::charset#0
(byte*) makecharset::charset#1
(byte*) makecharset::charset#10
(byte*) makecharset::charset#11
(byte*) makecharset::charset#12
(byte*) makecharset::charset#13
(byte*) makecharset::charset#14
(byte*) makecharset::charset#2
(byte*) makecharset::charset#3
(byte*) makecharset::charset#4
(byte*) makecharset::charset#5
(byte*) makecharset::charset#6
(byte*) makecharset::charset#7
(byte*) makecharset::charset#8
(byte*) makecharset::charset#9
(byte) makecharset::i
(byte) makecharset::i#0
(byte) makecharset::i#1
(byte) makecharset::i#2
(byte) makecharset::i#3
(byte) makecharset::i#4
(byte) makecharset::i#5
(byte) makecharset::i#6
(byte) makecharset::i#7
(byte) makecharset::ii
(byte) makecharset::ii#0
(byte) makecharset::ii#1
(byte) makecharset::ii#2
(byte) makecharset::ii#3
(byte) makecharset::ii#4
(byte) makecharset::ii#5
(byte) makecharset::s
(byte) makecharset::s#0
(byte) makecharset::s#1
(byte) makecharset::s#2
(byte) makecharset::s#3
(byte) makecharset::s#4
(byte) makecharset::s#5
(byte) makecharset::s#6
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0
(byte) sid_rnd::return#1
(byte) sid_rnd::return#2
(byte) sid_rnd::return#3
(byte) sid_rnd::return#4
(void()) sid_rnd_init()
(label) sid_rnd_init::@return

Inversing boolean not [289] (bool~) makecharset::$6 ← (byte~) makecharset::$4 <= (byte) makecharset::s#1 from [288] (bool~) makecharset::$5 ← (byte~) makecharset::$4 > (byte) makecharset::s#1
Inversing boolean not [307] (bool~) makecharset::$13 ← (byte/word~) makecharset::$11 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [306] (bool~) makecharset::$12 ← (byte/word~) makecharset::$11 == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#33 (byte*) print_char_cursor#38 (byte*) print_screen#13 (byte*) print_line_cursor#30 (byte*) print_char_cursor#35 (byte*) print_screen#12 (byte*) print_line_cursor#27 (byte*) print_char_cursor#33 (byte*) print_screen#11 (byte*) print_line_cursor#24 (byte*) print_char_cursor#30 (byte*) print_screen#10 (byte*) print_line_cursor#18 (byte*) print_char_cursor#25 (byte*) print_screen#9 
Alias (byte*) print_char_cursor#1 = (byte*) print_char_cursor#12 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_char_cursor#3 (byte*) print_line_cursor#8 (byte*) print_char_cursor#13 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte) sid_rnd::return#0 = (byte) sid_rnd::return#3 (byte) sid_rnd::return#1 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#19 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#26 
Alias (byte) c1A#21 = (byte) c1A#24 (byte) c1A#28 
Alias (byte) c1B#21 = (byte) c1B#24 (byte) c1B#28 
Alias (byte) c2A#22 = (byte) c2A#26 (byte) c2A#30 
Alias (byte) c2B#22 = (byte) c2B#26 (byte) c2B#30 
Alias (byte*) print_screen#6 = (byte*) print_screen#7 
Alias (byte*) print_line_cursor#3 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#5 
Alias (byte) c1A#14 = (byte) c1A#16 (byte) c1A#9 (byte) c1A#2 
Alias (byte) c1B#14 = (byte) c1B#16 (byte) c1B#9 (byte) c1B#2 
Alias (byte) c2A#14 = (byte) c2A#16 (byte) c2A#9 (byte) c2A#2 
Alias (byte) c2B#14 = (byte) c2B#16 (byte) c2B#9 (byte) c2B#2 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#44 (byte*) print_line_cursor#15 (byte*) print_line_cursor#43 (byte*) print_line_cursor#41 (byte*) print_line_cursor#39 (byte*) print_line_cursor#37 (byte*) print_line_cursor#34 (byte*) print_line_cursor#31 (byte*) print_line_cursor#26 (byte*) print_line_cursor#20 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#49 (byte*) print_char_cursor#22 (byte*) print_char_cursor#48 (byte*) print_char_cursor#46 (byte*) print_char_cursor#44 (byte*) print_char_cursor#42 (byte*) print_char_cursor#39 (byte*) print_char_cursor#36 (byte*) print_char_cursor#32 (byte*) print_char_cursor#27 (byte*) print_char_cursor#6 
Alias (byte) c1A#0 = (byte) c1A#7 (byte) c1A#25 (byte) c1A#22 (byte) c1A#15 
Alias (byte) c1B#0 = (byte) c1B#7 (byte) c1B#25 (byte) c1B#22 (byte) c1B#15 
Alias (byte) c2A#0 = (byte) c2A#7 (byte) c2A#27 (byte) c2A#23 (byte) c2A#15 
Alias (byte) c2B#0 = (byte) c2B#7 (byte) c2B#27 (byte) c2B#23 (byte) c2B#15 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (byte) main::toD0181_return#0 = (byte/word/dword) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$4 
Alias (byte) c1A#1 = (byte) c1A#8 (byte) c1A#29 (byte) c1A#26 (byte) c1A#20 
Alias (byte) c1B#1 = (byte) c1B#8 (byte) c1B#29 (byte) c1B#26 (byte) c1B#20 
Alias (byte) c2A#1 = (byte) c2A#8 (byte) c2A#31 (byte) c2A#28 (byte) c2A#21 
Alias (byte) c2B#1 = (byte) c2B#8 (byte) c2B#31 (byte) c2B#28 (byte) c2B#21 
Alias (byte*) main::toD0182_screen#0 = (byte*) main::toD0182_screen#1 
Alias (byte*) main::toD0182_gfx#0 = (byte*) main::toD0182_gfx#1 
Alias (byte) main::toD0182_return#0 = (byte/word/dword) main::toD0182_$8#0 (byte) main::toD0182_return#2 (byte) main::toD0182_return#1 (byte) main::toD0182_return#3 (byte~) main::$6 
Alias (byte) c1A#11 = (byte) c1A#17 
Alias (byte) c1B#11 = (byte) c1B#17 
Alias (byte) c2A#10 = (byte) c2A#17 
Alias (byte) c2B#10 = (byte) c2B#17 
Alias (byte*) doplasma::screen#8 = (byte*) doplasma::screen#9 
Alias (byte) c2A#11 = (byte) c2A#18 
Alias (byte) c2B#11 = (byte) c2B#18 
Alias (byte*) doplasma::screen#6 = (byte*) doplasma::screen#7 
Alias (byte) c1A#30 = (byte) c1A#32 
Alias (byte) c1B#30 = (byte) c1B#32 
Alias (byte*) doplasma::screen#3 = (byte*) doplasma::screen#4 
Alias (byte) doplasma::ii#2 = (byte) doplasma::ii#3 
Alias (byte) c1A#12 = (byte) c1A#18 (byte) c1A#23 (byte) c1A#5 
Alias (byte) c1B#12 = (byte) c1B#18 (byte) c1B#23 (byte) c1B#5 
Alias (byte) c2A#12 = (byte) c2A#19 (byte) c2A#25 (byte) c2A#5 
Alias (byte) c2B#12 = (byte) c2B#19 (byte) c2B#25 (byte) c2B#5 
Alias (byte*) print_screen#4 = (byte*) print_screen#5 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#21 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#28 
Alias (byte*) makecharset::charset#10 = (byte*) makecharset::charset#13 (byte*) makecharset::charset#8 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#7 
Alias (byte) sid_rnd::return#2 = (byte) sid_rnd::return#4 
Alias (byte) makecharset::s#1 = (byte) makecharset::s#2 (byte) makecharset::s#6 
Alias (byte) makecharset::ii#3 = (byte) makecharset::ii#4 (byte) makecharset::ii#5 
Alias (byte) makecharset::b#2 = (byte) makecharset::b#4 (byte) makecharset::b#6 
Alias (word) makecharset::c#11 = (word) makecharset::c#8 (word) makecharset::c#9 
Alias (byte) makecharset::i#4 = (byte) makecharset::i#6 (byte) makecharset::i#5 
Alias (byte*) makecharset::charset#3 = (byte*) makecharset::charset#5 (byte*) makecharset::charset#4 
Alias (byte*) print_line_cursor#35 = (byte*) print_line_cursor#38 (byte*) print_line_cursor#36 
Alias (byte*) print_char_cursor#40 = (byte*) print_char_cursor#43 (byte*) print_char_cursor#41 
Alias (word) makecharset::c#10 = (word) makecharset::c#3 (word) makecharset::c#6 (word) makecharset::c#4 (word) makecharset::c#7 
Alias (byte) makecharset::i#2 = (byte) makecharset::i#3 
Alias (byte) makecharset::b#3 = (byte) makecharset::b#5 
Alias (byte*) makecharset::charset#1 = (byte*) makecharset::charset#2 (byte*) makecharset::charset#12 (byte*) makecharset::charset#14 (byte*) makecharset::charset#11 
Alias (byte) makecharset::s#4 = (byte) makecharset::s#5 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#28 (byte*) print_line_cursor#32 (byte*) print_line_cursor#23 (byte*) print_line_cursor#29 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#37 (byte*) print_char_cursor#29 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#8 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#17 (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#24 (byte*) print_char_cursor#9 
Alias (byte) c1A#19 = (byte) c1A#3 
Alias (byte) c1B#19 = (byte) c1B#3 
Alias (byte) c2A#20 = (byte) c2A#3 
Alias (byte) c2B#20 = (byte) c2B#3 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#19 
Alias (byte) c1A#13 = (byte) c1A#6 
Alias (byte) c1B#13 = (byte) c1B#6 
Alias (byte) c2A#13 = (byte) c2A#6 
Alias (byte) c2B#13 = (byte) c2B#6 
Successful SSA optimization Pass2AliasElimination
Alias (byte) makecharset::ii#2 = (byte) makecharset::ii#3 
Alias (word) makecharset::c#10 = (word) makecharset::c#11 (word) makecharset::c#5 
Alias (byte) makecharset::i#2 = (byte) makecharset::i#4 
Alias (byte*) makecharset::charset#1 = (byte*) makecharset::charset#3 (byte*) makecharset::charset#9 
Alias (byte) makecharset::s#1 = (byte) makecharset::s#4 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#22 (byte*) print_line_cursor#35 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#40 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_line_cursor#1
Self Phi Eliminated (byte*) print_line_cursor#14
Self Phi Eliminated (byte*) print_char_cursor#21
Self Phi Eliminated (byte) c1A#21
Self Phi Eliminated (byte) c1B#21
Self Phi Eliminated (byte) c2A#22
Self Phi Eliminated (byte) c2B#22
Self Phi Eliminated (byte*) print_screen#6
Self Phi Eliminated (byte*) print_line_cursor#10
Self Phi Eliminated (byte*) print_char_cursor#15
Self Phi Eliminated (byte) c1A#11
Self Phi Eliminated (byte) c1B#11
Self Phi Eliminated (byte) c2A#10
Self Phi Eliminated (byte) c2B#10
Self Phi Eliminated (byte*) doplasma::screen#8
Self Phi Eliminated (byte) c2A#11
Self Phi Eliminated (byte) c2B#11
Self Phi Eliminated (byte*) doplasma::screen#6
Self Phi Eliminated (byte) c1A#30
Self Phi Eliminated (byte) c1B#30
Self Phi Eliminated (byte) doplasma::ii#2
Self Phi Eliminated (byte*) doplasma::screen#3
Self Phi Eliminated (byte) c1A#12
Self Phi Eliminated (byte) c1B#12
Self Phi Eliminated (byte) c2A#12
Self Phi Eliminated (byte) c2B#12
Self Phi Eliminated (byte) makecharset::s#1
Self Phi Eliminated (word) makecharset::c#10
Self Phi Eliminated (byte) makecharset::i#2
Self Phi Eliminated (byte*) makecharset::charset#1
Self Phi Eliminated (byte*) print_line_cursor#12
Self Phi Eliminated (byte*) print_char_cursor#20
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) print_char::ch#1 (byte) print_char::ch#0
Redundant Phi (byte*) print_char_cursor#11 (byte*) print_char_cursor#20
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#1 (byte*) print_screen#1
Redundant Phi (byte*) print_line_cursor#25 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#31 (byte*) print_line_cursor#0
Redundant Phi (byte) c1A#31 (byte) c1A#19
Redundant Phi (byte) c1B#31 (byte) c1B#19
Redundant Phi (byte) c2A#32 (byte) c2A#20
Redundant Phi (byte) c2B#32 (byte) c2B#20
Redundant Phi (byte*) print_screen#8 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_line_cursor#25
Redundant Phi (byte*) print_char_cursor#21 (byte*) print_char_cursor#31
Redundant Phi (byte) c1A#21 (byte) c1A#31
Redundant Phi (byte) c1B#21 (byte) c1B#31
Redundant Phi (byte) c2A#22 (byte) c2A#32
Redundant Phi (byte) c2B#22 (byte) c2B#32
Redundant Phi (byte*) print_screen#6 (byte*) print_screen#8
Redundant Phi (byte*) print_line_cursor#3 (byte*) print_line_cursor#12
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#18
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#3
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#14
Redundant Phi (byte) c1A#0 (byte) c1A#12
Redundant Phi (byte) c1B#0 (byte) c1B#12
Redundant Phi (byte) c2A#0 (byte) c2A#12
Redundant Phi (byte) c2B#0 (byte) c2B#12
Redundant Phi (byte) c1A#1 (byte) c1A#12
Redundant Phi (byte) c1B#1 (byte) c1B#12
Redundant Phi (byte) c2A#1 (byte) c2A#12
Redundant Phi (byte) c2B#1 (byte) c2B#12
Redundant Phi (byte) c1A#11 (byte) c1A#10
Redundant Phi (byte) c1B#11 (byte) c1B#10
Redundant Phi (byte) c2A#10 (byte) c2A#24
Redundant Phi (byte) c2B#10 (byte) c2B#24
Redundant Phi (byte*) doplasma::screen#8 (byte*) doplasma::screen#10
Redundant Phi (byte) c2A#11 (byte) c2A#10
Redundant Phi (byte) c2B#11 (byte) c2B#10
Redundant Phi (byte*) doplasma::screen#6 (byte*) doplasma::screen#8
Redundant Phi (byte) c1A#30 (byte) c1A#4
Redundant Phi (byte) c1B#30 (byte) c1B#4
Redundant Phi (byte) doplasma::ii#2 (byte) doplasma::ii#4
Redundant Phi (byte*) doplasma::screen#3 (byte*) doplasma::screen#5
Redundant Phi (byte) c1A#12 (byte) c1A#27
Redundant Phi (byte) c1B#12 (byte) c1B#27
Redundant Phi (byte) c2A#12 (byte) c2A#29
Redundant Phi (byte) c2B#12 (byte) c2B#29
Redundant Phi (byte*) print_screen#4 (byte*) print_screen#6
Redundant Phi (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#21
Redundant Phi (byte*) makecharset::charset#10 (byte*) makecharset::charset#0
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_line_cursor#1
Redundant Phi (byte) makecharset::s#1 (byte) makecharset::s#3
Redundant Phi (word) makecharset::c#10 (word) makecharset::c#12
Redundant Phi (byte) makecharset::i#2 (byte) makecharset::i#7
Redundant Phi (byte*) makecharset::charset#1 (byte*) makecharset::charset#6
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_line_cursor#40
Redundant Phi (byte*) print_char_cursor#20 (byte*) print_char_cursor#45
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_char_cursor#1
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Redundant Phi (byte) c1A#13 (byte) c1A#14
Redundant Phi (byte) c1B#13 (byte) c1B#14
Redundant Phi (byte) c2A#13 (byte) c2A#14
Redundant Phi (byte) c2B#13 (byte) c2B#14
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) print_cls::$1 [97] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$2 [142] if((byte*) main::col#1!=rangelast(COLS#0,main::$1)) goto main::@1
Simple Condition (bool~) doplasma::$1 [228] if((byte) doplasma::i#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@1
Simple Condition (bool~) doplasma::$3 [242] if((byte) doplasma::i1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@3
Simple Condition (bool~) doplasma::$5 [254] if((byte) doplasma::i2#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@6
Simple Condition (bool~) doplasma::$6 [259] if((byte) doplasma::ii#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@5
Simple Condition (bool~) makecharset::$6 [290] if((byte~) makecharset::$4<=(byte) makecharset::s#3) goto makecharset::@4
Simple Condition (bool~) makecharset::$7 [294] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@3
Simple Condition (bool~) makecharset::$10 [303] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2
Simple Condition (bool~) makecharset::$13 [308] if((byte/word~) makecharset::$11!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto makecharset::@9
Simple Condition (bool~) makecharset::$15 [312] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte*) print_line_cursor#0 = ((byte*))$400
Constant (const byte[]) print_hextab#0 = $0
Constant (const word*) SID_VOICE3_FREQ#0 = ((word*))$d40e
Constant (const byte*) SID_VOICE3_FREQ_LOW#0 = ((byte*))$d40e
Constant (const byte*) SID_VOICE3_FREQ_HIGH#0 = ((byte*))$d40f
Constant (const byte*) SID_VOICE3_CONTROL#0 = ((byte*))$d412
Constant (const byte) SID_CONTROL_NOISE#0 = $80
Constant (const byte) SID_CONTROL_PULSE#0 = $40
Constant (const byte) SID_CONTROL_SAWTOOTH#0 = $20
Constant (const byte) SID_CONTROL_TRIANGLE#0 = $10
Constant (const byte) SID_CONTROL_TEST#0 = 8
Constant (const byte) SID_CONTROL_RING#0 = 4
Constant (const byte) SID_CONTROL_SYNC#0 = 2
Constant (const byte) SID_CONTROL_GATE#0 = 1
Constant (const byte*) SID_VOICE3_OSC#0 = ((byte*))$d41b
Constant (const byte*) SCREEN1#0 = ((byte*))$2800
Constant (const byte*) SCREEN2#0 = ((byte*))$2c00
Constant (const byte*) CHARSET#0 = ((byte*))$2000
Constant (const byte*) SINTABLE#0 = ((byte*))$1f00
Constant (const byte) c1A#19 = 0
Constant (const byte) c1B#19 = 0
Constant (const byte) c2A#20 = 0
Constant (const byte) c2B#20 = 0
Constant (const byte[$28]) doplasma::xbuf#0 = { fill( $28, 0) }
Constant (const byte[$19]) doplasma::ybuf#0 = { fill( $19, 0) }
Constant (const byte) doplasma::i#0 = 0
Constant (const byte) doplasma::i1#0 = 0
Constant (const byte) doplasma::ii#0 = 0
Constant (const byte) doplasma::i2#0 = 0
Constant (const byte[8]) makecharset::bittab#0 = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const word) makecharset::c#0 = 0
Constant (const byte) makecharset::i#0 = 0
Constant (const byte) makecharset::b#0 = 0
Constant (const byte) makecharset::ii#0 = 0
Constant (const byte) print_char::ch#0 = '.'
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const byte*) main::$1 = COLS#0+$3e8
Constant (const byte*) main::col#0 = COLS#0
Constant (const byte*) makecharset::charset#0 = CHARSET#0
Constant (const byte*) doplasma::screen#0 = SCREEN1#0
Constant (const byte*) main::toD0181_screen#0 = SCREEN1#0
Constant (const byte*) main::toD0181_gfx#0 = CHARSET#0
Constant (const byte*) doplasma::screen#1 = SCREEN2#0
Constant (const byte*) main::toD0182_screen#0 = SCREEN2#0
Constant (const byte*) main::toD0182_gfx#0 = CHARSET#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::toD0181_$0#0 = ((word))main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = ((word))main::toD0181_gfx#0
Constant (const word) main::toD0182_$0#0 = ((word))main::toD0182_screen#0
Constant (const word) main::toD0182_$4#0 = ((word))main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&$3fff
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Constant (const word) main::toD0182_$1#0 = main::toD0182_$0#0&$3fff
Constant (const byte) main::toD0182_$5#0 = >main::toD0182_$4#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word/signed dword/dword) main::toD0181_$2#0 = main::toD0181_$1#0*4
Constant (const byte/signed word/word/dword/signed dword) main::toD0181_$6#0 = main::toD0181_$5#0/4
Constant (const word/signed dword/dword) main::toD0182_$2#0 = main::toD0182_$1#0*4
Constant (const byte/signed word/word/dword/signed dword) main::toD0182_$6#0 = main::toD0182_$5#0/4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte/word) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte/word/dword) main::toD0181_$7#0 = main::toD0181_$6#0&$f
Constant (const byte/word) main::toD0182_$3#0 = >main::toD0182_$2#0
Constant (const byte/word/dword) main::toD0182_$7#0 = main::toD0182_$6#0&$f
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Constant (const byte) main::toD0182_return#0 = main::toD0182_$3#0|main::toD0182_$7#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [23] if(true) goto main::@4
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value main::col#1 ← ++ main::col#2 to ++
Resolved ranged comparison value if(main::col#1!=rangelast(COLS#0,main::$1)) goto main::@1 to (byte*)(const byte*) main::$1+(byte/signed byte/word/signed word/dword/signed dword) 1
Rewriting multiplication to use shift (word/signed dword/dword~) makecharset::$8 ← (word) makecharset::c#12 * (byte/signed byte/word/signed word/dword/signed dword) 8
Successful SSA optimization Pass2MultiplyToShiftRewriting
Culled Empty Block (label) @4
Culled Empty Block (label) @16
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @23
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::toD0182_@return
Culled Empty Block (label) @26
Culled Empty Block (label) makecharset::@12
Culled Empty Block (label) makecharset::@14
Culled Empty Block (label) @29
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte) c1A#27
Self Phi Eliminated (byte) c1B#27
Self Phi Eliminated (byte) c2A#29
Self Phi Eliminated (byte) c2B#29
Self Phi Eliminated (byte) makecharset::s#3
Self Phi Eliminated (word) makecharset::c#12
Self Phi Eliminated (byte*) makecharset::charset#6
Self Phi Eliminated (byte*) print_line_cursor#40
Self Phi Eliminated (byte*) print_char_cursor#45
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) c1A#27 (byte) c1A#4
Redundant Phi (byte) c1B#27 (byte) c1B#4
Redundant Phi (byte) c2A#29 (byte) c2A#4
Redundant Phi (byte) c2B#29 (byte) c2B#4
Redundant Phi (byte) makecharset::s#3 (byte) makecharset::s#0
Redundant Phi (word) makecharset::c#12 (word) makecharset::c#2
Redundant Phi (byte*) makecharset::charset#6 (byte*) makecharset::charset#7
Redundant Phi (byte*) print_line_cursor#40 (byte*) print_line_cursor#42
Redundant Phi (byte*) print_char_cursor#45 (byte*) print_char_cursor#47
Successful SSA optimization Pass2RedundantPhiElimination
Inferred type updated to word in [76] (word/signed dword/dword~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3
Inferred type updated to word in [77] (word/signed dword/dword~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7
Successful SSA optimization PassNEliminateUnusedVars
Self Phi Eliminated (byte*) makecharset::charset#7
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) makecharset::charset#7 (const byte*) makecharset::charset#0
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) main::col#0
Inlining constant with var siblings (const byte) doplasma::i#0
Inlining constant with var siblings (const byte) doplasma::i1#0
Inlining constant with var siblings (const byte) doplasma::ii#0
Inlining constant with var siblings (const byte) doplasma::i2#0
Inlining constant with var siblings (const byte*) doplasma::screen#0
Inlining constant with var siblings (const byte*) doplasma::screen#1
Inlining constant with var siblings (const word) makecharset::c#0
Inlining constant with var siblings (const byte) makecharset::i#0
Inlining constant with var siblings (const byte) makecharset::b#0
Inlining constant with var siblings (const byte) makecharset::ii#0
Inlining constant with var siblings (const byte) c1A#19
Inlining constant with var siblings (const byte) c1B#19
Inlining constant with var siblings (const byte) c2A#20
Inlining constant with var siblings (const byte) c2B#20
Constant inlined c2B#20 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN1#0
Constant inlined main::toD0181_gfx#0 = (const byte*) CHARSET#0
Constant inlined print_cls::$0 = (const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8
Constant inlined main::col#0 = (const byte*) COLS#0
Constant inlined doplasma::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined doplasma::i2#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined doplasma::i1#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined c1A#19 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined c2A#20 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0182_gfx#0 = (const byte*) CHARSET#0
Constant inlined main::toD0182_$4#0 = ((word))(const byte*) CHARSET#0
Constant inlined main::toD0182_$3#0 = >((word))(const byte*) SCREEN2#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined main::toD0181_$0#0 = ((word))(const byte*) SCREEN1#0
Constant inlined main::toD0182_$6#0 = >((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined doplasma::ii#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$1#0 = ((word))(const byte*) SCREEN1#0&(word/signed word/dword/signed dword) $3fff
Constant inlined main::toD0182_$5#0 = >((word))(const byte*) CHARSET#0
Constant inlined print_cls::sc#0 = (const byte*) print_line_cursor#0
Constant inlined main::toD0182_$7#0 = >((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4&(byte/signed byte/word/signed word/dword/signed dword) $f
Constant inlined makecharset::ii#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$6#0 = >((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined makecharset::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$7#0 = >((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4&(byte/signed byte/word/signed word/dword/signed dword) $f
Constant inlined makecharset::charset#0 = (const byte*) CHARSET#0
Constant inlined main::$1 = (const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8
Constant inlined main::toD0182_$0#0 = ((word))(const byte*) SCREEN2#0
Constant inlined main::toD0181_$2#0 = ((word))(const byte*) SCREEN1#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined doplasma::screen#0 = (const byte*) SCREEN1#0
Constant inlined main::toD0181_$3#0 = >((word))(const byte*) SCREEN1#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined main::toD0182_screen#0 = (const byte*) SCREEN2#0
Constant inlined doplasma::screen#1 = (const byte*) SCREEN2#0
Constant inlined main::toD0181_$4#0 = ((word))(const byte*) CHARSET#0
Constant inlined main::toD0182_$2#0 = ((word))(const byte*) SCREEN2#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined main::toD0181_$5#0 = >((word))(const byte*) CHARSET#0
Constant inlined main::toD0182_$1#0 = ((word))(const byte*) SCREEN2#0&(word/signed word/dword/signed dword) $3fff
Constant inlined c1B#19 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined makecharset::b#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined makecharset::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@14(between main::@1 and main::@1)
Added new block during phi lifting doplasma::@9(between doplasma::@1 and doplasma::@1)
Added new block during phi lifting doplasma::@10(between doplasma::@3 and doplasma::@3)
Added new block during phi lifting doplasma::@11(between doplasma::@7 and doplasma::@5)
Added new block during phi lifting doplasma::@12(between doplasma::@6 and doplasma::@6)
Added new block during phi lifting makecharset::@15(between makecharset::@9 and makecharset::@1)
Added new block during phi lifting makecharset::@16(between makecharset::@6 and makecharset::@2)
Added new block during phi lifting makecharset::@17(between makecharset::@4 and makecharset::@3)
Added new block during phi lifting makecharset::@18(between makecharset::@13 and makecharset::@4)
Added new block during phi lifting makecharset::@19(between makecharset::@7 and makecharset::@9)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @28
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@11
Adding NOP phi() at start of makecharset::@8
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to makecharset:13 doplasma:19 doplasma:26 
Calls in [makecharset] to sid_rnd_init:82 print_cls:84 sid_rnd:90 print_char:108 

Created 27 initial phi equivalence classes
Coalesced [15] c1A#34 ← c1A#14
Coalesced [16] c1B#34 ← c1B#14
Coalesced [17] c2A#34 ← c2A#14
Coalesced [18] c2B#34 ← c2B#14
Coalesced [22] c1A#35 ← c1A#4
Coalesced [23] c1B#35 ← c1B#4
Coalesced [24] c2A#35 ← c2A#4
Coalesced [25] c2B#35 ← c2B#4
Coalesced (already) [29] c1A#33 ← c1A#4
Coalesced (already) [30] c1B#33 ← c1B#4
Coalesced (already) [31] c2A#33 ← c2A#4
Coalesced (already) [32] c2B#33 ← c2B#4
Coalesced [33] main::col#3 ← main::col#1
Coalesced [37] doplasma::c1a#3 ← doplasma::c1a#0
Coalesced [38] doplasma::c1b#3 ← doplasma::c1b#0
Coalesced [50] doplasma::c2a#3 ← doplasma::c2a#0
Coalesced [51] doplasma::c2b#3 ← doplasma::c2b#0
Coalesced [61] doplasma::screen#11 ← doplasma::screen#10
Coalesced [72] doplasma::ii#5 ← doplasma::ii#1
Coalesced [73] doplasma::screen#12 ← doplasma::screen#2
Coalesced [74] doplasma::i2#3 ← doplasma::i2#1
Coalesced [75] doplasma::c2a#4 ← doplasma::c2a#1
Coalesced [76] doplasma::c2b#4 ← doplasma::c2b#1
Coalesced [77] doplasma::i1#3 ← doplasma::i1#1
Coalesced [78] doplasma::c1a#4 ← doplasma::c1a#1
Coalesced [79] doplasma::c1b#4 ← doplasma::c1b#1
Coalesced [80] doplasma::i#3 ← doplasma::i#1
Coalesced [96] makecharset::b#9 ← makecharset::b#1
Coalesced [109] print_char_cursor#51 ← print_char_cursor#1
Coalesced [114] makecharset::c#13 ← makecharset::c#1
Coalesced [115] print_char_cursor#50 ← print_char_cursor#18
Coalesced (already) [116] print_char_cursor#52 ← print_char_cursor#47
Coalesced [117] makecharset::i#8 ← makecharset::i#1
Coalesced [118] makecharset::ii#6 ← makecharset::ii#1
Coalesced [119] makecharset::b#7 ← makecharset::b#3
Coalesced (already) [120] makecharset::b#8 ← makecharset::b#2
Coalesced [132] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 20 phi equivalence classes
Culled Empty Block (label) main::@14
Culled Empty Block (label) doplasma::@11
Culled Empty Block (label) doplasma::@12
Culled Empty Block (label) doplasma::@10
Culled Empty Block (label) doplasma::@9
Culled Empty Block (label) makecharset::@15
Culled Empty Block (label) makecharset::@19
Culled Empty Block (label) makecharset::@16
Culled Empty Block (label) makecharset::@17
Culled Empty Block (label) makecharset::@18
Culled Empty Block (label) print_cls::@3
Renumbering block @25 to @1
Renumbering block @28 to @2
Renumbering block main::@9 to main::@5
Renumbering block main::@10 to main::@6
Renumbering block makecharset::@11 to makecharset::@10
Renumbering block makecharset::@13 to makecharset::@11
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@10
Adding NOP phi() at start of makecharset::@8
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0
  [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [8] (byte*) main::col#2 ← phi( main/(const byte*) COLS#0 main::@1/(byte*) main::col#1 )
  [9] *((byte*) main::col#2) ← (const byte) BLACK#0
  [10] (byte*) main::col#1 ← ++ (byte*) main::col#2
  [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call makecharset 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [14] (byte) c2B#14 ← phi( main::@6/(byte) c2B#4 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [14] (byte) c2A#14 ← phi( main::@6/(byte) c2A#4 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [14] (byte) c1B#14 ← phi( main::@6/(byte) c1B#4 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [14] (byte) c1A#14 ← phi( main::@6/(byte) c1A#4 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call doplasma 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@4
  [17] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [19] call doplasma 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@5
  [20] phi()
  to:main::@6
main::@6: scope:[main]  from main::toD0182
  [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0
  to:main::@3
doplasma: scope:[doplasma]  from main::@4 main::@5
  [22] (byte*) doplasma::screen#10 ← phi( main::@4/(const byte*) SCREEN1#0 main::@5/(const byte*) SCREEN2#0 )
  [22] (byte) c2B#24 ← phi( main::@4/(byte) c2B#14 main::@5/(byte) c2B#4 )
  [22] (byte) c2A#24 ← phi( main::@4/(byte) c2A#14 main::@5/(byte) c2A#4 )
  [22] (byte) c1B#10 ← phi( main::@4/(byte) c1B#14 main::@5/(byte) c1B#4 )
  [22] (byte) c1A#10 ← phi( main::@4/(byte) c1A#14 main::@5/(byte) c1A#4 )
  [23] (byte) doplasma::c1a#0 ← (byte) c1A#10
  [24] (byte) doplasma::c1b#0 ← (byte) c1B#10
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@1
  [25] (byte) doplasma::i#2 ← phi( doplasma/(byte/signed byte/word/signed word/dword/signed dword) 0 doplasma::@1/(byte) doplasma::i#1 )
  [25] (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@1/(byte) doplasma::c1b#1 )
  [25] (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@1/(byte) doplasma::c1a#1 )
  [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2)
  [27] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$0
  [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4
  [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9
  [30] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  [31] if((byte) doplasma::i#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@1
  to:doplasma::@2
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3
  [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5
  [34] (byte) doplasma::c2a#0 ← (byte) c2A#24
  [35] (byte) doplasma::c2b#0 ← (byte) c2B#24
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@2 doplasma::@3
  [36] (byte) doplasma::i1#2 ← phi( doplasma::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 doplasma::@3/(byte) doplasma::i1#1 )
  [36] (byte) doplasma::c2b#2 ← phi( doplasma::@2/(byte) doplasma::c2b#0 doplasma::@3/(byte) doplasma::c2b#1 )
  [36] (byte) doplasma::c2a#2 ← phi( doplasma::@2/(byte) doplasma::c2a#0 doplasma::@3/(byte) doplasma::c2a#1 )
  [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2)
  [38] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$2
  [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3
  [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7
  [41] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  [42] if((byte) doplasma::i1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@3
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3
  [43] (byte) c2A#4 ← (byte) c2A#24 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@4 doplasma::@7
  [45] (byte*) doplasma::screen#5 ← phi( doplasma::@4/(byte*) doplasma::screen#10 doplasma::@7/(byte*) doplasma::screen#2 )
  [45] (byte) doplasma::ii#4 ← phi( doplasma::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 doplasma::@7/(byte) doplasma::ii#1 )
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@5 doplasma::@6
  [46] (byte) doplasma::i2#2 ← phi( doplasma::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 doplasma::@6/(byte) doplasma::i2#1 )
  [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4)
  [48] *((byte*) doplasma::screen#5 + (byte) doplasma::i2#2) ← (byte~) doplasma::$4
  [49] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2
  [50] if((byte) doplasma::i2#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@6
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@6
  [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [52] (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#4
  [53] if((byte) doplasma::ii#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@5
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  [54] return 
  to:@return
makecharset: scope:[makecharset]  from main::@2
  [55] phi()
  [56] call sid_rnd_init 
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset
  [57] phi()
  [58] call print_cls 
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@10 makecharset::@9
  [59] (byte*) print_char_cursor#47 ← phi( makecharset::@10/(const byte*) print_line_cursor#0 makecharset::@9/(byte*) print_char_cursor#18 )
  [59] (word) makecharset::c#2 ← phi( makecharset::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@9/(word) makecharset::c#1 )
  [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2
  [61] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2)
  to:makecharset::@2
makecharset::@2: scope:[makecharset]  from makecharset::@1 makecharset::@6
  [62] (byte) makecharset::i#7 ← phi( makecharset::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@6/(byte) makecharset::i#1 )
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@4
  [63] (byte) makecharset::b#2 ← phi( makecharset::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@4/(byte) makecharset::b#3 )
  [63] (byte) makecharset::ii#2 ← phi( makecharset::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 makecharset::@4/(byte) makecharset::ii#1 )
  [64] call sid_rnd 
  [65] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@3
  [66] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  [67] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte/word/signed word/dword/signed dword) $ff
  [68] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@11
  [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2)
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@11 makecharset::@5
  [70] (byte) makecharset::b#3 ← phi( makecharset::@11/(byte) makecharset::b#2 makecharset::@5/(byte) makecharset::b#1 )
  [71] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  [72] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@3
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@4
  [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7
  [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3
  [76] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7
  [77] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [79] if((byte/word~) makecharset::$11!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto makecharset::@9
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@7
  [80] phi()
  [81] call print_char 
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@7 makecharset::@8
  [82] (byte*) print_char_cursor#18 ← phi( makecharset::@8/(byte*) print_char_cursor#1 makecharset::@7/(byte*) print_char_cursor#47 )
  [83] (word) makecharset::c#1 ← ++ (word) makecharset::c#2
  [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@9
  [85] return 
  to:@return
print_char: scope:[print_char]  from makecharset::@8
  [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0
  [87] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#47
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [88] return 
  to:@return
sid_rnd: scope:[sid_rnd]  from makecharset::@3
  [89] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [90] return 
  to:@return
print_cls: scope:[print_cls]  from makecharset::@10
  [91] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [92] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_line_cursor#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [93] *((byte*) print_cls::sc#2) ← (byte) ' '
  [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [96] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from makecharset
  [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff
  [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [99] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CHARSET
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN1
(byte*) SCREEN2
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TRIANGLE
(byte*) SID_VOICE3_CONTROL
(word*) SID_VOICE3_FREQ
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_OSC
(byte*) SINTABLE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(byte) c1A
(byte) c1A#10 2.6000000000000005
(byte) c1A#14 11.0
(byte) c1A#4 0.8275862068965517
(byte) c1B
(byte) c1B#10 2.3636363636363633
(byte) c1B#14 11.0
(byte) c1B#4 0.8571428571428571
(byte) c2A
(byte) c2A#14 11.0
(byte) c2A#24 1.2380952380952381
(byte) c2A#4 1.3333333333333335
(byte) c2B
(byte) c2B#14 11.0
(byte) c2B#24 1.1818181818181817
(byte) c2B#4 1.411764705882353
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$0 202.0
(byte~) doplasma::$2 202.0
(byte~) doplasma::$4 2002.0
(byte) doplasma::c1a
(byte) doplasma::c1a#0 2.0
(byte) doplasma::c1a#1 50.5
(byte) doplasma::c1a#2 101.66666666666666
(byte) doplasma::c1b
(byte) doplasma::c1b#0 4.0
(byte) doplasma::c1b#1 67.33333333333333
(byte) doplasma::c1b#2 76.25
(byte) doplasma::c2a
(byte) doplasma::c2a#0 2.0
(byte) doplasma::c2a#1 50.5
(byte) doplasma::c2a#2 101.66666666666666
(byte) doplasma::c2b
(byte) doplasma::c2b#0 4.0
(byte) doplasma::c2b#1 67.33333333333333
(byte) doplasma::c2b#2 76.25
(byte) doplasma::i
(byte) doplasma::i#1 151.5
(byte) doplasma::i#2 60.599999999999994
(byte) doplasma::i1
(byte) doplasma::i1#1 151.5
(byte) doplasma::i1#2 60.599999999999994
(byte) doplasma::i2
(byte) doplasma::i2#1 1501.5
(byte) doplasma::i2#2 1334.6666666666667
(byte) doplasma::ii
(byte) doplasma::ii#1 151.5
(byte) doplasma::ii#4 171.85714285714283
(byte*) doplasma::screen
(byte*) doplasma::screen#10 0.08695652173913043
(byte*) doplasma::screen#2 67.33333333333333
(byte*) doplasma::screen#5 200.83333333333334
(byte[$28]) doplasma::xbuf
(byte[$19]) doplasma::ybuf
(void()) main()
(byte*) main::col
(byte*) main::col#1 16.5
(byte*) main::col#2 16.5
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word/signed dword/dword~) main::toD0181_$2
(byte/word~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte/signed word/word/dword/signed dword~) main::toD0181_$6
(byte/word/dword~) main::toD0181_$7
(byte/word/dword~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(word~) main::toD0182_$0
(word~) main::toD0182_$1
(word/signed dword/dword~) main::toD0182_$2
(byte/word~) main::toD0182_$3
(word~) main::toD0182_$4
(byte~) main::toD0182_$5
(byte/signed word/word/dword/signed dword~) main::toD0182_$6
(byte/word/dword~) main::toD0182_$7
(byte/word/dword~) main::toD0182_$8
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(byte*) main::toD0182_screen
(void()) makecharset((byte*) makecharset::charset)
(byte/word~) makecharset::$11 22.0
(byte~) makecharset::$2 22.0
(byte~) makecharset::$3 2002.0
(byte~) makecharset::$4 2002.0
(word~) makecharset::$8 202.0
(word~) makecharset::$9 202.0
(byte) makecharset::b
(byte) makecharset::b#1 2002.0
(byte) makecharset::b#2 500.5
(byte) makecharset::b#3 620.8
(byte[8]) makecharset::bittab
(word) makecharset::c
(word) makecharset::c#1 16.5
(word) makecharset::c#2 6.041666666666666
(byte*) makecharset::charset
(byte) makecharset::i
(byte) makecharset::i#1 151.5
(byte) makecharset::i#7 21.642857142857142
(byte) makecharset::ii
(byte) makecharset::ii#1 1501.5
(byte) makecharset::ii#2 375.375
(byte) makecharset::s
(byte) makecharset::s#0 59.529411764705884
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte*) print_char_cursor
(byte*) print_char_cursor#1 4.333333333333333
(byte*) print_char_cursor#18 11.0
(byte*) print_char_cursor#47 1.1304347826086956
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_screen
(byte()) sid_rnd()
(byte) sid_rnd::return
(byte) sid_rnd::return#0 334.33333333333337
(byte) sid_rnd::return#2 2002.0
(void()) sid_rnd_init()

Initial phi equivalence classes
[ main::col#2 main::col#1 ]
[ c1A#10 c1A#14 c1A#4 ]
[ c1B#10 c1B#14 c1B#4 ]
[ c2A#24 c2A#14 c2A#4 ]
[ c2B#24 c2B#14 c2B#4 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::ii#4 doplasma::ii#1 ]
[ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ]
[ makecharset::i#7 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable doplasma::$0 to zero page equivalence class [ doplasma::$0 ]
Added variable doplasma::$2 to zero page equivalence class [ doplasma::$2 ]
Added variable doplasma::$4 to zero page equivalence class [ doplasma::$4 ]
Added variable makecharset::$2 to zero page equivalence class [ makecharset::$2 ]
Added variable makecharset::s#0 to zero page equivalence class [ makecharset::s#0 ]
Added variable sid_rnd::return#2 to zero page equivalence class [ sid_rnd::return#2 ]
Added variable makecharset::$3 to zero page equivalence class [ makecharset::$3 ]
Added variable makecharset::$4 to zero page equivalence class [ makecharset::$4 ]
Added variable makecharset::$8 to zero page equivalence class [ makecharset::$8 ]
Added variable makecharset::$9 to zero page equivalence class [ makecharset::$9 ]
Added variable makecharset::$11 to zero page equivalence class [ makecharset::$11 ]
Added variable sid_rnd::return#0 to zero page equivalence class [ sid_rnd::return#0 ]
Complete equivalence classes
[ main::col#2 main::col#1 ]
[ c1A#10 c1A#14 c1A#4 ]
[ c1B#10 c1B#14 c1B#4 ]
[ c2A#24 c2A#14 c2A#4 ]
[ c2B#24 c2B#14 c2B#4 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::ii#4 doplasma::ii#1 ]
[ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ]
[ makecharset::i#7 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ doplasma::$0 ]
[ doplasma::$2 ]
[ doplasma::$4 ]
[ makecharset::$2 ]
[ makecharset::s#0 ]
[ sid_rnd::return#2 ]
[ makecharset::$3 ]
[ makecharset::$4 ]
[ makecharset::$8 ]
[ makecharset::$9 ]
[ makecharset::$11 ]
[ sid_rnd::return#0 ]
Allocated zp ZP_WORD:2 [ main::col#2 main::col#1 ]
Allocated zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ]
Allocated zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ]
Allocated zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ]
Allocated zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ]
Allocated zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Allocated zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Allocated zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ]
Allocated zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Allocated zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Allocated zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ]
Allocated zp ZP_BYTE:14 [ doplasma::ii#4 doplasma::ii#1 ]
Allocated zp ZP_WORD:15 [ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ]
Allocated zp ZP_BYTE:17 [ doplasma::i2#2 doplasma::i2#1 ]
Allocated zp ZP_WORD:18 [ makecharset::c#2 makecharset::c#1 ]
Allocated zp ZP_WORD:20 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ]
Allocated zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ]
Allocated zp ZP_BYTE:23 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated zp ZP_BYTE:24 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
Allocated zp ZP_WORD:25 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:27 [ doplasma::$0 ]
Allocated zp ZP_BYTE:28 [ doplasma::$2 ]
Allocated zp ZP_BYTE:29 [ doplasma::$4 ]
Allocated zp ZP_BYTE:30 [ makecharset::$2 ]
Allocated zp ZP_BYTE:31 [ makecharset::s#0 ]
Allocated zp ZP_BYTE:32 [ sid_rnd::return#2 ]
Allocated zp ZP_BYTE:33 [ makecharset::$3 ]
Allocated zp ZP_BYTE:34 [ makecharset::$4 ]
Allocated zp ZP_WORD:35 [ makecharset::$8 ]
Allocated zp ZP_WORD:37 [ makecharset::$9 ]
Allocated zp ZP_BYTE:39 [ makecharset::$11 ]
Allocated zp ZP_BYTE:40 [ sid_rnd::return#0 ]

INITIAL ASM
//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label SCREEN2 = $2c00
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $14
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
//SEG7 @2
b2:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
    jmp b1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1_from_b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1_from_b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [13] call makecharset 
  //SEG26 [55] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from_b2:
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG28 [14] phi (byte) c2B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG29 [14] phi (byte) c2A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta c2A
  //SEG30 [14] phi (byte) c1B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta c1B
  //SEG31 [14] phi (byte) c1A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta c1A
    jmp b3
  // Show double-buffered plasma
  //SEG32 main::@3
  b3:
  //SEG33 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG34 main::@4
  b4:
  //SEG35 [16] call doplasma 
  //SEG36 [22] phi from main::@4 to doplasma [phi:main::@4->doplasma]
  doplasma_from_b4:
  //SEG37 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN1#0 [phi:main::@4->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta doplasma.screen
    lda #>SCREEN1
    sta doplasma.screen+1
  //SEG38 [22] phi (byte) c2B#24 = (byte) c2B#14 [phi:main::@4->doplasma#1] -- register_copy 
  //SEG39 [22] phi (byte) c2A#24 = (byte) c2A#14 [phi:main::@4->doplasma#2] -- register_copy 
  //SEG40 [22] phi (byte) c1B#10 = (byte) c1B#14 [phi:main::@4->doplasma#3] -- register_copy 
  //SEG41 [22] phi (byte) c1A#10 = (byte) c1A#14 [phi:main::@4->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG42 [17] phi from main::@4 to main::toD0181 [phi:main::@4->main::toD0181]
  toD0181_from_b4:
    jmp toD0181
  //SEG43 main::toD0181
  toD0181:
    jmp b5
  //SEG44 main::@5
  b5:
  //SEG45 [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG46 [19] call doplasma 
  //SEG47 [22] phi from main::@5 to doplasma [phi:main::@5->doplasma]
  doplasma_from_b5:
  //SEG48 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN2#0 [phi:main::@5->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta doplasma.screen
    lda #>SCREEN2
    sta doplasma.screen+1
  //SEG49 [22] phi (byte) c2B#24 = (byte) c2B#4 [phi:main::@5->doplasma#1] -- register_copy 
  //SEG50 [22] phi (byte) c2A#24 = (byte) c2A#4 [phi:main::@5->doplasma#2] -- register_copy 
  //SEG51 [22] phi (byte) c1B#10 = (byte) c1B#4 [phi:main::@5->doplasma#3] -- register_copy 
  //SEG52 [22] phi (byte) c1A#10 = (byte) c1A#4 [phi:main::@5->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG53 [20] phi from main::@5 to main::toD0182 [phi:main::@5->main::toD0182]
  toD0182_from_b5:
    jmp toD0182
  //SEG54 main::toD0182
  toD0182:
    jmp b6
  //SEG55 main::@6
  b6:
  //SEG56 [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
  //SEG57 [14] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  b3_from_b6:
  //SEG58 [14] phi (byte) c2B#14 = (byte) c2B#4 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG59 [14] phi (byte) c2A#14 = (byte) c2A#4 [phi:main::@6->main::@3#1] -- register_copy 
  //SEG60 [14] phi (byte) c1B#14 = (byte) c1B#4 [phi:main::@6->main::@3#2] -- register_copy 
  //SEG61 [14] phi (byte) c1A#14 = (byte) c1A#4 [phi:main::@6->main::@3#3] -- register_copy 
    jmp b3
}
//SEG62 doplasma
// Render plasma to the passed screen
// doplasma(byte* zeropage($f) screen)
doplasma: {
    .label _0 = $1b
    .label _2 = $1c
    .label _4 = $1d
    .label c1a = 8
    .label c1b = 9
    .label i = $a
    .label c2a = $b
    .label c2b = $c
    .label i1 = $d
    .label i2 = $11
    .label screen = $f
    .label ii = $e
  //SEG63 [23] (byte) doplasma::c1a#0 ← (byte) c1A#10 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG64 [24] (byte) doplasma::c1b#0 ← (byte) c1B#10 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG65 [25] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  b1_from_doplasma:
  //SEG66 [25] phi (byte) doplasma::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG67 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#1] -- register_copy 
  //SEG68 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
    jmp b1
  //SEG69 [25] phi from doplasma::@1 to doplasma::@1 [phi:doplasma::@1->doplasma::@1]
  b1_from_b1:
  //SEG70 [25] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@1->doplasma::@1#0] -- register_copy 
  //SEG71 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@1->doplasma::@1#1] -- register_copy 
  //SEG72 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@1->doplasma::@1#2] -- register_copy 
    jmp b1
  //SEG73 doplasma::@1
  b1:
  //SEG74 [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
    sta _0
  //SEG75 [27] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy i
    sta ybuf,y
  //SEG76 [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG77 [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG78 [30] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [31] if((byte) doplasma::i#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcc b1_from_b1
    jmp b2
  //SEG80 doplasma::@2
  b2:
  //SEG81 [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG82 [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG83 [34] (byte) doplasma::c2a#0 ← (byte) c2A#24 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG84 [35] (byte) doplasma::c2b#0 ← (byte) c2B#24 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG85 [36] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  b3_from_b2:
  //SEG86 [36] phi (byte) doplasma::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG87 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG88 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG89 [36] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  b3_from_b3:
  //SEG90 [36] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG91 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG92 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG93 doplasma::@3
  b3:
  //SEG94 [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc1_derefidx_vbuz3 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
    sta _2
  //SEG95 [38] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _2
    ldy i1
    sta xbuf,y
  //SEG96 [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG97 [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG98 [41] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG99 [42] if((byte) doplasma::i1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3_from_b3
    jmp b4
  //SEG100 doplasma::@4
  b4:
  //SEG101 [43] (byte) c2A#4 ← (byte) c2A#24 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG102 [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG103 [45] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  b5_from_b4:
  //SEG104 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#10 [phi:doplasma::@4->doplasma::@5#0] -- register_copy 
  //SEG105 [45] phi (byte) doplasma::ii#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@4->doplasma::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta ii
    jmp b5
  //SEG106 [45] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  b5_from_b7:
  //SEG107 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#2 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
  //SEG108 [45] phi (byte) doplasma::ii#4 = (byte) doplasma::ii#1 [phi:doplasma::@7->doplasma::@5#1] -- register_copy 
    jmp b5
  //SEG109 doplasma::@5
  b5:
  //SEG110 [46] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  b6_from_b5:
  //SEG111 [46] phi (byte) doplasma::i2#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta i2
    jmp b6
  //SEG112 [46] phi from doplasma::@6 to doplasma::@6 [phi:doplasma::@6->doplasma::@6]
  b6_from_b6:
  //SEG113 [46] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@6->doplasma::@6#0] -- register_copy 
    jmp b6
  //SEG114 doplasma::@6
  b6:
  //SEG115 [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc2_derefidx_vbuz3 
    ldy i2
    lda xbuf,y
    ldy ii
    clc
    adc ybuf,y
    sta _4
  //SEG116 [48] *((byte*) doplasma::screen#5 + (byte) doplasma::i2#2) ← (byte~) doplasma::$4 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda _4
    ldy i2
    sta (screen),y
  //SEG117 [49] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuz1=_inc_vbuz1 
    inc i2
  //SEG118 [50] if((byte) doplasma::i2#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda i2
    cmp #$28
    bcc b6_from_b6
    jmp b7
  //SEG119 doplasma::@7
  b7:
  //SEG120 [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen
    sta screen
    bcc !+
    inc screen+1
  !:
  //SEG121 [52] (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#4 -- vbuz1=_inc_vbuz1 
    inc ii
  //SEG122 [53] if((byte) doplasma::ii#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda ii
    cmp #$19
    bcc b5_from_b7
    jmp breturn
  //SEG123 doplasma::@return
  breturn:
  //SEG124 [54] return 
    rts
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG125 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _2 = $1e
    .label _3 = $21
    .label _4 = $22
    .label _8 = $23
    .label _9 = $25
    .label _11 = $27
    .label s = $1f
    .label ii = $17
    .label b = $18
    .label i = $16
    .label c = $12
  //SEG126 [56] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG127 [57] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  b10_from_makecharset:
    jmp b10
  //SEG128 makecharset::@10
  b10:
  //SEG129 [58] call print_cls 
  //SEG130 [91] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
  print_cls_from_b10:
    jsr print_cls
  //SEG131 [59] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  b1_from_b10:
  //SEG132 [59] phi (byte*) print_char_cursor#47 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG133 [59] phi (word) makecharset::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    lda #0
    sta c+1
    jmp b1
  //SEG134 [59] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  b1_from_b9:
  //SEG135 [59] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG136 [59] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
    jmp b1
  //SEG137 makecharset::@1
  b1:
  //SEG138 [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuz1=_lo_vwuz2 
    lda c
    sta _2
  //SEG139 [61] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda SINTABLE,y
    sta s
  //SEG140 [62] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  b2_from_b1:
  //SEG141 [62] phi (byte) makecharset::i#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG142 [62] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  b2_from_b6:
  //SEG143 [62] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
    jmp b2
  //SEG144 makecharset::@2
  b2:
  //SEG145 [63] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  b3_from_b2:
  //SEG146 [63] phi (byte) makecharset::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG147 [63] phi (byte) makecharset::ii#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta ii
    jmp b3
  //SEG148 [63] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  b3_from_b4:
  //SEG149 [63] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG150 [63] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
    jmp b3
  //SEG151 makecharset::@3
  b3:
  //SEG152 [64] call sid_rnd 
    jsr sid_rnd
  //SEG153 [65] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0 -- vbuz1=vbuz2 
    lda sid_rnd.return
    sta sid_rnd.return_2
    jmp b11
  //SEG154 makecharset::@11
  b11:
  //SEG155 [66] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2 -- vbuz1=vbuz2 
    lda sid_rnd.return_2
    sta _3
  //SEG156 [67] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte/word/signed word/dword/signed dword) $ff -- vbuz1=vbuz2_band_vbuc1 
    lda #$ff
    and _3
    sta _4
  //SEG157 [68] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4_from_b11
    jmp b5
  //SEG158 makecharset::@5
  b5:
  //SEG159 [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuz1=vbuz1_bor_pbuc1_derefidx_vbuz2 
    lda b
    ldy ii
    ora bittab,y
    sta b
  //SEG160 [70] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  b4_from_b11:
  b4_from_b5:
  //SEG161 [70] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
    jmp b4
  //SEG162 makecharset::@4
  b4:
  //SEG163 [71] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc ii
  //SEG164 [72] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda ii
    cmp #8
    bcc b3_from_b4
    jmp b6
  //SEG165 makecharset::@6
  b6:
  //SEG166 [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG167 [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz2_plus_vbuz3 
    lda i
    clc
    adc _8
    sta _9
    lda #0
    adc _8+1
    sta _9+1
  //SEG168 [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3 -- pbuc1_derefidx_vwuz1=vbuz2 
    lda b
    sta !v++1
    lda #<CHARSET
    clc
    adc _9
    sta !a++1
    lda #>CHARSET
    adc _9+1
    sta !a++2
  !v:
    lda #0
  !a:
    sta CHARSET
  //SEG169 [76] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG170 [77] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2_from_b6
    jmp b7
  //SEG171 makecharset::@7
  b7:
  //SEG172 [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vwuz2_band_vbuc1 
    lda c
    and #7
    sta _11
  //SEG173 [79] if((byte/word~) makecharset::$11!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto makecharset::@9 -- vbuz1_neq_0_then_la1 
    lda _11
    cmp #0
    bne b9_from_b7
  //SEG174 [80] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  b8_from_b7:
    jmp b8
  //SEG175 makecharset::@8
  b8:
  //SEG176 [81] call print_char 
    jsr print_char
  //SEG177 [82] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  b9_from_b7:
  b9_from_b8:
  //SEG178 [82] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#47 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
    jmp b9
  //SEG179 makecharset::@9
  b9:
  //SEG180 [83] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG181 [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1_from_b9
    bne !+
    lda c
    cmp #<$100
    bcc b1_from_b9
  !:
    jmp breturn
  //SEG182 makecharset::@return
  breturn:
  //SEG183 [85] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG184 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG185 [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG186 [87] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#47 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG187 print_char::@return
  breturn:
  //SEG188 [88] return 
    rts
}
//SEG189 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
    .label return = $28
    .label return_2 = $20
  //SEG190 [89] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuz1=_deref_pbuc1 
    lda SID_VOICE3_OSC
    sta return
    jmp breturn
  //SEG191 sid_rnd::@return
  breturn:
  //SEG192 [90] return 
    rts
}
//SEG193 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $19
  //SEG194 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG195 [92] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG196 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG197 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG198 print_cls::@1
  b1:
  //SEG199 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG200 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG201 [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG202 print_cls::@return
  breturn:
  //SEG203 [96] return 
    rts
}
//SEG204 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG205 [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG206 [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG207 sid_rnd_init::@return
  breturn:
  //SEG208 [99] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*) main::col#2) ← (const byte) BLACK#0 [ main::col#2 ] ( main:3 [ main::col#2 ] ) always clobbers reg byte a reg byte y 
Statement [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1 [ main::col#1 ] ( main:3 [ main::col#1 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ( main:3 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ]
Statement [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ( main:3 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ) always clobbers reg byte a 
Statement [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ]
Statement [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] ) always clobbers reg byte a 
Statement [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ) always clobbers reg byte a 
Statement [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ]
Statement [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ) always clobbers reg byte a 
Statement [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ) always clobbers reg byte a 
Statement [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4) [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ doplasma::ii#4 doplasma::ii#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ doplasma::i2#2 doplasma::i2#1 ]
Statement [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] ) always clobbers reg byte a 
Statement [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2 [ makecharset::c#2 print_char_cursor#47 makecharset::$2 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::$2 ] ) always clobbers reg byte a 
Statement [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ makecharset::s#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ makecharset::ii#2 makecharset::ii#1 ]
Statement [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
Statement [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ) always clobbers reg byte a 
Statement [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 ] ) always clobbers reg byte a 
Statement [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ makecharset::c#2 print_char_cursor#47 makecharset::$11 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::$11 ] ) always clobbers reg byte a 
Statement [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1 [ makecharset::c#1 print_char_cursor#18 ] ( main:3::makecharset:13 [ makecharset::c#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0 [ print_char_cursor#47 ] ( main:3::makecharset:13::print_char:81 [ makecharset::c#2 print_char_cursor#47 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::makecharset:13::print_cls:58 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::makecharset:13::print_cls:58 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff [ ] ( main:3::makecharset:13::sid_rnd_init:56 [ ] ) always clobbers reg byte a 
Statement [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::makecharset:13::sid_rnd_init:56 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((byte*) main::col#2) ← (const byte) BLACK#0 [ main::col#2 ] ( main:3 [ main::col#2 ] ) always clobbers reg byte a reg byte y 
Statement [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1 [ main::col#1 ] ( main:3 [ main::col#1 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ( main:3 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ) always clobbers reg byte a 
Statement [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ( main:3 [ c1A#4 c1B#4 c2A#4 c2B#4 ] ) always clobbers reg byte a 
Statement [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1a#2 doplasma::c1b#2 doplasma::i#2 doplasma::$0 ] ) always clobbers reg byte a 
Statement [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::c1b#2 doplasma::i#2 doplasma::c1a#1 ] ) always clobbers reg byte a 
Statement [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ( main:3::doplasma:16 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] main:3::doplasma:19 [ c1A#10 c1B#10 c2A#24 c2B#24 doplasma::screen#10 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ) always clobbers reg byte a 
Statement [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#10 c2A#24 c2B#24 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2a#2 doplasma::c2b#2 doplasma::i1#2 doplasma::$2 ] ) always clobbers reg byte a 
Statement [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::c2b#2 doplasma::i1#2 doplasma::c2a#1 ] ) always clobbers reg byte a 
Statement [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#24 c2B#24 doplasma::screen#10 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ) always clobbers reg byte a 
Statement [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::screen#10 ] ) always clobbers reg byte a 
Statement [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4) [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#5 doplasma::i2#2 doplasma::$4 ] ) always clobbers reg byte a 
Statement [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] ( main:3::doplasma:16 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] main:3::doplasma:19 [ c1A#4 c1B#4 c2A#4 c2B#4 doplasma::ii#4 doplasma::screen#2 ] ) always clobbers reg byte a 
Statement [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2 [ makecharset::c#2 print_char_cursor#47 makecharset::$2 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::$2 ] ) always clobbers reg byte a 
Statement [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::ii#2 makecharset::b#1 ] ) always clobbers reg byte a 
Statement [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$8 ] ) always clobbers reg byte a 
Statement [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 makecharset::b#3 makecharset::$9 ] ) always clobbers reg byte a 
Statement [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::s#0 makecharset::i#7 ] ) always clobbers reg byte a 
Statement [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ makecharset::c#2 print_char_cursor#47 makecharset::$11 ] ( main:3::makecharset:13 [ makecharset::c#2 print_char_cursor#47 makecharset::$11 ] ) always clobbers reg byte a 
Statement [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1 [ makecharset::c#1 print_char_cursor#18 ] ( main:3::makecharset:13 [ makecharset::c#1 print_char_cursor#18 ] ) always clobbers reg byte a 
Statement [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0 [ print_char_cursor#47 ] ( main:3::makecharset:13::print_char:81 [ makecharset::c#2 print_char_cursor#47 ] ) always clobbers reg byte a reg byte y 
Statement [93] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:3::makecharset:13::print_cls:58 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:3::makecharset:13::print_cls:58 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff [ ] ( main:3::makecharset:13::sid_rnd_init:56 [ ] ) always clobbers reg byte a 
Statement [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:3::makecharset:13::sid_rnd_init:56 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::col#2 main::col#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ doplasma::ii#4 doplasma::ii#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:15 [ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ doplasma::i2#2 doplasma::i2#1 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:18 [ makecharset::c#2 makecharset::c#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_WORD:20 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ] : zp ZP_BYTE:22 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ makecharset::ii#2 makecharset::ii#1 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:25 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_BYTE:27 [ doplasma::$0 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ doplasma::$2 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ doplasma::$4 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ makecharset::$2 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ makecharset::s#0 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ sid_rnd::return#2 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ makecharset::$3 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ makecharset::$4 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:35 [ makecharset::$8 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_WORD:37 [ makecharset::$9 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_BYTE:39 [ makecharset::$11 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ sid_rnd::return#0 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [makecharset] 3,123.3: zp ZP_BYTE:24 [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] 2,002: zp ZP_BYTE:33 [ makecharset::$3 ] 2,002: zp ZP_BYTE:34 [ makecharset::$4 ] 1,876.88: zp ZP_BYTE:23 [ makecharset::ii#2 makecharset::ii#1 ] 202: zp ZP_WORD:35 [ makecharset::$8 ] 202: zp ZP_WORD:37 [ makecharset::$9 ] 173.14: zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ] 59.53: zp ZP_BYTE:31 [ makecharset::s#0 ] 22.54: zp ZP_WORD:18 [ makecharset::c#2 makecharset::c#1 ] 22: zp ZP_BYTE:30 [ makecharset::$2 ] 22: zp ZP_BYTE:39 [ makecharset::$11 ] 
Uplift Scope [doplasma] 2,836.17: zp ZP_BYTE:17 [ doplasma::i2#2 doplasma::i2#1 ] 2,002: zp ZP_BYTE:29 [ doplasma::$4 ] 323.36: zp ZP_BYTE:14 [ doplasma::ii#4 doplasma::ii#1 ] 268.25: zp ZP_WORD:15 [ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ] 212.1: zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ] 212.1: zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ] 202: zp ZP_BYTE:27 [ doplasma::$0 ] 202: zp ZP_BYTE:28 [ doplasma::$2 ] 154.17: zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 154.17: zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 147.58: zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 147.58: zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 
Uplift Scope [sid_rnd] 2,002: zp ZP_BYTE:32 [ sid_rnd::return#2 ] 334.33: zp ZP_BYTE:40 [ sid_rnd::return#0 ] 
Uplift Scope [] 16.46: zp ZP_WORD:20 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ] 14.43: zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ] 14.22: zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ] 13.59: zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ] 13.57: zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:25 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [main] 33: zp ZP_WORD:2 [ main::col#2 main::col#1 ] 
Uplift Scope [print_char] 
Uplift Scope [sid_rnd_init] 

Uplifting [makecharset] best 157628 combination reg byte y [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ] reg byte a [ makecharset::$3 ] zp ZP_BYTE:34 [ makecharset::$4 ] reg byte x [ makecharset::ii#2 makecharset::ii#1 ] zp ZP_WORD:35 [ makecharset::$8 ] zp ZP_WORD:37 [ makecharset::$9 ] zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ] zp ZP_BYTE:31 [ makecharset::s#0 ] zp ZP_WORD:18 [ makecharset::c#2 makecharset::c#1 ] zp ZP_BYTE:30 [ makecharset::$2 ] zp ZP_BYTE:39 [ makecharset::$11 ] 
Limited combination testing to 100 combinations of 20736 possible.
Uplifting [doplasma] best 132728 combination reg byte y [ doplasma::i2#2 doplasma::i2#1 ] reg byte a [ doplasma::$4 ] reg byte x [ doplasma::ii#4 doplasma::ii#1 ] zp ZP_WORD:15 [ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ] zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ] zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ] zp ZP_BYTE:27 [ doplasma::$0 ] zp ZP_BYTE:28 [ doplasma::$2 ] zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 
Limited combination testing to 100 combinations of 419904 possible.
Uplifting [sid_rnd] best 123725 combination reg byte a [ sid_rnd::return#2 ] reg byte a [ sid_rnd::return#0 ] 
Uplifting [] best 123725 combination zp ZP_WORD:20 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ] zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ] zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ] zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ] zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ] 
Uplifting [print_cls] best 123725 combination zp ZP_WORD:25 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [main] best 123725 combination zp ZP_WORD:2 [ main::col#2 main::col#1 ] 
Uplifting [print_char] best 123725 combination 
Uplifting [sid_rnd_init] best 123725 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ makecharset::$4 ]
Uplifting [makecharset] best 123725 combination zp ZP_BYTE:34 [ makecharset::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ]
Uplifting [doplasma] best 123725 combination zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ]
Uplifting [doplasma] best 123725 combination zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ doplasma::$0 ]
Uplifting [doplasma] best 123125 combination reg byte a [ doplasma::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ doplasma::$2 ]
Uplifting [doplasma] best 122525 combination reg byte a [ doplasma::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ]
Uplifting [makecharset] best 122525 combination zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Uplifting [doplasma] best 122525 combination zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Uplifting [doplasma] best 122525 combination zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Uplifting [doplasma] best 122525 combination zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Uplifting [doplasma] best 122525 combination zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ makecharset::s#0 ]
Uplifting [makecharset] best 122525 combination zp ZP_BYTE:31 [ makecharset::s#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ makecharset::$2 ]
Uplifting [makecharset] best 122485 combination reg byte a [ makecharset::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ makecharset::$11 ]
Uplifting [makecharset] best 122425 combination reg byte a [ makecharset::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ]
Uplifting [] best 122425 combination zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ]
Uplifting [] best 122425 combination zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ]
Uplifting [] best 122425 combination zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ]
Uplifting [] best 122425 combination zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:35 [ makecharset::$8 ] ] with [ zp ZP_WORD:37 [ makecharset::$9 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ main::col#2 main::col#1 ] ] with [ zp ZP_WORD:15 [ doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::col#2 main::col#1 doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 ] ] with [ zp ZP_WORD:18 [ makecharset::c#2 makecharset::c#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::col#2 main::col#1 doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 makecharset::c#2 makecharset::c#1 ] ] with [ zp ZP_WORD:25 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 ] ] with [ zp ZP_BYTE:22 [ makecharset::i#7 makecharset::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 ] ] with [ zp ZP_BYTE:31 [ makecharset::s#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 ] ] with [ zp ZP_BYTE:34 [ makecharset::$4 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] ] with [ zp ZP_BYTE:11 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] ] with [ zp ZP_BYTE:12 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 ] ] with [ zp ZP_BYTE:13 [ doplasma::i1#2 doplasma::i1#1 ] ]
Allocated (was zp ZP_WORD:20) zp ZP_WORD:11 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ]
Allocated (was zp ZP_WORD:35) zp ZP_WORD:13 [ makecharset::$8 makecharset::$9 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label SCREEN2 = $2c00
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $b
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
b2_from_b1:
  jmp b2
//SEG7 @2
b2:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
    jmp b1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1_from_b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1_from_b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [13] call makecharset 
  //SEG26 [55] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from_b2:
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG28 [14] phi (byte) c2B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG29 [14] phi (byte) c2A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta c2A
  //SEG30 [14] phi (byte) c1B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta c1B
  //SEG31 [14] phi (byte) c1A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta c1A
    jmp b3
  // Show double-buffered plasma
  //SEG32 main::@3
  b3:
  //SEG33 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG34 main::@4
  b4:
  //SEG35 [16] call doplasma 
  //SEG36 [22] phi from main::@4 to doplasma [phi:main::@4->doplasma]
  doplasma_from_b4:
  //SEG37 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN1#0 [phi:main::@4->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta doplasma.screen
    lda #>SCREEN1
    sta doplasma.screen+1
  //SEG38 [22] phi (byte) c2B#24 = (byte) c2B#14 [phi:main::@4->doplasma#1] -- register_copy 
  //SEG39 [22] phi (byte) c2A#24 = (byte) c2A#14 [phi:main::@4->doplasma#2] -- register_copy 
  //SEG40 [22] phi (byte) c1B#10 = (byte) c1B#14 [phi:main::@4->doplasma#3] -- register_copy 
  //SEG41 [22] phi (byte) c1A#10 = (byte) c1A#14 [phi:main::@4->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG42 [17] phi from main::@4 to main::toD0181 [phi:main::@4->main::toD0181]
  toD0181_from_b4:
    jmp toD0181
  //SEG43 main::toD0181
  toD0181:
    jmp b5
  //SEG44 main::@5
  b5:
  //SEG45 [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG46 [19] call doplasma 
  //SEG47 [22] phi from main::@5 to doplasma [phi:main::@5->doplasma]
  doplasma_from_b5:
  //SEG48 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN2#0 [phi:main::@5->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta doplasma.screen
    lda #>SCREEN2
    sta doplasma.screen+1
  //SEG49 [22] phi (byte) c2B#24 = (byte) c2B#4 [phi:main::@5->doplasma#1] -- register_copy 
  //SEG50 [22] phi (byte) c2A#24 = (byte) c2A#4 [phi:main::@5->doplasma#2] -- register_copy 
  //SEG51 [22] phi (byte) c1B#10 = (byte) c1B#4 [phi:main::@5->doplasma#3] -- register_copy 
  //SEG52 [22] phi (byte) c1A#10 = (byte) c1A#4 [phi:main::@5->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG53 [20] phi from main::@5 to main::toD0182 [phi:main::@5->main::toD0182]
  toD0182_from_b5:
    jmp toD0182
  //SEG54 main::toD0182
  toD0182:
    jmp b6
  //SEG55 main::@6
  b6:
  //SEG56 [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
  //SEG57 [14] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  b3_from_b6:
  //SEG58 [14] phi (byte) c2B#14 = (byte) c2B#4 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG59 [14] phi (byte) c2A#14 = (byte) c2A#4 [phi:main::@6->main::@3#1] -- register_copy 
  //SEG60 [14] phi (byte) c1B#14 = (byte) c1B#4 [phi:main::@6->main::@3#2] -- register_copy 
  //SEG61 [14] phi (byte) c1A#14 = (byte) c1A#4 [phi:main::@6->main::@3#3] -- register_copy 
    jmp b3
}
//SEG62 doplasma
// Render plasma to the passed screen
// doplasma(byte* zeropage(2) screen)
doplasma: {
    .label c1a = 8
    .label c1b = 9
    .label i = $a
    .label c2a = 8
    .label c2b = 9
    .label i1 = $a
    .label screen = 2
  //SEG63 [23] (byte) doplasma::c1a#0 ← (byte) c1A#10 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG64 [24] (byte) doplasma::c1b#0 ← (byte) c1B#10 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG65 [25] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  b1_from_doplasma:
  //SEG66 [25] phi (byte) doplasma::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG67 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#1] -- register_copy 
  //SEG68 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
    jmp b1
  //SEG69 [25] phi from doplasma::@1 to doplasma::@1 [phi:doplasma::@1->doplasma::@1]
  b1_from_b1:
  //SEG70 [25] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@1->doplasma::@1#0] -- register_copy 
  //SEG71 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@1->doplasma::@1#1] -- register_copy 
  //SEG72 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@1->doplasma::@1#2] -- register_copy 
    jmp b1
  //SEG73 doplasma::@1
  b1:
  //SEG74 [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
  //SEG75 [27] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i
    sta ybuf,y
  //SEG76 [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG77 [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG78 [30] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [31] if((byte) doplasma::i#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcc b1_from_b1
    jmp b2
  //SEG80 doplasma::@2
  b2:
  //SEG81 [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG82 [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG83 [34] (byte) doplasma::c2a#0 ← (byte) c2A#24 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG84 [35] (byte) doplasma::c2b#0 ← (byte) c2B#24 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG85 [36] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  b3_from_b2:
  //SEG86 [36] phi (byte) doplasma::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG87 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG88 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG89 [36] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  b3_from_b3:
  //SEG90 [36] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG91 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG92 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
    jmp b3
  //SEG93 doplasma::@3
  b3:
  //SEG94 [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
  //SEG95 [38] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i1
    sta xbuf,y
  //SEG96 [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG97 [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG98 [41] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG99 [42] if((byte) doplasma::i1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3_from_b3
    jmp b4
  //SEG100 doplasma::@4
  b4:
  //SEG101 [43] (byte) c2A#4 ← (byte) c2A#24 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG102 [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG103 [45] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  b5_from_b4:
  //SEG104 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#10 [phi:doplasma::@4->doplasma::@5#0] -- register_copy 
  //SEG105 [45] phi (byte) doplasma::ii#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@4->doplasma::@5#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b5
  //SEG106 [45] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  b5_from_b7:
  //SEG107 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#2 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
  //SEG108 [45] phi (byte) doplasma::ii#4 = (byte) doplasma::ii#1 [phi:doplasma::@7->doplasma::@5#1] -- register_copy 
    jmp b5
  //SEG109 doplasma::@5
  b5:
  //SEG110 [46] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  b6_from_b5:
  //SEG111 [46] phi (byte) doplasma::i2#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b6
  //SEG112 [46] phi from doplasma::@6 to doplasma::@6 [phi:doplasma::@6->doplasma::@6]
  b6_from_b6:
  //SEG113 [46] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@6->doplasma::@6#0] -- register_copy 
    jmp b6
  //SEG114 doplasma::@6
  b6:
  //SEG115 [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4) -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
  //SEG116 [48] *((byte*) doplasma::screen#5 + (byte) doplasma::i2#2) ← (byte~) doplasma::$4 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (screen),y
  //SEG117 [49] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG118 [50] if((byte) doplasma::i2#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@6 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc b6_from_b6
    jmp b7
  //SEG119 doplasma::@7
  b7:
  //SEG120 [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen
    sta screen
    bcc !+
    inc screen+1
  !:
  //SEG121 [52] (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG122 [53] if((byte) doplasma::ii#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc b5_from_b7
    jmp breturn
  //SEG123 doplasma::@return
  breturn:
  //SEG124 [54] return 
    rts
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG125 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _4 = 6
    .label _8 = $d
    .label _9 = $d
    .label s = 5
    .label i = 4
    .label c = 2
  //SEG126 [56] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG127 [57] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  b10_from_makecharset:
    jmp b10
  //SEG128 makecharset::@10
  b10:
  //SEG129 [58] call print_cls 
  //SEG130 [91] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
  print_cls_from_b10:
    jsr print_cls
  //SEG131 [59] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  b1_from_b10:
  //SEG132 [59] phi (byte*) print_char_cursor#47 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG133 [59] phi (word) makecharset::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    lda #0
    sta c+1
    jmp b1
  //SEG134 [59] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  b1_from_b9:
  //SEG135 [59] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG136 [59] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
    jmp b1
  //SEG137 makecharset::@1
  b1:
  //SEG138 [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuaa=_lo_vwuz1 
    lda c
  //SEG139 [61] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda SINTABLE,y
    sta s
  //SEG140 [62] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  b2_from_b1:
  //SEG141 [62] phi (byte) makecharset::i#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG142 [62] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  b2_from_b6:
  //SEG143 [62] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
    jmp b2
  //SEG144 makecharset::@2
  b2:
  //SEG145 [63] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  b3_from_b2:
  //SEG146 [63] phi (byte) makecharset::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG147 [63] phi (byte) makecharset::ii#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG148 [63] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  b3_from_b4:
  //SEG149 [63] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG150 [63] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
    jmp b3
  //SEG151 makecharset::@3
  b3:
  //SEG152 [64] call sid_rnd 
    jsr sid_rnd
  //SEG153 [65] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    jmp b11
  //SEG154 makecharset::@11
  b11:
  //SEG155 [66] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  //SEG156 [67] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte/word/signed word/dword/signed dword) $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta _4
  //SEG157 [68] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4_from_b11
    jmp b5
  //SEG158 makecharset::@5
  b5:
  //SEG159 [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
  //SEG160 [70] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  b4_from_b11:
  b4_from_b5:
  //SEG161 [70] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
    jmp b4
  //SEG162 makecharset::@4
  b4:
  //SEG163 [71] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG164 [72] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc b3_from_b4
    jmp b6
  //SEG165 makecharset::@6
  b6:
  //SEG166 [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG167 [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz1_plus_vbuz2 
    lda i
    clc
    adc _9
    sta _9
    bcc !+
    inc _9+1
  !:
  //SEG168 [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3 -- pbuc1_derefidx_vwuz1=vbuyy 
    tya
    sta !v++1
    lda #<CHARSET
    clc
    adc _9
    sta !a++1
    lda #>CHARSET
    adc _9+1
    sta !a++2
  !v:
    lda #0
  !a:
    sta CHARSET
  //SEG169 [76] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG170 [77] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2_from_b6
    jmp b7
  //SEG171 makecharset::@7
  b7:
  //SEG172 [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vwuz1_band_vbuc1 
    lda c
    and #7
  //SEG173 [79] if((byte/word~) makecharset::$11!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto makecharset::@9 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b9_from_b7
  //SEG174 [80] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  b8_from_b7:
    jmp b8
  //SEG175 makecharset::@8
  b8:
  //SEG176 [81] call print_char 
    jsr print_char
  //SEG177 [82] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  b9_from_b7:
  b9_from_b8:
  //SEG178 [82] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#47 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
    jmp b9
  //SEG179 makecharset::@9
  b9:
  //SEG180 [83] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG181 [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1_from_b9
    bne !+
    lda c
    cmp #<$100
    bcc b1_from_b9
  !:
    jmp breturn
  //SEG182 makecharset::@return
  breturn:
  //SEG183 [85] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG184 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG185 [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG186 [87] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#47 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG187 print_char::@return
  breturn:
  //SEG188 [88] return 
    rts
}
//SEG189 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
  //SEG190 [89] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    jmp breturn
  //SEG191 sid_rnd::@return
  breturn:
  //SEG192 [90] return 
    rts
}
//SEG193 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG194 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG195 [92] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG196 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG197 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG198 print_cls::@1
  b1:
  //SEG199 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG200 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG201 [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG202 print_cls::@return
  breturn:
  //SEG203 [96] return 
    rts
}
//SEG204 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG205 [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG206 [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG207 sid_rnd_init::@return
  breturn:
  //SEG208 [99] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp toD0181
Removing instruction jmp b5
Removing instruction jmp toD0182
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b11
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLUE
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3 with b4
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b6_from_b6 with b6
Replacing label b5_from_b7 with b5
Replacing label b4_from_b11 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b9_from_b7 with b9
Replacing label b1_from_b9 with b1
Replacing label b1_from_b9 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction makecharset_from_b2:
Removing instruction b3:
Removing instruction b4_from_b3:
Removing instruction doplasma_from_b4:
Removing instruction toD0181_from_b4:
Removing instruction toD0181:
Removing instruction toD0182_from_b5:
Removing instruction toD0182:
Removing instruction b1_from_b1:
Removing instruction b3_from_b3:
Removing instruction b5_from_b7:
Removing instruction b6_from_b5:
Removing instruction b6_from_b6:
Removing instruction b10_from_makecharset:
Removing instruction print_cls_from_b10:
Removing instruction b1_from_b9:
Removing instruction b2_from_b6:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b11:
Removing instruction b4_from_b5:
Removing instruction b8_from_b7:
Removing instruction b9_from_b7:
Removing instruction b9_from_b8:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b5:
Removing instruction doplasma_from_b5:
Removing instruction b6:
Removing instruction b3_from_b6:
Removing instruction b1_from_doplasma:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b4:
Removing instruction b5_from_b4:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b10:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b11:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [268] bcc b1 to bcs

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(byte) BROWN
(byte*) CHARGEN
(byte*) CHARSET
(const byte*) CHARSET#0 CHARSET = ((byte*))(word/signed word/dword/signed dword) $2000
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) $d800
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) $d018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN1
(const byte*) SCREEN1#0 SCREEN1 = ((byte*))(word/signed word/dword/signed dword) $2800
(byte*) SCREEN2
(const byte*) SCREEN2#0 SCREEN2 = ((byte*))(word/signed word/dword/signed dword) $2c00
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte/word/signed word/dword/signed dword) $80
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TRIANGLE
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = ((byte*))(word/dword/signed dword) $d412
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = ((word*))(word/dword/signed dword) $d40e
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = ((byte*))(word/dword/signed dword) $d41b
(byte*) SINTABLE
(const byte*) SINTABLE#0 SINTABLE = ((byte*))(word/signed word/dword/signed dword) $1f00
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(byte) c1A
(byte) c1A#10 c1A zp ZP_BYTE:4 2.6000000000000005
(byte) c1A#14 c1A zp ZP_BYTE:4 11.0
(byte) c1A#4 c1A zp ZP_BYTE:4 0.8275862068965517
(byte) c1B
(byte) c1B#10 c1B zp ZP_BYTE:5 2.3636363636363633
(byte) c1B#14 c1B zp ZP_BYTE:5 11.0
(byte) c1B#4 c1B zp ZP_BYTE:5 0.8571428571428571
(byte) c2A
(byte) c2A#14 c2A zp ZP_BYTE:6 11.0
(byte) c2A#24 c2A zp ZP_BYTE:6 1.2380952380952381
(byte) c2A#4 c2A zp ZP_BYTE:6 1.3333333333333335
(byte) c2B
(byte) c2B#14 c2B zp ZP_BYTE:7 11.0
(byte) c2B#24 c2B zp ZP_BYTE:7 1.1818181818181817
(byte) c2B#4 c2B zp ZP_BYTE:7 1.411764705882353
(void()) doplasma((byte*) doplasma::screen)
(byte~) doplasma::$0 reg byte a 202.0
(byte~) doplasma::$2 reg byte a 202.0
(byte~) doplasma::$4 reg byte a 2002.0
(label) doplasma::@1
(label) doplasma::@2
(label) doplasma::@3
(label) doplasma::@4
(label) doplasma::@5
(label) doplasma::@6
(label) doplasma::@7
(label) doplasma::@return
(byte) doplasma::c1a
(byte) doplasma::c1a#0 c1a zp ZP_BYTE:8 2.0
(byte) doplasma::c1a#1 c1a zp ZP_BYTE:8 50.5
(byte) doplasma::c1a#2 c1a zp ZP_BYTE:8 101.66666666666666
(byte) doplasma::c1b
(byte) doplasma::c1b#0 c1b zp ZP_BYTE:9 4.0
(byte) doplasma::c1b#1 c1b zp ZP_BYTE:9 67.33333333333333
(byte) doplasma::c1b#2 c1b zp ZP_BYTE:9 76.25
(byte) doplasma::c2a
(byte) doplasma::c2a#0 c2a zp ZP_BYTE:8 2.0
(byte) doplasma::c2a#1 c2a zp ZP_BYTE:8 50.5
(byte) doplasma::c2a#2 c2a zp ZP_BYTE:8 101.66666666666666
(byte) doplasma::c2b
(byte) doplasma::c2b#0 c2b zp ZP_BYTE:9 4.0
(byte) doplasma::c2b#1 c2b zp ZP_BYTE:9 67.33333333333333
(byte) doplasma::c2b#2 c2b zp ZP_BYTE:9 76.25
(byte) doplasma::i
(byte) doplasma::i#1 i zp ZP_BYTE:10 151.5
(byte) doplasma::i#2 i zp ZP_BYTE:10 60.599999999999994
(byte) doplasma::i1
(byte) doplasma::i1#1 i1 zp ZP_BYTE:10 151.5
(byte) doplasma::i1#2 i1 zp ZP_BYTE:10 60.599999999999994
(byte) doplasma::i2
(byte) doplasma::i2#1 reg byte y 1501.5
(byte) doplasma::i2#2 reg byte y 1334.6666666666667
(byte) doplasma::ii
(byte) doplasma::ii#1 reg byte x 151.5
(byte) doplasma::ii#4 reg byte x 171.85714285714283
(byte*) doplasma::screen
(byte*) doplasma::screen#10 screen zp ZP_WORD:2 0.08695652173913043
(byte*) doplasma::screen#2 screen zp ZP_WORD:2 67.33333333333333
(byte*) doplasma::screen#5 screen zp ZP_WORD:2 200.83333333333334
(byte[$28]) doplasma::xbuf
(const byte[$28]) doplasma::xbuf#0 xbuf = { fill( $28, 0) }
(byte[$19]) doplasma::ybuf
(const byte[$19]) doplasma::ybuf#0 ybuf = { fill( $19, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(byte*) main::col
(byte*) main::col#1 col zp ZP_WORD:2 16.5
(byte*) main::col#2 col zp ZP_WORD:2 16.5
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word/signed dword/dword~) main::toD0181_$2
(byte/word~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte/signed word/word/dword/signed dword~) main::toD0181_$6
(byte/word/dword~) main::toD0181_$7
(byte/word/dword~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >((word))(const byte*) SCREEN1#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4|>((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4&(byte/signed byte/word/signed word/dword/signed dword) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(word~) main::toD0182_$0
(word~) main::toD0182_$1
(word/signed dword/dword~) main::toD0182_$2
(byte/word~) main::toD0182_$3
(word~) main::toD0182_$4
(byte~) main::toD0182_$5
(byte/signed word/word/dword/signed dword~) main::toD0182_$6
(byte/word/dword~) main::toD0182_$7
(byte/word/dword~) main::toD0182_$8
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >((word))(const byte*) SCREEN2#0&(word/signed word/dword/signed dword) $3fff*(byte/signed byte/word/signed word/dword/signed dword) 4|>((word))(const byte*) CHARSET#0/(byte/signed byte/word/signed word/dword/signed dword) 4&(byte/signed byte/word/signed word/dword/signed dword) $f
(byte*) main::toD0182_screen
(void()) makecharset((byte*) makecharset::charset)
(byte/word~) makecharset::$11 reg byte a 22.0
(byte~) makecharset::$2 reg byte a 22.0
(byte~) makecharset::$3 reg byte a 2002.0
(byte~) makecharset::$4 $4 zp ZP_BYTE:6 2002.0
(word~) makecharset::$8 $8 zp ZP_WORD:13 202.0
(word~) makecharset::$9 $9 zp ZP_WORD:13 202.0
(label) makecharset::@1
(label) makecharset::@10
(label) makecharset::@11
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#1 reg byte y 2002.0
(byte) makecharset::b#2 reg byte y 500.5
(byte) makecharset::b#3 reg byte y 620.8
(byte[8]) makecharset::bittab
(const byte[8]) makecharset::bittab#0 bittab = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) $10, (byte/signed byte/word/signed word/dword/signed dword) $20, (byte/signed byte/word/signed word/dword/signed dword) $40, (byte/word/signed word/dword/signed dword) $80 }
(word) makecharset::c
(word) makecharset::c#1 c zp ZP_WORD:2 16.5
(word) makecharset::c#2 c zp ZP_WORD:2 6.041666666666666
(byte*) makecharset::charset
(byte) makecharset::i
(byte) makecharset::i#1 i zp ZP_BYTE:4 151.5
(byte) makecharset::i#7 i zp ZP_BYTE:4 21.642857142857142
(byte) makecharset::ii
(byte) makecharset::ii#1 reg byte x 1501.5
(byte) makecharset::ii#2 reg byte x 375.375
(byte) makecharset::s
(byte) makecharset::s#0 s zp ZP_BYTE:5 59.529411764705884
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(const byte) print_char::ch#0 ch = (byte) '.'
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:11 4.333333333333333
(byte*) print_char_cursor#18 print_char_cursor zp ZP_WORD:11 11.0
(byte*) print_char_cursor#47 print_char_cursor zp ZP_WORD:11 1.1304347826086956
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = ((byte*))(word/signed word/dword/signed dword) $400
(byte*) print_screen
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0 reg byte a 334.33333333333337
(byte) sid_rnd::return#2 reg byte a 2002.0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return

zp ZP_WORD:2 [ main::col#2 main::col#1 doplasma::screen#5 doplasma::screen#10 doplasma::screen#2 makecharset::c#2 makecharset::c#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_BYTE:4 [ c1A#10 c1A#14 c1A#4 makecharset::i#7 makecharset::i#1 ]
zp ZP_BYTE:5 [ c1B#10 c1B#14 c1B#4 makecharset::s#0 ]
zp ZP_BYTE:6 [ c2A#24 c2A#14 c2A#4 makecharset::$4 ]
zp ZP_BYTE:7 [ c2B#24 c2B#14 c2B#4 ]
zp ZP_BYTE:8 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
zp ZP_BYTE:9 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
zp ZP_BYTE:10 [ doplasma::i#2 doplasma::i#1 doplasma::i1#2 doplasma::i1#1 ]
reg byte x [ doplasma::ii#4 doplasma::ii#1 ]
reg byte y [ doplasma::i2#2 doplasma::i2#1 ]
zp ZP_WORD:11 [ print_char_cursor#47 print_char_cursor#18 print_char_cursor#1 ]
reg byte x [ makecharset::ii#2 makecharset::ii#1 ]
reg byte y [ makecharset::b#2 makecharset::b#3 makecharset::b#1 ]
reg byte a [ doplasma::$0 ]
reg byte a [ doplasma::$2 ]
reg byte a [ doplasma::$4 ]
reg byte a [ makecharset::$2 ]
reg byte a [ sid_rnd::return#2 ]
reg byte a [ makecharset::$3 ]
zp ZP_WORD:13 [ makecharset::$8 makecharset::$9 ]
reg byte a [ makecharset::$11 ]
reg byte a [ sid_rnd::return#0 ]


FINAL ASSEMBLER
Score: 91186

//SEG0 File Comments
// A KickC version of the plasma routine from the CC65 samples
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .label print_line_cursor = $400
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label SCREEN1 = $2800
  .label SCREEN2 = $2c00
  .label CHARSET = $2000
  .label SINTABLE = $1f00
  .label print_char_cursor = $b
  .label c1A = 4
  .label c1B = 5
  .label c2A = 6
  .label c2B = 7
//SEG3 @begin
//SEG4 @1
//SEG5 kickasm(location (const byte*) SINTABLE#0) {{ .for(var i=0;i<$100;i++)         .byte round(127.5+127.5*sin(toRadians(360*i/256)))  }}
//SEG6 [2] phi from @1 to @2 [phi:@1->@2]
//SEG7 @2
//SEG8 [3] call main 
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
//SEG10 @end
//SEG11 main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) BORDERCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BORDERCOL
  //SEG14 [7] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL
  //SEG15 [8] phi from main to main::@1 [phi:main->main::@1]
  //SEG16 [8] phi (byte*) main::col#2 = (const byte*) COLS#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta col
    lda #>COLS
    sta col+1
  //SEG17 [8] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG18 [8] phi (byte*) main::col#2 = (byte*) main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG19 main::@1
  b1:
  //SEG20 [9] *((byte*) main::col#2) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
  //SEG21 [10] (byte*) main::col#1 ← ++ (byte*) main::col#2 -- pbuz1=_inc_pbuz1 
    inc col
    bne !+
    inc col+1
  !:
  //SEG22 [11] if((byte*) main::col#1!=(byte*)(const byte*) COLS#0+(word/signed word/dword/signed dword) $3e8+(byte/signed byte/word/signed word/dword/signed dword) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda col+1
    cmp #>COLS+$3e8+1
    bne b1
    lda col
    cmp #<COLS+$3e8+1
    bne b1
  //SEG23 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG24 main::@2
  //SEG25 [13] call makecharset 
  //SEG26 [55] phi from main::@2 to makecharset [phi:main::@2->makecharset]
    jsr makecharset
  //SEG27 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG28 [14] phi (byte) c2B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c2B
  //SEG29 [14] phi (byte) c2A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    sta c2A
  //SEG30 [14] phi (byte) c1B#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    sta c1B
  //SEG31 [14] phi (byte) c1A#14 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    sta c1A
  // Show double-buffered plasma
  //SEG32 main::@3
  //SEG33 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG34 main::@4
  b4:
  //SEG35 [16] call doplasma 
  //SEG36 [22] phi from main::@4 to doplasma [phi:main::@4->doplasma]
  //SEG37 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN1#0 [phi:main::@4->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta doplasma.screen
    lda #>SCREEN1
    sta doplasma.screen+1
  //SEG38 [22] phi (byte) c2B#24 = (byte) c2B#14 [phi:main::@4->doplasma#1] -- register_copy 
  //SEG39 [22] phi (byte) c2A#24 = (byte) c2A#14 [phi:main::@4->doplasma#2] -- register_copy 
  //SEG40 [22] phi (byte) c1B#10 = (byte) c1B#14 [phi:main::@4->doplasma#3] -- register_copy 
  //SEG41 [22] phi (byte) c1A#10 = (byte) c1A#14 [phi:main::@4->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG42 [17] phi from main::@4 to main::toD0181 [phi:main::@4->main::toD0181]
  //SEG43 main::toD0181
  //SEG44 main::@5
  //SEG45 [18] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG46 [19] call doplasma 
  //SEG47 [22] phi from main::@5 to doplasma [phi:main::@5->doplasma]
  //SEG48 [22] phi (byte*) doplasma::screen#10 = (const byte*) SCREEN2#0 [phi:main::@5->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta doplasma.screen
    lda #>SCREEN2
    sta doplasma.screen+1
  //SEG49 [22] phi (byte) c2B#24 = (byte) c2B#4 [phi:main::@5->doplasma#1] -- register_copy 
  //SEG50 [22] phi (byte) c2A#24 = (byte) c2A#4 [phi:main::@5->doplasma#2] -- register_copy 
  //SEG51 [22] phi (byte) c1B#10 = (byte) c1B#4 [phi:main::@5->doplasma#3] -- register_copy 
  //SEG52 [22] phi (byte) c1A#10 = (byte) c1A#4 [phi:main::@5->doplasma#4] -- register_copy 
    jsr doplasma
  //SEG53 [20] phi from main::@5 to main::toD0182 [phi:main::@5->main::toD0182]
  //SEG54 main::toD0182
  //SEG55 main::@6
  //SEG56 [21] *((const byte*) D018#0) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
  //SEG57 [14] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG58 [14] phi (byte) c2B#14 = (byte) c2B#4 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG59 [14] phi (byte) c2A#14 = (byte) c2A#4 [phi:main::@6->main::@3#1] -- register_copy 
  //SEG60 [14] phi (byte) c1B#14 = (byte) c1B#4 [phi:main::@6->main::@3#2] -- register_copy 
  //SEG61 [14] phi (byte) c1A#14 = (byte) c1A#4 [phi:main::@6->main::@3#3] -- register_copy 
    jmp b4
}
//SEG62 doplasma
// Render plasma to the passed screen
// doplasma(byte* zeropage(2) screen)
doplasma: {
    .label c1a = 8
    .label c1b = 9
    .label i = $a
    .label c2a = 8
    .label c2b = 9
    .label i1 = $a
    .label screen = 2
  //SEG63 [23] (byte) doplasma::c1a#0 ← (byte) c1A#10 -- vbuz1=vbuz2 
    lda c1A
    sta c1a
  //SEG64 [24] (byte) doplasma::c1b#0 ← (byte) c1B#10 -- vbuz1=vbuz2 
    lda c1B
    sta c1b
  //SEG65 [25] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  //SEG66 [25] phi (byte) doplasma::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma->doplasma::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG67 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#0 [phi:doplasma->doplasma::@1#1] -- register_copy 
  //SEG68 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#0 [phi:doplasma->doplasma::@1#2] -- register_copy 
  //SEG69 [25] phi from doplasma::@1 to doplasma::@1 [phi:doplasma::@1->doplasma::@1]
  //SEG70 [25] phi (byte) doplasma::i#2 = (byte) doplasma::i#1 [phi:doplasma::@1->doplasma::@1#0] -- register_copy 
  //SEG71 [25] phi (byte) doplasma::c1b#2 = (byte) doplasma::c1b#1 [phi:doplasma::@1->doplasma::@1#1] -- register_copy 
  //SEG72 [25] phi (byte) doplasma::c1a#2 = (byte) doplasma::c1a#1 [phi:doplasma::@1->doplasma::@1#2] -- register_copy 
  //SEG73 doplasma::@1
  b1:
  //SEG74 [26] (byte~) doplasma::$0 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c1a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c1b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c1a
    lda SINTABLE,y
    ldy c1b
    clc
    adc SINTABLE,y
  //SEG75 [27] *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::i#2) ← (byte~) doplasma::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i
    sta ybuf,y
  //SEG76 [28] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1a
    axs #-[4]
    stx c1a
  //SEG77 [29] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte/signed byte/word/signed word/dword/signed dword) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1b
    axs #-[9]
    stx c1b
  //SEG78 [30] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [31] if((byte) doplasma::i#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$19
    bcc b1
  //SEG80 doplasma::@2
  //SEG81 [32] (byte) c1A#4 ← (byte) c1A#10 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c1A
    axs #-[3]
    stx c1A
  //SEG82 [33] (byte) c1B#4 ← (byte) c1B#10 - (byte/signed byte/word/signed word/dword/signed dword) 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax c1B
    axs #5
    stx c1B
  //SEG83 [34] (byte) doplasma::c2a#0 ← (byte) c2A#24 -- vbuz1=vbuz2 
    lda c2A
    sta c2a
  //SEG84 [35] (byte) doplasma::c2b#0 ← (byte) c2B#24 -- vbuz1=vbuz2 
    lda c2B
    sta c2b
  //SEG85 [36] phi from doplasma::@2 to doplasma::@3 [phi:doplasma::@2->doplasma::@3]
  //SEG86 [36] phi (byte) doplasma::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@2->doplasma::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG87 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#0 [phi:doplasma::@2->doplasma::@3#1] -- register_copy 
  //SEG88 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#0 [phi:doplasma::@2->doplasma::@3#2] -- register_copy 
  //SEG89 [36] phi from doplasma::@3 to doplasma::@3 [phi:doplasma::@3->doplasma::@3]
  //SEG90 [36] phi (byte) doplasma::i1#2 = (byte) doplasma::i1#1 [phi:doplasma::@3->doplasma::@3#0] -- register_copy 
  //SEG91 [36] phi (byte) doplasma::c2b#2 = (byte) doplasma::c2b#1 [phi:doplasma::@3->doplasma::@3#1] -- register_copy 
  //SEG92 [36] phi (byte) doplasma::c2a#2 = (byte) doplasma::c2a#1 [phi:doplasma::@3->doplasma::@3#2] -- register_copy 
  //SEG93 doplasma::@3
  b3:
  //SEG94 [37] (byte~) doplasma::$2 ← *((const byte*) SINTABLE#0 + (byte) doplasma::c2a#2) + *((const byte*) SINTABLE#0 + (byte) doplasma::c2b#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy c2a
    lda SINTABLE,y
    ldy c2b
    clc
    adc SINTABLE,y
  //SEG95 [38] *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i1#2) ← (byte~) doplasma::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy i1
    sta xbuf,y
  //SEG96 [39] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2a
    axs #-[3]
    stx c2a
  //SEG97 [40] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax c2b
    axs #-[7]
    stx c2b
  //SEG98 [41] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG99 [42] if((byte) doplasma::i1#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda i1
    cmp #$28
    bcc b3
  //SEG100 doplasma::@4
  //SEG101 [43] (byte) c2A#4 ← (byte) c2A#24 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda c2A
    clc
    adc #2
    sta c2A
  //SEG102 [44] (byte) c2B#4 ← (byte) c2B#24 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax c2B
    axs #3
    stx c2B
  //SEG103 [45] phi from doplasma::@4 to doplasma::@5 [phi:doplasma::@4->doplasma::@5]
  //SEG104 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#10 [phi:doplasma::@4->doplasma::@5#0] -- register_copy 
  //SEG105 [45] phi (byte) doplasma::ii#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@4->doplasma::@5#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG106 [45] phi from doplasma::@7 to doplasma::@5 [phi:doplasma::@7->doplasma::@5]
  //SEG107 [45] phi (byte*) doplasma::screen#5 = (byte*) doplasma::screen#2 [phi:doplasma::@7->doplasma::@5#0] -- register_copy 
  //SEG108 [45] phi (byte) doplasma::ii#4 = (byte) doplasma::ii#1 [phi:doplasma::@7->doplasma::@5#1] -- register_copy 
  //SEG109 doplasma::@5
  b5:
  //SEG110 [46] phi from doplasma::@5 to doplasma::@6 [phi:doplasma::@5->doplasma::@6]
  //SEG111 [46] phi (byte) doplasma::i2#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:doplasma::@5->doplasma::@6#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG112 [46] phi from doplasma::@6 to doplasma::@6 [phi:doplasma::@6->doplasma::@6]
  //SEG113 [46] phi (byte) doplasma::i2#2 = (byte) doplasma::i2#1 [phi:doplasma::@6->doplasma::@6#0] -- register_copy 
  //SEG114 doplasma::@6
  b6:
  //SEG115 [47] (byte~) doplasma::$4 ← *((const byte[$28]) doplasma::xbuf#0 + (byte) doplasma::i2#2) + *((const byte[$19]) doplasma::ybuf#0 + (byte) doplasma::ii#4) -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
  //SEG116 [48] *((byte*) doplasma::screen#5 + (byte) doplasma::i2#2) ← (byte~) doplasma::$4 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (screen),y
  //SEG117 [49] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG118 [50] if((byte) doplasma::i2#1<(byte/signed byte/word/signed word/dword/signed dword) $28) goto doplasma::@6 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc b6
  //SEG119 doplasma::@7
  //SEG120 [51] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#5 + (byte/signed byte/word/signed word/dword/signed dword) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen
    sta screen
    bcc !+
    inc screen+1
  !:
  //SEG121 [52] (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG122 [53] if((byte) doplasma::ii#1<(byte/signed byte/word/signed word/dword/signed dword) $19) goto doplasma::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc b5
  //SEG123 doplasma::@return
  //SEG124 [54] return 
    rts
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
//SEG125 makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label _4 = 6
    .label _8 = $d
    .label _9 = $d
    .label s = 5
    .label i = 4
    .label c = 2
  //SEG126 [56] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG127 [57] phi from makecharset to makecharset::@10 [phi:makecharset->makecharset::@10]
  //SEG128 makecharset::@10
  //SEG129 [58] call print_cls 
  //SEG130 [91] phi from makecharset::@10 to print_cls [phi:makecharset::@10->print_cls]
    jsr print_cls
  //SEG131 [59] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  //SEG132 [59] phi (byte*) print_char_cursor#47 = (const byte*) print_line_cursor#0 [phi:makecharset::@10->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG133 [59] phi (word) makecharset::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@10->makecharset::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta c
    sta c+1
  //SEG134 [59] phi from makecharset::@9 to makecharset::@1 [phi:makecharset::@9->makecharset::@1]
  //SEG135 [59] phi (byte*) print_char_cursor#47 = (byte*) print_char_cursor#18 [phi:makecharset::@9->makecharset::@1#0] -- register_copy 
  //SEG136 [59] phi (word) makecharset::c#2 = (word) makecharset::c#1 [phi:makecharset::@9->makecharset::@1#1] -- register_copy 
  //SEG137 makecharset::@1
  b1:
  //SEG138 [60] (byte~) makecharset::$2 ← < (word) makecharset::c#2 -- vbuaa=_lo_vwuz1 
    lda c
  //SEG139 [61] (byte) makecharset::s#0 ← *((const byte*) SINTABLE#0 + (byte~) makecharset::$2) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda SINTABLE,y
    sta s
  //SEG140 [62] phi from makecharset::@1 to makecharset::@2 [phi:makecharset::@1->makecharset::@2]
  //SEG141 [62] phi (byte) makecharset::i#7 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@1->makecharset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG142 [62] phi from makecharset::@6 to makecharset::@2 [phi:makecharset::@6->makecharset::@2]
  //SEG143 [62] phi (byte) makecharset::i#7 = (byte) makecharset::i#1 [phi:makecharset::@6->makecharset::@2#0] -- register_copy 
  //SEG144 makecharset::@2
  b2:
  //SEG145 [63] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  //SEG146 [63] phi (byte) makecharset::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG147 [63] phi (byte) makecharset::ii#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:makecharset::@2->makecharset::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG148 [63] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  //SEG149 [63] phi (byte) makecharset::b#2 = (byte) makecharset::b#3 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
  //SEG150 [63] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@4->makecharset::@3#1] -- register_copy 
  //SEG151 makecharset::@3
  b3:
  //SEG152 [64] call sid_rnd 
    jsr sid_rnd
  //SEG153 [65] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  //SEG154 makecharset::@11
  //SEG155 [66] (byte~) makecharset::$3 ← (byte) sid_rnd::return#2
  //SEG156 [67] (byte~) makecharset::$4 ← (byte~) makecharset::$3 & (byte/word/signed word/dword/signed dword) $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta _4
  //SEG157 [68] if((byte~) makecharset::$4<=(byte) makecharset::s#0) goto makecharset::@4 -- vbuz1_le_vbuz2_then_la1 
    lda s
    cmp _4
    bcs b4
  //SEG158 makecharset::@5
  //SEG159 [69] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const byte[8]) makecharset::bittab#0 + (byte) makecharset::ii#2) -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
  //SEG160 [70] phi from makecharset::@11 makecharset::@5 to makecharset::@4 [phi:makecharset::@11/makecharset::@5->makecharset::@4]
  //SEG161 [70] phi (byte) makecharset::b#3 = (byte) makecharset::b#2 [phi:makecharset::@11/makecharset::@5->makecharset::@4#0] -- register_copy 
  //SEG162 makecharset::@4
  b4:
  //SEG163 [71] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG164 [72] if((byte) makecharset::ii#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc b3
  //SEG165 makecharset::@6
  //SEG166 [73] (word~) makecharset::$8 ← (word) makecharset::c#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz2_rol_3 
    lda c
    asl
    sta _8
    lda c+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG167 [74] (word~) makecharset::$9 ← (word~) makecharset::$8 + (byte) makecharset::i#7 -- vwuz1=vwuz1_plus_vbuz2 
    lda i
    clc
    adc _9
    sta _9
    bcc !+
    inc _9+1
  !:
  //SEG168 [75] *((const byte*) CHARSET#0 + (word~) makecharset::$9) ← (byte) makecharset::b#3 -- pbuc1_derefidx_vwuz1=vbuyy 
    tya
    sta !v++1
    lda #<CHARSET
    clc
    adc _9
    sta !a++1
    lda #>CHARSET
    adc _9+1
    sta !a++2
  !v:
    lda #0
  !a:
    sta CHARSET
  //SEG169 [76] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#7 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG170 [77] if((byte) makecharset::i#1<(byte/signed byte/word/signed word/dword/signed dword) 8) goto makecharset::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #8
    bcc b2
  //SEG171 makecharset::@7
  //SEG172 [78] (byte/word~) makecharset::$11 ← (word) makecharset::c#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vwuz1_band_vbuc1 
    lda c
    and #7
  //SEG173 [79] if((byte/word~) makecharset::$11!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto makecharset::@9 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b9
  //SEG174 [80] phi from makecharset::@7 to makecharset::@8 [phi:makecharset::@7->makecharset::@8]
  //SEG175 makecharset::@8
  //SEG176 [81] call print_char 
    jsr print_char
  //SEG177 [82] phi from makecharset::@7 makecharset::@8 to makecharset::@9 [phi:makecharset::@7/makecharset::@8->makecharset::@9]
  //SEG178 [82] phi (byte*) print_char_cursor#18 = (byte*) print_char_cursor#47 [phi:makecharset::@7/makecharset::@8->makecharset::@9#0] -- register_copy 
  //SEG179 makecharset::@9
  b9:
  //SEG180 [83] (word) makecharset::c#1 ← ++ (word) makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc c
    bne !+
    inc c+1
  !:
  //SEG181 [84] if((word) makecharset::c#1<(word/signed word/dword/signed dword) $100) goto makecharset::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda c+1
    cmp #>$100
    bcc b1
    bne !+
    lda c
    cmp #<$100
    bcs !b1+
    jmp b1
  !b1:
  !:
  //SEG182 makecharset::@return
  //SEG183 [85] return 
    rts
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
//SEG184 print_char
// Print a single char
print_char: {
    .const ch = '.'
  //SEG185 [86] *((byte*) print_char_cursor#47) ← (const byte) print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
  //SEG186 [87] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#47 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG187 print_char::@return
  //SEG188 [88] return 
    rts
}
//SEG189 sid_rnd
// Get a random number from the SID voice 3,
// Must be initialized with sid_rnd_init()
sid_rnd: {
  //SEG190 [89] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
  //SEG191 sid_rnd::@return
  //SEG192 [90] return 
    rts
}
//SEG193 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG194 [92] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG195 [92] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
  //SEG196 [92] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG197 [92] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG198 print_cls::@1
  b1:
  //SEG199 [93] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG200 [94] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG201 [95] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1
  //SEG202 print_cls::@return
  //SEG203 [96] return 
    rts
}
//SEG204 sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
  //SEG205 [97] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG206 [98] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
  //SEG207 sid_rnd_init::@return
  //SEG208 [99] return 
    rts
}
.pc = SINTABLE "SINTABLE"
  .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(toRadians(360*i/256)))


