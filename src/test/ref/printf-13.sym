const byte BINARY = 2
const nomodify byte* COLORRAM = (byte*) 55296
const byte DECIMAL = $a
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const byte HEXADECIMAL = $10
const nomodify byte LIGHT_BLUE = $e
const byte OCTAL = 8
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
const word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:6 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:6 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:2 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:2 1714.7142857142858
void conio_c64_init()
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:20 50848.16949152542
byte conio_cursor_y loadstore zp[1]:21 1028939.5787781351
byte* conio_line_color loadstore zp[2]:24 715211.0323624596
byte* conio_line_text loadstore zp[2]:22 712903.8999999999
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 200002.0
byte cputc::c#1 reg byte a 200002.0
byte cputc::c#12 reg byte a 1100502.5
byte cputc::c#2 reg byte a 2002.0
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:2 50000.5
to_nomodify byte* cputs::s#2 s zp[2]:2 202.0
to_nomodify byte* cputs::s#48 s zp[2]:2 155002.0
to_nomodify byte* cputs::s#49 s zp[2]:2 10102.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:30 202.0
byte*~ gotoxy::$6 zp[2]:26 202.0
word~ gotoxy::$7 zp[2]:26 151.5
word~ gotoxy::$8 zp[2]:28 202.0
word~ gotoxy::$9 zp[2]:26 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:26 101.0
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
const byte* main::s[6]  = "3s  '"
const byte* main::s1[4]  = "' '"
const byte* main::s10[6]  = "3d  '"
const byte* main::s15[6]  = "-3d '"
const byte* main::s20[7]  = "+3d  '"
const byte* main::s25[6]  = "03d '"
const byte* main::s30[6]  = "o   '"
const byte* main::s35[6]  = "x   '"
const byte* main::s4[3]  = "'
"
const byte* main::s40[6]  = "X   '"
const byte* main::s5[6]  = "-3s '"
const byte* main::str[2]  = "x"
const byte* main::str1[3]  = "xx"
const byte* main::str2[4]  = "xxx"
const byte* main::str3[5]  = "xxxx"
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:18
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:18 1.00000000001E11
byte* memcpy::dst#2 dst zp[2]:18 1.0033333333466667E11
byte* memcpy::dst#4 dst zp[2]:18 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:16
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:16 2.00000000002E11
byte* memcpy::src#2 src zp[2]:16 1.0025000000125E11
byte* memcpy::src#4 src zp[2]:16 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:32 1.262500000025E10
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.4285714285857143E10
byte* memset::dst
byte* memset::dst#1 dst zp[2]:18 2.00000000002E11
byte* memset::dst#2 dst zp[2]:18 1.3366666666833334E11
byte* memset::dst#4 dst zp[2]:18 2.000000002E9
byte* memset::end
byte* memset::end#0 end zp[2]:32 1.6833333333666668E10
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:18
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 zp[2]:12 1001.0
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:15 67.33333333333333
byte printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:15 101.0
byte printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:15 160.25
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#0 format_justify_left zp[1]:4 101.0
byte printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:4 67.83870967741936
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#2 format_min_length zp[1]:14 100.1
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#1 format_upper_case zp[1]:8 202.0
byte printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:8 42.38461538461539
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#0 format_zero_padding zp[1]:5 202.0
byte printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:5 97.0
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 reg byte x 1501.5
signed byte printf_number_buffer::len#1 reg byte x 2002.0
signed byte printf_number_buffer::len#2 reg byte x 3003.0
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 padding zp[1]:14 1001.0
signed byte printf_number_buffer::padding#10 padding zp[1]:14 190.66666666666666
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 i zp[1]:9 200002.0
byte printf_padding::i#2 i zp[1]:9 75000.75
byte printf_padding::length
byte printf_padding::length#0 length zp[1]:10 2002.0
byte printf_padding::length#1 length zp[1]:10 2002.0
byte printf_padding::length#2 length zp[1]:10 2002.0
byte printf_padding::length#3 length zp[1]:10 202.0
byte printf_padding::length#4 length zp[1]:10 202.0
byte printf_padding::length#6 length zp[1]:10 17201.0
byte printf_padding::pad
byte printf_padding::pad#7 pad zp[1]:11 16666.833333333332
void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
struct printf_format_number printf_sint::format
byte printf_sint::format_justify_left
byte printf_sint::format_justify_left#16 format_justify_left zp[1]:4 9.181818181818182
byte printf_sint::format_min_length
byte printf_sint::format_radix
byte printf_sint::format_sign_always
byte printf_sint::format_sign_always#16 reg byte x 33.666666666666664
byte printf_sint::format_upper_case
byte printf_sint::format_zero_padding
byte printf_sint::format_zero_padding#16 format_zero_padding zp[1]:5 8.416666666666666
word printf_sint::uvalue
signed word printf_sint::value
signed word printf_sint::value#0 value zp[2]:6 101.0
signed word printf_sint::value#17 value zp[2]:6 80.8
signed word printf_sint::value#19 value zp[2]:6 303.0
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
word~ printf_string::$9 zp[2]:12 101.0
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_justify_left#10 format_justify_left zp[1]:4 12.625
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::len#0 reg byte a 202.0
signed byte printf_string::padding
signed byte printf_string::padding#1 padding zp[1]:5 101.0
signed byte printf_string::padding#3 padding zp[1]:5 33.666666666666664
byte* printf_string::str
byte* printf_string::str#10 str zp[2]:2 14.428571428571429
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_radix#12 reg byte x 33.666666666666664
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_upper_case#12 format_upper_case zp[1]:8 16.833333333333332
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#12 uvalue zp[2]:6 50.5
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 len zp[2]:12 100001.0
word strlen::len#2 len zp[2]:12 40220.8
word strlen::return
word strlen::return#2 return zp[2]:12 2002.0
word strlen::return#3 return zp[2]:12 202.0
byte* strlen::str
byte* strlen::str#0 str zp[2]:16 200002.0
byte* strlen::str#2 str zp[2]:16 202.0
byte* strlen::str#3 str zp[2]:16 103334.66666666666
byte* strlen::str#5 str zp[2]:16 10102.0
byte* strupr(byte* strupr::str)
byte~ strupr::$0 reg byte a 200002.0
byte* strupr::return
byte* strupr::src
byte* strupr::src#1 src zp[2]:16 200002.0
byte* strupr::src#2 src zp[2]:16 71429.28571428571
byte* strupr::str
const byte* strupr::str#0 str = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 reg byte a 1700002.0000000002
byte toupper::return
byte toupper::return#0 reg byte a 2000002.0
byte toupper::return#2 reg byte a 1033334.6666666667
byte toupper::return#3 reg byte a 200002.0
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 20002.0
byte~ utoa::$11 reg byte a 2002.0
byte~ utoa::$4 reg byte a 20002.0
byte* utoa::buffer
byte* utoa::buffer#10 buffer zp[2]:12 2800.4000000000005
byte* utoa::buffer#15 buffer zp[2]:12 15001.5
byte* utoa::buffer#3 buffer zp[2]:12 2002.0
byte* utoa::buffer#4 buffer zp[2]:12 20002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:11 20002.0
byte utoa::digit#2 digit zp[1]:11 2666.9333333333334
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:32 6000.6
word* utoa::digit_values
word* utoa::digit_values#8 digit_values zp[2]:16 588.2941176470588
byte utoa::max_digits
byte utoa::max_digits#7 max_digits zp[1]:10 588.2941176470588
byte utoa::radix
byte utoa::radix#1 reg byte x 202.0
byte utoa::radix#2 reg byte x 1026.25
byte utoa::started
byte utoa::started#2 reg byte x 4286.142857142857
byte utoa::started#4 reg byte x 10001.0
word utoa::value
word utoa::value#0 value zp[2]:6 10001.0
word utoa::value#1 value zp[2]:6 202.0
word utoa::value#10 value zp[2]:6 200.5
word utoa::value#2 value zp[2]:6 101.0
word utoa::value#3 value zp[2]:6 5125.625
word utoa::value#7 value zp[2]:6 15001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:12 13750.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000001E7
byte utoa_append::digit#2 reg byte x 1.00500015E7
word utoa_append::return
word utoa_append::return#0 return zp[2]:6 20002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:32 3335000.5
word utoa_append::value
word utoa_append::value#0 value zp[2]:6 36667.33333333333
word utoa_append::value#1 value zp[2]:6 2.0000002E7
word utoa_append::value#2 value zp[2]:6 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte a [ cputc::c#12 cputc::c#0 cputc::c#2 cputc::c#1 ]
zp[2]:2 [ cputs::s#48 cputs::s#49 cputs::s#2 cputs::s#0 printf_string::str#10 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ printf_sint::format_sign_always#16 ]
zp[1]:4 [ printf_sint::format_justify_left#16 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#0 printf_string::format_justify_left#10 ]
zp[1]:5 [ printf_sint::format_zero_padding#16 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#0 printf_string::padding#3 printf_string::padding#1 ]
zp[2]:6 [ printf_sint::value#19 printf_sint::value#0 printf_sint::value#17 utoa::value#3 utoa::value#7 utoa::value#10 utoa::value#1 utoa::value#2 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_uint::uvalue#12 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte x [ printf_uint::format_radix#12 ]
zp[1]:8 [ printf_uint::format_upper_case#12 printf_number_buffer::format_upper_case#10 printf_number_buffer::format_upper_case#1 ]
zp[1]:9 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ utoa::radix#2 utoa::radix#1 ]
zp[1]:10 [ utoa::max_digits#7 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 printf_padding::length#3 printf_padding::length#4 ]
zp[1]:11 [ utoa::digit#2 utoa::digit#1 printf_padding::pad#7 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:12 [ utoa::buffer#10 utoa::buffer#15 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#3 strlen::return#2 printf_string::$9 printf_number_buffer::$19 ]
zp[1]:14 [ printf_number_buffer::format_min_length#2 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[1]:15 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 printf_number_buffer::buffer_sign#1 ]
reg byte x [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:16 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 utoa::digit_values#8 strlen::str#3 strlen::str#5 strlen::str#2 strlen::str#0 ]
zp[2]:18 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte x [ memset::c#4 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:20 [ conio_cursor_x ]
zp[1]:21 [ conio_cursor_y ]
zp[2]:22 [ conio_line_text ]
zp[2]:24 [ conio_line_color ]
zp[2]:26 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:28 [ gotoxy::$8 ]
zp[2]:30 [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
reg byte a [ printf_string::len#0 ]
reg byte a [ utoa::$4 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
zp[2]:32 [ memset::end#0 memcpy::src_end#0 utoa::digit_value#0 utoa_append::sub#0 ]
mem[12] [ printf_buffer ]
