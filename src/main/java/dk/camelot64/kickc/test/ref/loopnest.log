byte* SCREEN = $0400;

void main() {
  byte i=100;
  do {
    nest();
  } while (--i>0)
}

void nest() {
  byte j=100;
  do {
    *SCREEN = j;
  } while (--j>0)
}

Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) nest::j ← -- (byte) nest::j
PROGRAM
  (byte*) SCREEN ← (word) 1024
proc (void()) main()
  (byte) main::i ← (byte) 100
main::@1:
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) nest()
  (byte) nest::j ← (byte) 100
nest::@1:
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
nest::@return:
  return 
endproc // nest()
  call main 

SYMBOLS
(byte*) SCREEN
(void()) main()
(void~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@return
(byte) main::i
(void()) nest()
(boolean~) nest::$0
(label) nest::@1
(label) nest::@return
(byte) nest::j

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
nest: scope:[nest]  from
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@2
nest::@2: scope:[nest]  from nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block main::@2
Removing empty block @1
Removing empty block nest::@2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
nest: scope:[nest]  from
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#4 ← phi( @2/(byte*) SCREEN#6 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#4 ← phi( @2/(byte*) SCREEN#6 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(void()) main()
(boolean~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(void()) nest()
(boolean~) nest::$0
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#0
(byte) nest::j#1
(byte) nest::j#2

Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#4 ← phi( @2/(byte*) SCREEN#6 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 (byte*) SCREEN#6 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#2 = (byte*) SCREEN#5 (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 main::@3/(byte*) SCREEN#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#0) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Simple Condition (boolean~) main::$1 if((byte) main::i#1>(byte) 0) goto main::@1
Simple Condition (boolean~) nest::$0 if((byte) nest::j#1>(byte) 0) goto nest::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#0) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte) main::i#0 = 100
Constant (const byte) nest::j#0 = 100
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(const byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((const byte*) SCREEN#0) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) nest::j#0
Inlining constant with var siblings (const byte) nest::j#0
Constant inlined main::i#0 = (byte) 100
Constant inlined nest::j#0 = (byte) 100
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((const byte*) SCREEN#0) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(void()) nest()
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#1
(byte) nest::j#2

Block Sequence Planned @begin @2 @end main main::@1 main::@3 main::@return nest nest::@1 nest::@return 
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting nest::@3(between nest::@1 and nest::@1)
Block Sequence Planned @begin @2 @end main main::@1 main::@3 main::@return main::@4 nest nest::@1 nest::@return nest::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#4 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
main::@4: scope:[main]  from main::@3
  (byte~) main::i#4 ← (byte) main::i#1
  to:main::@1
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@3
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@3/(byte~) nest::j#3 )
  *((const byte*) SCREEN#0) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@3
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
nest::@3: scope:[nest]  from nest::@1
  (byte~) nest::j#3 ← (byte) nest::j#1
  to:nest::@1

Adding NOP phi() at start of main
Adding NOP phi() at start of nest
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 3:nest 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [2] (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#4 ) [ main::i#2 ]
  [3] call nest param-assignment [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [5] if((byte) main::i#1>(byte) 0) goto main::@4 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [6] return  [ ]
  to:@return
main::@4: scope:[main]  from main::@3
  [7] (byte~) main::i#4 ← (byte) main::i#1 [ main::i#4 ]
  to:main::@1
nest: scope:[nest]  from main::@1
  [8] phi() [ ]
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@3
  [9] (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@3/(byte~) nest::j#3 ) [ nest::j#2 ]
  [10] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ]
  [11] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ]
  [12] if((byte) nest::j#1>(byte) 0) goto nest::@3 [ nest::j#1 ]
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [13] return  [ ]
  to:@return
nest::@3: scope:[nest]  from nest::@1
  [14] (byte~) nest::j#3 ← (byte) nest::j#1 [ nest::j#3 ]
  to:nest::@1

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 ← main::i#1
Coalesced [14] nest::j#3 ← nest::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) nest::@3
Block Sequence Planned @begin @2 @end main main::@1 main::@3 main::@return nest nest::@1 nest::@return 
Adding NOP phi() at start of main
Adding NOP phi() at start of nest
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [2] (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ]
  [3] call nest param-assignment [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [6] return  [ ]
  to:@return
nest: scope:[nest]  from main::@1
  [7] phi() [ ]
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  [8] (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 ) [ nest::j#2 ]
  [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ]
  [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ]
  [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ]
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [12] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @end @begin 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@3 dominated by  @2 @begin main::@1 main::@3 main 
main::@return dominated by  @2 main::@return @begin main::@1 main::@3 main 
nest dominated by  @2 @begin nest main::@1 main 
nest::@1 dominated by  @2 @begin nest main::@1 nest::@1 main 
nest::@return dominated by  @2 nest::@return @begin nest main::@1 nest::@1 main 

Found back edge: Loop head: main::@1 tails: main::@3 blocks: null
Found back edge: Loop head: nest::@1 tails: nest::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Populated: Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Found 1 loops in scope [nest]
  Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1  depth: 1
Loop head: nest::@1 tails: nest::@1 blocks: nest::@1  depth: 2


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(void()) nest()
(byte) nest::j
(byte) nest::j#1 151.5
(byte) nest::j#2 151.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
  jmp b2
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #$64
    sta i
    jmp b1
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from_b1:
    jsr nest
    jmp b3
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec i
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda i
    bne b1_from_b3
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
    .label j = 3
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  b1_from_nest:
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- zpby1=coby1 
    lda #$64
    sta j
    jmp b1
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  b1_from_b1:
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
    jmp b1
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=zpby1 
    lda j
    sta SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- zpby1=_dec_zpby1 
    dec j
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- zpby1_gt_0_then_la1 
    lda j
    bne b1_from_b1
    jmp breturn
  //SEG29 nest::@return
  breturn:
  //SEG30 [12] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [nest] 303: zp ZP_BYTE:3 [ nest::j#2 nest::j#1 ] 
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [nest] best 2455 combination reg byte x [ nest::j#2 nest::j#1 ] 
Uplifting [main] best 2385 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [] best 2385 combination 
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- yby=coby1 
    ldy #$64
    jmp b1
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
  nest_from_b1:
    jsr nest
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #0
    bne b1_from_b3
  //SEG18 main::@return
  breturn:
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  b1_from_nest:
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  b1_from_b1:
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=xby 
    stx SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1_from_b1
  //SEG29 nest::@return
  breturn:
  //SEG30 [12] return  [ ]
    rts
}

Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction main_from_b2:
Removing instruction b1_from_b3:
Removing instruction nest_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- yby=coby1 
    ldy #$64
    jmp b1
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #0
    bne b1
  //SEG18 main::@return
  breturn:
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  b1_from_nest:
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=xby 
    stx SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG29 nest::@return
  breturn:
  //SEG30 [12] return  [ ]
    rts
}

Removing instruction b2:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_nest:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- yby=coby1 
    ldy #$64
    jmp b1
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
  //SEG15 main::@3
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #0
    bne b1
  //SEG18 main::@return
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=xby 
    stx SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG29 nest::@return
  //SEG30 [12] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- yby=coby1 
    ldy #$64
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
  //SEG15 main::@3
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #0
    bne b1
  //SEG18 main::@return
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- xby=coby1 
    ldx #$64
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=xby 
    stx SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG29 nest::@return
  //SEG30 [12] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 11.0
(void()) nest()
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#1 reg byte x 151.5
(byte) nest::j#2 reg byte x 151.5

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ nest::j#2 nest::j#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 100 [phi:main->main::@1#0] -- yby=coby1 
    ldy #$64
  //SEG10 [2] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] call nest param-assignment [ main::i#2 ]
  //SEG14 [7] phi from main::@1 to nest [phi:main::@1->nest]
    jsr nest
  //SEG15 main::@3
  //SEG16 [4] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG17 [5] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #0
    bne b1
  //SEG18 main::@return
  //SEG19 [6] return  [ ]
    rts
}
//SEG20 nest
nest: {
  //SEG21 [8] phi from nest to nest::@1 [phi:nest->nest::@1]
  //SEG22 [8] phi (byte) nest::j#2 = (byte) 100 [phi:nest->nest::@1#0] -- xby=coby1 
    ldx #$64
  //SEG23 [8] phi from nest::@1 to nest::@1 [phi:nest::@1->nest::@1]
  //SEG24 [8] phi (byte) nest::j#2 = (byte) nest::j#1 [phi:nest::@1->nest::@1#0] -- register_copy 
  //SEG25 nest::@1
  b1:
  //SEG26 [9] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] -- _star_cowo1=xby 
    stx SCREEN
  //SEG27 [10] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG28 [11] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG29 nest::@return
  //SEG30 [12] return  [ ]
    rts
}

