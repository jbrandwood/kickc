Identified constant variable (byte*) TEXT
Identified constant variable (byte*) main::SCREEN
Culled Empty Block (label) main::@2
Culled Empty Block (label) next_char::@3

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  (byte*) nxt#15 ← phi( @2/(byte*) nxt#14 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte*) nxt#13 ← phi( main/(byte*) nxt#15 main::@3/(byte*) nxt#0 )
  call next_char 
  (byte) next_char::return#0 ← (byte) next_char::return#2
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte*) nxt#7 ← phi( main::@1/(byte*) nxt#5 )
  (byte) next_char::return#3 ← phi( main::@1/(byte) next_char::return#0 )
  (byte~) main::$0 ← (byte) next_char::return#3
  (byte*) nxt#0 ← (byte*) nxt#7
  *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$1 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte*) nxt#8 ← phi( main::@3/(byte*) nxt#0 )
  (byte*) nxt#1 ← (byte*) nxt#8
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) nxt#2 ← (const byte*) TEXT
  to:@2

(byte()) next_char()
next_char: scope:[next_char]  from main::@1
  (byte*) nxt#9 ← phi( main::@1/(byte*) nxt#13 )
  (byte) next_char::c#0 ← *((byte*) nxt#9)
  (bool~) next_char::$0 ← (byte) next_char::c#0 == (number) 0
  (bool~) next_char::$1 ← ! (bool~) next_char::$0
  if((bool~) next_char::$1) goto next_char::@1
  to:next_char::@2
next_char::@1: scope:[next_char]  from next_char next_char::@2
  (byte) next_char::c#2 ← phi( next_char/(byte) next_char::c#0 next_char::@2/(byte) next_char::c#1 )
  (byte*) nxt#10 ← phi( next_char/(byte*) nxt#9 next_char::@2/(byte*) nxt#4 )
  (byte*) nxt#3 ← ++ (byte*) nxt#10
  (byte) next_char::return#1 ← (byte) next_char::c#2
  to:next_char::@return
next_char::@2: scope:[next_char]  from next_char
  (byte*) nxt#4 ← (const byte*) TEXT
  (byte) next_char::c#1 ← *((byte*) nxt#4)
  to:next_char::@1
next_char::@return: scope:[next_char]  from next_char::@1
  (byte*) nxt#11 ← phi( next_char::@1/(byte*) nxt#3 )
  (byte) next_char::return#4 ← phi( next_char::@1/(byte) next_char::return#1 )
  (byte) next_char::return#2 ← (byte) next_char::return#4
  (byte*) nxt#5 ← (byte*) nxt#11
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) nxt#14 ← phi( @1/(byte*) nxt#2 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) nxt#12 ← phi( @2/(byte*) nxt#1 )
  (byte*) nxt#6 ← (byte*) nxt#12
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) TEXT = (byte*) "cml "
(void()) main()
(byte~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(const byte*) main::SCREEN = (byte*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte()) next_char()
(bool~) next_char::$0
(bool~) next_char::$1
(label) next_char::@1
(label) next_char::@2
(label) next_char::@return
(byte) next_char::c
(byte) next_char::c#0
(byte) next_char::c#1
(byte) next_char::c#2
(byte) next_char::return
(byte) next_char::return#0
(byte) next_char::return#1
(byte) next_char::return#2
(byte) next_char::return#3
(byte) next_char::return#4
(byte*) nxt
(byte*) nxt#0
(byte*) nxt#1
(byte*) nxt#10
(byte*) nxt#11
(byte*) nxt#12
(byte*) nxt#13
(byte*) nxt#14
(byte*) nxt#15
(byte*) nxt#2
(byte*) nxt#3
(byte*) nxt#4
(byte*) nxt#5
(byte*) nxt#6
(byte*) nxt#7
(byte*) nxt#8
(byte*) nxt#9

Adding number conversion cast (unumber) 0 in (bool~) next_char::$0 ← (byte) next_char::c#0 == (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [19] (bool~) next_char::$1 ← (byte) next_char::c#0 != (byte) 0 from [18] (bool~) next_char::$0 ← (byte) next_char::c#0 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) next_char::return#0 = (byte) next_char::return#3 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) nxt#0 = (byte*) nxt#7 (byte*) nxt#8 (byte*) nxt#1 
Alias (byte) next_char::return#1 = (byte) next_char::c#2 (byte) next_char::return#4 (byte) next_char::return#2 
Alias (byte*) nxt#11 = (byte*) nxt#3 (byte*) nxt#5 
Alias (byte*) nxt#14 = (byte*) nxt#2 
Alias (byte*) nxt#12 = (byte*) nxt#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) nxt#15 (byte*) nxt#14
Identical Phi Values (byte*) nxt#0 (byte*) nxt#11
Identical Phi Values (byte*) nxt#9 (byte*) nxt#13
Identical Phi Values (byte*) nxt#12 (byte*) nxt#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [10] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) next_char::$1 [16] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte*) nxt#14 = TEXT
Constant (const byte*) nxt#4 = TEXT
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Adding number conversion cast (unumber) 0 in if((byte) main::i#1!=(number) 0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) nxt#14
Inlining constant with var siblings (const byte*) nxt#4
Constant inlined main::i#0 = (byte) 0
Constant inlined nxt#14 = (const byte*) TEXT
Constant inlined nxt#4 = (const byte*) TEXT
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting next_char::@4(between next_char and next_char::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to next_char:8 

Created 4 initial phi equivalence classes
Coalesced [15] nxt#16 ← nxt#11
Coalesced [16] main::i#4 ← main::i#1
Coalesced [20] next_char::return#6 ← next_char::c#1
Coalesced [24] nxt#17 ← nxt#13
Coalesced [25] next_char::return#5 ← next_char::c#0
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@4
Culled Empty Block (label) next_char::@4
Renumbering block @2 to @1
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [5] (byte*) nxt#13 ← phi( main/(const byte*) TEXT main::@2/(byte*) nxt#11 )
  [6] call next_char 
  [7] (byte) next_char::return#0 ← (byte) next_char::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$0 ← (byte) next_char::return#0
  [9] *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [12] return 
  to:@return

(byte()) next_char()
next_char: scope:[next_char]  from main::@1
  [13] (byte) next_char::c#0 ← *((byte*) nxt#13)
  [14] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1
  to:next_char::@2
next_char::@2: scope:[next_char]  from next_char
  [15] (byte) next_char::c#1 ← *((const byte*) TEXT)
  to:next_char::@1
next_char::@1: scope:[next_char]  from next_char next_char::@2
  [16] (byte) next_char::return#1 ← phi( next_char/(byte) next_char::c#0 next_char::@2/(byte) next_char::c#1 )
  [16] (byte*) nxt#10 ← phi( next_char/(byte*) nxt#13 next_char::@2/(const byte*) TEXT )
  [17] (byte*) nxt#11 ← ++ (byte*) nxt#10
  to:next_char::@return
next_char::@return: scope:[next_char]  from next_char::@1
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 6.6000000000000005
(byte()) next_char()
(byte) next_char::c
(byte) next_char::c#0 3.0
(byte) next_char::c#1 4.0
(byte) next_char::return
(byte) next_char::return#0 22.0
(byte) next_char::return#1 3.75
(byte*) nxt
(byte*) nxt#10 4.0
(byte*) nxt#11 1.625
(byte*) nxt#13 5.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nxt#10 nxt#13 nxt#11 ]
[ next_char::return#1 next_char::c#0 next_char::c#1 ]
Added variable next_char::return#0 to live range equivalence class [ next_char::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nxt#10 nxt#13 nxt#11 ]
[ next_char::return#1 next_char::c#0 next_char::c#1 ]
[ next_char::return#0 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ nxt#10 nxt#13 nxt#11 ]
Allocated zp[1]:5 [ next_char::return#1 next_char::c#0 next_char::c#1 ]
Allocated zp[1]:6 [ next_char::return#0 ]
Allocated zp[1]:7 [ main::$0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Clobber problem in next_char return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label nxt = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    .label __0 = 7
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi (byte*) nxt#13 = (const byte*) TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte*) nxt#13 = (byte*) nxt#11 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] call next_char 
    jsr next_char
    // [7] (byte) next_char::return#0 ← (byte) next_char::return#1 -- vbuz1=vbuz2 
    lda.z next_char.return_1
    sta.z next_char.return
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte~) main::$0 ← (byte) next_char::return#0 -- vbuz1=vbuz2 
    lda.z next_char.return
    sta.z __0
    // [9] *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z i
    sta SCREEN,y
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [11] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // next_char
// Find the next char of the text
next_char: {
    .label return = 6
    .label c = 5
    .label return_1 = 5
    // [13] (byte) next_char::c#0 ← *((byte*) nxt#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (nxt),y
    sta.z c
    // [14] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from_next_char
    jmp __b2
    // next_char::@2
  __b2:
    // [15] (byte) next_char::c#1 ← *((const byte*) TEXT) -- vbuz1=_deref_pbuc1 
    lda TEXT
    sta.z c
    // [16] phi from next_char::@2 to next_char::@1 [phi:next_char::@2->next_char::@1]
  __b1_from___b2:
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#1 [phi:next_char::@2->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (const byte*) TEXT [phi:next_char::@2->next_char::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [16] phi from next_char to next_char::@1 [phi:next_char->next_char::@1]
  __b1_from_next_char:
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#0 [phi:next_char->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (byte*) nxt#13 [phi:next_char->next_char::@1#1] -- register_copy 
    jmp __b1
    // next_char::@1
  __b1:
    // [17] (byte*) nxt#11 ← ++ (byte*) nxt#10 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    jmp __breturn
    // next_char::@return
  __breturn:
    // [18] return 
    rts
}
  // File Data
  TEXT: .text "cml "
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] (byte) next_char::c#0 ← *((byte*) nxt#13) [ nxt#13 next_char::c#0 ] ( main:2::next_char:6 [ main::i#2 nxt#13 next_char::c#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [13] (byte) next_char::c#0 ← *((byte*) nxt#13) [ nxt#13 next_char::c#0 ] ( main:2::next_char:6 [ main::i#2 nxt#13 next_char::c#0 ] ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ nxt#10 nxt#13 nxt#11 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ next_char::return#1 next_char::c#0 next_char::c#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ next_char::return#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.1: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:7 [ main::$0 ] 
Uplift Scope [next_char] 22: zp[1]:6 [ next_char::return#0 ] 10.75: zp[1]:5 [ next_char::return#1 next_char::c#0 next_char::c#1 ] 
Uplift Scope [] 10.62: zp[2]:3 [ nxt#10 nxt#13 nxt#11 ] 

Uplifting [main] best 587 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] 
Uplifting [next_char] best 510 combination reg byte a [ next_char::return#0 ] reg byte y [ next_char::return#1 next_char::c#0 next_char::c#1 ] 
Uplifting [] best 510 combination zp[2]:3 [ nxt#10 nxt#13 nxt#11 ] 
Allocated (was zp[2]:3) zp[2]:2 [ nxt#10 nxt#13 nxt#11 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Clobber problem in next_char return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label nxt = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) nxt#13 = (const byte*) TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte*) nxt#13 = (byte*) nxt#11 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] call next_char 
    jsr next_char
    // [7] (byte) next_char::return#0 ← (byte) next_char::return#1 -- vbuaa=vbuyy 
    tya
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte~) main::$0 ← (byte) next_char::return#0
    // [9] *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // next_char
// Find the next char of the text
next_char: {
    // [13] (byte) next_char::c#0 ← *((byte*) nxt#13) -- vbuyy=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tay
    // [14] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1_from_next_char
    jmp __b2
    // next_char::@2
  __b2:
    // [15] (byte) next_char::c#1 ← *((const byte*) TEXT) -- vbuyy=_deref_pbuc1 
    ldy TEXT
    // [16] phi from next_char::@2 to next_char::@1 [phi:next_char::@2->next_char::@1]
  __b1_from___b2:
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#1 [phi:next_char::@2->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (const byte*) TEXT [phi:next_char::@2->next_char::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // [16] phi from next_char to next_char::@1 [phi:next_char->next_char::@1]
  __b1_from_next_char:
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#0 [phi:next_char->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (byte*) nxt#13 [phi:next_char->next_char::@1#1] -- register_copy 
    jmp __b1
    // next_char::@1
  __b1:
    // [17] (byte*) nxt#11 ← ++ (byte*) nxt#10 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    jmp __breturn
    // next_char::@return
  __breturn:
    // [18] return 
    rts
}
  // File Data
  TEXT: .text "cml "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_next_char with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_next_char:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) TEXT = (byte*) "cml "
(void()) main()
(byte~) main::$0 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 6.6000000000000005
(byte()) next_char()
(label) next_char::@1
(label) next_char::@2
(label) next_char::@return
(byte) next_char::c
(byte) next_char::c#0 reg byte y 3.0
(byte) next_char::c#1 reg byte y 4.0
(byte) next_char::return
(byte) next_char::return#0 reg byte a 22.0
(byte) next_char::return#1 reg byte y 3.75
(byte*) nxt
(byte*) nxt#10 nxt zp[2]:2 4.0
(byte*) nxt#11 nxt zp[2]:2 1.625
(byte*) nxt#13 nxt zp[2]:2 5.0

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ nxt#10 nxt#13 nxt#11 ]
reg byte y [ next_char::return#1 next_char::c#0 next_char::c#1 ]
reg byte a [ next_char::return#0 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 366

  // File Comments
// Clobber problem in next_char return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label nxt = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) nxt#13 = (const byte*) TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte*) nxt#13 = (byte*) nxt#11 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // next_char()
    // [6] call next_char 
    jsr next_char
    // [7] (byte) next_char::return#0 ← (byte) next_char::return#1 -- vbuaa=vbuyy 
    tya
    // main::@2
    // [8] (byte~) main::$0 ← (byte) next_char::return#0
    // SCREEN[i] = next_char()
    // [9] *((const byte*) main::SCREEN + (byte) main::i#2) ← (byte~) main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // for( byte i: 0..255)
    // [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@return
    // }
    // [12] return 
    rts
}
  // next_char
// Find the next char of the text
next_char: {
    // c = *nxt
    // [13] (byte) next_char::c#0 ← *((byte*) nxt#13) -- vbuyy=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tay
    // if(c==0)
    // [14] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1
    // next_char::@2
    // c = *nxt
    // [15] (byte) next_char::c#1 ← *((const byte*) TEXT) -- vbuyy=_deref_pbuc1 
    ldy TEXT
    // [16] phi from next_char::@2 to next_char::@1 [phi:next_char::@2->next_char::@1]
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#1 [phi:next_char::@2->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (const byte*) TEXT [phi:next_char::@2->next_char::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [16] phi from next_char to next_char::@1 [phi:next_char->next_char::@1]
    // [16] phi (byte) next_char::return#1 = (byte) next_char::c#0 [phi:next_char->next_char::@1#0] -- register_copy 
    // [16] phi (byte*) nxt#10 = (byte*) nxt#13 [phi:next_char->next_char::@1#1] -- register_copy 
    // next_char::@1
  __b1:
    // nxt++;
    // [17] (byte*) nxt#11 ← ++ (byte*) nxt#10 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    // next_char::@return
    // }
    // [18] return 
    rts
}
  // File Data
  TEXT: .text "cml "
  .byte 0

