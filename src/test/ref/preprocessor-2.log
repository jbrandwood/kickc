Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  *((const byte*) SCREEN + (number) 0) ← (byte) 'x'
  *((const byte*) SCREEN + (number) 1) ← (const byte) main::a
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(label) main::@return
(const byte) main::a = (byte) 'a'

Adding number conversion cast (unumber) 0 in *((const byte*) SCREEN + (number) 0) ← (byte) 'x'
Adding number conversion cast (unumber) 1 in *((const byte*) SCREEN + (number) 1) ← (const byte) main::a
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] *((const byte*) SCREEN + (byte) 0) ← (byte) 'x'
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) SCREEN) ← (byte) 'x'
  [1] *((const byte*) SCREEN+(byte) 1) ← (const byte) main::a
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test the preprocessor
// #define and #undef - expected output on screen is xa
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const a = 'a'
    // [0] *((const byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // [1] *((const byte*) SCREEN+(byte) 1) ← (const byte) main::a -- _deref_pbuc1=vbuc2 
    lda #a
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) SCREEN) ← (byte) 'x' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) SCREEN+(byte) 1) ← (const byte) main::a [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the preprocessor
// #define and #undef - expected output on screen is xa
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const a = 'a'
    // [0] *((const byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // [1] *((const byte*) SCREEN+(byte) 1) ← (const byte) main::a -- _deref_pbuc1=vbuc2 
    lda #a
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return
(const byte) main::a = (byte) 'a'



FINAL ASSEMBLER
Score: 18

  // File Comments
// Test the preprocessor
// #define and #undef - expected output on screen is xa
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const a = 'a'
    // SCREEN[0] = a
    // [0] *((const byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // SCREEN[1] = a
    // [1] *((const byte*) SCREEN+(byte) 1) ← (const byte) main::a -- _deref_pbuc1=vbuc2 
    lda #a
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

