
// Minimal range based for() loop

byte* SCREEN = $0400;

void main() {
    byte j;
    for(byte i : 100..1) {
        for(j : 0.++.i) {
            SCREEN[i] = j;
        }
    }
}

main();

PROGRAM
  (byte*) SCREEN ← (word) 1024
  proc (void()) main()
  (byte) main::i ← (byte) 100
main::@1:
  (byte) main::j ← (byte) 0
main::@2:
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::j
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j != (byte) main::i
  if((boolean~) main::$0) goto main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 1
  if((boolean~) main::$1) goto main::@1
main::@return:
  return 
  endproc // main()
  (void~) $0 ← call main 

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::j

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::j
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j != (byte) main::i
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::j
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j != (byte) main::i
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (void~) $0 ← call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::j
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j != (byte) main::i
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) SCREEN#4 ← phi( main::@2/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#2 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) SCREEN#4 ← phi( main::@2/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#2 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) SCREEN#4 ← phi( main::@2/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#2 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte) main::i#0 (byte) 100
Constant (byte) main::j#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) SCREEN#4 ← phi( main::@2/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#2 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(word) 1024 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte*) SCREEN#3 = (byte*) SCREEN#5 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#3 ← phi( @begin/(word) 1024 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte*) SCREEN#3 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 main::@2/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte) main::i#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$0 ← (byte) main::j#1 != (byte) main::i#2
  if((boolean~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 1
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$0 if((byte) main::j#1!=(byte) main::i#2) goto main::@2
Simple Condition (boolean~) main::$1 if((byte) main::i#1!=(byte) 1) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#4 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#2 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#4 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) main::i#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1!=(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 
Alias (byte) main::i#2 = (byte) main::i#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) main::i#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1!=(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(word) 1024 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) main::i#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1!=(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 )
  *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) main::i#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1!=(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@return 
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Added new block during phi lifting main::@6(between main::@2 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@return main::@5 main::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#2 ← phi( main/(byte) 100 main::@5/(byte~) main::i#5 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte~) main::j#3 )
  *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) main::i#2) goto main::@6
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1!=(byte) 1) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
main::@5: scope:[main]  from main::@3
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@1
main::@6: scope:[main]  from main::@2
  (byte~) main::j#3 ← (byte) main::j#1
  to:main::@2

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@5/(byte~) main::i#5 ) [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [2] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte~) main::j#3 ) [ main::i#2 main::j#2 ]
  [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ]
  [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::i#2 main::j#1 ]
  [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@6 [ main::i#2 main::j#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [7] if((byte) main::i#1!=(byte) 1) goto main::@5 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@3
  [9] (byte~) main::i#5 ← (byte) main::i#1 [ main::i#5 ]
  to:main::@1
main::@6: scope:[main]  from main::@2
  [10] (byte~) main::j#3 ← (byte) main::j#1 [ main::j#3 main::i#2 ]
  to:main::@2

Created 2 initial phi equivalence classes
Coalesced [9] main::i#5 ← main::i#1
Coalesced [10] main::j#3 ← main::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@3 main::@return 
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::j#1 ) [ main::i#2 main::j#2 ]
  [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ]
  [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ]
  [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return  [ ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@2 main::@1 main 
main::@3 dominated by  @1 @begin main::@2 main::@1 main::@3 main 
main::@return dominated by  @1 main::@return @begin main::@2 main::@1 main::@3 main 

Found back edge: Loop head: main::@2 tails: main::@2 blocks: null
Found back edge: Loop head: main::@1 tails: main::@3 blocks: null
Populated: Loop head: main::@2 tails: main::@2 blocks: main::@2 
Populated: Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@1 
NATURAL LOOPS
Loop head: main::@2 tails: main::@2 blocks: main::@2 
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@1 

Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@2 tails: main::@2 blocks: main::@2 
  Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@2 tails: main::@2 blocks: main::@2  depth: 2
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 44.8
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 151.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp byte:2 to zp byte:2 [ main::i#2 main::i#1 ]
Allocated zp byte:3 to zp byte:3 [ main::j#2 main::j#1 ]
INITIAL ASM
//SEG0 @begin
bbegin:
  jmp b1
//SEG1 @1
b1:
//SEG2 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  b1_from_main:
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG7 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  b2_from_b1:
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta $3
    jmp b2
  //SEG12 [2] phi from main::@2 to main::@2
  b2_from_b2:
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
    jmp b2
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda $3
    ldx $2
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_inc_zpby1 
    inc $3
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_neq_zpby2_then_la1 
    lda $3
    cmp $2
    bne b2_from_b2
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- zpby1_neq_coby1_then_la1 
    lda $2
    cmp #$1
    bne b1_from_b3
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::i#2 main::i#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:3 [ main::j#2 main::j#1 ] : zp byte:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 303: zp byte:3 [ main::j#2 main::j#1 ] 61.3: zp byte:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 3070 combination reg byte a [ main::j#2 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 3070 combination 
MISSING FRAGMENTS
  xby_neq_aby_then_la1
  yby_neq_aby_then_la1
  xby_neq_xby_then_la1
  yby_neq_xby_then_la1
  xby_neq_yby_then_la1
  yby_neq_yby_then_la1
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 @1
b1:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  b1_from_main:
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG7 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  b2_from_b1:
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- aby=coby1 
    lda #$0
    jmp b2
  //SEG12 [2] phi from main::@2 to main::@2
  b2_from_b2:
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_xby=aby 
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- aby=_inc_aby 
    clc
    adc #$1
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- aby_neq_xby_then_la1 
    sta $ff
    cpx $ff
    bne b2_from_b2
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- xby=_dec_xby 
    dex
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$1
    bne b1_from_b3
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}

Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Removing instruction bbegin:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 @1
b1:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  b1_from_main:
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG7 [1] phi from main::@3 to main::@1
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- aby=coby1 
    lda #$0
    jmp b2
  //SEG12 [2] phi from main::@2 to main::@2
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_xby=aby 
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- aby=_inc_aby 
    clc
    adc #$1
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- aby_neq_xby_then_la1 
    sta $ff
    cpx $ff
    bne b2
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- xby=_dec_xby 
    dex
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$1
    bne b1
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 @1
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG7 [1] phi from main::@3 to main::@1
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- aby=coby1 
    lda #$0
    jmp b2
  //SEG12 [2] phi from main::@2 to main::@2
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_xby=aby 
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- aby=_inc_aby 
    clc
    adc #$1
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- aby_neq_xby_then_la1 
    sta $ff
    cpx $ff
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- xby=_dec_xby 
    dex
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$1
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
//SEG1 @1
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG7 [1] phi from main::@3 to main::@1
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- aby=coby1 
    lda #$0
  //SEG12 [2] phi from main::@2 to main::@2
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_xby=aby 
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- aby=_inc_aby 
    clc
    adc #$1
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- aby_neq_xby_then_la1 
    sta $ff
    cpx $ff
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- xby=_dec_xby 
    dex
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$1
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 44.8
(byte) main::j
(byte) main::j#1 reg byte a 151.5
(byte) main::j#2 reg byte a 151.5

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::j#2 main::j#1 ]

FINAL CODE
//SEG0 @begin
//SEG1 @1
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  //SEG6 [1] phi (byte) main::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG7 [1] phi from main::@3 to main::@1
  //SEG8 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG9 main::@1
  b1:
  //SEG10 [2] phi from main::@1 to main::@2
  //SEG11 [2] phi (byte) main::j#2 = (byte) 0 -- aby=coby1 
    lda #$0
  //SEG12 [2] phi from main::@2 to main::@2
  //SEG13 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG14 main::@2
  b2:
  //SEG15 [3] *((word) 1024 + (byte) main::i#2) ← (byte) main::j#2 [ main::i#2 main::j#2 ] -- cowo1_staridx_xby=aby 
    sta $400,x
  //SEG16 [4] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 main::i#2 ] -- aby=_inc_aby 
    clc
    adc #$1
  //SEG17 [5] if((byte) main::j#1!=(byte) main::i#2) goto main::@2 [ main::j#1 main::i#2 ] -- aby_neq_xby_then_la1 
    sta $ff
    cpx $ff
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- xby=_dec_xby 
    dex
  //SEG20 [7] if((byte) main::i#1!=(byte) 1) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$1
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}

