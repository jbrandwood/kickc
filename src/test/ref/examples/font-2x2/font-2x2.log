Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) main::$2 ← call toD018 (const nomodify byte*) SCREEN (const nomodify byte*) FONT_COMPRESSED 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@6
  (byte) memset::c#4 ← phi( main::@6/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( main::@6/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( main::@6/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM
  (byte*) font_2x2::font_original#0 ← (const nomodify byte*) CHARGEN
  (byte*) font_2x2::font_2x2#0 ← (const nomodify byte*) FONT_ORIGINAL
  call font_2x2 
  to:main::@7
main::@7: scope:[main]  from main
  *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO
  asm { cli  }
  (byte*) font_compress::font_original#0 ← (const nomodify byte*) FONT_ORIGINAL
  (byte*) font_compress::font_compressed#0 ← (const nomodify byte*) FONT_COMPRESSED
  (byte*) font_compress::compress_mapping#0 ← (const byte*) FONT_COMPRESSED_MAP
  call font_compress 
  (byte) font_compress::return#0 ← (byte) font_compress::return#2
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte*) main::toD0181_screen#0 ← (const nomodify byte*) SCREEN
  (byte*) main::toD0181_gfx#0 ← (const nomodify byte*) FONT_COMPRESSED
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  (byte*) main::toD0181_gfx#1 ← phi( main::@8/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@8/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$7 ← (word)(byte*) main::toD0181_screen#1
  (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
  (number~) main::toD0181_$1 ← (number~) main::toD0181_$0 * (number) 4
  (number~) main::toD0181_$2 ← > (number~) main::toD0181_$1
  (byte~) main::toD0181_$3 ← > (word)(byte*) main::toD0181_gfx#1
  (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
  (number~) main::toD0181_$5 ← (number~) main::toD0181_$4 & (number) $f
  (number~) main::toD0181_$6 ← (number~) main::toD0181_$2 | (number~) main::toD0181_$5
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@6
main::@6: scope:[main]  from main::toD0181_@return
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$2 ← (byte) main::toD0181_return#3
  *((const nomodify byte*) D018) ← (byte~) main::$2
  (void*) memset::str#0 ← (void*)(const nomodify byte*) SCREEN
  (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP + (byte) ' ')
  (word) memset::num#0 ← (number) $400
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:main::@9
main::@9: scope:[main]  from main::@6
  (byte) main::c#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@9
  (byte) main::y#4 ← phi( main::@3/(byte) main::y#1 main::@9/(byte) main::y#0 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 main::@9/(byte) main::c#0 )
  (byte) main::x#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@10
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#4 main::@10/(byte) main::y#5 )
  (byte) main::x#2 ← phi( main::@1/(byte) main::x#0 main::@10/(byte) main::x#1 )
  (byte) main::c#2 ← phi( main::@1/(byte) main::c#4 main::@10/(byte) main::c#1 )
  (byte) show::c#0 ← (byte) main::c#2
  (byte) show::x#0 ← (byte) main::x#2
  (byte) show::y#0 ← (byte) main::y#2
  (byte*) show::font_mapping#0 ← (const byte*) FONT_COMPRESSED_MAP
  call show 
  to:main::@10
main::@10: scope:[main]  from main::@2
  (byte) main::y#5 ← phi( main::@2/(byte) main::y#2 )
  (byte) main::x#3 ← phi( main::@2/(byte) main::x#2 )
  (byte) main::c#3 ← phi( main::@2/(byte) main::c#2 )
  (byte) main::c#1 ← ++ (byte) main::c#3
  (byte) main::x#1 ← (byte) main::x#3 + rangenext(0,7)
  (bool~) main::$5 ← (byte) main::x#1 != rangelast(0,7)
  if((bool~) main::$5) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@10
  (byte) main::c#5 ← phi( main::@10/(byte) main::c#1 )
  (byte) main::y#3 ← phi( main::@10/(byte) main::y#5 )
  (byte) main::y#1 ← (byte) main::y#3 + rangenext(0,7)
  (bool~) main::$6 ← (byte) main::y#1 != rangelast(0,7)
  if((bool~) main::$6) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  if(true) goto main::@5
  to:main::@return
main::@5: scope:[main]  from main::@4
  *((const nomodify byte*) SCREEN+(number) $3e7) ← ++ *((const nomodify byte*) SCREEN+(number) $3e7)
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return

(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
show: scope:[show]  from main::@2
  (byte) show::c#1 ← phi( main::@2/(byte) show::c#0 )
  (byte*) show::font_mapping#1 ← phi( main::@2/(byte*) show::font_mapping#0 )
  (byte) show::x#1 ← phi( main::@2/(byte) show::x#0 )
  (byte) show::y#1 ← phi( main::@2/(byte) show::y#0 )
  (word~) show::$7 ← (word)(byte) show::y#1
  (number~) show::$0 ← (word~) show::$7 * (number) $50
  (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (number~) show::$0
  (number~) show::$2 ← (byte) show::x#1 * (number) 2
  (byte*~) show::$3 ← (byte*~) show::$1 + (number~) show::$2
  (byte*) show::ptr#0 ← (byte*~) show::$3
  *((byte*) show::ptr#0 + (number) 0) ← *((byte*) show::font_mapping#1 + (byte) show::c#1)
  (number~) show::$4 ← (byte) show::c#1 + (number) $40
  *((byte*) show::ptr#0 + (number) 1) ← *((byte*) show::font_mapping#1 + (number~) show::$4)
  (number~) show::$5 ← (byte) show::c#1 + (number) $80
  *((byte*) show::ptr#0 + (number) $28) ← *((byte*) show::font_mapping#1 + (number~) show::$5)
  (number~) show::$6 ← (byte) show::c#1 + (number) $c0
  *((byte*) show::ptr#0 + (number) $29) ← *((byte*) show::font_mapping#1 + (number~) show::$6)
  to:show::@return
show::@return: scope:[show]  from show
  return 
  to:@return

(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
font_2x2: scope:[font_2x2]  from main
  (byte*) font_2x2::font_2x2#1 ← phi( main/(byte*) font_2x2::font_2x2#0 )
  (byte*) font_2x2::font_original#1 ← phi( main/(byte*) font_2x2::font_original#0 )
  (byte*) font_2x2::next_original#0 ← (byte*) font_2x2::font_original#1
  (byte*) font_2x2::next_2x2#0 ← (byte*) font_2x2::font_2x2#1
  (byte) font_2x2::c#0 ← (byte) 0
  to:font_2x2::@1
font_2x2::@1: scope:[font_2x2]  from font_2x2 font_2x2::@10
  (byte) font_2x2::c#11 ← phi( font_2x2/(byte) font_2x2::c#0 font_2x2::@10/(byte) font_2x2::c#1 )
  (byte*) font_2x2::next_original#4 ← phi( font_2x2/(byte*) font_2x2::next_original#0 font_2x2::@10/(byte*) font_2x2::next_original#1 )
  (byte*) font_2x2::next_2x2#2 ← phi( font_2x2/(byte*) font_2x2::next_2x2#0 font_2x2::@10/(byte*) font_2x2::next_2x2#1 )
  (byte*) font_2x2::next_2x2_left#0 ← (byte*) font_2x2::next_2x2#2
  (byte*~) font_2x2::$0 ← (byte*) font_2x2::next_2x2#2 + (number) $40*(number) 8
  (byte*) font_2x2::next_2x2_right#0 ← (byte*~) font_2x2::$0
  (byte) font_2x2::l2#0 ← (byte) 0
  (byte) font_2x2::l#0 ← (byte) 0
  to:font_2x2::@2
font_2x2::@2: scope:[font_2x2]  from font_2x2::@1 font_2x2::@9
  (byte) font_2x2::c#10 ← phi( font_2x2::@1/(byte) font_2x2::c#11 font_2x2::@9/(byte) font_2x2::c#3 )
  (byte*) font_2x2::next_2x2#11 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2#2 font_2x2::@9/(byte*) font_2x2::next_2x2#6 )
  (byte*) font_2x2::next_2x2_right#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_right#0 font_2x2::@9/(byte*) font_2x2::next_2x2_right#8 )
  (byte) font_2x2::l2#8 ← phi( font_2x2::@1/(byte) font_2x2::l2#0 font_2x2::@9/(byte) font_2x2::l2#9 )
  (byte*) font_2x2::next_2x2_left#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_left#0 font_2x2::@9/(byte*) font_2x2::next_2x2_left#8 )
  (byte) font_2x2::l#2 ← phi( font_2x2::@1/(byte) font_2x2::l#0 font_2x2::@9/(byte) font_2x2::l#1 )
  (byte*) font_2x2::next_original#2 ← phi( font_2x2::@1/(byte*) font_2x2::next_original#4 font_2x2::@9/(byte*) font_2x2::next_original#5 )
  (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#2 + (byte) font_2x2::l#2)
  (word) font_2x2::glyph_bits_2x2#0 ← (word) 0
  (byte) font_2x2::b#0 ← (byte) 0
  to:font_2x2::@3
font_2x2::@3: scope:[font_2x2]  from font_2x2::@2 font_2x2::@6
  (byte) font_2x2::c#9 ← phi( font_2x2::@2/(byte) font_2x2::c#10 font_2x2::@6/(byte) font_2x2::c#6 )
  (byte*) font_2x2::next_original#11 ← phi( font_2x2::@2/(byte*) font_2x2::next_original#2 font_2x2::@6/(byte*) font_2x2::next_original#8 )
  (byte*) font_2x2::next_2x2#10 ← phi( font_2x2::@2/(byte*) font_2x2::next_2x2#11 font_2x2::@6/(byte*) font_2x2::next_2x2#7 )
  (byte) font_2x2::l#9 ← phi( font_2x2::@2/(byte) font_2x2::l#2 font_2x2::@6/(byte) font_2x2::l#6 )
  (byte*) font_2x2::next_2x2_right#6 ← phi( font_2x2::@2/(byte*) font_2x2::next_2x2_right#7 font_2x2::@6/(byte*) font_2x2::next_2x2_right#3 )
  (byte) font_2x2::l2#7 ← phi( font_2x2::@2/(byte) font_2x2::l2#8 font_2x2::@6/(byte) font_2x2::l2#4 )
  (byte*) font_2x2::next_2x2_left#6 ← phi( font_2x2::@2/(byte*) font_2x2::next_2x2_left#7 font_2x2::@6/(byte*) font_2x2::next_2x2_left#3 )
  (byte) font_2x2::b#5 ← phi( font_2x2::@2/(byte) font_2x2::b#0 font_2x2::@6/(byte) font_2x2::b#1 )
  (word) font_2x2::glyph_bits_2x2#7 ← phi( font_2x2::@2/(word) font_2x2::glyph_bits_2x2#0 font_2x2::@6/(word) font_2x2::glyph_bits_2x2#2 )
  (byte) font_2x2::glyph_bits#2 ← phi( font_2x2::@2/(byte) font_2x2::glyph_bits#0 font_2x2::@6/(byte) font_2x2::glyph_bits#1 )
  (number~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (number) $80
  (bool~) font_2x2::$22 ← (number) 0 != (number~) font_2x2::$1
  if((bool~) font_2x2::$22) goto font_2x2::@4
  to:font_2x2::@5
font_2x2::@4: scope:[font_2x2]  from font_2x2::@3
  (byte) font_2x2::c#7 ← phi( font_2x2::@3/(byte) font_2x2::c#9 )
  (byte*) font_2x2::next_original#9 ← phi( font_2x2::@3/(byte*) font_2x2::next_original#11 )
  (byte*) font_2x2::next_2x2#8 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2#10 )
  (byte) font_2x2::l#7 ← phi( font_2x2::@3/(byte) font_2x2::l#9 )
  (byte*) font_2x2::next_2x2_right#4 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2_right#6 )
  (byte) font_2x2::l2#5 ← phi( font_2x2::@3/(byte) font_2x2::l2#7 )
  (byte*) font_2x2::next_2x2_left#4 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2_left#6 )
  (byte) font_2x2::b#3 ← phi( font_2x2::@3/(byte) font_2x2::b#5 )
  (byte) font_2x2::glyph_bits#4 ← phi( font_2x2::@3/(byte) font_2x2::glyph_bits#2 )
  (word) font_2x2::glyph_bits_2x2#5 ← phi( font_2x2::@3/(word) font_2x2::glyph_bits_2x2#7 )
  (byte~) font_2x2::$3 ← (byte) 1
  to:font_2x2::@6
font_2x2::@5: scope:[font_2x2]  from font_2x2::@3
  (byte) font_2x2::c#8 ← phi( font_2x2::@3/(byte) font_2x2::c#9 )
  (byte*) font_2x2::next_original#10 ← phi( font_2x2::@3/(byte*) font_2x2::next_original#11 )
  (byte*) font_2x2::next_2x2#9 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2#10 )
  (byte) font_2x2::l#8 ← phi( font_2x2::@3/(byte) font_2x2::l#9 )
  (byte*) font_2x2::next_2x2_right#5 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2_right#6 )
  (byte) font_2x2::l2#6 ← phi( font_2x2::@3/(byte) font_2x2::l2#7 )
  (byte*) font_2x2::next_2x2_left#5 ← phi( font_2x2::@3/(byte*) font_2x2::next_2x2_left#6 )
  (byte) font_2x2::b#4 ← phi( font_2x2::@3/(byte) font_2x2::b#5 )
  (byte) font_2x2::glyph_bits#5 ← phi( font_2x2::@3/(byte) font_2x2::glyph_bits#2 )
  (word) font_2x2::glyph_bits_2x2#6 ← phi( font_2x2::@3/(word) font_2x2::glyph_bits_2x2#7 )
  (byte~) font_2x2::$2 ← (byte) 0
  to:font_2x2::@6
font_2x2::@6: scope:[font_2x2]  from font_2x2::@4 font_2x2::@5
  (byte) font_2x2::c#6 ← phi( font_2x2::@4/(byte) font_2x2::c#7 font_2x2::@5/(byte) font_2x2::c#8 )
  (byte*) font_2x2::next_original#8 ← phi( font_2x2::@4/(byte*) font_2x2::next_original#9 font_2x2::@5/(byte*) font_2x2::next_original#10 )
  (byte*) font_2x2::next_2x2#7 ← phi( font_2x2::@4/(byte*) font_2x2::next_2x2#8 font_2x2::@5/(byte*) font_2x2::next_2x2#9 )
  (byte) font_2x2::l#6 ← phi( font_2x2::@4/(byte) font_2x2::l#7 font_2x2::@5/(byte) font_2x2::l#8 )
  (byte*) font_2x2::next_2x2_right#3 ← phi( font_2x2::@4/(byte*) font_2x2::next_2x2_right#4 font_2x2::@5/(byte*) font_2x2::next_2x2_right#5 )
  (byte) font_2x2::l2#4 ← phi( font_2x2::@4/(byte) font_2x2::l2#5 font_2x2::@5/(byte) font_2x2::l2#6 )
  (byte*) font_2x2::next_2x2_left#3 ← phi( font_2x2::@4/(byte*) font_2x2::next_2x2_left#4 font_2x2::@5/(byte*) font_2x2::next_2x2_left#5 )
  (byte) font_2x2::b#2 ← phi( font_2x2::@4/(byte) font_2x2::b#3 font_2x2::@5/(byte) font_2x2::b#4 )
  (byte) font_2x2::glyph_bits#3 ← phi( font_2x2::@4/(byte) font_2x2::glyph_bits#4 font_2x2::@5/(byte) font_2x2::glyph_bits#5 )
  (word) font_2x2::glyph_bits_2x2#3 ← phi( font_2x2::@4/(word) font_2x2::glyph_bits_2x2#5 font_2x2::@5/(word) font_2x2::glyph_bits_2x2#6 )
  (byte~) font_2x2::$4 ← phi( font_2x2::@4/(byte~) font_2x2::$3 font_2x2::@5/(byte~) font_2x2::$2 )
  (byte) font_2x2::glyph_bit#0 ← (byte~) font_2x2::$4
  (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (number) 1
  (word~) font_2x2::$6 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0
  (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$6
  (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (number) 1
  (word~) font_2x2::$8 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0
  (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$8
  (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#3 << (number) 1
  (byte) font_2x2::b#1 ← (byte) font_2x2::b#2 + rangenext(0,7)
  (bool~) font_2x2::$9 ← (byte) font_2x2::b#1 != rangelast(0,7)
  if((bool~) font_2x2::$9) goto font_2x2::@3
  to:font_2x2::@7
font_2x2::@7: scope:[font_2x2]  from font_2x2::@6
  (byte) font_2x2::c#4 ← phi( font_2x2::@6/(byte) font_2x2::c#6 )
  (byte*) font_2x2::next_original#6 ← phi( font_2x2::@6/(byte*) font_2x2::next_original#8 )
  (byte*) font_2x2::next_2x2#5 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2#7 )
  (byte) font_2x2::l#4 ← phi( font_2x2::@6/(byte) font_2x2::l#6 )
  (byte*) font_2x2::next_2x2_right#2 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_right#3 )
  (byte) font_2x2::l2#3 ← phi( font_2x2::@6/(byte) font_2x2::l2#4 )
  (byte*) font_2x2::next_2x2_left#2 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_left#3 )
  (word) font_2x2::glyph_bits_2x2#4 ← phi( font_2x2::@6/(word) font_2x2::glyph_bits_2x2#2 )
  (byte~) font_2x2::$10 ← > (word) font_2x2::glyph_bits_2x2#4
  *((byte*) font_2x2::next_2x2_left#2 + (byte) font_2x2::l2#3) ← (byte~) font_2x2::$10
  (number~) font_2x2::$11 ← (byte) font_2x2::l2#3 + (number) 1
  (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#4
  *((byte*) font_2x2::next_2x2_left#2 + (number~) font_2x2::$11) ← (byte~) font_2x2::$12
  (byte~) font_2x2::$13 ← < (word) font_2x2::glyph_bits_2x2#4
  *((byte*) font_2x2::next_2x2_right#2 + (byte) font_2x2::l2#3) ← (byte~) font_2x2::$13
  (number~) font_2x2::$14 ← (byte) font_2x2::l2#3 + (number) 1
  (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#4
  *((byte*) font_2x2::next_2x2_right#2 + (number~) font_2x2::$14) ← (byte~) font_2x2::$15
  (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#3 + (number) 2
  (bool~) font_2x2::$16 ← (byte) font_2x2::l2#1 == (number) 8
  (bool~) font_2x2::$17 ← ! (bool~) font_2x2::$16
  if((bool~) font_2x2::$17) goto font_2x2::@9
  to:font_2x2::@8
font_2x2::@9: scope:[font_2x2]  from font_2x2::@7 font_2x2::@8
  (byte*) font_2x2::next_2x2_right#8 ← phi( font_2x2::@7/(byte*) font_2x2::next_2x2_right#2 font_2x2::@8/(byte*) font_2x2::next_2x2_right#1 )
  (byte) font_2x2::l2#9 ← phi( font_2x2::@7/(byte) font_2x2::l2#1 font_2x2::@8/(byte) font_2x2::l2#2 )
  (byte*) font_2x2::next_2x2_left#8 ← phi( font_2x2::@7/(byte*) font_2x2::next_2x2_left#2 font_2x2::@8/(byte*) font_2x2::next_2x2_left#1 )
  (byte) font_2x2::c#3 ← phi( font_2x2::@7/(byte) font_2x2::c#4 font_2x2::@8/(byte) font_2x2::c#5 )
  (byte*) font_2x2::next_2x2#6 ← phi( font_2x2::@7/(byte*) font_2x2::next_2x2#5 font_2x2::@8/(byte*) font_2x2::next_2x2#3 )
  (byte*) font_2x2::next_original#5 ← phi( font_2x2::@7/(byte*) font_2x2::next_original#6 font_2x2::@8/(byte*) font_2x2::next_original#7 )
  (byte) font_2x2::l#3 ← phi( font_2x2::@7/(byte) font_2x2::l#4 font_2x2::@8/(byte) font_2x2::l#5 )
  (byte) font_2x2::l#1 ← (byte) font_2x2::l#3 + rangenext(0,7)
  (bool~) font_2x2::$20 ← (byte) font_2x2::l#1 != rangelast(0,7)
  if((bool~) font_2x2::$20) goto font_2x2::@2
  to:font_2x2::@10
font_2x2::@8: scope:[font_2x2]  from font_2x2::@7
  (byte) font_2x2::c#5 ← phi( font_2x2::@7/(byte) font_2x2::c#4 )
  (byte*) font_2x2::next_original#7 ← phi( font_2x2::@7/(byte*) font_2x2::next_original#6 )
  (byte) font_2x2::l#5 ← phi( font_2x2::@7/(byte) font_2x2::l#4 )
  (byte*) font_2x2::next_2x2#3 ← phi( font_2x2::@7/(byte*) font_2x2::next_2x2#5 )
  (byte*~) font_2x2::$18 ← (byte*) font_2x2::next_2x2#3 + (number) $80*(number) 8
  (byte*) font_2x2::next_2x2_left#1 ← (byte*~) font_2x2::$18
  (byte*~) font_2x2::$19 ← (byte*) font_2x2::next_2x2#3 + (number) $c0*(number) 8
  (byte*) font_2x2::next_2x2_right#1 ← (byte*~) font_2x2::$19
  (byte) font_2x2::l2#2 ← (number) 0
  to:font_2x2::@9
font_2x2::@10: scope:[font_2x2]  from font_2x2::@9
  (byte) font_2x2::c#2 ← phi( font_2x2::@9/(byte) font_2x2::c#3 )
  (byte*) font_2x2::next_original#3 ← phi( font_2x2::@9/(byte*) font_2x2::next_original#5 )
  (byte*) font_2x2::next_2x2#4 ← phi( font_2x2::@9/(byte*) font_2x2::next_2x2#6 )
  (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2#4 + (number) 8
  (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#3 + (number) 8
  (byte) font_2x2::c#1 ← (byte) font_2x2::c#2 + rangenext(0,$3f)
  (bool~) font_2x2::$21 ← (byte) font_2x2::c#1 != rangelast(0,$3f)
  if((bool~) font_2x2::$21) goto font_2x2::@1
  to:font_2x2::@return
font_2x2::@return: scope:[font_2x2]  from font_2x2::@10
  return 
  to:@return

(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
font_compress: scope:[font_compress]  from main::@7
  (byte*) font_compress::compress_mapping#6 ← phi( main::@7/(byte*) font_compress::compress_mapping#0 )
  (byte*) font_compress::font_compressed#1 ← phi( main::@7/(byte*) font_compress::font_compressed#0 )
  (byte*) font_compress::font_original#1 ← phi( main::@7/(byte*) font_compress::font_original#0 )
  (byte) font_compress::font_size#0 ← (byte) 0
  (byte*) font_compress::next_original#0 ← (byte*) font_compress::font_original#1
  (byte*) font_compress::next_compressed#0 ← (byte*) font_compress::font_compressed#1
  (byte) font_compress::i#0 ← (byte) 0
  to:font_compress::@1
font_compress::@1: scope:[font_compress]  from font_compress font_compress::@2
  (byte*) font_compress::next_compressed#6 ← phi( font_compress/(byte*) font_compress::next_compressed#0 font_compress::@2/(byte*) font_compress::next_compressed#7 )
  (byte) font_compress::i#5 ← phi( font_compress/(byte) font_compress::i#0 font_compress::@2/(byte) font_compress::i#1 )
  (byte*) font_compress::compress_mapping#4 ← phi( font_compress/(byte*) font_compress::compress_mapping#6 font_compress::@2/(byte*) font_compress::compress_mapping#1 )
  (byte) font_compress::font_size#2 ← phi( font_compress/(byte) font_compress::font_size#0 font_compress::@2/(byte) font_compress::font_size#5 )
  (byte*) font_compress::font_compressed#2 ← phi( font_compress/(byte*) font_compress::font_compressed#1 font_compress::@2/(byte*) font_compress::font_compressed#3 )
  (byte*) font_compress::next_original#2 ← phi( font_compress/(byte*) font_compress::next_original#0 font_compress::@2/(byte*) font_compress::next_original#1 )
  (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2
  (byte*) font_find::font#0 ← (byte*) font_compress::font_compressed#2
  (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2
  call font_find 
  (byte) font_find::return#0 ← (byte) font_find::return#3
  to:font_compress::@7
font_compress::@7: scope:[font_compress]  from font_compress::@1
  (byte*) font_compress::next_compressed#5 ← phi( font_compress::@1/(byte*) font_compress::next_compressed#6 )
  (byte) font_compress::font_size#7 ← phi( font_compress::@1/(byte) font_compress::font_size#2 )
  (byte*) font_compress::font_compressed#5 ← phi( font_compress::@1/(byte*) font_compress::font_compressed#2 )
  (byte*) font_compress::next_original#6 ← phi( font_compress::@1/(byte*) font_compress::next_original#2 )
  (byte) font_compress::i#4 ← phi( font_compress::@1/(byte) font_compress::i#5 )
  (byte*) font_compress::compress_mapping#3 ← phi( font_compress::@1/(byte*) font_compress::compress_mapping#4 )
  (byte) font_find::return#4 ← phi( font_compress::@1/(byte) font_find::return#0 )
  (byte~) font_compress::$0 ← (byte) font_find::return#4
  (byte) font_compress::found#0 ← (byte~) font_compress::$0
  (bool~) font_compress::$1 ← (byte) font_compress::found#0 == (number) $ff
  (bool~) font_compress::$2 ← ! (bool~) font_compress::$1
  if((bool~) font_compress::$2) goto font_compress::@2
  to:font_compress::@5
font_compress::@2: scope:[font_compress]  from font_compress::@4 font_compress::@7
  (byte*) font_compress::next_compressed#7 ← phi( font_compress::@4/(byte*) font_compress::next_compressed#1 font_compress::@7/(byte*) font_compress::next_compressed#5 )
  (byte) font_compress::font_size#5 ← phi( font_compress::@4/(byte) font_compress::font_size#1 font_compress::@7/(byte) font_compress::font_size#7 )
  (byte*) font_compress::font_compressed#3 ← phi( font_compress::@4/(byte*) font_compress::font_compressed#4 font_compress::@7/(byte*) font_compress::font_compressed#5 )
  (byte*) font_compress::next_original#3 ← phi( font_compress::@4/(byte*) font_compress::next_original#5 font_compress::@7/(byte*) font_compress::next_original#6 )
  (byte) font_compress::i#2 ← phi( font_compress::@4/(byte) font_compress::i#3 font_compress::@7/(byte) font_compress::i#4 )
  (byte*) font_compress::compress_mapping#1 ← phi( font_compress::@4/(byte*) font_compress::compress_mapping#2 font_compress::@7/(byte*) font_compress::compress_mapping#3 )
  (byte) font_compress::found#2 ← phi( font_compress::@4/(byte) font_compress::found#1 font_compress::@7/(byte) font_compress::found#0 )
  *((byte*) font_compress::compress_mapping#1 + (byte) font_compress::i#2) ← (byte) font_compress::found#2
  (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#3 + (number) 8
  (byte) font_compress::i#1 ← (byte) font_compress::i#2 + rangenext(0,$ff)
  (bool~) font_compress::$4 ← (byte) font_compress::i#1 != rangelast(0,$ff)
  if((bool~) font_compress::$4) goto font_compress::@1
  to:font_compress::@6
font_compress::@5: scope:[font_compress]  from font_compress::@7
  (byte*) font_compress::font_compressed#7 ← phi( font_compress::@7/(byte*) font_compress::font_compressed#5 )
  (byte) font_compress::i#7 ← phi( font_compress::@7/(byte) font_compress::i#4 )
  (byte*) font_compress::compress_mapping#7 ← phi( font_compress::@7/(byte*) font_compress::compress_mapping#3 )
  (byte) font_compress::font_size#8 ← phi( font_compress::@7/(byte) font_compress::font_size#7 )
  (byte*) font_compress::next_compressed#4 ← phi( font_compress::@7/(byte*) font_compress::next_compressed#5 )
  (byte*) font_compress::next_original#7 ← phi( font_compress::@7/(byte*) font_compress::next_original#6 )
  (byte) font_compress::l#0 ← (byte) 0
  to:font_compress::@3
font_compress::@3: scope:[font_compress]  from font_compress::@3 font_compress::@5
  (byte*) font_compress::font_compressed#6 ← phi( font_compress::@3/(byte*) font_compress::font_compressed#6 font_compress::@5/(byte*) font_compress::font_compressed#7 )
  (byte) font_compress::i#6 ← phi( font_compress::@3/(byte) font_compress::i#6 font_compress::@5/(byte) font_compress::i#7 )
  (byte*) font_compress::compress_mapping#5 ← phi( font_compress::@3/(byte*) font_compress::compress_mapping#5 font_compress::@5/(byte*) font_compress::compress_mapping#7 )
  (byte) font_compress::font_size#6 ← phi( font_compress::@3/(byte) font_compress::font_size#6 font_compress::@5/(byte) font_compress::font_size#8 )
  (byte*) font_compress::next_compressed#2 ← phi( font_compress::@3/(byte*) font_compress::next_compressed#2 font_compress::@5/(byte*) font_compress::next_compressed#4 )
  (byte) font_compress::l#2 ← phi( font_compress::@3/(byte) font_compress::l#1 font_compress::@5/(byte) font_compress::l#0 )
  (byte*) font_compress::next_original#4 ← phi( font_compress::@3/(byte*) font_compress::next_original#4 font_compress::@5/(byte*) font_compress::next_original#7 )
  *((byte*) font_compress::next_compressed#2 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#4 + (byte) font_compress::l#2)
  (byte) font_compress::l#1 ← (byte) font_compress::l#2 + rangenext(0,7)
  (bool~) font_compress::$3 ← (byte) font_compress::l#1 != rangelast(0,7)
  if((bool~) font_compress::$3) goto font_compress::@3
  to:font_compress::@4
font_compress::@4: scope:[font_compress]  from font_compress::@3
  (byte*) font_compress::font_compressed#4 ← phi( font_compress::@3/(byte*) font_compress::font_compressed#6 )
  (byte*) font_compress::next_original#5 ← phi( font_compress::@3/(byte*) font_compress::next_original#4 )
  (byte) font_compress::i#3 ← phi( font_compress::@3/(byte) font_compress::i#6 )
  (byte*) font_compress::compress_mapping#2 ← phi( font_compress::@3/(byte*) font_compress::compress_mapping#5 )
  (byte) font_compress::font_size#3 ← phi( font_compress::@3/(byte) font_compress::font_size#6 )
  (byte*) font_compress::next_compressed#3 ← phi( font_compress::@3/(byte*) font_compress::next_compressed#2 )
  (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#3 + (number) 8
  (byte) font_compress::found#1 ← (byte) font_compress::font_size#3
  (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#3
  to:font_compress::@2
font_compress::@6: scope:[font_compress]  from font_compress::@2
  (byte) font_compress::font_size#4 ← phi( font_compress::@2/(byte) font_compress::font_size#5 )
  (byte) font_compress::return#1 ← (byte) font_compress::font_size#4
  to:font_compress::@return
font_compress::@return: scope:[font_compress]  from font_compress::@6
  (byte) font_compress::return#3 ← phi( font_compress::@6/(byte) font_compress::return#1 )
  (byte) font_compress::return#2 ← (byte) font_compress::return#3
  return 
  to:@return

(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
font_find: scope:[font_find]  from font_compress::@1
  (byte*) font_find::font#9 ← phi( font_compress::@1/(byte*) font_find::font#0 )
  (byte*) font_find::glyph#5 ← phi( font_compress::@1/(byte*) font_find::glyph#0 )
  (byte) font_find::font_size#2 ← phi( font_compress::@1/(byte) font_find::font_size#0 )
  (byte) font_find::i#0 ← (byte) 0
  to:font_find::@1
font_find::@1: scope:[font_find]  from font_find font_find::@9
  (byte*) font_find::font#7 ← phi( font_find/(byte*) font_find::font#9 font_find::@9/(byte*) font_find::font#1 )
  (byte*) font_find::glyph#4 ← phi( font_find/(byte*) font_find::glyph#5 font_find::@9/(byte*) font_find::glyph#6 )
  (byte) font_find::font_size#1 ← phi( font_find/(byte) font_find::font_size#2 font_find::@9/(byte) font_find::font_size#3 )
  (byte) font_find::i#2 ← phi( font_find/(byte) font_find::i#0 font_find::@9/(byte) font_find::i#1 )
  (bool~) font_find::$0 ← (byte) font_find::i#2 < (byte) font_find::font_size#1
  if((bool~) font_find::$0) goto font_find::@2
  to:font_find::@3
font_find::@2: scope:[font_find]  from font_find::@1
  (byte) font_find::font_size#8 ← phi( font_find::@1/(byte) font_find::font_size#1 )
  (byte) font_find::i#9 ← phi( font_find::@1/(byte) font_find::i#2 )
  (byte*) font_find::font#4 ← phi( font_find::@1/(byte*) font_find::font#7 )
  (byte*) font_find::glyph#2 ← phi( font_find::@1/(byte*) font_find::glyph#4 )
  (byte) font_find::found#0 ← (byte) 1
  (byte) font_find::l#0 ← (byte) 0
  to:font_find::@4
font_find::@3: scope:[font_find]  from font_find::@1
  (byte) font_find::return#1 ← (number) $ff
  to:font_find::@return
font_find::@4: scope:[font_find]  from font_find::@2 font_find::@5
  (byte) font_find::font_size#7 ← phi( font_find::@2/(byte) font_find::font_size#8 font_find::@5/(byte) font_find::font_size#5 )
  (byte) font_find::i#8 ← phi( font_find::@2/(byte) font_find::i#9 font_find::@5/(byte) font_find::i#6 )
  (byte) font_find::found#4 ← phi( font_find::@2/(byte) font_find::found#0 font_find::@5/(byte) font_find::found#3 )
  (byte*) font_find::font#2 ← phi( font_find::@2/(byte*) font_find::font#4 font_find::@5/(byte*) font_find::font#5 )
  (byte) font_find::l#2 ← phi( font_find::@2/(byte) font_find::l#0 font_find::@5/(byte) font_find::l#1 )
  (byte*) font_find::glyph#1 ← phi( font_find::@2/(byte*) font_find::glyph#2 font_find::@5/(byte*) font_find::glyph#3 )
  (bool~) font_find::$1 ← *((byte*) font_find::glyph#1 + (byte) font_find::l#2) != *((byte*) font_find::font#2 + (byte) font_find::l#2)
  (bool~) font_find::$2 ← ! (bool~) font_find::$1
  if((bool~) font_find::$2) goto font_find::@5
  to:font_find::@7
font_find::@5: scope:[font_find]  from font_find::@4
  (byte) font_find::font_size#5 ← phi( font_find::@4/(byte) font_find::font_size#7 )
  (byte) font_find::i#6 ← phi( font_find::@4/(byte) font_find::i#8 )
  (byte) font_find::found#3 ← phi( font_find::@4/(byte) font_find::found#4 )
  (byte*) font_find::font#5 ← phi( font_find::@4/(byte*) font_find::font#2 )
  (byte*) font_find::glyph#3 ← phi( font_find::@4/(byte*) font_find::glyph#1 )
  (byte) font_find::l#3 ← phi( font_find::@4/(byte) font_find::l#2 )
  (byte) font_find::l#1 ← (byte) font_find::l#3 + rangenext(0,7)
  (bool~) font_find::$3 ← (byte) font_find::l#1 != rangelast(0,7)
  if((bool~) font_find::$3) goto font_find::@4
  to:font_find::@6
font_find::@7: scope:[font_find]  from font_find::@4
  (byte*) font_find::glyph#8 ← phi( font_find::@4/(byte*) font_find::glyph#1 )
  (byte) font_find::font_size#6 ← phi( font_find::@4/(byte) font_find::font_size#7 )
  (byte) font_find::i#7 ← phi( font_find::@4/(byte) font_find::i#8 )
  (byte*) font_find::font#8 ← phi( font_find::@4/(byte*) font_find::font#2 )
  (byte) font_find::found#1 ← (number) 0
  to:font_find::@6
font_find::@6: scope:[font_find]  from font_find::@5 font_find::@7
  (byte*) font_find::glyph#7 ← phi( font_find::@5/(byte*) font_find::glyph#3 font_find::@7/(byte*) font_find::glyph#8 )
  (byte) font_find::font_size#4 ← phi( font_find::@5/(byte) font_find::font_size#5 font_find::@7/(byte) font_find::font_size#6 )
  (byte) font_find::i#5 ← phi( font_find::@5/(byte) font_find::i#6 font_find::@7/(byte) font_find::i#7 )
  (byte*) font_find::font#6 ← phi( font_find::@5/(byte*) font_find::font#5 font_find::@7/(byte*) font_find::font#8 )
  (byte) font_find::found#2 ← phi( font_find::@5/(byte) font_find::found#3 font_find::@7/(byte) font_find::found#1 )
  (bool~) font_find::$5 ← (number) 0 != (byte) font_find::found#2
  (bool~) font_find::$4 ← ! (bool~) font_find::$5
  if((bool~) font_find::$4) goto font_find::@9
  to:font_find::@8
font_find::@9: scope:[font_find]  from font_find::@6
  (byte*) font_find::glyph#6 ← phi( font_find::@6/(byte*) font_find::glyph#7 )
  (byte) font_find::font_size#3 ← phi( font_find::@6/(byte) font_find::font_size#4 )
  (byte) font_find::i#3 ← phi( font_find::@6/(byte) font_find::i#5 )
  (byte*) font_find::font#3 ← phi( font_find::@6/(byte*) font_find::font#6 )
  (byte*) font_find::font#1 ← (byte*) font_find::font#3 + (number) 8
  (byte) font_find::i#1 ← ++ (byte) font_find::i#3
  to:font_find::@1
font_find::@8: scope:[font_find]  from font_find::@6
  (byte) font_find::i#4 ← phi( font_find::@6/(byte) font_find::i#5 )
  (byte) font_find::return#2 ← (byte) font_find::i#4
  to:font_find::@return
font_find::@return: scope:[font_find]  from font_find::@3 font_find::@8
  (byte) font_find::return#5 ← phi( font_find::@3/(byte) font_find::return#1 font_find::@8/(byte) font_find::return#2 )
  (byte) font_find::return#3 ← (byte) font_find::return#5
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) CHARGEN = (byte*)(number) $d000
(const nomodify byte*) D018 = (byte*)(number) $d018
(const nomodify byte*) FONT_COMPRESSED = (byte*)(number) $2800
(const byte*) FONT_COMPRESSED_MAP[(number) $100]  = { fill( $100, 0) }
(const nomodify byte*) FONT_ORIGINAL = (byte*)(number) $2000
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte*) PROCPORT = (byte*)(number) 1
(const nomodify byte) PROCPORT_BASIC_KERNEL_IO = (byte) 7
(const nomodify byte) PROCPORT_RAM_CHARROM = (byte) 1
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
(byte*~) font_2x2::$0
(number~) font_2x2::$1
(byte~) font_2x2::$10
(number~) font_2x2::$11
(byte~) font_2x2::$12
(byte~) font_2x2::$13
(number~) font_2x2::$14
(byte~) font_2x2::$15
(bool~) font_2x2::$16
(bool~) font_2x2::$17
(byte*~) font_2x2::$18
(byte*~) font_2x2::$19
(byte~) font_2x2::$2
(bool~) font_2x2::$20
(bool~) font_2x2::$21
(bool~) font_2x2::$22
(byte~) font_2x2::$3
(byte~) font_2x2::$4
(word~) font_2x2::$5
(word~) font_2x2::$6
(word~) font_2x2::$7
(word~) font_2x2::$8
(bool~) font_2x2::$9
(label) font_2x2::@1
(label) font_2x2::@10
(label) font_2x2::@2
(label) font_2x2::@3
(label) font_2x2::@4
(label) font_2x2::@5
(label) font_2x2::@6
(label) font_2x2::@7
(label) font_2x2::@8
(label) font_2x2::@9
(label) font_2x2::@return
(byte) font_2x2::b
(byte) font_2x2::b#0
(byte) font_2x2::b#1
(byte) font_2x2::b#2
(byte) font_2x2::b#3
(byte) font_2x2::b#4
(byte) font_2x2::b#5
(byte) font_2x2::c
(byte) font_2x2::c#0
(byte) font_2x2::c#1
(byte) font_2x2::c#10
(byte) font_2x2::c#11
(byte) font_2x2::c#2
(byte) font_2x2::c#3
(byte) font_2x2::c#4
(byte) font_2x2::c#5
(byte) font_2x2::c#6
(byte) font_2x2::c#7
(byte) font_2x2::c#8
(byte) font_2x2::c#9
(byte*) font_2x2::font_2x2
(byte*) font_2x2::font_2x2#0
(byte*) font_2x2::font_2x2#1
(byte*) font_2x2::font_original
(byte*) font_2x2::font_original#0
(byte*) font_2x2::font_original#1
(byte) font_2x2::glyph_bit
(byte) font_2x2::glyph_bit#0
(byte) font_2x2::glyph_bits
(byte) font_2x2::glyph_bits#0
(byte) font_2x2::glyph_bits#1
(byte) font_2x2::glyph_bits#2
(byte) font_2x2::glyph_bits#3
(byte) font_2x2::glyph_bits#4
(byte) font_2x2::glyph_bits#5
(word) font_2x2::glyph_bits_2x2
(word) font_2x2::glyph_bits_2x2#0
(word) font_2x2::glyph_bits_2x2#1
(word) font_2x2::glyph_bits_2x2#2
(word) font_2x2::glyph_bits_2x2#3
(word) font_2x2::glyph_bits_2x2#4
(word) font_2x2::glyph_bits_2x2#5
(word) font_2x2::glyph_bits_2x2#6
(word) font_2x2::glyph_bits_2x2#7
(byte) font_2x2::l
(byte) font_2x2::l#0
(byte) font_2x2::l#1
(byte) font_2x2::l#2
(byte) font_2x2::l#3
(byte) font_2x2::l#4
(byte) font_2x2::l#5
(byte) font_2x2::l#6
(byte) font_2x2::l#7
(byte) font_2x2::l#8
(byte) font_2x2::l#9
(byte) font_2x2::l2
(byte) font_2x2::l2#0
(byte) font_2x2::l2#1
(byte) font_2x2::l2#2
(byte) font_2x2::l2#3
(byte) font_2x2::l2#4
(byte) font_2x2::l2#5
(byte) font_2x2::l2#6
(byte) font_2x2::l2#7
(byte) font_2x2::l2#8
(byte) font_2x2::l2#9
(byte*) font_2x2::next_2x2
(byte*) font_2x2::next_2x2#0
(byte*) font_2x2::next_2x2#1
(byte*) font_2x2::next_2x2#10
(byte*) font_2x2::next_2x2#11
(byte*) font_2x2::next_2x2#2
(byte*) font_2x2::next_2x2#3
(byte*) font_2x2::next_2x2#4
(byte*) font_2x2::next_2x2#5
(byte*) font_2x2::next_2x2#6
(byte*) font_2x2::next_2x2#7
(byte*) font_2x2::next_2x2#8
(byte*) font_2x2::next_2x2#9
(byte*) font_2x2::next_2x2_left
(byte*) font_2x2::next_2x2_left#0
(byte*) font_2x2::next_2x2_left#1
(byte*) font_2x2::next_2x2_left#2
(byte*) font_2x2::next_2x2_left#3
(byte*) font_2x2::next_2x2_left#4
(byte*) font_2x2::next_2x2_left#5
(byte*) font_2x2::next_2x2_left#6
(byte*) font_2x2::next_2x2_left#7
(byte*) font_2x2::next_2x2_left#8
(byte*) font_2x2::next_2x2_right
(byte*) font_2x2::next_2x2_right#0
(byte*) font_2x2::next_2x2_right#1
(byte*) font_2x2::next_2x2_right#2
(byte*) font_2x2::next_2x2_right#3
(byte*) font_2x2::next_2x2_right#4
(byte*) font_2x2::next_2x2_right#5
(byte*) font_2x2::next_2x2_right#6
(byte*) font_2x2::next_2x2_right#7
(byte*) font_2x2::next_2x2_right#8
(byte*) font_2x2::next_original
(byte*) font_2x2::next_original#0
(byte*) font_2x2::next_original#1
(byte*) font_2x2::next_original#10
(byte*) font_2x2::next_original#11
(byte*) font_2x2::next_original#2
(byte*) font_2x2::next_original#3
(byte*) font_2x2::next_original#4
(byte*) font_2x2::next_original#5
(byte*) font_2x2::next_original#6
(byte*) font_2x2::next_original#7
(byte*) font_2x2::next_original#8
(byte*) font_2x2::next_original#9
(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
(byte~) font_compress::$0
(bool~) font_compress::$1
(bool~) font_compress::$2
(bool~) font_compress::$3
(bool~) font_compress::$4
(label) font_compress::@1
(label) font_compress::@2
(label) font_compress::@3
(label) font_compress::@4
(label) font_compress::@5
(label) font_compress::@6
(label) font_compress::@7
(label) font_compress::@return
(byte*) font_compress::compress_mapping
(byte*) font_compress::compress_mapping#0
(byte*) font_compress::compress_mapping#1
(byte*) font_compress::compress_mapping#2
(byte*) font_compress::compress_mapping#3
(byte*) font_compress::compress_mapping#4
(byte*) font_compress::compress_mapping#5
(byte*) font_compress::compress_mapping#6
(byte*) font_compress::compress_mapping#7
(byte*) font_compress::font_compressed
(byte*) font_compress::font_compressed#0
(byte*) font_compress::font_compressed#1
(byte*) font_compress::font_compressed#2
(byte*) font_compress::font_compressed#3
(byte*) font_compress::font_compressed#4
(byte*) font_compress::font_compressed#5
(byte*) font_compress::font_compressed#6
(byte*) font_compress::font_compressed#7
(byte*) font_compress::font_original
(byte*) font_compress::font_original#0
(byte*) font_compress::font_original#1
(byte) font_compress::font_size
(byte) font_compress::font_size#0
(byte) font_compress::font_size#1
(byte) font_compress::font_size#2
(byte) font_compress::font_size#3
(byte) font_compress::font_size#4
(byte) font_compress::font_size#5
(byte) font_compress::font_size#6
(byte) font_compress::font_size#7
(byte) font_compress::font_size#8
(byte) font_compress::found
(byte) font_compress::found#0
(byte) font_compress::found#1
(byte) font_compress::found#2
(byte) font_compress::i
(byte) font_compress::i#0
(byte) font_compress::i#1
(byte) font_compress::i#2
(byte) font_compress::i#3
(byte) font_compress::i#4
(byte) font_compress::i#5
(byte) font_compress::i#6
(byte) font_compress::i#7
(byte) font_compress::l
(byte) font_compress::l#0
(byte) font_compress::l#1
(byte) font_compress::l#2
(byte*) font_compress::next_compressed
(byte*) font_compress::next_compressed#0
(byte*) font_compress::next_compressed#1
(byte*) font_compress::next_compressed#2
(byte*) font_compress::next_compressed#3
(byte*) font_compress::next_compressed#4
(byte*) font_compress::next_compressed#5
(byte*) font_compress::next_compressed#6
(byte*) font_compress::next_compressed#7
(byte*) font_compress::next_original
(byte*) font_compress::next_original#0
(byte*) font_compress::next_original#1
(byte*) font_compress::next_original#2
(byte*) font_compress::next_original#3
(byte*) font_compress::next_original#4
(byte*) font_compress::next_original#5
(byte*) font_compress::next_original#6
(byte*) font_compress::next_original#7
(byte) font_compress::return
(byte) font_compress::return#0
(byte) font_compress::return#1
(byte) font_compress::return#2
(byte) font_compress::return#3
(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
(bool~) font_find::$0
(bool~) font_find::$1
(bool~) font_find::$2
(bool~) font_find::$3
(bool~) font_find::$4
(bool~) font_find::$5
(label) font_find::@1
(label) font_find::@2
(label) font_find::@3
(label) font_find::@4
(label) font_find::@5
(label) font_find::@6
(label) font_find::@7
(label) font_find::@8
(label) font_find::@9
(label) font_find::@return
(byte*) font_find::font
(byte*) font_find::font#0
(byte*) font_find::font#1
(byte*) font_find::font#2
(byte*) font_find::font#3
(byte*) font_find::font#4
(byte*) font_find::font#5
(byte*) font_find::font#6
(byte*) font_find::font#7
(byte*) font_find::font#8
(byte*) font_find::font#9
(byte) font_find::font_size
(byte) font_find::font_size#0
(byte) font_find::font_size#1
(byte) font_find::font_size#2
(byte) font_find::font_size#3
(byte) font_find::font_size#4
(byte) font_find::font_size#5
(byte) font_find::font_size#6
(byte) font_find::font_size#7
(byte) font_find::font_size#8
(byte) font_find::found
(byte) font_find::found#0
(byte) font_find::found#1
(byte) font_find::found#2
(byte) font_find::found#3
(byte) font_find::found#4
(byte*) font_find::glyph
(byte*) font_find::glyph#0
(byte*) font_find::glyph#1
(byte*) font_find::glyph#2
(byte*) font_find::glyph#3
(byte*) font_find::glyph#4
(byte*) font_find::glyph#5
(byte*) font_find::glyph#6
(byte*) font_find::glyph#7
(byte*) font_find::glyph#8
(byte) font_find::i
(byte) font_find::i#0
(byte) font_find::i#1
(byte) font_find::i#2
(byte) font_find::i#3
(byte) font_find::i#4
(byte) font_find::i#5
(byte) font_find::i#6
(byte) font_find::i#7
(byte) font_find::i#8
(byte) font_find::i#9
(byte) font_find::l
(byte) font_find::l#0
(byte) font_find::l#1
(byte) font_find::l#2
(byte) font_find::l#3
(byte) font_find::return
(byte) font_find::return#0
(byte) font_find::return#1
(byte) font_find::return#2
(byte) font_find::return#3
(byte) font_find::return#4
(byte) font_find::return#5
(void()) main()
(byte~) main::$2
(bool~) main::$5
(bool~) main::$6
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c#4
(byte) main::c#5
(label) main::toD0181
(number~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(byte~) main::toD0181_$3
(number~) main::toD0181_$4
(number~) main::toD0181_$5
(number~) main::toD0181_$6
(word~) main::toD0181_$7
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y#5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
(number~) show::$0
(byte*~) show::$1
(number~) show::$2
(byte*~) show::$3
(number~) show::$4
(number~) show::$5
(number~) show::$6
(word~) show::$7
(label) show::@return
(byte) show::c
(byte) show::c#0
(byte) show::c#1
(byte*) show::font_mapping
(byte*) show::font_mapping#0
(byte*) show::font_mapping#1
(byte*) show::ptr
(byte*) show::ptr#0
(byte) show::x
(byte) show::x#0
(byte) show::x#1
(byte) show::y
(byte) show::y#0
(byte) show::y#1

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$1 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$2 in (number~) main::toD0181_$2 ← > (unumber~) main::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$5 in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$6 in (number~) main::toD0181_$6 ← (unumber~) main::toD0181_$2 | (unumber~) main::toD0181_$5
Adding number conversion cast (unumber) $400 in (word) memset::num#0 ← (number) $400
Adding number conversion cast (unumber) $3e7 in *((const nomodify byte*) SCREEN+(number) $3e7) ← ++ *((const nomodify byte*) SCREEN+(number) $3e7)
Adding number conversion cast (unumber) $50 in (number~) show::$0 ← (word~) show::$7 * (number) $50
Adding number conversion cast (unumber) show::$0 in (number~) show::$0 ← (word~) show::$7 * (unumber)(number) $50
Adding number conversion cast (unumber) 2 in (number~) show::$2 ← (byte) show::x#1 * (number) 2
Adding number conversion cast (unumber) show::$2 in (number~) show::$2 ← (byte) show::x#1 * (unumber)(number) 2
Adding number conversion cast (unumber) 0 in *((byte*) show::ptr#0 + (number) 0) ← *((byte*) show::font_mapping#1 + (byte) show::c#1)
Adding number conversion cast (unumber) $40 in (number~) show::$4 ← (byte) show::c#1 + (number) $40
Adding number conversion cast (unumber) show::$4 in (number~) show::$4 ← (byte) show::c#1 + (unumber)(number) $40
Adding number conversion cast (unumber) 1 in *((byte*) show::ptr#0 + (number) 1) ← *((byte*) show::font_mapping#1 + (unumber~) show::$4)
Adding number conversion cast (unumber) $80 in (number~) show::$5 ← (byte) show::c#1 + (number) $80
Adding number conversion cast (unumber) show::$5 in (number~) show::$5 ← (byte) show::c#1 + (unumber)(number) $80
Adding number conversion cast (unumber) $28 in *((byte*) show::ptr#0 + (number) $28) ← *((byte*) show::font_mapping#1 + (unumber~) show::$5)
Adding number conversion cast (unumber) $c0 in (number~) show::$6 ← (byte) show::c#1 + (number) $c0
Adding number conversion cast (unumber) show::$6 in (number~) show::$6 ← (byte) show::c#1 + (unumber)(number) $c0
Adding number conversion cast (unumber) $29 in *((byte*) show::ptr#0 + (number) $29) ← *((byte*) show::font_mapping#1 + (unumber~) show::$6)
Adding number conversion cast (unumber) $40*8 in (byte*~) font_2x2::$0 ← (byte*) font_2x2::next_2x2#2 + (number) $40*(number) 8
Adding number conversion cast (unumber) $80 in (number~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (number) $80
Adding number conversion cast (unumber) font_2x2::$1 in (number~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) font_2x2::$22 ← (number) 0 != (unumber~) font_2x2::$1
Adding number conversion cast (unumber) 1 in (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (number) 1
Adding number conversion cast (unumber) 1 in (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) font_2x2::$11 ← (byte) font_2x2::l2#3 + (number) 1
Adding number conversion cast (unumber) font_2x2::$11 in (number~) font_2x2::$11 ← (byte) font_2x2::l2#3 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) font_2x2::$14 ← (byte) font_2x2::l2#3 + (number) 1
Adding number conversion cast (unumber) font_2x2::$14 in (number~) font_2x2::$14 ← (byte) font_2x2::l2#3 + (unumber)(number) 1
Adding number conversion cast (unumber) 2 in (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#3 + (number) 2
Adding number conversion cast (unumber) 8 in (bool~) font_2x2::$16 ← (byte) font_2x2::l2#1 == (number) 8
Adding number conversion cast (unumber) $80*8 in (byte*~) font_2x2::$18 ← (byte*) font_2x2::next_2x2#3 + (number) $80*(number) 8
Adding number conversion cast (unumber) $c0*8 in (byte*~) font_2x2::$19 ← (byte*) font_2x2::next_2x2#3 + (number) $c0*(number) 8
Adding number conversion cast (unumber) 0 in (byte) font_2x2::l2#2 ← (number) 0
Adding number conversion cast (unumber) 8 in (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2#4 + (number) 8
Adding number conversion cast (unumber) 8 in (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#3 + (number) 8
Adding number conversion cast (unumber) $ff in (bool~) font_compress::$1 ← (byte) font_compress::found#0 == (number) $ff
Adding number conversion cast (unumber) 8 in (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#3 + (number) 8
Adding number conversion cast (unumber) 8 in (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#3 + (number) 8
Adding number conversion cast (unumber) $ff in (byte) font_find::return#1 ← (number) $ff
Adding number conversion cast (unumber) 0 in (byte) font_find::found#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) font_find::$5 ← (number) 0 != (byte) font_find::found#2
Adding number conversion cast (unumber) 8 in (byte*) font_find::font#1 ← (byte*) font_find::font#3 + (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $400
Inlining cast (byte) font_2x2::l2#2 ← (unumber)(number) 0
Inlining cast (byte) font_find::return#1 ← (unumber)(number) $ff
Inlining cast (byte) font_find::found#1 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 10240
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $400
Simplifying constant integer cast $3e7
Simplifying constant integer cast $50
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast $28
Simplifying constant integer cast $c0
Simplifying constant integer cast $29
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $400
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $29
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$1 ← (word~) main::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$2 ← > (word~) main::toD0181_$1
Inferred type updated to byte in (unumber~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$5 ← (byte~) main::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$6 ← (byte~) main::toD0181_$2 | (byte~) main::toD0181_$5
Inferred type updated to word in (unumber~) show::$0 ← (word~) show::$7 * (byte) $50
Inferred type updated to byte in (unumber~) show::$2 ← (byte) show::x#1 * (byte) 2
Inferred type updated to byte in (unumber~) show::$4 ← (byte) show::c#1 + (byte) $40
Inferred type updated to byte in (unumber~) show::$5 ← (byte) show::c#1 + (byte) $80
Inferred type updated to byte in (unumber~) show::$6 ← (byte) show::c#1 + (byte) $c0
Inferred type updated to byte in (unumber~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80
Inferred type updated to byte in (unumber~) font_2x2::$11 ← (byte) font_2x2::l2#3 + (byte) 1
Inferred type updated to byte in (unumber~) font_2x2::$14 ← (byte) font_2x2::l2#3 + (byte) 1
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [138] (bool~) font_2x2::$17 ← (byte) font_2x2::l2#1 != (byte) 8 from [137] (bool~) font_2x2::$16 ← (byte) font_2x2::l2#1 == (byte) 8
Inversing boolean not [172] (bool~) font_compress::$2 ← (byte) font_compress::found#0 != (byte) $ff from [171] (bool~) font_compress::$1 ← (byte) font_compress::found#0 == (byte) $ff
Inversing boolean not [207] (bool~) font_find::$2 ← *((byte*) font_find::glyph#1 + (byte) font_find::l#2) == *((byte*) font_find::font#2 + (byte) font_find::l#2) from [206] (bool~) font_find::$1 ← *((byte*) font_find::glyph#1 + (byte) font_find::l#2) != *((byte*) font_find::font#2 + (byte) font_find::l#2)
Inversing boolean not [217] (bool~) font_find::$4 ← (byte) 0 == (byte) font_find::found#2 from [216] (bool~) font_find::$5 ← (byte) 0 != (byte) font_find::found#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$2 
Alias main::c#2 = main::c#3 
Alias main::x#2 = main::x#3 
Alias main::y#2 = main::y#5 main::y#3 
Alias main::c#1 = main::c#5 
Alias show::ptr#0 = show::$3 
Alias font_2x2::next_original#0 = font_2x2::font_original#1 
Alias font_2x2::next_2x2#0 = font_2x2::font_2x2#1 
Alias font_2x2::next_2x2_left#0 = font_2x2::next_2x2#2 
Alias font_2x2::next_2x2_right#0 = font_2x2::$0 
Alias font_2x2::glyph_bits_2x2#5 = font_2x2::glyph_bits_2x2#7 font_2x2::glyph_bits_2x2#6 
Alias font_2x2::glyph_bits#2 = font_2x2::glyph_bits#4 font_2x2::glyph_bits#5 
Alias font_2x2::b#3 = font_2x2::b#5 font_2x2::b#4 
Alias font_2x2::next_2x2_left#4 = font_2x2::next_2x2_left#6 font_2x2::next_2x2_left#5 
Alias font_2x2::l2#5 = font_2x2::l2#7 font_2x2::l2#6 
Alias font_2x2::next_2x2_right#4 = font_2x2::next_2x2_right#6 font_2x2::next_2x2_right#5 
Alias font_2x2::l#7 = font_2x2::l#9 font_2x2::l#8 
Alias font_2x2::next_2x2#10 = font_2x2::next_2x2#8 font_2x2::next_2x2#9 
Alias font_2x2::next_original#10 = font_2x2::next_original#9 font_2x2::next_original#11 
Alias font_2x2::c#7 = font_2x2::c#9 font_2x2::c#8 
Alias font_2x2::glyph_bit#0 = font_2x2::$4 
Alias font_2x2::glyph_bits_2x2#1 = font_2x2::$6 
Alias font_2x2::glyph_bits_2x2#2 = font_2x2::$8 font_2x2::glyph_bits_2x2#4 
Alias font_2x2::next_2x2_left#2 = font_2x2::next_2x2_left#3 
Alias font_2x2::l2#3 = font_2x2::l2#4 
Alias font_2x2::next_2x2_right#2 = font_2x2::next_2x2_right#3 
Alias font_2x2::l#4 = font_2x2::l#6 font_2x2::l#5 
Alias font_2x2::next_2x2#3 = font_2x2::next_2x2#5 font_2x2::next_2x2#7 
Alias font_2x2::next_original#6 = font_2x2::next_original#8 font_2x2::next_original#7 
Alias font_2x2::c#4 = font_2x2::c#6 font_2x2::c#5 
Alias font_2x2::next_2x2_left#1 = font_2x2::$18 
Alias font_2x2::next_2x2_right#1 = font_2x2::$19 
Alias font_2x2::next_2x2#4 = font_2x2::next_2x2#6 
Alias font_2x2::next_original#3 = font_2x2::next_original#5 
Alias font_2x2::c#2 = font_2x2::c#3 
Alias font_compress::next_original#0 = font_compress::font_original#1 
Alias font_compress::next_compressed#0 = font_compress::font_compressed#1 
Alias font_find::return#0 = font_find::return#4 
Alias font_compress::compress_mapping#3 = font_compress::compress_mapping#4 font_compress::compress_mapping#7 
Alias font_compress::i#4 = font_compress::i#5 font_compress::i#7 
Alias font_compress::next_original#2 = font_compress::next_original#6 font_compress::next_original#7 
Alias font_compress::font_compressed#2 = font_compress::font_compressed#5 font_compress::font_compressed#7 
Alias font_compress::font_size#2 = font_compress::font_size#7 font_compress::font_size#8 
Alias font_compress::next_compressed#4 = font_compress::next_compressed#5 font_compress::next_compressed#6 
Alias font_compress::found#0 = font_compress::$0 
Alias font_compress::next_compressed#2 = font_compress::next_compressed#3 
Alias font_compress::font_size#3 = font_compress::font_size#6 font_compress::found#1 
Alias font_compress::compress_mapping#2 = font_compress::compress_mapping#5 
Alias font_compress::i#3 = font_compress::i#6 
Alias font_compress::next_original#4 = font_compress::next_original#5 
Alias font_compress::font_compressed#4 = font_compress::font_compressed#6 
Alias font_compress::return#1 = font_compress::font_size#4 font_compress::font_size#5 font_compress::return#3 font_compress::return#2 
Alias font_find::glyph#2 = font_find::glyph#4 
Alias font_find::font#4 = font_find::font#7 
Alias font_find::i#2 = font_find::i#9 
Alias font_find::font_size#1 = font_find::font_size#8 
Alias font_find::l#2 = font_find::l#3 
Alias font_find::glyph#1 = font_find::glyph#3 font_find::glyph#8 
Alias font_find::font#2 = font_find::font#5 font_find::font#8 
Alias font_find::found#3 = font_find::found#4 
Alias font_find::i#6 = font_find::i#8 font_find::i#7 
Alias font_find::font_size#5 = font_find::font_size#7 font_find::font_size#6 
Alias font_find::font#3 = font_find::font#6 
Alias font_find::i#3 = font_find::i#5 font_find::i#4 font_find::return#2 
Alias font_find::font_size#3 = font_find::font_size#4 
Alias font_find::glyph#6 = font_find::glyph#7 
Alias font_find::return#3 = font_find::return#5 
Successful SSA optimization Pass2AliasElimination
Alias font_2x2::glyph_bits_2x2#3 = font_2x2::glyph_bits_2x2#5 
Alias font_2x2::glyph_bits#2 = font_2x2::glyph_bits#3 
Alias font_2x2::b#2 = font_2x2::b#3 
Alias font_2x2::next_2x2_left#2 = font_2x2::next_2x2_left#4 
Alias font_2x2::l2#3 = font_2x2::l2#5 
Alias font_2x2::next_2x2_right#2 = font_2x2::next_2x2_right#4 
Alias font_2x2::l#3 = font_2x2::l#4 font_2x2::l#7 
Alias font_2x2::next_2x2#10 = font_2x2::next_2x2#3 font_2x2::next_2x2#4 
Alias font_2x2::next_original#10 = font_2x2::next_original#6 font_2x2::next_original#3 
Alias font_2x2::c#2 = font_2x2::c#4 font_2x2::c#7 
Alias font_find::font#2 = font_find::font#3 
Alias font_find::i#3 = font_find::i#6 
Alias font_find::font_size#3 = font_find::font_size#5 
Alias font_find::glyph#1 = font_find::glyph#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte) main::y#2 (byte) main::y#4
Identical Phi Values (byte) show::y#1 (byte) show::y#0
Identical Phi Values (byte) show::x#1 (byte) show::x#0
Identical Phi Values (byte*) show::font_mapping#1 (byte*) show::font_mapping#0
Identical Phi Values (byte) show::c#1 (byte) show::c#0
Identical Phi Values (byte*) font_2x2::next_original#0 (byte*) font_2x2::font_original#0
Identical Phi Values (byte*) font_2x2::next_2x2#0 (byte*) font_2x2::font_2x2#0
Identical Phi Values (byte*) font_2x2::next_2x2_left#2 (byte*) font_2x2::next_2x2_left#7
Identical Phi Values (byte) font_2x2::l2#3 (byte) font_2x2::l2#8
Identical Phi Values (byte*) font_2x2::next_2x2_right#2 (byte*) font_2x2::next_2x2_right#7
Identical Phi Values (byte) font_2x2::l#3 (byte) font_2x2::l#2
Identical Phi Values (byte*) font_2x2::next_2x2#10 (byte*) font_2x2::next_2x2#11
Identical Phi Values (byte*) font_2x2::next_original#10 (byte*) font_2x2::next_original#2
Identical Phi Values (byte) font_2x2::c#2 (byte) font_2x2::c#10
Identical Phi Values (byte*) font_compress::next_original#0 (byte*) font_compress::font_original#0
Identical Phi Values (byte*) font_compress::next_compressed#0 (byte*) font_compress::font_compressed#0
Identical Phi Values (byte*) font_compress::compress_mapping#6 (byte*) font_compress::compress_mapping#0
Identical Phi Values (byte*) font_compress::next_original#4 (byte*) font_compress::next_original#2
Identical Phi Values (byte*) font_compress::next_compressed#2 (byte*) font_compress::next_compressed#4
Identical Phi Values (byte) font_compress::font_size#3 (byte) font_compress::font_size#2
Identical Phi Values (byte*) font_compress::compress_mapping#2 (byte*) font_compress::compress_mapping#3
Identical Phi Values (byte) font_compress::i#3 (byte) font_compress::i#4
Identical Phi Values (byte*) font_compress::font_compressed#4 (byte*) font_compress::font_compressed#2
Identical Phi Values (byte) font_find::font_size#2 (byte) font_find::font_size#0
Identical Phi Values (byte*) font_find::glyph#5 (byte*) font_find::glyph#0
Identical Phi Values (byte*) font_find::font#9 (byte*) font_find::font#0
Identical Phi Values (byte*) font_find::glyph#1 (byte*) font_find::glyph#2
Identical Phi Values (byte*) font_find::font#2 (byte*) font_find::font#4
Identical Phi Values (byte) font_find::found#3 (byte) font_find::found#0
Identical Phi Values (byte) font_find::i#3 (byte) font_find::i#2
Identical Phi Values (byte) font_find::font_size#3 (byte) font_find::font_size#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) font_2x2::next_original#2 (byte*) font_2x2::next_original#4
Identical Phi Values (byte*) font_2x2::next_2x2#11 (byte*) font_2x2::next_2x2_left#0
Identical Phi Values (byte) font_2x2::c#10 (byte) font_2x2::c#11
Identical Phi Values (byte*) font_compress::compress_mapping#1 (byte*) font_compress::compress_mapping#3
Identical Phi Values (byte) font_compress::i#2 (byte) font_compress::i#4
Identical Phi Values (byte*) font_compress::next_original#3 (byte*) font_compress::next_original#2
Identical Phi Values (byte*) font_compress::font_compressed#3 (byte*) font_compress::font_compressed#2
Identical Phi Values (byte) font_find::font_size#1 (byte) font_find::font_size#0
Identical Phi Values (byte*) font_find::glyph#2 (byte*) font_find::glyph#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) font_compress::font_compressed#2 (byte*) font_compress::font_compressed#0
Identical Phi Values (byte*) font_compress::compress_mapping#3 (byte*) font_compress::compress_mapping#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [129] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2
Identified duplicate assignment right side [134] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) main::$5 [54] if((byte) main::x#1!=rangelast(0,7)) goto main::@2
Simple Condition (bool~) main::$6 [57] if((byte) main::y#1!=rangelast(0,7)) goto main::@1
Simple Condition (bool~) font_2x2::$22 [88] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4
Simple Condition (bool~) font_2x2::$9 [99] if((byte) font_2x2::b#1!=rangelast(0,7)) goto font_2x2::@3
Simple Condition (bool~) font_2x2::$17 [112] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@9
Simple Condition (bool~) font_2x2::$20 [116] if((byte) font_2x2::l#1!=rangelast(0,7)) goto font_2x2::@2
Simple Condition (bool~) font_2x2::$21 [124] if((byte) font_2x2::c#1!=rangelast(0,$3f)) goto font_2x2::@1
Simple Condition (bool~) font_compress::$2 [137] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@2
Simple Condition (bool~) font_compress::$4 [143] if((byte) font_compress::i#1!=rangelast(0,$ff)) goto font_compress::@1
Simple Condition (bool~) font_compress::$3 [149] if((byte) font_compress::l#1!=rangelast(0,7)) goto font_compress::@3
Simple Condition (bool~) font_find::$0 [157] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2
Simple Condition (bool~) font_find::$2 [163] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@5
Simple Condition (bool~) font_find::$3 [166] if((byte) font_find::l#1!=rangelast(0,7)) goto font_find::@4
Simple Condition (bool~) font_find::$4 [170] if((byte) 0==(byte) font_find::found#2) goto font_find::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) font_2x2::font_original#0 = CHARGEN
Constant (const byte*) font_2x2::font_2x2#0 = FONT_ORIGINAL
Constant (const byte*) font_compress::font_original#0 = FONT_ORIGINAL
Constant (const byte*) font_compress::font_compressed#0 = FONT_COMPRESSED
Constant (const byte*) font_compress::compress_mapping#0 = FONT_COMPRESSED_MAP
Constant (const byte*) main::toD0181_screen#0 = SCREEN
Constant (const byte*) main::toD0181_gfx#0 = FONT_COMPRESSED
Constant (const void*) memset::str#0 = (void*)SCREEN
Constant (const word) memset::num#0 = $400
Constant (const byte) main::c#0 = 0
Constant (const byte) main::y#0 = 0
Constant (const byte) main::x#0 = 0
Constant (const byte*) show::font_mapping#0 = FONT_COMPRESSED_MAP
Constant (const byte) font_2x2::c#0 = 0
Constant (const byte) font_2x2::l2#0 = 0
Constant (const byte) font_2x2::l#0 = 0
Constant (const word) font_2x2::glyph_bits_2x2#0 = 0
Constant (const byte) font_2x2::b#0 = 0
Constant (const byte) font_2x2::$3 = 1
Constant (const byte) font_2x2::$2 = 0
Constant (const byte) font_2x2::l2#2 = 0
Constant (const byte) font_compress::font_size#0 = 0
Constant (const byte) font_compress::i#0 = 0
Constant (const byte) font_compress::l#0 = 0
Constant (const byte) font_find::i#0 = 0
Constant (const byte) font_find::found#0 = 1
Constant (const byte) font_find::l#0 = 0
Constant (const byte) font_find::return#1 = $ff
Constant (const byte) font_find::found#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const word) main::toD0181_$7 = (word)main::toD0181_screen#0
Constant (const void*) memset::return#2 = memset::str#0
Constant (const byte*) font_find::font#0 = font_compress::font_compressed#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [31] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [58] if(true) goto main::@5
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [52] main::x#1 ← ++ main::x#2 to ++
Resolved ranged comparison value [54] if(main::x#1!=rangelast(0,7)) goto main::@2 to (number) 8
Resolved ranged next value [55] main::y#1 ← ++ main::y#4 to ++
Resolved ranged comparison value [57] if(main::y#1!=rangelast(0,7)) goto main::@1 to (number) 8
Resolved ranged next value [97] font_2x2::b#1 ← ++ font_2x2::b#2 to ++
Resolved ranged comparison value [99] if(font_2x2::b#1!=rangelast(0,7)) goto font_2x2::@3 to (number) 8
Resolved ranged next value [114] font_2x2::l#1 ← ++ font_2x2::l#2 to ++
Resolved ranged comparison value [116] if(font_2x2::l#1!=rangelast(0,7)) goto font_2x2::@2 to (number) 8
Resolved ranged next value [122] font_2x2::c#1 ← ++ font_2x2::c#11 to ++
Resolved ranged comparison value [124] if(font_2x2::c#1!=rangelast(0,$3f)) goto font_2x2::@1 to (number) $40
Resolved ranged next value [141] font_compress::i#1 ← ++ font_compress::i#4 to ++
Resolved ranged comparison value [143] if(font_compress::i#1!=rangelast(0,$ff)) goto font_compress::@1 to (number) 0
Resolved ranged next value [147] font_compress::l#1 ← ++ font_compress::l#2 to ++
Resolved ranged comparison value [149] if(font_compress::l#1!=rangelast(0,7)) goto font_compress::@3 to (number) 8
Resolved ranged next value [164] font_find::l#1 ← ++ font_find::l#2 to ++
Resolved ranged comparison value [166] if(font_find::l#1!=rangelast(0,7)) goto font_find::@4 to (number) 8
Simplifying expression containing zero show::ptr#0 in [67] *((byte*) show::ptr#0 + (byte) 0) ← *((const byte*) show::font_mapping#0 + (byte) show::c#0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) font_compress::return#0 and assignment [12] (byte) font_compress::return#0 ← (byte) font_compress::return#1
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) main::x#1!=(number) 8) goto main::@2
Adding number conversion cast (unumber) 8 in if((byte) main::y#1!=(number) 8) goto main::@1
Adding number conversion cast (unumber) 8 in if((byte) font_2x2::b#1!=(number) 8) goto font_2x2::@3
Adding number conversion cast (unumber) 8 in if((byte) font_2x2::l#1!=(number) 8) goto font_2x2::@2
Adding number conversion cast (unumber) $40 in if((byte) font_2x2::c#1!=(number) $40) goto font_2x2::@1
Adding number conversion cast (unumber) 0 in if((byte) font_compress::i#1!=(number) 0) goto font_compress::@1
Adding number conversion cast (unumber) 8 in if((byte) font_compress::l#1!=(number) 8) goto font_compress::@3
Adding number conversion cast (unumber) 8 in if((byte) font_find::l#1!=(number) 8) goto font_find::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias font_2x2::$12 = font_2x2::$10 
Alias font_2x2::$15 = font_2x2::$13 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Constant right-side identified [12] (word~) main::toD0181_$0 ← (const word) main::toD0181_$7 & (word) $3fff
Constant right-side identified [15] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Constant (const word) main::toD0181_$0 = main::toD0181_$7&$3fff
Constant (const byte) main::toD0181_$3 = >(word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (word~) main::toD0181_$1 ← (const word) main::toD0181_$0 * (byte) 4
Constant right-side identified [13] (byte~) main::toD0181_$4 ← (const byte) main::toD0181_$3 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::toD0181_$1 = main::toD0181_$0*4
Constant (const byte) main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte~) main::toD0181_$2 ← > (const word) main::toD0181_$1
Constant right-side identified [12] (byte~) main::toD0181_$5 ← (const byte) main::toD0181_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_$2 = >main::toD0181_$1
Constant (const byte) main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$2 | (const byte) main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift and addition[27] (word~) show::$0 ← (word~) show::$7 * (byte) $50
Rewriting multiplication to use shift [29] (byte~) show::$2 ← (byte) show::x#0 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) font_2x2::c#0
Inlining constant with var siblings (const byte) font_2x2::l2#0
Inlining constant with var siblings (const byte) font_2x2::l#0
Inlining constant with var siblings (const word) font_2x2::glyph_bits_2x2#0
Inlining constant with var siblings (const byte) font_2x2::b#0
Inlining constant with var siblings (const byte) font_2x2::l2#2
Inlining constant with var siblings (const byte) font_compress::font_size#0
Inlining constant with var siblings (const byte) font_compress::i#0
Inlining constant with var siblings (const byte) font_compress::l#0
Inlining constant with var siblings (const byte) font_find::i#0
Inlining constant with var siblings (const byte) font_find::found#0
Inlining constant with var siblings (const byte) font_find::l#0
Inlining constant with var siblings (const byte) font_find::return#1
Inlining constant with var siblings (const byte) font_find::found#1
Inlining constant with var siblings (const byte*) font_find::font#0
Constant inlined main::toD0181_screen#0 = (const nomodify byte*) SCREEN
Constant inlined main::toD0181_gfx#0 = (const nomodify byte*) FONT_COMPRESSED
Constant inlined font_find::return#1 = (byte) $ff
Constant inlined font_compress::compress_mapping#0 = (const byte*) FONT_COMPRESSED_MAP
Constant inlined font_2x2::glyph_bits_2x2#0 = (word) 0
Constant inlined font_2x2::l2#0 = (byte) 0
Constant inlined font_2x2::font_2x2#0 = (const nomodify byte*) FONT_ORIGINAL
Constant inlined main::c#0 = (byte) 0
Constant inlined font_2x2::l2#2 = (byte) 0
Constant inlined font_compress::font_compressed#0 = (const nomodify byte*) FONT_COMPRESSED
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined show::font_mapping#0 = (const byte*) FONT_COMPRESSED_MAP
Constant inlined font_find::font#0 = (const nomodify byte*) FONT_COMPRESSED
Constant inlined font_2x2::$2 = (byte) 0
Constant inlined font_2x2::$3 = (byte) 1
Constant inlined font_2x2::b#0 = (byte) 0
Constant inlined font_find::found#0 = (byte) 1
Constant inlined main::toD0181_$7 = (word)(const nomodify byte*) SCREEN
Constant inlined font_find::found#1 = (byte) 0
Constant inlined font_2x2::c#0 = (byte) 0
Constant inlined main::toD0181_$2 = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$1 = (word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined font_find::i#0 = (byte) 0
Constant inlined main::toD0181_$0 = (word)(const nomodify byte*) SCREEN&(word) $3fff
Constant inlined main::x#0 = (byte) 0
Constant inlined font_compress::font_size#0 = (byte) 0
Constant inlined main::y#0 = (byte) 0
Constant inlined main::toD0181_$5 = >(word)(const nomodify byte*) FONT_COMPRESSED/(byte) 4&(byte) $f
Constant inlined font_compress::i#0 = (byte) 0
Constant inlined main::toD0181_$4 = >(word)(const nomodify byte*) FONT_COMPRESSED/(byte) 4
Constant inlined font_compress::l#0 = (byte) 0
Constant inlined main::toD0181_$3 = >(word)(const nomodify byte*) FONT_COMPRESSED
Constant inlined font_2x2::l#0 = (byte) 0
Constant inlined font_find::l#0 = (byte) 0
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined font_compress::font_original#0 = (const nomodify byte*) FONT_ORIGINAL
Constant inlined font_2x2::font_original#0 = (const nomodify byte*) CHARGEN
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(FONT_COMPRESSED_MAP+' ')
Consolidated array index constant in assignment *(FONT_COMPRESSED_MAP+$40 + show::$4)
Consolidated array index constant in assignment *(FONT_COMPRESSED_MAP+$80 + show::$5)
Consolidated array index constant in assignment *(FONT_COMPRESSED_MAP+$c0 + show::$6)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias show::$0 = show::$10 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@11(between main::@3 and main::@1)
Added new block during phi lifting main::@12(between main::@10 and main::@2)
Added new block during phi lifting font_2x2::@11(between font_2x2::@10 and font_2x2::@1)
Added new block during phi lifting font_2x2::@12(between font_2x2::@9 and font_2x2::@2)
Added new block during phi lifting font_2x2::@13(between font_2x2::@6 and font_2x2::@3)
Added new block during phi lifting font_2x2::@14(between font_2x2::@7 and font_2x2::@9)
Added new block during phi lifting font_compress::@8(between font_compress::@2 and font_compress::@1)
Added new block during phi lifting font_compress::@9(between font_compress::@7 and font_compress::@2)
Added new block during phi lifting font_compress::@10(between font_compress::@3 and font_compress::@3)
Added new block during phi lifting font_find::@10(between font_find::@5 and font_find::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of font_compress
Adding NOP phi() at start of font_compress::@5
Adding NOP phi() at start of font_compress::@6
Adding NOP phi() at start of font_find
Adding NOP phi() at start of font_find::@3
Adding NOP phi() at start of font_find::@2
Adding NOP phi() at start of font_find::@7
Adding NOP phi() at start of font_2x2
Adding NOP phi() at start of font_2x2::@5
Adding NOP phi() at start of font_2x2::@4
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to font_2x2:7 font_compress:10 memset:16 show:24 
Calls in [font_compress] to font_find:64 

Created 32 initial phi equivalence classes
Coalesced [19] main::c#7 ← main::c#4
Coalesced [32] main::c#6 ← main::c#1
Coalesced [33] main::y#6 ← main::y#1
Coalesced (already) [34] main::c#8 ← main::c#1
Coalesced [35] main::x#4 ← main::x#1
Coalesced [59] memset::dst#4 ← memset::dst#1
Not coalescing [75] font_compress::found#3 ← font_compress::font_size#2
Coalesced [76] font_compress::return#4 ← font_compress::font_size#1
Coalesced [77] font_compress::next_compressed#9 ← font_compress::next_compressed#1
Coalesced [85] font_compress::next_original#8 ← font_compress::next_original#1
Not coalescing [86] font_compress::font_size#9 ← font_compress::return#1
Coalesced [87] font_compress::i#8 ← font_compress::i#1
Coalesced [88] font_compress::next_compressed#8 ← font_compress::next_compressed#7
Coalesced [89] font_compress::l#3 ← font_compress::l#1
Coalesced [90] font_compress::found#4 ← font_compress::found#0
Not coalescing [91] font_compress::return#5 ← font_compress::font_size#2
Coalesced (already) [92] font_compress::next_compressed#10 ← font_compress::next_compressed#4
Coalesced [105] font_find::return#6 ← font_find::i#2
Coalesced [108] font_find::i#10 ← font_find::i#1
Coalesced [109] font_find::font#10 ← font_find::font#1
Coalesced [112] font_find::l#4 ← font_find::l#1
Not coalescing [116] font_2x2::next_2x2_left#10 ← font_2x2::next_2x2_left#0
Coalesced [117] font_2x2::next_2x2_right#9 ← font_2x2::next_2x2_right#0
Coalesced [120] font_2x2::glyph_bits#6 ← font_2x2::glyph_bits#0
Coalesced [145] font_2x2::next_2x2_left#13 ← font_2x2::next_2x2_left#1
Coalesced [146] font_2x2::next_2x2_right#12 ← font_2x2::next_2x2_right#1
Coalesced [155] font_2x2::next_2x2_left#9 ← font_2x2::next_2x2#1
Coalesced [156] font_2x2::next_original#12 ← font_2x2::next_original#1
Coalesced [157] font_2x2::c#12 ← font_2x2::c#1
Coalesced [158] font_2x2::l#10 ← font_2x2::l#1
Coalesced [159] font_2x2::next_2x2_left#11 ← font_2x2::next_2x2_left#8
Coalesced [160] font_2x2::l2#10 ← font_2x2::l2#9
Coalesced [161] font_2x2::next_2x2_right#10 ← font_2x2::next_2x2_right#8
Coalesced (already) [162] font_2x2::next_2x2_left#12 ← font_2x2::next_2x2_left#7
Coalesced [163] font_2x2::l2#11 ← font_2x2::l2#1
Coalesced (already) [164] font_2x2::next_2x2_right#11 ← font_2x2::next_2x2_right#7
Coalesced [165] font_2x2::glyph_bits#7 ← font_2x2::glyph_bits#1
Coalesced [166] font_2x2::glyph_bits_2x2#8 ← font_2x2::glyph_bits_2x2#2
Coalesced [167] font_2x2::b#6 ← font_2x2::b#1
Coalesced down to 26 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) font_compress::@5
Culled Empty Block (label) font_compress::@6
Culled Empty Block (label) font_compress::@10
Culled Empty Block (label) font_find::@3
Culled Empty Block (label) font_find::@2
Culled Empty Block (label) font_find::@7
Culled Empty Block (label) font_find::@8
Culled Empty Block (label) font_find::@10
Culled Empty Block (label) font_2x2::@5
Culled Empty Block (label) font_2x2::@11
Culled Empty Block (label) font_2x2::@12
Culled Empty Block (label) font_2x2::@14
Culled Empty Block (label) font_2x2::@13
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@10 to main::@7
Renumbering block font_2x2::@6 to font_2x2::@5
Renumbering block font_2x2::@7 to font_2x2::@6
Renumbering block font_2x2::@8 to font_2x2::@7
Renumbering block font_2x2::@9 to font_2x2::@8
Renumbering block font_2x2::@10 to font_2x2::@9
Renumbering block font_compress::@7 to font_compress::@5
Renumbering block font_compress::@8 to font_compress::@6
Renumbering block font_compress::@9 to font_compress::@7
Renumbering block font_find::@4 to font_find::@2
Renumbering block font_find::@5 to font_find::@3
Renumbering block font_find::@6 to font_find::@4
Renumbering block font_find::@9 to font_find::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of memset
Adding NOP phi() at start of font_compress
Adding NOP phi() at start of font_find
Adding NOP phi() at start of font_2x2
Adding NOP phi() at start of font_2x2::@4

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM
  [6] call font_2x2 
  to:main::@6
main::@6: scope:[main]  from main
  [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO
  asm { cli  }
  [9] call font_compress 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@6
  [10] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [12] (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP+(byte) ' ')
  [13] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [14] (byte) main::y#4 ← phi( main::@3/(byte) main::y#1 main::@5/(byte) 0 )
  [14] (byte) main::c#4 ← phi( main::@3/(byte) main::c#1 main::@5/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [15] (byte) main::x#2 ← phi( main::@1/(byte) 0 main::@7/(byte) main::x#1 )
  [15] (byte) main::c#2 ← phi( main::@1/(byte) main::c#4 main::@7/(byte) main::c#1 )
  [16] (byte) show::c#0 ← (byte) main::c#2
  [17] (byte) show::x#0 ← (byte) main::x#2
  [18] (byte) show::y#0 ← (byte) main::y#4
  [19] call show 
  to:main::@7
main::@7: scope:[main]  from main::@2
  [20] (byte) main::c#1 ← ++ (byte) main::c#2
  [21] (byte) main::x#1 ← ++ (byte) main::x#2
  [22] if((byte) main::x#1!=(byte) 8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@7
  [23] (byte) main::y#1 ← ++ (byte) main::y#4
  [24] if((byte) main::y#1!=(byte) 8) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [25] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7)
  to:main::@4

(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
show: scope:[show]  from main::@2
  [26] (word~) show::$7 ← (word)(byte) show::y#0
  [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2
  [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7
  [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4
  [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0
  [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1
  [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2
  [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0)
  [34] (byte~) show::$4 ← (byte) show::c#0
  [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4)
  [36] (byte~) show::$5 ← (byte) show::c#0
  [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5)
  [38] (byte~) show::$6 ← (byte) show::c#0
  [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6)
  to:show::@return
show::@return: scope:[show]  from show
  [40] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@5
  [41] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [42] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [44] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [45] *((byte*) memset::dst#2) ← (byte) memset::c#0
  [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
font_compress: scope:[font_compress]  from main::@6
  [47] phi()
  to:font_compress::@1
font_compress::@1: scope:[font_compress]  from font_compress font_compress::@6
  [48] (byte*) font_compress::next_compressed#4 ← phi( font_compress/(const nomodify byte*) FONT_COMPRESSED font_compress::@6/(byte*) font_compress::next_compressed#7 )
  [48] (byte) font_compress::i#4 ← phi( font_compress/(byte) 0 font_compress::@6/(byte) font_compress::i#1 )
  [48] (byte) font_compress::font_size#2 ← phi( font_compress/(byte) 0 font_compress::@6/(byte) font_compress::font_size#9 )
  [48] (byte*) font_compress::next_original#2 ← phi( font_compress/(const nomodify byte*) FONT_ORIGINAL font_compress::@6/(byte*) font_compress::next_original#1 )
  [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2
  [50] (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2
  [51] call font_find 
  [52] (byte) font_find::return#0 ← (byte) font_find::return#3
  to:font_compress::@5
font_compress::@5: scope:[font_compress]  from font_compress::@1
  [53] (byte) font_compress::found#0 ← (byte) font_find::return#0
  [54] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@7
  to:font_compress::@3
font_compress::@3: scope:[font_compress]  from font_compress::@3 font_compress::@5
  [55] (byte) font_compress::l#2 ← phi( font_compress::@3/(byte) font_compress::l#1 font_compress::@5/(byte) 0 )
  [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2)
  [57] (byte) font_compress::l#1 ← ++ (byte) font_compress::l#2
  [58] if((byte) font_compress::l#1!=(byte) 8) goto font_compress::@3
  to:font_compress::@4
font_compress::@4: scope:[font_compress]  from font_compress::@3
  [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8
  [60] (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#2
  [61] (byte) font_compress::found#3 ← (byte) font_compress::font_size#2
  to:font_compress::@2
font_compress::@2: scope:[font_compress]  from font_compress::@4 font_compress::@7
  [62] (byte*) font_compress::next_compressed#7 ← phi( font_compress::@4/(byte*) font_compress::next_compressed#1 font_compress::@7/(byte*) font_compress::next_compressed#4 )
  [62] (byte) font_compress::return#1 ← phi( font_compress::@4/(byte) font_compress::font_size#1 font_compress::@7/(byte) font_compress::return#5 )
  [62] (byte) font_compress::found#2 ← phi( font_compress::@4/(byte) font_compress::found#3 font_compress::@7/(byte) font_compress::found#0 )
  [63] *((const byte*) FONT_COMPRESSED_MAP + (byte) font_compress::i#4) ← (byte) font_compress::found#2
  [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8
  [65] (byte) font_compress::i#1 ← ++ (byte) font_compress::i#4
  [66] if((byte) font_compress::i#1!=(byte) 0) goto font_compress::@6
  to:font_compress::@return
font_compress::@return: scope:[font_compress]  from font_compress::@2
  [67] return 
  to:@return
font_compress::@6: scope:[font_compress]  from font_compress::@2
  [68] (byte) font_compress::font_size#9 ← (byte) font_compress::return#1
  to:font_compress::@1
font_compress::@7: scope:[font_compress]  from font_compress::@5
  [69] (byte) font_compress::return#5 ← (byte) font_compress::font_size#2
  to:font_compress::@2

(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
font_find: scope:[font_find]  from font_compress::@1
  [70] phi()
  to:font_find::@1
font_find::@1: scope:[font_find]  from font_find font_find::@5
  [71] (byte*) font_find::font#4 ← phi( font_find/(const nomodify byte*) FONT_COMPRESSED font_find::@5/(byte*) font_find::font#1 )
  [71] (byte) font_find::i#2 ← phi( font_find/(byte) 0 font_find::@5/(byte) font_find::i#1 )
  [72] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2
  to:font_find::@return
font_find::@return: scope:[font_find]  from font_find::@1 font_find::@4
  [73] (byte) font_find::return#3 ← phi( font_find::@1/(byte) $ff font_find::@4/(byte) font_find::i#2 )
  [74] return 
  to:@return
font_find::@2: scope:[font_find]  from font_find::@1 font_find::@3
  [75] (byte) font_find::l#2 ← phi( font_find::@1/(byte) 0 font_find::@3/(byte) font_find::l#1 )
  [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3
  to:font_find::@4
font_find::@3: scope:[font_find]  from font_find::@2
  [77] (byte) font_find::l#1 ← ++ (byte) font_find::l#2
  [78] if((byte) font_find::l#1!=(byte) 8) goto font_find::@2
  to:font_find::@4
font_find::@4: scope:[font_find]  from font_find::@2 font_find::@3
  [79] (byte) font_find::found#2 ← phi( font_find::@3/(byte) 1 font_find::@2/(byte) 0 )
  [80] if((byte) 0==(byte) font_find::found#2) goto font_find::@5
  to:font_find::@return
font_find::@5: scope:[font_find]  from font_find::@4
  [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8
  [82] (byte) font_find::i#1 ← ++ (byte) font_find::i#2
  to:font_find::@1

(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
font_2x2: scope:[font_2x2]  from main
  [83] phi()
  to:font_2x2::@1
font_2x2::@1: scope:[font_2x2]  from font_2x2 font_2x2::@9
  [84] (byte) font_2x2::c#11 ← phi( font_2x2/(byte) 0 font_2x2::@9/(byte) font_2x2::c#1 )
  [84] (byte*) font_2x2::next_original#4 ← phi( font_2x2/(const nomodify byte*) CHARGEN font_2x2::@9/(byte*) font_2x2::next_original#1 )
  [84] (byte*) font_2x2::next_2x2_left#0 ← phi( font_2x2/(const nomodify byte*) FONT_ORIGINAL font_2x2::@9/(byte*) font_2x2::next_2x2#1 )
  [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8
  [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0
  to:font_2x2::@2
font_2x2::@2: scope:[font_2x2]  from font_2x2::@1 font_2x2::@8
  [87] (byte*) font_2x2::next_2x2_right#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_right#0 font_2x2::@8/(byte*) font_2x2::next_2x2_right#8 )
  [87] (byte) font_2x2::l2#8 ← phi( font_2x2::@1/(byte) 0 font_2x2::@8/(byte) font_2x2::l2#9 )
  [87] (byte*) font_2x2::next_2x2_left#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_left#10 font_2x2::@8/(byte*) font_2x2::next_2x2_left#8 )
  [87] (byte) font_2x2::l#2 ← phi( font_2x2::@1/(byte) 0 font_2x2::@8/(byte) font_2x2::l#1 )
  [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2)
  to:font_2x2::@3
font_2x2::@3: scope:[font_2x2]  from font_2x2::@2 font_2x2::@5
  [89] (byte) font_2x2::b#2 ← phi( font_2x2::@2/(byte) 0 font_2x2::@5/(byte) font_2x2::b#1 )
  [89] (word) font_2x2::glyph_bits_2x2#3 ← phi( font_2x2::@2/(word) 0 font_2x2::@5/(word) font_2x2::glyph_bits_2x2#2 )
  [89] (byte) font_2x2::glyph_bits#2 ← phi( font_2x2::@2/(byte) font_2x2::glyph_bits#0 font_2x2::@5/(byte) font_2x2::glyph_bits#1 )
  [90] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80
  [91] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4
  to:font_2x2::@5
font_2x2::@4: scope:[font_2x2]  from font_2x2::@3
  [92] phi()
  to:font_2x2::@5
font_2x2::@5: scope:[font_2x2]  from font_2x2::@3 font_2x2::@4
  [93] (byte) font_2x2::glyph_bit#0 ← phi( font_2x2::@4/(byte) 1 font_2x2::@3/(byte) 0 )
  [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1
  [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0
  [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1
  [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0
  [98] (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#2 << (byte) 1
  [99] (byte) font_2x2::b#1 ← ++ (byte) font_2x2::b#2
  [100] if((byte) font_2x2::b#1!=(byte) 8) goto font_2x2::@3
  to:font_2x2::@6
font_2x2::@6: scope:[font_2x2]  from font_2x2::@5
  [101] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2
  [102] *((byte*) font_2x2::next_2x2_left#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$12
  [103] (byte~) font_2x2::$11 ← (byte) font_2x2::l2#8 + (byte) 1
  [104] *((byte*) font_2x2::next_2x2_left#7 + (byte~) font_2x2::$11) ← (byte~) font_2x2::$12
  [105] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2
  [106] *((byte*) font_2x2::next_2x2_right#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$15
  [107] (byte~) font_2x2::$14 ← (byte) font_2x2::l2#8 + (byte) 1
  [108] *((byte*) font_2x2::next_2x2_right#7 + (byte~) font_2x2::$14) ← (byte~) font_2x2::$15
  [109] (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#8 + (byte) 2
  [110] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@8
  to:font_2x2::@7
font_2x2::@7: scope:[font_2x2]  from font_2x2::@6
  [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8
  [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8
  to:font_2x2::@8
font_2x2::@8: scope:[font_2x2]  from font_2x2::@6 font_2x2::@7
  [113] (byte*) font_2x2::next_2x2_right#8 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_right#7 font_2x2::@7/(byte*) font_2x2::next_2x2_right#1 )
  [113] (byte) font_2x2::l2#9 ← phi( font_2x2::@6/(byte) font_2x2::l2#1 font_2x2::@7/(byte) 0 )
  [113] (byte*) font_2x2::next_2x2_left#8 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_left#7 font_2x2::@7/(byte*) font_2x2::next_2x2_left#1 )
  [114] (byte) font_2x2::l#1 ← ++ (byte) font_2x2::l#2
  [115] if((byte) font_2x2::l#1!=(byte) 8) goto font_2x2::@2
  to:font_2x2::@9
font_2x2::@9: scope:[font_2x2]  from font_2x2::@8
  [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8
  [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8
  [118] (byte) font_2x2::c#1 ← ++ (byte) font_2x2::c#11
  [119] if((byte) font_2x2::c#1!=(byte) $40) goto font_2x2::@1
  to:font_2x2::@return
font_2x2::@return: scope:[font_2x2]  from font_2x2::@9
  [120] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
(byte~) font_2x2::$1 200002.0
(byte~) font_2x2::$11 20002.0
(byte~) font_2x2::$12 10001.0
(byte~) font_2x2::$14 20002.0
(byte~) font_2x2::$15 10001.0
(word~) font_2x2::$5 200002.0
(word~) font_2x2::$7 200002.0
(byte) font_2x2::b
(byte) font_2x2::b#1 150001.5
(byte) font_2x2::b#2 20000.2
(byte) font_2x2::c
(byte) font_2x2::c#1 1501.5
(byte) font_2x2::c#11 58.88235294117647
(byte*) font_2x2::font_2x2
(byte*) font_2x2::font_original
(byte) font_2x2::glyph_bit
(byte) font_2x2::glyph_bit#0 50000.5
(byte) font_2x2::glyph_bits
(byte) font_2x2::glyph_bits#0 20002.0
(byte) font_2x2::glyph_bits#1 66667.33333333333
(byte) font_2x2::glyph_bits#2 34444.88888888889
(word) font_2x2::glyph_bits_2x2
(word) font_2x2::glyph_bits_2x2#1 200002.0
(word) font_2x2::glyph_bits_2x2#2 27500.5
(word) font_2x2::glyph_bits_2x2#3 40000.4
(byte) font_2x2::l
(byte) font_2x2::l#1 15001.5
(byte) font_2x2::l#2 1111.2222222222222
(byte) font_2x2::l2
(byte) font_2x2::l2#1 15001.5
(byte) font_2x2::l2#8 2727.5454545454545
(byte) font_2x2::l2#9 6667.333333333333
(byte*) font_2x2::next_2x2
(byte*) font_2x2::next_2x2#1 500.5
(byte*) font_2x2::next_2x2_left
(byte*) font_2x2::next_2x2_left#0 750.1875
(byte*) font_2x2::next_2x2_left#1 10001.0
(byte*) font_2x2::next_2x2_left#10 2002.0
(byte*) font_2x2::next_2x2_left#7 1708.5416666666665
(byte*) font_2x2::next_2x2_left#8 10001.0
(byte*) font_2x2::next_2x2_right
(byte*) font_2x2::next_2x2_right#0 1001.0
(byte*) font_2x2::next_2x2_right#1 20002.0
(byte*) font_2x2::next_2x2_right#7 1708.5416666666665
(byte*) font_2x2::next_2x2_right#8 10001.0
(byte*) font_2x2::next_original
(byte*) font_2x2::next_original#1 667.3333333333334
(byte*) font_2x2::next_original#4 363.7272727272727
(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
(byte*) font_compress::compress_mapping
(byte*) font_compress::font_compressed
(byte*) font_compress::font_original
(byte) font_compress::font_size
(byte) font_compress::font_size#1 1001.0
(byte) font_compress::font_size#2 385.0
(byte) font_compress::font_size#9 2002.0
(byte) font_compress::found
(byte) font_compress::found#0 1001.0
(byte) font_compress::found#2 3003.0
(byte) font_compress::found#3 2002.0
(byte) font_compress::i
(byte) font_compress::i#1 1001.0
(byte) font_compress::i#4 166.83333333333334
(byte) font_compress::l
(byte) font_compress::l#1 15001.5
(byte) font_compress::l#2 20002.0
(byte*) font_compress::next_compressed
(byte*) font_compress::next_compressed#1 667.3333333333334
(byte*) font_compress::next_compressed#4 1083.6666666666665
(byte*) font_compress::next_compressed#7 500.5
(byte*) font_compress::next_original
(byte*) font_compress::next_original#1 500.5
(byte*) font_compress::next_original#2 764.9411764705882
(byte) font_compress::return
(byte) font_compress::return#1 600.5999999999999
(byte) font_compress::return#5 2002.0
(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
(byte*) font_find::font
(byte*) font_find::font#1 1000001.0
(byte*) font_find::font#4 1500000.375
(byte) font_find::font_size
(byte) font_find::font_size#0 83416.83333333334
(byte) font_find::found
(byte) font_find::found#2 1000001.0
(byte*) font_find::glyph
(byte*) font_find::glyph#0 769307.8461538461
(byte) font_find::i
(byte) font_find::i#1 2000002.0
(byte) font_find::i#2 444444.8888888889
(byte) font_find::l
(byte) font_find::l#1 1.50000015E7
(byte) font_find::l#2 2.0000002E7
(byte) font_find::return
(byte) font_find::return#0 2002.0
(byte) font_find::return#3 333667.3333333334
(void()) main()
(byte) main::c
(byte) main::c#1 420.59999999999997
(byte) main::c#2 620.8
(byte) main::c#4 202.0
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte) main::x
(byte) main::x#1 1501.5
(byte) main::x#2 500.5
(byte) main::y
(byte) main::y#1 151.5
(byte) main::y#4 133.66666666666669
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#0 168.66666666666669
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
(word~) show::$0 20002.0
(byte*~) show::$1 10001.0
(byte~) show::$2 20002.0
(byte~) show::$4 20002.0
(byte~) show::$5 20002.0
(byte~) show::$6 20002.0
(word~) show::$7 15001.5
(word~) show::$8 20002.0
(word~) show::$9 20002.0
(byte) show::c
(byte) show::c#0 2733.666666666667
(byte*) show::font_mapping
(byte*) show::ptr
(byte*) show::ptr#0 7143.571428571429
(byte) show::x
(byte) show::x#0 1571.7142857142858
(byte) show::y
(byte) show::y#0 1001.0

Initial phi equivalence classes
[ main::y#4 main::y#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ main::x#2 main::x#1 ]
[ memset::dst#2 memset::dst#1 ]
[ font_compress::next_original#2 font_compress::next_original#1 ]
[ font_compress::font_size#2 font_compress::font_size#9 ]
[ font_compress::i#4 font_compress::i#1 ]
[ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
[ font_compress::l#2 font_compress::l#1 ]
[ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
[ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
[ font_find::font#4 font_find::font#1 ]
[ font_find::return#3 font_find::i#2 font_find::i#1 ]
[ font_find::l#2 font_find::l#1 ]
[ font_find::found#2 ]
[ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
[ font_2x2::next_original#4 font_2x2::next_original#1 ]
[ font_2x2::c#11 font_2x2::c#1 ]
[ font_2x2::l#2 font_2x2::l#1 ]
[ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
[ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
[ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
[ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
[ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
[ font_2x2::b#2 font_2x2::b#1 ]
[ font_2x2::glyph_bit#0 ]
Added variable memset::c#0 to live range equivalence class [ memset::c#0 ]
Added variable show::c#0 to live range equivalence class [ show::c#0 ]
Added variable show::x#0 to live range equivalence class [ show::x#0 ]
Added variable show::y#0 to live range equivalence class [ show::y#0 ]
Added variable show::$7 to live range equivalence class [ show::$7 ]
Added variable show::$8 to live range equivalence class [ show::$8 ]
Added variable show::$9 to live range equivalence class [ show::$9 ]
Added variable show::$0 to live range equivalence class [ show::$0 ]
Added variable show::$1 to live range equivalence class [ show::$1 ]
Added variable show::$2 to live range equivalence class [ show::$2 ]
Added variable show::ptr#0 to live range equivalence class [ show::ptr#0 ]
Added variable show::$4 to live range equivalence class [ show::$4 ]
Added variable show::$5 to live range equivalence class [ show::$5 ]
Added variable show::$6 to live range equivalence class [ show::$6 ]
Added variable font_find::glyph#0 to live range equivalence class [ font_find::glyph#0 ]
Added variable font_find::font_size#0 to live range equivalence class [ font_find::font_size#0 ]
Added variable font_find::return#0 to live range equivalence class [ font_find::return#0 ]
Added variable font_2x2::$1 to live range equivalence class [ font_2x2::$1 ]
Added variable font_2x2::$5 to live range equivalence class [ font_2x2::$5 ]
Added variable font_2x2::glyph_bits_2x2#1 to live range equivalence class [ font_2x2::glyph_bits_2x2#1 ]
Added variable font_2x2::$7 to live range equivalence class [ font_2x2::$7 ]
Added variable font_2x2::$12 to live range equivalence class [ font_2x2::$12 ]
Added variable font_2x2::$11 to live range equivalence class [ font_2x2::$11 ]
Added variable font_2x2::$15 to live range equivalence class [ font_2x2::$15 ]
Added variable font_2x2::$14 to live range equivalence class [ font_2x2::$14 ]
Complete equivalence classes
[ main::y#4 main::y#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ main::x#2 main::x#1 ]
[ memset::dst#2 memset::dst#1 ]
[ font_compress::next_original#2 font_compress::next_original#1 ]
[ font_compress::font_size#2 font_compress::font_size#9 ]
[ font_compress::i#4 font_compress::i#1 ]
[ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
[ font_compress::l#2 font_compress::l#1 ]
[ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
[ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
[ font_find::font#4 font_find::font#1 ]
[ font_find::return#3 font_find::i#2 font_find::i#1 ]
[ font_find::l#2 font_find::l#1 ]
[ font_find::found#2 ]
[ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
[ font_2x2::next_original#4 font_2x2::next_original#1 ]
[ font_2x2::c#11 font_2x2::c#1 ]
[ font_2x2::l#2 font_2x2::l#1 ]
[ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
[ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
[ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
[ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
[ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
[ font_2x2::b#2 font_2x2::b#1 ]
[ font_2x2::glyph_bit#0 ]
[ memset::c#0 ]
[ show::c#0 ]
[ show::x#0 ]
[ show::y#0 ]
[ show::$7 ]
[ show::$8 ]
[ show::$9 ]
[ show::$0 ]
[ show::$1 ]
[ show::$2 ]
[ show::ptr#0 ]
[ show::$4 ]
[ show::$5 ]
[ show::$6 ]
[ font_find::glyph#0 ]
[ font_find::font_size#0 ]
[ font_find::return#0 ]
[ font_2x2::$1 ]
[ font_2x2::$5 ]
[ font_2x2::glyph_bits_2x2#1 ]
[ font_2x2::$7 ]
[ font_2x2::$12 ]
[ font_2x2::$11 ]
[ font_2x2::$15 ]
[ font_2x2::$14 ]
Allocated zp[1]:2 [ main::y#4 main::y#1 ]
Allocated zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Allocated zp[1]:4 [ main::x#2 main::x#1 ]
Allocated zp[2]:5 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 ]
Allocated zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ]
Allocated zp[1]:10 [ font_compress::i#4 font_compress::i#1 ]
Allocated zp[2]:11 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
Allocated zp[1]:13 [ font_compress::l#2 font_compress::l#1 ]
Allocated zp[1]:14 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
Allocated zp[1]:15 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
Allocated zp[2]:16 [ font_find::font#4 font_find::font#1 ]
Allocated zp[1]:18 [ font_find::return#3 font_find::i#2 font_find::i#1 ]
Allocated zp[1]:19 [ font_find::l#2 font_find::l#1 ]
Allocated zp[1]:20 [ font_find::found#2 ]
Allocated zp[2]:21 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ]
Allocated zp[2]:23 [ font_2x2::next_original#4 font_2x2::next_original#1 ]
Allocated zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ]
Allocated zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ]
Allocated zp[2]:27 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
Allocated zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Allocated zp[2]:30 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
Allocated zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Allocated zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ]
Allocated zp[1]:35 [ font_2x2::b#2 font_2x2::b#1 ]
Allocated zp[1]:36 [ font_2x2::glyph_bit#0 ]
Allocated zp[1]:37 [ memset::c#0 ]
Allocated zp[1]:38 [ show::c#0 ]
Allocated zp[1]:39 [ show::x#0 ]
Allocated zp[1]:40 [ show::y#0 ]
Allocated zp[2]:41 [ show::$7 ]
Allocated zp[2]:43 [ show::$8 ]
Allocated zp[2]:45 [ show::$9 ]
Allocated zp[2]:47 [ show::$0 ]
Allocated zp[2]:49 [ show::$1 ]
Allocated zp[1]:51 [ show::$2 ]
Allocated zp[2]:52 [ show::ptr#0 ]
Allocated zp[1]:54 [ show::$4 ]
Allocated zp[1]:55 [ show::$5 ]
Allocated zp[1]:56 [ show::$6 ]
Allocated zp[2]:57 [ font_find::glyph#0 ]
Allocated zp[1]:59 [ font_find::font_size#0 ]
Allocated zp[1]:60 [ font_find::return#0 ]
Allocated zp[1]:61 [ font_2x2::$1 ]
Allocated zp[2]:62 [ font_2x2::$5 ]
Allocated zp[2]:64 [ font_2x2::glyph_bits_2x2#1 ]
Allocated zp[2]:66 [ font_2x2::$7 ]
Allocated zp[1]:68 [ font_2x2::$12 ]
Allocated zp[1]:69 [ font_2x2::$11 ]
Allocated zp[1]:70 [ font_2x2::$15 ]
Allocated zp[1]:71 [ font_2x2::$14 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Creates a 2x2 font from the system CHARGEN font and compress it by identifying identical chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label D018 = $d018
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // BASIC in 0xA000, I/O in 0xD000, KERNEL in 0xE000
  .const PROCPORT_BASIC_KERNEL_IO = 7
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SCREEN = $400
  .label FONT_ORIGINAL = $2000
  .label FONT_COMPRESSED = $2800
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>FONT_COMPRESSED)/4&$f
    .label c = 3
    .label x = 4
    .label y = 2
    // asm { sei  }
    // Create 2x2 font from CHARGEN
    sei
    // [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [6] call font_2x2 
    // [83] phi from main to font_2x2 [phi:main->font_2x2]
  font_2x2_from_main:
    jsr font_2x2
    jmp __b6
    // main::@6
  __b6:
    // [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_BASIC_KERNEL_IO
    sta PROCPORT
    // asm { cli  }
    cli
    // [9] call font_compress 
    // [47] phi from main::@6 to font_compress [phi:main::@6->font_compress]
  font_compress_from___b6:
    jsr font_compress
    // [10] phi from main::@6 to main::toD0181 [phi:main::@6->main::toD0181]
  toD0181_from___b6:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b5
    // main::@5
  __b5:
    // [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show compressed font
    lda #toD0181_return
    sta D018
    // [12] (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP+(byte) ' ') -- vbuz1=_deref_pbuc1 
    lda FONT_COMPRESSED_MAP+' '
    sta.z memset.c
    // [13] call memset 
  // Clear the screen
    // [41] phi from main::@5 to memset [phi:main::@5->memset]
  memset_from___b5:
    jsr memset
    // [14] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [14] phi (byte) main::y#4 = (byte) 0 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [14] phi (byte) main::c#4 = (byte) 0 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [14] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [14] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [14] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [15] phi (byte) main::x#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [15] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // [15] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  __b2_from___b7:
    // [15] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@7->main::@2#0] -- register_copy 
    // [15] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@7->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [16] (byte) show::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z show.c
    // [17] (byte) show::x#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z show.x
    // [18] (byte) show::y#0 ← (byte) main::y#4 -- vbuz1=vbuz2 
    lda.z y
    sta.z show.y
    // [19] call show 
    jsr show
    jmp __b7
    // main::@7
  __b7:
    // [20] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [21] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [22] if((byte) main::x#1!=(byte) 8) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z x
    bne __b2_from___b7
    jmp __b3
    // main::@3
  __b3:
    // [23] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [24] if((byte) main::y#1!=(byte) 8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z y
    bne __b1_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [25] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b4
}
  // show
// Show a 2x2 char on the screen at 2x2-position (x, y) using a font compress mapping
// show(byte zp($26) c, byte zp($27) x, byte zp($28) y)
show: {
    .label __0 = $2f
    .label __1 = $31
    .label __2 = $33
    .label __4 = $36
    .label __5 = $37
    .label __6 = $38
    .label __7 = $29
    .label c = $26
    .label x = $27
    .label y = $28
    .label ptr = $34
    .label __8 = $2b
    .label __9 = $2d
    // [26] (word~) show::$7 ← (word)(byte) show::y#0 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __7
    lda #0
    sta.z __7+1
    // [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __8
    clc
    adc.z __7
    sta.z __9
    lda.z __8+1
    adc.z __7+1
    sta.z __9+1
    // [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4 -- vwuz1=vwuz2_rol_4 
    lda.z __9
    asl
    sta.z __0
    lda.z __9+1
    rol
    sta.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __0
    clc
    adc #<SCREEN
    sta.z __1
    lda.z __0+1
    adc #>SCREEN
    sta.z __1+1
    // [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z x
    asl
    sta.z __2
    // [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z __2
    clc
    adc.z __1
    sta.z ptr
    lda #0
    adc.z __1+1
    sta.z ptr+1
    // [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z c
    lda FONT_COMPRESSED_MAP,y
    ldy #0
    sta (ptr),y
    // [34] (byte~) show::$4 ← (byte) show::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z __4
    // [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuz2 
    ldy.z __4
    lda FONT_COMPRESSED_MAP+$40,y
    ldy #1
    sta (ptr),y
    // [36] (byte~) show::$5 ← (byte) show::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z __5
    // [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuz2 
    ldy.z __5
    lda FONT_COMPRESSED_MAP+$80,y
    ldy #$28
    sta (ptr),y
    // [38] (byte~) show::$6 ← (byte) show::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z __6
    // [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuz2 
    ldy.z __6
    lda FONT_COMPRESSED_MAP+$c0,y
    ldy #$29
    sta (ptr),y
    jmp __breturn
    // show::@return
  __breturn:
    // [40] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(byte zp($25) c)
memset: {
    .label str = SCREEN
    .const num = $400
    .label end = str+num
    .label dst = 5
    .label c = $25
    // [42] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [42] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [44] return 
    rts
    // memset::@2
  __b2:
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#0 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [42] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // font_compress
// Compress a font finding identical characters
// The compressed font is put into font_compressed and the compress_mapping is updated
// so that compress_mapping[c] points to the char in font_compressed that is identical to char c in font_original
// Returns the size of the compressed font (in chars)
font_compress: {
    .label found = $e
    .label next_original = 7
    .label i = $a
    .label l = $d
    .label next_compressed = $b
    .label font_size = $f
    .label return = $f
    .label font_size_1 = 9
    // [48] phi from font_compress to font_compress::@1 [phi:font_compress->font_compress::@1]
  __b1_from_font_compress:
    // [48] phi (byte*) font_compress::next_compressed#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_compress->font_compress::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z next_compressed
    lda #>FONT_COMPRESSED
    sta.z next_compressed+1
    // [48] phi (byte) font_compress::i#4 = (byte) 0 [phi:font_compress->font_compress::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [48] phi (byte) font_compress::font_size#2 = (byte) 0 [phi:font_compress->font_compress::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z font_size_1
    // [48] phi (byte*) font_compress::next_original#2 = (const nomodify byte*) FONT_ORIGINAL [phi:font_compress->font_compress::@1#3] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_original
    lda #>FONT_ORIGINAL
    sta.z next_original+1
    jmp __b1
    // font_compress::@1
  __b1:
    // [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2 -- pbuz1=pbuz2 
    lda.z next_original
    sta.z font_find.glyph
    lda.z next_original+1
    sta.z font_find.glyph+1
    // [50] (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2 -- vbuz1=vbuz2 
    lda.z font_size_1
    sta.z font_find.font_size
    // [51] call font_find 
    // [70] phi from font_compress::@1 to font_find [phi:font_compress::@1->font_find]
  font_find_from___b1:
    jsr font_find
    // [52] (byte) font_find::return#0 ← (byte) font_find::return#3 -- vbuz1=vbuz2 
    lda.z font_find.return_1
    sta.z font_find.return
    jmp __b5
    // font_compress::@5
  __b5:
    // [53] (byte) font_compress::found#0 ← (byte) font_find::return#0 -- vbuz1=vbuz2 
    lda.z font_find.return
    sta.z found
    // [54] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z found
    bne __b7
    // [55] phi from font_compress::@5 to font_compress::@3 [phi:font_compress::@5->font_compress::@3]
  __b3_from___b5:
    // [55] phi (byte) font_compress::l#2 = (byte) 0 [phi:font_compress::@5->font_compress::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b3
  // Glyph not found - create it
    // [55] phi from font_compress::@3 to font_compress::@3 [phi:font_compress::@3->font_compress::@3]
  __b3_from___b3:
    // [55] phi (byte) font_compress::l#2 = (byte) font_compress::l#1 [phi:font_compress::@3->font_compress::@3#0] -- register_copy 
    jmp __b3
    // font_compress::@3
  __b3:
    // [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2) -- pbuz1_derefidx_vbuz2=pbuz3_derefidx_vbuz2 
    ldy.z l
    lda (next_original),y
    sta (next_compressed),y
    // [57] (byte) font_compress::l#1 ← ++ (byte) font_compress::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [58] if((byte) font_compress::l#1!=(byte) 8) goto font_compress::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b3_from___b3
    jmp __b4
    // font_compress::@4
  __b4:
    // [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_compressed
    sta.z next_compressed
    bcc !+
    inc.z next_compressed+1
  !:
    // [60] (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#2 -- vbuz1=_inc_vbuz2 
    ldy.z font_size_1
    iny
    sty.z font_size
    // [61] (byte) font_compress::found#3 ← (byte) font_compress::font_size#2 -- vbuz1=vbuz2 
    lda.z font_size_1
    sta.z found
    // [62] phi from font_compress::@4 font_compress::@7 to font_compress::@2 [phi:font_compress::@4/font_compress::@7->font_compress::@2]
  __b2_from___b4:
  __b2_from___b7:
    // [62] phi (byte*) font_compress::next_compressed#7 = (byte*) font_compress::next_compressed#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#0] -- register_copy 
    // [62] phi (byte) font_compress::return#1 = (byte) font_compress::font_size#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#1] -- register_copy 
    // [62] phi (byte) font_compress::found#2 = (byte) font_compress::found#3 [phi:font_compress::@4/font_compress::@7->font_compress::@2#2] -- register_copy 
    jmp __b2
    // font_compress::@2
  __b2:
    // [63] *((const byte*) FONT_COMPRESSED_MAP + (byte) font_compress::i#4) ← (byte) font_compress::found#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z found
    ldy.z i
    sta FONT_COMPRESSED_MAP,y
    // [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [65] (byte) font_compress::i#1 ← ++ (byte) font_compress::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [66] if((byte) font_compress::i#1!=(byte) 0) goto font_compress::@6 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b6
    jmp __breturn
    // font_compress::@return
  __breturn:
    // [67] return 
    rts
    // font_compress::@6
  __b6:
    // [68] (byte) font_compress::font_size#9 ← (byte) font_compress::return#1 -- vbuz1=vbuz2 
    lda.z return
    sta.z font_size_1
    // [48] phi from font_compress::@6 to font_compress::@1 [phi:font_compress::@6->font_compress::@1]
  __b1_from___b6:
    // [48] phi (byte*) font_compress::next_compressed#4 = (byte*) font_compress::next_compressed#7 [phi:font_compress::@6->font_compress::@1#0] -- register_copy 
    // [48] phi (byte) font_compress::i#4 = (byte) font_compress::i#1 [phi:font_compress::@6->font_compress::@1#1] -- register_copy 
    // [48] phi (byte) font_compress::font_size#2 = (byte) font_compress::font_size#9 [phi:font_compress::@6->font_compress::@1#2] -- register_copy 
    // [48] phi (byte*) font_compress::next_original#2 = (byte*) font_compress::next_original#1 [phi:font_compress::@6->font_compress::@1#3] -- register_copy 
    jmp __b1
    // font_compress::@7
  __b7:
    // [69] (byte) font_compress::return#5 ← (byte) font_compress::font_size#2 -- vbuz1=vbuz2 
    lda.z font_size_1
    sta.z return
    jmp __b2_from___b7
}
  // font_find
// Look for a glyph within a font
// Only looks at the first font_size glyphs
// Returns the index of the glyph within the font. Returns 0xff if the glyph is not found.
// font_find(byte* zp($39) glyph, byte* zp($10) font, byte zp($3b) font_size)
font_find: {
    .label glyph = $39
    .label font_size = $3b
    // Not found
    .label return = $3c
    .label l = $13
    .label font = $10
    .label i = $12
    // Not found
    .label return_1 = $12
    .label found = $14
    // [71] phi from font_find to font_find::@1 [phi:font_find->font_find::@1]
  __b1_from_font_find:
    // [71] phi (byte*) font_find::font#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_find->font_find::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z font
    lda #>FONT_COMPRESSED
    sta.z font+1
    // [71] phi (byte) font_find::i#2 = (byte) 0 [phi:font_find->font_find::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // font_find::@1
  __b1:
    // [72] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z font_size
    bcc __b2_from___b1
    // [73] phi from font_find::@1 to font_find::@return [phi:font_find::@1->font_find::@return]
  __breturn_from___b1:
    // [73] phi (byte) font_find::return#3 = (byte) $ff [phi:font_find::@1->font_find::@return#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return_1
    jmp __breturn
    // font_find::@return
  __breturn:
    // [74] return 
    rts
    // [75] phi from font_find::@1 to font_find::@2 [phi:font_find::@1->font_find::@2]
  __b2_from___b1:
    // [75] phi (byte) font_find::l#2 = (byte) 0 [phi:font_find::@1->font_find::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [75] phi from font_find::@3 to font_find::@2 [phi:font_find::@3->font_find::@2]
  __b2_from___b3:
    // [75] phi (byte) font_find::l#2 = (byte) font_find::l#1 [phi:font_find::@3->font_find::@2#0] -- register_copy 
    jmp __b2
    // font_find::@2
  __b2:
    // [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3 -- pbuz1_derefidx_vbuz2_eq_pbuz3_derefidx_vbuz2_then_la1 
    ldy.z l
    lda (glyph),y
    cmp (font),y
    beq __b3
    // [79] phi from font_find::@2 to font_find::@4 [phi:font_find::@2->font_find::@4]
  __b4_from___b2:
    // [79] phi (byte) font_find::found#2 = (byte) 0 [phi:font_find::@2->font_find::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z found
    jmp __b4
    // font_find::@3
  __b3:
    // [77] (byte) font_find::l#1 ← ++ (byte) font_find::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [78] if((byte) font_find::l#1!=(byte) 8) goto font_find::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b3
    // [79] phi from font_find::@3 to font_find::@4 [phi:font_find::@3->font_find::@4]
  __b4_from___b3:
    // [79] phi (byte) font_find::found#2 = (byte) 1 [phi:font_find::@3->font_find::@4#0] -- vbuz1=vbuc1 
    lda #1
    sta.z found
    jmp __b4
    // font_find::@4
  __b4:
    // [80] if((byte) 0==(byte) font_find::found#2) goto font_find::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z found
    beq __b5
    // [73] phi from font_find::@4 to font_find::@return [phi:font_find::@4->font_find::@return]
  __breturn_from___b4:
    // [73] phi (byte) font_find::return#3 = (byte) font_find::i#2 [phi:font_find::@4->font_find::@return#0] -- register_copy 
    jmp __breturn
    // font_find::@5
  __b5:
    // [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z font
    sta.z font
    bcc !+
    inc.z font+1
  !:
    // [82] (byte) font_find::i#1 ← ++ (byte) font_find::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [71] phi from font_find::@5 to font_find::@1 [phi:font_find::@5->font_find::@1]
  __b1_from___b5:
    // [71] phi (byte*) font_find::font#4 = (byte*) font_find::font#1 [phi:font_find::@5->font_find::@1#0] -- register_copy 
    // [71] phi (byte) font_find::i#2 = (byte) font_find::i#1 [phi:font_find::@5->font_find::@1#1] -- register_copy 
    jmp __b1
}
  // font_2x2
// Create a 2x2-font by doubling all pixels of the 64 first chars
font_2x2: {
    .label __1 = $3d
    .label __5 = $3e
    .label __7 = $42
    .label __11 = $45
    .label __12 = $44
    .label __14 = $47
    .label __15 = $46
    .label next_2x2_left = $15
    .label next_2x2_right = $1e
    .label glyph_bits = $20
    .label glyph_bit = $24
    .label glyph_bits_2x2 = $40
    .label glyph_bits_2x2_1 = $21
    .label b = $23
    .label l2 = $1d
    .label l = $1a
    .label next_2x2_left_1 = $1b
    .label next_2x2 = $15
    .label next_original = $17
    .label c = $19
    // [84] phi from font_2x2 to font_2x2::@1 [phi:font_2x2->font_2x2::@1]
  __b1_from_font_2x2:
    // [84] phi (byte) font_2x2::c#11 = (byte) 0 [phi:font_2x2->font_2x2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [84] phi (byte*) font_2x2::next_original#4 = (const nomodify byte*) CHARGEN [phi:font_2x2->font_2x2::@1#1] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z next_original
    lda #>CHARGEN
    sta.z next_original+1
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (const nomodify byte*) FONT_ORIGINAL [phi:font_2x2->font_2x2::@1#2] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_2x2_left
    lda #>FONT_ORIGINAL
    sta.z next_2x2_left+1
    jmp __b1
    // [84] phi from font_2x2::@9 to font_2x2::@1 [phi:font_2x2::@9->font_2x2::@1]
  __b1_from___b9:
    // [84] phi (byte) font_2x2::c#11 = (byte) font_2x2::c#1 [phi:font_2x2::@9->font_2x2::@1#0] -- register_copy 
    // [84] phi (byte*) font_2x2::next_original#4 = (byte*) font_2x2::next_original#1 [phi:font_2x2::@9->font_2x2::@1#1] -- register_copy 
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (byte*) font_2x2::next_2x2#1 [phi:font_2x2::@9->font_2x2::@1#2] -- register_copy 
    jmp __b1
    // font_2x2::@1
  __b1:
    // [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$40*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$40*8
    sta.z next_2x2_right+1
    // [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0 -- pbuz1=pbuz2 
    lda.z next_2x2_left
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    sta.z next_2x2_left_1+1
    // [87] phi from font_2x2::@1 to font_2x2::@2 [phi:font_2x2::@1->font_2x2::@2]
  __b2_from___b1:
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#0 [phi:font_2x2::@1->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#10 [phi:font_2x2::@1->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [87] phi from font_2x2::@8 to font_2x2::@2 [phi:font_2x2::@8->font_2x2::@2]
  __b2_from___b8:
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#8 [phi:font_2x2::@8->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) font_2x2::l2#9 [phi:font_2x2::@8->font_2x2::@2#1] -- register_copy 
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#8 [phi:font_2x2::@8->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) font_2x2::l#1 [phi:font_2x2::@8->font_2x2::@2#3] -- register_copy 
    jmp __b2
    // font_2x2::@2
  __b2:
    // [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z l
    lda (next_original),y
    sta.z glyph_bits
    // [89] phi from font_2x2::@2 to font_2x2::@3 [phi:font_2x2::@2->font_2x2::@3]
  __b3_from___b2:
    // [89] phi (byte) font_2x2::b#2 = (byte) 0 [phi:font_2x2::@2->font_2x2::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) 0 [phi:font_2x2::@2->font_2x2::@3#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z glyph_bits_2x2_1
    lda #>0
    sta.z glyph_bits_2x2_1+1
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#0 [phi:font_2x2::@2->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // [89] phi from font_2x2::@5 to font_2x2::@3 [phi:font_2x2::@5->font_2x2::@3]
  __b3_from___b5:
    // [89] phi (byte) font_2x2::b#2 = (byte) font_2x2::b#1 [phi:font_2x2::@5->font_2x2::@3#0] -- register_copy 
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) font_2x2::glyph_bits_2x2#2 [phi:font_2x2::@5->font_2x2::@3#1] -- register_copy 
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#1 [phi:font_2x2::@5->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // font_2x2::@3
  __b3:
    // [90] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z glyph_bits
    sta.z __1
    // [91] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    bne __b4_from___b3
    // [93] phi from font_2x2::@3 to font_2x2::@5 [phi:font_2x2::@3->font_2x2::@5]
  __b5_from___b3:
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 0 [phi:font_2x2::@3->font_2x2::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z glyph_bit
    jmp __b5
    // [92] phi from font_2x2::@3 to font_2x2::@4 [phi:font_2x2::@3->font_2x2::@4]
  __b4_from___b3:
    jmp __b4
    // font_2x2::@4
  __b4:
    // [93] phi from font_2x2::@4 to font_2x2::@5 [phi:font_2x2::@4->font_2x2::@5]
  __b5_from___b4:
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 1 [phi:font_2x2::@4->font_2x2::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z glyph_bit
    jmp __b5
    // font_2x2::@5
  __b5:
    // [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z glyph_bits_2x2_1
    asl
    sta.z __5
    lda.z glyph_bits_2x2_1+1
    rol
    sta.z __5+1
    // [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz2_bor_vbuz3 
    lda.z glyph_bit
    ora.z __5
    sta.z glyph_bits_2x2
    lda.z __5+1
    sta.z glyph_bits_2x2+1
    // [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z glyph_bits_2x2
    asl
    sta.z __7
    lda.z glyph_bits_2x2+1
    rol
    sta.z __7+1
    // [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz2_bor_vbuz3 
    lda.z glyph_bit
    ora.z __7
    sta.z glyph_bits_2x2_1
    lda.z __7+1
    sta.z glyph_bits_2x2_1+1
    // [98] (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    // Move to next bit
    asl.z glyph_bits
    // [99] (byte) font_2x2::b#1 ← ++ (byte) font_2x2::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [100] if((byte) font_2x2::b#1!=(byte) 8) goto font_2x2::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z b
    bne __b3_from___b5
    jmp __b6
    // font_2x2::@6
  __b6:
    // [101] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2 -- vbuz1=_hi_vwuz2 
    lda.z glyph_bits_2x2_1+1
    sta.z __12
    // [102] *((byte*) font_2x2::next_2x2_left#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuz2=vbuz3 
    // Put the generated 2x2-line into the 2x2-font twice
    lda.z __12
    ldy.z l2
    sta (next_2x2_left_1),y
    // [103] (byte~) font_2x2::$11 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z l2
    iny
    sty.z __11
    // [104] *((byte*) font_2x2::next_2x2_left#7 + (byte~) font_2x2::$11) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __12
    ldy.z __11
    sta (next_2x2_left_1),y
    // [105] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2 -- vbuz1=_lo_vwuz2 
    lda.z glyph_bits_2x2_1
    sta.z __15
    // [106] *((byte*) font_2x2::next_2x2_right#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __15
    ldy.z l2
    sta (next_2x2_right),y
    // [107] (byte~) font_2x2::$14 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z l2
    iny
    sty.z __14
    // [108] *((byte*) font_2x2::next_2x2_right#7 + (byte~) font_2x2::$14) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __15
    ldy.z __14
    sta (next_2x2_right),y
    // [109] (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#8 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z l2
    clc
    adc #2
    sta.z l2
    // [110] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l2
    bne __b8_from___b6
    jmp __b7
    // font_2x2::@7
  __b7:
    // [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$80*8
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    adc #>$80*8
    sta.z next_2x2_left_1+1
    // [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$c0*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$c0*8
    sta.z next_2x2_right+1
    // [113] phi from font_2x2::@7 to font_2x2::@8 [phi:font_2x2::@7->font_2x2::@8]
  __b8_from___b7:
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#1 [phi:font_2x2::@7->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) 0 [phi:font_2x2::@7->font_2x2::@8#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#1 [phi:font_2x2::@7->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // [113] phi from font_2x2::@6 to font_2x2::@8 [phi:font_2x2::@6->font_2x2::@8]
  __b8_from___b6:
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#7 [phi:font_2x2::@6->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) font_2x2::l2#1 [phi:font_2x2::@6->font_2x2::@8#1] -- register_copy 
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#7 [phi:font_2x2::@6->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // font_2x2::@8
  __b8:
    // [114] (byte) font_2x2::l#1 ← ++ (byte) font_2x2::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [115] if((byte) font_2x2::l#1!=(byte) 8) goto font_2x2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b8
    jmp __b9
    // font_2x2::@9
  __b9:
    // [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_2x2
    sta.z next_2x2
    bcc !+
    inc.z next_2x2+1
  !:
    // [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [118] (byte) font_2x2::c#1 ← ++ (byte) font_2x2::c#11 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [119] if((byte) font_2x2::c#1!=(byte) $40) goto font_2x2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$40
    cmp.z c
    bne __b1_from___b9
    jmp __breturn
    // font_2x2::@return
  __breturn:
    // [120] return 
    rts
}
  // File Data
  .align $100
  FONT_COMPRESSED_MAP: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [26] (word~) show::$7 ← (word)(byte) show::y#0 [ show::c#0 show::x#0 show::$7 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:38 [ show::c#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:39 [ show::x#0 ]
Statement [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2 [ show::c#0 show::x#0 show::$7 show::$8 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 show::$8 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7 [ show::c#0 show::x#0 show::$9 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$9 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4 [ show::c#0 show::x#0 show::$0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0 [ show::c#0 show::x#0 show::$1 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$1 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1 [ show::c#0 show::$1 show::$2 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::$1 show::$2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2 [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:38 [ show::c#0 ]
Statement [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6) [ ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::c#0 memset::dst#2 ] ( main:2::memset:13 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:37 [ memset::c#0 ]
Statement [45] *((byte*) memset::dst#2) ← (byte) memset::c#0 [ memset::c#0 memset::dst#2 ] ( main:2::memset:13 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:37 [ memset::c#0 ]
Statement [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ font_compress::i#4 font_compress::i#1 ]
Statement [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2) [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ font_compress::l#2 font_compress::l#1 ]
Statement [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] { }  ) always clobbers reg byte a 
Statement [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] ( main:2::font_compress:9 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:15 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
Statement [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] ( main:2::font_compress:9::font_find:51 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:59 [ font_find::font_size#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ font_find::return#3 font_find::i#2 font_find::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ font_find::l#2 font_find::l#1 ]
Statement [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] ( main:2::font_compress:9::font_find:51 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ]
Statement [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] { }  ) always clobbers reg byte a 
Statement [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2) [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Statement [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ font_2x2::b#2 font_2x2::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:36 [ font_2x2::glyph_bit#0 ]
Statement [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] { }  ) always clobbers reg byte a 
Statement [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] { }  ) always clobbers reg byte a 
Statement [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] { }  ) always clobbers reg byte a 
Statement [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] { }  ) always clobbers reg byte a 
Statement [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] ( main:2::font_2x2:6 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] ( main:2::font_2x2:6 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [26] (word~) show::$7 ← (word)(byte) show::y#0 [ show::c#0 show::x#0 show::$7 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2 [ show::c#0 show::x#0 show::$7 show::$8 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$7 show::$8 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7 [ show::c#0 show::x#0 show::$9 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$9 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4 [ show::c#0 show::x#0 show::$0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0 [ show::c#0 show::x#0 show::$1 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::x#0 show::$1 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1 [ show::c#0 show::$1 show::$2 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::$1 show::$2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2 [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a 
Statement [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5) [ show::c#0 show::ptr#0 ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 show::c#0 show::ptr#0 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6) [ ] ( main:2::show:19 [ main::y#4 main::c#2 main::x#2 ] { { show::c#0 = main::c#2 } { show::x#0 = main::x#2 } { show::y#0 = main::y#4 } }  ) always clobbers reg byte a reg byte y 
Statement [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::c#0 memset::dst#2 ] ( main:2::memset:13 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*) memset::dst#2) ← (byte) memset::c#0 [ memset::c#0 memset::dst#2 ] ( main:2::memset:13 [ memset::c#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2) [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_compress::l#2 ] { }  ) always clobbers reg byte a 
Statement [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] ( main:2::font_compress:9 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#1 ] { }  ) always clobbers reg byte a 
Statement [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] ( main:2::font_compress:9 [ font_compress::i#4 font_compress::next_original#1 font_compress::next_compressed#7 font_compress::return#1 ] { }  ) always clobbers reg byte a 
Statement [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] ( main:2::font_compress:9::font_find:51 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#4 font_find::l#2 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8 [ font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] ( main:2::font_compress:9::font_find:51 [ font_compress::next_original#2 font_compress::font_size#2 font_compress::i#4 font_compress::next_compressed#4 font_find::glyph#0 font_find::font_size#0 font_find::i#2 font_find::font#1 ] { { font_find::glyph#0 = font_compress::next_original#2 } { font_find::font_size#0 = font_compress::font_size#2 } { font_find::return#0 = font_find::return#3 } }  ) always clobbers reg byte a 
Statement [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 ] { }  ) always clobbers reg byte a 
Statement [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2_right#0 font_2x2::next_2x2_left#10 ] { }  ) always clobbers reg byte a 
Statement [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2) [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#0 ] { }  ) always clobbers reg byte a 
Statement [90] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::glyph_bits_2x2#3 font_2x2::b#2 font_2x2::$1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::glyph_bits_2x2#3 font_2x2::b#2 font_2x2::$1 ] { }  ) always clobbers reg byte a 
Statement [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$5 ] { }  ) always clobbers reg byte a 
Statement [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::glyph_bits_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bit#0 font_2x2::$7 ] { }  ) always clobbers reg byte a 
Statement [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#7 font_2x2::l2#8 font_2x2::next_2x2_right#7 font_2x2::glyph_bits#2 font_2x2::b#2 font_2x2::glyph_bits_2x2#2 ] { }  ) always clobbers reg byte a 
Statement [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 ] { }  ) always clobbers reg byte a 
Statement [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] ( main:2::font_2x2:6 [ font_2x2::next_2x2_left#0 font_2x2::next_original#4 font_2x2::c#11 font_2x2::l#2 font_2x2::next_2x2_left#1 font_2x2::next_2x2_right#1 ] { }  ) always clobbers reg byte a 
Statement [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] ( main:2::font_2x2:6 [ font_2x2::next_original#4 font_2x2::c#11 font_2x2::next_2x2#1 ] { }  ) always clobbers reg byte a 
Statement [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] ( main:2::font_2x2:6 [ font_2x2::c#11 font_2x2::next_2x2#1 font_2x2::next_original#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::y#4 main::y#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ main::x#2 main::x#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[2]:5 [ memset::dst#2 memset::dst#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ font_compress::i#4 font_compress::i#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ font_compress::l#2 font_compress::l#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] : zp[1]:15 , reg byte x , reg byte y , 
Potential registers zp[2]:16 [ font_find::font#4 font_find::font#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ font_find::return#3 font_find::i#2 font_find::i#1 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ font_find::l#2 font_find::l#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ font_find::found#2 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ font_2x2::next_original#4 font_2x2::next_original#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[2]:27 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ font_2x2::b#2 font_2x2::b#1 ] : zp[1]:35 , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ font_2x2::glyph_bit#0 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ memset::c#0 ] : zp[1]:37 , reg byte x , 
Potential registers zp[1]:38 [ show::c#0 ] : zp[1]:38 , reg byte x , 
Potential registers zp[1]:39 [ show::x#0 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ show::y#0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:41 [ show::$7 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ show::$8 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ show::$9 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ show::$0 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ show::$1 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ show::$2 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:52 [ show::ptr#0 ] : zp[2]:52 , 
Potential registers zp[1]:54 [ show::$4 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ show::$5 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ show::$6 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:57 [ font_find::glyph#0 ] : zp[2]:57 , 
Potential registers zp[1]:59 [ font_find::font_size#0 ] : zp[1]:59 , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ font_find::return#0 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ font_2x2::$1 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:62 [ font_2x2::$5 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ font_2x2::glyph_bits_2x2#1 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ font_2x2::$7 ] : zp[2]:66 , 
Potential registers zp[1]:68 [ font_2x2::$12 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ font_2x2::$11 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ font_2x2::$15 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ font_2x2::$14 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [font_find] 35,000,003.5: zp[1]:19 [ font_find::l#2 font_find::l#1 ] 2,778,114.22: zp[1]:18 [ font_find::return#3 font_find::i#2 font_find::i#1 ] 2,500,001.38: zp[2]:16 [ font_find::font#4 font_find::font#1 ] 1,000,001: zp[1]:20 [ font_find::found#2 ] 769,307.85: zp[2]:57 [ font_find::glyph#0 ] 83,416.83: zp[1]:59 [ font_find::font_size#0 ] 2,002: zp[1]:60 [ font_find::return#0 ] 
Uplift Scope [font_2x2] 200,002: zp[1]:61 [ font_2x2::$1 ] 200,002: zp[2]:62 [ font_2x2::$5 ] 200,002: zp[2]:64 [ font_2x2::glyph_bits_2x2#1 ] 200,002: zp[2]:66 [ font_2x2::$7 ] 170,001.7: zp[1]:35 [ font_2x2::b#2 font_2x2::b#1 ] 121,114.22: zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] 67,500.9: zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] 50,000.5: zp[1]:36 [ font_2x2::glyph_bit#0 ] 32,712.54: zp[2]:30 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] 24,396.38: zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] 23,712.54: zp[2]:27 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] 20,002: zp[1]:69 [ font_2x2::$11 ] 20,002: zp[1]:71 [ font_2x2::$14 ] 16,112.72: zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ] 10,001: zp[1]:68 [ font_2x2::$12 ] 10,001: zp[1]:70 [ font_2x2::$15 ] 1,560.38: zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ] 1,250.69: zp[2]:21 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] 1,031.06: zp[2]:23 [ font_2x2::next_original#4 font_2x2::next_original#1 ] 
Uplift Scope [show] 20,002: zp[2]:43 [ show::$8 ] 20,002: zp[2]:45 [ show::$9 ] 20,002: zp[2]:47 [ show::$0 ] 20,002: zp[1]:51 [ show::$2 ] 20,002: zp[1]:54 [ show::$4 ] 20,002: zp[1]:55 [ show::$5 ] 20,002: zp[1]:56 [ show::$6 ] 15,001.5: zp[2]:41 [ show::$7 ] 10,001: zp[2]:49 [ show::$1 ] 7,143.57: zp[2]:52 [ show::ptr#0 ] 2,733.67: zp[1]:38 [ show::c#0 ] 1,571.71: zp[1]:39 [ show::x#0 ] 1,001: zp[1]:40 [ show::y#0 ] 
Uplift Scope [font_compress] 35,003.5: zp[1]:13 [ font_compress::l#2 font_compress::l#1 ] 6,006: zp[1]:14 [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] 3,603.6: zp[1]:15 [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] 2,387: zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ] 2,251.5: zp[2]:11 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] 1,265.44: zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 ] 1,167.83: zp[1]:10 [ font_compress::i#4 font_compress::i#1 ] 
Uplift Scope [main] 2,002: zp[1]:4 [ main::x#2 main::x#1 ] 1,243.4: zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] 285.17: zp[1]:2 [ main::y#4 main::y#1 ] 
Uplift Scope [memset] 3,336.67: zp[2]:5 [ memset::dst#2 memset::dst#1 ] 168.67: zp[1]:37 [ memset::c#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [] 

Uplifting [font_find] best 204483 combination reg byte y [ font_find::l#2 font_find::l#1 ] reg byte x [ font_find::return#3 font_find::i#2 font_find::i#1 ] zp[2]:16 [ font_find::font#4 font_find::font#1 ] reg byte a [ font_find::found#2 ] zp[2]:57 [ font_find::glyph#0 ] zp[1]:59 [ font_find::font_size#0 ] zp[1]:60 [ font_find::return#0 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [font_2x2] best 181483 combination reg byte a [ font_2x2::$1 ] zp[2]:62 [ font_2x2::$5 ] zp[2]:64 [ font_2x2::glyph_bits_2x2#1 ] zp[2]:66 [ font_2x2::$7 ] reg byte y [ font_2x2::b#2 font_2x2::b#1 ] zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] reg byte x [ font_2x2::glyph_bit#0 ] zp[2]:30 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] zp[2]:27 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] zp[1]:69 [ font_2x2::$11 ] zp[1]:71 [ font_2x2::$14 ] zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ] zp[1]:68 [ font_2x2::$12 ] zp[1]:70 [ font_2x2::$15 ] zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ] zp[2]:21 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] zp[2]:23 [ font_2x2::next_original#4 font_2x2::next_original#1 ] 
Limited combination testing to 100 combinations of 746496 possible.
Uplifting [show] best 181463 combination zp[2]:43 [ show::$8 ] zp[2]:45 [ show::$9 ] zp[2]:47 [ show::$0 ] reg byte a [ show::$2 ] reg byte x [ show::$4 ] reg byte a [ show::$5 ] reg byte a [ show::$6 ] zp[2]:41 [ show::$7 ] zp[2]:49 [ show::$1 ] zp[2]:52 [ show::ptr#0 ] zp[1]:38 [ show::c#0 ] zp[1]:39 [ show::x#0 ] zp[1]:40 [ show::y#0 ] 
Limited combination testing to 100 combinations of 6144 possible.
Uplifting [font_compress] best 180053 combination reg byte y [ font_compress::l#2 font_compress::l#1 ] reg byte a [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ] reg byte x [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ] zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ] zp[2]:11 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 ] zp[1]:10 [ font_compress::i#4 font_compress::i#1 ] 
Limited combination testing to 100 combinations of 324 possible.
Uplifting [main] best 180053 combination zp[1]:4 [ main::x#2 main::x#1 ] zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] zp[1]:2 [ main::y#4 main::y#1 ] 
Uplifting [memset] best 180040 combination zp[2]:5 [ memset::dst#2 memset::dst#1 ] reg byte x [ memset::c#0 ] 
Uplifting [MOS6526_CIA] best 180040 combination 
Uplifting [MOS6569_VICII] best 180040 combination 
Uplifting [MOS6581_SID] best 180040 combination 
Uplifting [] best 180040 combination 
Attempting to uplift remaining variables inzp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Uplifting [font_2x2] best 180040 combination zp[1]:32 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ] 
Attempting to uplift remaining variables inzp[1]:59 [ font_find::font_size#0 ]
Uplifting [font_find] best 180040 combination zp[1]:59 [ font_find::font_size#0 ] 
Attempting to uplift remaining variables inzp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Uplifting [font_2x2] best 180040 combination zp[1]:29 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ] 
Attempting to uplift remaining variables inzp[1]:69 [ font_2x2::$11 ]
Uplifting [font_2x2] best 179440 combination reg byte y [ font_2x2::$11 ] 
Attempting to uplift remaining variables inzp[1]:71 [ font_2x2::$14 ]
Uplifting [font_2x2] best 178840 combination reg byte y [ font_2x2::$14 ] 
Attempting to uplift remaining variables inzp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ]
Uplifting [font_2x2] best 178840 combination zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ] 
Attempting to uplift remaining variables inzp[1]:68 [ font_2x2::$12 ]
Uplifting [font_2x2] best 177940 combination reg byte a [ font_2x2::$12 ] 
Attempting to uplift remaining variables inzp[1]:70 [ font_2x2::$15 ]
Uplifting [font_2x2] best 177040 combination reg byte a [ font_2x2::$15 ] 
Attempting to uplift remaining variables inzp[1]:38 [ show::c#0 ]
Uplifting [show] best 177040 combination zp[1]:38 [ show::c#0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ]
Uplifting [font_compress] best 177040 combination zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::x#2 main::x#1 ]
Uplifting [main] best 177040 combination zp[1]:4 [ main::x#2 main::x#1 ] 
Attempting to uplift remaining variables inzp[1]:60 [ font_find::return#0 ]
Uplifting [font_find] best 177000 combination reg byte a [ font_find::return#0 ] 
Attempting to uplift remaining variables inzp[1]:39 [ show::x#0 ]
Uplifting [show] best 176699 combination reg byte x [ show::x#0 ] 
Attempting to uplift remaining variables inzp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ]
Uplifting [font_2x2] best 176699 combination zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::c#2 main::c#4 main::c#1 ]
Uplifting [main] best 176699 combination zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ font_compress::i#4 font_compress::i#1 ]
Uplifting [font_compress] best 176699 combination zp[1]:10 [ font_compress::i#4 font_compress::i#1 ] 
Attempting to uplift remaining variables inzp[1]:40 [ show::y#0 ]
Uplifting [show] best 176396 combination reg byte a [ show::y#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::y#4 main::y#1 ]
Uplifting [main] best 176396 combination zp[1]:2 [ main::y#4 main::y#1 ] 
Coalescing zero page register [ zp[1]:3 [ main::c#2 main::c#4 main::c#1 ] ] with [ zp[1]:38 [ show::c#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 ] ] with [ zp[2]:57 [ font_find::glyph#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 ] ] with [ zp[1]:59 [ font_find::font_size#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 ] ] with [ zp[2]:62 [ font_2x2::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 ] ] with [ zp[2]:66 [ font_2x2::$7 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ show::$7 ] ] with [ zp[2]:45 [ show::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ show::$0 ] ] with [ zp[2]:49 [ show::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 ] ] with [ zp[2]:64 [ font_2x2::glyph_bits_2x2#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:41 [ show::$7 show::$9 ] ] with [ zp[2]:47 [ show::$0 show::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ show::$7 show::$9 show::$0 show::$1 ] ] with [ zp[2]:52 [ show::ptr#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 ] ] with [ zp[2]:5 [ memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:21 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 ] ] with [ zp[2]:11 [ font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ] ]
Coalescing zero page register [ zp[2]:23 [ font_2x2::next_original#4 font_2x2::next_original#1 ] ] with [ zp[2]:16 [ font_find::font#4 font_find::font#1 ] ]
Coalescing zero page register [ zp[1]:25 [ font_2x2::c#11 font_2x2::c#1 ] ] with [ zp[1]:9 [ font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 ] ]
Coalescing zero page register [ zp[1]:26 [ font_2x2::l#2 font_2x2::l#1 ] ] with [ zp[1]:10 [ font_compress::i#4 font_compress::i#1 ] ]
Coalescing zero page register [ zp[2]:41 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 ] ] with [ zp[2]:27 [ font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ] ]
Coalescing zero page register [ zp[2]:43 [ show::$8 ] ] with [ zp[2]:30 [ font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ] ]
Coalescing zero page register [ zp[2]:33 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 ] ] with [ zp[2]:7 [ font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 memset::dst#2 memset::dst#1 ] ]
Allocated (was zp[2]:21) zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
Allocated (was zp[2]:23) zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 font_find::font#4 font_find::font#1 ]
Allocated (was zp[1]:25) zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 ]
Allocated (was zp[1]:26) zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 font_compress::i#4 font_compress::i#1 ]
Allocated (was zp[1]:29) zp[1]:11 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
Allocated (was zp[1]:32) zp[1]:12 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
Allocated (was zp[2]:33) zp[2]:13 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 memset::dst#2 memset::dst#1 ]
Allocated (was zp[2]:41) zp[2]:15 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
Allocated (was zp[2]:43) zp[2]:17 [ show::$8 font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Creates a 2x2 font from the system CHARGEN font and compress it by identifying identical chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label D018 = $d018
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // BASIC in 0xA000, I/O in 0xD000, KERNEL in 0xE000
  .const PROCPORT_BASIC_KERNEL_IO = 7
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SCREEN = $400
  .label FONT_ORIGINAL = $2000
  .label FONT_COMPRESSED = $2800
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>FONT_COMPRESSED)/4&$f
    .label c = 3
    .label x = 4
    .label y = 2
    // asm { sei  }
    // Create 2x2 font from CHARGEN
    sei
    // [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [6] call font_2x2 
    // [83] phi from main to font_2x2 [phi:main->font_2x2]
  font_2x2_from_main:
    jsr font_2x2
    jmp __b6
    // main::@6
  __b6:
    // [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_BASIC_KERNEL_IO
    sta PROCPORT
    // asm { cli  }
    cli
    // [9] call font_compress 
    // [47] phi from main::@6 to font_compress [phi:main::@6->font_compress]
  font_compress_from___b6:
    jsr font_compress
    // [10] phi from main::@6 to main::toD0181 [phi:main::@6->main::toD0181]
  toD0181_from___b6:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b5
    // main::@5
  __b5:
    // [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show compressed font
    lda #toD0181_return
    sta D018
    // [12] (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP+(byte) ' ') -- vbuxx=_deref_pbuc1 
    ldx FONT_COMPRESSED_MAP+' '
    // [13] call memset 
  // Clear the screen
    // [41] phi from main::@5 to memset [phi:main::@5->memset]
  memset_from___b5:
    jsr memset
    // [14] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [14] phi (byte) main::y#4 = (byte) 0 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [14] phi (byte) main::c#4 = (byte) 0 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [14] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [14] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [14] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [15] phi (byte) main::x#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [15] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // [15] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  __b2_from___b7:
    // [15] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@7->main::@2#0] -- register_copy 
    // [15] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@7->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [16] (byte) show::c#0 ← (byte) main::c#2
    // [17] (byte) show::x#0 ← (byte) main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [18] (byte) show::y#0 ← (byte) main::y#4 -- vbuaa=vbuz1 
    lda.z y
    // [19] call show 
    jsr show
    jmp __b7
    // main::@7
  __b7:
    // [20] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [21] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [22] if((byte) main::x#1!=(byte) 8) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z x
    bne __b2_from___b7
    jmp __b3
    // main::@3
  __b3:
    // [23] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [24] if((byte) main::y#1!=(byte) 8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z y
    bne __b1_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [25] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b4
}
  // show
// Show a 2x2 char on the screen at 2x2-position (x, y) using a font compress mapping
// show(byte zp(3) c, byte register(X) x, byte register(A) y)
show: {
    .label __0 = $f
    .label __1 = $f
    .label __7 = $f
    .label c = 3
    .label ptr = $f
    .label __8 = $11
    .label __9 = $f
    // [26] (word~) show::$7 ← (word)(byte) show::y#0 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<SCREEN
    sta.z __1
    lda.z __1+1
    adc #>SCREEN
    sta.z __1+1
    // [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z c
    lda FONT_COMPRESSED_MAP,y
    ldy #0
    sta (ptr),y
    // [34] (byte~) show::$4 ← (byte) show::c#0 -- vbuxx=vbuz1 
    ldx.z c
    // [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda FONT_COMPRESSED_MAP+$40,x
    ldy #1
    sta (ptr),y
    // [36] (byte~) show::$5 ← (byte) show::c#0 -- vbuaa=vbuz1 
    lda.z c
    // [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$80,y
    ldy #$28
    sta (ptr),y
    // [38] (byte~) show::$6 ← (byte) show::c#0 -- vbuaa=vbuz1 
    lda.z c
    // [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$c0,y
    ldy #$29
    sta (ptr),y
    jmp __breturn
    // show::@return
  __breturn:
    // [40] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(byte register(X) c)
memset: {
    .label str = SCREEN
    .const num = $400
    .label end = str+num
    .label dst = $d
    // [42] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [42] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [44] return 
    rts
    // memset::@2
  __b2:
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [42] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // font_compress
// Compress a font finding identical characters
// The compressed font is put into font_compressed and the compress_mapping is updated
// so that compress_mapping[c] points to the char in font_compressed that is identical to char c in font_original
// Returns the size of the compressed font (in chars)
font_compress: {
    .label next_original = $d
    .label i = $a
    .label next_compressed = 5
    .label font_size = 9
    // [48] phi from font_compress to font_compress::@1 [phi:font_compress->font_compress::@1]
  __b1_from_font_compress:
    // [48] phi (byte*) font_compress::next_compressed#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_compress->font_compress::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z next_compressed
    lda #>FONT_COMPRESSED
    sta.z next_compressed+1
    // [48] phi (byte) font_compress::i#4 = (byte) 0 [phi:font_compress->font_compress::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [48] phi (byte) font_compress::font_size#2 = (byte) 0 [phi:font_compress->font_compress::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z font_size
    // [48] phi (byte*) font_compress::next_original#2 = (const nomodify byte*) FONT_ORIGINAL [phi:font_compress->font_compress::@1#3] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_original
    lda #>FONT_ORIGINAL
    sta.z next_original+1
    jmp __b1
    // font_compress::@1
  __b1:
    // [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2
    // [50] (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2
    // [51] call font_find 
    // [70] phi from font_compress::@1 to font_find [phi:font_compress::@1->font_find]
  font_find_from___b1:
    jsr font_find
    // [52] (byte) font_find::return#0 ← (byte) font_find::return#3 -- vbuaa=vbuxx 
    txa
    jmp __b5
    // font_compress::@5
  __b5:
    // [53] (byte) font_compress::found#0 ← (byte) font_find::return#0
    // [54] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b7
    // [55] phi from font_compress::@5 to font_compress::@3 [phi:font_compress::@5->font_compress::@3]
  __b3_from___b5:
    // [55] phi (byte) font_compress::l#2 = (byte) 0 [phi:font_compress::@5->font_compress::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
  // Glyph not found - create it
    // [55] phi from font_compress::@3 to font_compress::@3 [phi:font_compress::@3->font_compress::@3]
  __b3_from___b3:
    // [55] phi (byte) font_compress::l#2 = (byte) font_compress::l#1 [phi:font_compress::@3->font_compress::@3#0] -- register_copy 
    jmp __b3
    // font_compress::@3
  __b3:
    // [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2) -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (next_original),y
    sta (next_compressed),y
    // [57] (byte) font_compress::l#1 ← ++ (byte) font_compress::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [58] if((byte) font_compress::l#1!=(byte) 8) goto font_compress::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3_from___b3
    jmp __b4
    // font_compress::@4
  __b4:
    // [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_compressed
    sta.z next_compressed
    bcc !+
    inc.z next_compressed+1
  !:
    // [60] (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#2 -- vbuxx=_inc_vbuz1 
    ldx.z font_size
    inx
    // [61] (byte) font_compress::found#3 ← (byte) font_compress::font_size#2 -- vbuaa=vbuz1 
    lda.z font_size
    // [62] phi from font_compress::@4 font_compress::@7 to font_compress::@2 [phi:font_compress::@4/font_compress::@7->font_compress::@2]
  __b2_from___b4:
  __b2_from___b7:
    // [62] phi (byte*) font_compress::next_compressed#7 = (byte*) font_compress::next_compressed#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#0] -- register_copy 
    // [62] phi (byte) font_compress::return#1 = (byte) font_compress::font_size#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#1] -- register_copy 
    // [62] phi (byte) font_compress::found#2 = (byte) font_compress::found#3 [phi:font_compress::@4/font_compress::@7->font_compress::@2#2] -- register_copy 
    jmp __b2
    // font_compress::@2
  __b2:
    // [63] *((const byte*) FONT_COMPRESSED_MAP + (byte) font_compress::i#4) ← (byte) font_compress::found#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta FONT_COMPRESSED_MAP,y
    // [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [65] (byte) font_compress::i#1 ← ++ (byte) font_compress::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [66] if((byte) font_compress::i#1!=(byte) 0) goto font_compress::@6 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b6
    jmp __breturn
    // font_compress::@return
  __breturn:
    // [67] return 
    rts
    // font_compress::@6
  __b6:
    // [68] (byte) font_compress::font_size#9 ← (byte) font_compress::return#1 -- vbuz1=vbuxx 
    stx.z font_size
    // [48] phi from font_compress::@6 to font_compress::@1 [phi:font_compress::@6->font_compress::@1]
  __b1_from___b6:
    // [48] phi (byte*) font_compress::next_compressed#4 = (byte*) font_compress::next_compressed#7 [phi:font_compress::@6->font_compress::@1#0] -- register_copy 
    // [48] phi (byte) font_compress::i#4 = (byte) font_compress::i#1 [phi:font_compress::@6->font_compress::@1#1] -- register_copy 
    // [48] phi (byte) font_compress::font_size#2 = (byte) font_compress::font_size#9 [phi:font_compress::@6->font_compress::@1#2] -- register_copy 
    // [48] phi (byte*) font_compress::next_original#2 = (byte*) font_compress::next_original#1 [phi:font_compress::@6->font_compress::@1#3] -- register_copy 
    jmp __b1
    // font_compress::@7
  __b7:
    // [69] (byte) font_compress::return#5 ← (byte) font_compress::font_size#2 -- vbuxx=vbuz1 
    ldx.z font_size
    jmp __b2_from___b7
}
  // font_find
// Look for a glyph within a font
// Only looks at the first font_size glyphs
// Returns the index of the glyph within the font. Returns 0xff if the glyph is not found.
// font_find(byte* zp($d) glyph, byte* zp(7) font, byte zp(9) font_size)
font_find: {
    .label glyph = $d
    .label font_size = 9
    .label font = 7
    // [71] phi from font_find to font_find::@1 [phi:font_find->font_find::@1]
  __b1_from_font_find:
    // [71] phi (byte*) font_find::font#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_find->font_find::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z font
    lda #>FONT_COMPRESSED
    sta.z font+1
    // [71] phi (byte) font_find::i#2 = (byte) 0 [phi:font_find->font_find::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // font_find::@1
  __b1:
    // [72] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z font_size
    bcc __b2_from___b1
    // [73] phi from font_find::@1 to font_find::@return [phi:font_find::@1->font_find::@return]
  __breturn_from___b1:
    // [73] phi (byte) font_find::return#3 = (byte) $ff [phi:font_find::@1->font_find::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // font_find::@return
  __breturn:
    // [74] return 
    rts
    // [75] phi from font_find::@1 to font_find::@2 [phi:font_find::@1->font_find::@2]
  __b2_from___b1:
    // [75] phi (byte) font_find::l#2 = (byte) 0 [phi:font_find::@1->font_find::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [75] phi from font_find::@3 to font_find::@2 [phi:font_find::@3->font_find::@2]
  __b2_from___b3:
    // [75] phi (byte) font_find::l#2 = (byte) font_find::l#1 [phi:font_find::@3->font_find::@2#0] -- register_copy 
    jmp __b2
    // font_find::@2
  __b2:
    // [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph),y
    cmp (font),y
    beq __b3
    // [79] phi from font_find::@2 to font_find::@4 [phi:font_find::@2->font_find::@4]
  __b4_from___b2:
    // [79] phi (byte) font_find::found#2 = (byte) 0 [phi:font_find::@2->font_find::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // font_find::@3
  __b3:
    // [77] (byte) font_find::l#1 ← ++ (byte) font_find::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [78] if((byte) font_find::l#1!=(byte) 8) goto font_find::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2_from___b3
    // [79] phi from font_find::@3 to font_find::@4 [phi:font_find::@3->font_find::@4]
  __b4_from___b3:
    // [79] phi (byte) font_find::found#2 = (byte) 1 [phi:font_find::@3->font_find::@4#0] -- vbuaa=vbuc1 
    lda #1
    jmp __b4
    // font_find::@4
  __b4:
    // [80] if((byte) 0==(byte) font_find::found#2) goto font_find::@5 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b5
    // [73] phi from font_find::@4 to font_find::@return [phi:font_find::@4->font_find::@return]
  __breturn_from___b4:
    // [73] phi (byte) font_find::return#3 = (byte) font_find::i#2 [phi:font_find::@4->font_find::@return#0] -- register_copy 
    jmp __breturn
    // font_find::@5
  __b5:
    // [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z font
    sta.z font
    bcc !+
    inc.z font+1
  !:
    // [82] (byte) font_find::i#1 ← ++ (byte) font_find::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [71] phi from font_find::@5 to font_find::@1 [phi:font_find::@5->font_find::@1]
  __b1_from___b5:
    // [71] phi (byte*) font_find::font#4 = (byte*) font_find::font#1 [phi:font_find::@5->font_find::@1#0] -- register_copy 
    // [71] phi (byte) font_find::i#2 = (byte) font_find::i#1 [phi:font_find::@5->font_find::@1#1] -- register_copy 
    jmp __b1
}
  // font_2x2
// Create a 2x2-font by doubling all pixels of the 64 first chars
font_2x2: {
    .label __5 = $d
    .label __7 = $d
    .label next_2x2_left = 5
    .label next_2x2_right = $11
    .label glyph_bits = $c
    .label glyph_bits_2x2 = $d
    .label l2 = $b
    .label l = $a
    .label next_2x2_left_1 = $f
    .label next_2x2 = 5
    .label next_original = 7
    .label c = 9
    // [84] phi from font_2x2 to font_2x2::@1 [phi:font_2x2->font_2x2::@1]
  __b1_from_font_2x2:
    // [84] phi (byte) font_2x2::c#11 = (byte) 0 [phi:font_2x2->font_2x2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [84] phi (byte*) font_2x2::next_original#4 = (const nomodify byte*) CHARGEN [phi:font_2x2->font_2x2::@1#1] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z next_original
    lda #>CHARGEN
    sta.z next_original+1
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (const nomodify byte*) FONT_ORIGINAL [phi:font_2x2->font_2x2::@1#2] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_2x2_left
    lda #>FONT_ORIGINAL
    sta.z next_2x2_left+1
    jmp __b1
    // [84] phi from font_2x2::@9 to font_2x2::@1 [phi:font_2x2::@9->font_2x2::@1]
  __b1_from___b9:
    // [84] phi (byte) font_2x2::c#11 = (byte) font_2x2::c#1 [phi:font_2x2::@9->font_2x2::@1#0] -- register_copy 
    // [84] phi (byte*) font_2x2::next_original#4 = (byte*) font_2x2::next_original#1 [phi:font_2x2::@9->font_2x2::@1#1] -- register_copy 
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (byte*) font_2x2::next_2x2#1 [phi:font_2x2::@9->font_2x2::@1#2] -- register_copy 
    jmp __b1
    // font_2x2::@1
  __b1:
    // [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$40*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$40*8
    sta.z next_2x2_right+1
    // [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0 -- pbuz1=pbuz2 
    lda.z next_2x2_left
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    sta.z next_2x2_left_1+1
    // [87] phi from font_2x2::@1 to font_2x2::@2 [phi:font_2x2::@1->font_2x2::@2]
  __b2_from___b1:
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#0 [phi:font_2x2::@1->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#10 [phi:font_2x2::@1->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b2
    // [87] phi from font_2x2::@8 to font_2x2::@2 [phi:font_2x2::@8->font_2x2::@2]
  __b2_from___b8:
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#8 [phi:font_2x2::@8->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) font_2x2::l2#9 [phi:font_2x2::@8->font_2x2::@2#1] -- register_copy 
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#8 [phi:font_2x2::@8->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) font_2x2::l#1 [phi:font_2x2::@8->font_2x2::@2#3] -- register_copy 
    jmp __b2
    // font_2x2::@2
  __b2:
    // [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z l
    lda (next_original),y
    sta.z glyph_bits
    // [89] phi from font_2x2::@2 to font_2x2::@3 [phi:font_2x2::@2->font_2x2::@3]
  __b3_from___b2:
    // [89] phi (byte) font_2x2::b#2 = (byte) 0 [phi:font_2x2::@2->font_2x2::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) 0 [phi:font_2x2::@2->font_2x2::@3#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z glyph_bits_2x2
    lda #>0
    sta.z glyph_bits_2x2+1
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#0 [phi:font_2x2::@2->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // [89] phi from font_2x2::@5 to font_2x2::@3 [phi:font_2x2::@5->font_2x2::@3]
  __b3_from___b5:
    // [89] phi (byte) font_2x2::b#2 = (byte) font_2x2::b#1 [phi:font_2x2::@5->font_2x2::@3#0] -- register_copy 
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) font_2x2::glyph_bits_2x2#2 [phi:font_2x2::@5->font_2x2::@3#1] -- register_copy 
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#1 [phi:font_2x2::@5->font_2x2::@3#2] -- register_copy 
    jmp __b3
    // font_2x2::@3
  __b3:
    // [90] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z glyph_bits
    // [91] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b4_from___b3
    // [93] phi from font_2x2::@3 to font_2x2::@5 [phi:font_2x2::@3->font_2x2::@5]
  __b5_from___b3:
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 0 [phi:font_2x2::@3->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // [92] phi from font_2x2::@3 to font_2x2::@4 [phi:font_2x2::@3->font_2x2::@4]
  __b4_from___b3:
    jmp __b4
    // font_2x2::@4
  __b4:
    // [93] phi from font_2x2::@4 to font_2x2::@5 [phi:font_2x2::@4->font_2x2::@5]
  __b5_from___b4:
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 1 [phi:font_2x2::@4->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b5
    // font_2x2::@5
  __b5:
    // [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __7
    rol.z __7+1
    // [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // [98] (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    // Move to next bit
    asl.z glyph_bits
    // [99] (byte) font_2x2::b#1 ← ++ (byte) font_2x2::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [100] if((byte) font_2x2::b#1!=(byte) 8) goto font_2x2::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3_from___b5
    jmp __b6
    // font_2x2::@6
  __b6:
    // [101] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    lda.z glyph_bits_2x2+1
    // [102] *((byte*) font_2x2::next_2x2_left#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Put the generated 2x2-line into the 2x2-font twice
    ldy.z l2
    sta (next_2x2_left_1),y
    // [103] (byte~) font_2x2::$11 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    ldy.z l2
    iny
    // [104] *((byte*) font_2x2::next_2x2_left#7 + (byte~) font_2x2::$11) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_left_1),y
    // [105] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    lda.z glyph_bits_2x2
    // [106] *((byte*) font_2x2::next_2x2_right#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z l2
    sta (next_2x2_right),y
    // [107] (byte~) font_2x2::$14 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    ldy.z l2
    iny
    // [108] *((byte*) font_2x2::next_2x2_right#7 + (byte~) font_2x2::$14) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_right),y
    // [109] (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#8 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z l2
    clc
    adc #2
    sta.z l2
    // [110] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l2
    bne __b8_from___b6
    jmp __b7
    // font_2x2::@7
  __b7:
    // [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$80*8
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    adc #>$80*8
    sta.z next_2x2_left_1+1
    // [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$c0*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$c0*8
    sta.z next_2x2_right+1
    // [113] phi from font_2x2::@7 to font_2x2::@8 [phi:font_2x2::@7->font_2x2::@8]
  __b8_from___b7:
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#1 [phi:font_2x2::@7->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) 0 [phi:font_2x2::@7->font_2x2::@8#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#1 [phi:font_2x2::@7->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // [113] phi from font_2x2::@6 to font_2x2::@8 [phi:font_2x2::@6->font_2x2::@8]
  __b8_from___b6:
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#7 [phi:font_2x2::@6->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) font_2x2::l2#1 [phi:font_2x2::@6->font_2x2::@8#1] -- register_copy 
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#7 [phi:font_2x2::@6->font_2x2::@8#2] -- register_copy 
    jmp __b8
    // font_2x2::@8
  __b8:
    // [114] (byte) font_2x2::l#1 ← ++ (byte) font_2x2::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [115] if((byte) font_2x2::l#1!=(byte) 8) goto font_2x2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b8
    jmp __b9
    // font_2x2::@9
  __b9:
    // [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_2x2
    sta.z next_2x2
    bcc !+
    inc.z next_2x2+1
  !:
    // [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // [118] (byte) font_2x2::c#1 ← ++ (byte) font_2x2::c#11 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [119] if((byte) font_2x2::c#1!=(byte) $40) goto font_2x2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$40
    cmp.z c
    bne __b1_from___b9
    jmp __breturn
    // font_2x2::@return
  __breturn:
    // [120] return 
    rts
}
  // File Data
  .align $100
  FONT_COMPRESSED_MAP: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b6
Removing instruction jmp toD0181
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction lda.z c with TXA
Replacing instruction lda.z c with TXA
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #<0 with TYA
Removing instruction lda #>0
Removing instruction ldy.z l2
Removing instruction ldy.z l2
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b7 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b2_from___b7 with __b2
Replacing label __b2_from___b3 with __b2
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b5 with __b3
Replacing label __b8_from___b6 with __b8
Replacing label __b2_from___b8 with __b2
Replacing label __b1_from___b9 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Removing instruction toD0181_from___b6:
Removing instruction toD0181:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b7:
Removing instruction font_find_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b2_from___b7:
Removing instruction __b2_from___b3:
Removing instruction __b1_from___b9:
Removing instruction __b2_from___b8:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b8_from___b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction font_2x2_from_main:
Removing instruction __b6:
Removing instruction font_compress_from___b6:
Removing instruction __b5:
Removing instruction memset_from___b5:
Removing instruction __b1_from___b5:
Removing instruction __b7:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_font_compress:
Removing instruction __b5:
Removing instruction __b3_from___b5:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction __b1_from_font_find:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b3:
Removing instruction __breturn_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b1_from_font_2x2:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5_from___b3:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8_from___b7:
Removing instruction __b9:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b2_from___b1 to __b6
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b8
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #8
Removing instruction lda #8
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __bbegin:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [396] bne __b1 to beq

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) CHARGEN = (byte*) 53248
(const nomodify byte*) D018 = (byte*) 53272
(const nomodify byte*) FONT_COMPRESSED = (byte*) 10240
(const byte*) FONT_COMPRESSED_MAP[(number) $100]  = { fill( $100, 0) }
(const nomodify byte*) FONT_ORIGINAL = (byte*) 8192
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte*) PROCPORT = (byte*) 1
(const nomodify byte) PROCPORT_BASIC_KERNEL_IO = (byte) 7
(const nomodify byte) PROCPORT_RAM_CHARROM = (byte) 1
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
(byte~) font_2x2::$1 reg byte a 200002.0
(byte~) font_2x2::$11 reg byte y 20002.0
(byte~) font_2x2::$12 reg byte a 10001.0
(byte~) font_2x2::$14 reg byte y 20002.0
(byte~) font_2x2::$15 reg byte a 10001.0
(word~) font_2x2::$5 zp[2]:13 200002.0
(word~) font_2x2::$7 zp[2]:13 200002.0
(label) font_2x2::@1
(label) font_2x2::@2
(label) font_2x2::@3
(label) font_2x2::@4
(label) font_2x2::@5
(label) font_2x2::@6
(label) font_2x2::@7
(label) font_2x2::@8
(label) font_2x2::@9
(label) font_2x2::@return
(byte) font_2x2::b
(byte) font_2x2::b#1 reg byte y 150001.5
(byte) font_2x2::b#2 reg byte y 20000.2
(byte) font_2x2::c
(byte) font_2x2::c#1 c zp[1]:9 1501.5
(byte) font_2x2::c#11 c zp[1]:9 58.88235294117647
(byte*) font_2x2::font_2x2
(byte*) font_2x2::font_original
(byte) font_2x2::glyph_bit
(byte) font_2x2::glyph_bit#0 reg byte x 50000.5
(byte) font_2x2::glyph_bits
(byte) font_2x2::glyph_bits#0 glyph_bits zp[1]:12 20002.0
(byte) font_2x2::glyph_bits#1 glyph_bits zp[1]:12 66667.33333333333
(byte) font_2x2::glyph_bits#2 glyph_bits zp[1]:12 34444.88888888889
(word) font_2x2::glyph_bits_2x2
(word) font_2x2::glyph_bits_2x2#1 glyph_bits_2x2 zp[2]:13 200002.0
(word) font_2x2::glyph_bits_2x2#2 glyph_bits_2x2 zp[2]:13 27500.5
(word) font_2x2::glyph_bits_2x2#3 glyph_bits_2x2 zp[2]:13 40000.4
(byte) font_2x2::l
(byte) font_2x2::l#1 l zp[1]:10 15001.5
(byte) font_2x2::l#2 l zp[1]:10 1111.2222222222222
(byte) font_2x2::l2
(byte) font_2x2::l2#1 l2 zp[1]:11 15001.5
(byte) font_2x2::l2#8 l2 zp[1]:11 2727.5454545454545
(byte) font_2x2::l2#9 l2 zp[1]:11 6667.333333333333
(byte*) font_2x2::next_2x2
(byte*) font_2x2::next_2x2#1 next_2x2 zp[2]:5 500.5
(byte*) font_2x2::next_2x2_left
(byte*) font_2x2::next_2x2_left#0 next_2x2_left zp[2]:5 750.1875
(byte*) font_2x2::next_2x2_left#1 next_2x2_left_1 zp[2]:15 10001.0
(byte*) font_2x2::next_2x2_left#10 next_2x2_left_1 zp[2]:15 2002.0
(byte*) font_2x2::next_2x2_left#7 next_2x2_left_1 zp[2]:15 1708.5416666666665
(byte*) font_2x2::next_2x2_left#8 next_2x2_left_1 zp[2]:15 10001.0
(byte*) font_2x2::next_2x2_right
(byte*) font_2x2::next_2x2_right#0 next_2x2_right zp[2]:17 1001.0
(byte*) font_2x2::next_2x2_right#1 next_2x2_right zp[2]:17 20002.0
(byte*) font_2x2::next_2x2_right#7 next_2x2_right zp[2]:17 1708.5416666666665
(byte*) font_2x2::next_2x2_right#8 next_2x2_right zp[2]:17 10001.0
(byte*) font_2x2::next_original
(byte*) font_2x2::next_original#1 next_original zp[2]:7 667.3333333333334
(byte*) font_2x2::next_original#4 next_original zp[2]:7 363.7272727272727
(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
(label) font_compress::@1
(label) font_compress::@2
(label) font_compress::@3
(label) font_compress::@4
(label) font_compress::@5
(label) font_compress::@6
(label) font_compress::@7
(label) font_compress::@return
(byte*) font_compress::compress_mapping
(byte*) font_compress::font_compressed
(byte*) font_compress::font_original
(byte) font_compress::font_size
(byte) font_compress::font_size#1 reg byte x 1001.0
(byte) font_compress::font_size#2 font_size zp[1]:9 385.0
(byte) font_compress::font_size#9 font_size zp[1]:9 2002.0
(byte) font_compress::found
(byte) font_compress::found#0 reg byte a 1001.0
(byte) font_compress::found#2 reg byte a 3003.0
(byte) font_compress::found#3 reg byte a 2002.0
(byte) font_compress::i
(byte) font_compress::i#1 i zp[1]:10 1001.0
(byte) font_compress::i#4 i zp[1]:10 166.83333333333334
(byte) font_compress::l
(byte) font_compress::l#1 reg byte y 15001.5
(byte) font_compress::l#2 reg byte y 20002.0
(byte*) font_compress::next_compressed
(byte*) font_compress::next_compressed#1 next_compressed zp[2]:5 667.3333333333334
(byte*) font_compress::next_compressed#4 next_compressed zp[2]:5 1083.6666666666665
(byte*) font_compress::next_compressed#7 next_compressed zp[2]:5 500.5
(byte*) font_compress::next_original
(byte*) font_compress::next_original#1 next_original zp[2]:13 500.5
(byte*) font_compress::next_original#2 next_original zp[2]:13 764.9411764705882
(byte) font_compress::return
(byte) font_compress::return#1 reg byte x 600.5999999999999
(byte) font_compress::return#5 reg byte x 2002.0
(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
(label) font_find::@1
(label) font_find::@2
(label) font_find::@3
(label) font_find::@4
(label) font_find::@5
(label) font_find::@return
(byte*) font_find::font
(byte*) font_find::font#1 font zp[2]:7 1000001.0
(byte*) font_find::font#4 font zp[2]:7 1500000.375
(byte) font_find::font_size
(byte) font_find::font_size#0 font_size zp[1]:9 83416.83333333334
(byte) font_find::found
(byte) font_find::found#2 reg byte a 1000001.0
(byte*) font_find::glyph
(byte*) font_find::glyph#0 glyph zp[2]:13 769307.8461538461
(byte) font_find::i
(byte) font_find::i#1 reg byte x 2000002.0
(byte) font_find::i#2 reg byte x 444444.8888888889
(byte) font_find::l
(byte) font_find::l#1 reg byte y 1.50000015E7
(byte) font_find::l#2 reg byte y 2.0000002E7
(byte) font_find::return
(byte) font_find::return#0 reg byte a 2002.0
(byte) font_find::return#3 reg byte x 333667.3333333334
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(byte) main::c
(byte) main::c#1 c zp[1]:3 420.59999999999997
(byte) main::c#2 c zp[1]:3 620.8
(byte) main::c#4 c zp[1]:3 202.0
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) FONT_COMPRESSED/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(byte) main::x
(byte) main::x#1 x zp[1]:4 1501.5
(byte) main::x#2 x zp[1]:4 500.5
(byte) main::y
(byte) main::y#1 y zp[1]:2 151.5
(byte) main::y#4 y zp[1]:2 133.66666666666669
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(byte) memset::c#0 reg byte x 168.66666666666669
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:13 2002.0
(byte*) memset::dst#2 dst zp[2]:13 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $400
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const nomodify byte*) SCREEN
(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
(word~) show::$0 zp[2]:15 20002.0
(byte*~) show::$1 zp[2]:15 10001.0
(byte~) show::$2 reg byte a 20002.0
(byte~) show::$4 reg byte x 20002.0
(byte~) show::$5 reg byte a 20002.0
(byte~) show::$6 reg byte a 20002.0
(word~) show::$7 zp[2]:15 15001.5
(word~) show::$8 zp[2]:17 20002.0
(word~) show::$9 zp[2]:15 20002.0
(label) show::@return
(byte) show::c
(byte) show::c#0 c zp[1]:3 2733.666666666667
(byte*) show::font_mapping
(byte*) show::ptr
(byte*) show::ptr#0 ptr zp[2]:15 7143.571428571429
(byte) show::x
(byte) show::x#0 reg byte x 1571.7142857142858
(byte) show::y
(byte) show::y#0 reg byte a 1001.0

zp[1]:2 [ main::y#4 main::y#1 ]
zp[1]:3 [ main::c#2 main::c#4 main::c#1 show::c#0 ]
zp[1]:4 [ main::x#2 main::x#1 ]
reg byte y [ font_compress::l#2 font_compress::l#1 ]
reg byte a [ font_compress::found#2 font_compress::found#3 font_compress::found#0 ]
reg byte x [ font_compress::return#1 font_compress::font_size#1 font_compress::return#5 ]
reg byte x [ font_find::return#3 font_find::i#2 font_find::i#1 ]
reg byte y [ font_find::l#2 font_find::l#1 ]
reg byte a [ font_find::found#2 ]
zp[2]:5 [ font_2x2::next_2x2_left#0 font_2x2::next_2x2#1 font_compress::next_compressed#4 font_compress::next_compressed#7 font_compress::next_compressed#1 ]
zp[2]:7 [ font_2x2::next_original#4 font_2x2::next_original#1 font_find::font#4 font_find::font#1 ]
zp[1]:9 [ font_2x2::c#11 font_2x2::c#1 font_compress::font_size#2 font_compress::font_size#9 font_find::font_size#0 ]
zp[1]:10 [ font_2x2::l#2 font_2x2::l#1 font_compress::i#4 font_compress::i#1 ]
zp[1]:11 [ font_2x2::l2#8 font_2x2::l2#9 font_2x2::l2#1 ]
zp[1]:12 [ font_2x2::glyph_bits#2 font_2x2::glyph_bits#0 font_2x2::glyph_bits#1 ]
zp[2]:13 [ font_2x2::glyph_bits_2x2#3 font_2x2::glyph_bits_2x2#2 font_2x2::$5 font_2x2::$7 font_2x2::glyph_bits_2x2#1 font_compress::next_original#2 font_compress::next_original#1 font_find::glyph#0 memset::dst#2 memset::dst#1 ]
reg byte y [ font_2x2::b#2 font_2x2::b#1 ]
reg byte x [ font_2x2::glyph_bit#0 ]
reg byte x [ memset::c#0 ]
reg byte x [ show::x#0 ]
reg byte a [ show::y#0 ]
zp[2]:15 [ show::$7 show::$9 show::$0 show::$1 show::ptr#0 font_2x2::next_2x2_left#7 font_2x2::next_2x2_left#10 font_2x2::next_2x2_left#8 font_2x2::next_2x2_left#1 ]
zp[2]:17 [ show::$8 font_2x2::next_2x2_right#7 font_2x2::next_2x2_right#0 font_2x2::next_2x2_right#8 font_2x2::next_2x2_right#1 ]
reg byte a [ show::$2 ]
reg byte x [ show::$4 ]
reg byte a [ show::$5 ]
reg byte a [ show::$6 ]
reg byte a [ font_find::return#0 ]
reg byte a [ font_2x2::$1 ]
reg byte a [ font_2x2::$12 ]
reg byte y [ font_2x2::$11 ]
reg byte a [ font_2x2::$15 ]
reg byte y [ font_2x2::$14 ]


FINAL ASSEMBLER
Score: 122846

  // File Comments
// Creates a 2x2 font from the system CHARGEN font and compress it by identifying identical chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label D018 = $d018
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in 0xA000, 0xE000 CHAR ROM in 0xD000
  .const PROCPORT_RAM_CHARROM = 1
  // BASIC in 0xA000, I/O in 0xD000, KERNEL in 0xE000
  .const PROCPORT_BASIC_KERNEL_IO = 7
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SCREEN = $400
  .label FONT_ORIGINAL = $2000
  .label FONT_COMPRESSED = $2800
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>FONT_COMPRESSED)/4&$f
    .label c = 3
    .label x = 4
    .label y = 2
    // asm
    // asm { sei  }
    // Create 2x2 font from CHARGEN
    sei
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [5] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // font_2x2(CHARGEN, FONT_ORIGINAL)
    // [6] call font_2x2 
    // [83] phi from main to font_2x2 [phi:main->font_2x2]
    jsr font_2x2
    // main::@6
    // *PROCPORT = PROCPORT_BASIC_KERNEL_IO
    // [7] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_BASIC_KERNEL_IO
    sta PROCPORT
    // asm
    // asm { cli  }
    cli
    // font_compress(FONT_ORIGINAL, FONT_COMPRESSED, FONT_COMPRESSED_MAP)
    // [9] call font_compress 
    // [47] phi from main::@6 to font_compress [phi:main::@6->font_compress]
    jsr font_compress
    // [10] phi from main::@6 to main::toD0181 [phi:main::@6->main::toD0181]
    // main::toD0181
    // main::@5
    // *D018 = toD018(SCREEN, FONT_COMPRESSED)
    // [11] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show compressed font
    lda #toD0181_return
    sta D018
    // memset(SCREEN, FONT_COMPRESSED_MAP[' '], 0x0400)
    // [12] (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP+(byte) ' ') -- vbuxx=_deref_pbuc1 
    ldx FONT_COMPRESSED_MAP+' '
    // [13] call memset 
  // Clear the screen
    // [41] phi from main::@5 to memset [phi:main::@5->memset]
    jsr memset
    // [14] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [14] phi (byte) main::y#4 = (byte) 0 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [14] phi (byte) main::c#4 = (byte) 0 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    sta.z c
    // [14] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [14] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [14] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [15] phi (byte) main::x#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [15] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@1->main::@2#1] -- register_copy 
    // [15] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
    // [15] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@7->main::@2#0] -- register_copy 
    // [15] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@7->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // show(c++, x, y, FONT_COMPRESSED_MAP)
    // [16] (byte) show::c#0 ← (byte) main::c#2
    // [17] (byte) show::x#0 ← (byte) main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [18] (byte) show::y#0 ← (byte) main::y#4 -- vbuaa=vbuz1 
    lda.z y
    // [19] call show 
    jsr show
    // main::@7
    // show(c++, x, y, FONT_COMPRESSED_MAP);
    // [20] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // for(char x:0..7)
    // [21] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [22] if((byte) main::x#1!=(byte) 8) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z x
    bne __b2
    // main::@3
    // for(char y:0..7)
    // [23] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [24] if((byte) main::y#1!=(byte) 8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp.z y
    bne __b1
    // main::@4
  __b4:
    // (*(SCREEN+999))++;
    // [25] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b4
}
  // show
// Show a 2x2 char on the screen at 2x2-position (x, y) using a font compress mapping
// show(byte zp(3) c, byte register(X) x, byte register(A) y)
show: {
    .label __0 = $f
    .label __1 = $f
    .label __7 = $f
    .label c = 3
    .label ptr = $f
    .label __8 = $11
    .label __9 = $f
    // (unsigned int)y*80
    // [26] (word~) show::$7 ← (word)(byte) show::y#0 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // [27] (word~) show::$8 ← (word~) show::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [28] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [29] (word~) show::$0 ← (word~) show::$9 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // SCREEN + (unsigned int)y*80
    // [30] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<SCREEN
    sta.z __1
    lda.z __1+1
    adc #>SCREEN
    sta.z __1+1
    // x*2
    // [31] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // ptr = SCREEN + (unsigned int)y*80 + x*2
    // [32] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // ptr[0] = font_mapping[c]
    // [33] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z c
    lda FONT_COMPRESSED_MAP,y
    ldy #0
    sta (ptr),y
    // c+0x40
    // [34] (byte~) show::$4 ← (byte) show::c#0 -- vbuxx=vbuz1 
    ldx.z c
    // ptr[1] = font_mapping[c+0x40]
    // [35] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuxx 
    lda FONT_COMPRESSED_MAP+$40,x
    ldy #1
    sta (ptr),y
    // c+0x80
    // [36] (byte~) show::$5 ← (byte) show::c#0 -- vbuaa=vbuz1 
    txa
    // ptr[40] = font_mapping[c+0x80]
    // [37] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$80,y
    ldy #$28
    sta (ptr),y
    // c+0xc0
    // [38] (byte~) show::$6 ← (byte) show::c#0 -- vbuaa=vbuz1 
    txa
    // ptr[41] = font_mapping[c+0xc0]
    // [39] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6) -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda FONT_COMPRESSED_MAP+$c0,y
    ldy #$29
    sta (ptr),y
    // show::@return
    // }
    // [40] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(byte register(X) c)
memset: {
    .label str = SCREEN
    .const num = $400
    .label end = str+num
    .label dst = $d
    // [42] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [42] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [43] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [44] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [45] *((byte*) memset::dst#2) ← (byte) memset::c#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [42] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [42] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // font_compress
// Compress a font finding identical characters
// The compressed font is put into font_compressed and the compress_mapping is updated
// so that compress_mapping[c] points to the char in font_compressed that is identical to char c in font_original
// Returns the size of the compressed font (in chars)
font_compress: {
    .label next_original = $d
    .label i = $a
    .label next_compressed = 5
    .label font_size = 9
    // [48] phi from font_compress to font_compress::@1 [phi:font_compress->font_compress::@1]
    // [48] phi (byte*) font_compress::next_compressed#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_compress->font_compress::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z next_compressed
    lda #>FONT_COMPRESSED
    sta.z next_compressed+1
    // [48] phi (byte) font_compress::i#4 = (byte) 0 [phi:font_compress->font_compress::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [48] phi (byte) font_compress::font_size#2 = (byte) 0 [phi:font_compress->font_compress::@1#2] -- vbuz1=vbuc1 
    sta.z font_size
    // [48] phi (byte*) font_compress::next_original#2 = (const nomodify byte*) FONT_ORIGINAL [phi:font_compress->font_compress::@1#3] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_original
    lda #>FONT_ORIGINAL
    sta.z next_original+1
    // font_compress::@1
  __b1:
    // font_find(next_original, font_compressed, font_size)
    // [49] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2
    // [50] (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2
    // [51] call font_find 
    // [70] phi from font_compress::@1 to font_find [phi:font_compress::@1->font_find]
    jsr font_find
    // font_find(next_original, font_compressed, font_size)
    // [52] (byte) font_find::return#0 ← (byte) font_find::return#3 -- vbuaa=vbuxx 
    txa
    // font_compress::@5
    // found = font_find(next_original, font_compressed, font_size)
    // [53] (byte) font_compress::found#0 ← (byte) font_find::return#0
    // if(found==0xff)
    // [54] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$ff
    bne __b7
    // [55] phi from font_compress::@5 to font_compress::@3 [phi:font_compress::@5->font_compress::@3]
    // [55] phi (byte) font_compress::l#2 = (byte) 0 [phi:font_compress::@5->font_compress::@3#0] -- vbuyy=vbuc1 
    ldy #0
  // Glyph not found - create it
    // [55] phi from font_compress::@3 to font_compress::@3 [phi:font_compress::@3->font_compress::@3]
    // [55] phi (byte) font_compress::l#2 = (byte) font_compress::l#1 [phi:font_compress::@3->font_compress::@3#0] -- register_copy 
    // font_compress::@3
  __b3:
    // next_compressed[l] = next_original[l]
    // [56] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2) -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (next_original),y
    sta (next_compressed),y
    // for(char l:0..7)
    // [57] (byte) font_compress::l#1 ← ++ (byte) font_compress::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [58] if((byte) font_compress::l#1!=(byte) 8) goto font_compress::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3
    // font_compress::@4
    // next_compressed += 8
    // [59] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_compressed
    sta.z next_compressed
    bcc !+
    inc.z next_compressed+1
  !:
    // font_size++;
    // [60] (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#2 -- vbuxx=_inc_vbuz1 
    ldx.z font_size
    inx
    // [61] (byte) font_compress::found#3 ← (byte) font_compress::font_size#2 -- vbuaa=vbuz1 
    lda.z font_size
    // [62] phi from font_compress::@4 font_compress::@7 to font_compress::@2 [phi:font_compress::@4/font_compress::@7->font_compress::@2]
    // [62] phi (byte*) font_compress::next_compressed#7 = (byte*) font_compress::next_compressed#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#0] -- register_copy 
    // [62] phi (byte) font_compress::return#1 = (byte) font_compress::font_size#1 [phi:font_compress::@4/font_compress::@7->font_compress::@2#1] -- register_copy 
    // [62] phi (byte) font_compress::found#2 = (byte) font_compress::found#3 [phi:font_compress::@4/font_compress::@7->font_compress::@2#2] -- register_copy 
    // font_compress::@2
  __b2:
    // compress_mapping[i] = found
    // [63] *((const byte*) FONT_COMPRESSED_MAP + (byte) font_compress::i#4) ← (byte) font_compress::found#2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta FONT_COMPRESSED_MAP,y
    // next_original += 8
    // [64] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // for(char i: 0..0xff)
    // [65] (byte) font_compress::i#1 ← ++ (byte) font_compress::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [66] if((byte) font_compress::i#1!=(byte) 0) goto font_compress::@6 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b6
    // font_compress::@return
    // }
    // [67] return 
    rts
    // font_compress::@6
  __b6:
    // [68] (byte) font_compress::font_size#9 ← (byte) font_compress::return#1 -- vbuz1=vbuxx 
    stx.z font_size
    // [48] phi from font_compress::@6 to font_compress::@1 [phi:font_compress::@6->font_compress::@1]
    // [48] phi (byte*) font_compress::next_compressed#4 = (byte*) font_compress::next_compressed#7 [phi:font_compress::@6->font_compress::@1#0] -- register_copy 
    // [48] phi (byte) font_compress::i#4 = (byte) font_compress::i#1 [phi:font_compress::@6->font_compress::@1#1] -- register_copy 
    // [48] phi (byte) font_compress::font_size#2 = (byte) font_compress::font_size#9 [phi:font_compress::@6->font_compress::@1#2] -- register_copy 
    // [48] phi (byte*) font_compress::next_original#2 = (byte*) font_compress::next_original#1 [phi:font_compress::@6->font_compress::@1#3] -- register_copy 
    jmp __b1
    // font_compress::@7
  __b7:
    // [69] (byte) font_compress::return#5 ← (byte) font_compress::font_size#2 -- vbuxx=vbuz1 
    ldx.z font_size
    jmp __b2
}
  // font_find
// Look for a glyph within a font
// Only looks at the first font_size glyphs
// Returns the index of the glyph within the font. Returns 0xff if the glyph is not found.
// font_find(byte* zp($d) glyph, byte* zp(7) font, byte zp(9) font_size)
font_find: {
    .label glyph = $d
    .label font_size = 9
    .label font = 7
    // [71] phi from font_find to font_find::@1 [phi:font_find->font_find::@1]
    // [71] phi (byte*) font_find::font#4 = (const nomodify byte*) FONT_COMPRESSED [phi:font_find->font_find::@1#0] -- pbuz1=pbuc1 
    lda #<FONT_COMPRESSED
    sta.z font
    lda #>FONT_COMPRESSED
    sta.z font+1
    // [71] phi (byte) font_find::i#2 = (byte) 0 [phi:font_find->font_find::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // font_find::@1
  __b1:
    // for(char i=0;i<font_size;i++)
    // [72] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2 -- vbuxx_lt_vbuz1_then_la1 
    cpx.z font_size
    bcc __b6
    // [73] phi from font_find::@1 to font_find::@return [phi:font_find::@1->font_find::@return]
    // [73] phi (byte) font_find::return#3 = (byte) $ff [phi:font_find::@1->font_find::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    // font_find::@return
    // }
    // [74] return 
    rts
    // [75] phi from font_find::@1 to font_find::@2 [phi:font_find::@1->font_find::@2]
  __b6:
    // [75] phi (byte) font_find::l#2 = (byte) 0 [phi:font_find::@1->font_find::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [75] phi from font_find::@3 to font_find::@2 [phi:font_find::@3->font_find::@2]
    // [75] phi (byte) font_find::l#2 = (byte) font_find::l#1 [phi:font_find::@3->font_find::@2#0] -- register_copy 
    // font_find::@2
  __b2:
    // if(glyph[l]!=font[l])
    // [76] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3 -- pbuz1_derefidx_vbuyy_eq_pbuz2_derefidx_vbuyy_then_la1 
    lda (glyph),y
    cmp (font),y
    beq __b3
    // [79] phi from font_find::@2 to font_find::@4 [phi:font_find::@2->font_find::@4]
    // [79] phi (byte) font_find::found#2 = (byte) 0 [phi:font_find::@2->font_find::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // font_find::@3
  __b3:
    // for(char l:0..7)
    // [77] (byte) font_find::l#1 ← ++ (byte) font_find::l#2 -- vbuyy=_inc_vbuyy 
    iny
    // [78] if((byte) font_find::l#1!=(byte) 8) goto font_find::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2
    // [79] phi from font_find::@3 to font_find::@4 [phi:font_find::@3->font_find::@4]
    // [79] phi (byte) font_find::found#2 = (byte) 1 [phi:font_find::@3->font_find::@4#0] -- vbuaa=vbuc1 
    lda #1
    // font_find::@4
  __b4:
    // if(found)
    // [80] if((byte) 0==(byte) font_find::found#2) goto font_find::@5 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b5
    // [73] phi from font_find::@4 to font_find::@return [phi:font_find::@4->font_find::@return]
    // [73] phi (byte) font_find::return#3 = (byte) font_find::i#2 [phi:font_find::@4->font_find::@return#0] -- register_copy 
    rts
    // font_find::@5
  __b5:
    // font += 8
    // [81] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z font
    sta.z font
    bcc !+
    inc.z font+1
  !:
    // for(char i=0;i<font_size;i++)
    // [82] (byte) font_find::i#1 ← ++ (byte) font_find::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [71] phi from font_find::@5 to font_find::@1 [phi:font_find::@5->font_find::@1]
    // [71] phi (byte*) font_find::font#4 = (byte*) font_find::font#1 [phi:font_find::@5->font_find::@1#0] -- register_copy 
    // [71] phi (byte) font_find::i#2 = (byte) font_find::i#1 [phi:font_find::@5->font_find::@1#1] -- register_copy 
    jmp __b1
}
  // font_2x2
// Create a 2x2-font by doubling all pixels of the 64 first chars
font_2x2: {
    .label __5 = $d
    .label __7 = $d
    .label next_2x2_left = 5
    .label next_2x2_right = $11
    .label glyph_bits = $c
    .label glyph_bits_2x2 = $d
    .label l2 = $b
    .label l = $a
    .label next_2x2_left_1 = $f
    .label next_2x2 = 5
    .label next_original = 7
    .label c = 9
    // [84] phi from font_2x2 to font_2x2::@1 [phi:font_2x2->font_2x2::@1]
    // [84] phi (byte) font_2x2::c#11 = (byte) 0 [phi:font_2x2->font_2x2::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [84] phi (byte*) font_2x2::next_original#4 = (const nomodify byte*) CHARGEN [phi:font_2x2->font_2x2::@1#1] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z next_original
    lda #>CHARGEN
    sta.z next_original+1
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (const nomodify byte*) FONT_ORIGINAL [phi:font_2x2->font_2x2::@1#2] -- pbuz1=pbuc1 
    lda #<FONT_ORIGINAL
    sta.z next_2x2_left
    lda #>FONT_ORIGINAL
    sta.z next_2x2_left+1
    // [84] phi from font_2x2::@9 to font_2x2::@1 [phi:font_2x2::@9->font_2x2::@1]
    // [84] phi (byte) font_2x2::c#11 = (byte) font_2x2::c#1 [phi:font_2x2::@9->font_2x2::@1#0] -- register_copy 
    // [84] phi (byte*) font_2x2::next_original#4 = (byte*) font_2x2::next_original#1 [phi:font_2x2::@9->font_2x2::@1#1] -- register_copy 
    // [84] phi (byte*) font_2x2::next_2x2_left#0 = (byte*) font_2x2::next_2x2#1 [phi:font_2x2::@9->font_2x2::@1#2] -- register_copy 
    // font_2x2::@1
  __b1:
    // next_2x2_right = next_2x2 + 0x40*8
    // [85] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$40*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$40*8
    sta.z next_2x2_right+1
    // [86] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0 -- pbuz1=pbuz2 
    lda.z next_2x2_left
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    sta.z next_2x2_left_1+1
    // [87] phi from font_2x2::@1 to font_2x2::@2 [phi:font_2x2::@1->font_2x2::@2]
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#0 [phi:font_2x2::@1->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#10 [phi:font_2x2::@1->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) 0 [phi:font_2x2::@1->font_2x2::@2#3] -- vbuz1=vbuc1 
    sta.z l
    // [87] phi from font_2x2::@8 to font_2x2::@2 [phi:font_2x2::@8->font_2x2::@2]
    // [87] phi (byte*) font_2x2::next_2x2_right#7 = (byte*) font_2x2::next_2x2_right#8 [phi:font_2x2::@8->font_2x2::@2#0] -- register_copy 
    // [87] phi (byte) font_2x2::l2#8 = (byte) font_2x2::l2#9 [phi:font_2x2::@8->font_2x2::@2#1] -- register_copy 
    // [87] phi (byte*) font_2x2::next_2x2_left#7 = (byte*) font_2x2::next_2x2_left#8 [phi:font_2x2::@8->font_2x2::@2#2] -- register_copy 
    // [87] phi (byte) font_2x2::l#2 = (byte) font_2x2::l#1 [phi:font_2x2::@8->font_2x2::@2#3] -- register_copy 
    // font_2x2::@2
  __b2:
    // glyph_bits = next_original[l]
    // [88] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z l
    lda (next_original),y
    sta.z glyph_bits
    // [89] phi from font_2x2::@2 to font_2x2::@3 [phi:font_2x2::@2->font_2x2::@3]
    // [89] phi (byte) font_2x2::b#2 = (byte) 0 [phi:font_2x2::@2->font_2x2::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) 0 [phi:font_2x2::@2->font_2x2::@3#1] -- vwuz1=vwuc1 
    tya
    sta.z glyph_bits_2x2
    sta.z glyph_bits_2x2+1
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#0 [phi:font_2x2::@2->font_2x2::@3#2] -- register_copy 
    // [89] phi from font_2x2::@5 to font_2x2::@3 [phi:font_2x2::@5->font_2x2::@3]
    // [89] phi (byte) font_2x2::b#2 = (byte) font_2x2::b#1 [phi:font_2x2::@5->font_2x2::@3#0] -- register_copy 
    // [89] phi (word) font_2x2::glyph_bits_2x2#3 = (word) font_2x2::glyph_bits_2x2#2 [phi:font_2x2::@5->font_2x2::@3#1] -- register_copy 
    // [89] phi (byte) font_2x2::glyph_bits#2 = (byte) font_2x2::glyph_bits#1 [phi:font_2x2::@5->font_2x2::@3#2] -- register_copy 
    // font_2x2::@3
  __b3:
    // glyph_bits&0x80
    // [90] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z glyph_bits
    // (glyph_bits&0x80)?1uc:0uc
    // [91] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b4
    // [93] phi from font_2x2::@3 to font_2x2::@5 [phi:font_2x2::@3->font_2x2::@5]
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 0 [phi:font_2x2::@3->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // [92] phi from font_2x2::@3 to font_2x2::@4 [phi:font_2x2::@3->font_2x2::@4]
    // font_2x2::@4
  __b4:
    // (glyph_bits&0x80)?1uc:0uc
    // [93] phi from font_2x2::@4 to font_2x2::@5 [phi:font_2x2::@4->font_2x2::@5]
    // [93] phi (byte) font_2x2::glyph_bit#0 = (byte) 1 [phi:font_2x2::@4->font_2x2::@5#0] -- vbuxx=vbuc1 
    ldx #1
    // font_2x2::@5
  __b5:
    // glyph_bits_2x2<<1
    // [94] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // glyph_bits_2x2 = glyph_bits_2x2<<1|glyph_bit
    // [95] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // glyph_bits_2x2<<1
    // [96] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z __7
    rol.z __7+1
    // glyph_bits_2x2 = glyph_bits_2x2<<1|glyph_bit
    // [97] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0 -- vwuz1=vwuz1_bor_vbuxx 
    txa
    ora.z glyph_bits_2x2
    sta.z glyph_bits_2x2
    // glyph_bits <<= 1
    // [98] (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    // Move to next bit
    asl.z glyph_bits
    // for(char b: 0..7)
    // [99] (byte) font_2x2::b#1 ← ++ (byte) font_2x2::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [100] if((byte) font_2x2::b#1!=(byte) 8) goto font_2x2::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3
    // font_2x2::@6
    // >glyph_bits_2x2
    // [101] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2 -- vbuaa=_hi_vwuz1 
    lda.z glyph_bits_2x2+1
    // next_2x2_left[l2] = >glyph_bits_2x2
    // [102] *((byte*) font_2x2::next_2x2_left#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Put the generated 2x2-line into the 2x2-font twice
    ldy.z l2
    sta (next_2x2_left_1),y
    // l2+1
    // [103] (byte~) font_2x2::$11 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    iny
    // next_2x2_left[l2+1] = >glyph_bits_2x2
    // [104] *((byte*) font_2x2::next_2x2_left#7 + (byte~) font_2x2::$11) ← (byte~) font_2x2::$12 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_left_1),y
    // <glyph_bits_2x2
    // [105] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2 -- vbuaa=_lo_vwuz1 
    lda.z glyph_bits_2x2
    // next_2x2_right[l2] = <glyph_bits_2x2
    // [106] *((byte*) font_2x2::next_2x2_right#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z l2
    sta (next_2x2_right),y
    // l2+1
    // [107] (byte~) font_2x2::$14 ← (byte) font_2x2::l2#8 + (byte) 1 -- vbuyy=vbuz1_plus_1 
    iny
    // next_2x2_right[l2+1] = <glyph_bits_2x2
    // [108] *((byte*) font_2x2::next_2x2_right#7 + (byte~) font_2x2::$14) ← (byte~) font_2x2::$15 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (next_2x2_right),y
    // l2 += 2
    // [109] (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#8 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z l2
    clc
    adc #2
    sta.z l2
    // if(l2==8)
    // [110] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l2
    bne __b8
    // font_2x2::@7
    // next_2x2_left = next_2x2 + 0x80*8
    // [111] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$80*8
    sta.z next_2x2_left_1
    lda.z next_2x2_left+1
    adc #>$80*8
    sta.z next_2x2_left_1+1
    // next_2x2_right = next_2x2 + 0xc0*8
    // [112] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z next_2x2_left
    clc
    adc #<$c0*8
    sta.z next_2x2_right
    lda.z next_2x2_left+1
    adc #>$c0*8
    sta.z next_2x2_right+1
    // [113] phi from font_2x2::@7 to font_2x2::@8 [phi:font_2x2::@7->font_2x2::@8]
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#1 [phi:font_2x2::@7->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) 0 [phi:font_2x2::@7->font_2x2::@8#1] -- vbuz1=vbuc1 
    lda #0
    sta.z l2
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#1 [phi:font_2x2::@7->font_2x2::@8#2] -- register_copy 
    // [113] phi from font_2x2::@6 to font_2x2::@8 [phi:font_2x2::@6->font_2x2::@8]
    // [113] phi (byte*) font_2x2::next_2x2_right#8 = (byte*) font_2x2::next_2x2_right#7 [phi:font_2x2::@6->font_2x2::@8#0] -- register_copy 
    // [113] phi (byte) font_2x2::l2#9 = (byte) font_2x2::l2#1 [phi:font_2x2::@6->font_2x2::@8#1] -- register_copy 
    // [113] phi (byte*) font_2x2::next_2x2_left#8 = (byte*) font_2x2::next_2x2_left#7 [phi:font_2x2::@6->font_2x2::@8#2] -- register_copy 
    // font_2x2::@8
  __b8:
    // for(char l: 0..7)
    // [114] (byte) font_2x2::l#1 ← ++ (byte) font_2x2::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [115] if((byte) font_2x2::l#1!=(byte) 8) goto font_2x2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2
    // font_2x2::@9
    // next_2x2 += 8
    // [116] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    clc
    adc.z next_2x2
    sta.z next_2x2
    bcc !+
    inc.z next_2x2+1
  !:
    // next_original += 8
    // [117] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #8
    clc
    adc.z next_original
    sta.z next_original
    bcc !+
    inc.z next_original+1
  !:
    // for(char c: 0..0x3f)
    // [118] (byte) font_2x2::c#1 ← ++ (byte) font_2x2::c#11 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [119] if((byte) font_2x2::c#1!=(byte) $40) goto font_2x2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$40
    cmp.z c
    beq !__b1+
    jmp __b1
  !__b1:
    // font_2x2::@return
    // }
    // [120] return 
    rts
}
  // File Data
  .align $100
  FONT_COMPRESSED_MAP: .fill $100, 0

