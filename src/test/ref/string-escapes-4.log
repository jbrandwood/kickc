Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  *((byte*)(number) $d018) ← (number) $17
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (bool~) main::$1 ← (number) 0 != *((const byte*) MSG1 + (byte) main::i#2)
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#3)
  call chrout 
  to:main::@4
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  *((const byte*) SCREEN1 + (byte) main::i#4) ← *((const byte*) MSG2 + (byte) main::i#4)
  (byte) main::i#1 ← ++ (byte) main::i#4
  to:main::@1
main::@3: scope:[main]  from main::@1
  *((const byte*) SCREEN2 + (number) 0) ← (const byte) CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

(void()) chrout((byte) chrout::petscii)
chrout: scope:[chrout]  from main::@2
  (byte) chrout::petscii#1 ← phi( main::@2/(byte) chrout::petscii#0 )
  kickasm( uses chrout::petscii#1) {{ jsr $ffd2
     }}
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) CH = (byte) ''su
(const byte*) MSG1[]  = (byte*) "cAmElot"pm
(const byte*) MSG2[]  = (byte*) "CAMELOT"su
(const byte*) SCREEN1 = (byte*)(number) $400
(const byte*) SCREEN2 = (byte*)(number) $428
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) chrout((byte) chrout::petscii)
(label) chrout::@return
(byte) chrout::petscii !reg byte a
(byte) chrout::petscii#0 !reg byte a
(byte) chrout::petscii#1 !reg byte a
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Adding number conversion cast (unumber) $17 in *((byte*)(number) $d018) ← (number) $17
Adding number conversion cast (unumber) 0 in (bool~) main::$1 ← (number) 0 != *((const byte*) MSG1 + (byte) main::i#2)
Adding number conversion cast (unumber) 0 in *((const byte*) SCREEN2 + (number) 0) ← (const byte) CH
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)(number) $d018) ← (unumber)(number) $17
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1064
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [4] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN2 in [9] *((const byte*) SCREEN2 + (byte) 0) ← (const byte) CH
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH
Calls in [main] to chrout:7 

Created 2 initial phi equivalence classes
Coalesced [6] chrout::petscii#2 ← chrout::petscii#0
Coalesced [10] main::i#5 ← main::i#1
Coalesced down to 2 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((byte*) 53272) ← (byte) $17
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *((const byte*) SCREEN2) ← (const byte) CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2)
  [6] call chrout 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2)
  [8] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1

(void()) chrout((byte) chrout::petscii)
chrout: scope:[chrout]  from main::@2
  [9] (byte) chrout::petscii#1 ← phi( main::@2/(byte) chrout::petscii#0 )
  kickasm( uses chrout::petscii#1) {{ jsr $ffd2
     }}
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) chrout((byte) chrout::petscii)
(byte) chrout::petscii !reg byte a
(byte) chrout::petscii#0 !reg byte a 22.0
(byte) chrout::petscii#1 !reg byte a 11.0
(void()) main()
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 13.2

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ chrout::petscii#1 chrout::petscii#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ chrout::petscii#1 chrout::petscii#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = '\$de'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  // main
main: {
    .label i = 2
    // [0] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp MSG1,y
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *((const byte*) SCREEN2) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z i
    lda MSG1,y
    // [6] call chrout 
    // [9] phi from main::@2 to chrout [phi:main::@2->chrout]
  chrout_from___b2:
    // [9] phi (byte) chrout::petscii#1 = (byte) chrout::petscii#0 [phi:main::@2->chrout#0] -- register_copy 
    jsr chrout
    jmp __b4
    // main::@4
  __b4:
    // [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda MSG2,y
    sta SCREEN1,y
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// chrout(byte register(A) petscii)
chrout: {
    // kickasm( uses chrout::petscii#1) {{ jsr $ffd2      }}
    jsr $ffd2
    
    jmp __breturn
    // chrout::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*) 53272) ← (byte) $17 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((const byte*) SCREEN2) ← (const byte) CH [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2) [ main::i#2 chrout::petscii#0 ] (  [ main::i#2 chrout::petscii#0 ] { { chrout::petscii#0 = chrout::petscii#1 } }  ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [0] *((byte*) 53272) ← (byte) $17 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) SCREEN2) ← (const byte) CH [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2) [ main::i#2 chrout::petscii#0 ] (  [ main::i#2 chrout::petscii#0 ] { { chrout::petscii#0 = chrout::petscii#1 } }  ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers reg byte a [ chrout::petscii#1 chrout::petscii#0 ] : reg byte a , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 35.2: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [chrout] 33: reg byte a [ chrout::petscii#1 chrout::petscii#0 ] 
Uplift Scope [] 

Uplifting [main] best 655 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [chrout] best 655 combination reg byte a [ chrout::petscii#1 chrout::petscii#0 ] 
Uplifting [] best 655 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = '\$de'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  // main
main: {
    // [0] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *((const byte*) SCREEN2) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda MSG1,x
    // [6] call chrout 
    // [9] phi from main::@2 to chrout [phi:main::@2->chrout]
  chrout_from___b2:
    // [9] phi (byte) chrout::petscii#1 = (byte) chrout::petscii#0 [phi:main::@2->chrout#0] -- register_copy 
    jsr chrout
    jmp __b4
    // main::@4
  __b4:
    // [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN1,x
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// chrout(byte register(A) petscii)
chrout: {
    // kickasm( uses chrout::petscii#1) {{ jsr $ffd2      }}
    jsr $ffd2
    
    jmp __breturn
    // chrout::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction chrout_from___b2:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) CH = (byte) ''su
(const byte*) MSG1[]  = (byte*) "cAmElot"pm
(const byte*) MSG2[]  = (byte*) "CAMELOT"su
(const byte*) SCREEN1 = (byte*) 1024
(const byte*) SCREEN2 = (byte*) 1064
(void()) chrout((byte) chrout::petscii)
(label) chrout::@return
(byte) chrout::petscii !reg byte a
(byte) chrout::petscii#0 !reg byte a 22.0
(byte) chrout::petscii#1 !reg byte a 11.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 13.2

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ chrout::petscii#1 chrout::petscii#0 ]


FINAL ASSEMBLER
Score: 586

  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = '\$de'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
  // main
main: {
    // *((char*)0xd018) = 0x17
    // [0] *((byte*) 53272) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // while(MSG1[i])
    // [2] if((byte) 0!=*((const byte*) MSG1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    // main::@3
    // SCREEN2[0] = CH
    // [3] *((const byte*) SCREEN2) ← (const byte) CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN2
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // chrout(MSG1[i])
    // [5] (byte) chrout::petscii#0 ← *((const byte*) MSG1 + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda MSG1,x
    // [6] call chrout 
    // [9] phi from main::@2 to chrout [phi:main::@2->chrout]
    // [9] phi (byte) chrout::petscii#1 = (byte) chrout::petscii#0 [phi:main::@2->chrout#0] -- register_copy 
    jsr chrout
    // main::@4
    // SCREEN1[i] = MSG2[i]
    // [7] *((const byte*) SCREEN1 + (byte) main::i#2) ← *((const byte*) MSG2 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN1,x
    // i++;
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// chrout(byte register(A) petscii)
chrout: {
    // kickasm
    // kickasm( uses chrout::petscii#1) {{ jsr $ffd2      }}
    jsr $ffd2
    
    // chrout::@return
    // }
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

