Inlined call vicSelectGfxBank::$0 = call toDd00(vicSelectGfxBank::gfx)
Inlined call call plexSetScreen(plexInit::screen)
Inlined call call plexFreePrepare
Inlined call call plexFreeAdd(plexShowSprite::ypos)
Inlined call loop::rasterY = call plexFreeNextYpos
Inlined call call __init
Eliminating unused variable with no statement plexShowSprite::$0
Eliminating unused variable with no statement loop::$7

CONTROL FLOW GRAPH SSA

void plexInit(char *screen)
plexInit: scope:[plexInit]  from init
  plexInit::screen#1 = phi( init/plexInit::screen#0 )
  plexInit::plexSetScreen1_screen#0 = plexInit::screen#1
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  plexInit::plexSetScreen1_screen#1 = phi( plexInit/plexInit::plexSetScreen1_screen#0 )
  plexInit::plexSetScreen1_$0 = plexInit::plexSetScreen1_screen#1 + $3f8
  PLEX_SCREEN_PTR = plexInit::plexSetScreen1_$0
  to:plexInit::@2
plexInit::@2: scope:[plexInit]  from plexInit::plexSetScreen1
  plexInit::i#0 = 0
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::@2
  plexInit::i#2 = phi( plexInit::@1/plexInit::i#1, plexInit::@2/plexInit::i#0 )
  PLEX_SORTED_IDX[plexInit::i#2] = plexInit::i#2
  plexInit::i#1 = plexInit::i#2 + rangenext(0,PLEX_COUNT-1)
  plexInit::$1 = plexInit::i#1 != rangelast(0,PLEX_COUNT-1)
  if(plexInit::$1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  return 
  to:@return

void plexSort()
plexSort: scope:[plexSort]  from loop::@5
  plexSort::m#0 = 0
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  plexSort::m#2 = phi( plexSort/plexSort::m#0, plexSort::@2/plexSort::m#1 )
  plexSort::$1 = plexSort::m#2 + 1
  plexSort::nxt_idx#0 = PLEX_SORTED_IDX[plexSort::$1]
  plexSort::nxt_y#0 = PLEX_YPOS[plexSort::nxt_idx#0]
  plexSort::$2 = plexSort::nxt_y#0 < PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]
  plexSort::$3 = ! plexSort::$2
  if(plexSort::$3) goto plexSort::@2
  to:plexSort::@5
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  plexSort::m#3 = phi( plexSort::@1/plexSort::m#2, plexSort::@4/plexSort::m#5 )
  plexSort::m#1 = plexSort::m#3 + rangenext(0,PLEX_COUNT-2)
  plexSort::$8 = plexSort::m#1 != rangelast(0,PLEX_COUNT-2)
  if(plexSort::$8) goto plexSort::@1
  to:plexSort::@6
plexSort::@5: scope:[plexSort]  from plexSort::@1
  plexSort::nxt_idx#3 = phi( plexSort::@1/plexSort::nxt_idx#0 )
  plexSort::nxt_y#2 = phi( plexSort::@1/plexSort::nxt_y#0 )
  plexSort::m#4 = phi( plexSort::@1/plexSort::m#2 )
  plexSort::s#0 = plexSort::m#4
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@3 plexSort::@5
  plexSort::m#6 = phi( plexSort::@3/plexSort::m#6, plexSort::@5/plexSort::m#4 )
  plexSort::nxt_idx#2 = phi( plexSort::@3/plexSort::nxt_idx#2, plexSort::@5/plexSort::nxt_idx#3 )
  plexSort::nxt_y#1 = phi( plexSort::@3/plexSort::nxt_y#1, plexSort::@5/plexSort::nxt_y#2 )
  plexSort::s#3 = phi( plexSort::@3/plexSort::s#1, plexSort::@5/plexSort::s#0 )
  plexSort::$4 = plexSort::s#3 + 1
  PLEX_SORTED_IDX[plexSort::$4] = PLEX_SORTED_IDX[plexSort::s#3]
  plexSort::s#1 = -- plexSort::s#3
  plexSort::$5 = plexSort::s#1 != $ff
  plexSort::$6 = plexSort::nxt_y#1 < PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]
  plexSort::$7 = plexSort::$5 && plexSort::$6
  if(plexSort::$7) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3
  plexSort::m#5 = phi( plexSort::@3/plexSort::m#6 )
  plexSort::nxt_idx#1 = phi( plexSort::@3/plexSort::nxt_idx#2 )
  plexSort::s#4 = phi( plexSort::@3/plexSort::s#1 )
  plexSort::s#2 = ++ plexSort::s#4
  PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#1
  to:plexSort::@2
plexSort::@6: scope:[plexSort]  from plexSort::@2
  plex_show_idx = 0
  plex_sprite_idx = 0
  plex_sprite_msb = 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  plexSort::plexFreePrepare1_s#0 = 0
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  plexSort::plexFreePrepare1_s#2 = phi( plexSort::plexFreePrepare1/plexSort::plexFreePrepare1_s#0, plexSort::plexFreePrepare1_@1/plexSort::plexFreePrepare1_s#1 )
  PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0
  plexSort::plexFreePrepare1_s#1 = plexSort::plexFreePrepare1_s#2 + rangenext(0,7)
  plexSort::plexFreePrepare1_$0 = plexSort::plexFreePrepare1_s#1 != rangelast(0,7)
  if(plexSort::plexFreePrepare1_$0) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  plex_free_next = 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  return 
  to:@return

void plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@10
  plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx * 2
  plexShowSprite::ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]]
  SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::ypos#0
  plexShowSprite::plexFreeAdd1_ypos#0 = plexShowSprite::ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  plexShowSprite::plex_sprite_idx2#2 = phi( plexShowSprite/plexShowSprite::plex_sprite_idx2#0 )
  plexShowSprite::plexFreeAdd1_ypos#1 = phi( plexShowSprite/plexShowSprite::plexFreeAdd1_ypos#0 )
  plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#1 + $16
  PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0
  plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1
  plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7
  plex_free_next = plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  plexShowSprite::plex_sprite_idx2#1 = phi( plexShowSprite::plexFreeAdd1/plexShowSprite::plex_sprite_idx2#2 )
  PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]]
  plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx]
  plexShowSprite::$9 = plexShowSprite::xpos_idx#0 * SIZEOF_UNSIGNED_INT
  SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#1] = (char)PLEX_XPOS[plexShowSprite::$9]
  plexShowSprite::$10 = plexShowSprite::xpos_idx#0 * SIZEOF_UNSIGNED_INT
  plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10]
  plexShowSprite::$3 = plexShowSprite::$2 != 0
  if(plexShowSprite::$3) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb
  to:plexShowSprite::@2
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  plexShowSprite::$8 = $ff ^ plex_sprite_msb
  *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  plexShowSprite::$4 = plex_sprite_idx + 1
  plexShowSprite::$5 = plexShowSprite::$4 & 7
  plex_sprite_idx = plexShowSprite::$5
  plex_show_idx = ++ plex_show_idx
  plex_sprite_msb = plex_sprite_msb << 1
  plexShowSprite::$6 = plex_sprite_msb == 0
  plexShowSprite::$7 = ! plexShowSprite::$6
  if(plexShowSprite::$7) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  plex_sprite_msb = 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  call init
  to:main::@1
main::@1: scope:[main]  from main
  call loop
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void init()
init: scope:[init]  from main
  *D011 = VICII_DEN|VICII_RSEL|3
  plexInit::screen#0 = SCREEN
  call plexInit
  to:init::@4
init::@4: scope:[init]  from init
  init::xp#0 = $20
  init::sx#0 = 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@4
  init::xp#2 = phi( init::@1/init::xp#1, init::@4/init::xp#0 )
  init::sx#2 = phi( init::@1/init::sx#1, init::@4/init::sx#0 )
  PLEX_PTR[init::sx#2] = (char)SPRITE/$40
  init::$3 = init::sx#2 * SIZEOF_UNSIGNED_INT
  PLEX_XPOS[init::$3] = init::xp#2
  init::xp#1 = init::xp#2 + 9
  init::sx#1 = init::sx#2 + rangenext(0,PLEX_COUNT-1)
  init::$1 = init::sx#1 != rangelast(0,PLEX_COUNT-1)
  if(init::$1) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
  init::ss#0 = 0
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  init::ss#2 = phi( init::@2/init::ss#0, init::@3/init::ss#1 )
  SPRITES_COLOR[init::ss#2] = GREEN
  init::ss#1 = init::ss#2 + rangenext(0,7)
  init::$2 = init::ss#1 != rangelast(0,7)
  if(init::$2) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  return 
  to:@return

void loop()
loop: scope:[loop]  from main::@1
  loop::sin_idx#0 = 0
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@11
  loop::sin_idx#6 = phi( loop/loop::sin_idx#0, loop::@11/loop::sin_idx#7 )
  if(true) goto loop::@2
  to:loop::@return
loop::@2: scope:[loop]  from loop::@1 loop::@2
  loop::sin_idx#4 = phi( loop::@1/loop::sin_idx#6, loop::@2/loop::sin_idx#4 )
  loop::$0 = *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
  if(loop::$0) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  loop::sin_idx#2 = phi( loop::@2/loop::sin_idx#4 )
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  loop::y_idx#0 = loop::sin_idx#2
  loop::sy#0 = 0
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  loop::sin_idx#5 = phi( loop::@3/loop::sin_idx#2, loop::@4/loop::sin_idx#5 )
  loop::sy#2 = phi( loop::@3/loop::sy#0, loop::@4/loop::sy#1 )
  loop::y_idx#2 = phi( loop::@3/loop::y_idx#0, loop::@4/loop::y_idx#1 )
  PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2]
  loop::y_idx#1 = loop::y_idx#2 + 8
  loop::sy#1 = loop::sy#2 + rangenext(0,PLEX_COUNT-1)
  loop::$2 = loop::sy#1 != rangelast(0,PLEX_COUNT-1)
  if(loop::$2) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  loop::sin_idx#3 = phi( loop::@4/loop::sin_idx#5 )
  loop::sin_idx#1 = loop::sin_idx#3 + 1
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  call plexSort
  to:loop::@13
loop::@13: scope:[loop]  from loop::@5
  loop::sin_idx#17 = phi( loop::@5/loop::sin_idx#1 )
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@13 loop::@6
  loop::sin_idx#16 = phi( loop::@13/loop::sin_idx#17, loop::@6/loop::sin_idx#16 )
  loop::$5 = *D011 & VICII_RST8
  loop::$6 = loop::$5 != 0
  if(loop::$6) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@6
  loop::sin_idx#15 = phi( loop::@6/loop::sin_idx#16 )
  loop::ss#0 = 0
  to:loop::@8
loop::@8: scope:[loop]  from loop::@14 loop::@7
  loop::sin_idx#14 = phi( loop::@14/loop::sin_idx#8, loop::@7/loop::sin_idx#15 )
  loop::ss#8 = phi( loop::@14/loop::ss#1, loop::@7/loop::ss#0 )
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@8
  loop::sin_idx#13 = phi( loop::@8/loop::sin_idx#14 )
  loop::ss#7 = phi( loop::@8/loop::ss#8 )
  loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next]
  to:loop::plexFreeNextYpos1_@return
loop::plexFreeNextYpos1_@return: scope:[loop]  from loop::plexFreeNextYpos1
  loop::sin_idx#12 = phi( loop::plexFreeNextYpos1/loop::sin_idx#13 )
  loop::ss#6 = phi( loop::plexFreeNextYpos1/loop::ss#7 )
  loop::plexFreeNextYpos1_return#2 = phi( loop::plexFreeNextYpos1/loop::plexFreeNextYpos1_return#0 )
  loop::plexFreeNextYpos1_return#1 = loop::plexFreeNextYpos1_return#2
  to:loop::@12
loop::@12: scope:[loop]  from loop::plexFreeNextYpos1_@return
  loop::sin_idx#11 = phi( loop::plexFreeNextYpos1_@return/loop::sin_idx#12 )
  loop::ss#5 = phi( loop::plexFreeNextYpos1_@return/loop::ss#6 )
  loop::plexFreeNextYpos1_return#3 = phi( loop::plexFreeNextYpos1_@return/loop::plexFreeNextYpos1_return#1 )
  loop::rasterY#0 = loop::plexFreeNextYpos1_return#3
  to:loop::@9
loop::@9: scope:[loop]  from loop::@12 loop::@9
  loop::sin_idx#10 = phi( loop::@12/loop::sin_idx#11, loop::@9/loop::sin_idx#10 )
  loop::ss#4 = phi( loop::@12/loop::ss#5, loop::@9/loop::ss#4 )
  loop::rasterY#1 = phi( loop::@12/loop::rasterY#0, loop::@9/loop::rasterY#1 )
  loop::$8 = *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) < loop::rasterY#1
  if(loop::$8) goto loop::@9
  to:loop::@10
loop::@10: scope:[loop]  from loop::@9
  loop::sin_idx#9 = phi( loop::@9/loop::sin_idx#10 )
  loop::ss#3 = phi( loop::@9/loop::ss#4 )
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  call plexShowSprite
  to:loop::@14
loop::@14: scope:[loop]  from loop::@10
  loop::sin_idx#8 = phi( loop::@10/loop::sin_idx#9 )
  loop::ss#2 = phi( loop::@10/loop::ss#3 )
  loop::ss#1 = loop::ss#2 + rangenext(0,PLEX_COUNT-1)
  loop::$11 = loop::ss#1 != rangelast(0,PLEX_COUNT-1)
  if(loop::$11) goto loop::@8
  to:loop::@11
loop::@11: scope:[loop]  from loop::@14
  loop::sin_idx#7 = phi( loop::@14/loop::sin_idx#8 )
  *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::@1
loop::@return: scope:[loop]  from loop::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  PLEX_SCREEN_PTR = (char *)$400+$3f8
  plex_show_idx = 0
  plex_sprite_idx = 0
  plex_sprite_msb = 1
  plex_free_next = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant const char BLACK = 0
__constant char * const D011 = (char *)$d011
__constant const char GREEN = 5
__constant char OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
__constant char OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
__constant char OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
__constant const char PLEX_COUNT = $20
__constant char PLEX_FREE_YPOS[8] = { fill( 8, 0) }
__constant char PLEX_PTR[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__loadstore char * volatile PLEX_SCREEN_PTR
__constant char PLEX_SORTED_IDX[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant unsigned int PLEX_XPOS[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant char PLEX_YPOS[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant char *SCREEN = (char *)$400
__constant char SIZEOF_UNSIGNED_INT = 2
__constant char SPRITE[] = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
__constant char * const SPRITES_COLOR = (char *)$d027
__constant char * const SPRITES_XMSB = (char *)$d010
__constant char * const SPRITES_XPOS = (char *)$d000
__constant char * const SPRITES_YPOS = (char *)$d001
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *)$d000
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
__constant const char VICII_RST8 = $80
__constant char YSIN[$100] = kickasm {{ .var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
void __start()
void init()
bool init::$1
bool init::$2
char init::$3
char init::ss
char init::ss#0
char init::ss#1
char init::ss#2
char init::sx
char init::sx#0
char init::sx#1
char init::sx#2
unsigned int init::xp
unsigned int init::xp#0
unsigned int init::xp#1
unsigned int init::xp#2
void loop()
bool loop::$0
bool loop::$11
bool loop::$2
char loop::$5
bool loop::$6
bool loop::$8
char loop::plexFreeNextYpos1_return
char loop::plexFreeNextYpos1_return#0
char loop::plexFreeNextYpos1_return#1
char loop::plexFreeNextYpos1_return#2
char loop::plexFreeNextYpos1_return#3
char loop::rasterY
char loop::rasterY#0
char loop::rasterY#1
char loop::sin_idx
char loop::sin_idx#0
char loop::sin_idx#1
char loop::sin_idx#10
char loop::sin_idx#11
char loop::sin_idx#12
char loop::sin_idx#13
char loop::sin_idx#14
char loop::sin_idx#15
char loop::sin_idx#16
char loop::sin_idx#17
char loop::sin_idx#2
char loop::sin_idx#3
char loop::sin_idx#4
char loop::sin_idx#5
char loop::sin_idx#6
char loop::sin_idx#7
char loop::sin_idx#8
char loop::sin_idx#9
char loop::ss
char loop::ss#0
char loop::ss#1
char loop::ss#2
char loop::ss#3
char loop::ss#4
char loop::ss#5
char loop::ss#6
char loop::ss#7
char loop::ss#8
char loop::sy
char loop::sy#0
char loop::sy#1
char loop::sy#2
char loop::y_idx
char loop::y_idx#0
char loop::y_idx#1
char loop::y_idx#2
void main()
void plexInit(char *screen)
bool plexInit::$1
char plexInit::i
char plexInit::i#0
char plexInit::i#1
char plexInit::i#2
char *plexInit::plexSetScreen1_$0
char *plexInit::plexSetScreen1_screen
char *plexInit::plexSetScreen1_screen#0
char *plexInit::plexSetScreen1_screen#1
char *plexInit::screen
char *plexInit::screen#0
char *plexInit::screen#1
void plexShowSprite()
char plexShowSprite::$10
char plexShowSprite::$2
bool plexShowSprite::$3
number plexShowSprite::$4
number plexShowSprite::$5
bool plexShowSprite::$6
bool plexShowSprite::$7
number plexShowSprite::$8
char plexShowSprite::$9
number plexShowSprite::plexFreeAdd1_$0
number plexShowSprite::plexFreeAdd1_$1
number plexShowSprite::plexFreeAdd1_$2
char plexShowSprite::plexFreeAdd1_ypos
char plexShowSprite::plexFreeAdd1_ypos#0
char plexShowSprite::plexFreeAdd1_ypos#1
char plexShowSprite::plex_sprite_idx2
char plexShowSprite::plex_sprite_idx2#0
char plexShowSprite::plex_sprite_idx2#1
char plexShowSprite::plex_sprite_idx2#2
char plexShowSprite::xpos_idx
char plexShowSprite::xpos_idx#0
char plexShowSprite::ypos
char plexShowSprite::ypos#0
void plexSort()
number plexSort::$1
bool plexSort::$2
bool plexSort::$3
number plexSort::$4
bool plexSort::$5
bool plexSort::$6
bool plexSort::$7
bool plexSort::$8
char plexSort::m
char plexSort::m#0
char plexSort::m#1
char plexSort::m#2
char plexSort::m#3
char plexSort::m#4
char plexSort::m#5
char plexSort::m#6
char plexSort::nxt_idx
char plexSort::nxt_idx#0
char plexSort::nxt_idx#1
char plexSort::nxt_idx#2
char plexSort::nxt_idx#3
char plexSort::nxt_y
char plexSort::nxt_y#0
char plexSort::nxt_y#1
char plexSort::nxt_y#2
bool plexSort::plexFreePrepare1_$0
char plexSort::plexFreePrepare1_s
char plexSort::plexFreePrepare1_s#0
char plexSort::plexFreePrepare1_s#1
char plexSort::plexFreePrepare1_s#2
char plexSort::s
char plexSort::s#0
char plexSort::s#1
char plexSort::s#2
char plexSort::s#3
char plexSort::s#4
__loadstore volatile char plex_free_next
__loadstore volatile char plex_show_idx
__loadstore volatile char plex_sprite_idx
__loadstore volatile char plex_sprite_msb

Adding number conversion cast (unumber) $3f8 in plexInit::plexSetScreen1_$0 = plexInit::plexSetScreen1_screen#1 + $3f8
Adding number conversion cast (unumber) 1 in plexInit::i#1 = plexInit::i#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) 1 in plexSort::$1 = plexSort::m#2 + 1
Adding number conversion cast (unumber) plexSort::$1 in plexSort::$1 = plexSort::m#2 + (unumber)1
Adding number conversion cast (unumber) 2 in plexSort::m#1 = plexSort::m#3 + rangenext(0,PLEX_COUNT-2)
Adding number conversion cast (unumber) 1 in plexSort::$4 = plexSort::s#3 + 1
Adding number conversion cast (unumber) plexSort::$4 in plexSort::$4 = plexSort::s#3 + (unumber)1
Adding number conversion cast (unumber) $ff in plexSort::$5 = plexSort::s#1 != $ff
Adding number conversion cast (unumber) 0 in plex_show_idx = 0
Adding number conversion cast (unumber) 0 in plex_sprite_idx = 0
Adding number conversion cast (unumber) 1 in plex_sprite_msb = 1
Adding number conversion cast (unumber) 0 in PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0
Adding number conversion cast (unumber) 0 in plex_free_next = 0
Adding number conversion cast (unumber) 2 in plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx * 2
Adding number conversion cast (unumber) $16 in plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#1 + $16
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$0 in plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#1 + (unumber)$16
Adding number conversion cast (unumber) 1 in plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$1 in plexShowSprite::plexFreeAdd1_$1 = plex_free_next + (unumber)1
Adding number conversion cast (unumber) 7 in plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$2 in plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & (unumber)7
Adding number conversion cast (unumber) 0 in plexShowSprite::$3 = plexShowSprite::$2 != 0
Adding number conversion cast (unumber) $ff in plexShowSprite::$8 = $ff ^ plex_sprite_msb
Adding number conversion cast (unumber) plexShowSprite::$8 in plexShowSprite::$8 = (unumber)$ff ^ plex_sprite_msb
Adding number conversion cast (unumber) 1 in plexShowSprite::$4 = plex_sprite_idx + 1
Adding number conversion cast (unumber) plexShowSprite::$4 in plexShowSprite::$4 = plex_sprite_idx + (unumber)1
Adding number conversion cast (unumber) 7 in plexShowSprite::$5 = plexShowSprite::$4 & 7
Adding number conversion cast (unumber) plexShowSprite::$5 in plexShowSprite::$5 = plexShowSprite::$4 & (unumber)7
Adding number conversion cast (unumber) 1 in plex_sprite_msb = plex_sprite_msb << 1
Adding number conversion cast (unumber) 0 in plexShowSprite::$6 = plex_sprite_msb == 0
Adding number conversion cast (unumber) 1 in plex_sprite_msb = 1
Adding number conversion cast (unumber) VICII_DEN|VICII_RSEL|3 in *D011 = VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 3 in *D011 = ((unumber)) VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) $40 in PLEX_PTR[init::sx#2] = (char)SPRITE/$40
Adding number conversion cast (unumber) 9 in init::xp#1 = init::xp#2 + 9
Adding number conversion cast (unumber) 1 in init::sx#1 = init::sx#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) $ff in *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
Adding number conversion cast (unumber) $ff in loop::$0 = *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
Adding number conversion cast (unumber) 8 in loop::y_idx#1 = loop::y_idx#2 + 8
Adding number conversion cast (unumber) 1 in loop::sy#1 = loop::sy#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) 1 in loop::sin_idx#1 = loop::sin_idx#3 + 1
Adding number conversion cast (unumber) 0 in loop::$6 = loop::$5 != 0
Adding number conversion cast (unumber) 1 in loop::ss#1 = loop::ss#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) $3f8 in PLEX_SCREEN_PTR = (char *)$400+$3f8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast plex_show_idx = (unumber)0
Inlining cast plex_sprite_idx = (unumber)0
Inlining cast plex_sprite_msb = (unumber)1
Inlining cast PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = (unumber)0
Inlining cast plex_free_next = (unumber)0
Inlining cast plex_sprite_msb = (unumber)1
Inlining cast *D011 = (unumber)VICII_DEN|VICII_RSEL|(unumber)3
Inlining cast *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 53248
Simplifying constant pointer cast (char *) 53249
Simplifying constant pointer cast (char *) 53264
Simplifying constant pointer cast (char *) 53287
Simplifying constant pointer cast (char *) 53265
Simplifying constant pointer cast (struct MOS6569_VICII *) 53248
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $3f8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $16
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast VICII_DEN|VICII_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 9
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $3f8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $3f8
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $ff
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) $16
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $ff
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) $40
Finalized unsigned number type (char) 9
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $ff
Finalized unsigned number type (char) $ff
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (unsigned int) $3f8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in plexSort::$1 = plexSort::m#2 + 1
Inferred type updated to char in plexSort::$4 = plexSort::s#3 + 1
Inferred type updated to char in plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#1 + $16
Inferred type updated to char in plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1
Inferred type updated to char in plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7
Inferred type updated to char in plexShowSprite::$8 = $ff ^ plex_sprite_msb
Inferred type updated to char in plexShowSprite::$4 = plex_sprite_idx + 1
Inferred type updated to char in plexShowSprite::$5 = plexShowSprite::$4 & 7
Inversing boolean not [18] plexSort::$3 = plexSort::nxt_y#0 >= PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]] from [17] plexSort::$2 = plexSort::nxt_y#0 < PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]
Inversing boolean not [76] plexShowSprite::$7 = plex_sprite_msb != 0 from [75] plexShowSprite::$6 = plex_sprite_msb == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)PLEX_SCREEN_PTR = plexInit::plexSetScreen1_$0 
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Alias plexInit::plexSetScreen1_screen#0 = plexInit::screen#1 plexInit::plexSetScreen1_screen#1 
Alias plexSort::m#2 = plexSort::m#4 plexSort::s#0 
Alias plexSort::nxt_y#0 = plexSort::nxt_y#2 
Alias plexSort::nxt_idx#0 = plexSort::nxt_idx#3 
Alias plexSort::s#1 = plexSort::s#4 
Alias plexSort::nxt_idx#1 = plexSort::nxt_idx#2 
Alias plexSort::m#5 = plexSort::m#6 
Alias plexShowSprite::plexFreeAdd1_ypos#0 = plexShowSprite::ypos#0 plexShowSprite::plexFreeAdd1_ypos#1 
Alias plexShowSprite::plex_sprite_idx2#0 = plexShowSprite::plex_sprite_idx2#2 plexShowSprite::plex_sprite_idx2#1 
Alias loop::sin_idx#2 = loop::sin_idx#4 loop::y_idx#0 
Alias loop::sin_idx#3 = loop::sin_idx#5 
Alias loop::sin_idx#1 = loop::sin_idx#17 
Alias loop::sin_idx#15 = loop::sin_idx#16 
Alias loop::ss#5 = loop::ss#7 loop::ss#8 loop::ss#6 
Alias loop::sin_idx#11 = loop::sin_idx#13 loop::sin_idx#14 loop::sin_idx#12 
Alias loop::plexFreeNextYpos1_return#0 = loop::plexFreeNextYpos1_return#2 loop::plexFreeNextYpos1_return#1 loop::plexFreeNextYpos1_return#3 loop::rasterY#0 
Alias loop::ss#2 = loop::ss#3 loop::ss#4 
Alias loop::sin_idx#10 = loop::sin_idx#9 loop::sin_idx#8 loop::sin_idx#7 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)PLEX_SCREEN_PTR = plexInit::plexSetScreen1_$0 
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Identical Phi Values plexInit::plexSetScreen1_screen#0 plexInit::screen#0
Identical Phi Values plexSort::nxt_y#1 plexSort::nxt_y#0
Identical Phi Values plexSort::nxt_idx#1 plexSort::nxt_idx#0
Identical Phi Values plexSort::m#5 plexSort::m#2
Identical Phi Values loop::sin_idx#2 loop::sin_idx#6
Identical Phi Values loop::sin_idx#3 loop::sin_idx#2
Identical Phi Values loop::sin_idx#15 loop::sin_idx#1
Identical Phi Values loop::rasterY#1 loop::plexFreeNextYpos1_return#0
Identical Phi Values loop::ss#2 loop::ss#5
Identical Phi Values loop::sin_idx#10 loop::sin_idx#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values plexSort::m#3 plexSort::m#2
Identical Phi Values loop::sin_idx#11 loop::sin_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [63] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition plexInit::$1 [8] if(plexInit::i#1!=rangelast(0,PLEX_COUNT-1)) goto plexInit::@1
Simple Condition plexSort::$3 [16] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2
Simple Condition plexSort::$8 [20] if(plexSort::m#1!=rangelast(0,PLEX_COUNT-2)) goto plexSort::@1
Simple Condition plexSort::plexFreePrepare1_$0 [39] if(plexSort::plexFreePrepare1_s#1!=rangelast(0,7)) goto plexSort::plexFreePrepare1_@1
Simple Condition plexShowSprite::$3 [57] if(plexShowSprite::$2!=0) goto plexShowSprite::@1
Simple Condition plexShowSprite::$7 [67] if(plex_sprite_msb!=0) goto plexShowSprite::@return
Simple Condition init::$1 [86] if(init::sx#1!=rangelast(0,PLEX_COUNT-1)) goto init::@1
Simple Condition init::$2 [93] if(init::ss#1!=rangelast(0,7)) goto init::@3
Simple Condition loop::$0 [100] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2
Simple Condition loop::$2 [108] if(loop::sy#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@4
Simple Condition loop::$6 [116] if(loop::$5!=0) goto loop::@6
Simple Condition loop::$8 [123] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)<loop::plexFreeNextYpos1_return#0) goto loop::@9
Simple Condition loop::$11 [128] if(loop::ss#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@8
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [27] plexSort::$7 = plexSort::$5 && plexSort::$6
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant plexInit::i#0 = 0
Constant plexSort::m#0 = 0
Constant plexSort::plexFreePrepare1_s#0 = 0
Constant plexInit::screen#0 = SCREEN
Constant init::xp#0 = $20
Constant init::sx#0 = 0
Constant init::ss#0 = 0
Constant loop::sin_idx#0 = 0
Constant loop::sy#0 = 0
Constant loop::ss#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [97] if(true) goto loop::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [6] plexInit::i#1 = ++ plexInit::i#2 to ++
Resolved ranged comparison value [8] if(plexInit::i#1!=rangelast(0,PLEX_COUNT-1)) goto plexInit::@1 to PLEX_COUNT-1+1
Resolved ranged next value [18] plexSort::m#1 = ++ plexSort::m#2 to ++
Resolved ranged comparison value [20] if(plexSort::m#1!=rangelast(0,PLEX_COUNT-2)) goto plexSort::@1 to PLEX_COUNT-2+1
Resolved ranged next value [37] plexSort::plexFreePrepare1_s#1 = ++ plexSort::plexFreePrepare1_s#2 to ++
Resolved ranged comparison value [39] if(plexSort::plexFreePrepare1_s#1!=rangelast(0,7)) goto plexSort::plexFreePrepare1_@1 to 8
Resolved ranged next value [84] init::sx#1 = ++ init::sx#2 to ++
Resolved ranged comparison value [86] if(init::sx#1!=rangelast(0,PLEX_COUNT-1)) goto init::@1 to PLEX_COUNT-1+1
Resolved ranged next value [91] init::ss#1 = ++ init::ss#2 to ++
Resolved ranged comparison value [93] if(init::ss#1!=rangelast(0,7)) goto init::@3 to 8
Resolved ranged next value [106] loop::sy#1 = ++ loop::sy#2 to ++
Resolved ranged comparison value [108] if(loop::sy#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@4 to PLEX_COUNT-1+1
Resolved ranged next value [126] loop::ss#1 = ++ loop::ss#5 to ++
Resolved ranged comparison value [128] if(loop::ss#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@8 to PLEX_COUNT-1+1
Removing unused block loop::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if(plexInit::i#1!=PLEX_COUNT-1+1) goto plexInit::@1
Adding number conversion cast (unumber) 1 in if(plexInit::i#1!=(unumber)PLEX_COUNT-1+1) goto plexInit::@1
Adding number conversion cast (unumber) PLEX_COUNT-2+1 in if(plexSort::m#1!=PLEX_COUNT-2+1) goto plexSort::@1
Adding number conversion cast (unumber) 1 in if(plexSort::m#1!=(unumber)PLEX_COUNT-2+1) goto plexSort::@1
Adding number conversion cast (unumber) 8 in if(plexSort::plexFreePrepare1_s#1!=8) goto plexSort::plexFreePrepare1_@1
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if(init::sx#1!=PLEX_COUNT-1+1) goto init::@1
Adding number conversion cast (unumber) 1 in if(init::sx#1!=(unumber)PLEX_COUNT-1+1) goto init::@1
Adding number conversion cast (unumber) 8 in if(init::ss#1!=8) goto init::@3
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if(loop::sy#1!=PLEX_COUNT-1+1) goto loop::@4
Adding number conversion cast (unumber) 1 in if(loop::sy#1!=(unumber)PLEX_COUNT-1+1) goto loop::@4
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@8
Adding number conversion cast (unumber) 1 in if(loop::ss#1!=(unumber)PLEX_COUNT-1+1) goto loop::@8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast PLEX_COUNT-1+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast PLEX_COUNT-2+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast PLEX_COUNT-1+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast PLEX_COUNT-1+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast PLEX_COUNT-1+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)PLEX_SCREEN_PTR = plexInit::plexSetScreen1_$0 
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Alias plexShowSprite::$10 = plexShowSprite::$9 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)PLEX_SCREEN_PTR = plexInit::plexSetScreen1_$0 
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Simple Condition plexSort::$5 [20] if(plexSort::s#1!=$ff) goto plexSort::@7
Simple Condition plexSort::$6 [106] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [20] if(plexSort::s#1==$ff) goto plexSort::@4
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [0] plexInit::plexSetScreen1_$0 = plexInit::screen#0 + $3f8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant plexInit::plexSetScreen1_$0 = plexInit::screen#0+$3f8
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Rewriting multiplication to use shift [29] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx * 2
Rewriting multiplication to use shift [39] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 * SIZEOF_UNSIGNED_INT
Rewriting multiplication to use shift [62] init::$3 = init::sx#2 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings plexInit::i#0
Inlining constant with var siblings plexSort::m#0
Inlining constant with var siblings plexSort::plexFreePrepare1_s#0
Inlining constant with var siblings init::xp#0
Inlining constant with var siblings init::sx#0
Inlining constant with var siblings init::ss#0
Inlining constant with var siblings loop::sin_idx#0
Inlining constant with var siblings loop::sy#0
Inlining constant with var siblings loop::ss#0
Constant inlined plexInit::screen#0 = SCREEN
Constant inlined init::xp#0 = $20
Constant inlined plexInit::plexSetScreen1_$0 = SCREEN+$3f8
Constant inlined loop::sy#0 = 0
Constant inlined loop::ss#0 = 0
Constant inlined init::sx#0 = 0
Constant inlined plexSort::plexFreePrepare1_s#0 = 0
Constant inlined init::ss#0 = 0
Constant inlined plexInit::i#0 = 0
Constant inlined plexSort::m#0 = 0
Constant inlined loop::sin_idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment (PLEX_SORTED_IDX+1)[plexSort::$1]
Consolidated array index constant in assignment (PLEX_SORTED_IDX+1)[plexSort::$4]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Alias plexSort::m#2 = plexSort::$1 
Alias plexSort::s#3 = plexSort::$4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Eliminating unused constant SIZEOF_UNSIGNED_INT
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) 8
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $2000
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$5 
Added new block during phi lifting plexInit::@3(between plexInit::@1 and plexInit::@1)
Added new block during phi lifting plexSort::@8(between plexSort::@2 and plexSort::@1)
Added new block during phi lifting plexSort::@9(between plexSort::@7 and plexSort::@3)
Added new block during phi lifting plexSort::@10(between plexSort::plexFreePrepare1_@1 and plexSort::plexFreePrepare1_@1)
Added new block during phi lifting init::@5(between init::@1 and init::@1)
Added new block during phi lifting init::@6(between init::@3 and init::@3)
Added new block during phi lifting loop::@15(between loop::@4 and loop::@4)
Added new block during phi lifting loop::@16(between loop::@14 and loop::@8)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of loop
Adding NOP phi() at start of loop::@7
Adding NOP phi() at start of loop::plexFreeNextYpos1_@return
Adding NOP phi() at start of loop::@12
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexInit::@2
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexSort::plexFreePrepare1
CALL GRAPH
Calls in [__start] to main:7 
Calls in [main] to init:11 loop:13 
Calls in [init] to plexInit:17 
Calls in [loop] to plexSort:47 plexShowSprite:59 

Created 11 initial phi equivalence classes
Coalesced [32] init::ss#3 = init::ss#1
Coalesced [33] init::sx#3 = init::sx#1
Coalesced [34] init::xp#3 = init::xp#1
Not coalescing [39] loop::y_idx#3 = loop::sin_idx#6
Coalesced [63] loop::sin_idx#18 = loop::sin_idx#1
Coalesced [64] loop::ss#9 = loop::ss#1
Coalesced [65] loop::y_idx#4 = loop::y_idx#1
Coalesced [66] loop::sy#3 = loop::sy#1
Coalesced [75] plexInit::i#3 = plexInit::i#1
Not coalescing [81] plexSort::s#6 = plexSort::m#2
Coalesced [101] plexSort::plexFreePrepare1_s#3 = plexSort::plexFreePrepare1_s#1
Coalesced [102] plexSort::m#7 = plexSort::m#1
Coalesced [103] plexSort::s#5 = plexSort::s#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@2
Culled Empty Block label init::@4
Culled Empty Block label init::@6
Culled Empty Block label init::@5
Culled Empty Block label loop::@7
Culled Empty Block label loop::plexFreeNextYpos1_@return
Culled Empty Block label loop::@12
Culled Empty Block label loop::@16
Culled Empty Block label loop::@15
Culled Empty Block label plexInit::@2
Culled Empty Block label plexInit::@3
Culled Empty Block label plexSort::@10
Culled Empty Block label plexSort::@8
Culled Empty Block label plexSort::@9
Renumbering block loop::@8 to loop::@7
Renumbering block loop::@9 to loop::@8
Renumbering block loop::@10 to loop::@9
Renumbering block loop::@11 to loop::@10
Renumbering block loop::@13 to loop::@11
Renumbering block loop::@14 to loop::@12
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of loop
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexSort::plexFreePrepare1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8
  [2] plex_show_idx = 0
  [3] plex_sprite_idx = 0
  [4] plex_sprite_msb = 1
  [5] plex_free_next = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  [10] call init
  to:main::@1
main::@1: scope:[main]  from main
  [11] phi()
  [12] call loop
  to:main::@return
main::@return: scope:[main]  from main::@1
  [13] return 
  to:@return

void init()
init: scope:[init]  from main
  [14] *D011 = VICII_DEN|VICII_RSEL|3
  [15] call plexInit
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [16] init::xp#2 = phi( init::@1/init::xp#1, init/$20 )
  [16] init::sx#2 = phi( init::@1/init::sx#1, init/0 )
  [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40
  [18] init::$3 = init::sx#2 << 1
  [19] PLEX_XPOS[init::$3] = init::xp#2
  [20] init::xp#1 = init::xp#2 + 9
  [21] init::sx#1 = ++ init::sx#2
  [22] if(init::sx#1!=PLEX_COUNT-1+1) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [24] init::ss#2 = phi( init::@2/0, init::@3/init::ss#1 )
  [25] SPRITES_COLOR[init::ss#2] = GREEN
  [26] init::ss#1 = ++ init::ss#2
  [27] if(init::ss#1!=8) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  [28] return 
  to:@return

void loop()
loop: scope:[loop]  from main::@1
  [29] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@10
  [30] loop::sin_idx#6 = phi( loop/0, loop::@10/loop::sin_idx#1 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [32] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [33] loop::y_idx#3 = loop::sin_idx#6
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  [34] loop::sy#2 = phi( loop::@3/0, loop::@4/loop::sy#1 )
  [34] loop::y_idx#2 = phi( loop::@3/loop::y_idx#3, loop::@4/loop::y_idx#1 )
  [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2]
  [36] loop::y_idx#1 = loop::y_idx#2 + 8
  [37] loop::sy#1 = ++ loop::sy#2
  [38] if(loop::sy#1!=PLEX_COUNT-1+1) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  [39] loop::sin_idx#1 = loop::sin_idx#6 + 1
  [40] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [41] call plexSort
  to:loop::@11
loop::@11: scope:[loop]  from loop::@5
  [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@11 loop::@6
  [43] loop::$5 = *D011 & VICII_RST8
  [44] if(loop::$5!=0) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@12 loop::@6
  [45] loop::ss#5 = phi( loop::@12/loop::ss#1, loop::@6/0 )
  [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@7
  [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next]
  to:loop::@8
loop::@8: scope:[loop]  from loop::@8 loop::plexFreeNextYpos1
  [48] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)<loop::plexFreeNextYpos1_return#0) goto loop::@8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@8
  [49] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [50] call plexShowSprite
  to:loop::@12
loop::@12: scope:[loop]  from loop::@9
  [51] loop::ss#1 = ++ loop::ss#5
  [52] if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@7
  to:loop::@10
loop::@10: scope:[loop]  from loop::@12
  [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:loop::@1

void plexInit(char *screen)
plexInit: scope:[plexInit]  from init
  [54] phi()
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  [55] PLEX_SCREEN_PTR = SCREEN+$3f8
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::plexSetScreen1
  [56] plexInit::i#2 = phi( plexInit::@1/plexInit::i#1, plexInit::plexSetScreen1/0 )
  [57] PLEX_SORTED_IDX[plexInit::i#2] = plexInit::i#2
  [58] plexInit::i#1 = ++ plexInit::i#2
  [59] if(plexInit::i#1!=PLEX_COUNT-1+1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  [60] return 
  to:@return

void plexSort()
plexSort: scope:[plexSort]  from loop::@5
  [61] phi()
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  [62] plexSort::m#2 = phi( plexSort/0, plexSort::@2/plexSort::m#1 )
  [63] plexSort::nxt_idx#0 = (PLEX_SORTED_IDX+1)[plexSort::m#2]
  [64] plexSort::nxt_y#0 = PLEX_YPOS[plexSort::nxt_idx#0]
  [65] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@1
  [66] plexSort::s#6 = plexSort::m#2
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@5 plexSort::@7
  [67] plexSort::s#3 = phi( plexSort::@7/plexSort::s#1, plexSort::@5/plexSort::s#6 )
  [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3]
  [69] plexSort::s#1 = -- plexSort::s#3
  [70] if(plexSort::s#1==$ff) goto plexSort::@4
  to:plexSort::@7
plexSort::@7: scope:[plexSort]  from plexSort::@3
  [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3 plexSort::@7
  [72] plexSort::s#2 = ++ plexSort::s#1
  [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0
  to:plexSort::@2
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  [74] plexSort::m#1 = ++ plexSort::m#2
  [75] if(plexSort::m#1!=PLEX_COUNT-2+1) goto plexSort::@1
  to:plexSort::@6
plexSort::@6: scope:[plexSort]  from plexSort::@2
  [76] plex_show_idx = 0
  [77] plex_sprite_idx = 0
  [78] plex_sprite_msb = 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  [79] phi()
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  [80] plexSort::plexFreePrepare1_s#2 = phi( plexSort::plexFreePrepare1/0, plexSort::plexFreePrepare1_@1/plexSort::plexFreePrepare1_s#1 )
  [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0
  [82] plexSort::plexFreePrepare1_s#1 = ++ plexSort::plexFreePrepare1_s#2
  [83] if(plexSort::plexFreePrepare1_s#1!=8) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  [84] plex_free_next = 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  [85] return 
  to:@return

void plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@9
  [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1
  [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]]
  [88] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  [89] plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#0 + $16
  [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0
  [91] plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1
  [92] plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7
  [93] plex_free_next = plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]]
  [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx]
  [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1
  [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10]
  [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10]
  [99] if(plexShowSprite::$2!=0) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb
  [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  [102] plexShowSprite::$4 = plex_sprite_idx + 1
  [103] plexShowSprite::$5 = plexShowSprite::$4 & 7
  [104] plex_sprite_idx = plexShowSprite::$5
  [105] plex_show_idx = ++ plex_show_idx
  [106] plex_sprite_msb = plex_sprite_msb << 1
  [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  [108] plex_sprite_msb = 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  [109] return 
  to:@return
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb
  to:plexShowSprite::@2


VARIABLE REGISTER WEIGHTS
__loadstore char * volatile PLEX_SCREEN_PTR // 1402.8333333333335
void __start()
void init()
char init::$3 // 2002.0
char init::ss
char init::ss#1 // 1501.5
char init::ss#2 // 1501.5
char init::sx
char init::sx#1 // 1501.5
char init::sx#2 // 800.8
unsigned int init::xp
unsigned int init::xp#1 // 667.3333333333334
unsigned int init::xp#2 // 750.75
void loop()
char loop::$5 // 20002.0
char loop::plexFreeNextYpos1_return
char loop::plexFreeNextYpos1_return#0 // 55001.0
char loop::rasterY
char loop::sin_idx
char loop::sin_idx#1 // 133.46666666666667
char loop::sin_idx#6 // 333.6666666666667
char loop::ss
char loop::ss#1 // 15001.5
char loop::ss#5 // 3333.6666666666665
char loop::sy
char loop::sy#1 // 15001.5
char loop::sy#2 // 10001.0
char loop::y_idx
char loop::y_idx#1 // 6667.333333333333
char loop::y_idx#2 // 15502.0
char loop::y_idx#3 // 2002.0
void main()
void plexInit(char *screen)
char plexInit::i
char plexInit::i#1 // 15001.5
char plexInit::i#2 // 20002.0
char *plexInit::plexSetScreen1_screen
char *plexInit::screen
void plexShowSprite()
char plexShowSprite::$10 // 100001.0
char plexShowSprite::$2 // 200002.0
char plexShowSprite::$4 // 200002.0
char plexShowSprite::$5 // 200002.0
char plexShowSprite::$8 // 200002.0
char plexShowSprite::plexFreeAdd1_$0 // 200002.0
char plexShowSprite::plexFreeAdd1_$1 // 200002.0
char plexShowSprite::plexFreeAdd1_$2 // 200002.0
char plexShowSprite::plexFreeAdd1_ypos
char plexShowSprite::plexFreeAdd1_ypos#0 // 150001.5
char plexShowSprite::plex_sprite_idx2
char plexShowSprite::plex_sprite_idx2#0 // 27273.0
char plexShowSprite::xpos_idx
char plexShowSprite::xpos_idx#0 // 200002.0
char plexShowSprite::ypos
void plexSort()
char plexSort::m
char plexSort::m#1 // 1500001.5
char plexSort::m#2 // 416667.0833333334
char plexSort::nxt_idx
char plexSort::nxt_idx#0 // 300000.30000000005
char plexSort::nxt_y
char plexSort::nxt_y#0 // 1500000.375
char plexSort::plexFreePrepare1_s
char plexSort::plexFreePrepare1_s#1 // 1500001.5
char plexSort::plexFreePrepare1_s#2 // 1500001.5
char plexSort::s
char plexSort::s#1 // 1.3666668333333332E7
char plexSort::s#2 // 2000002.0
char plexSort::s#3 // 2.05000025E7
char plexSort::s#6 // 2000002.0
__loadstore volatile char plex_free_next // 8648.837837837838
__loadstore volatile char plex_show_idx // 10851.234042553191
__loadstore volatile char plex_sprite_idx // 9318.340909090908
__loadstore volatile char plex_sprite_msb // 13555.755555555555

Initial phi equivalence classes
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#5 loop::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
Added variable PLEX_SCREEN_PTR to live range equivalence class [ PLEX_SCREEN_PTR ]
Added variable plex_show_idx to live range equivalence class [ plex_show_idx ]
Added variable plex_sprite_idx to live range equivalence class [ plex_sprite_idx ]
Added variable plex_sprite_msb to live range equivalence class [ plex_sprite_msb ]
Added variable plex_free_next to live range equivalence class [ plex_free_next ]
Added variable init::$3 to live range equivalence class [ init::$3 ]
Added variable loop::$5 to live range equivalence class [ loop::$5 ]
Added variable loop::plexFreeNextYpos1_return#0 to live range equivalence class [ loop::plexFreeNextYpos1_return#0 ]
Added variable plexSort::nxt_idx#0 to live range equivalence class [ plexSort::nxt_idx#0 ]
Added variable plexSort::nxt_y#0 to live range equivalence class [ plexSort::nxt_y#0 ]
Added variable plexSort::s#2 to live range equivalence class [ plexSort::s#2 ]
Added variable plexShowSprite::plex_sprite_idx2#0 to live range equivalence class [ plexShowSprite::plex_sprite_idx2#0 ]
Added variable plexShowSprite::plexFreeAdd1_ypos#0 to live range equivalence class [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Added variable plexShowSprite::plexFreeAdd1_$0 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$0 ]
Added variable plexShowSprite::plexFreeAdd1_$1 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$1 ]
Added variable plexShowSprite::plexFreeAdd1_$2 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$2 ]
Added variable plexShowSprite::xpos_idx#0 to live range equivalence class [ plexShowSprite::xpos_idx#0 ]
Added variable plexShowSprite::$10 to live range equivalence class [ plexShowSprite::$10 ]
Added variable plexShowSprite::$2 to live range equivalence class [ plexShowSprite::$2 ]
Added variable plexShowSprite::$8 to live range equivalence class [ plexShowSprite::$8 ]
Added variable plexShowSprite::$4 to live range equivalence class [ plexShowSprite::$4 ]
Added variable plexShowSprite::$5 to live range equivalence class [ plexShowSprite::$5 ]
Complete equivalence classes
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#5 loop::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
[ PLEX_SCREEN_PTR ]
[ plex_show_idx ]
[ plex_sprite_idx ]
[ plex_sprite_msb ]
[ plex_free_next ]
[ init::$3 ]
[ loop::$5 ]
[ loop::plexFreeNextYpos1_return#0 ]
[ plexSort::nxt_idx#0 ]
[ plexSort::nxt_y#0 ]
[ plexSort::s#2 ]
[ plexShowSprite::plex_sprite_idx2#0 ]
[ plexShowSprite::plexFreeAdd1_ypos#0 ]
[ plexShowSprite::plexFreeAdd1_$0 ]
[ plexShowSprite::plexFreeAdd1_$1 ]
[ plexShowSprite::plexFreeAdd1_$2 ]
[ plexShowSprite::xpos_idx#0 ]
[ plexShowSprite::$10 ]
[ plexShowSprite::$2 ]
[ plexShowSprite::$8 ]
[ plexShowSprite::$4 ]
[ plexShowSprite::$5 ]
Allocated zp[1]:2 [ init::sx#2 init::sx#1 ]
Allocated zp[2]:3 [ init::xp#2 init::xp#1 ]
Allocated zp[1]:5 [ init::ss#2 init::ss#1 ]
Allocated zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ]
Allocated zp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Allocated zp[1]:8 [ loop::sy#2 loop::sy#1 ]
Allocated zp[1]:9 [ loop::ss#5 loop::ss#1 ]
Allocated zp[1]:10 [ plexInit::i#2 plexInit::i#1 ]
Allocated zp[1]:11 [ plexSort::m#2 plexSort::m#1 ]
Allocated zp[1]:12 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Allocated zp[1]:13 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
Allocated zp[2]:14 [ PLEX_SCREEN_PTR ]
Allocated zp[1]:16 [ plex_show_idx ]
Allocated zp[1]:17 [ plex_sprite_idx ]
Allocated zp[1]:18 [ plex_sprite_msb ]
Allocated zp[1]:19 [ plex_free_next ]
Allocated zp[1]:20 [ init::$3 ]
Allocated zp[1]:21 [ loop::$5 ]
Allocated zp[1]:22 [ loop::plexFreeNextYpos1_return#0 ]
Allocated zp[1]:23 [ plexSort::nxt_idx#0 ]
Allocated zp[1]:24 [ plexSort::nxt_y#0 ]
Allocated zp[1]:25 [ plexSort::s#2 ]
Allocated zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ]
Allocated zp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Allocated zp[1]:28 [ plexShowSprite::plexFreeAdd1_$0 ]
Allocated zp[1]:29 [ plexShowSprite::plexFreeAdd1_$1 ]
Allocated zp[1]:30 [ plexShowSprite::plexFreeAdd1_$2 ]
Allocated zp[1]:31 [ plexShowSprite::xpos_idx#0 ]
Allocated zp[1]:32 [ plexShowSprite::$10 ]
Allocated zp[1]:33 [ plexShowSprite::$2 ]
Allocated zp[1]:34 [ plexShowSprite::$8 ]
Allocated zp[1]:35 [ plexShowSprite::$4 ]
Allocated zp[1]:36 [ plexShowSprite::$5 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] plex_show_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] plex_sprite_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] plex_sprite_msb = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] plex_free_next = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] *D011 = VICII_DEN|VICII_RSEL|3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ init::sx#2 init::sx#1 ]
Statement [18] init::$3 = init::sx#2 << 1 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] { }  ) always clobbers reg byte a 
Statement [19] PLEX_XPOS[init::$3] = init::xp#2 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [20] init::xp#1 = init::xp#2 + 9 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ PLEX_SCREEN_PTR ] ( main:7::init:10 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [25] SPRITES_COLOR[init::ss#2] = GREEN [ PLEX_SCREEN_PTR init::ss#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::ss#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ init::ss#2 init::ss#1 ]
Statement [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ]
Statement [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2] [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ loop::sy#2 loop::sy#1 ]
Statement [36] loop::y_idx#1 = loop::y_idx#2 + 8 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [43] loop::$5 = *D011 & VICII_RST8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ loop::ss#5 loop::ss#1 ]
Statement [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ loop::ss#5 loop::ss#1 ]
Statement [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [55] PLEX_SCREEN_PTR = SCREEN+$3f8 [ PLEX_SCREEN_PTR ] ( main:7::init:10::plexInit:15 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3] [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ plexSort::m#2 plexSort::m#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ plexSort::nxt_idx#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ plexSort::nxt_y#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Statement [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [76] plex_show_idx = 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [77] plex_sprite_idx = 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [78] plex_sprite_msb = 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
Statement [84] plex_free_next = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:9 [ loop::ss#5 loop::ss#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ]
Statement [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ]
Statement [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Statement [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ plexShowSprite::$10 ]
Statement [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Statement [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] { }  ) always clobbers reg byte a 
Statement [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [108] plex_sprite_msb = 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] plex_show_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] plex_sprite_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] plex_sprite_msb = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] plex_free_next = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] *D011 = VICII_DEN|VICII_RSEL|3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [18] init::$3 = init::sx#2 << 1 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] { }  ) always clobbers reg byte a 
Statement [19] PLEX_XPOS[init::$3] = init::xp#2 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [20] init::xp#1 = init::xp#2 + 9 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ PLEX_SCREEN_PTR ] ( main:7::init:10 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [25] SPRITES_COLOR[init::ss#2] = GREEN [ PLEX_SCREEN_PTR init::ss#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::ss#2 ] { }  ) always clobbers reg byte a 
Statement [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Statement [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2] [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Statement [36] loop::y_idx#1 = loop::y_idx#2 + 8 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [43] loop::$5 = *D011 & VICII_RST8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Statement [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Statement [52] if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@7 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] { }  ) always clobbers reg byte a 
Statement [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [55] PLEX_SCREEN_PTR = SCREEN+$3f8 [ PLEX_SCREEN_PTR ] ( main:7::init:10::plexInit:15 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [65] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] { }  ) always clobbers reg byte a 
Statement [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3] [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Statement [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [76] plex_show_idx = 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [77] plex_sprite_idx = 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [78] plex_sprite_msb = 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Statement [84] plex_free_next = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Statement [88] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Statement [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Statement [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Statement [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Statement [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] { }  ) always clobbers reg byte a 
Statement [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [108] plex_sprite_msb = 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] plex_show_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] plex_sprite_idx = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] plex_sprite_msb = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] plex_free_next = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] *D011 = VICII_DEN|VICII_RSEL|3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [18] init::$3 = init::sx#2 << 1 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 init::$3 ] { }  ) always clobbers reg byte a 
Statement [19] PLEX_XPOS[init::$3] = init::xp#2 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [20] init::xp#1 = init::xp#2 + 9 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ PLEX_SCREEN_PTR ] ( main:7::init:10 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [25] SPRITES_COLOR[init::ss#2] = GREEN [ PLEX_SCREEN_PTR init::ss#2 ] ( main:7::init:10 [ PLEX_SCREEN_PTR init::ss#2 ] { }  ) always clobbers reg byte a 
Statement [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Statement [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2] [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Statement [36] loop::y_idx#1 = loop::y_idx#2 + 8 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [43] loop::$5 = *D011 & VICII_RST8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Statement [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Statement [52] if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@7 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] { }  ) always clobbers reg byte a 
Statement [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ PLEX_SCREEN_PTR loop::sin_idx#1 ] ( main:7::loop:12 [ PLEX_SCREEN_PTR loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [55] PLEX_SCREEN_PTR = SCREEN+$3f8 [ PLEX_SCREEN_PTR ] ( main:7::init:10::plexInit:15 [ PLEX_SCREEN_PTR ] { }  ) always clobbers reg byte a 
Statement [65] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] { }  ) always clobbers reg byte a 
Statement [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3] [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Statement [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [76] plex_show_idx = 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [77] plex_sprite_idx = 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [78] plex_sprite_msb = 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Statement [84] plex_free_next = 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:41 [ PLEX_SCREEN_PTR loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Statement [88] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte y 
Statement [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Statement [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$10 ] { }  ) always clobbers reg byte a 
Statement [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10] [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Statement [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$8 ] { }  ) always clobbers reg byte a 
Statement [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [108] plex_sprite_msb = 1 [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb [ PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:50 [ loop::sin_idx#1 loop::ss#5 PLEX_SCREEN_PTR plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ init::sx#2 init::sx#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ init::xp#2 init::xp#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ init::ss#2 init::ss#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ] : zp[1]:6 , 
Potential registers zp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ loop::sy#2 loop::sy#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ loop::ss#5 loop::ss#1 ] : zp[1]:9 , 
Potential registers zp[1]:10 [ plexInit::i#2 plexInit::i#1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ plexSort::m#2 plexSort::m#1 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ PLEX_SCREEN_PTR ] : zp[2]:14 , 
Potential registers zp[1]:16 [ plex_show_idx ] : zp[1]:16 , 
Potential registers zp[1]:17 [ plex_sprite_idx ] : zp[1]:17 , 
Potential registers zp[1]:18 [ plex_sprite_msb ] : zp[1]:18 , 
Potential registers zp[1]:19 [ plex_free_next ] : zp[1]:19 , 
Potential registers zp[1]:20 [ init::$3 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ loop::$5 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ loop::plexFreeNextYpos1_return#0 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ plexSort::nxt_idx#0 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ plexSort::nxt_y#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ plexSort::s#2 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ] : zp[1]:26 , 
Potential registers zp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ] : zp[1]:27 , reg byte a , reg byte x , 
Potential registers zp[1]:28 [ plexShowSprite::plexFreeAdd1_$0 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ plexShowSprite::plexFreeAdd1_$1 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ plexShowSprite::plexFreeAdd1_$2 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ plexShowSprite::xpos_idx#0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ plexShowSprite::$10 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ plexShowSprite::$2 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ plexShowSprite::$8 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ plexShowSprite::$4 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ plexShowSprite::$5 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plexSort] 36,166,672.83: zp[1]:12 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] 3,000,003: zp[1]:13 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] 2,000,002: zp[1]:25 [ plexSort::s#2 ] 1,916,668.58: zp[1]:11 [ plexSort::m#2 plexSort::m#1 ] 1,500,000.38: zp[1]:24 [ plexSort::nxt_y#0 ] 300,000.3: zp[1]:23 [ plexSort::nxt_idx#0 ] 
Uplift Scope [plexShowSprite] 200,002: zp[1]:28 [ plexShowSprite::plexFreeAdd1_$0 ] 200,002: zp[1]:29 [ plexShowSprite::plexFreeAdd1_$1 ] 200,002: zp[1]:30 [ plexShowSprite::plexFreeAdd1_$2 ] 200,002: zp[1]:31 [ plexShowSprite::xpos_idx#0 ] 200,002: zp[1]:33 [ plexShowSprite::$2 ] 200,002: zp[1]:34 [ plexShowSprite::$8 ] 200,002: zp[1]:35 [ plexShowSprite::$4 ] 200,002: zp[1]:36 [ plexShowSprite::$5 ] 150,001.5: zp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ] 100,001: zp[1]:32 [ plexShowSprite::$10 ] 27,273: zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ] 
Uplift Scope [loop] 55,001: zp[1]:22 [ loop::plexFreeNextYpos1_return#0 ] 25,002.5: zp[1]:8 [ loop::sy#2 loop::sy#1 ] 24,171.33: zp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] 20,002: zp[1]:21 [ loop::$5 ] 18,335.17: zp[1]:9 [ loop::ss#5 loop::ss#1 ] 467.13: zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Uplift Scope [] 13,555.76: zp[1]:18 [ plex_sprite_msb ] 10,851.23: zp[1]:16 [ plex_show_idx ] 9,318.34: zp[1]:17 [ plex_sprite_idx ] 8,648.84: zp[1]:19 [ plex_free_next ] 1,402.83: zp[2]:14 [ PLEX_SCREEN_PTR ] 
Uplift Scope [plexInit] 35,003.5: zp[1]:10 [ plexInit::i#2 plexInit::i#1 ] 
Uplift Scope [init] 3,003: zp[1]:5 [ init::ss#2 init::ss#1 ] 2,302.3: zp[1]:2 [ init::sx#2 init::sx#1 ] 2,002: zp[1]:20 [ init::$3 ] 1,418.08: zp[2]:3 [ init::xp#2 init::xp#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [plexSort] best 80068 combination reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] reg byte x [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] zp[1]:25 [ plexSort::s#2 ] zp[1]:11 [ plexSort::m#2 plexSort::m#1 ] zp[1]:24 [ plexSort::nxt_y#0 ] zp[1]:23 [ plexSort::nxt_idx#0 ] 
Limited combination testing to 10 combinations of 972 possible.
Uplifting [plexShowSprite] best 80058 combination reg byte a [ plexShowSprite::plexFreeAdd1_$0 ] reg byte x [ plexShowSprite::plexFreeAdd1_$1 ] zp[1]:30 [ plexShowSprite::plexFreeAdd1_$2 ] zp[1]:31 [ plexShowSprite::xpos_idx#0 ] zp[1]:33 [ plexShowSprite::$2 ] zp[1]:34 [ plexShowSprite::$8 ] zp[1]:35 [ plexShowSprite::$4 ] zp[1]:36 [ plexShowSprite::$5 ] zp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ] zp[1]:32 [ plexShowSprite::$10 ] zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ] 
Limited combination testing to 10 combinations of 589824 possible.
Uplifting [loop] best 78058 combination reg byte a [ loop::plexFreeNextYpos1_return#0 ] reg byte y [ loop::sy#2 loop::sy#1 ] zp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] zp[1]:21 [ loop::$5 ] zp[1]:9 [ loop::ss#5 loop::ss#1 ] zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Limited combination testing to 10 combinations of 144 possible.
Uplifting [] best 78058 combination zp[1]:18 [ plex_sprite_msb ] zp[1]:16 [ plex_show_idx ] zp[1]:17 [ plex_sprite_idx ] zp[1]:19 [ plex_free_next ] zp[2]:14 [ PLEX_SCREEN_PTR ] 
Uplifting [plexInit] best 77938 combination reg byte x [ plexInit::i#2 plexInit::i#1 ] 
Uplifting [init] best 77688 combination reg byte x [ init::ss#2 init::ss#1 ] reg byte x [ init::sx#2 init::sx#1 ] zp[1]:20 [ init::$3 ] zp[2]:3 [ init::xp#2 init::xp#1 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [MOS6526_CIA] best 77688 combination 
Uplifting [MOS6569_VICII] best 77688 combination 
Uplifting [MOS6581_SID] best 77688 combination 
Uplifting [main] best 77688 combination 
Uplifting [__start] best 77688 combination 
Attempting to uplift remaining variables inzp[1]:25 [ plexSort::s#2 ]
Uplifting [plexSort] best 77088 combination reg byte x [ plexSort::s#2 ] 
Attempting to uplift remaining variables inzp[1]:11 [ plexSort::m#2 plexSort::m#1 ]
Uplifting [plexSort] best 77088 combination zp[1]:11 [ plexSort::m#2 plexSort::m#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ plexSort::nxt_y#0 ]
Uplifting [plexSort] best 77088 combination zp[1]:24 [ plexSort::nxt_y#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ plexSort::nxt_idx#0 ]
Uplifting [plexSort] best 77088 combination zp[1]:23 [ plexSort::nxt_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:30 [ plexShowSprite::plexFreeAdd1_$2 ]
Uplifting [plexShowSprite] best 77084 combination reg byte a [ plexShowSprite::plexFreeAdd1_$2 ] 
Attempting to uplift remaining variables inzp[1]:31 [ plexShowSprite::xpos_idx#0 ]
Uplifting [plexShowSprite] best 77078 combination reg byte a [ plexShowSprite::xpos_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ plexShowSprite::$2 ]
Uplifting [plexShowSprite] best 77074 combination reg byte a [ plexShowSprite::$2 ] 
Attempting to uplift remaining variables inzp[1]:34 [ plexShowSprite::$8 ]
Uplifting [plexShowSprite] best 77068 combination reg byte a [ plexShowSprite::$8 ] 
Attempting to uplift remaining variables inzp[1]:35 [ plexShowSprite::$4 ]
Uplifting [plexShowSprite] best 77062 combination reg byte x [ plexShowSprite::$4 ] 
Attempting to uplift remaining variables inzp[1]:36 [ plexShowSprite::$5 ]
Uplifting [plexShowSprite] best 77058 combination reg byte a [ plexShowSprite::$5 ] 
Attempting to uplift remaining variables inzp[1]:27 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Uplifting [plexShowSprite] best 77049 combination reg byte a [ plexShowSprite::plexFreeAdd1_ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:32 [ plexShowSprite::$10 ]
Uplifting [plexShowSprite] best 77042 combination reg byte x [ plexShowSprite::$10 ] 
Attempting to uplift remaining variables inzp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ]
Uplifting [plexShowSprite] best 77042 combination zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Uplifting [loop] best 76312 combination reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:21 [ loop::$5 ]
Uplifting [loop] best 75912 combination reg byte a [ loop::$5 ] 
Attempting to uplift remaining variables inzp[1]:9 [ loop::ss#5 loop::ss#1 ]
Uplifting [loop] best 75912 combination zp[1]:9 [ loop::ss#5 loop::ss#1 ] 
Attempting to uplift remaining variables inzp[1]:18 [ plex_sprite_msb ]
Uplifting [] best 75912 combination zp[1]:18 [ plex_sprite_msb ] 
Attempting to uplift remaining variables inzp[1]:16 [ plex_show_idx ]
Uplifting [] best 75912 combination zp[1]:16 [ plex_show_idx ] 
Attempting to uplift remaining variables inzp[1]:17 [ plex_sprite_idx ]
Uplifting [] best 75912 combination zp[1]:17 [ plex_sprite_idx ] 
Attempting to uplift remaining variables inzp[1]:19 [ plex_free_next ]
Uplifting [] best 75912 combination zp[1]:19 [ plex_free_next ] 
Attempting to uplift remaining variables inzp[1]:20 [ init::$3 ]
Uplifting [init] best 75872 combination reg byte a [ init::$3 ] 
Attempting to uplift remaining variables inzp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ]
Uplifting [loop] best 75872 combination zp[1]:6 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Coalescing zero page register [ zp[1]:26 [ plexShowSprite::plex_sprite_idx2#0 ] ] with [ zp[1]:11 [ plexSort::m#2 plexSort::m#1 ] ]
Allocated (was zp[2]:3) zp[2]:2 [ init::xp#2 init::xp#1 ]
Allocated (was zp[1]:6) zp[1]:4 [ loop::sin_idx#6 loop::sin_idx#1 ]
Allocated (was zp[1]:9) zp[1]:5 [ loop::ss#5 loop::ss#1 ]
Allocated (was zp[2]:14) zp[2]:6 [ PLEX_SCREEN_PTR ]
Allocated (was zp[1]:16) zp[1]:8 [ plex_show_idx ]
Allocated (was zp[1]:17) zp[1]:9 [ plex_sprite_idx ]
Allocated (was zp[1]:18) zp[1]:10 [ plex_sprite_msb ]
Allocated (was zp[1]:19) zp[1]:11 [ plex_free_next ]
Allocated (was zp[1]:23) zp[1]:12 [ plexSort::nxt_idx#0 ]
Allocated (was zp[1]:24) zp[1]:13 [ plexSort::nxt_y#0 ]
Allocated (was zp[1]:26) zp[1]:14 [ plexShowSprite::plex_sprite_idx2#0 plexSort::m#2 plexSort::m#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A simple usage of the flexible sprite multiplexer routine
/// @file
/// Commodore 64 Registers and Constants
/// @file
/// The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="simple-multiplexer.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  /// $D011 Control Register #1 Bit#7: RST8 9th Bit for $D012 Rasterline counter
  .const VICII_RST8 = $80
  /// $D011 Control Register #1  Bit#4: DEN Switch VIC-II output on/off
  .const VICII_DEN = $10
  /// $D011 Control Register #1  Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  .const VICII_RSEL = 8
  /// The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  // The number of sprites in the multiplexer
  .const PLEX_COUNT = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  /// Sprite X position register for sprite #0
  .label SPRITES_XPOS = $d000
  /// Sprite Y position register for sprite #0
  .label SPRITES_YPOS = $d001
  /// Sprite X position MSB register
  .label SPRITES_XMSB = $d010
  /// Sprite colors register for sprite #0
  .label SPRITES_COLOR = $d027
  /// $D011 Control Register #1
  /// @see #VICII_CONTROL1
  .label D011 = $d011
  /// The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Location of screen & sprites
  .label SCREEN = $400
  // The address of the sprite pointers on the current screen (screen+0x3f8).
  .label PLEX_SCREEN_PTR = 6
  // The index in the PLEX tables of the next sprite to show
  .label plex_show_idx = 8
  // The index the next sprite to use for showing (sprites are used round-robin)
  .label plex_sprite_idx = 9
  // The MSB bit of the next sprite to use for showing
  .label plex_sprite_msb = $a
  // The index of the sprite that is free next. Since sprites are used round-robin this moves forward each time a sprite is shown.
  .label plex_free_next = $b
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8 -- pbuz1=pbuc1 
    lda #<$400+$3f8
    sta.z PLEX_SCREEN_PTR
    lda #>$400+$3f8
    sta.z PLEX_SCREEN_PTR+1
    // [2] plex_show_idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_show_idx
    // [3] plex_sprite_idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_sprite_idx
    // [4] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [5] plex_free_next = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_free_next
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [7] call main
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [8] return 
    rts
}
  // main
main: {
    // asm { sei  }
    sei
    // [10] call init
    jsr init
    // [11] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [12] call loop
    // [29] phi from main::@1 to loop [phi:main::@1->loop]
  loop_from___b1:
    jsr loop
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // init
// Initialize the program
init: {
    // Set the x-positions & pointers
    .label xp = 2
    // [14] *D011 = VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_DEN|VICII_RSEL|3
    sta D011
    // [15] call plexInit
  // Initialize the multiplexer
    // [54] phi from init to plexInit [phi:init->plexInit]
  plexInit_from_init:
    jsr plexInit
    // [16] phi from init to init::@1 [phi:init->init::@1]
  __b1_from_init:
    // [16] phi init::xp#2 = $20 [phi:init->init::@1#0] -- vwuz1=vwuc1 
    lda #<$20
    sta.z xp
    lda #>$20
    sta.z xp+1
    // [16] phi init::sx#2 = 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [16] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  __b1_from___b1:
    // [16] phi init::xp#2 = init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
    // [16] phi init::sx#2 = init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp __b1
    // init::@1
  __b1:
    // [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta PLEX_PTR,x
    // [18] init::$3 = init::sx#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [19] PLEX_XPOS[init::$3] = init::xp#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z xp
    sta PLEX_XPOS,y
    lda.z xp+1
    sta PLEX_XPOS+1,y
    // [20] init::xp#1 = init::xp#2 + 9 -- vwuz1=vwuz1_plus_vbuc1 
    lda #9
    clc
    adc.z xp
    sta.z xp
    bcc !+
    inc.z xp+1
  !:
    // [21] init::sx#1 = ++ init::sx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [22] if(init::sx#1!=PLEX_COUNT-1+1) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1_from___b1
    jmp __b2
    // init::@2
  __b2:
    // [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff -- _deref_pbuc1=vbuc2 
    // Enable & initialize sprites
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [24] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  __b3_from___b2:
    // [24] phi init::ss#2 = 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [24] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  __b3_from___b3:
    // [24] phi init::ss#2 = init::ss#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp __b3
    // init::@3
  __b3:
    // [25] SPRITES_COLOR[init::ss#2] = GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // [26] init::ss#1 = ++ init::ss#2 -- vbuxx=_inc_vbuxx 
    inx
    // [27] if(init::ss#1!=8) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b3
    jmp __breturn
    // init::@return
  __breturn:
    // [28] return 
    rts
}
  // loop
// The raster loop
loop: {
    // The current index into the y-sine
    .label sin_idx = 4
    .label ss = 5
    // [30] phi from loop to loop::@1 [phi:loop->loop::@1]
  __b1_from_loop:
    // [30] phi loop::sin_idx#6 = 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    jmp __b1
    // loop::@1
  __b1:
    jmp __b2
    // loop::@2
  __b2:
    // [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    jmp __b3
    // loop::@3
  __b3:
    // [32] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [33] loop::y_idx#3 = loop::sin_idx#6 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [34] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
  __b4_from___b3:
    // [34] phi loop::sy#2 = 0 [phi:loop::@3->loop::@4#0] -- vbuyy=vbuc1 
    ldy #0
    // [34] phi loop::y_idx#2 = loop::y_idx#3 [phi:loop::@3->loop::@4#1] -- register_copy 
    jmp __b4
    // [34] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
  __b4_from___b4:
    // [34] phi loop::sy#2 = loop::sy#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [34] phi loop::y_idx#2 = loop::y_idx#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    jmp __b4
    // loop::@4
  __b4:
    // [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2] -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
    // [36] loop::y_idx#1 = loop::y_idx#2 + 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[8]
    // [37] loop::sy#1 = ++ loop::sy#2 -- vbuyy=_inc_vbuyy 
    iny
    // [38] if(loop::sy#1!=PLEX_COUNT-1+1) goto loop::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne __b4_from___b4
    jmp __b5
    // loop::@5
  __b5:
    // [39] loop::sin_idx#1 = loop::sin_idx#6 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z sin_idx
    // [40] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [41] call plexSort
    // [61] phi from loop::@5 to plexSort [phi:loop::@5->plexSort]
  plexSort_from___b5:
    jsr plexSort
    jmp __b11
    // loop::@11
  __b11:
    // [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b6
    // loop::@6
  __b6:
    // [43] loop::$5 = *D011 & VICII_RST8 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #VICII_RST8
    and D011
    // [44] if(loop::$5!=0) goto loop::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6
    // [45] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  __b7_from___b6:
    // [45] phi loop::ss#5 = 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
    jmp __b7
  // Show the sprites
    // [45] phi from loop::@12 to loop::@7 [phi:loop::@12->loop::@7]
  __b7_from___b12:
    // [45] phi loop::ss#5 = loop::ss#1 [phi:loop::@12->loop::@7#0] -- register_copy 
    jmp __b7
    // loop::@7
  __b7:
    // [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp plexFreeNextYpos1
    // loop::plexFreeNextYpos1
  plexFreeNextYpos1:
    // [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_free_next
    lda PLEX_FREE_YPOS,y
    jmp __b8
    // loop::@8
  __b8:
    // [48] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)<loop::plexFreeNextYpos1_return#0) goto loop::@8 -- _deref_pbuc1_lt_vbuaa_then_la1 
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    beq !+
    bcs __b8
  !:
    jmp __b9
    // loop::@9
  __b9:
    // [49] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [50] call plexShowSprite
    jsr plexShowSprite
    jmp __b12
    // loop::@12
  __b12:
    // [51] loop::ss#1 = ++ loop::ss#5 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [52] if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z ss
    bne __b7_from___b12
    jmp __b10
    // loop::@10
  __b10:
    // [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [30] phi from loop::@10 to loop::@1 [phi:loop::@10->loop::@1]
  __b1_from___b10:
    // [30] phi loop::sin_idx#6 = loop::sin_idx#1 [phi:loop::@10->loop::@1#0] -- register_copy 
    jmp __b1
}
  // plexInit
// Initialize the multiplexer data structures
// void plexInit(char *screen)
plexInit: {
    jmp plexSetScreen1
    // plexInit::plexSetScreen1
  plexSetScreen1:
    // [55] PLEX_SCREEN_PTR = SCREEN+$3f8 -- pbuz1=pbuc1 
    lda #<SCREEN+$3f8
    sta.z PLEX_SCREEN_PTR
    lda #>SCREEN+$3f8
    sta.z PLEX_SCREEN_PTR+1
    // [56] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  __b1_from_plexSetScreen1:
    // [56] phi plexInit::i#2 = 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [56] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  __b1_from___b1:
    // [56] phi plexInit::i#2 = plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    jmp __b1
    // plexInit::@1
  __b1:
    // [57] PLEX_SORTED_IDX[plexInit::i#2] = plexInit::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
    // [58] plexInit::i#1 = ++ plexInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [59] if(plexInit::i#1!=PLEX_COUNT-1+1) goto plexInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1_from___b1
    jmp __breturn
    // plexInit::@return
  __breturn:
    // [60] return 
    rts
}
  // plexSort
// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
plexSort: {
    .label nxt_idx = $c
    .label nxt_y = $d
    .label m = $e
    // [62] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  __b1_from_plexSort:
    // [62] phi plexSort::m#2 = 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    jmp __b1
    // [62] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  __b1_from___b2:
    // [62] phi plexSort::m#2 = plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    jmp __b1
    // plexSort::@1
  __b1:
    // [63] plexSort::nxt_idx#0 = (PLEX_SORTED_IDX+1)[plexSort::m#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z m
    lda PLEX_SORTED_IDX+1,y
    sta.z nxt_idx
    // [64] plexSort::nxt_y#0 = PLEX_YPOS[plexSort::nxt_idx#0] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z nxt_idx
    lda PLEX_YPOS,y
    sta.z nxt_y
    // [65] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2 -- vbuz1_ge_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    lda.z nxt_y
    ldx.z m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs __b2
    jmp __b5
    // plexSort::@5
  __b5:
    // [66] plexSort::s#6 = plexSort::m#2 -- vbuxx=vbuz1 
    ldx.z m
    // [67] phi from plexSort::@5 plexSort::@7 to plexSort::@3 [phi:plexSort::@5/plexSort::@7->plexSort::@3]
  __b3_from___b5:
  __b3_from___b7:
    // [67] phi plexSort::s#3 = plexSort::s#6 [phi:plexSort::@5/plexSort::@7->plexSort::@3#0] -- register_copy 
    jmp __b3
    // plexSort::@3
  __b3:
    // [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
    // [69] plexSort::s#1 = -- plexSort::s#3 -- vbuxx=_dec_vbuxx 
    dex
    // [70] if(plexSort::s#1==$ff) goto plexSort::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq __b4
    jmp __b7
    // plexSort::@7
  __b7:
    // [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3 -- vbuz1_lt_pbuc1_derefidx_(pbuc2_derefidx_vbuxx)_then_la1 
    lda.z nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc __b3_from___b7
    jmp __b4
    // plexSort::@4
  __b4:
    // [72] plexSort::s#2 = ++ plexSort::s#1 -- vbuxx=_inc_vbuxx 
    inx
    // [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z nxt_idx
    sta PLEX_SORTED_IDX,x
    jmp __b2
    // plexSort::@2
  __b2:
    // [74] plexSort::m#1 = ++ plexSort::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [75] if(plexSort::m#1!=PLEX_COUNT-2+1) goto plexSort::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-2+1
    cmp.z m
    bne __b1_from___b2
    jmp __b6
    // plexSort::@6
  __b6:
    // [76] plex_show_idx = 0 -- vbuz1=vbuc1 
    // Prepare for showing the sprites
    lda #0
    sta.z plex_show_idx
    // [77] plex_sprite_idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_sprite_idx
    // [78] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [79] phi from plexSort::@6 to plexSort::plexFreePrepare1 [phi:plexSort::@6->plexSort::plexFreePrepare1]
  plexFreePrepare1_from___b6:
    jmp plexFreePrepare1
    // plexSort::plexFreePrepare1
  plexFreePrepare1:
    // [80] phi from plexSort::plexFreePrepare1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1:
    // [80] phi plexSort::plexFreePrepare1_s#2 = 0 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp plexFreePrepare1___b1
    // [80] phi from plexSort::plexFreePrepare1_@1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1___b1:
    // [80] phi plexSort::plexFreePrepare1_s#2 = plexSort::plexFreePrepare1_s#1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1#0] -- register_copy 
    jmp plexFreePrepare1___b1
    // plexSort::plexFreePrepare1_@1
  plexFreePrepare1___b1:
    // [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PLEX_FREE_YPOS,x
    // [82] plexSort::plexFreePrepare1_s#1 = ++ plexSort::plexFreePrepare1_s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [83] if(plexSort::plexFreePrepare1_s#1!=8) goto plexSort::plexFreePrepare1_@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne plexFreePrepare1___b1_from_plexFreePrepare1___b1
    jmp plexFreePrepare1___b2
    // plexSort::plexFreePrepare1_@2
  plexFreePrepare1___b2:
    // [84] plex_free_next = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_free_next
    jmp __breturn
    // plexSort::@return
  __breturn:
    // [85] return 
    rts
}
  // plexShowSprite
// Show the next sprite.
// plexSort() prepares showing the sprites
plexShowSprite: {
    .label plex_sprite_idx2 = $e
    // [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1 -- vbuz1=vbuz2_rol_1 
    lda.z plex_sprite_idx
    asl
    sta.z plex_sprite_idx2
    // [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]] -- vbuaa=pbuc1_derefidx_(pbuc2_derefidx_vbuz1) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_YPOS,y
    // [88] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_YPOS,y
    jmp plexFreeAdd1
    // plexShowSprite::plexFreeAdd1
  plexFreeAdd1:
    // [89] plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#0 + $16 -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #$16
    // [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_free_next
    sta PLEX_FREE_YPOS,y
    // [91] plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_free_next
    inx
    // [92] plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // [93] plex_free_next = plexShowSprite::plexFreeAdd1_$2 -- vbuz1=vbuaa 
    sta.z plex_free_next
    jmp __b5
    // plexShowSprite::@5
  __b5:
    // [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_PTR,y
    ldy.z plex_sprite_idx
    sta (PLEX_SCREEN_PTR),y
    // [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_show_idx
    lda PLEX_SORTED_IDX,y
    // [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10] -- pbuc1_derefidx_vbuz1=_byte_pwuc2_derefidx_vbuxx 
    ldy.z plex_sprite_idx2
    lda PLEX_XPOS,x
    sta SPRITES_XPOS,y
    // [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10] -- vbuaa=_byte1_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
    // [99] if(plexShowSprite::$2!=0) goto plexShowSprite::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    jmp __b3
    // plexShowSprite::@3
  __b3:
    // [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor.z plex_sprite_msb
    // [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    jmp __b2
    // plexShowSprite::@2
  __b2:
    // [102] plexShowSprite::$4 = plex_sprite_idx + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_sprite_idx
    inx
    // [103] plexShowSprite::$5 = plexShowSprite::$4 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // [104] plex_sprite_idx = plexShowSprite::$5 -- vbuz1=vbuaa 
    sta.z plex_sprite_idx
    // [105] plex_show_idx = ++ plex_show_idx -- vbuz1=_inc_vbuz1 
    inc.z plex_show_idx
    // [106] plex_sprite_msb = plex_sprite_msb << 1 -- vbuz1=vbuz1_rol_1 
    asl.z plex_sprite_msb
    // [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return -- vbuz1_neq_0_then_la1 
    lda.z plex_sprite_msb
    bne __breturn
    jmp __b4
    // plexShowSprite::@4
  __b4:
    // [108] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    jmp __breturn
    // plexShowSprite::@return
  __breturn:
    // [109] return 
    rts
    // plexShowSprite::@1
  __b1:
    // [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora.z plex_sprite_msb
    sta SPRITES_XMSB
    jmp __b2
}
  // File Data
.segment Data
  // The x-positions of the multiplexer sprites (0x000-0x1ff)
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  // The y-positions of the multiplexer sprites.
  PLEX_YPOS: .fill PLEX_COUNT, 0
  // The sprite pointers for the multiplexed sprites
  PLEX_PTR: .fill PLEX_COUNT, 0
  // Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
  // Contains the Y-position where each sprite is free again. PLEX_FREE_YPOS[s] holds the Y-position where sprite s is free to use again.
  PLEX_FREE_YPOS: .fill 8, 0
  .align $100
YSIN:
.var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = $2000 "SPRITE"
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp plexFreeNextYpos1
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b10
Removing instruction jmp plexSetScreen1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp plexFreePrepare1
Removing instruction jmp plexFreePrepare1___b1
Removing instruction jmp plexFreePrepare1___b2
Removing instruction jmp __breturn
Removing instruction jmp plexFreeAdd1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldy.z nxt_idx with TAY
Removing instruction lda.z nxt_y
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b4_from___b4 with __b4
Replacing label __b7_from___b12 with __b7
Replacing label __b1 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b7 with __b3
Replacing label __b1_from___b2 with __b1
Replacing label plexFreePrepare1___b1_from_plexFreePrepare1___b1 with plexFreePrepare1___b1
Removing instruction __b1_from___init1:
Removing instruction __b1_from_main:
Removing instruction loop_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b3:
Removing instruction __b1:
Removing instruction __b4_from___b4:
Removing instruction __b7_from___b12:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b3_from___b7:
Removing instruction plexFreePrepare1_from___b6:
Removing instruction plexFreePrepare1___b1_from_plexFreePrepare1:
Removing instruction plexFreePrepare1___b1_from_plexFreePrepare1___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction plexInit_from_init:
Removing instruction __b1_from_init:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_loop:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __b5:
Removing instruction plexSort_from___b5:
Removing instruction __b11:
Removing instruction __b7_from___b6:
Removing instruction plexFreeNextYpos1:
Removing instruction __b9:
Removing instruction __b12:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction plexSetScreen1:
Removing instruction __b1_from_plexSetScreen1:
Removing instruction __breturn:
Removing instruction __b1_from_plexSort:
Removing instruction __b5:
Removing instruction __b7:
Removing instruction __b6:
Removing instruction plexFreePrepare1:
Removing instruction plexFreePrepare1___b2:
Removing instruction __breturn:
Removing instruction plexFreeAdd1:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp plexFreePrepare1___b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldx.z m
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
__constant const char BLACK = 0
__constant char * const D011 = (char *) 53265
__constant const char GREEN = 5
__constant char OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
__constant char OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
__constant char OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
__constant const char PLEX_COUNT = $20
__constant char PLEX_FREE_YPOS[8] = { fill( 8, 0) }
__constant char PLEX_PTR[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__loadstore char * volatile PLEX_SCREEN_PTR // zp[2]:6 1402.8333333333335
__constant char PLEX_SORTED_IDX[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant unsigned int PLEX_XPOS[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant char PLEX_YPOS[PLEX_COUNT] = { fill( PLEX_COUNT, 0) }
__constant char *SCREEN = (char *) 1024
__constant char SPRITE[] = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
__constant char * const SPRITES_COLOR = (char *) 53287
__constant char * const SPRITES_XMSB = (char *) 53264
__constant char * const SPRITES_XPOS = (char *) 53248
__constant char * const SPRITES_YPOS = (char *) 53249
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *) 53248
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
__constant const char VICII_RST8 = $80
__constant char YSIN[$100] = kickasm {{ .var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
void __start()
void init()
char init::$3 // reg byte a 2002.0
char init::ss
char init::ss#1 // reg byte x 1501.5
char init::ss#2 // reg byte x 1501.5
char init::sx
char init::sx#1 // reg byte x 1501.5
char init::sx#2 // reg byte x 800.8
unsigned int init::xp
unsigned int init::xp#1 // xp zp[2]:2 667.3333333333334
unsigned int init::xp#2 // xp zp[2]:2 750.75
void loop()
char loop::$5 // reg byte a 20002.0
char loop::plexFreeNextYpos1_return
char loop::plexFreeNextYpos1_return#0 // reg byte a 55001.0
char loop::rasterY
char loop::sin_idx
char loop::sin_idx#1 // sin_idx zp[1]:4 133.46666666666667
char loop::sin_idx#6 // sin_idx zp[1]:4 333.6666666666667
char loop::ss
char loop::ss#1 // ss zp[1]:5 15001.5
char loop::ss#5 // ss zp[1]:5 3333.6666666666665
char loop::sy
char loop::sy#1 // reg byte y 15001.5
char loop::sy#2 // reg byte y 10001.0
char loop::y_idx
char loop::y_idx#1 // reg byte x 6667.333333333333
char loop::y_idx#2 // reg byte x 15502.0
char loop::y_idx#3 // reg byte x 2002.0
void main()
void plexInit(char *screen)
char plexInit::i
char plexInit::i#1 // reg byte x 15001.5
char plexInit::i#2 // reg byte x 20002.0
char *plexInit::plexSetScreen1_screen
char *plexInit::screen
void plexShowSprite()
char plexShowSprite::$10 // reg byte x 100001.0
char plexShowSprite::$2 // reg byte a 200002.0
char plexShowSprite::$4 // reg byte x 200002.0
char plexShowSprite::$5 // reg byte a 200002.0
char plexShowSprite::$8 // reg byte a 200002.0
char plexShowSprite::plexFreeAdd1_$0 // reg byte a 200002.0
char plexShowSprite::plexFreeAdd1_$1 // reg byte x 200002.0
char plexShowSprite::plexFreeAdd1_$2 // reg byte a 200002.0
char plexShowSprite::plexFreeAdd1_ypos
char plexShowSprite::plexFreeAdd1_ypos#0 // reg byte a 150001.5
char plexShowSprite::plex_sprite_idx2
char plexShowSprite::plex_sprite_idx2#0 // plex_sprite_idx2 zp[1]:14 27273.0
char plexShowSprite::xpos_idx
char plexShowSprite::xpos_idx#0 // reg byte a 200002.0
char plexShowSprite::ypos
void plexSort()
char plexSort::m
char plexSort::m#1 // m zp[1]:14 1500001.5
char plexSort::m#2 // m zp[1]:14 416667.0833333334
char plexSort::nxt_idx
char plexSort::nxt_idx#0 // nxt_idx zp[1]:12 300000.30000000005
char plexSort::nxt_y
char plexSort::nxt_y#0 // nxt_y zp[1]:13 1500000.375
char plexSort::plexFreePrepare1_s
char plexSort::plexFreePrepare1_s#1 // reg byte x 1500001.5
char plexSort::plexFreePrepare1_s#2 // reg byte x 1500001.5
char plexSort::s
char plexSort::s#1 // reg byte x 1.3666668333333332E7
char plexSort::s#2 // reg byte x 2000002.0
char plexSort::s#3 // reg byte x 2.05000025E7
char plexSort::s#6 // reg byte x 2000002.0
__loadstore volatile char plex_free_next // zp[1]:11 8648.837837837838
__loadstore volatile char plex_show_idx // zp[1]:8 10851.234042553191
__loadstore volatile char plex_sprite_idx // zp[1]:9 9318.340909090908
__loadstore volatile char plex_sprite_msb // zp[1]:10 13555.755555555555

reg byte x [ init::sx#2 init::sx#1 ]
zp[2]:2 [ init::xp#2 init::xp#1 ]
reg byte x [ init::ss#2 init::ss#1 ]
zp[1]:4 [ loop::sin_idx#6 loop::sin_idx#1 ]
reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
reg byte y [ loop::sy#2 loop::sy#1 ]
zp[1]:5 [ loop::ss#5 loop::ss#1 ]
reg byte x [ plexInit::i#2 plexInit::i#1 ]
reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
reg byte x [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
zp[2]:6 [ PLEX_SCREEN_PTR ]
zp[1]:8 [ plex_show_idx ]
zp[1]:9 [ plex_sprite_idx ]
zp[1]:10 [ plex_sprite_msb ]
zp[1]:11 [ plex_free_next ]
reg byte a [ init::$3 ]
reg byte a [ loop::$5 ]
reg byte a [ loop::plexFreeNextYpos1_return#0 ]
zp[1]:12 [ plexSort::nxt_idx#0 ]
zp[1]:13 [ plexSort::nxt_y#0 ]
reg byte x [ plexSort::s#2 ]
zp[1]:14 [ plexShowSprite::plex_sprite_idx2#0 plexSort::m#2 plexSort::m#1 ]
reg byte a [ plexShowSprite::plexFreeAdd1_ypos#0 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$0 ]
reg byte x [ plexShowSprite::plexFreeAdd1_$1 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$2 ]
reg byte a [ plexShowSprite::xpos_idx#0 ]
reg byte x [ plexShowSprite::$10 ]
reg byte a [ plexShowSprite::$2 ]
reg byte a [ plexShowSprite::$8 ]
reg byte x [ plexShowSprite::$4 ]
reg byte a [ plexShowSprite::$5 ]


FINAL ASSEMBLER
Score: 57307

  // File Comments
// A simple usage of the flexible sprite multiplexer routine
/// @file
/// Commodore 64 Registers and Constants
/// @file
/// The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="simple-multiplexer.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  /// $D011 Control Register #1 Bit#7: RST8 9th Bit for $D012 Rasterline counter
  .const VICII_RST8 = $80
  /// $D011 Control Register #1  Bit#4: DEN Switch VIC-II output on/off
  .const VICII_DEN = $10
  /// $D011 Control Register #1  Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  .const VICII_RSEL = 8
  /// The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  // The number of sprites in the multiplexer
  .const PLEX_COUNT = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  /// Sprite X position register for sprite #0
  .label SPRITES_XPOS = $d000
  /// Sprite Y position register for sprite #0
  .label SPRITES_YPOS = $d001
  /// Sprite X position MSB register
  .label SPRITES_XMSB = $d010
  /// Sprite colors register for sprite #0
  .label SPRITES_COLOR = $d027
  /// $D011 Control Register #1
  /// @see #VICII_CONTROL1
  .label D011 = $d011
  /// The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Location of screen & sprites
  .label SCREEN = $400
  // The address of the sprite pointers on the current screen (screen+0x3f8).
  .label PLEX_SCREEN_PTR = 6
  // The index in the PLEX tables of the next sprite to show
  .label plex_show_idx = 8
  // The index the next sprite to use for showing (sprites are used round-robin)
  .label plex_sprite_idx = 9
  // The MSB bit of the next sprite to use for showing
  .label plex_sprite_msb = $a
  // The index of the sprite that is free next. Since sprites are used round-robin this moves forward each time a sprite is shown.
  .label plex_free_next = $b
.segment Code
  // __start
__start: {
    // __start::__init1
    // char* volatile PLEX_SCREEN_PTR = (char*)0x400+0x3f8
    // [1] PLEX_SCREEN_PTR = (char *) 1024+$3f8 -- pbuz1=pbuc1 
    lda #<$400+$3f8
    sta.z PLEX_SCREEN_PTR
    lda #>$400+$3f8
    sta.z PLEX_SCREEN_PTR+1
    // volatile char plex_show_idx=0
    // [2] plex_show_idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_show_idx
    // volatile char plex_sprite_idx=0
    // [3] plex_sprite_idx = 0 -- vbuz1=vbuc1 
    sta.z plex_sprite_idx
    // volatile char plex_sprite_msb=1
    // [4] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // volatile char plex_free_next = 0
    // [5] plex_free_next = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_free_next
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [7] call main
    jsr main
    // __start::@return
    // [8] return 
    rts
}
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // init()
    // [10] call init
    jsr init
    // [11] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // loop()
    // [12] call loop
    // [29] phi from main::@1 to loop [phi:main::@1->loop]
    jsr loop
    // main::@return
    // }
    // [13] return 
    rts
}
  // init
// Initialize the program
init: {
    // Set the x-positions & pointers
    .label xp = 2
    // *D011 = VICII_DEN | VICII_RSEL | 3
    // [14] *D011 = VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_DEN|VICII_RSEL|3
    sta D011
    // plexInit(SCREEN)
    // [15] call plexInit
  // Initialize the multiplexer
    // [54] phi from init to plexInit [phi:init->plexInit]
    jsr plexInit
    // [16] phi from init to init::@1 [phi:init->init::@1]
    // [16] phi init::xp#2 = $20 [phi:init->init::@1#0] -- vwuz1=vwuc1 
    lda #<$20
    sta.z xp
    lda #>$20
    sta.z xp+1
    // [16] phi init::sx#2 = 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [16] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
    // [16] phi init::xp#2 = init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
    // [16] phi init::sx#2 = init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    // init::@1
  __b1:
    // PLEX_PTR[sx] = (char)(SPRITE/$40)
    // [17] PLEX_PTR[init::sx#2] = (char)SPRITE/$40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta PLEX_PTR,x
    // PLEX_XPOS[sx] = xp
    // [18] init::$3 = init::sx#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [19] PLEX_XPOS[init::$3] = init::xp#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z xp
    sta PLEX_XPOS,y
    lda.z xp+1
    sta PLEX_XPOS+1,y
    // xp += 9
    // [20] init::xp#1 = init::xp#2 + 9 -- vwuz1=vwuz1_plus_vbuc1 
    lda #9
    clc
    adc.z xp
    sta.z xp
    bcc !+
    inc.z xp+1
  !:
    // for(char sx: 0..PLEX_COUNT-1)
    // [21] init::sx#1 = ++ init::sx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [22] if(init::sx#1!=PLEX_COUNT-1+1) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1
    // init::@2
    // VICII->SPRITES_ENABLE = $ff
    // [23] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff -- _deref_pbuc1=vbuc2 
    // Enable & initialize sprites
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [24] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
    // [24] phi init::ss#2 = 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [24] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
    // [24] phi init::ss#2 = init::ss#1 [phi:init::@3->init::@3#0] -- register_copy 
    // init::@3
  __b3:
    // SPRITES_COLOR[ss] = GREEN
    // [25] SPRITES_COLOR[init::ss#2] = GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // for(char ss: 0..7)
    // [26] init::ss#1 = ++ init::ss#2 -- vbuxx=_inc_vbuxx 
    inx
    // [27] if(init::ss#1!=8) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3
    // init::@return
    // }
    // [28] return 
    rts
}
  // loop
// The raster loop
loop: {
    // The current index into the y-sine
    .label sin_idx = 4
    .label ss = 5
    // [30] phi from loop to loop::@1 [phi:loop->loop::@1]
    // [30] phi loop::sin_idx#6 = 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    // loop::@1
    // loop::@2
  __b2:
    // while(VICII->RASTER!=$ff)
    // [31] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    // loop::@3
    // (VICII->BORDER_COLOR)++;
    // [32] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [33] loop::y_idx#3 = loop::sin_idx#6 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [34] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
    // [34] phi loop::sy#2 = 0 [phi:loop::@3->loop::@4#0] -- vbuyy=vbuc1 
    ldy #0
    // [34] phi loop::y_idx#2 = loop::y_idx#3 [phi:loop::@3->loop::@4#1] -- register_copy 
    // [34] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
    // [34] phi loop::sy#2 = loop::sy#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [34] phi loop::y_idx#2 = loop::y_idx#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    // loop::@4
  __b4:
    // PLEX_YPOS[sy] = YSIN[y_idx]
    // [35] PLEX_YPOS[loop::sy#2] = YSIN[loop::y_idx#2] -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
    // y_idx += 8
    // [36] loop::y_idx#1 = loop::y_idx#2 + 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[8]
    // for(char sy: 0..PLEX_COUNT-1)
    // [37] loop::sy#1 = ++ loop::sy#2 -- vbuyy=_inc_vbuyy 
    iny
    // [38] if(loop::sy#1!=PLEX_COUNT-1+1) goto loop::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne __b4
    // loop::@5
    // sin_idx +=1
    // [39] loop::sin_idx#1 = loop::sin_idx#6 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z sin_idx
    // (VICII->BORDER_COLOR)++;
    // [40] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // plexSort()
    // [41] call plexSort
    // [61] phi from loop::@5 to plexSort [phi:loop::@5->plexSort]
    jsr plexSort
    // loop::@11
    // VICII->BORDER_COLOR = BLACK
    // [42] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // loop::@6
  __b6:
    // *D011&VICII_RST8
    // [43] loop::$5 = *D011 & VICII_RST8 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #VICII_RST8
    and D011
    // while((*D011&VICII_RST8)!=0)
    // [44] if(loop::$5!=0) goto loop::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6
    // [45] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
    // [45] phi loop::ss#5 = 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
  // Show the sprites
    // [45] phi from loop::@12 to loop::@7 [phi:loop::@12->loop::@7]
    // [45] phi loop::ss#5 = loop::ss#1 [phi:loop::@12->loop::@7#0] -- register_copy 
    // loop::@7
  __b7:
    // VICII->BORDER_COLOR = BLACK
    // [46] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // loop::plexFreeNextYpos1
    // return PLEX_FREE_YPOS[plex_free_next];
    // [47] loop::plexFreeNextYpos1_return#0 = PLEX_FREE_YPOS[plex_free_next] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_free_next
    lda PLEX_FREE_YPOS,y
    // loop::@8
  __b8:
    // while(VICII->RASTER<rasterY)
    // [48] if(*((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)<loop::plexFreeNextYpos1_return#0) goto loop::@8 -- _deref_pbuc1_lt_vbuaa_then_la1 
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    beq !+
    bcs __b8
  !:
    // loop::@9
    // (VICII->BORDER_COLOR)++;
    // [49] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // plexShowSprite()
    // [50] call plexShowSprite
    jsr plexShowSprite
    // loop::@12
    // for( char ss: 0..PLEX_COUNT-1)
    // [51] loop::ss#1 = ++ loop::ss#5 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [52] if(loop::ss#1!=PLEX_COUNT-1+1) goto loop::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z ss
    bne __b7
    // loop::@10
    // VICII->BORDER_COLOR = BLACK
    // [53] *((char *)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [30] phi from loop::@10 to loop::@1 [phi:loop::@10->loop::@1]
    // [30] phi loop::sin_idx#6 = loop::sin_idx#1 [phi:loop::@10->loop::@1#0] -- register_copy 
    jmp __b2
}
  // plexInit
// Initialize the multiplexer data structures
// void plexInit(char *screen)
plexInit: {
    // plexInit::plexSetScreen1
    // PLEX_SCREEN_PTR = screen+0x3f8
    // [55] PLEX_SCREEN_PTR = SCREEN+$3f8 -- pbuz1=pbuc1 
    lda #<SCREEN+$3f8
    sta.z PLEX_SCREEN_PTR
    lda #>SCREEN+$3f8
    sta.z PLEX_SCREEN_PTR+1
    // [56] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
    // [56] phi plexInit::i#2 = 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [56] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
    // [56] phi plexInit::i#2 = plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    // plexInit::@1
  __b1:
    // PLEX_SORTED_IDX[i] = i
    // [57] PLEX_SORTED_IDX[plexInit::i#2] = plexInit::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
    // for(char i: 0..PLEX_COUNT-1)
    // [58] plexInit::i#1 = ++ plexInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [59] if(plexInit::i#1!=PLEX_COUNT-1+1) goto plexInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1
    // plexInit::@return
    // }
    // [60] return 
    rts
}
  // plexSort
// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
plexSort: {
    .label nxt_idx = $c
    .label nxt_y = $d
    .label m = $e
    // [62] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
    // [62] phi plexSort::m#2 = 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    // [62] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
    // [62] phi plexSort::m#2 = plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    // plexSort::@1
  __b1:
    // char nxt_idx = PLEX_SORTED_IDX[m+1]
    // [63] plexSort::nxt_idx#0 = (PLEX_SORTED_IDX+1)[plexSort::m#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z m
    lda PLEX_SORTED_IDX+1,y
    sta.z nxt_idx
    // char nxt_y = PLEX_YPOS[nxt_idx]
    // [64] plexSort::nxt_y#0 = PLEX_YPOS[plexSort::nxt_idx#0] -- vbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda PLEX_YPOS,y
    sta.z nxt_y
    // if(nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[m]])
    // [65] if(plexSort::nxt_y#0>=PLEX_YPOS[PLEX_SORTED_IDX[plexSort::m#2]]) goto plexSort::@2 -- vbuz1_ge_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    ldx.z m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs __b2
    // plexSort::@5
    // [66] plexSort::s#6 = plexSort::m#2 -- vbuxx=vbuz1 
    // [67] phi from plexSort::@5 plexSort::@7 to plexSort::@3 [phi:plexSort::@5/plexSort::@7->plexSort::@3]
    // [67] phi plexSort::s#3 = plexSort::s#6 [phi:plexSort::@5/plexSort::@7->plexSort::@3#0] -- register_copy 
    // plexSort::@3
  __b3:
    // PLEX_SORTED_IDX[s+1] = PLEX_SORTED_IDX[s]
    // [68] (PLEX_SORTED_IDX+1)[plexSort::s#3] = PLEX_SORTED_IDX[plexSort::s#3] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
    // s--;
    // [69] plexSort::s#1 = -- plexSort::s#3 -- vbuxx=_dec_vbuxx 
    dex
    // while((s!=0xff) && (nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[s]]))
    // [70] if(plexSort::s#1==$ff) goto plexSort::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq __b4
    // plexSort::@7
    // [71] if(plexSort::nxt_y#0<PLEX_YPOS[PLEX_SORTED_IDX[plexSort::s#1]]) goto plexSort::@3 -- vbuz1_lt_pbuc1_derefidx_(pbuc2_derefidx_vbuxx)_then_la1 
    lda.z nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc __b3
    // plexSort::@4
  __b4:
    // s++;
    // [72] plexSort::s#2 = ++ plexSort::s#1 -- vbuxx=_inc_vbuxx 
    inx
    // PLEX_SORTED_IDX[s] = nxt_idx
    // [73] PLEX_SORTED_IDX[plexSort::s#2] = plexSort::nxt_idx#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z nxt_idx
    sta PLEX_SORTED_IDX,x
    // plexSort::@2
  __b2:
    // for(char m: 0..PLEX_COUNT-2)
    // [74] plexSort::m#1 = ++ plexSort::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [75] if(plexSort::m#1!=PLEX_COUNT-2+1) goto plexSort::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-2+1
    cmp.z m
    bne __b1
    // plexSort::@6
    // plex_show_idx = 0
    // [76] plex_show_idx = 0 -- vbuz1=vbuc1 
    // Prepare for showing the sprites
    lda #0
    sta.z plex_show_idx
    // plex_sprite_idx = 0
    // [77] plex_sprite_idx = 0 -- vbuz1=vbuc1 
    sta.z plex_sprite_idx
    // plex_sprite_msb = 1
    // [78] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [79] phi from plexSort::@6 to plexSort::plexFreePrepare1 [phi:plexSort::@6->plexSort::plexFreePrepare1]
    // plexSort::plexFreePrepare1
    // [80] phi from plexSort::plexFreePrepare1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1]
    // [80] phi plexSort::plexFreePrepare1_s#2 = 0 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [80] phi from plexSort::plexFreePrepare1_@1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1]
    // [80] phi plexSort::plexFreePrepare1_s#2 = plexSort::plexFreePrepare1_s#1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1#0] -- register_copy 
    // plexSort::plexFreePrepare1_@1
  plexFreePrepare1___b1:
    // PLEX_FREE_YPOS[s] = 0
    // [81] PLEX_FREE_YPOS[plexSort::plexFreePrepare1_s#2] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PLEX_FREE_YPOS,x
    // for( char s: 0..7)
    // [82] plexSort::plexFreePrepare1_s#1 = ++ plexSort::plexFreePrepare1_s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [83] if(plexSort::plexFreePrepare1_s#1!=8) goto plexSort::plexFreePrepare1_@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne plexFreePrepare1___b1
    // plexSort::plexFreePrepare1_@2
    // plex_free_next = 0
    // [84] plex_free_next = 0 -- vbuz1=vbuc1 
    sta.z plex_free_next
    // plexSort::@return
    // }
    // [85] return 
    rts
}
  // plexShowSprite
// Show the next sprite.
// plexSort() prepares showing the sprites
plexShowSprite: {
    .label plex_sprite_idx2 = $e
    // char plex_sprite_idx2 = plex_sprite_idx*2
    // [86] plexShowSprite::plex_sprite_idx2#0 = plex_sprite_idx << 1 -- vbuz1=vbuz2_rol_1 
    lda.z plex_sprite_idx
    asl
    sta.z plex_sprite_idx2
    // char ypos = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]]
    // [87] plexShowSprite::plexFreeAdd1_ypos#0 = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]] -- vbuaa=pbuc1_derefidx_(pbuc2_derefidx_vbuz1) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_YPOS,y
    // SPRITES_YPOS[plex_sprite_idx2] = ypos
    // [88] SPRITES_YPOS[plexShowSprite::plex_sprite_idx2#0] = plexShowSprite::plexFreeAdd1_ypos#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_YPOS,y
    // plexShowSprite::plexFreeAdd1
    // ypos+22
    // [89] plexShowSprite::plexFreeAdd1_$0 = plexShowSprite::plexFreeAdd1_ypos#0 + $16 -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #$16
    // PLEX_FREE_YPOS[plex_free_next] =  ypos+22
    // [90] PLEX_FREE_YPOS[plex_free_next] = plexShowSprite::plexFreeAdd1_$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_free_next
    sta PLEX_FREE_YPOS,y
    // plex_free_next+1
    // [91] plexShowSprite::plexFreeAdd1_$1 = plex_free_next + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_free_next
    inx
    // (plex_free_next+1)&7
    // [92] plexShowSprite::plexFreeAdd1_$2 = plexShowSprite::plexFreeAdd1_$1 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // plex_free_next = (plex_free_next+1)&7
    // [93] plex_free_next = plexShowSprite::plexFreeAdd1_$2 -- vbuz1=vbuaa 
    sta.z plex_free_next
    // plexShowSprite::@5
    // PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]]
    // [94] PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_PTR,y
    ldy.z plex_sprite_idx
    sta (PLEX_SCREEN_PTR),y
    // char xpos_idx = PLEX_SORTED_IDX[plex_show_idx]
    // [95] plexShowSprite::xpos_idx#0 = PLEX_SORTED_IDX[plex_show_idx] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_show_idx
    lda PLEX_SORTED_IDX,y
    // SPRITES_XPOS[plex_sprite_idx2] = (char)PLEX_XPOS[xpos_idx]
    // [96] plexShowSprite::$10 = plexShowSprite::xpos_idx#0 << 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [97] SPRITES_XPOS[plexShowSprite::plex_sprite_idx2#0] = (char)PLEX_XPOS[plexShowSprite::$10] -- pbuc1_derefidx_vbuz1=_byte_pwuc2_derefidx_vbuxx 
    ldy.z plex_sprite_idx2
    lda PLEX_XPOS,x
    sta SPRITES_XPOS,y
    // BYTE1(PLEX_XPOS[xpos_idx])
    // [98] plexShowSprite::$2 = byte1  PLEX_XPOS[plexShowSprite::$10] -- vbuaa=_byte1_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
    // if(BYTE1(PLEX_XPOS[xpos_idx])!=0)
    // [99] if(plexShowSprite::$2!=0) goto plexShowSprite::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    // plexShowSprite::@3
    // 0xff^plex_sprite_msb
    // [100] plexShowSprite::$8 = $ff ^ plex_sprite_msb -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor.z plex_sprite_msb
    // *SPRITES_XMSB &= (0xff^plex_sprite_msb)
    // [101] *SPRITES_XMSB = *SPRITES_XMSB & plexShowSprite::$8 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    // plexShowSprite::@2
  __b2:
    // plex_sprite_idx+1
    // [102] plexShowSprite::$4 = plex_sprite_idx + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_sprite_idx
    inx
    // (plex_sprite_idx+1)&7
    // [103] plexShowSprite::$5 = plexShowSprite::$4 & 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // plex_sprite_idx = (plex_sprite_idx+1)&7
    // [104] plex_sprite_idx = plexShowSprite::$5 -- vbuz1=vbuaa 
    sta.z plex_sprite_idx
    // plex_show_idx++;
    // [105] plex_show_idx = ++ plex_show_idx -- vbuz1=_inc_vbuz1 
    inc.z plex_show_idx
    // plex_sprite_msb <<=1
    // [106] plex_sprite_msb = plex_sprite_msb << 1 -- vbuz1=vbuz1_rol_1 
    asl.z plex_sprite_msb
    // if(plex_sprite_msb==0)
    // [107] if(plex_sprite_msb!=0) goto plexShowSprite::@return -- vbuz1_neq_0_then_la1 
    lda.z plex_sprite_msb
    bne __breturn
    // plexShowSprite::@4
    // plex_sprite_msb = 1
    // [108] plex_sprite_msb = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // plexShowSprite::@return
  __breturn:
    // }
    // [109] return 
    rts
    // plexShowSprite::@1
  __b1:
    // *SPRITES_XMSB |= plex_sprite_msb
    // [110] *SPRITES_XMSB = *SPRITES_XMSB | plex_sprite_msb -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora.z plex_sprite_msb
    sta SPRITES_XMSB
    jmp __b2
}
  // File Data
.segment Data
  // The x-positions of the multiplexer sprites (0x000-0x1ff)
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  // The y-positions of the multiplexer sprites.
  PLEX_YPOS: .fill PLEX_COUNT, 0
  // The sprite pointers for the multiplexed sprites
  PLEX_PTR: .fill PLEX_COUNT, 0
  // Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
  // Contains the Y-position where each sprite is free again. PLEX_FREE_YPOS[s] holds the Y-position where sprite s is free to use again.
  PLEX_FREE_YPOS: .fill 8, 0
  .align $100
YSIN:
.var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = $2000 "SPRITE"
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


