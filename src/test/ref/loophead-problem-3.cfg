
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call mul16u 
  [2] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] (dword) main::result#0 ← (dword) mul16u::return#2
  [4] (word) main::kaputt#0 ← < (dword) main::result#0
  [5] (byte~) main::$2 ← < (word) main::kaputt#0
  [6] *((const nomodify byte*) BORDER_COLOR) ← (byte~) main::$2
  [7] (byte~) main::$3 ← > (word) main::kaputt#0
  [8] *((const nomodify byte*) BG_COLOR) ← (byte~) main::$3
  to:main::@return
main::@return: scope:[main]  from main::@1
  [9] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from main
  [10] phi()
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [11] (dword) mul16u::mb#2 ← phi( mul16u/(dword)(const word) mul16u::b#0 mul16u::@3/(dword) mul16u::mb#1 )
  [11] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [11] (word) mul16u::a#2 ← phi( mul16u/(byte) 4 mul16u::@3/(word) mul16u::a#0 )
  [12] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [13] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [14] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [15] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [16] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [17] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [18] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [19] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
