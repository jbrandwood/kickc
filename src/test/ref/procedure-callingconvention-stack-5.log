Converting PHI-variable modified inside __stackcall procedure next() to load/store (signed word) current
Calling convention STACK_CALL adding prepare/execute/finalize for (signed word~) main::$0 ← call next 
Calling convention STACK_CALL adding prepare/execute/finalize for (signed word~) main::$1 ← call next 
Calling convention STACK_CALL adding stack return stackidx(signed word,next::OFFSET_STACK_RETURN) ← next::return
Calling convention STACK_CALL adding stack pull main::$0 ← stackpull(signed word)
Calling convention STACK_CALL adding stack pull main::$1 ← stackpull(signed word)

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  sideeffect stackpushbytes((number) 2)
  callexecute next 
  (signed word~) main::$0 ← stackpull(signed word)
  (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_SIGNED_WORD
  *((const nomodify signed word*) SCREEN + (number~) main::$2) ← (signed word~) main::$0
  sideeffect stackpushbytes((number) 2)
  callexecute next 
  (signed word~) main::$1 ← stackpull(signed word)
  (number~) main::$3 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
  *((const nomodify signed word*) SCREEN + (number~) main::$3) ← (signed word~) main::$1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (signed word) current ← (signed word) $30
  to:@2

__stackcall (signed word()) next()
next: scope:[next]  from
  (signed word) next::return#0 ← (signed word) current
  (signed word) current ← ++ (signed word) current
  to:next::@return
next::@return: scope:[next]  from next
  (signed word) next::return#1 ← phi( next/(signed word) next::return#0 )
  stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#1
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify signed word*) SCREEN = (signed word*)(number) $400
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const word) STACK_BASE = (word) $103
(signed word) current loadstore
(void()) main()
(signed word~) main::$0
(signed word~) main::$1
(number~) main::$2
(number~) main::$3
(label) main::@return
__stackcall (signed word()) next()
(label) next::@return
(const byte) next::OFFSET_STACK_RETURN = (byte) 0
(signed word) next::return
(signed word) next::return#0
(signed word) next::return#1

Adding number conversion cast (unumber) 0 in (number~) main::$2 ← (number) 0 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 0 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$3 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber)(number) 1 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (signed word*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 0 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$3 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Alias next::return#0 = next::return#1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [3] (byte~) main::$2 ← (byte) 0 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [8] (byte~) main::$3 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$2 = 0*SIZEOF_SIGNED_WORD
Constant (const byte) main::$3 = 1*SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_SIGNED_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN in [4] *((const nomodify signed word*) SCREEN + (const byte) main::$2) ← (signed word~) main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$2
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::$3 = (byte) 1*(const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+1*SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to next:7 next:11 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (signed word) current ← (signed word) $30
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  sideeffect stackpushbytes((number) 2)
  [6] callexecute next 
  [7] (signed word~) main::$0 ← stackpull(signed word)
  [8] *((const nomodify signed word*) SCREEN) ← (signed word~) main::$0
  sideeffect stackpushbytes((number) 2)
  [10] callexecute next 
  [11] (signed word~) main::$1 ← stackpull(signed word)
  [12] *((const nomodify signed word*) SCREEN+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return

__stackcall (signed word()) next()
next: scope:[next]  from
  [14] (signed word) next::return#0 ← (signed word) current
  [15] (signed word) current ← ++ (signed word) current
  to:next::@return
next::@return: scope:[next]  from next
  [16] stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#0
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed word) current loadstore 27.727272727272727
(void()) main()
(signed word~) main::$0 22.0
(signed word~) main::$1 22.0
__stackcall (signed word()) next()
(signed word) next::return
(signed word) next::return#0 101.0

Initial phi equivalence classes
Added variable current to live range equivalence class [ current ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable next::return#0 to live range equivalence class [ next::return#0 ]
Complete equivalence classes
[ current ]
[ main::$0 ]
[ main::$1 ]
[ next::return#0 ]
Allocated zp[2]:2 [ current ]
Allocated zp[2]:4 [ main::$0 ]
Allocated zp[2]:6 [ main::$1 ]
Allocated zp[2]:8 [ next::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a procedure with calling convention stack
// Return value larger than parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_SIGNED_WORD = 2
  .const STACK_BASE = $103
  .label current = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (signed word) current ← (signed word) $30 -- vwsz1=vwsc1 
  lda #<$30
  sta.z current
  lda #>$30
  sta.z current+1
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 4
    .label __1 = 6
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [6] callexecute next  -- jsr 
    jsr next
    // [7] (signed word~) main::$0 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __0
    pla
    sta.z __0+1
    // [8] *((const nomodify signed word*) SCREEN) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [10] callexecute next  -- jsr 
    jsr next
    // [11] (signed word~) main::$1 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __1
    pla
    sta.z __1+1
    // [12] *((const nomodify signed word*) SCREEN+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+1*SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+1*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // next
next: {
    .const OFFSET_STACK_RETURN = 0
    .label return = 8
    // [14] (signed word) next::return#0 ← (signed word) current -- vwsz1=vwsz2 
    lda.z current
    sta.z return
    lda.z current+1
    sta.z return+1
    // [15] (signed word) current ← ++ (signed word) current -- vwsz1=_inc_vwsz1 
    inc.z current
    bne !+
    inc.z current+1
  !:
    jmp __breturn
    // next::@return
  __breturn:
    // [16] stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#0 -- _stackidxsword_vbuc1=vwsz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN+1,x
    // [17] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (signed word) current ← (signed word) $30 [ current ] (  [ current ] { }  ) always clobbers reg byte a 
Statement [7] (signed word~) main::$0 ← stackpull(signed word) [ current main::$0 ] ( main:3 [ current main::$0 ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify signed word*) SCREEN) ← (signed word~) main::$0 [ current ] ( main:3 [ current ] { }  ) always clobbers reg byte a 
Statement [11] (signed word~) main::$1 ← stackpull(signed word) [ main::$1 ] ( main:3 [ main::$1 ] { }  ) always clobbers reg byte a 
Statement [12] *((const nomodify signed word*) SCREEN+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [14] (signed word) next::return#0 ← (signed word) current [ current next::return#0 ] ( main:3::next:6 [ current next::return#0 ] { }  main:3::next:10 [ current next::return#0 ] { }  ) always clobbers reg byte a 
Statement [16] stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#0 [ current ] ( main:3::next:6 [ current ] { }  main:3::next:10 [ current ] { }  ) always clobbers reg byte a reg byte x 
Potential registers zp[2]:2 [ current ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$0 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::$1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ next::return#0 ] : zp[2]:8 , 

REGISTER UPLIFT SCOPES
Uplift Scope [next] 101: zp[2]:8 [ next::return#0 ] 
Uplift Scope [main] 22: zp[2]:4 [ main::$0 ] 22: zp[2]:6 [ main::$1 ] 
Uplift Scope [] 27.73: zp[2]:2 [ current ] 

Uplifting [next] best 192 combination zp[2]:8 [ next::return#0 ] 
Uplifting [main] best 192 combination zp[2]:4 [ main::$0 ] zp[2]:6 [ main::$1 ] 
Uplifting [] best 192 combination zp[2]:2 [ current ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Return value larger than parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_SIGNED_WORD = 2
  .const STACK_BASE = $103
  .label current = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (signed word) current ← (signed word) $30 -- vwsz1=vwsc1 
  lda #<$30
  sta.z current
  lda #>$30
  sta.z current+1
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 4
    .label __1 = 6
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [6] callexecute next  -- jsr 
    jsr next
    // [7] (signed word~) main::$0 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __0
    pla
    sta.z __0+1
    // [8] *((const nomodify signed word*) SCREEN) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [10] callexecute next  -- jsr 
    jsr next
    // [11] (signed word~) main::$1 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __1
    pla
    sta.z __1+1
    // [12] *((const nomodify signed word*) SCREEN+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+1*SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+1*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // next
next: {
    .const OFFSET_STACK_RETURN = 0
    .label return = 8
    // [14] (signed word) next::return#0 ← (signed word) current -- vwsz1=vwsz2 
    lda.z current
    sta.z return
    lda.z current+1
    sta.z return+1
    // [15] (signed word) current ← ++ (signed word) current -- vwsz1=_inc_vwsz1 
    inc.z current
    bne !+
    inc.z current+1
  !:
    jmp __breturn
    // next::@return
  __breturn:
    // [16] stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#0 -- _stackidxsword_vbuc1=vwsz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN+1,x
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify signed word*) SCREEN = (signed word*) 1024
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const word) STACK_BASE = (word) $103
(signed word) current loadstore zp[2]:2 27.727272727272727
(void()) main()
(signed word~) main::$0 zp[2]:4 22.0
(signed word~) main::$1 zp[2]:6 22.0
(label) main::@return
__stackcall (signed word()) next()
(label) next::@return
(const byte) next::OFFSET_STACK_RETURN = (byte) 0
(signed word) next::return
(signed word) next::return#0 return zp[2]:8 101.0

zp[2]:2 [ current ]
zp[2]:4 [ main::$0 ]
zp[2]:6 [ main::$1 ]
zp[2]:8 [ next::return#0 ]


FINAL ASSEMBLER
Score: 156

  // File Comments
// Test a procedure with calling convention stack
// Return value larger than parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const SIZEOF_SIGNED_WORD = 2
  .const STACK_BASE = $103
  .label current = 2
  // @begin
__bbegin:
  // @1
  // current = 48
  // [1] (signed word) current ← (signed word) $30 -- vwsz1=vwsc1 
  lda #<$30
  sta.z current
  lda #>$30
  sta.z current+1
  // [2] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [3] call main 
  jsr main
  rts
  // [4] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    .label __0 = 4
    .label __1 = 6
    // next()
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [6] callexecute next  -- jsr 
    jsr next
    // [7] (signed word~) main::$0 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __0
    pla
    sta.z __0+1
    // SCREEN[0] = next()
    // [8] *((const nomodify signed word*) SCREEN) ← (signed word~) main::$0 -- _deref_pwsc1=vwsz1 
    lda.z __0
    sta SCREEN
    lda.z __0+1
    sta SCREEN+1
    // next()
    // sideeffect stackpushbytes((number) 2) -- _stackpushbyte_2 
    pha
    pha
    // [10] callexecute next  -- jsr 
    jsr next
    // [11] (signed word~) main::$1 ← stackpull(signed word) -- vwsz1=_stackpullsword_ 
    pla
    sta.z __1
    pla
    sta.z __1+1
    // SCREEN[1] = next()
    // [12] *((const nomodify signed word*) SCREEN+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed word~) main::$1 -- _deref_pwsc1=vwsz1 
    lda.z __1
    sta SCREEN+1*SIZEOF_SIGNED_WORD
    lda.z __1+1
    sta SCREEN+1*SIZEOF_SIGNED_WORD+1
    // main::@return
    // }
    // [13] return 
    rts
}
  // next
next: {
    .const OFFSET_STACK_RETURN = 0
    .label return = 8
    // return current++;
    // [14] (signed word) next::return#0 ← (signed word) current -- vwsz1=vwsz2 
    lda.z current
    sta.z return
    lda.z current+1
    sta.z return+1
    // [15] (signed word) current ← ++ (signed word) current -- vwsz1=_inc_vwsz1 
    inc.z current
    bne !+
    inc.z current+1
  !:
    // next::@return
    // }
    // [16] stackidx(signed word,(const byte) next::OFFSET_STACK_RETURN) ← (signed word) next::return#0 -- _stackidxsword_vbuc1=vwsz1 
    tsx
    lda.z return
    sta STACK_BASE+OFFSET_STACK_RETURN,x
    lda.z return+1
    sta STACK_BASE+OFFSET_STACK_RETURN+1,x
    // [17] return 
    rts
}
  // File Data

