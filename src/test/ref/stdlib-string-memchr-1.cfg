
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] conio_textcolor = LIGHT_BLUE
  [6] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [10] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [11] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [12] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [13] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [14] gotoxy::y#2 = conio_c64_init::line#2
  [15] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [16] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [17] phi()
  [18] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [19] phi()
  [20] call memchr 
  [21] memchr::return#3 = memchr::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [22] main::ptr#0 = memchr::return#3
  [23] assert_uint::actual#0 = (byte*)main::ptr#0 - main::str
  [24] call assert_uint 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [25] phi()
  [26] call memchr 
  [27] memchr::return#4 = memchr::return#2
  to:main::@4
main::@4: scope:[main]  from main::@3
  [28] main::ptr2#0 = memchr::return#4
  [29] call assert_ptr 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [30] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [31] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [32] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [33] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [34] conio_cursor_x = gotoxy::x#2
  [35] conio_cursor_y = gotoxy::y#4
  [36] gotoxy::$7 = (word)gotoxy::y#4
  [37] gotoxy::$8 = gotoxy::$7 << 2
  [38] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [39] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [40] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [41] conio_line_text = gotoxy::$5
  [42] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [43] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [44] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [45] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [46] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [46] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [46] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [47] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [48] conio_cursor_x = 0
  [49] conio_cursor_y = 0
  [50] conio_line_text = DEFAULT_SCREEN
  [51] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [52] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [53] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [54] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [55] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [56] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [57] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [58] clrscr::line_text#5[clrscr::c#2] = ' '
  [59] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor
  [60] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void* memchr(to_nomodify void* memchr::str , byte memchr::c , word memchr::n)
memchr: scope:[memchr]  from main::@1 main::@3
  [61] memchr::c#4 = phi( main::@1/'a', main::@3/'a' )
  [61] memchr::n#3 = phi( main::@1/$e, main::@3/7 )
  to:memchr::@1
memchr::@1: scope:[memchr]  from memchr memchr::@3
  [62] memchr::ptr#2 = phi( memchr/(byte*)(void*)main::str, memchr::@3/memchr::ptr#1 )
  [62] memchr::i#2 = phi( memchr/0, memchr::@3/memchr::i#1 )
  [63] if(memchr::i#2<memchr::n#3) goto memchr::@2
  to:memchr::@return
memchr::@return: scope:[memchr]  from memchr::@1 memchr::@4
  [64] memchr::return#2 = phi( memchr::@1/(void*) 0, memchr::@4/memchr::return#8 )
  [65] return 
  to:@return
memchr::@2: scope:[memchr]  from memchr::@1
  [66] if(*memchr::ptr#2!=memchr::c#4) goto memchr::@3
  to:memchr::@4
memchr::@4: scope:[memchr]  from memchr::@2
  [67] memchr::return#8 = (void*)memchr::ptr#2
  to:memchr::@return
memchr::@3: scope:[memchr]  from memchr::@2
  [68] memchr::ptr#1 = ++ memchr::ptr#2
  [69] memchr::i#1 = ++ memchr::i#2
  to:memchr::@1

void assert_uint(word assert_uint::expect , word assert_uint::actual , byte* assert_uint::message)
assert_uint: scope:[assert_uint]  from main::@2
  [70] if(assert_uint::expect#0!=assert_uint::actual#0) goto assert_uint::@1
  to:assert_uint::@2
assert_uint::@2: scope:[assert_uint]  from assert_uint
  [71] phi()
  [72] call textcolor 
  to:assert_uint::@10
assert_uint::@10: scope:[assert_uint]  from assert_uint::@2
  [73] phi()
  [74] call cputs 
  to:assert_uint::@11
assert_uint::@11: scope:[assert_uint]  from assert_uint::@10
  [75] phi()
  [76] call printf_string 
  to:assert_uint::@12
assert_uint::@12: scope:[assert_uint]  from assert_uint::@11
  [77] phi()
  [78] call cputs 
  to:assert_uint::@return
assert_uint::@return: scope:[assert_uint]  from assert_uint::@12 assert_uint::@9
  [79] return 
  to:@return
assert_uint::@1: scope:[assert_uint]  from assert_uint
  [80] phi()
  [81] call textcolor 
  to:assert_uint::@3
assert_uint::@3: scope:[assert_uint]  from assert_uint::@1
  [82] phi()
  [83] call cputs 
  to:assert_uint::@4
assert_uint::@4: scope:[assert_uint]  from assert_uint::@3
  [84] phi()
  [85] call printf_uint 
  to:assert_uint::@5
assert_uint::@5: scope:[assert_uint]  from assert_uint::@4
  [86] phi()
  [87] call cputs 
  to:assert_uint::@6
assert_uint::@6: scope:[assert_uint]  from assert_uint::@5
  [88] printf_uint::uvalue#1 = assert_uint::actual#0
  [89] call printf_uint 
  to:assert_uint::@7
assert_uint::@7: scope:[assert_uint]  from assert_uint::@6
  [90] phi()
  [91] call cputs 
  to:assert_uint::@8
assert_uint::@8: scope:[assert_uint]  from assert_uint::@7
  [92] phi()
  [93] call printf_string 
  to:assert_uint::@9
assert_uint::@9: scope:[assert_uint]  from assert_uint::@8
  [94] phi()
  [95] call cputs 
  to:assert_uint::@return

void assert_ptr(void* assert_ptr::expect , void* assert_ptr::actual , byte* assert_ptr::message)
assert_ptr: scope:[assert_ptr]  from main::@4
  [96] if(assert_ptr::expect#0!=(void*)(byte*)main::ptr2#0) goto assert_ptr::@1
  to:assert_ptr::@2
assert_ptr::@2: scope:[assert_ptr]  from assert_ptr
  [97] phi()
  [98] call textcolor 
  to:assert_ptr::@10
assert_ptr::@10: scope:[assert_ptr]  from assert_ptr::@2
  [99] phi()
  [100] call cputs 
  to:assert_ptr::@11
assert_ptr::@11: scope:[assert_ptr]  from assert_ptr::@10
  [101] phi()
  [102] call printf_string 
  to:assert_ptr::@12
assert_ptr::@12: scope:[assert_ptr]  from assert_ptr::@11
  [103] phi()
  [104] call cputs 
  to:assert_ptr::@return
assert_ptr::@return: scope:[assert_ptr]  from assert_ptr::@12 assert_ptr::@9
  [105] return 
  to:@return
assert_ptr::@1: scope:[assert_ptr]  from assert_ptr
  [106] phi()
  [107] call textcolor 
  to:assert_ptr::@3
assert_ptr::@3: scope:[assert_ptr]  from assert_ptr::@1
  [108] phi()
  [109] call cputs 
  to:assert_ptr::@4
assert_ptr::@4: scope:[assert_ptr]  from assert_ptr::@3
  [110] phi()
  [111] call printf_uint 
  to:assert_ptr::@5
assert_ptr::@5: scope:[assert_ptr]  from assert_ptr::@4
  [112] phi()
  [113] call cputs 
  to:assert_ptr::@6
assert_ptr::@6: scope:[assert_ptr]  from assert_ptr::@5
  [114] printf_uint::uvalue#8 = (word)(void*)(byte*)main::ptr2#0
  [115] call printf_uint 
  to:assert_ptr::@7
assert_ptr::@7: scope:[assert_ptr]  from assert_ptr::@6
  [116] phi()
  [117] call cputs 
  to:assert_ptr::@8
assert_ptr::@8: scope:[assert_ptr]  from assert_ptr::@7
  [118] phi()
  [119] call printf_string 
  to:assert_ptr::@9
assert_ptr::@9: scope:[assert_ptr]  from assert_ptr::@8
  [120] phi()
  [121] call cputs 
  to:assert_ptr::@return

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from assert_ptr::@1 assert_ptr::@2 assert_uint::@1 assert_uint::@2
  [122] textcolor::color#4 = phi( assert_ptr::@1/RED, assert_ptr::@2/GREEN, assert_uint::@1/RED, assert_uint::@2/GREEN )
  [123] conio_textcolor = textcolor::color#4
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [124] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from assert_ptr::@10 assert_ptr::@12 assert_ptr::@3 assert_ptr::@5 assert_ptr::@7 assert_ptr::@9 assert_uint::@10 assert_uint::@12 assert_uint::@3 assert_uint::@5 assert_uint::@7 assert_uint::@9 printf_number_buffer::@2 printf_string::@1
  [125] cputs::s#16 = phi( assert_ptr::@10/s4, assert_ptr::@12/s3, assert_ptr::@3/assert_ptr::s, assert_ptr::@5/assert_ptr::s1, assert_ptr::@7/s2, assert_ptr::@9/s3, assert_uint::@10/s4, assert_uint::@12/s3, assert_uint::@3/assert_uint::s, assert_uint::@5/assert_uint::s1, assert_uint::@7/s2, assert_uint::@9/s3, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, printf_string::@1/cputs::s#2 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [126] cputs::s#15 = phi( cputs/cputs::s#16, cputs::@2/cputs::s#0 )
  [127] cputs::c#1 = *cputs::s#15
  [128] cputs::s#0 = ++ cputs::s#15
  [129] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [130] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [131] cputc::c#0 = cputs::c#1
  [132] call cputc 
  to:cputs::@1

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from assert_ptr::@11 assert_ptr::@8 assert_uint::@11 assert_uint::@8
  [133] printf_string::str#10 = phi( assert_ptr::@11/main::message1, assert_ptr::@8/main::message1, assert_uint::@11/main::message, assert_uint::@8/main::message )
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [134] cputs::s#2 = printf_string::str#10
  [135] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [136] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from assert_ptr::@4 assert_ptr::@6 assert_uint::@4 assert_uint::@6
  [137] printf_uint::format_radix#4 = phi( assert_ptr::@4/HEXADECIMAL, assert_ptr::@6/HEXADECIMAL, assert_uint::@4/DECIMAL, assert_uint::@6/DECIMAL )
  [137] printf_uint::uvalue#4 = phi( assert_ptr::@4/0, assert_ptr::@6/printf_uint::uvalue#8, assert_uint::@4/assert_uint::expect#0, assert_uint::@6/printf_uint::uvalue#1 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [138] *((byte*)&printf_buffer) = 0
  [139] utoa::value#1 = printf_uint::uvalue#4
  [140] utoa::radix#0 = printf_uint::format_radix#4
  [141] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [142] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [143] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [144] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [145] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [146] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [147] conio_line_text[conio_cursor_x] = cputc::c#3
  [148] conio_line_color[conio_cursor_x] = conio_textcolor
  [149] conio_cursor_x = ++ conio_cursor_x
  [150] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [151] phi()
  [152] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [153] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [154] phi()
  [155] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [156] if(utoa::radix#0==DECIMAL) goto utoa::@1
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa
  [157] if(utoa::radix#0==HEXADECIMAL) goto utoa::@1
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@2
  [158] if(utoa::radix#0==OCTAL) goto utoa::@1
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@3
  [159] if(utoa::radix#0==BINARY) goto utoa::@1
  to:utoa::@5
utoa::@5: scope:[utoa]  from utoa::@4
  [160] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) = 'e'
  [161] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1) = 'r'
  [162] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2) = 'r'
  [163] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3) = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@5 utoa::@8
  [164] return 
  to:@return
utoa::@1: scope:[utoa]  from utoa utoa::@2 utoa::@3 utoa::@4
  [165] utoa::digit_values#8 = phi( utoa/RADIX_DECIMAL_VALUES, utoa::@2/RADIX_HEXADECIMAL_VALUES, utoa::@3/RADIX_OCTAL_VALUES, utoa::@4/RADIX_BINARY_VALUES )
  [165] utoa::max_digits#7 = phi( utoa/5, utoa::@2/4, utoa::@3/6, utoa::@4/$10 )
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@1 utoa::@9
  [166] utoa::buffer#11 = phi( utoa::@9/utoa::buffer#14, utoa::@1/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [166] utoa::started#2 = phi( utoa::@9/utoa::started#4, utoa::@1/0 )
  [166] utoa::value#2 = phi( utoa::@9/utoa::value#6, utoa::@1/utoa::value#1 )
  [166] utoa::digit#2 = phi( utoa::@9/utoa::digit#1, utoa::@1/0 )
  [167] utoa::$4 = utoa::max_digits#7 - 1
  [168] if(utoa::digit#2<utoa::$4) goto utoa::@7
  to:utoa::@8
utoa::@8: scope:[utoa]  from utoa::@6
  [169] utoa::$11 = (byte)utoa::value#2
  [170] *utoa::buffer#11 = DIGITS[utoa::$11]
  [171] utoa::buffer#3 = ++ utoa::buffer#11
  [172] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@7: scope:[utoa]  from utoa::@6
  [173] utoa::$10 = utoa::digit#2 << 1
  [174] utoa::digit_value#0 = utoa::digit_values#8[utoa::$10]
  [175] if(0!=utoa::started#2) goto utoa::@10
  to:utoa::@12
utoa::@12: scope:[utoa]  from utoa::@7
  [176] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@10
  to:utoa::@9
utoa::@9: scope:[utoa]  from utoa::@11 utoa::@12
  [177] utoa::buffer#14 = phi( utoa::@12/utoa::buffer#11, utoa::@11/utoa::buffer#4 )
  [177] utoa::started#4 = phi( utoa::@12/utoa::started#2, utoa::@11/1 )
  [177] utoa::value#6 = phi( utoa::@12/utoa::value#2, utoa::@11/utoa::value#0 )
  [178] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@6
utoa::@10: scope:[utoa]  from utoa::@12 utoa::@7
  [179] utoa_append::buffer#0 = utoa::buffer#11
  [180] utoa_append::value#0 = utoa::value#2
  [181] utoa_append::sub#0 = utoa::digit_value#0
  [182] call utoa_append 
  [183] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@11
utoa::@11: scope:[utoa]  from utoa::@10
  [184] utoa::value#0 = utoa_append::return#0
  [185] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@9

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [186] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [187] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [188] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [189] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [190] phi()
  [191] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [192] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [193] conio_line_text = conio_line_text + $28
  [194] conio_line_color = conio_line_color + $28
  [195] conio_cursor_x = 0
  [196] conio_cursor_y = ++ conio_cursor_y
  [197] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [198] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@10
  [199] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [200] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [200] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [201] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [202] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [203] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [204] utoa_append::digit#1 = ++ utoa_append::digit#2
  [205] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [206] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [207] phi()
  [208] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [209] phi()
  [210] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [211] phi()
  [212] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [213] memset::c#1 = conio_textcolor
  [214] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [215] conio_line_text = conio_line_text - $28
  [216] conio_line_color = conio_line_color - $28
  [217] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [218] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [219] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [219] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [220] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [221] memcpy::src#4 = (byte*)memcpy::source#2
  [222] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [223] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [223] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [224] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [225] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [226] *memcpy::dst#2 = *memcpy::src#2
  [227] memcpy::dst#1 = ++ memcpy::dst#2
  [228] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [229] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/memset::c#1 )
  [229] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [230] memset::end#0 = (byte*)memset::str#3 + $28
  [231] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [232] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [233] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [234] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [235] *memset::dst#2 = memset::c#4
  [236] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
