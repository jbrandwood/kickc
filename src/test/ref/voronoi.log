Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  call initscreen 
  to:main::@2
main::@2: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  call render 
  to:main::@3
main::@3: scope:[main]  from main::@1
  call animate 
  to:main::@4
main::@4: scope:[main]  from main::@3
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void animate()
animate: scope:[animate]  from main::@3
  animate::$0 = XPOS[0] + 1
  XPOS[0] = animate::$0
  animate::$1 = XPOS[0] == $28
  animate::$2 = ! animate::$1
  if(animate::$2) goto animate::@1
  to:animate::@5
animate::@1: scope:[animate]  from animate animate::@5
  animate::$3 = YPOS[0] + 1
  YPOS[0] = animate::$3
  animate::$4 = YPOS[0] == $19
  animate::$5 = ! animate::$4
  if(animate::$5) goto animate::@2
  to:animate::@6
animate::@5: scope:[animate]  from animate
  XPOS[0] = 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@6
  animate::$6 = XPOS[1] - 1
  XPOS[1] = animate::$6
  animate::$7 = XPOS[1] == $ff
  animate::$8 = ! animate::$7
  if(animate::$8) goto animate::@3
  to:animate::@7
animate::@6: scope:[animate]  from animate::@1
  YPOS[0] = 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@7
  animate::$9 = YPOS[2] + 1
  YPOS[2] = animate::$9
  animate::$10 = YPOS[2] == $19
  animate::$11 = ! animate::$10
  if(animate::$11) goto animate::@4
  to:animate::@8
animate::@7: scope:[animate]  from animate::@2
  XPOS[1] = $28
  to:animate::@3
animate::@4: scope:[animate]  from animate::@3 animate::@8
  animate::$12 = YPOS[3] - 1
  YPOS[3] = animate::$12
  animate::$13 = YPOS[3] == $ff
  animate::$14 = ! animate::$13
  if(animate::$14) goto animate::@return
  to:animate::@9
animate::@8: scope:[animate]  from animate::@3
  YPOS[2] = 0
  to:animate::@4
animate::@9: scope:[animate]  from animate::@4
  YPOS[3] = $19
  animate::$15 = XPOS[3] + 7
  XPOS[3] = animate::$15
  animate::$16 = XPOS[3] >= $28
  animate::$17 = ! animate::$16
  if(animate::$17) goto animate::@return
  to:animate::@10
animate::@10: scope:[animate]  from animate::@9
  animate::$18 = XPOS[3] - $28
  XPOS[3] = animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@10 animate::@4 animate::@9
  return 
  to:@return

void initscreen()
initscreen: scope:[initscreen]  from main
  initscreen::screen#0 = SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@2
  initscreen::screen#2 = phi( initscreen/initscreen::screen#0, initscreen::@2/initscreen::screen#1 )
  initscreen::$0 = SCREEN + $3e8
  initscreen::$1 = initscreen::screen#2 < initscreen::$0
  if(initscreen::$1) goto initscreen::@2
  to:initscreen::@return
initscreen::@2: scope:[initscreen]  from initscreen::@1
  initscreen::screen#3 = phi( initscreen::@1/initscreen::screen#2 )
  *initscreen::screen#3 = FILL
  initscreen::screen#1 = ++ initscreen::screen#3
  to:initscreen::@1
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return

void render()
render: scope:[render]  from main::@1
  render::colline#0 = COLORS
  render::y#0 = 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  render::colline#5 = phi( render/render::colline#0, render::@3/render::colline#1 )
  render::y#4 = phi( render/render::y#0, render::@3/render::y#1 )
  render::x#0 = 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@4
  render::colline#4 = phi( render::@1/render::colline#5, render::@4/render::colline#2 )
  render::y#2 = phi( render::@1/render::y#4, render::@4/render::y#5 )
  render::x#2 = phi( render::@1/render::x#0, render::@4/render::x#1 )
  findcol::x#0 = render::x#2
  findcol::y#0 = render::y#2
  call findcol 
  findcol::return#0 = findcol::return#3
  to:render::@4
render::@4: scope:[render]  from render::@2
  render::y#5 = phi( render::@2/render::y#2 )
  render::x#3 = phi( render::@2/render::x#2 )
  render::colline#2 = phi( render::@2/render::colline#4 )
  findcol::return#4 = phi( render::@2/findcol::return#0 )
  render::$0 = findcol::return#4
  render::col#0 = render::$0
  render::colline#2[render::x#3] = render::col#0
  render::x#1 = render::x#3 + rangenext(0,$27)
  render::$1 = render::x#1 != rangelast(0,$27)
  if(render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@4
  render::y#3 = phi( render::@4/render::y#5 )
  render::colline#3 = phi( render::@4/render::colline#2 )
  render::$2 = render::colline#3 + $28
  render::colline#1 = render::$2
  render::y#1 = render::y#3 + rangenext(0,$18)
  render::$3 = render::y#1 != rangelast(0,$18)
  if(render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return

byte findcol(byte findcol::x , byte findcol::y)
findcol: scope:[findcol]  from render::@2
  findcol::y#10 = phi( render::@2/findcol::y#0 )
  findcol::x#7 = phi( render::@2/findcol::x#0 )
  findcol::mindiff#0 = $ff
  findcol::mincol#0 = 0
  findcol::i#0 = 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@9
  findcol::mindiff#11 = phi( findcol/findcol::mindiff#0, findcol::@9/findcol::mindiff#12 )
  findcol::y#8 = phi( findcol/findcol::y#10, findcol::@9/findcol::y#11 )
  findcol::mincol#3 = phi( findcol/findcol::mincol#0, findcol::@9/findcol::mincol#4 )
  findcol::x#5 = phi( findcol/findcol::x#7, findcol::@9/findcol::x#8 )
  findcol::i#2 = phi( findcol/findcol::i#0, findcol::@9/findcol::i#1 )
  findcol::$0 = findcol::i#2 < numpoints
  if(findcol::$0) goto findcol::@2
  to:findcol::@3
findcol::@2: scope:[findcol]  from findcol::@1
  findcol::mincol#13 = phi( findcol::@1/findcol::mincol#3 )
  findcol::mindiff#10 = phi( findcol::@1/findcol::mindiff#11 )
  findcol::y#5 = phi( findcol::@1/findcol::y#8 )
  findcol::x#1 = phi( findcol::@1/findcol::x#5 )
  findcol::i#3 = phi( findcol::@1/findcol::i#2 )
  findcol::xp#0 = XPOS[findcol::i#3]
  findcol::yp#0 = YPOS[findcol::i#3]
  findcol::$1 = findcol::x#1 == findcol::xp#0
  findcol::$2 = ! findcol::$1
  if(findcol::$2) goto findcol::@4
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@1
  findcol::mincol#2 = phi( findcol::@1/findcol::mincol#3 )
  findcol::return#1 = findcol::mincol#2
  to:findcol::@return
findcol::@4: scope:[findcol]  from findcol::@10 findcol::@2
  findcol::mincol#11 = phi( findcol::@10/findcol::mincol#12, findcol::@2/findcol::mincol#13 )
  findcol::i#12 = phi( findcol::@10/findcol::i#13, findcol::@2/findcol::i#3 )
  findcol::mindiff#8 = phi( findcol::@10/findcol::mindiff#9, findcol::@2/findcol::mindiff#10 )
  findcol::yp#7 = phi( findcol::@10/findcol::yp#1, findcol::@2/findcol::yp#0 )
  findcol::y#9 = phi( findcol::@10/findcol::y#1, findcol::@2/findcol::y#5 )
  findcol::xp#1 = phi( findcol::@10/findcol::xp#4, findcol::@2/findcol::xp#0 )
  findcol::x#2 = phi( findcol::@10/findcol::x#6, findcol::@2/findcol::x#1 )
  findcol::diff#0 = 0
  findcol::$5 = findcol::x#2 < findcol::xp#1
  if(findcol::$5) goto findcol::@5
  to:findcol::@12
findcol::@10: scope:[findcol]  from findcol::@2
  findcol::mincol#12 = phi( findcol::@2/findcol::mincol#13 )
  findcol::i#13 = phi( findcol::@2/findcol::i#3 )
  findcol::mindiff#9 = phi( findcol::@2/findcol::mindiff#10 )
  findcol::xp#4 = phi( findcol::@2/findcol::xp#0 )
  findcol::x#6 = phi( findcol::@2/findcol::x#1 )
  findcol::yp#1 = phi( findcol::@2/findcol::yp#0 )
  findcol::y#1 = phi( findcol::@2/findcol::y#5 )
  findcol::$3 = findcol::y#1 == findcol::yp#1
  findcol::$4 = ! findcol::$3
  if(findcol::$4) goto findcol::@4
  to:findcol::@11
findcol::@11: scope:[findcol]  from findcol::@10
  findcol::return#2 = 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@11 findcol::@3
  findcol::return#5 = phi( findcol::@11/findcol::return#2, findcol::@3/findcol::return#1 )
  findcol::return#3 = findcol::return#5
  return 
  to:@return
findcol::@5: scope:[findcol]  from findcol::@4
  findcol::mincol#10 = phi( findcol::@4/findcol::mincol#11 )
  findcol::i#11 = phi( findcol::@4/findcol::i#12 )
  findcol::mindiff#7 = phi( findcol::@4/findcol::mindiff#8 )
  findcol::yp#6 = phi( findcol::@4/findcol::yp#7 )
  findcol::y#7 = phi( findcol::@4/findcol::y#9 )
  findcol::x#3 = phi( findcol::@4/findcol::x#2 )
  findcol::xp#2 = phi( findcol::@4/findcol::xp#1 )
  findcol::$7 = findcol::xp#2 - findcol::x#3
  findcol::diff#1 = findcol::$7
  to:findcol::@6
findcol::@12: scope:[findcol]  from findcol::@4
  findcol::mincol#9 = phi( findcol::@4/findcol::mincol#11 )
  findcol::i#10 = phi( findcol::@4/findcol::i#12 )
  findcol::mindiff#6 = phi( findcol::@4/findcol::mindiff#8 )
  findcol::yp#5 = phi( findcol::@4/findcol::yp#7 )
  findcol::y#6 = phi( findcol::@4/findcol::y#9 )
  findcol::xp#3 = phi( findcol::@4/findcol::xp#1 )
  findcol::x#4 = phi( findcol::@4/findcol::x#2 )
  findcol::$6 = findcol::x#4 - findcol::xp#3
  findcol::diff#2 = findcol::$6
  to:findcol::@6
findcol::@6: scope:[findcol]  from findcol::@12 findcol::@5
  findcol::mincol#8 = phi( findcol::@12/findcol::mincol#9, findcol::@5/findcol::mincol#10 )
  findcol::x#13 = phi( findcol::@12/findcol::x#4, findcol::@5/findcol::x#3 )
  findcol::i#9 = phi( findcol::@12/findcol::i#10, findcol::@5/findcol::i#11 )
  findcol::mindiff#5 = phi( findcol::@12/findcol::mindiff#6, findcol::@5/findcol::mindiff#7 )
  findcol::diff#9 = phi( findcol::@12/findcol::diff#2, findcol::@5/findcol::diff#1 )
  findcol::yp#2 = phi( findcol::@12/findcol::yp#5, findcol::@5/findcol::yp#6 )
  findcol::y#2 = phi( findcol::@12/findcol::y#6, findcol::@5/findcol::y#7 )
  findcol::$8 = findcol::y#2 < findcol::yp#2
  if(findcol::$8) goto findcol::@7
  to:findcol::@13
findcol::@7: scope:[findcol]  from findcol::@6
  findcol::mincol#7 = phi( findcol::@6/findcol::mincol#8 )
  findcol::x#12 = phi( findcol::@6/findcol::x#13 )
  findcol::i#8 = phi( findcol::@6/findcol::i#9 )
  findcol::mindiff#4 = phi( findcol::@6/findcol::mindiff#5 )
  findcol::diff#5 = phi( findcol::@6/findcol::diff#9 )
  findcol::y#3 = phi( findcol::@6/findcol::y#2 )
  findcol::yp#3 = phi( findcol::@6/findcol::yp#2 )
  findcol::$11 = findcol::yp#3 - findcol::y#3
  findcol::$12 = findcol::diff#5 + findcol::$11
  findcol::diff#3 = findcol::$12
  to:findcol::@8
findcol::@13: scope:[findcol]  from findcol::@6
  findcol::mincol#6 = phi( findcol::@6/findcol::mincol#8 )
  findcol::x#11 = phi( findcol::@6/findcol::x#13 )
  findcol::i#7 = phi( findcol::@6/findcol::i#9 )
  findcol::mindiff#3 = phi( findcol::@6/findcol::mindiff#5 )
  findcol::diff#6 = phi( findcol::@6/findcol::diff#9 )
  findcol::yp#4 = phi( findcol::@6/findcol::yp#2 )
  findcol::y#4 = phi( findcol::@6/findcol::y#2 )
  findcol::$9 = findcol::y#4 - findcol::yp#4
  findcol::$10 = findcol::diff#6 + findcol::$9
  findcol::diff#4 = findcol::$10
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@13 findcol::@7
  findcol::y#13 = phi( findcol::@13/findcol::y#4, findcol::@7/findcol::y#3 )
  findcol::mincol#5 = phi( findcol::@13/findcol::mincol#6, findcol::@7/findcol::mincol#7 )
  findcol::x#10 = phi( findcol::@13/findcol::x#11, findcol::@7/findcol::x#12 )
  findcol::i#6 = phi( findcol::@13/findcol::i#7, findcol::@7/findcol::i#8 )
  findcol::mindiff#2 = phi( findcol::@13/findcol::mindiff#3, findcol::@7/findcol::mindiff#4 )
  findcol::diff#7 = phi( findcol::@13/findcol::diff#4, findcol::@7/findcol::diff#3 )
  findcol::$13 = findcol::diff#7 < findcol::mindiff#2
  findcol::$14 = ! findcol::$13
  if(findcol::$14) goto findcol::@9
  to:findcol::@14
findcol::@9: scope:[findcol]  from findcol::@14 findcol::@8
  findcol::mindiff#12 = phi( findcol::@14/findcol::mindiff#1, findcol::@8/findcol::mindiff#2 )
  findcol::y#11 = phi( findcol::@14/findcol::y#12, findcol::@8/findcol::y#13 )
  findcol::mincol#4 = phi( findcol::@14/findcol::mincol#1, findcol::@8/findcol::mincol#5 )
  findcol::x#8 = phi( findcol::@14/findcol::x#9, findcol::@8/findcol::x#10 )
  findcol::i#4 = phi( findcol::@14/findcol::i#5, findcol::@8/findcol::i#6 )
  findcol::i#1 = ++ findcol::i#4
  to:findcol::@1
findcol::@14: scope:[findcol]  from findcol::@8
  findcol::y#12 = phi( findcol::@8/findcol::y#13 )
  findcol::x#9 = phi( findcol::@8/findcol::x#10 )
  findcol::i#5 = phi( findcol::@8/findcol::i#6 )
  findcol::diff#8 = phi( findcol::@8/findcol::diff#7 )
  findcol::mindiff#1 = findcol::diff#8
  findcol::mincol#1 = COLS[findcol::i#5]
  to:findcol::@9

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* COLORS = (byte*)$d800
const byte* COLS[]  = { 1, 2, 3, 4, 5, 7 }
const byte FILL = $e6
const byte* SCREEN = (byte*)$400
const byte* XPOS[]  = { 5, $f, 6, $22, $15, $1f }
const byte* YPOS[]  = { 5, 8, $e, 2, $11, $16 }
void __start()
void animate()
number~ animate::$0
bool~ animate::$1
bool~ animate::$10
bool~ animate::$11
number~ animate::$12
bool~ animate::$13
bool~ animate::$14
number~ animate::$15
bool~ animate::$16
bool~ animate::$17
number~ animate::$18
bool~ animate::$2
number~ animate::$3
bool~ animate::$4
bool~ animate::$5
number~ animate::$6
bool~ animate::$7
bool~ animate::$8
number~ animate::$9
byte findcol(byte findcol::x , byte findcol::y)
bool~ findcol::$0
bool~ findcol::$1
byte~ findcol::$10
byte~ findcol::$11
byte~ findcol::$12
bool~ findcol::$13
bool~ findcol::$14
bool~ findcol::$2
bool~ findcol::$3
bool~ findcol::$4
bool~ findcol::$5
byte~ findcol::$6
byte~ findcol::$7
bool~ findcol::$8
byte~ findcol::$9
byte findcol::diff
byte findcol::diff#0
byte findcol::diff#1
byte findcol::diff#2
byte findcol::diff#3
byte findcol::diff#4
byte findcol::diff#5
byte findcol::diff#6
byte findcol::diff#7
byte findcol::diff#8
byte findcol::diff#9
byte findcol::i
byte findcol::i#0
byte findcol::i#1
byte findcol::i#10
byte findcol::i#11
byte findcol::i#12
byte findcol::i#13
byte findcol::i#2
byte findcol::i#3
byte findcol::i#4
byte findcol::i#5
byte findcol::i#6
byte findcol::i#7
byte findcol::i#8
byte findcol::i#9
byte findcol::mincol
byte findcol::mincol#0
byte findcol::mincol#1
byte findcol::mincol#10
byte findcol::mincol#11
byte findcol::mincol#12
byte findcol::mincol#13
byte findcol::mincol#2
byte findcol::mincol#3
byte findcol::mincol#4
byte findcol::mincol#5
byte findcol::mincol#6
byte findcol::mincol#7
byte findcol::mincol#8
byte findcol::mincol#9
byte findcol::mindiff
byte findcol::mindiff#0
byte findcol::mindiff#1
byte findcol::mindiff#10
byte findcol::mindiff#11
byte findcol::mindiff#12
byte findcol::mindiff#2
byte findcol::mindiff#3
byte findcol::mindiff#4
byte findcol::mindiff#5
byte findcol::mindiff#6
byte findcol::mindiff#7
byte findcol::mindiff#8
byte findcol::mindiff#9
byte findcol::return
byte findcol::return#0
byte findcol::return#1
byte findcol::return#2
byte findcol::return#3
byte findcol::return#4
byte findcol::return#5
byte findcol::x
byte findcol::x#0
byte findcol::x#1
byte findcol::x#10
byte findcol::x#11
byte findcol::x#12
byte findcol::x#13
byte findcol::x#2
byte findcol::x#3
byte findcol::x#4
byte findcol::x#5
byte findcol::x#6
byte findcol::x#7
byte findcol::x#8
byte findcol::x#9
byte findcol::xp
byte findcol::xp#0
byte findcol::xp#1
byte findcol::xp#2
byte findcol::xp#3
byte findcol::xp#4
byte findcol::y
byte findcol::y#0
byte findcol::y#1
byte findcol::y#10
byte findcol::y#11
byte findcol::y#12
byte findcol::y#13
byte findcol::y#2
byte findcol::y#3
byte findcol::y#4
byte findcol::y#5
byte findcol::y#6
byte findcol::y#7
byte findcol::y#8
byte findcol::y#9
byte findcol::yp
byte findcol::yp#0
byte findcol::yp#1
byte findcol::yp#2
byte findcol::yp#3
byte findcol::yp#4
byte findcol::yp#5
byte findcol::yp#6
byte findcol::yp#7
void initscreen()
byte*~ initscreen::$0
bool~ initscreen::$1
byte* initscreen::screen
byte* initscreen::screen#0
byte* initscreen::screen#1
byte* initscreen::screen#2
byte* initscreen::screen#3
void main()
const byte numpoints = 6
void render()
byte~ render::$0
bool~ render::$1
byte*~ render::$2
bool~ render::$3
byte render::col
byte render::col#0
byte* render::colline
byte* render::colline#0
byte* render::colline#1
byte* render::colline#2
byte* render::colline#3
byte* render::colline#4
byte* render::colline#5
byte render::x
byte render::x#0
byte render::x#1
byte render::x#2
byte render::x#3
byte render::y
byte render::y#0
byte render::y#1
byte render::y#2
byte render::y#3
byte render::y#4
byte render::y#5

Adding number conversion cast (unumber) 1 in animate::$0 = XPOS[0] + 1
Adding number conversion cast (unumber) animate::$0 in animate::$0 = XPOS[0] + (unumber)1
Adding number conversion cast (unumber) 0 in animate::$0 = XPOS[0] + (unumber)1
Adding number conversion cast (unumber) 0 in XPOS[0] = animate::$0
Adding number conversion cast (unumber) $28 in animate::$1 = XPOS[0] == $28
Adding number conversion cast (unumber) 0 in animate::$1 = XPOS[0] == (unumber)$28
Adding number conversion cast (unumber) 1 in animate::$3 = YPOS[0] + 1
Adding number conversion cast (unumber) animate::$3 in animate::$3 = YPOS[0] + (unumber)1
Adding number conversion cast (unumber) 0 in animate::$3 = YPOS[0] + (unumber)1
Adding number conversion cast (unumber) 0 in YPOS[0] = animate::$3
Adding number conversion cast (unumber) $19 in animate::$4 = YPOS[0] == $19
Adding number conversion cast (unumber) 0 in animate::$4 = YPOS[0] == (unumber)$19
Adding number conversion cast (unumber) 0 in XPOS[0] = 0
Adding number conversion cast (unumber) 0 in XPOS[0] = ((unumber)) 0
Adding number conversion cast (unumber) 1 in animate::$6 = XPOS[1] - 1
Adding number conversion cast (unumber) animate::$6 in animate::$6 = XPOS[1] - (unumber)1
Adding number conversion cast (unumber) 1 in animate::$6 = XPOS[1] - (unumber)1
Adding number conversion cast (unumber) 1 in XPOS[1] = animate::$6
Adding number conversion cast (unumber) $ff in animate::$7 = XPOS[1] == $ff
Adding number conversion cast (unumber) 1 in animate::$7 = XPOS[1] == (unumber)$ff
Adding number conversion cast (unumber) 0 in YPOS[0] = 0
Adding number conversion cast (unumber) 0 in YPOS[0] = ((unumber)) 0
Adding number conversion cast (unumber) 1 in animate::$9 = YPOS[2] + 1
Adding number conversion cast (unumber) animate::$9 in animate::$9 = YPOS[2] + (unumber)1
Adding number conversion cast (unumber) 2 in animate::$9 = YPOS[2] + (unumber)1
Adding number conversion cast (unumber) 2 in YPOS[2] = animate::$9
Adding number conversion cast (unumber) $19 in animate::$10 = YPOS[2] == $19
Adding number conversion cast (unumber) 2 in animate::$10 = YPOS[2] == (unumber)$19
Adding number conversion cast (unumber) $28 in XPOS[1] = $28
Adding number conversion cast (unumber) 1 in XPOS[1] = ((unumber)) $28
Adding number conversion cast (unumber) 1 in animate::$12 = YPOS[3] - 1
Adding number conversion cast (unumber) animate::$12 in animate::$12 = YPOS[3] - (unumber)1
Adding number conversion cast (unumber) 3 in animate::$12 = YPOS[3] - (unumber)1
Adding number conversion cast (unumber) 3 in YPOS[3] = animate::$12
Adding number conversion cast (unumber) $ff in animate::$13 = YPOS[3] == $ff
Adding number conversion cast (unumber) 3 in animate::$13 = YPOS[3] == (unumber)$ff
Adding number conversion cast (unumber) 0 in YPOS[2] = 0
Adding number conversion cast (unumber) 2 in YPOS[2] = ((unumber)) 0
Adding number conversion cast (unumber) $19 in YPOS[3] = $19
Adding number conversion cast (unumber) 3 in YPOS[3] = ((unumber)) $19
Adding number conversion cast (unumber) 7 in animate::$15 = XPOS[3] + 7
Adding number conversion cast (unumber) animate::$15 in animate::$15 = XPOS[3] + (unumber)7
Adding number conversion cast (unumber) 3 in animate::$15 = XPOS[3] + (unumber)7
Adding number conversion cast (unumber) 3 in XPOS[3] = animate::$15
Adding number conversion cast (unumber) $28 in animate::$16 = XPOS[3] >= $28
Adding number conversion cast (unumber) 3 in animate::$16 = XPOS[3] >= (unumber)$28
Adding number conversion cast (unumber) $28 in animate::$18 = XPOS[3] - $28
Adding number conversion cast (unumber) animate::$18 in animate::$18 = XPOS[3] - (unumber)$28
Adding number conversion cast (unumber) 3 in animate::$18 = XPOS[3] - (unumber)$28
Adding number conversion cast (unumber) 3 in XPOS[3] = animate::$18
Adding number conversion cast (unumber) $3e8 in initscreen::$0 = SCREEN + $3e8
Adding number conversion cast (unumber) $28 in render::$2 = render::colline#3 + $28
Adding number conversion cast (unumber) 0 in findcol::return#2 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast XPOS[(unumber)0] = (unumber)0
Inlining cast YPOS[(unumber)0] = (unumber)0
Inlining cast XPOS[(unumber)1] = (unumber)$28
Inlining cast YPOS[(unumber)2] = (unumber)0
Inlining cast YPOS[(unumber)3] = (unumber)$19
Inlining cast findcol::return#2 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $19
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast $28
Simplifying constant integer cast 3
Simplifying constant integer cast $28
Simplifying constant integer cast 3
Simplifying constant integer cast $3e8
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in animate::$0 = XPOS[0] + 1
Inferred type updated to byte in animate::$3 = YPOS[0] + 1
Inferred type updated to byte in animate::$6 = XPOS[1] - 1
Inferred type updated to byte in animate::$9 = YPOS[2] + 1
Inferred type updated to byte in animate::$12 = YPOS[3] - 1
Inferred type updated to byte in animate::$15 = XPOS[3] + 7
Inferred type updated to byte in animate::$18 = XPOS[3] - $28
Inversing boolean not [8] animate::$2 = XPOS[0] != $28 from [7] animate::$1 = XPOS[0] == $28
Inversing boolean not [13] animate::$5 = YPOS[0] != $19 from [12] animate::$4 = YPOS[0] == $19
Inversing boolean not [19] animate::$8 = XPOS[1] != $ff from [18] animate::$7 = XPOS[1] == $ff
Inversing boolean not [25] animate::$11 = YPOS[2] != $19 from [24] animate::$10 = YPOS[2] == $19
Inversing boolean not [31] animate::$14 = YPOS[3] != $ff from [30] animate::$13 = YPOS[3] == $ff
Inversing boolean not [38] animate::$17 = XPOS[3] < $28 from [37] animate::$16 = XPOS[3] >= $28
Inversing boolean not [86] findcol::$2 = findcol::x#1 != findcol::xp#0 from [85] findcol::$1 = findcol::x#1 == findcol::xp#0
Inversing boolean not [96] findcol::$4 = findcol::y#1 != findcol::yp#1 from [95] findcol::$3 = findcol::y#1 == findcol::yp#1
Inversing boolean not [121] findcol::$14 = findcol::diff#7 >= findcol::mindiff#2 from [120] findcol::$13 = findcol::diff#7 < findcol::mindiff#2
Successful SSA optimization Pass2UnaryNotSimplification
Alias initscreen::screen#2 = initscreen::screen#3 
Alias findcol::return#0 = findcol::return#4 
Alias render::colline#2 = render::colline#4 render::colline#3 
Alias render::x#2 = render::x#3 
Alias render::y#2 = render::y#5 render::y#3 
Alias render::col#0 = render::$0 
Alias render::colline#1 = render::$2 
Alias findcol::i#13 = findcol::i#3 findcol::i#2 
Alias findcol::x#1 = findcol::x#5 findcol::x#6 
Alias findcol::y#1 = findcol::y#5 findcol::y#8 
Alias findcol::mindiff#10 = findcol::mindiff#11 findcol::mindiff#9 
Alias findcol::mincol#12 = findcol::mincol#13 findcol::mincol#3 findcol::mincol#2 findcol::return#1 
Alias findcol::yp#0 = findcol::yp#1 
Alias findcol::xp#0 = findcol::xp#4 
Alias findcol::return#3 = findcol::return#5 
Alias findcol::xp#1 = findcol::xp#2 findcol::xp#3 
Alias findcol::x#2 = findcol::x#3 findcol::x#4 
Alias findcol::y#6 = findcol::y#7 findcol::y#9 
Alias findcol::yp#5 = findcol::yp#6 findcol::yp#7 
Alias findcol::mindiff#6 = findcol::mindiff#7 findcol::mindiff#8 
Alias findcol::i#10 = findcol::i#11 findcol::i#12 
Alias findcol::mincol#10 = findcol::mincol#11 findcol::mincol#9 
Alias findcol::diff#1 = findcol::$7 
Alias findcol::diff#2 = findcol::$6 
Alias findcol::yp#2 = findcol::yp#3 findcol::yp#4 
Alias findcol::y#2 = findcol::y#3 findcol::y#4 
Alias findcol::diff#5 = findcol::diff#9 findcol::diff#6 
Alias findcol::mindiff#3 = findcol::mindiff#4 findcol::mindiff#5 
Alias findcol::i#7 = findcol::i#8 findcol::i#9 
Alias findcol::x#11 = findcol::x#12 findcol::x#13 
Alias findcol::mincol#6 = findcol::mincol#7 findcol::mincol#8 
Alias findcol::diff#3 = findcol::$12 
Alias findcol::diff#4 = findcol::$10 
Alias findcol::diff#7 = findcol::diff#8 findcol::mindiff#1 
Alias findcol::i#5 = findcol::i#6 
Alias findcol::x#10 = findcol::x#9 
Alias findcol::y#12 = findcol::y#13 
Successful SSA optimization Pass2AliasElimination
Alias findcol::x#1 = findcol::x#2 findcol::x#11 findcol::x#10 findcol::x#8 
Alias findcol::xp#0 = findcol::xp#1 
Alias findcol::y#1 = findcol::y#6 findcol::y#2 findcol::y#12 findcol::y#11 
Alias findcol::yp#0 = findcol::yp#5 findcol::yp#2 
Alias findcol::mindiff#10 = findcol::mindiff#6 findcol::mindiff#3 findcol::mindiff#2 
Alias findcol::i#10 = findcol::i#13 findcol::i#7 findcol::i#5 findcol::i#4 
Alias findcol::mincol#10 = findcol::mincol#12 findcol::mincol#6 findcol::mincol#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values render::y#2 render::y#4
Identical Phi Values render::colline#2 render::colline#5
Identical Phi Values findcol::x#7 findcol::x#0
Identical Phi Values findcol::y#10 findcol::y#0
Identical Phi Values findcol::x#1 findcol::x#7
Identical Phi Values findcol::y#1 findcol::y#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition animate::$2 [8] if(XPOS[0]!=$28) goto animate::@1
Simple Condition animate::$5 [12] if(YPOS[0]!=$19) goto animate::@2
Simple Condition animate::$8 [17] if(XPOS[1]!=$ff) goto animate::@3
Simple Condition animate::$11 [22] if(YPOS[2]!=$19) goto animate::@4
Simple Condition animate::$14 [27] if(YPOS[3]!=$ff) goto animate::@return
Simple Condition animate::$17 [33] if(XPOS[3]<$28) goto animate::@return
Simple Condition initscreen::$1 [41] if(initscreen::screen#2<initscreen::$0) goto initscreen::@2
Simple Condition render::$1 [58] if(render::x#1!=rangelast(0,$27)) goto render::@2
Simple Condition render::$3 [62] if(render::y#1!=rangelast(0,$18)) goto render::@1
Simple Condition findcol::$0 [70] if(findcol::i#10<numpoints) goto findcol::@2
Simple Condition findcol::$2 [74] if(findcol::x#0!=findcol::xp#0) goto findcol::@4
Simple Condition findcol::$5 [77] if(findcol::x#0<findcol::xp#0) goto findcol::@5
Simple Condition findcol::$4 [79] if(findcol::y#0!=findcol::yp#0) goto findcol::@4
Simple Condition findcol::$8 [87] if(findcol::y#0<findcol::yp#0) goto findcol::@7
Simple Condition findcol::$14 [94] if(findcol::diff#7>=findcol::mindiff#10) goto findcol::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [39] initscreen::$0 = SCREEN + $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant initscreen::screen#0 = SCREEN
Constant initscreen::$0 = SCREEN+$3e8
Constant render::colline#0 = COLORS
Constant render::y#0 = 0
Constant render::x#0 = 0
Constant findcol::mindiff#0 = $ff
Constant findcol::mincol#0 = 0
Constant findcol::i#0 = 0
Constant findcol::diff#0 = 0
Constant findcol::return#2 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [3] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [56] render::x#1 = ++ render::x#2 to ++
Resolved ranged comparison value [58] if(render::x#1!=rangelast(0,$27)) goto render::@2 to $28
Resolved ranged next value [60] render::y#1 = ++ render::y#4 to ++
Resolved ranged comparison value [62] if(render::y#1!=rangelast(0,$18)) goto render::@1 to $19
Simplifying expression containing zero XPOS in [5] animate::$0 = XPOS[0] + 1
Simplifying expression containing zero XPOS in [6] XPOS[0] = animate::$0
Simplifying expression containing zero XPOS in [8] if(XPOS[0]!=$28) goto animate::@1
Simplifying expression containing zero YPOS in [9] animate::$3 = YPOS[0] + 1
Simplifying expression containing zero YPOS in [10] YPOS[0] = animate::$3
Simplifying expression containing zero YPOS in [12] if(YPOS[0]!=$19) goto animate::@2
Simplifying expression containing zero XPOS in [13] XPOS[0] = 0
Simplifying expression containing zero YPOS in [18] YPOS[0] = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant findcol::diff#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [43] if(render::x#1!=$28) goto render::@2
Adding number conversion cast (unumber) $19 in [46] if(render::y#1!=$19) goto render::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings initscreen::screen#0
Inlining constant with var siblings render::colline#0
Inlining constant with var siblings render::y#0
Inlining constant with var siblings render::x#0
Inlining constant with var siblings findcol::mindiff#0
Inlining constant with var siblings findcol::mincol#0
Inlining constant with var siblings findcol::i#0
Inlining constant with var siblings findcol::return#2
Constant inlined findcol::i#0 = 0
Constant inlined findcol::return#2 = 0
Constant inlined render::colline#0 = COLORS
Constant inlined render::x#0 = 0
Constant inlined initscreen::screen#0 = SCREEN
Constant inlined render::y#0 = 0
Constant inlined findcol::mincol#0 = 0
Constant inlined findcol::mindiff#0 = $ff
Constant inlined initscreen::$0 = SCREEN+$3e8
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(XPOS+1)
Consolidated array index constant in *(XPOS+1)
Consolidated array index constant in *(XPOS+1)
Consolidated array index constant in *(YPOS+2)
Consolidated array index constant in *(YPOS+2)
Consolidated array index constant in *(YPOS+2)
Consolidated array index constant in *(XPOS+1)
Consolidated array index constant in *(YPOS+3)
Consolidated array index constant in *(YPOS+3)
Consolidated array index constant in *(YPOS+3)
Consolidated array index constant in *(YPOS+2)
Consolidated array index constant in *(YPOS+3)
Consolidated array index constant in *(XPOS+3)
Consolidated array index constant in *(XPOS+3)
Consolidated array index constant in *(XPOS+3)
Consolidated array index constant in *(XPOS+3)
Consolidated array index constant in *(XPOS+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting render::@5(between render::@3 and render::@1)
Added new block during phi lifting render::@6(between render::@4 and render::@2)
Added new block during phi lifting findcol::@15(between findcol::@8 and findcol::@9)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of initscreen
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol
Adding NOP phi() at start of findcol::@11
CALL GRAPH
Calls in [main] to initscreen:1 render:4 animate:6 
Calls in [render] to findcol:20 

Created 12 initial phi equivalence classes
Coalesced [14] initscreen::screen#4 = initscreen::screen#1
Coalesced [30] render::y#6 = render::y#1
Coalesced [31] render::colline#6 = render::colline#1
Coalesced [32] render::x#4 = render::x#1
Coalesced [62] findcol::return#6 = findcol::mincol#10
Coalesced [72] findcol::diff#10 = findcol::diff#2
Coalesced [77] findcol::diff#12 = findcol::diff#4
Coalesced [81] findcol::mincol#15 = findcol::mincol#1
Coalesced [82] findcol::mindiff#14 = findcol::diff#7
Coalesced [85] findcol::i#14 = findcol::i#1
Coalesced [86] findcol::mincol#14 = findcol::mincol#4
Not coalescing [87] findcol::mindiff#13 = findcol::mindiff#12
Coalesced (already) [88] findcol::mincol#16 = findcol::mincol#10
Not coalescing [89] findcol::mindiff#15 = findcol::mindiff#10
Coalesced [92] findcol::diff#13 = findcol::diff#3
Coalesced [94] findcol::diff#11 = findcol::diff#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@4
Culled Empty Block label render::@5
Culled Empty Block label render::@6
Culled Empty Block label findcol::@3
Culled Empty Block label findcol::@11
Renumbering block main::@3 to main::@2
Renumbering block findcol::@4 to findcol::@3
Renumbering block findcol::@5 to findcol::@4
Renumbering block findcol::@6 to findcol::@5
Renumbering block findcol::@7 to findcol::@6
Renumbering block findcol::@8 to findcol::@7
Renumbering block findcol::@9 to findcol::@8
Renumbering block findcol::@10 to findcol::@9
Renumbering block findcol::@12 to findcol::@10
Renumbering block findcol::@13 to findcol::@11
Renumbering block findcol::@14 to findcol::@12
Renumbering block findcol::@15 to findcol::@13
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of initscreen
Adding NOP phi() at start of render
Adding NOP phi() at start of findcol

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] phi()
  [3] call render 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call animate 
  to:main::@1

void initscreen()
initscreen: scope:[initscreen]  from main
  [6] phi()
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@2
  [7] initscreen::screen#2 = phi( initscreen/SCREEN, initscreen::@2/initscreen::screen#1 )
  [8] if(initscreen::screen#2<SCREEN+$3e8) goto initscreen::@2
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [9] return 
  to:@return
initscreen::@2: scope:[initscreen]  from initscreen::@1
  [10] *initscreen::screen#2 = FILL
  [11] initscreen::screen#1 = ++ initscreen::screen#2
  to:initscreen::@1

void render()
render: scope:[render]  from main::@1
  [12] phi()
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [13] render::colline#5 = phi( render/COLORS, render::@3/render::colline#1 )
  [13] render::y#4 = phi( render/0, render::@3/render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@4
  [14] render::x#2 = phi( render::@1/0, render::@4/render::x#1 )
  [15] findcol::x#0 = render::x#2
  [16] findcol::y#0 = render::y#4
  [17] call findcol 
  [18] findcol::return#0 = findcol::return#3
  to:render::@4
render::@4: scope:[render]  from render::@2
  [19] render::col#0 = findcol::return#0
  [20] render::colline#5[render::x#2] = render::col#0
  [21] render::x#1 = ++ render::x#2
  [22] if(render::x#1!=$28) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@4
  [23] render::colline#1 = render::colline#5 + $28
  [24] render::y#1 = ++ render::y#4
  [25] if(render::y#1!=$19) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  [26] return 
  to:@return

void animate()
animate: scope:[animate]  from main::@2
  [27] animate::$0 = *XPOS + 1
  [28] *XPOS = animate::$0
  [29] if(*XPOS!=$28) goto animate::@1
  to:animate::@5
animate::@5: scope:[animate]  from animate
  [30] *XPOS = 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@5
  [31] animate::$3 = *YPOS + 1
  [32] *YPOS = animate::$3
  [33] if(*YPOS!=$19) goto animate::@2
  to:animate::@6
animate::@6: scope:[animate]  from animate::@1
  [34] *YPOS = 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@6
  [35] animate::$6 = *(XPOS+1) - 1
  [36] *(XPOS+1) = animate::$6
  [37] if(*(XPOS+1)!=$ff) goto animate::@3
  to:animate::@7
animate::@7: scope:[animate]  from animate::@2
  [38] *(XPOS+1) = $28
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@7
  [39] animate::$9 = *(YPOS+2) + 1
  [40] *(YPOS+2) = animate::$9
  [41] if(*(YPOS+2)!=$19) goto animate::@4
  to:animate::@8
animate::@8: scope:[animate]  from animate::@3
  [42] *(YPOS+2) = 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@3 animate::@8
  [43] animate::$12 = *(YPOS+3) - 1
  [44] *(YPOS+3) = animate::$12
  [45] if(*(YPOS+3)!=$ff) goto animate::@return
  to:animate::@9
animate::@9: scope:[animate]  from animate::@4
  [46] *(YPOS+3) = $19
  [47] animate::$15 = *(XPOS+3) + 7
  [48] *(XPOS+3) = animate::$15
  [49] if(*(XPOS+3)<$28) goto animate::@return
  to:animate::@10
animate::@10: scope:[animate]  from animate::@9
  [50] animate::$18 = *(XPOS+3) - $28
  [51] *(XPOS+3) = animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@10 animate::@4 animate::@9
  [52] return 
  to:@return

byte findcol(byte findcol::x , byte findcol::y)
findcol: scope:[findcol]  from render::@2
  [53] phi()
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  [54] findcol::mindiff#10 = phi( findcol/$ff, findcol::@8/findcol::mindiff#13 )
  [54] findcol::mincol#10 = phi( findcol/0, findcol::@8/findcol::mincol#4 )
  [54] findcol::i#10 = phi( findcol/0, findcol::@8/findcol::i#1 )
  [55] if(findcol::i#10<numpoints) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@1 findcol::@9
  [56] findcol::return#3 = phi( findcol::@9/0, findcol::@1/findcol::mincol#10 )
  [57] return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1
  [58] findcol::xp#0 = XPOS[findcol::i#10]
  [59] findcol::yp#0 = YPOS[findcol::i#10]
  [60] if(findcol::x#0!=findcol::xp#0) goto findcol::@3
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@2
  [61] if(findcol::y#0!=findcol::yp#0) goto findcol::@3
  to:findcol::@return
findcol::@3: scope:[findcol]  from findcol::@2 findcol::@9
  [62] if(findcol::x#0<findcol::xp#0) goto findcol::@4
  to:findcol::@10
findcol::@10: scope:[findcol]  from findcol::@3
  [63] findcol::diff#2 = findcol::x#0 - findcol::xp#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@10 findcol::@4
  [64] findcol::diff#5 = phi( findcol::@10/findcol::diff#2, findcol::@4/findcol::diff#1 )
  [65] if(findcol::y#0<findcol::yp#0) goto findcol::@6
  to:findcol::@11
findcol::@11: scope:[findcol]  from findcol::@5
  [66] findcol::$9 = findcol::y#0 - findcol::yp#0
  [67] findcol::diff#4 = findcol::diff#5 + findcol::$9
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@11 findcol::@6
  [68] findcol::diff#7 = phi( findcol::@11/findcol::diff#4, findcol::@6/findcol::diff#3 )
  [69] if(findcol::diff#7>=findcol::mindiff#10) goto findcol::@13
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@7
  [70] findcol::mincol#1 = COLS[findcol::i#10]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@12 findcol::@13
  [71] findcol::mindiff#12 = phi( findcol::@12/findcol::diff#7, findcol::@13/findcol::mindiff#15 )
  [71] findcol::mincol#4 = phi( findcol::@12/findcol::mincol#1, findcol::@13/findcol::mincol#10 )
  [72] findcol::i#1 = ++ findcol::i#10
  [73] findcol::mindiff#13 = findcol::mindiff#12
  to:findcol::@1
findcol::@13: scope:[findcol]  from findcol::@7
  [74] findcol::mindiff#15 = findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [75] findcol::$11 = findcol::yp#0 - findcol::y#0
  [76] findcol::diff#3 = findcol::diff#5 + findcol::$11
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@3
  [77] findcol::diff#1 = findcol::xp#0 - findcol::x#0
  to:findcol::@5


VARIABLE REGISTER WEIGHTS
void animate()
byte~ animate::$0 202.0
byte~ animate::$12 202.0
byte~ animate::$15 202.0
byte~ animate::$18 202.0
byte~ animate::$3 202.0
byte~ animate::$6 202.0
byte~ animate::$9 202.0
byte findcol(byte findcol::x , byte findcol::y)
byte~ findcol::$11 2.0000000002E10
byte~ findcol::$9 2.0000000002E10
byte findcol::diff
byte findcol::diff#1 2.0000000002E10
byte findcol::diff#2 2.0000000002E10
byte findcol::diff#3 2.0000000002E10
byte findcol::diff#4 2.0000000002E10
byte findcol::diff#5 1.0000000001E10
byte findcol::diff#7 1.3333333334666666E10
byte findcol::i
byte findcol::i#1 1.0000000001E10
byte findcol::i#10 3.0000000003E9
byte findcol::mincol
byte findcol::mincol#1 2.0000000002E10
byte findcol::mincol#10 1.6666666668333335E9
byte findcol::mincol#4 1.0000000001E10
byte findcol::mindiff
byte findcol::mindiff#10 1.7647058825294118E9
byte findcol::mindiff#12 1.50000000015E10
byte findcol::mindiff#13 2.0000000002E10
byte findcol::mindiff#15 2.0000000002E10
byte findcol::return
byte findcol::return#0 200002.0
byte findcol::return#3 3.333366667333333E9
byte findcol::x
byte findcol::x#0 1.6000040002E9
byte findcol::xp
byte findcol::xp#0 1.0000000001E10
byte findcol::y
byte findcol::y#0 1.6666708335416665E9
byte findcol::yp
byte findcol::yp#0 6.250000000625E9
void initscreen()
byte* initscreen::screen
byte* initscreen::screen#1 202.0
byte* initscreen::screen#2 134.66666666666666
void main()
void render()
byte render::col
byte render::col#0 200002.0
byte* render::colline
byte* render::colline#1 6667.333333333333
byte* render::colline#5 12000.300000000001
byte render::x
byte render::x#1 150001.5
byte render::x#2 57143.42857142857
byte render::y
byte render::y#1 15001.5
byte render::y#4 10909.363636363636

Initial phi equivalence classes
[ initscreen::screen#2 initscreen::screen#1 ]
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
[ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
[ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
Added variable findcol::x#0 to live range equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to live range equivalence class [ findcol::y#0 ]
Added variable findcol::return#0 to live range equivalence class [ findcol::return#0 ]
Added variable render::col#0 to live range equivalence class [ render::col#0 ]
Added variable animate::$0 to live range equivalence class [ animate::$0 ]
Added variable animate::$3 to live range equivalence class [ animate::$3 ]
Added variable animate::$6 to live range equivalence class [ animate::$6 ]
Added variable animate::$9 to live range equivalence class [ animate::$9 ]
Added variable animate::$12 to live range equivalence class [ animate::$12 ]
Added variable animate::$15 to live range equivalence class [ animate::$15 ]
Added variable animate::$18 to live range equivalence class [ animate::$18 ]
Added variable findcol::xp#0 to live range equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to live range equivalence class [ findcol::yp#0 ]
Added variable findcol::$9 to live range equivalence class [ findcol::$9 ]
Added variable findcol::$11 to live range equivalence class [ findcol::$11 ]
Complete equivalence classes
[ initscreen::screen#2 initscreen::screen#1 ]
[ render::y#4 render::y#1 ]
[ render::colline#5 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#10 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
[ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
[ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ findcol::return#0 ]
[ render::col#0 ]
[ animate::$0 ]
[ animate::$3 ]
[ animate::$6 ]
[ animate::$9 ]
[ animate::$12 ]
[ animate::$15 ]
[ animate::$18 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$9 ]
[ findcol::$11 ]
Allocated zp[2]:2 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp[1]:4 [ render::y#4 render::y#1 ]
Allocated zp[2]:5 [ render::colline#5 render::colline#1 ]
Allocated zp[1]:7 [ render::x#2 render::x#1 ]
Allocated zp[1]:8 [ findcol::i#10 findcol::i#1 ]
Allocated zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated zp[1]:10 [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
Allocated zp[1]:11 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
Allocated zp[1]:12 [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
Allocated zp[1]:13 [ findcol::x#0 ]
Allocated zp[1]:14 [ findcol::y#0 ]
Allocated zp[1]:15 [ findcol::return#0 ]
Allocated zp[1]:16 [ render::col#0 ]
Allocated zp[1]:17 [ animate::$0 ]
Allocated zp[1]:18 [ animate::$3 ]
Allocated zp[1]:19 [ animate::$6 ]
Allocated zp[1]:20 [ animate::$9 ]
Allocated zp[1]:21 [ animate::$12 ]
Allocated zp[1]:22 [ animate::$15 ]
Allocated zp[1]:23 [ animate::$18 ]
Allocated zp[1]:24 [ findcol::xp#0 ]
Allocated zp[1]:25 [ findcol::yp#0 ]
Allocated zp[1]:26 [ findcol::$9 ]
Allocated zp[1]:27 [ findcol::$11 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] if(initscreen::screen#2<SCREEN+$3e8) goto initscreen::@2 [ initscreen::screen#2 ] ( initscreen:1 [ initscreen::screen#2 ] { }  ) always clobbers reg byte a 
Statement [10] *initscreen::screen#2 = FILL [ initscreen::screen#2 ] ( initscreen:1 [ initscreen::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [23] render::colline#1 = render::colline#5 + $28 [ render::y#4 render::colline#1 ] ( render:3 [ render::y#4 render::colline#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ render::y#4 render::y#1 ]
Statement [29] if(*XPOS!=$28) goto animate::@1 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [30] *XPOS = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [33] if(*YPOS!=$19) goto animate::@2 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [34] *YPOS = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [37] if(*(XPOS+1)!=$ff) goto animate::@3 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [38] *(XPOS+1) = $28 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [41] if(*(YPOS+2)!=$19) goto animate::@4 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [42] *(YPOS+2) = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [45] if(*(YPOS+3)!=$ff) goto animate::@return [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [46] *(YPOS+3) = $19 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [47] animate::$15 = *(XPOS+3) + 7 [ animate::$15 ] ( animate:5 [ animate::$15 ] { }  ) always clobbers reg byte a 
Statement [49] if(*(XPOS+3)<$28) goto animate::@return [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [50] animate::$18 = *(XPOS+3) - $28 [ animate::$18 ] ( animate:5 [ animate::$18 ] { }  ) always clobbers reg byte a 
Statement [63] findcol::diff#2 = findcol::x#0 - findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#2 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#2 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ render::x#2 render::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ findcol::i#10 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ findcol::yp#0 ]
Statement [66] findcol::$9 = findcol::y#0 - findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$9 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$9 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
Statement [67] findcol::diff#4 = findcol::diff#5 + findcol::$9 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#4 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#4 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [75] findcol::$11 = findcol::yp#0 - findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$11 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$11 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [76] findcol::diff#3 = findcol::diff#5 + findcol::$11 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#3 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#3 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [77] findcol::diff#1 = findcol::xp#0 - findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#1 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#1 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [8] if(initscreen::screen#2<SCREEN+$3e8) goto initscreen::@2 [ initscreen::screen#2 ] ( initscreen:1 [ initscreen::screen#2 ] { }  ) always clobbers reg byte a 
Statement [10] *initscreen::screen#2 = FILL [ initscreen::screen#2 ] ( initscreen:1 [ initscreen::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [23] render::colline#1 = render::colline#5 + $28 [ render::y#4 render::colline#1 ] ( render:3 [ render::y#4 render::colline#1 ] { }  ) always clobbers reg byte a 
Statement [29] if(*XPOS!=$28) goto animate::@1 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [30] *XPOS = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [33] if(*YPOS!=$19) goto animate::@2 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [34] *YPOS = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [37] if(*(XPOS+1)!=$ff) goto animate::@3 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [38] *(XPOS+1) = $28 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [41] if(*(YPOS+2)!=$19) goto animate::@4 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [42] *(YPOS+2) = 0 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [45] if(*(YPOS+3)!=$ff) goto animate::@return [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [46] *(YPOS+3) = $19 [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [47] animate::$15 = *(XPOS+3) + 7 [ animate::$15 ] ( animate:5 [ animate::$15 ] { }  ) always clobbers reg byte a 
Statement [49] if(*(XPOS+3)<$28) goto animate::@return [ ] ( animate:5 [ ] { }  ) always clobbers reg byte a 
Statement [50] animate::$18 = *(XPOS+3) - $28 [ animate::$18 ] ( animate:5 [ animate::$18 ] { }  ) always clobbers reg byte a 
Statement [63] findcol::diff#2 = findcol::x#0 - findcol::xp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#2 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#2 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [66] findcol::$9 = findcol::y#0 - findcol::yp#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$9 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$9 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [67] findcol::diff#4 = findcol::diff#5 + findcol::$9 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#4 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#4 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [75] findcol::$11 = findcol::yp#0 - findcol::y#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$11 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#5 findcol::$11 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [76] findcol::diff#3 = findcol::diff#5 + findcol::$11 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#3 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::diff#3 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Statement [77] findcol::diff#1 = findcol::xp#0 - findcol::x#0 [ findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#1 ] ( render:3::findcol:17 [ render::y#4 render::colline#5 render::x#2 findcol::x#0 findcol::y#0 findcol::i#10 findcol::mincol#10 findcol::mindiff#10 findcol::yp#0 findcol::diff#1 ] { { findcol::x#0 = render::x#2 } { findcol::y#0 = render::y#4 } { findcol::return#0 = findcol::return#3 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ initscreen::screen#2 initscreen::screen#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ render::y#4 render::y#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ render::colline#5 render::colline#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ render::x#2 render::x#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ findcol::i#10 findcol::i#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ findcol::x#0 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ findcol::y#0 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ findcol::return#0 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ render::col#0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ animate::$0 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ animate::$3 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ animate::$6 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ animate::$9 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ animate::$12 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ animate::$15 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ animate::$18 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ findcol::xp#0 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ findcol::yp#0 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ findcol::$9 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ findcol::$11 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 88,333,333,342.17: zp[1]:12 [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] 50,000,000,005: zp[1]:11 [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] 35,000,033,337.17: zp[1]:10 [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ] 21,764,705,884.53: zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ] 20,000,000,002: zp[1]:26 [ findcol::$9 ] 20,000,000,002: zp[1]:27 [ findcol::$11 ] 13,000,000,001.3: zp[1]:8 [ findcol::i#10 findcol::i#1 ] 10,000,000,001: zp[1]:24 [ findcol::xp#0 ] 6,250,000,000.62: zp[1]:25 [ findcol::yp#0 ] 1,666,670,833.54: zp[1]:14 [ findcol::y#0 ] 1,600,004,000.2: zp[1]:13 [ findcol::x#0 ] 200,002: zp[1]:15 [ findcol::return#0 ] 
Uplift Scope [render] 207,144.93: zp[1]:7 [ render::x#2 render::x#1 ] 200,002: zp[1]:16 [ render::col#0 ] 25,910.86: zp[1]:4 [ render::y#4 render::y#1 ] 18,667.63: zp[2]:5 [ render::colline#5 render::colline#1 ] 
Uplift Scope [animate] 202: zp[1]:17 [ animate::$0 ] 202: zp[1]:18 [ animate::$3 ] 202: zp[1]:19 [ animate::$6 ] 202: zp[1]:20 [ animate::$9 ] 202: zp[1]:21 [ animate::$12 ] 202: zp[1]:22 [ animate::$15 ] 202: zp[1]:23 [ animate::$18 ] 
Uplift Scope [initscreen] 336.67: zp[2]:2 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [findcol] best 1973917 combination reg byte a [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ] reg byte y [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ] reg byte x [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ] zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ] zp[1]:26 [ findcol::$9 ] zp[1]:27 [ findcol::$11 ] zp[1]:8 [ findcol::i#10 findcol::i#1 ] zp[1]:24 [ findcol::xp#0 ] zp[1]:25 [ findcol::yp#0 ] zp[1]:14 [ findcol::y#0 ] zp[1]:13 [ findcol::x#0 ] zp[1]:15 [ findcol::return#0 ] 
Limited combination testing to 100 combinations of 2239488 possible.
Uplifting [render] best 1967917 combination zp[1]:7 [ render::x#2 render::x#1 ] reg byte a [ render::col#0 ] zp[1]:4 [ render::y#4 render::y#1 ] zp[2]:5 [ render::colline#5 render::colline#1 ] 
Uplifting [animate] best 1967897 combination reg byte x [ animate::$0 ] reg byte x [ animate::$3 ] reg byte a [ animate::$6 ] reg byte a [ animate::$9 ] zp[1]:21 [ animate::$12 ] zp[1]:22 [ animate::$15 ] zp[1]:23 [ animate::$18 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [initscreen] best 1967897 combination zp[2]:2 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [main] best 1967897 combination 
Uplifting [] best 1967897 combination 
Attempting to uplift remaining variables inzp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ]
Uplifting [findcol] best 1967897 combination zp[1]:9 [ findcol::mindiff#10 findcol::mindiff#13 ] 
Attempting to uplift remaining variables inzp[1]:26 [ findcol::$9 ]
Uplifting [findcol] best 1947897 combination reg byte a [ findcol::$9 ] 
Attempting to uplift remaining variables inzp[1]:27 [ findcol::$11 ]
Uplifting [findcol] best 1927897 combination reg byte a [ findcol::$11 ] 
Attempting to uplift remaining variables inzp[1]:8 [ findcol::i#10 findcol::i#1 ]
Uplifting [findcol] best 1927897 combination zp[1]:8 [ findcol::i#10 findcol::i#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ findcol::xp#0 ]
Uplifting [findcol] best 1927897 combination zp[1]:24 [ findcol::xp#0 ] 
Attempting to uplift remaining variables inzp[1]:25 [ findcol::yp#0 ]
Uplifting [findcol] best 1927897 combination zp[1]:25 [ findcol::yp#0 ] 
Attempting to uplift remaining variables inzp[1]:14 [ findcol::y#0 ]
Uplifting [findcol] best 1927897 combination zp[1]:14 [ findcol::y#0 ] 
Attempting to uplift remaining variables inzp[1]:13 [ findcol::x#0 ]
Uplifting [findcol] best 1927897 combination zp[1]:13 [ findcol::x#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ render::x#2 render::x#1 ]
Uplifting [render] best 1927897 combination zp[1]:7 [ render::x#2 render::x#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ findcol::return#0 ]
Uplifting [findcol] best 1923897 combination reg byte a [ findcol::return#0 ] 
Attempting to uplift remaining variables inzp[1]:4 [ render::y#4 render::y#1 ]
Uplifting [render] best 1923897 combination zp[1]:4 [ render::y#4 render::y#1 ] 
Attempting to uplift remaining variables inzp[1]:21 [ animate::$12 ]
Uplifting [animate] best 1923891 combination reg byte x [ animate::$12 ] 
Attempting to uplift remaining variables inzp[1]:22 [ animate::$15 ]
Uplifting [animate] best 1923885 combination reg byte a [ animate::$15 ] 
Attempting to uplift remaining variables inzp[1]:23 [ animate::$18 ]
Uplifting [animate] best 1923879 combination reg byte a [ animate::$18 ] 
Coalescing zero page register [ zp[1]:4 [ render::y#4 render::y#1 ] ] with [ zp[1]:14 [ findcol::y#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:7 [ render::x#2 render::x#1 ] ] with [ zp[1]:13 [ findcol::x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ render::colline#5 render::colline#1 ] ] with [ zp[2]:2 [ initscreen::screen#2 initscreen::screen#1 ] ]
Allocated (was zp[1]:4) zp[1]:2 [ render::y#4 render::y#1 findcol::y#0 ]
Allocated (was zp[2]:5) zp[2]:3 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
Allocated (was zp[1]:7) zp[1]:5 [ render::x#2 render::x#1 findcol::x#0 ]
Allocated (was zp[1]:8) zp[1]:6 [ findcol::i#10 findcol::i#1 ]
Allocated (was zp[1]:9) zp[1]:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated (was zp[1]:24) zp[1]:8 [ findcol::xp#0 ]
Allocated (was zp[1]:25) zp[1]:9 [ findcol::yp#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// The screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const FILL = $e6
  // The total number of voronoi points
  .const numpoints = 6
  .label SCREEN = $400
  .label COLORS = $d800
  // main
main: {
    // [1] call initscreen 
    // [6] phi from main to initscreen [phi:main->initscreen]
  initscreen_from_main:
    jsr initscreen
    // [2] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  __b1_from_main:
  __b1_from___b2:
    jmp __b1
    // main::@1
  __b1:
    // [3] call render 
    // [12] phi from main::@1 to render [phi:main::@1->render]
  render_from___b1:
    jsr render
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call animate 
    jsr animate
    jmp __b1_from___b2
}
  // initscreen
initscreen: {
    .label screen = 3
    // [7] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
  __b1_from_initscreen:
    // [7] phi initscreen::screen#2 = SCREEN [phi:initscreen->initscreen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z screen
    lda #>SCREEN
    sta.z screen+1
    jmp __b1
    // initscreen::@1
  __b1:
    // [8] if(initscreen::screen#2<SCREEN+$3e8) goto initscreen::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z screen+1
    cmp #>SCREEN+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<SCREEN+$3e8
    bcc __b2
  !:
    jmp __breturn
    // initscreen::@return
  __breturn:
    // [9] return 
    rts
    // initscreen::@2
  __b2:
    // [10] *initscreen::screen#2 = FILL -- _deref_pbuz1=vbuc1 
    lda #FILL
    ldy #0
    sta (screen),y
    // [11] initscreen::screen#1 = ++ initscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] phi from initscreen::@2 to initscreen::@1 [phi:initscreen::@2->initscreen::@1]
  __b1_from___b2:
    // [7] phi initscreen::screen#2 = initscreen::screen#1 [phi:initscreen::@2->initscreen::@1#0] -- register_copy 
    jmp __b1
}
  // render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
    // [13] phi from render to render::@1 [phi:render->render::@1]
  __b1_from_render:
    // [13] phi render::colline#5 = COLORS [phi:render->render::@1#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z colline
    lda #>COLORS
    sta.z colline+1
    // [13] phi render::y#4 = 0 [phi:render->render::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // [13] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
  __b1_from___b3:
    // [13] phi render::colline#5 = render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
    // [13] phi render::y#4 = render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
    jmp __b1
    // render::@1
  __b1:
    // [14] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
  __b2_from___b1:
    // [14] phi render::x#2 = 0 [phi:render::@1->render::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b2
    // [14] phi from render::@4 to render::@2 [phi:render::@4->render::@2]
  __b2_from___b4:
    // [14] phi render::x#2 = render::x#1 [phi:render::@4->render::@2#0] -- register_copy 
    jmp __b2
    // render::@2
  __b2:
    // [15] findcol::x#0 = render::x#2
    // [16] findcol::y#0 = render::y#4
    // [17] call findcol 
    // [53] phi from render::@2 to findcol [phi:render::@2->findcol]
  findcol_from___b2:
    jsr findcol
    // [18] findcol::return#0 = findcol::return#3 -- vbuaa=vbuxx 
    txa
    jmp __b4
    // render::@4
  __b4:
    // [19] render::col#0 = findcol::return#0
    // [20] render::colline#5[render::x#2] = render::col#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z x
    sta (colline),y
    // [21] render::x#1 = ++ render::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [22] if(render::x#1!=$28) goto render::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z x
    bne __b2_from___b4
    jmp __b3
    // render::@3
  __b3:
    // [23] render::colline#1 = render::colline#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z colline
    sta.z colline
    bcc !+
    inc.z colline+1
  !:
    // [24] render::y#1 = ++ render::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [25] if(render::y#1!=$19) goto render::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // render::@return
  __breturn:
    // [26] return 
    rts
}
  // animate
animate: {
    // [27] animate::$0 = *XPOS + 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx XPOS
    inx
    // [28] *XPOS = animate::$0 -- _deref_pbuc1=vbuxx 
    stx XPOS
    // [29] if(*XPOS!=$28) goto animate::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$28
    cmp XPOS
    bne __b1
    jmp __b5
    // animate::@5
  __b5:
    // [30] *XPOS = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta XPOS
    jmp __b1
    // animate::@1
  __b1:
    // [31] animate::$3 = *YPOS + 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx YPOS
    inx
    // [32] *YPOS = animate::$3 -- _deref_pbuc1=vbuxx 
    stx YPOS
    // [33] if(*YPOS!=$19) goto animate::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS
    bne __b2
    jmp __b6
    // animate::@6
  __b6:
    // [34] *YPOS = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS
    jmp __b2
    // animate::@2
  __b2:
    // [35] animate::$6 = *(XPOS+1) - 1 -- vbuaa=_deref_pbuc1_minus_1 
    lda XPOS+1
    sec
    sbc #1
    // [36] *(XPOS+1) = animate::$6 -- _deref_pbuc1=vbuaa 
    sta XPOS+1
    // [37] if(*(XPOS+1)!=$ff) goto animate::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp XPOS+1
    bne __b3
    jmp __b7
    // animate::@7
  __b7:
    // [38] *(XPOS+1) = $28 -- _deref_pbuc1=vbuc2 
    lda #$28
    sta XPOS+1
    jmp __b3
    // animate::@3
  __b3:
    // [39] animate::$9 = *(YPOS+2) + 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda YPOS+2
    clc
    adc #1
    // [40] *(YPOS+2) = animate::$9 -- _deref_pbuc1=vbuaa 
    sta YPOS+2
    // [41] if(*(YPOS+2)!=$19) goto animate::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS+2
    bne __b4
    jmp __b8
    // animate::@8
  __b8:
    // [42] *(YPOS+2) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS+2
    jmp __b4
    // animate::@4
  __b4:
    // [43] animate::$12 = *(YPOS+3) - 1 -- vbuxx=_deref_pbuc1_minus_1 
    ldx YPOS+3
    dex
    // [44] *(YPOS+3) = animate::$12 -- _deref_pbuc1=vbuxx 
    stx YPOS+3
    // [45] if(*(YPOS+3)!=$ff) goto animate::@return -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp YPOS+3
    bne __breturn
    jmp __b9
    // animate::@9
  __b9:
    // [46] *(YPOS+3) = $19 -- _deref_pbuc1=vbuc2 
    lda #$19
    sta YPOS+3
    // [47] animate::$15 = *(XPOS+3) + 7 -- vbuaa=_deref_pbuc1_plus_vbuc2 
    lda #7
    clc
    adc XPOS+3
    // [48] *(XPOS+3) = animate::$15 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
    // [49] if(*(XPOS+3)<$28) goto animate::@return -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda XPOS+3
    cmp #$28
    bcc __breturn
    jmp __b10
    // animate::@10
  __b10:
    // [50] animate::$18 = *(XPOS+3) - $28 -- vbuaa=_deref_pbuc1_minus_vbuc2 
    lda XPOS+3
    sec
    sbc #$28
    // [51] *(XPOS+3) = animate::$18 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
    jmp __breturn
    // animate::@return
  __breturn:
    // [52] return 
    rts
}
  // findcol
// findcol(byte zp(5) x, byte zp(2) y)
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 8
    .label yp = 9
    .label i = 6
    .label mindiff = 7
    // [54] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
  __b1_from_findcol:
    // [54] phi findcol::mindiff#10 = $ff [phi:findcol->findcol::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z mindiff
    // [54] phi findcol::mincol#10 = 0 [phi:findcol->findcol::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [54] phi findcol::i#10 = 0 [phi:findcol->findcol::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // findcol::@1
  __b1:
    // [55] if(findcol::i#10<numpoints) goto findcol::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #numpoints
    bcc __b2
    // [56] phi from findcol::@1 to findcol::@return [phi:findcol::@1->findcol::@return]
  __breturn_from___b1:
    // [56] phi findcol::return#3 = findcol::mincol#10 [phi:findcol::@1->findcol::@return#0] -- register_copy 
    jmp __breturn
    // findcol::@return
  __breturn:
    // [57] return 
    rts
    // findcol::@2
  __b2:
    // [58] findcol::xp#0 = XPOS[findcol::i#10] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda XPOS,y
    sta.z xp
    // [59] findcol::yp#0 = YPOS[findcol::i#10] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda YPOS,y
    sta.z yp
    // [60] if(findcol::x#0!=findcol::xp#0) goto findcol::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z xp
    bne __b3
    jmp __b9
    // findcol::@9
  __b9:
    // [61] if(findcol::y#0!=findcol::yp#0) goto findcol::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z yp
    bne __b3
    // [56] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
  __breturn_from___b9:
    // [56] phi findcol::return#3 = 0 [phi:findcol::@9->findcol::@return#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // findcol::@3
  __b3:
    // [62] if(findcol::x#0<findcol::xp#0) goto findcol::@4 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x
    cmp.z xp
    bcc __b4
    jmp __b10
    // findcol::@10
  __b10:
    // [63] findcol::diff#2 = findcol::x#0 - findcol::xp#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z x
    sec
    sbc.z xp
    tay
    // [64] phi from findcol::@10 findcol::@4 to findcol::@5 [phi:findcol::@10/findcol::@4->findcol::@5]
  __b5_from___b10:
  __b5_from___b4:
    // [64] phi findcol::diff#5 = findcol::diff#2 [phi:findcol::@10/findcol::@4->findcol::@5#0] -- register_copy 
    jmp __b5
    // findcol::@5
  __b5:
    // [65] if(findcol::y#0<findcol::yp#0) goto findcol::@6 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y
    cmp.z yp
    bcc __b6
    jmp __b11
    // findcol::@11
  __b11:
    // [66] findcol::$9 = findcol::y#0 - findcol::yp#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y
    sec
    sbc.z yp
    // [67] findcol::diff#4 = findcol::diff#5 + findcol::$9 -- vbuaa=vbuyy_plus_vbuaa 
    sty.z $ff
    clc
    adc.z $ff
    // [68] phi from findcol::@11 findcol::@6 to findcol::@7 [phi:findcol::@11/findcol::@6->findcol::@7]
  __b7_from___b11:
  __b7_from___b6:
    // [68] phi findcol::diff#7 = findcol::diff#4 [phi:findcol::@11/findcol::@6->findcol::@7#0] -- register_copy 
    jmp __b7
    // findcol::@7
  __b7:
    // [69] if(findcol::diff#7>=findcol::mindiff#10) goto findcol::@13 -- vbuaa_ge_vbuz1_then_la1 
    cmp.z mindiff
    bcs __b13
    jmp __b12
    // findcol::@12
  __b12:
    // [70] findcol::mincol#1 = COLS[findcol::i#10] -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx COLS,y
    // [71] phi from findcol::@12 findcol::@13 to findcol::@8 [phi:findcol::@12/findcol::@13->findcol::@8]
  __b8_from___b12:
  __b8_from___b13:
    // [71] phi findcol::mindiff#12 = findcol::diff#7 [phi:findcol::@12/findcol::@13->findcol::@8#0] -- register_copy 
    // [71] phi findcol::mincol#4 = findcol::mincol#1 [phi:findcol::@12/findcol::@13->findcol::@8#1] -- register_copy 
    jmp __b8
    // findcol::@8
  __b8:
    // [72] findcol::i#1 = ++ findcol::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [73] findcol::mindiff#13 = findcol::mindiff#12 -- vbuz1=vbuaa 
    sta.z mindiff
    // [54] phi from findcol::@8 to findcol::@1 [phi:findcol::@8->findcol::@1]
  __b1_from___b8:
    // [54] phi findcol::mindiff#10 = findcol::mindiff#13 [phi:findcol::@8->findcol::@1#0] -- register_copy 
    // [54] phi findcol::mincol#10 = findcol::mincol#4 [phi:findcol::@8->findcol::@1#1] -- register_copy 
    // [54] phi findcol::i#10 = findcol::i#1 [phi:findcol::@8->findcol::@1#2] -- register_copy 
    jmp __b1
    // findcol::@13
  __b13:
    // [74] findcol::mindiff#15 = findcol::mindiff#10 -- vbuaa=vbuz1 
    lda.z mindiff
    jmp __b8_from___b13
    // findcol::@6
  __b6:
    // [75] findcol::$11 = findcol::yp#0 - findcol::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z yp
    sec
    sbc.z y
    // [76] findcol::diff#3 = findcol::diff#5 + findcol::$11 -- vbuaa=vbuyy_plus_vbuaa 
    sty.z $ff
    clc
    adc.z $ff
    jmp __b7_from___b6
    // findcol::@4
  __b4:
    // [77] findcol::diff#1 = findcol::xp#0 - findcol::x#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z xp
    sec
    sbc.z x
    tay
    jmp __b5_from___b4
}
  // File Data
  // Points to create the Voronoi from
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b7
Removing instruction jmp __b12
Removing instruction jmp __b8
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda XPOS+3
Replacing instruction lda #0 with TXA
Removing instruction ldy.z i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b8_from___b13 with __b8
Replacing label __b7_from___b6 with __b7
Replacing label __b5_from___b4 with __b5
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Removing instruction render_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction findcol_from___b2:
Removing instruction __breturn_from___b1:
Removing instruction __b5_from___b10:
Removing instruction __b5_from___b4:
Removing instruction __b7_from___b11:
Removing instruction __b7_from___b6:
Removing instruction __b8_from___b12:
Removing instruction __b8_from___b13:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction initscreen_from_main:
Removing instruction __b2:
Removing instruction __b1_from_initscreen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_render:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b1_from_findcol:
Removing instruction __b9:
Removing instruction __breturn_from___b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b1_from___b8:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #$28
Removing instruction lda XPOS+3
Removing instruction lda.z x
Removing instruction lda.z y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* COLORS = (byte*) 55296
const byte* COLS[]  = { 1, 2, 3, 4, 5, 7 }
const byte FILL = $e6
const byte* SCREEN = (byte*) 1024
const byte* XPOS[]  = { 5, $f, 6, $22, $15, $1f }
const byte* YPOS[]  = { 5, 8, $e, 2, $11, $16 }
void animate()
byte~ animate::$0 reg byte x 202.0
byte~ animate::$12 reg byte x 202.0
byte~ animate::$15 reg byte a 202.0
byte~ animate::$18 reg byte a 202.0
byte~ animate::$3 reg byte x 202.0
byte~ animate::$6 reg byte a 202.0
byte~ animate::$9 reg byte a 202.0
byte findcol(byte findcol::x , byte findcol::y)
byte~ findcol::$11 reg byte a 2.0000000002E10
byte~ findcol::$9 reg byte a 2.0000000002E10
byte findcol::diff
byte findcol::diff#1 reg byte y 2.0000000002E10
byte findcol::diff#2 reg byte y 2.0000000002E10
byte findcol::diff#3 reg byte a 2.0000000002E10
byte findcol::diff#4 reg byte a 2.0000000002E10
byte findcol::diff#5 reg byte y 1.0000000001E10
byte findcol::diff#7 reg byte a 1.3333333334666666E10
byte findcol::i
byte findcol::i#1 i zp[1]:6 1.0000000001E10
byte findcol::i#10 i zp[1]:6 3.0000000003E9
byte findcol::mincol
byte findcol::mincol#1 reg byte x 2.0000000002E10
byte findcol::mincol#10 reg byte x 1.6666666668333335E9
byte findcol::mincol#4 reg byte x 1.0000000001E10
byte findcol::mindiff
byte findcol::mindiff#10 mindiff zp[1]:7 1.7647058825294118E9
byte findcol::mindiff#12 reg byte a 1.50000000015E10
byte findcol::mindiff#13 mindiff zp[1]:7 2.0000000002E10
byte findcol::mindiff#15 reg byte a 2.0000000002E10
byte findcol::return
byte findcol::return#0 reg byte a 200002.0
byte findcol::return#3 reg byte x 3.333366667333333E9
byte findcol::x
byte findcol::x#0 x zp[1]:5 1.6000040002E9
byte findcol::xp
byte findcol::xp#0 xp zp[1]:8 1.0000000001E10
byte findcol::y
byte findcol::y#0 y zp[1]:2 1.6666708335416665E9
byte findcol::yp
byte findcol::yp#0 yp zp[1]:9 6.250000000625E9
void initscreen()
byte* initscreen::screen
byte* initscreen::screen#1 screen zp[2]:3 202.0
byte* initscreen::screen#2 screen zp[2]:3 134.66666666666666
void main()
const byte numpoints = 6
void render()
byte render::col
byte render::col#0 reg byte a 200002.0
byte* render::colline
byte* render::colline#1 colline zp[2]:3 6667.333333333333
byte* render::colline#5 colline zp[2]:3 12000.300000000001
byte render::x
byte render::x#1 x zp[1]:5 150001.5
byte render::x#2 x zp[1]:5 57143.42857142857
byte render::y
byte render::y#1 y zp[1]:2 15001.5
byte render::y#4 y zp[1]:2 10909.363636363636

zp[1]:2 [ render::y#4 render::y#1 findcol::y#0 ]
zp[2]:3 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp[1]:5 [ render::x#2 render::x#1 findcol::x#0 ]
zp[1]:6 [ findcol::i#10 findcol::i#1 ]
zp[1]:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte x [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
reg byte y [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte a [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$18 ]
zp[1]:8 [ findcol::xp#0 ]
zp[1]:9 [ findcol::yp#0 ]
reg byte a [ findcol::$9 ]
reg byte a [ findcol::$11 ]


FINAL ASSEMBLER
Score: 1568618

  // File Comments
// The screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const FILL = $e6
  // The total number of voronoi points
  .const numpoints = 6
  .label SCREEN = $400
  .label COLORS = $d800
  // main
main: {
    // initscreen()
    // [1] call initscreen 
    // [6] phi from main to initscreen [phi:main->initscreen]
    jsr initscreen
    // [2] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
    // main::@1
  __b1:
    // render()
    // [3] call render 
    // [12] phi from main::@1 to render [phi:main::@1->render]
    jsr render
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // animate()
    // [5] call animate 
    jsr animate
    jmp __b1
}
  // initscreen
initscreen: {
    .label screen = 3
    // [7] phi from initscreen to initscreen::@1 [phi:initscreen->initscreen::@1]
    // [7] phi initscreen::screen#2 = SCREEN [phi:initscreen->initscreen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z screen
    lda #>SCREEN
    sta.z screen+1
    // initscreen::@1
  __b1:
    // for( byte* screen = SCREEN; screen<SCREEN+$03e8; ++screen)
    // [8] if(initscreen::screen#2<SCREEN+$3e8) goto initscreen::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z screen+1
    cmp #>SCREEN+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<SCREEN+$3e8
    bcc __b2
  !:
    // initscreen::@return
    // }
    // [9] return 
    rts
    // initscreen::@2
  __b2:
    // *screen = FILL
    // [10] *initscreen::screen#2 = FILL -- _deref_pbuz1=vbuc1 
    lda #FILL
    ldy #0
    sta (screen),y
    // for( byte* screen = SCREEN; screen<SCREEN+$03e8; ++screen)
    // [11] initscreen::screen#1 = ++ initscreen::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] phi from initscreen::@2 to initscreen::@1 [phi:initscreen::@2->initscreen::@1]
    // [7] phi initscreen::screen#2 = initscreen::screen#1 [phi:initscreen::@2->initscreen::@1#0] -- register_copy 
    jmp __b1
}
  // render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
    // [13] phi from render to render::@1 [phi:render->render::@1]
    // [13] phi render::colline#5 = COLORS [phi:render->render::@1#0] -- pbuz1=pbuc1 
    lda #<COLORS
    sta.z colline
    lda #>COLORS
    sta.z colline+1
    // [13] phi render::y#4 = 0 [phi:render->render::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [13] phi from render::@3 to render::@1 [phi:render::@3->render::@1]
    // [13] phi render::colline#5 = render::colline#1 [phi:render::@3->render::@1#0] -- register_copy 
    // [13] phi render::y#4 = render::y#1 [phi:render::@3->render::@1#1] -- register_copy 
    // render::@1
  __b1:
    // [14] phi from render::@1 to render::@2 [phi:render::@1->render::@2]
    // [14] phi render::x#2 = 0 [phi:render::@1->render::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [14] phi from render::@4 to render::@2 [phi:render::@4->render::@2]
    // [14] phi render::x#2 = render::x#1 [phi:render::@4->render::@2#0] -- register_copy 
    // render::@2
  __b2:
    // findcol(x, y)
    // [15] findcol::x#0 = render::x#2
    // [16] findcol::y#0 = render::y#4
    // [17] call findcol 
    // [53] phi from render::@2 to findcol [phi:render::@2->findcol]
    jsr findcol
    // findcol(x, y)
    // [18] findcol::return#0 = findcol::return#3 -- vbuaa=vbuxx 
    txa
    // render::@4
    // col = findcol(x, y)
    // [19] render::col#0 = findcol::return#0
    // colline[x] = col
    // [20] render::colline#5[render::x#2] = render::col#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z x
    sta (colline),y
    // for( byte x : 0..39)
    // [21] render::x#1 = ++ render::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [22] if(render::x#1!=$28) goto render::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z x
    bne __b2
    // render::@3
    // colline = colline+40
    // [23] render::colline#1 = render::colline#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    clc
    adc.z colline
    sta.z colline
    bcc !+
    inc.z colline+1
  !:
    // for( byte y : 0.. 24)
    // [24] render::y#1 = ++ render::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [25] if(render::y#1!=$19) goto render::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1
    // render::@return
    // }
    // [26] return 
    rts
}
  // animate
animate: {
    // XPOS[0]+1
    // [27] animate::$0 = *XPOS + 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx XPOS
    inx
    // XPOS[0] = XPOS[0]+1
    // [28] *XPOS = animate::$0 -- _deref_pbuc1=vbuxx 
    stx XPOS
    // if(XPOS[0]==40)
    // [29] if(*XPOS!=$28) goto animate::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$28
    cmp XPOS
    bne __b1
    // animate::@5
    // XPOS[0] = 0
    // [30] *XPOS = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta XPOS
    // animate::@1
  __b1:
    // YPOS[0]+1
    // [31] animate::$3 = *YPOS + 1 -- vbuxx=_deref_pbuc1_plus_1 
    ldx YPOS
    inx
    // YPOS[0] = YPOS[0]+1
    // [32] *YPOS = animate::$3 -- _deref_pbuc1=vbuxx 
    stx YPOS
    // if(YPOS[0]==25)
    // [33] if(*YPOS!=$19) goto animate::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS
    bne __b2
    // animate::@6
    // YPOS[0] = 0
    // [34] *YPOS = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS
    // animate::@2
  __b2:
    // XPOS[1]-1
    // [35] animate::$6 = *(XPOS+1) - 1 -- vbuaa=_deref_pbuc1_minus_1 
    lda XPOS+1
    sec
    sbc #1
    // XPOS[1] = XPOS[1]-1
    // [36] *(XPOS+1) = animate::$6 -- _deref_pbuc1=vbuaa 
    sta XPOS+1
    // if(XPOS[1]==255)
    // [37] if(*(XPOS+1)!=$ff) goto animate::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp XPOS+1
    bne __b3
    // animate::@7
    // XPOS[1] = 40
    // [38] *(XPOS+1) = $28 -- _deref_pbuc1=vbuc2 
    lda #$28
    sta XPOS+1
    // animate::@3
  __b3:
    // YPOS[2]+1
    // [39] animate::$9 = *(YPOS+2) + 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda YPOS+2
    clc
    adc #1
    // YPOS[2] = YPOS[2]+1
    // [40] *(YPOS+2) = animate::$9 -- _deref_pbuc1=vbuaa 
    sta YPOS+2
    // if(YPOS[2]==25)
    // [41] if(*(YPOS+2)!=$19) goto animate::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$19
    cmp YPOS+2
    bne __b4
    // animate::@8
    // YPOS[2] = 0
    // [42] *(YPOS+2) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta YPOS+2
    // animate::@4
  __b4:
    // YPOS[3]-1
    // [43] animate::$12 = *(YPOS+3) - 1 -- vbuxx=_deref_pbuc1_minus_1 
    ldx YPOS+3
    dex
    // YPOS[3] = YPOS[3]-1
    // [44] *(YPOS+3) = animate::$12 -- _deref_pbuc1=vbuxx 
    stx YPOS+3
    // if(YPOS[3]==255)
    // [45] if(*(YPOS+3)!=$ff) goto animate::@return -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp YPOS+3
    bne __breturn
    // animate::@9
    // YPOS[3] = 25
    // [46] *(YPOS+3) = $19 -- _deref_pbuc1=vbuc2 
    lda #$19
    sta YPOS+3
    // XPOS[3]+7
    // [47] animate::$15 = *(XPOS+3) + 7 -- vbuaa=_deref_pbuc1_plus_vbuc2 
    lda #7
    clc
    adc XPOS+3
    // XPOS[3] = XPOS[3]+7
    // [48] *(XPOS+3) = animate::$15 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
    // if(XPOS[3]>=40)
    // [49] if(*(XPOS+3)<$28) goto animate::@return -- _deref_pbuc1_lt_vbuc2_then_la1 
    cmp #$28
    bcc __breturn
    // animate::@10
    // XPOS[3]-40
    // [50] animate::$18 = *(XPOS+3) - $28 -- vbuaa=_deref_pbuc1_minus_vbuc2 
    sec
    sbc #$28
    // XPOS[3] = XPOS[3]-40
    // [51] *(XPOS+3) = animate::$18 -- _deref_pbuc1=vbuaa 
    sta XPOS+3
    // animate::@return
  __breturn:
    // }
    // [52] return 
    rts
}
  // findcol
// findcol(byte zp(5) x, byte zp(2) y)
findcol: {
    .label x = 5
    .label y = 2
    .label xp = 8
    .label yp = 9
    .label i = 6
    .label mindiff = 7
    // [54] phi from findcol to findcol::@1 [phi:findcol->findcol::@1]
    // [54] phi findcol::mindiff#10 = $ff [phi:findcol->findcol::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z mindiff
    // [54] phi findcol::mincol#10 = 0 [phi:findcol->findcol::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [54] phi findcol::i#10 = 0 [phi:findcol->findcol::@1#2] -- vbuz1=vbuc1 
    txa
    sta.z i
    // findcol::@1
  __b1:
    // for( byte i=0; i<numpoints; ++i)
    // [55] if(findcol::i#10<numpoints) goto findcol::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #numpoints
    bcc __b2
    // [56] phi from findcol::@1 to findcol::@return [phi:findcol::@1->findcol::@return]
    // [56] phi findcol::return#3 = findcol::mincol#10 [phi:findcol::@1->findcol::@return#0] -- register_copy 
    // findcol::@return
    // }
    // [57] return 
    rts
    // findcol::@2
  __b2:
    // xp = XPOS[i]
    // [58] findcol::xp#0 = XPOS[findcol::i#10] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda XPOS,y
    sta.z xp
    // yp = YPOS[i]
    // [59] findcol::yp#0 = YPOS[findcol::i#10] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda YPOS,y
    sta.z yp
    // if(x==xp)
    // [60] if(findcol::x#0!=findcol::xp#0) goto findcol::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z xp
    bne __b3
    // findcol::@9
    // if(y==yp)
    // [61] if(findcol::y#0!=findcol::yp#0) goto findcol::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z yp
    bne __b3
    // [56] phi from findcol::@9 to findcol::@return [phi:findcol::@9->findcol::@return]
    // [56] phi findcol::return#3 = 0 [phi:findcol::@9->findcol::@return#0] -- vbuxx=vbuc1 
    ldx #0
    rts
    // findcol::@3
  __b3:
    // if(x<xp)
    // [62] if(findcol::x#0<findcol::xp#0) goto findcol::@4 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x
    cmp.z xp
    bcc __b4
    // findcol::@10
    // diff = x-xp
    // [63] findcol::diff#2 = findcol::x#0 - findcol::xp#0 -- vbuyy=vbuz1_minus_vbuz2 
    sec
    sbc.z xp
    tay
    // [64] phi from findcol::@10 findcol::@4 to findcol::@5 [phi:findcol::@10/findcol::@4->findcol::@5]
    // [64] phi findcol::diff#5 = findcol::diff#2 [phi:findcol::@10/findcol::@4->findcol::@5#0] -- register_copy 
    // findcol::@5
  __b5:
    // if(y<yp)
    // [65] if(findcol::y#0<findcol::yp#0) goto findcol::@6 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y
    cmp.z yp
    bcc __b6
    // findcol::@11
    // y-yp
    // [66] findcol::$9 = findcol::y#0 - findcol::yp#0 -- vbuaa=vbuz1_minus_vbuz2 
    sec
    sbc.z yp
    // diff = diff + (y-yp)
    // [67] findcol::diff#4 = findcol::diff#5 + findcol::$9 -- vbuaa=vbuyy_plus_vbuaa 
    sty.z $ff
    clc
    adc.z $ff
    // [68] phi from findcol::@11 findcol::@6 to findcol::@7 [phi:findcol::@11/findcol::@6->findcol::@7]
    // [68] phi findcol::diff#7 = findcol::diff#4 [phi:findcol::@11/findcol::@6->findcol::@7#0] -- register_copy 
    // findcol::@7
  __b7:
    // if(diff<mindiff)
    // [69] if(findcol::diff#7>=findcol::mindiff#10) goto findcol::@13 -- vbuaa_ge_vbuz1_then_la1 
    cmp.z mindiff
    bcs __b13
    // findcol::@12
    // mincol = COLS[i]
    // [70] findcol::mincol#1 = COLS[findcol::i#10] -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx COLS,y
    // [71] phi from findcol::@12 findcol::@13 to findcol::@8 [phi:findcol::@12/findcol::@13->findcol::@8]
    // [71] phi findcol::mindiff#12 = findcol::diff#7 [phi:findcol::@12/findcol::@13->findcol::@8#0] -- register_copy 
    // [71] phi findcol::mincol#4 = findcol::mincol#1 [phi:findcol::@12/findcol::@13->findcol::@8#1] -- register_copy 
    // findcol::@8
  __b8:
    // for( byte i=0; i<numpoints; ++i)
    // [72] findcol::i#1 = ++ findcol::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [73] findcol::mindiff#13 = findcol::mindiff#12 -- vbuz1=vbuaa 
    sta.z mindiff
    // [54] phi from findcol::@8 to findcol::@1 [phi:findcol::@8->findcol::@1]
    // [54] phi findcol::mindiff#10 = findcol::mindiff#13 [phi:findcol::@8->findcol::@1#0] -- register_copy 
    // [54] phi findcol::mincol#10 = findcol::mincol#4 [phi:findcol::@8->findcol::@1#1] -- register_copy 
    // [54] phi findcol::i#10 = findcol::i#1 [phi:findcol::@8->findcol::@1#2] -- register_copy 
    jmp __b1
    // findcol::@13
  __b13:
    // [74] findcol::mindiff#15 = findcol::mindiff#10 -- vbuaa=vbuz1 
    lda.z mindiff
    jmp __b8
    // findcol::@6
  __b6:
    // yp-y
    // [75] findcol::$11 = findcol::yp#0 - findcol::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z yp
    sec
    sbc.z y
    // diff = diff + (yp-y)
    // [76] findcol::diff#3 = findcol::diff#5 + findcol::$11 -- vbuaa=vbuyy_plus_vbuaa 
    sty.z $ff
    clc
    adc.z $ff
    jmp __b7
    // findcol::@4
  __b4:
    // diff = xp-x
    // [77] findcol::diff#1 = findcol::xp#0 - findcol::x#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z xp
    sec
    sbc.z x
    tay
    jmp __b5
}
  // File Data
  // Points to create the Voronoi from
  XPOS: .byte 5, $f, 6, $22, $15, $1f
  YPOS: .byte 5, 8, $e, 2, $11, $16
  COLS: .byte 1, 2, 3, 4, 5, 7

