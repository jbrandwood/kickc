Setting inferred volatile on symbol affected by address-of main::w = (unsigned int)&ptr
Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::w#0 = (unsigned int)&ptr
  main::w#1 = main::w#0 + $32
  main::$0 = byte0  main::w#1
  SCREEN[0] = main::$0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  ptr = (char *)$1000
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
void main()
char main::$0
unsigned int main::w
unsigned int main::w#0
unsigned int main::w#1
__loadstore char * volatile ptr

Adding number conversion cast (unumber) $32 in main::w#1 = main::w#0 + $32
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $32
Simplifying constant integer cast 0
Simplifying constant pointer cast (char *) 4096
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $32
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant main::w#0 = (unsigned int)&ptr
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [3] SCREEN[0] = main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant right-side identified [0] main::w#1 = main::w#0 + $32
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::w#1 = main::w#0+$32
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] main::$0 = byte0  main::w#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = byte0 main::w#1
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::w#0
Inlining constant with different constant siblings main::w#1
Constant inlined main::w#0 = (unsigned int)&ptr
Constant inlined main::w#1 = (unsigned int)&ptr+$32
Constant inlined main::$0 = byte0 (unsigned int)&ptr+$32
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
CALL GRAPH
Calls in [__start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] ptr = (char *) 4096
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] *SCREEN = byte0 (unsigned int)&ptr+$32
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
void main()
unsigned int main::w
__loadstore char * volatile ptr // 1.0

Initial phi equivalence classes
Added variable ptr to live range equivalence class [ ptr ]
Complete equivalence classes
[ ptr ]
Allocated zp[2]:2 [ ptr ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] ptr = (char *) 4096 [ ptr ] (  [ ptr ] { }  ) always clobbers reg byte a 
Statement [5] *SCREEN = byte0 (unsigned int)&ptr+$32 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ ptr ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 1: zp[2]:2 [ ptr ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [] best 73 combination zp[2]:2 [ ptr ] 
Uplifting [main] best 73 combination 
Uplifting [__start] best 73 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="typedef-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label SCREEN = $400
  .label ptr = 2
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] ptr = (char *) 4096 -- pbuz1=pbuc1 
    lda #<$1000
    sta.z ptr
    lda #>$1000
    sta.z ptr+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main -- call_phi_near 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] *SCREEN = byte0 (unsigned int)&ptr+$32 -- _deref_pbuc1=vbuc2 
    lda #<ptr+$32
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
void __start()
void main()
unsigned int main::w
__loadstore char * volatile ptr // zp[2]:2 1.0

zp[2]:2 [ ptr ]


FINAL ASSEMBLER
Score: 34

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="typedef-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label SCREEN = $400
  .label ptr = 2
.segment Code
  // __start
__start: {
    // __start::__init1
    // char* ptr = (char*)0x1000
    // [1] ptr = (char *) 4096 -- pbuz1=pbuc1 
    lda #<$1000
    sta.z ptr
    lda #>$1000
    sta.z ptr+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main -- call_phi_near 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    // SCREEN[0] = BYTE0(w)
    // [5] *SCREEN = byte0 (unsigned int)&ptr+$32 -- _deref_pbuc1=vbuc2 
    lda #<ptr+$32
    sta SCREEN
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

