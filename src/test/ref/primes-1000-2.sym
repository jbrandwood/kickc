(label) @1
(label) @begin
(label) @end
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const word*) PRIMES[(number) $3e8]  = { fill( $3e8, 0) }
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte) SIZEOF_WORD = (byte) 2
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
(label) div16u8u::@1
(label) div16u8u::@return
(word) div16u8u::dividend
(word) div16u8u::dividend#0 dividend zp[2]:6 4200.6
(byte) div16u8u::divisor
(byte) div16u8u::divisor#0 divisor zp[1]:10 4200.6
(word) div16u8u::quotient
(byte) div16u8u::quotient_hi
(byte) div16u8u::quotient_lo
(word) div16u8u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 2.00000002E8
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp[1]:11 2.500000025E7
(byte) divr8u::dividend#1 dividend zp[1]:11 10001.0
(byte) divr8u::dividend#2 dividend zp[1]:11 6667.333333333333
(byte) divr8u::dividend#3 dividend zp[1]:11 5.0016667333333336E7
(byte) divr8u::dividend#5 dividend zp[1]:11 120003.0
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp[1]:10 20002.0
(byte) divr8u::divisor#1 divisor zp[1]:10 10001.0
(byte) divr8u::divisor#6 divisor zp[1]:10 1.3334666933333334E7
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 1.500000015E8
(byte) divr8u::i#2 reg byte x 1.6666666833333334E7
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp[1]:12 1.500000015E8
(byte) divr8u::quotient#2 quotient zp[1]:12 1.00000001E8
(byte) divr8u::quotient#3 quotient zp[1]:12 2.857142885714286E7
(byte) divr8u::rem
(byte) divr8u::rem#0 reg byte y 1.00000001E8
(byte) divr8u::rem#1 reg byte y 2.00000002E8
(byte) divr8u::rem#10 reg byte y 110002.0
(byte) divr8u::rem#11 reg byte y 1.0003333466666667E8
(byte) divr8u::rem#2 reg byte y 2.00000002E8
(byte) divr8u::rem#4 reg byte y 20002.0
(byte) divr8u::rem#5 reg byte y 2.00100003E8
(byte) divr8u::rem#6 reg byte y 1.00000001E8
(byte) divr8u::return
(byte) divr8u::return#0 return zp[1]:12 1.00000001E8
(void()) main()
(word~) main::$0 zp[2]:13 202.0
(byte~) main::$12 reg byte a 101.0
(byte~) main::$13 reg byte x 500.5
(word~) main::$14 zp[2]:15 202.0
(word*~) main::$15 zp[2]:15 202.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::p
(byte) main::p#0 reg byte a 151.5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 200002.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 100001.0
(byte) mul8u::a#1 reg byte x 367.33333333333337
(byte) mul8u::a#2 reg byte x 66834.16666666666
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 101.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:15 2002.0
(word) mul8u::mb#1 mb zp[2]:15 200002.0
(word) mul8u::mb#2 mb zp[2]:15 43000.57142857143
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:13 200002.0
(word) mul8u::res#2 res zp[2]:13 50017.33333333333
(word) mul8u::res#6 res zp[2]:13 100001.0
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:13 202.0
(word) potential
(word) potential#10 potential zp[2]:6 300.54545454545456
(word) potential#13 potential zp[2]:6 27.545454545454547
(word) potential#16 potential zp[2]:6 586.4285714285714
(word) potential#2 potential zp[2]:6 202.0
(word) potential#3 potential zp[2]:6 2002.0
(word) prime_idx
(word) prime_idx#10 prime_idx zp[2]:3 44.888888888888886
(word) prime_idx#15 prime_idx zp[2]:3 9.181818181818182
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2000002.0
(byte) print_char::ch#2 reg byte a 1.1000002E7
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp[2]:8 2101000.4
(byte*) print_char_cursor#16 print_char_cursor zp[2]:8 1833350.4999999998
(byte*) print_char_cursor#34 print_char_cursor zp[2]:8 325.8709677419355
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:15 2000002.0
(byte*) print_str::str#2 str zp[2]:15 1000001.0
(void()) print_uint_decimal((word) print_uint_decimal::w)
(label) print_uint_decimal::@1
(label) print_uint_decimal::@return
(word) print_uint_decimal::w
(word) print_uint_decimal::w#0 w zp[2]:6 1102.0
(byte) rem8u
(byte) rem8u#1 reg byte y 12333.666666666668
(byte) test_idx
(byte) test_idx#11 test_idx zp[1]:5 1501.5
(byte) test_idx#2 test_idx zp[1]:5 1001.0
(byte) test_idx#6 test_idx zp[1]:5 600.5999999999999
(byte) test_last
(byte) test_last#11 test_last zp[1]:2 44.888888888888886
(byte) test_last#17 test_last zp[1]:2 62.09523809523809
(byte) test_last#2 test_last zp[1]:2 202.0
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 2000002.0
(byte~) utoa::$11 reg byte a 20002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:13 287143.2857142857
(byte*) utoa::buffer#14 buffer zp[2]:13 1500001.5
(byte*) utoa::buffer#3 buffer zp[2]:13 20002.0
(byte*) utoa::buffer#4 buffer zp[2]:13 2000002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:10 2000002.0
(byte) utoa::digit#2 digit zp[1]:10 285714.5714285714
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:17 600000.6000000001
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 500000.5
(byte) utoa::started#4 reg byte x 1000001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:15 1000001.0
(word) utoa::value#1 value zp[2]:15 5501.0
(word) utoa::value#2 value zp[2]:15 572857.857142857
(word) utoa::value#6 value zp[2]:15 1500001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:13 1375000.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000000001E10
(byte) utoa_append::digit#2 reg byte x 1.00050000015E10
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:15 2000002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:17 3.3335000005E9
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:15 3666667.333333333
(word) utoa_append::value#1 value zp[2]:15 2.0000000002E10
(word) utoa_append::value#2 value zp[2]:15 5.001833334166666E9

zp[1]:2 [ test_last#11 test_last#17 test_last#2 ]
zp[2]:3 [ prime_idx#15 prime_idx#10 ]
zp[1]:5 [ test_idx#6 test_idx#11 test_idx#2 ]
zp[2]:6 [ potential#16 potential#2 potential#13 potential#10 potential#3 div16u8u::dividend#0 print_uint_decimal::w#0 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
zp[2]:8 [ print_char_cursor#12 print_char_cursor#34 print_char_cursor#16 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:10 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 div16u8u::divisor#0 utoa::digit#2 utoa::digit#1 ]
reg byte y [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
zp[1]:11 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
zp[1]:12 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:13 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte a [ main::$12 ]
reg byte a [ main::p#0 ]
reg byte a [ mul8u::b#0 ]
reg byte x [ main::$13 ]
zp[2]:15 [ main::$14 main::$15 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 print_str::str#2 print_str::str#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 ]
reg byte a [ divr8u::$1 ]
reg byte y [ rem8u#1 ]
reg byte a [ mul8u::$1 ]
