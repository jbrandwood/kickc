Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uint (number) 8 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_ulong (dword) count (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_string (byte*~) main::$6 (struct printf_format_string){ (byte) 0, (byte) 0 } 
Added struct type cast to parameter value list call printf_ulong (dword) count (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Added struct type cast to parameter value list call printf_uchar (byte) print::i1 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) legal::$3 ← call diff *((const byte*) board + (byte) legal::i) (byte) legal::column 
Inlined call (byte~) legal::$4 ← call diff (byte) legal::i (byte) legal::row 
Eliminating unused variable with no statement (void~) main::$1
Eliminating unused variable with no statement (void~) main::$2
Eliminating unused variable with no statement (struct TIME_OF_DAY~) main::$5
Eliminating unused variable with no statement (void~) main::$7
Eliminating unused variable with no statement (void~) print::$1
Eliminating unused variable with no statement (void~) print::$3
Eliminating unused variable with no statement (void~) print::$5
Eliminating unused variable with no statement (void~) print::$8
Eliminating unused variable with no statement (void~) print::$9
Unwinding list assignment { (byte~) main::$5_TENTHS, (byte~) main::$5_SEC, (byte~) main::$5_MIN, (byte~) main::$5_HOURS } ← { (byte) tod_read::return_TENTHS, (byte) tod_read::return_SEC, (byte) tod_read::return_MIN, (byte) tod_read::return_HOURS }
Unwinding list assignment { (byte) tod_read::return_TENTHS#2, (byte) tod_read::return_SEC#2, (byte) tod_read::return_MIN#2, (byte) tod_read::return_HOURS#2 } ← { (byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6 printf_string::@3
  (byte*) strlen::str#5 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 printf_string::@3/(byte*) strlen::str#2 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#3 ← phi( strlen/(byte*) strlen::str#5 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#4 ← phi( strlen::@1/(byte*) strlen::str#3 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#4
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#4 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#4
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  (byte*) uctoa::buffer#21 ← phi( printf_uchar::@3/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_uchar::@3/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_uchar::@3/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  (byte*) utoa::buffer#21 ← phi( printf_uint::@3/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_uint::@3/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_uint::@3/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@3
  (byte*) ultoa::buffer#21 ← phi( printf_ulong::@3/(byte*) ultoa::buffer#5 )
  (dword) ultoa::value#12 ← phi( printf_ulong::@3/(dword) ultoa::value#1 )
  (byte) ultoa::radix#1 ← phi( printf_ulong::@3/(byte) ultoa::radix#0 )
  (byte) ultoa::max_digits#0 ← (byte) 0
  (dword*) ultoa::digit_values#0 ← (dword*) 0
  (bool~) ultoa::$0 ← (byte) ultoa::radix#1 == (const byte) DECIMAL
  if((bool~) ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  (byte*) ultoa::buffer#17 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (dword) ultoa::value#8 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte) ultoa::max_digits#1 ← (number) $a
  (dword*) ultoa::digit_values#1 ← (const dword*) RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  (dword) ultoa::value#13 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte*) ultoa::buffer#16 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (byte) ultoa::radix#2 ← phi( ultoa/(byte) ultoa::radix#1 )
  (bool~) ultoa::$1 ← (byte) ultoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  (byte*) ultoa::buffer#18 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (dword) ultoa::value#9 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte) ultoa::max_digits#2 ← (number) 8
  (dword*) ultoa::digit_values#2 ← (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  (dword) ultoa::value#14 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte*) ultoa::buffer#13 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (byte) ultoa::radix#3 ← phi( ultoa::@6/(byte) ultoa::radix#2 )
  (bool~) ultoa::$2 ← (byte) ultoa::radix#3 == (const byte) OCTAL
  if((bool~) ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  (byte*) ultoa::buffer#19 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (dword) ultoa::value#10 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte) ultoa::max_digits#3 ← (number) $b
  (dword*) ultoa::digit_values#3 ← (const dword*) RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  (dword) ultoa::value#15 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte*) ultoa::buffer#10 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (byte) ultoa::radix#4 ← phi( ultoa::@7/(byte) ultoa::radix#3 )
  (bool~) ultoa::$3 ← (byte) ultoa::radix#4 == (const byte) BINARY
  if((bool~) ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#20 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  (dword) ultoa::value#11 ← phi( ultoa::@8/(dword) ultoa::value#15 )
  (byte) ultoa::max_digits#4 ← (number) $20
  (dword*) ultoa::digit_values#4 ← (const dword*) RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#6 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  *((byte*) ultoa::buffer#6) ← (byte) 'e'
  (byte*) ultoa::buffer#0 ← ++ (byte*) ultoa::buffer#6
  *((byte*) ultoa::buffer#0) ← (byte) 'r'
  (byte*) ultoa::buffer#1 ← ++ (byte*) ultoa::buffer#0
  *((byte*) ultoa::buffer#1) ← (byte) 'r'
  (byte*) ultoa::buffer#2 ← ++ (byte*) ultoa::buffer#1
  *((byte*) ultoa::buffer#2) ← (number) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  (byte*) ultoa::buffer#15 ← phi( ultoa::@1/(byte*) ultoa::buffer#17 ultoa::@2/(byte*) ultoa::buffer#18 ultoa::@3/(byte*) ultoa::buffer#19 ultoa::@4/(byte*) ultoa::buffer#20 )
  (dword) ultoa::value#7 ← phi( ultoa::@1/(dword) ultoa::value#8 ultoa::@2/(dword) ultoa::value#9 ultoa::@3/(dword) ultoa::value#10 ultoa::@4/(dword) ultoa::value#11 )
  (dword*) ultoa::digit_values#8 ← phi( ultoa::@1/(dword*) ultoa::digit_values#1 ultoa::@2/(dword*) ultoa::digit_values#2 ultoa::@3/(dword*) ultoa::digit_values#3 ultoa::@4/(dword*) ultoa::digit_values#4 )
  (byte) ultoa::max_digits#7 ← phi( ultoa::@1/(byte) ultoa::max_digits#1 ultoa::@2/(byte) ultoa::max_digits#2 ultoa::@3/(byte) ultoa::max_digits#3 ultoa::@4/(byte) ultoa::max_digits#4 )
  (byte) ultoa::started#0 ← (byte) 0
  (byte) ultoa::digit#0 ← (byte) 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  (byte*) ultoa::buffer#11 ← phi( ultoa::@13/(byte*) ultoa::buffer#14 ultoa::@5/(byte*) ultoa::buffer#15 )
  (byte) ultoa::started#3 ← phi( ultoa::@13/(byte) ultoa::started#4 ultoa::@5/(byte) ultoa::started#0 )
  (dword) ultoa::value#5 ← phi( ultoa::@13/(dword) ultoa::value#6 ultoa::@5/(dword) ultoa::value#7 )
  (dword*) ultoa::digit_values#6 ← phi( ultoa::@13/(dword*) ultoa::digit_values#7 ultoa::@5/(dword*) ultoa::digit_values#8 )
  (byte) ultoa::digit#2 ← phi( ultoa::@13/(byte) ultoa::digit#1 ultoa::@5/(byte) ultoa::digit#0 )
  (byte) ultoa::max_digits#5 ← phi( ultoa::@13/(byte) ultoa::max_digits#6 ultoa::@5/(byte) ultoa::max_digits#7 )
  (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
  (bool~) ultoa::$5 ← (byte) ultoa::digit#2 < (number~) ultoa::$4
  if((bool~) ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  (byte) ultoa::max_digits#8 ← phi( ultoa::@10/(byte) ultoa::max_digits#5 )
  (byte*) ultoa::buffer#12 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (byte) ultoa::started#2 ← phi( ultoa::@10/(byte) ultoa::started#3 )
  (dword) ultoa::value#2 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (dword*) ultoa::digit_values#5 ← phi( ultoa::@10/(dword*) ultoa::digit_values#6 )
  (byte) ultoa::digit#3 ← phi( ultoa::@10/(byte) ultoa::digit#2 )
  (byte~) ultoa::$10 ← (byte) ultoa::digit#3 * (const byte) SIZEOF_DWORD
  (dword) ultoa::digit_value#0 ← *((dword*) ultoa::digit_values#5 + (byte~) ultoa::$10)
  (bool~) ultoa::$6 ← (dword) ultoa::value#2 >= (dword) ultoa::digit_value#0
  (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
  (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
  if((bool~) ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  (byte*) ultoa::buffer#7 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (dword) ultoa::value#3 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  *((byte*) ultoa::buffer#7) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#7
  *((byte*) ultoa::buffer#3) ← (number) 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  (byte*) ultoa::buffer#14 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 ultoa::@15/(byte*) ultoa::buffer#4 )
  (byte) ultoa::started#4 ← phi( ultoa::@11/(byte) ultoa::started#2 ultoa::@15/(byte) ultoa::started#1 )
  (dword) ultoa::value#6 ← phi( ultoa::@11/(dword) ultoa::value#2 ultoa::@15/(dword) ultoa::value#0 )
  (dword*) ultoa::digit_values#7 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 ultoa::@15/(dword*) ultoa::digit_values#9 )
  (byte) ultoa::max_digits#6 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 ultoa::@15/(byte) ultoa::max_digits#9 )
  (byte) ultoa::digit#4 ← phi( ultoa::@11/(byte) ultoa::digit#3 ultoa::@15/(byte) ultoa::digit#5 )
  (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  (dword*) ultoa::digit_values#10 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 )
  (byte) ultoa::max_digits#10 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 )
  (byte) ultoa::digit#6 ← phi( ultoa::@11/(byte) ultoa::digit#3 )
  (dword) ultoa::digit_value#1 ← phi( ultoa::@11/(dword) ultoa::digit_value#0 )
  (dword) ultoa::value#4 ← phi( ultoa::@11/(dword) ultoa::value#2 )
  (byte*) ultoa::buffer#8 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 )
  (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#8
  (dword) ultoa_append::value#0 ← (dword) ultoa::value#4
  (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#1
  call ultoa_append 
  (dword) ultoa_append::return#0 ← (dword) ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  (dword*) ultoa::digit_values#9 ← phi( ultoa::@14/(dword*) ultoa::digit_values#10 )
  (byte) ultoa::max_digits#9 ← phi( ultoa::@14/(byte) ultoa::max_digits#10 )
  (byte) ultoa::digit#5 ← phi( ultoa::@14/(byte) ultoa::digit#6 )
  (byte*) ultoa::buffer#9 ← phi( ultoa::@14/(byte*) ultoa::buffer#8 )
  (dword) ultoa_append::return#3 ← phi( ultoa::@14/(dword) ultoa_append::return#0 )
  (dword~) ultoa::$9 ← (dword) ultoa_append::return#3
  (dword) ultoa::value#0 ← (dword~) ultoa::$9
  (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#9
  (byte) ultoa::started#1 ← (number) 1
  to:ultoa::@13

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  (byte*) ultoa_append::buffer#3 ← phi( ultoa::@14/(byte*) ultoa_append::buffer#0 )
  (dword) ultoa_append::sub#3 ← phi( ultoa::@14/(dword) ultoa_append::sub#0 )
  (dword) ultoa_append::value#5 ← phi( ultoa::@14/(dword) ultoa_append::value#0 )
  (byte) ultoa_append::digit#0 ← (byte) 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  (byte*) ultoa_append::buffer#2 ← phi( ultoa_append/(byte*) ultoa_append::buffer#3 ultoa_append::@2/(byte*) ultoa_append::buffer#4 )
  (byte) ultoa_append::digit#4 ← phi( ultoa_append/(byte) ultoa_append::digit#0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  (dword) ultoa_append::sub#1 ← phi( ultoa_append/(dword) ultoa_append::sub#3 ultoa_append::@2/(dword) ultoa_append::sub#2 )
  (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#5 ultoa_append::@2/(dword) ultoa_append::value#1 )
  (bool~) ultoa_append::$0 ← (dword) ultoa_append::value#2 >= (dword) ultoa_append::sub#1
  if((bool~) ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  (byte*) ultoa_append::buffer#4 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (dword) ultoa_append::sub#2 ← phi( ultoa_append::@1/(dword) ultoa_append::sub#1 )
  (dword) ultoa_append::value#3 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte) ultoa_append::digit#2 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#3 - (dword) ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  (dword) ultoa_append::value#4 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte*) ultoa_append::buffer#1 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (byte) ultoa_append::digit#3 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  *((byte*) ultoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#3)
  (dword) ultoa_append::return#1 ← (dword) ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  (dword) ultoa_append::return#4 ← phi( ultoa_append::@3/(dword) ultoa_append::return#1 )
  (dword) ultoa_append::return#2 ← (dword) ultoa_append::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 print
  (byte) gotoxy::x#5 ← phi( cscroll::@2/(byte) gotoxy::x#1 print/(byte) gotoxy::x#2 )
  (byte) gotoxy::y#3 ← phi( cscroll::@2/(byte) gotoxy::y#1 print/(byte) gotoxy::y#2 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#5 ← phi( gotoxy/(byte) gotoxy::y#3 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#3 ← phi( gotoxy/(byte) gotoxy::x#5 gotoxy::@3/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#5 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#4 ← phi( gotoxy::@1/(byte) gotoxy::y#5 gotoxy::@4/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#4 ← phi( gotoxy::@1/(byte) gotoxy::x#3 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#4
  (byte) conio_cursor_y ← (byte) gotoxy::y#4
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#4
  (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
  (number~) gotoxy::$5 ← (number~) gotoxy::$4 + (byte) gotoxy::x#4
  (word) gotoxy::offset#0 ← (number~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#3 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#4 ← phi( cputc/(byte) cputc::c#3 )
  *((byte*) conio_cursor_text) ← (byte) cputc::c#4
  (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
  (word) cputln::ln_offset#0 ← (number~) cputln::$0
  (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  (byte*) conio_cursor_text ← (byte*~) cputln::$1
  (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  (byte*) conio_cursor_color ← (byte*~) cputln::$2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$9) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
  (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
  (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@10 main::@12 main::@2 main::@8 print::@11 print::@12 print::@14 print::@5 print::@9 printf_number_buffer::@5 printf_string::@2
  (to_nomodify byte*) cputs::s#14 ← phi( main::@1/(to_nomodify byte*) cputs::s#3 main::@10/(to_nomodify byte*) cputs::s#6 main::@12/(to_nomodify byte*) cputs::s#7 main::@2/(to_nomodify byte*) cputs::s#4 main::@8/(to_nomodify byte*) cputs::s#5 print::@11/(to_nomodify byte*) cputs::s#12 print::@12/(to_nomodify byte*) cputs::s#8 print::@14/(to_nomodify byte*) cputs::s#9 print::@5/(to_nomodify byte*) cputs::s#10 print::@9/(to_nomodify byte*) cputs::s#11 printf_number_buffer::@5/(to_nomodify byte*) cputs::s#1 printf_string::@2/(to_nomodify byte*) cputs::s#2 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#13 ← phi( cputs/(to_nomodify byte*) cputs::s#14 cputs::@3/(to_nomodify byte*) cputs::s#15 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#16 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#15 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#16 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8 printf_string::@5 printf_string::@6
  (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 printf_string::@5/(byte) printf_padding::pad#3 printf_string::@6/(byte) printf_padding::pad#4 )
  (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 printf_string::@5/(byte) printf_padding::length#3 printf_string::@6/(byte) printf_padding::length#4 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#6 ← phi( printf_padding/(byte) printf_padding::pad#7 printf_padding::@3/(byte) printf_padding::pad#8 )
  (byte) printf_padding::length#5 ← phi( printf_padding/(byte) printf_padding::length#6 printf_padding::@3/(byte) printf_padding::length#7 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#5
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#8 ← phi( printf_padding::@1/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#5 ← phi( printf_padding::@1/(byte) printf_padding::pad#6 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#8 ← phi( printf_padding::@2/(byte) printf_padding::pad#5 )
  (byte) printf_padding::length#7 ← phi( printf_padding::@2/(byte) printf_padding::length#8 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@9 print::@13
  (byte) printf_ulong::format_upper_case#6 ← phi( main::@9/(byte) printf_ulong::format_upper_case#0 print::@13/(byte) printf_ulong::format_upper_case#1 )
  (byte) printf_ulong::format_zero_padding#6 ← phi( main::@9/(byte) printf_ulong::format_zero_padding#0 print::@13/(byte) printf_ulong::format_zero_padding#1 )
  (byte) printf_ulong::format_justify_left#6 ← phi( main::@9/(byte) printf_ulong::format_justify_left#0 print::@13/(byte) printf_ulong::format_justify_left#1 )
  (byte) printf_ulong::format_min_length#6 ← phi( main::@9/(byte) printf_ulong::format_min_length#0 print::@13/(byte) printf_ulong::format_min_length#1 )
  (byte) printf_ulong::format_radix#6 ← phi( main::@9/(byte) printf_ulong::format_radix#0 print::@13/(byte) printf_ulong::format_radix#1 )
  (dword) printf_ulong::uvalue#5 ← phi( main::@9/(dword) printf_ulong::uvalue#0 print::@13/(dword) printf_ulong::uvalue#1 )
  (byte) printf_ulong::format_sign_always#2 ← phi( main::@9/(byte) printf_ulong::format_sign_always#0 print::@13/(byte) printf_ulong::format_sign_always#1 )
  (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#2
  if((bool~) printf_ulong::$5) goto printf_ulong::@1
  to:printf_ulong::@2
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#4 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#6 )
  (byte) printf_ulong::format_zero_padding#4 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#6 )
  (byte) printf_ulong::format_sign_always#5 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#2 )
  (byte) printf_ulong::format_justify_left#4 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#6 )
  (byte) printf_ulong::format_min_length#4 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#6 )
  (byte) printf_ulong::format_radix#4 ← phi( printf_ulong/(byte) printf_ulong::format_radix#6 )
  (dword) printf_ulong::uvalue#3 ← phi( printf_ulong/(dword) printf_ulong::uvalue#5 )
  (byte~) printf_ulong::$1 ← (byte) '+'
  to:printf_ulong::@3
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#5 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#6 )
  (byte) printf_ulong::format_zero_padding#5 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#6 )
  (byte) printf_ulong::format_sign_always#6 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#2 )
  (byte) printf_ulong::format_justify_left#5 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#6 )
  (byte) printf_ulong::format_min_length#5 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#6 )
  (byte) printf_ulong::format_radix#5 ← phi( printf_ulong/(byte) printf_ulong::format_radix#6 )
  (dword) printf_ulong::uvalue#4 ← phi( printf_ulong/(dword) printf_ulong::uvalue#5 )
  (number~) printf_ulong::$0 ← (number) 0
  to:printf_ulong::@3
printf_ulong::@3: scope:[printf_ulong]  from printf_ulong::@1 printf_ulong::@2
  (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_ulong::$2
  (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  (byte*) ultoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) ultoa::radix#0 ← (byte) printf_ulong::format_radix#2
  call ultoa 
  to:printf_ulong::@4
printf_ulong::@4: scope:[printf_ulong]  from printf_ulong::@3
  (byte) printf_ulong::format_radix#3 ← phi( printf_ulong::@3/(byte) printf_ulong::format_radix#2 )
  (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_upper_case#3 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_zero_padding#3 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@3/(byte) printf_ulong::format_sign_always#4 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_justify_left#3 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_ulong::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_ulong::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_ulong::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_ulong::format_upper_case#2
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#3
  call printf_number_buffer 
  to:printf_ulong::@5
printf_ulong::@5: scope:[printf_ulong]  from printf_ulong::@4
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@5
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  (byte) printf_uint::format_upper_case#5 ← phi( main::@3/(byte) printf_uint::format_upper_case#0 )
  (byte) printf_uint::format_zero_padding#5 ← phi( main::@3/(byte) printf_uint::format_zero_padding#0 )
  (byte) printf_uint::format_justify_left#5 ← phi( main::@3/(byte) printf_uint::format_justify_left#0 )
  (byte) printf_uint::format_min_length#5 ← phi( main::@3/(byte) printf_uint::format_min_length#0 )
  (byte) printf_uint::format_radix#5 ← phi( main::@3/(byte) printf_uint::format_radix#0 )
  (word) printf_uint::uvalue#4 ← phi( main::@3/(word) printf_uint::uvalue#0 )
  (byte) printf_uint::format_sign_always#1 ← phi( main::@3/(byte) printf_uint::format_sign_always#0 )
  (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
  if((bool~) printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#3 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#3 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#4 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#3 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#3 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#3 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#2 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (byte~) printf_uint::$1 ← (byte) '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  (byte) printf_uint::format_upper_case#4 ← phi( printf_uint/(byte) printf_uint::format_upper_case#5 )
  (byte) printf_uint::format_zero_padding#4 ← phi( printf_uint/(byte) printf_uint::format_zero_padding#5 )
  (byte) printf_uint::format_sign_always#5 ← phi( printf_uint/(byte) printf_uint::format_sign_always#1 )
  (byte) printf_uint::format_justify_left#4 ← phi( printf_uint/(byte) printf_uint::format_justify_left#5 )
  (byte) printf_uint::format_min_length#4 ← phi( printf_uint/(byte) printf_uint::format_min_length#5 )
  (byte) printf_uint::format_radix#4 ← phi( printf_uint/(byte) printf_uint::format_radix#5 )
  (word) printf_uint::uvalue#3 ← phi( printf_uint/(word) printf_uint::uvalue#4 )
  (number~) printf_uint::$0 ← (number) 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uint::$2
  (word) utoa::value#1 ← (word) printf_uint::uvalue#1
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  (byte) printf_uint::format_radix#2 ← phi( printf_uint::@3/(byte) printf_uint::format_radix#1 )
  (byte) printf_uint::format_upper_case#1 ← phi( printf_uint::@3/(byte) printf_uint::format_upper_case#2 )
  (byte) printf_uint::format_zero_padding#1 ← phi( printf_uint::@3/(byte) printf_uint::format_zero_padding#2 )
  (byte) printf_uint::format_sign_always#2 ← phi( printf_uint::@3/(byte) printf_uint::format_sign_always#3 )
  (byte) printf_uint::format_justify_left#1 ← phi( printf_uint::@3/(byte) printf_uint::format_justify_left#2 )
  (byte) printf_uint::format_min_length#1 ← phi( printf_uint::@3/(byte) printf_uint::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#1 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#1 ← (byte) printf_uint::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#1 ← (byte) printf_uint::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_uint::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_uint::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#1 ← (byte) printf_uint::format_upper_case#1
  (byte) printf_number_buffer::format_radix#1 ← (byte) printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@17 print::@2
  (byte) printf_uchar::format_upper_case#6 ← phi( print::@17/(byte) printf_uchar::format_upper_case#1 print::@2/(byte) printf_uchar::format_upper_case#0 )
  (byte) printf_uchar::format_zero_padding#6 ← phi( print::@17/(byte) printf_uchar::format_zero_padding#1 print::@2/(byte) printf_uchar::format_zero_padding#0 )
  (byte) printf_uchar::format_justify_left#6 ← phi( print::@17/(byte) printf_uchar::format_justify_left#1 print::@2/(byte) printf_uchar::format_justify_left#0 )
  (byte) printf_uchar::format_min_length#6 ← phi( print::@17/(byte) printf_uchar::format_min_length#1 print::@2/(byte) printf_uchar::format_min_length#0 )
  (byte) printf_uchar::format_radix#6 ← phi( print::@17/(byte) printf_uchar::format_radix#1 print::@2/(byte) printf_uchar::format_radix#0 )
  (byte) printf_uchar::uvalue#5 ← phi( print::@17/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  (byte) printf_uchar::format_sign_always#2 ← phi( print::@17/(byte) printf_uchar::format_sign_always#1 print::@2/(byte) printf_uchar::format_sign_always#0 )
  (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
  if((bool~) printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#4 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#4 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#5 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#4 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#4 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#4 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#3 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (byte~) printf_uchar::$1 ← (byte) '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#5 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#5 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#6 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#5 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#5 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#5 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#4 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (number~) printf_uchar::$0 ← (number) 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uchar::$2
  (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_uchar::format_radix#2
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  (byte) printf_uchar::format_radix#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_radix#2 )
  (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_upper_case#3 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_zero_padding#3 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_sign_always#4 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_justify_left#3 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#2 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#2 ← (byte) printf_uchar::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#2 ← (byte) printf_uchar::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#2 ← (byte) printf_uchar::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#2 ← (byte) printf_uchar::format_upper_case#2
  (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#3
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4 printf_uint::@4 printf_ulong::@4
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_upper_case#2 printf_uint::@4/(byte) printf_number_buffer::format_upper_case#1 printf_ulong::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_uchar::@4/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@4/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_uchar::@4/(byte*) printf_number_buffer::buffer_digits#2 printf_uint::@4/(byte*) printf_number_buffer::buffer_digits#1 printf_ulong::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_zero_padding#2 printf_uint::@4/(byte) printf_number_buffer::format_zero_padding#1 printf_ulong::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_justify_left#2 printf_uint::@4/(byte) printf_number_buffer::format_justify_left#1 printf_ulong::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_min_length#2 printf_uint::@4/(byte) printf_number_buffer::format_min_length#1 printf_ulong::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#11 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#7 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#5 )
  (byte) printf_number_buffer::format_min_length#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#9 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#3
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#20 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#3 )
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#18 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#18 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#7 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#6 )
  (word) strlen::return#5 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#5
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#21 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#17 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#13 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#10 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#6 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#4
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#21 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#20 )
  (byte) printf_number_buffer::format_upper_case#17 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::buffer_sign#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#3 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#9 )
  (byte) printf_number_buffer::format_min_length#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#5 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#13 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#10 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#7 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#6 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#10 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#14 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#8 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#22 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#3 )
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#9 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte) printf_number_buffer::buffer_sign#12 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#7 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#22 )
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#15 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#12 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#17 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#11 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#6 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#9 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#4 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#21 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#7 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#4 )
  (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#5
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#21 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#11 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#15 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#14 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#20 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#22 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#19 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#22 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#8 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#11 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#16 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_number_buffer::buffer_digits#4
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#8 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#11 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#4 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_zero_padding#21 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#5
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#16 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#21 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#5 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@11
  (byte*) printf_string::str#3 ← phi( main::@11/(byte*) printf_string::str#0 )
  (byte) printf_string::format_justify_left#3 ← phi( main::@11/(byte) printf_string::format_justify_left#0 )
  (byte) printf_string::format_min_length#1 ← phi( main::@11/(byte) printf_string::format_min_length#0 )
  (signed byte) printf_string::padding#0 ← (signed byte) 0
  (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
  (bool~) printf_string::$0 ← ! (bool~) printf_string::$14
  if((bool~) printf_string::$0) goto printf_string::@1
  to:printf_string::@3
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@4 printf_string::@7
  (byte*) printf_string::str#4 ← phi( printf_string/(byte*) printf_string::str#3 printf_string::@4/(byte*) printf_string::str#6 printf_string::@7/(byte*) printf_string::str#7 )
  (signed byte) printf_string::padding#3 ← phi( printf_string/(signed byte) printf_string::padding#0 printf_string::@4/(signed byte) printf_string::padding#2 printf_string::@7/(signed byte) printf_string::padding#1 )
  (byte) printf_string::format_justify_left#1 ← phi( printf_string/(byte) printf_string::format_justify_left#3 printf_string::@4/(byte) printf_string::format_justify_left#4 printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
  (bool~) printf_string::$1 ← ! (bool~) printf_string::$15
  (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
  (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
  if((bool~) printf_string::$3) goto printf_string::@2
  to:printf_string::@5
printf_string::@3: scope:[printf_string]  from printf_string
  (byte) printf_string::format_justify_left#7 ← phi( printf_string/(byte) printf_string::format_justify_left#3 )
  (byte) printf_string::format_min_length#3 ← phi( printf_string/(byte) printf_string::format_min_length#1 )
  (byte*) printf_string::str#1 ← phi( printf_string/(byte*) printf_string::str#3 )
  (byte*) strlen::str#2 ← (byte*) printf_string::str#1
  call strlen 
  (word) strlen::return#3 ← (word) strlen::return#1
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@3
  (byte*) printf_string::str#7 ← phi( printf_string::@3/(byte*) printf_string::str#1 )
  (byte) printf_string::format_justify_left#5 ← phi( printf_string::@3/(byte) printf_string::format_justify_left#7 )
  (byte) printf_string::format_min_length#2 ← phi( printf_string::@3/(byte) printf_string::format_min_length#3 )
  (word) strlen::return#6 ← phi( printf_string::@3/(word) strlen::return#3 )
  (word~) printf_string::$9 ← (word) strlen::return#6
  (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$9
  (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#2
  (signed byte~) printf_string::$10 ← (signed byte~) printf_string::$13 - (signed byte) printf_string::len#0
  (signed byte) printf_string::padding#1 ← (signed byte~) printf_string::$10
  (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
  (bool~) printf_string::$12 ← ! (bool~) printf_string::$11
  if((bool~) printf_string::$12) goto printf_string::@1
  to:printf_string::@4
printf_string::@4: scope:[printf_string]  from printf_string::@7
  (byte*) printf_string::str#6 ← phi( printf_string::@7/(byte*) printf_string::str#7 )
  (byte) printf_string::format_justify_left#4 ← phi( printf_string::@7/(byte) printf_string::format_justify_left#5 )
  (signed byte) printf_string::padding#2 ← (number) 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@9
  (signed byte) printf_string::padding#7 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 printf_string::@9/(signed byte) printf_string::padding#8 )
  (byte) printf_string::format_justify_left#6 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 printf_string::@9/(byte) printf_string::format_justify_left#8 )
  (byte*) printf_string::str#2 ← phi( printf_string::@1/(byte*) printf_string::str#4 printf_string::@9/(byte*) printf_string::str#5 )
  (to_nomodify byte*) cputs::s#2 ← (byte*) printf_string::str#2
  call cputs 
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@2
  (signed byte) printf_string::padding#4 ← phi( printf_string::@2/(signed byte) printf_string::padding#7 )
  (byte) printf_string::format_justify_left#2 ← phi( printf_string::@2/(byte) printf_string::format_justify_left#6 )
  (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#2 && (signed byte) printf_string::padding#4
  (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
  if((bool~) printf_string::$7) goto printf_string::@return
  to:printf_string::@6
printf_string::@5: scope:[printf_string]  from printf_string::@1
  (byte) printf_string::format_justify_left#9 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#1 )
  (byte*) printf_string::str#8 ← phi( printf_string::@1/(byte*) printf_string::str#4 )
  (signed byte) printf_string::padding#5 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 )
  (byte) printf_padding::pad#3 ← (byte) ' '
  (byte) printf_padding::length#3 ← (byte)(signed byte) printf_string::padding#5
  call printf_padding 
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@5
  (signed byte) printf_string::padding#8 ← phi( printf_string::@5/(signed byte) printf_string::padding#5 )
  (byte) printf_string::format_justify_left#8 ← phi( printf_string::@5/(byte) printf_string::format_justify_left#9 )
  (byte*) printf_string::str#5 ← phi( printf_string::@5/(byte*) printf_string::str#8 )
  to:printf_string::@2
printf_string::@6: scope:[printf_string]  from printf_string::@8
  (signed byte) printf_string::padding#6 ← phi( printf_string::@8/(signed byte) printf_string::padding#4 )
  (byte) printf_padding::pad#4 ← (byte) ' '
  (byte) printf_padding::length#4 ← (byte)(signed byte) printf_string::padding#6
  call printf_padding 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@6
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@8
  return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  (byte) tod_init::tod_TENTHS#1 ← phi( main::@4/(byte) tod_init::tod_TENTHS#0 )
  (byte) tod_init::tod_SEC#1 ← phi( main::@4/(byte) tod_init::tod_SEC#0 )
  (byte) tod_init::tod_MIN#1 ← phi( main::@4/(byte) tod_init::tod_MIN#0 )
  (byte) tod_init::tod_HOURS#1 ← phi( main::@4/(byte) tod_init::tod_HOURS#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@6
  (byte) tod_read::hours#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  (byte) tod_read::mins#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  (byte) tod_read::secs#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  (byte) tod_read::tenths#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  (byte) tod_read::tod_TENTHS#0 ← (byte) tod_read::tenths#0
  (byte) tod_read::tod_SEC#0 ← (byte) tod_read::secs#0
  (byte) tod_read::tod_MIN#0 ← (byte) tod_read::mins#0
  (byte) tod_read::tod_HOURS#0 ← (byte) tod_read::hours#0
  (byte) tod_read::return_TENTHS#0 ← (byte) tod_read::tod_TENTHS#0
  (byte) tod_read::return_SEC#0 ← (byte) tod_read::tod_SEC#0
  (byte) tod_read::return_MIN#0 ← (byte) tod_read::tod_MIN#0
  (byte) tod_read::return_HOURS#0 ← (byte) tod_read::tod_HOURS#0
  (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  (byte) tod_read::return_HOURS#3 ← phi( tod_read/(byte) tod_read::return_HOURS#0 )
  (byte) tod_read::return_MIN#3 ← phi( tod_read/(byte) tod_read::return_MIN#0 )
  (byte) tod_read::return_SEC#3 ← phi( tod_read/(byte) tod_read::return_SEC#0 )
  (byte) tod_read::return_TENTHS#3 ← phi( tod_read/(byte) tod_read::return_TENTHS#0 )
  (byte) tod_read::return_TENTHS#1 ← (byte) tod_read::return_TENTHS#3
  (byte) tod_read::return_SEC#1 ← (byte) tod_read::return_SEC#3
  (byte) tod_read::return_MIN#1 ← (byte) tod_read::return_MIN#3
  (byte) tod_read::return_HOURS#1 ← (byte) tod_read::return_HOURS#3
  (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1}
  return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  (byte) tod_str::tod_TENTHS#1 ← phi( main::@7/(byte) tod_str::tod_TENTHS#0 )
  (byte) tod_str::tod_SEC#1 ← phi( main::@7/(byte) tod_str::tod_SEC#0 )
  (byte) tod_str::tod_MIN#1 ← phi( main::@7/(byte) tod_str::tod_MIN#0 )
  (byte) tod_str::tod_HOURS#1 ← phi( main::@7/(byte) tod_str::tod_HOURS#0 )
  (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
  (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
  (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
  (number~) tod_str::$3 ← (byte) '0' + (number~) tod_str::$2
  *((const byte*) tod_buffer + (number) 1) ← (number~) tod_str::$3
  (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
  (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
  (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
  (number~) tod_str::$7 ← (byte) '0' + (number~) tod_str::$6
  *((const byte*) tod_buffer + (number) 4) ← (number~) tod_str::$7
  (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
  (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
  (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
  (number~) tod_str::$11 ← (byte) '0' + (number~) tod_str::$10
  *((const byte*) tod_buffer + (number) 7) ← (number~) tod_str::$11
  (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
  (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
  (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
  (number~) tod_str::$15 ← (byte) '0' + (number~) tod_str::$14
  *((const byte*) tod_buffer + (number) $a) ← (number~) tod_str::$15
  (byte*) tod_str::return#0 ← (const byte*) tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  (byte*) tod_str::return#3 ← phi( tod_str/(byte*) tod_str::return#0 )
  (byte*) tod_str::return#1 ← (byte*) tod_str::return#3
  return 
  to:@return
@2: scope:[]  from @1
  (dword) count#0 ← (dword) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  (dword) count#37 ← phi( @3/(dword) count#20 )
  call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  (dword) count#36 ← phi( main/(dword) count#37 )
  (to_nomodify byte*) cputs::s#3 ← (const byte*) main::s
  call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (dword) count#34 ← phi( main::@1/(dword) count#36 )
  (to_nomodify byte*) cputs::s#4 ← (const byte*) main::s1
  call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (dword) count#31 ← phi( main::@2/(dword) count#34 )
  (word) printf_uint::uvalue#0 ← (number) 8
  (byte) printf_uint::format_min_length#0 ← (byte) 0
  (byte) printf_uint::format_justify_left#0 ← (byte) 0
  (byte) printf_uint::format_sign_always#0 ← (byte) 0
  (byte) printf_uint::format_zero_padding#0 ← (byte) 0
  (byte) printf_uint::format_upper_case#0 ← (byte) 0
  (byte) printf_uint::format_radix#0 ← (const byte) DECIMAL
  call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (dword) count#21 ← phi( main::@3/(dword) count#31 )
  (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (dword) count#13 ← phi( main::@4/(dword) count#21 )
  call queens 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (dword) count#6 ← phi( main::@5/(dword) count#4 )
  (dword) count#1 ← (dword) count#6
  call tod_read 
  (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#1
  (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#1
  (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#1
  (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#1
  to:main::@7
main::@7: scope:[main]  from main::@6
  (dword) count#22 ← phi( main::@6/(dword) count#1 )
  (byte) tod_read::return_HOURS#4 ← phi( main::@6/(byte) tod_read::return_HOURS#2 )
  (byte) tod_read::return_MIN#4 ← phi( main::@6/(byte) tod_read::return_MIN#2 )
  (byte) tod_read::return_SEC#4 ← phi( main::@6/(byte) tod_read::return_SEC#2 )
  (byte) tod_read::return_TENTHS#4 ← phi( main::@6/(byte) tod_read::return_TENTHS#2 )
  (byte~) main::$5_TENTHS ← (byte) tod_read::return_TENTHS#4
  (byte~) main::$5_SEC ← (byte) tod_read::return_SEC#4
  (byte~) main::$5_MIN ← (byte) tod_read::return_MIN#4
  (byte~) main::$5_HOURS ← (byte) tod_read::return_HOURS#4
  (byte) tod_str::tod_TENTHS#0 ← (byte~) main::$5_TENTHS
  (byte) tod_str::tod_SEC#0 ← (byte~) main::$5_SEC
  (byte) tod_str::tod_MIN#0 ← (byte~) main::$5_MIN
  (byte) tod_str::tod_HOURS#0 ← (byte~) main::$5_HOURS
  call tod_str 
  (byte*) tod_str::return#2 ← (byte*) tod_str::return#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  (dword) count#14 ← phi( main::@7/(dword) count#22 )
  (byte*) tod_str::return#4 ← phi( main::@7/(byte*) tod_str::return#2 )
  (byte*~) main::$6 ← (byte*) tod_str::return#4
  (to_nomodify byte*) cputs::s#5 ← (const byte*) main::s2
  call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (dword) count#7 ← phi( main::@8/(dword) count#14 )
  (dword) printf_ulong::uvalue#0 ← (dword) count#7
  (byte) printf_ulong::format_min_length#0 ← (byte) 0
  (byte) printf_ulong::format_justify_left#0 ← (byte) 0
  (byte) printf_ulong::format_sign_always#0 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#0 ← (byte) 0
  (byte) printf_ulong::format_upper_case#0 ← (byte) 0
  (byte) printf_ulong::format_radix#0 ← (const byte) DECIMAL
  call printf_ulong 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (dword) count#35 ← phi( main::@9/(dword) count#7 )
  (to_nomodify byte*) cputs::s#6 ← (const byte*) main::s3
  call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (dword) count#32 ← phi( main::@10/(dword) count#35 )
  (byte*) printf_string::str#0 ← (byte*~) main::$6
  (byte) printf_string::format_min_length#0 ← (byte) 0
  (byte) printf_string::format_justify_left#0 ← (byte) 0
  call printf_string 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (dword) count#23 ← phi( main::@11/(dword) count#32 )
  (to_nomodify byte*) cputs::s#7 ← (const byte*) main::s4
  call cputs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (dword) count#15 ← phi( main::@12/(dword) count#23 )
  to:main::@return
main::@return: scope:[main]  from main::@13
  (dword) count#8 ← phi( main::@13/(dword) count#15 )
  (dword) count#2 ← (dword) count#8
  return 
  to:@return

(void()) queens()
queens: scope:[queens]  from main::@5
  (dword) count#24 ← phi( main::@5/(dword) count#13 )
  (byte) queens::row#0 ← (byte) 1
  to:queens::@1
queens::@1: scope:[queens]  from queens queens::@10 queens::@7 queens::@8 queens::@9
  (dword) count#17 ← phi( queens/(dword) count#24 queens::@10/(dword) count#25 queens::@7/(dword) count#26 queens::@8/(dword) count#27 queens::@9/(dword) count#28 )
  (byte) queens::row#9 ← phi( queens/(byte) queens::row#0 queens::@10/(byte) queens::row#11 queens::@7/(byte) queens::row#1 queens::@8/(byte) queens::row#2 queens::@9/(byte) queens::row#10 )
  (bool~) queens::$7 ← (number) 0 != (number) 1
  if((bool~) queens::$7) goto queens::@2
  to:queens::@return
queens::@2: scope:[queens]  from queens::@1
  (dword) count#29 ← phi( queens::@1/(dword) count#17 )
  (byte) queens::row#3 ← phi( queens::@1/(byte) queens::row#9 )
  *((const byte*) board + (byte) queens::row#3) ← ++ *((const byte*) board + (byte) queens::row#3)
  (bool~) queens::$1 ← *((const byte*) board + (byte) queens::row#3) == (number) 8+(number) 1
  if((bool~) queens::$1) goto queens::@3
  to:queens::@5
queens::@3: scope:[queens]  from queens::@2
  (dword) count#18 ← phi( queens::@2/(dword) count#29 )
  (byte) queens::row#4 ← phi( queens::@2/(byte) queens::row#3 )
  *((const byte*) board + (byte) queens::row#4) ← (number) 0
  (bool~) queens::$6 ← (byte) queens::row#4 == (number) 1
  if((bool~) queens::$6) goto queens::@return
  to:queens::@8
queens::@5: scope:[queens]  from queens::@2
  (dword) count#33 ← phi( queens::@2/(dword) count#29 )
  (byte) queens::row#5 ← phi( queens::@2/(byte) queens::row#3 )
  (byte) legal::row#0 ← (byte) queens::row#5
  (byte) legal::column#0 ← *((const byte*) board + (byte) queens::row#5)
  call legal 
  (byte) legal::return#0 ← (byte) legal::return#4
  to:queens::@9
queens::@9: scope:[queens]  from queens::@5
  (dword) count#28 ← phi( queens::@5/(dword) count#33 )
  (byte) queens::row#10 ← phi( queens::@5/(byte) queens::row#5 )
  (byte) legal::return#5 ← phi( queens::@5/(byte) legal::return#0 )
  (byte~) queens::$2 ← (byte) legal::return#5
  (bool~) queens::$8 ← (number) 0 != (byte~) queens::$2
  (bool~) queens::$3 ← ! (bool~) queens::$8
  if((bool~) queens::$3) goto queens::@1
  to:queens::@6
queens::@6: scope:[queens]  from queens::@9
  (dword) count#16 ← phi( queens::@9/(dword) count#28 )
  (byte) queens::row#6 ← phi( queens::@9/(byte) queens::row#10 )
  (bool~) queens::$4 ← (byte) queens::row#6 == (number) 8
  if((bool~) queens::$4) goto queens::@4
  to:queens::@7
queens::@4: scope:[queens]  from queens::@6
  (byte) queens::row#12 ← phi( queens::@6/(byte) queens::row#6 )
  (dword) count#9 ← phi( queens::@6/(dword) count#16 )
  (dword) count#3 ← ++ (dword) count#9
  call print 
  to:queens::@10
queens::@10: scope:[queens]  from queens::@4
  (dword) count#25 ← phi( queens::@4/(dword) count#3 )
  (byte) queens::row#11 ← phi( queens::@4/(byte) queens::row#12 )
  to:queens::@1
queens::@7: scope:[queens]  from queens::@6
  (dword) count#26 ← phi( queens::@6/(dword) count#16 )
  (byte) queens::row#7 ← phi( queens::@6/(byte) queens::row#6 )
  (byte) queens::row#1 ← ++ (byte) queens::row#7
  to:queens::@1
queens::@8: scope:[queens]  from queens::@3
  (dword) count#27 ← phi( queens::@3/(dword) count#18 )
  (byte) queens::row#8 ← phi( queens::@3/(byte) queens::row#4 )
  (byte) queens::row#2 ← -- (byte) queens::row#8
  to:queens::@1
queens::@return: scope:[queens]  from queens::@1 queens::@3
  (dword) count#10 ← phi( queens::@1/(dword) count#17 queens::@3/(dword) count#18 )
  (dword) count#4 ← (dword) count#10
  return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queens::@5
  (byte) legal::column#4 ← phi( queens::@5/(byte) legal::column#0 )
  (byte) legal::row#3 ← phi( queens::@5/(byte) legal::row#0 )
  (byte) legal::i#0 ← (byte) 1
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@5
  (byte) legal::column#3 ← phi( legal/(byte) legal::column#4 legal::@5/(byte) legal::column#5 )
  (byte) legal::i#2 ← phi( legal/(byte) legal::i#0 legal::@5/(byte) legal::i#1 )
  (byte) legal::row#1 ← phi( legal/(byte) legal::row#3 legal::@5/(byte) legal::row#4 )
  (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
  (bool~) legal::$1 ← (byte) legal::i#2 <= (number~) legal::$0
  if((bool~) legal::$1) goto legal::@2
  to:legal::@3
legal::@2: scope:[legal]  from legal::@1
  (byte) legal::row#14 ← phi( legal::@1/(byte) legal::row#1 )
  (byte) legal::column#1 ← phi( legal::@1/(byte) legal::column#3 )
  (byte) legal::i#3 ← phi( legal::@1/(byte) legal::i#2 )
  (bool~) legal::$2 ← *((const byte*) board + (byte) legal::i#3) == (byte) legal::column#1
  if((bool~) legal::$2) goto legal::@4
  to:legal::@6
legal::@3: scope:[legal]  from legal::@1
  (byte) legal::return#1 ← (number) 1
  to:legal::@return
legal::@4: scope:[legal]  from legal::@2
  (byte) legal::return#2 ← (number) 0
  to:legal::@return
legal::@6: scope:[legal]  from legal::@2
  (byte) legal::row#11 ← phi( legal::@2/(byte) legal::row#14 )
  (byte) legal::column#2 ← phi( legal::@2/(byte) legal::column#1 )
  (byte) legal::i#4 ← phi( legal::@2/(byte) legal::i#3 )
  (byte) legal::diff1_a#0 ← *((const byte*) board + (byte) legal::i#4)
  (byte) legal::diff1_b#0 ← (byte) legal::column#2
  to:legal::diff1
legal::diff1: scope:[legal]  from legal::@6
  (byte) legal::column#15 ← phi( legal::@6/(byte) legal::column#2 )
  (byte) legal::row#9 ← phi( legal::@6/(byte) legal::row#11 )
  (byte) legal::i#12 ← phi( legal::@6/(byte) legal::i#4 )
  (byte) legal::diff1_b#1 ← phi( legal::@6/(byte) legal::diff1_b#0 )
  (byte) legal::diff1_a#1 ← phi( legal::@6/(byte) legal::diff1_a#0 )
  (bool~) legal::diff1_$0 ← (byte) legal::diff1_a#1 < (byte) legal::diff1_b#1
  if((bool~) legal::diff1_$0) goto legal::diff1_@1
  to:legal::diff1_@3
legal::diff1_@1: scope:[legal]  from legal::diff1
  (byte) legal::column#13 ← phi( legal::diff1/(byte) legal::column#15 )
  (byte) legal::row#6 ← phi( legal::diff1/(byte) legal::row#9 )
  (byte) legal::i#9 ← phi( legal::diff1/(byte) legal::i#12 )
  (byte) legal::diff1_a#2 ← phi( legal::diff1/(byte) legal::diff1_a#1 )
  (byte) legal::diff1_b#2 ← phi( legal::diff1/(byte) legal::diff1_b#1 )
  (byte~) legal::diff1_$2 ← (byte) legal::diff1_b#2 - (byte) legal::diff1_a#2
  (byte) legal::diff1_return#0 ← (byte~) legal::diff1_$2
  to:legal::diff1_@return
legal::diff1_@3: scope:[legal]  from legal::diff1
  (byte) legal::column#14 ← phi( legal::diff1/(byte) legal::column#15 )
  (byte) legal::row#7 ← phi( legal::diff1/(byte) legal::row#9 )
  (byte) legal::i#10 ← phi( legal::diff1/(byte) legal::i#12 )
  (byte) legal::diff1_b#3 ← phi( legal::diff1/(byte) legal::diff1_b#1 )
  (byte) legal::diff1_a#3 ← phi( legal::diff1/(byte) legal::diff1_a#1 )
  (byte~) legal::diff1_$1 ← (byte) legal::diff1_a#3 - (byte) legal::diff1_b#3
  (byte) legal::diff1_return#1 ← (byte~) legal::diff1_$1
  to:legal::diff1_@return
legal::diff1_@return: scope:[legal]  from legal::diff1_@1 legal::diff1_@3
  (byte) legal::column#12 ← phi( legal::diff1_@1/(byte) legal::column#13 legal::diff1_@3/(byte) legal::column#14 )
  (byte) legal::row#5 ← phi( legal::diff1_@1/(byte) legal::row#6 legal::diff1_@3/(byte) legal::row#7 )
  (byte) legal::i#7 ← phi( legal::diff1_@1/(byte) legal::i#9 legal::diff1_@3/(byte) legal::i#10 )
  (byte) legal::diff1_return#3 ← phi( legal::diff1_@1/(byte) legal::diff1_return#0 legal::diff1_@3/(byte) legal::diff1_return#1 )
  (byte) legal::diff1_return#2 ← (byte) legal::diff1_return#3
  to:legal::@8
legal::@8: scope:[legal]  from legal::diff1_@return
  (byte) legal::column#11 ← phi( legal::diff1_@return/(byte) legal::column#12 )
  (byte) legal::row#2 ← phi( legal::diff1_@return/(byte) legal::row#5 )
  (byte) legal::i#5 ← phi( legal::diff1_@return/(byte) legal::i#7 )
  (byte) legal::diff1_return#4 ← phi( legal::diff1_@return/(byte) legal::diff1_return#2 )
  (byte~) legal::$3 ← (byte) legal::diff1_return#4
  (byte) legal::diff2_a#0 ← (byte) legal::i#5
  (byte) legal::diff2_b#0 ← (byte) legal::row#2
  to:legal::diff2
legal::diff2: scope:[legal]  from legal::@8
  (byte) legal::column#10 ← phi( legal::@8/(byte) legal::column#11 )
  (byte) legal::row#15 ← phi( legal::@8/(byte) legal::row#2 )
  (byte) legal::i#15 ← phi( legal::@8/(byte) legal::i#5 )
  (byte) legal::diff2_b#1 ← phi( legal::@8/(byte) legal::diff2_b#0 )
  (byte) legal::diff2_a#1 ← phi( legal::@8/(byte) legal::diff2_a#0 )
  (bool~) legal::diff2_$0 ← (byte) legal::diff2_a#1 < (byte) legal::diff2_b#1
  if((bool~) legal::diff2_$0) goto legal::diff2_@1
  to:legal::diff2_@3
legal::diff2_@1: scope:[legal]  from legal::diff2
  (byte) legal::column#8 ← phi( legal::diff2/(byte) legal::column#10 )
  (byte) legal::row#12 ← phi( legal::diff2/(byte) legal::row#15 )
  (byte) legal::i#13 ← phi( legal::diff2/(byte) legal::i#15 )
  (byte) legal::diff2_a#2 ← phi( legal::diff2/(byte) legal::diff2_a#1 )
  (byte) legal::diff2_b#2 ← phi( legal::diff2/(byte) legal::diff2_b#1 )
  (byte~) legal::diff2_$2 ← (byte) legal::diff2_b#2 - (byte) legal::diff2_a#2
  (byte) legal::diff2_return#0 ← (byte~) legal::diff2_$2
  to:legal::diff2_@return
legal::diff2_@3: scope:[legal]  from legal::diff2
  (byte) legal::column#9 ← phi( legal::diff2/(byte) legal::column#10 )
  (byte) legal::row#13 ← phi( legal::diff2/(byte) legal::row#15 )
  (byte) legal::i#14 ← phi( legal::diff2/(byte) legal::i#15 )
  (byte) legal::diff2_b#3 ← phi( legal::diff2/(byte) legal::diff2_b#1 )
  (byte) legal::diff2_a#3 ← phi( legal::diff2/(byte) legal::diff2_a#1 )
  (byte~) legal::diff2_$1 ← (byte) legal::diff2_a#3 - (byte) legal::diff2_b#3
  (byte) legal::diff2_return#1 ← (byte~) legal::diff2_$1
  to:legal::diff2_@return
legal::diff2_@return: scope:[legal]  from legal::diff2_@1 legal::diff2_@3
  (byte) legal::column#7 ← phi( legal::diff2_@1/(byte) legal::column#8 legal::diff2_@3/(byte) legal::column#9 )
  (byte) legal::row#10 ← phi( legal::diff2_@1/(byte) legal::row#12 legal::diff2_@3/(byte) legal::row#13 )
  (byte) legal::i#11 ← phi( legal::diff2_@1/(byte) legal::i#13 legal::diff2_@3/(byte) legal::i#14 )
  (byte) legal::diff2_return#3 ← phi( legal::diff2_@1/(byte) legal::diff2_return#0 legal::diff2_@3/(byte) legal::diff2_return#1 )
  (byte) legal::diff2_return#2 ← (byte) legal::diff2_return#3
  to:legal::@9
legal::@9: scope:[legal]  from legal::diff2_@return
  (byte) legal::column#6 ← phi( legal::diff2_@return/(byte) legal::column#7 )
  (byte) legal::row#8 ← phi( legal::diff2_@return/(byte) legal::row#10 )
  (byte) legal::i#8 ← phi( legal::diff2_@return/(byte) legal::i#11 )
  (byte) legal::diff2_return#4 ← phi( legal::diff2_@return/(byte) legal::diff2_return#2 )
  (byte~) legal::$4 ← (byte) legal::diff2_return#4
  (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
  (bool~) legal::$6 ← ! (bool~) legal::$5
  if((bool~) legal::$6) goto legal::@5
  to:legal::@7
legal::@7: scope:[legal]  from legal::@9
  (byte) legal::return#3 ← (number) 0
  to:legal::@return
legal::@return: scope:[legal]  from legal::@3 legal::@4 legal::@7
  (byte) legal::return#6 ← phi( legal::@3/(byte) legal::return#1 legal::@4/(byte) legal::return#2 legal::@7/(byte) legal::return#3 )
  (byte) legal::return#4 ← (byte) legal::return#6
  return 
  to:@return
legal::@5: scope:[legal]  from legal::@9
  (byte) legal::column#5 ← phi( legal::@9/(byte) legal::column#6 )
  (byte) legal::row#4 ← phi( legal::@9/(byte) legal::row#8 )
  (byte) legal::i#6 ← phi( legal::@9/(byte) legal::i#8 )
  (byte) legal::i#1 ← ++ (byte) legal::i#6
  to:legal::@1

(void()) print()
print: scope:[print]  from queens::@4
  (dword) count#30 ← phi( queens::@4/(dword) count#3 )
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) 5
  call gotoxy 
  to:print::@12
print::@12: scope:[print]  from print
  (dword) count#19 ← phi( print/(dword) count#30 )
  (to_nomodify byte*) cputs::s#8 ← (const byte*) print::s
  call cputs 
  to:print::@13
print::@13: scope:[print]  from print::@12
  (dword) count#11 ← phi( print::@12/(dword) count#19 )
  (dword) printf_ulong::uvalue#1 ← (dword) count#11
  (byte) printf_ulong::format_min_length#1 ← (byte) 0
  (byte) printf_ulong::format_justify_left#1 ← (byte) 0
  (byte) printf_ulong::format_sign_always#1 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#1 ← (byte) 0
  (byte) printf_ulong::format_upper_case#1 ← (byte) 0
  (byte) printf_ulong::format_radix#1 ← (const byte) DECIMAL
  call printf_ulong 
  to:print::@14
print::@14: scope:[print]  from print::@13
  (to_nomodify byte*) cputs::s#9 ← (const byte*) print::s1
  call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@14
  (byte) print::i#0 ← (byte) 1
  to:print::@1
print::@1: scope:[print]  from print::@15 print::@16
  (byte) print::i#2 ← phi( print::@15/(byte) print::i#0 print::@16/(byte) print::i#1 )
  (bool~) print::$2 ← (byte) print::i#2 <= (number) 8
  if((bool~) print::$2) goto print::@2
  to:print::@3
print::@2: scope:[print]  from print::@1
  (byte) print::i#3 ← phi( print::@1/(byte) print::i#2 )
  (byte) printf_uchar::uvalue#0 ← (byte) print::i#3
  (byte) printf_uchar::format_min_length#0 ← (byte) 0
  (byte) printf_uchar::format_justify_left#0 ← (byte) 0
  (byte) printf_uchar::format_sign_always#0 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#0 ← (byte) 0
  (byte) printf_uchar::format_upper_case#0 ← (byte) 0
  (byte) printf_uchar::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@16
print::@16: scope:[print]  from print::@2
  (byte) print::i#4 ← phi( print::@2/(byte) print::i#3 )
  (byte) print::i#1 ← ++ (byte) print::i#4
  to:print::@1
print::@3: scope:[print]  from print::@1
  (byte) print::i1#0 ← (byte) 1
  to:print::@4
print::@4: scope:[print]  from print::@3 print::@8
  (byte) print::i1#2 ← phi( print::@3/(byte) print::i1#0 print::@8/(byte) print::i1#1 )
  (bool~) print::$4 ← (byte) print::i1#2 <= (number) 8
  if((bool~) print::$4) goto print::@5
  to:print::@return
print::@5: scope:[print]  from print::@4
  (byte) print::i1#6 ← phi( print::@4/(byte) print::i1#2 )
  (to_nomodify byte*) cputs::s#10 ← (const byte*) print::s2
  call cputs 
  to:print::@17
print::@17: scope:[print]  from print::@5
  (byte) print::i1#3 ← phi( print::@5/(byte) print::i1#6 )
  (byte) printf_uchar::uvalue#1 ← (byte) print::i1#3
  (byte) printf_uchar::format_min_length#1 ← (byte) 0
  (byte) printf_uchar::format_justify_left#1 ← (byte) 0
  (byte) printf_uchar::format_sign_always#1 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#1 ← (byte) 0
  (byte) printf_uchar::format_upper_case#1 ← (byte) 0
  (byte) printf_uchar::format_radix#1 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:print::@18
print::@18: scope:[print]  from print::@17
  (byte) print::i1#9 ← phi( print::@17/(byte) print::i1#3 )
  (byte) print::j#0 ← (byte) 1
  to:print::@6
print::@6: scope:[print]  from print::@10 print::@18
  (byte) print::i1#7 ← phi( print::@10/(byte) print::i1#8 print::@18/(byte) print::i1#9 )
  (byte) print::j#2 ← phi( print::@10/(byte) print::j#1 print::@18/(byte) print::j#0 )
  (bool~) print::$6 ← (byte) print::j#2 <= (number) 8
  if((bool~) print::$6) goto print::@7
  to:print::@8
print::@7: scope:[print]  from print::@6
  (byte) print::j#3 ← phi( print::@6/(byte) print::j#2 )
  (byte) print::i1#4 ← phi( print::@6/(byte) print::i1#7 )
  (bool~) print::$7 ← *((const byte*) board + (byte) print::i1#4) == (byte) print::j#3
  if((bool~) print::$7) goto print::@9
  to:print::@11
print::@8: scope:[print]  from print::@6
  (byte) print::i1#5 ← phi( print::@6/(byte) print::i1#7 )
  (byte) print::i1#1 ← ++ (byte) print::i1#5
  to:print::@4
print::@9: scope:[print]  from print::@7
  (byte) print::i1#12 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#7 ← phi( print::@7/(byte) print::j#3 )
  (to_nomodify byte*) cputs::s#11 ← (const byte*) print::s3
  call cputs 
  to:print::@19
print::@19: scope:[print]  from print::@9
  (byte) print::i1#10 ← phi( print::@9/(byte) print::i1#12 )
  (byte) print::j#5 ← phi( print::@9/(byte) print::j#7 )
  to:print::@10
print::@11: scope:[print]  from print::@7
  (byte) print::i1#13 ← phi( print::@7/(byte) print::i1#4 )
  (byte) print::j#8 ← phi( print::@7/(byte) print::j#3 )
  (to_nomodify byte*) cputs::s#12 ← (const byte*) print::s4
  call cputs 
  to:print::@20
print::@20: scope:[print]  from print::@11
  (byte) print::i1#11 ← phi( print::@11/(byte) print::i1#13 )
  (byte) print::j#6 ← phi( print::@11/(byte) print::j#8 )
  to:print::@10
print::@10: scope:[print]  from print::@19 print::@20
  (byte) print::i1#8 ← phi( print::@19/(byte) print::i1#10 print::@20/(byte) print::i1#11 )
  (byte) print::j#4 ← phi( print::@19/(byte) print::j#5 print::@20/(byte) print::j#6 )
  (byte) print::j#1 ← ++ (byte) print::j#4
  to:print::@6
print::@return: scope:[print]  from print::@4
  return 
  to:@return
@3: scope:[]  from @2
  (dword) count#20 ← phi( @2/(dword) count#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (dword) count#12 ← phi( @3/(dword) count#2 )
  (dword) count#5 ← (dword) count#12
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const dword*) RADIX_BINARY_VALUES_LONG[]  = { (dword) $80000000, (dword) $40000000, (dword) $20000000, (dword) $10000000, (dword) $8000000, (dword) $4000000, (dword) $2000000, (dword) $1000000, (dword) $800000, (dword) $400000, (dword) $200000, (dword) $100000, (dword) $80000, (dword) $40000, (dword) $20000, (dword) $10000, (dword) $8000, (dword) $4000, (dword) $2000, (dword) $1000, (dword) $800, (dword) $400, (dword) $200, (dword) $100, (dword) $80, (dword) $40, (dword) $20, (dword) $10, (dword) 8, (dword) 4, (dword) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const dword*) RADIX_HEXADECIMAL_VALUES_LONG[]  = { (dword) $10000000, (dword) $1000000, (dword) $100000, (dword) $10000, (dword) $1000, (dword) $100, (dword) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const dword*) RADIX_OCTAL_VALUES_LONG[]  = { (dword) $40000000, (dword) $8000000, (dword) $1000000, (dword) $200000, (dword) $40000, (dword) $8000, (dword) $1000, (dword) $200, (dword) $40, (dword) 8 }
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_WORD = (byte) 2
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte*) conio_cursor_color loadstore
(byte*) conio_cursor_text loadstore
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(dword) count
(dword) count#0
(dword) count#1
(dword) count#10
(dword) count#11
(dword) count#12
(dword) count#13
(dword) count#14
(dword) count#15
(dword) count#16
(dword) count#17
(dword) count#18
(dword) count#19
(dword) count#2
(dword) count#20
(dword) count#21
(dword) count#22
(dword) count#23
(dword) count#24
(dword) count#25
(dword) count#26
(dword) count#27
(dword) count#28
(dword) count#29
(dword) count#3
(dword) count#30
(dword) count#31
(dword) count#32
(dword) count#33
(dword) count#34
(dword) count#35
(dword) count#36
(dword) count#37
(dword) count#4
(dword) count#5
(dword) count#6
(dword) count#7
(dword) count#8
(dword) count#9
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(void()) cputln()
(number~) cputln::$0
(byte*~) cputln::$1
(byte*~) cputln::$2
(label) cputln::@1
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#10
(to_nomodify byte*) cputs::s#11
(to_nomodify byte*) cputs::s#12
(to_nomodify byte*) cputs::s#13
(to_nomodify byte*) cputs::s#14
(to_nomodify byte*) cputs::s#15
(to_nomodify byte*) cputs::s#16
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(to_nomodify byte*) cputs::s#6
(to_nomodify byte*) cputs::s#7
(to_nomodify byte*) cputs::s#8
(to_nomodify byte*) cputs::s#9
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(byte*~) cscroll::$7
(byte*~) cscroll::$8
(bool~) cscroll::$9
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(number~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(byte()) legal((byte) legal::row , (byte) legal::column)
(number~) legal::$0
(bool~) legal::$1
(bool~) legal::$2
(byte~) legal::$3
(byte~) legal::$4
(bool~) legal::$5
(bool~) legal::$6
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@6
(label) legal::@7
(label) legal::@8
(label) legal::@9
(label) legal::@return
(byte) legal::column
(byte) legal::column#0
(byte) legal::column#1
(byte) legal::column#10
(byte) legal::column#11
(byte) legal::column#12
(byte) legal::column#13
(byte) legal::column#14
(byte) legal::column#15
(byte) legal::column#2
(byte) legal::column#3
(byte) legal::column#4
(byte) legal::column#5
(byte) legal::column#6
(byte) legal::column#7
(byte) legal::column#8
(byte) legal::column#9
(label) legal::diff1
(bool~) legal::diff1_$0
(byte~) legal::diff1_$1
(byte~) legal::diff1_$2
(label) legal::diff1_@1
(label) legal::diff1_@3
(label) legal::diff1_@return
(byte) legal::diff1_a
(byte) legal::diff1_a#0
(byte) legal::diff1_a#1
(byte) legal::diff1_a#2
(byte) legal::diff1_a#3
(byte) legal::diff1_b
(byte) legal::diff1_b#0
(byte) legal::diff1_b#1
(byte) legal::diff1_b#2
(byte) legal::diff1_b#3
(byte) legal::diff1_return
(byte) legal::diff1_return#0
(byte) legal::diff1_return#1
(byte) legal::diff1_return#2
(byte) legal::diff1_return#3
(byte) legal::diff1_return#4
(label) legal::diff2
(bool~) legal::diff2_$0
(byte~) legal::diff2_$1
(byte~) legal::diff2_$2
(label) legal::diff2_@1
(label) legal::diff2_@3
(label) legal::diff2_@return
(byte) legal::diff2_a
(byte) legal::diff2_a#0
(byte) legal::diff2_a#1
(byte) legal::diff2_a#2
(byte) legal::diff2_a#3
(byte) legal::diff2_b
(byte) legal::diff2_b#0
(byte) legal::diff2_b#1
(byte) legal::diff2_b#2
(byte) legal::diff2_b#3
(byte) legal::diff2_return
(byte) legal::diff2_return#0
(byte) legal::diff2_return#1
(byte) legal::diff2_return#2
(byte) legal::diff2_return#3
(byte) legal::diff2_return#4
(byte) legal::i
(byte) legal::i#0
(byte) legal::i#1
(byte) legal::i#10
(byte) legal::i#11
(byte) legal::i#12
(byte) legal::i#13
(byte) legal::i#14
(byte) legal::i#15
(byte) legal::i#2
(byte) legal::i#3
(byte) legal::i#4
(byte) legal::i#5
(byte) legal::i#6
(byte) legal::i#7
(byte) legal::i#8
(byte) legal::i#9
(byte) legal::return
(byte) legal::return#0
(byte) legal::return#1
(byte) legal::return#2
(byte) legal::return#3
(byte) legal::return#4
(byte) legal::return#5
(byte) legal::return#6
(byte) legal::row
(byte) legal::row#0
(byte) legal::row#1
(byte) legal::row#10
(byte) legal::row#11
(byte) legal::row#12
(byte) legal::row#13
(byte) legal::row#14
(byte) legal::row#15
(byte) legal::row#2
(byte) legal::row#3
(byte) legal::row#4
(byte) legal::row#5
(byte) legal::row#6
(byte) legal::row#7
(byte) legal::row#8
(byte) legal::row#9
(void()) main()
(byte~) main::$5_HOURS
(byte~) main::$5_MIN
(byte~) main::$5_SEC
(byte~) main::$5_TENTHS
(byte*~) main::$6
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::s[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::s1[(byte) $13]  = (byte*) "
number of queens:"
(const byte*) main::s2[(byte) $e]  = (byte*) "

solutions: "
(const byte*) main::s3[(byte) 8]  = (byte*) " time: "
(const byte*) main::s4[(byte) 3]  = (byte*) ".
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(void()) print()
(bool~) print::$2
(bool~) print::$4
(bool~) print::$6
(bool~) print::$7
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@15
(label) print::@16
(label) print::@17
(label) print::@18
(label) print::@19
(label) print::@2
(label) print::@20
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#0
(byte) print::i#1
(byte) print::i#2
(byte) print::i#3
(byte) print::i#4
(byte) print::i1
(byte) print::i1#0
(byte) print::i1#1
(byte) print::i1#10
(byte) print::i1#11
(byte) print::i1#12
(byte) print::i1#13
(byte) print::i1#2
(byte) print::i1#3
(byte) print::i1#4
(byte) print::i1#5
(byte) print::i1#6
(byte) print::i1#7
(byte) print::i1#8
(byte) print::i1#9
(byte) print::j
(byte) print::j#0
(byte) print::j#1
(byte) print::j#2
(byte) print::j#3
(byte) print::j#4
(byte) print::j#5
(byte) print::j#6
(byte) print::j#7
(byte) print::j#8
(const byte*) print::s[(byte) 3]  = (byte*) "
#"
(const byte*) print::s1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::s2[(byte) 2]  = (byte*) "
"
(const byte*) print::s3[(byte) 2]  = (byte*) "Q"
(const byte*) print::s4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#20
(byte*) printf_number_buffer::buffer_digits#21
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#12
(byte) printf_number_buffer::buffer_sign#13
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#21
(byte) printf_number_buffer::format_justify_left#22
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_min_length#6
(byte) printf_number_buffer::format_min_length#7
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_radix#1
(byte) printf_number_buffer::format_radix#2
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_sign_always#1
(byte) printf_number_buffer::format_sign_always#2
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#17
(byte) printf_number_buffer::format_upper_case#18
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#21
(byte) printf_number_buffer::format_zero_padding#22
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::length#7
(byte) printf_padding::length#8
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(byte) printf_padding::pad#7
(byte) printf_padding::pad#8
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(bool~) printf_string::$0
(bool~) printf_string::$1
(signed byte~) printf_string::$10
(bool~) printf_string::$11
(bool~) printf_string::$12
(signed byte~) printf_string::$13
(bool~) printf_string::$14
(bool~) printf_string::$15
(bool~) printf_string::$2
(bool~) printf_string::$3
(bool~) printf_string::$6
(bool~) printf_string::$7
(word~) printf_string::$9
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_justify_left#1
(byte) printf_string::format_justify_left#2
(byte) printf_string::format_justify_left#3
(byte) printf_string::format_justify_left#4
(byte) printf_string::format_justify_left#5
(byte) printf_string::format_justify_left#6
(byte) printf_string::format_justify_left#7
(byte) printf_string::format_justify_left#8
(byte) printf_string::format_justify_left#9
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte) printf_string::format_min_length#1
(byte) printf_string::format_min_length#2
(byte) printf_string::format_min_length#3
(signed byte) printf_string::len
(signed byte) printf_string::len#0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#0
(signed byte) printf_string::padding#1
(signed byte) printf_string::padding#2
(signed byte) printf_string::padding#3
(signed byte) printf_string::padding#4
(signed byte) printf_string::padding#5
(signed byte) printf_string::padding#6
(signed byte) printf_string::padding#7
(signed byte) printf_string::padding#8
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) printf_string::str#2
(byte*) printf_string::str#3
(byte*) printf_string::str#4
(byte*) printf_string::str#5
(byte*) printf_string::str#6
(byte*) printf_string::str#7
(byte*) printf_string::str#8
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(number~) printf_uchar::$0
(byte~) printf_uchar::$1
(number~) printf_uchar::$2
(bool~) printf_uchar::$5
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@3
(label) printf_uchar::@4
(label) printf_uchar::@5
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_justify_left#0
(byte) printf_uchar::format_justify_left#1
(byte) printf_uchar::format_justify_left#2
(byte) printf_uchar::format_justify_left#3
(byte) printf_uchar::format_justify_left#4
(byte) printf_uchar::format_justify_left#5
(byte) printf_uchar::format_justify_left#6
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_min_length#0
(byte) printf_uchar::format_min_length#1
(byte) printf_uchar::format_min_length#2
(byte) printf_uchar::format_min_length#3
(byte) printf_uchar::format_min_length#4
(byte) printf_uchar::format_min_length#5
(byte) printf_uchar::format_min_length#6
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_radix#0
(byte) printf_uchar::format_radix#1
(byte) printf_uchar::format_radix#2
(byte) printf_uchar::format_radix#3
(byte) printf_uchar::format_radix#4
(byte) printf_uchar::format_radix#5
(byte) printf_uchar::format_radix#6
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_sign_always#0
(byte) printf_uchar::format_sign_always#1
(byte) printf_uchar::format_sign_always#2
(byte) printf_uchar::format_sign_always#3
(byte) printf_uchar::format_sign_always#4
(byte) printf_uchar::format_sign_always#5
(byte) printf_uchar::format_sign_always#6
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_upper_case#0
(byte) printf_uchar::format_upper_case#1
(byte) printf_uchar::format_upper_case#2
(byte) printf_uchar::format_upper_case#3
(byte) printf_uchar::format_upper_case#4
(byte) printf_uchar::format_upper_case#5
(byte) printf_uchar::format_upper_case#6
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::format_zero_padding#0
(byte) printf_uchar::format_zero_padding#1
(byte) printf_uchar::format_zero_padding#2
(byte) printf_uchar::format_zero_padding#3
(byte) printf_uchar::format_zero_padding#4
(byte) printf_uchar::format_zero_padding#5
(byte) printf_uchar::format_zero_padding#6
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0
(byte) printf_uchar::uvalue#1
(byte) printf_uchar::uvalue#2
(byte) printf_uchar::uvalue#3
(byte) printf_uchar::uvalue#4
(byte) printf_uchar::uvalue#5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(number~) printf_uint::$0
(byte~) printf_uint::$1
(number~) printf_uint::$2
(bool~) printf_uint::$5
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@3
(label) printf_uint::@4
(label) printf_uint::@5
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_justify_left#1
(byte) printf_uint::format_justify_left#2
(byte) printf_uint::format_justify_left#3
(byte) printf_uint::format_justify_left#4
(byte) printf_uint::format_justify_left#5
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_min_length#1
(byte) printf_uint::format_min_length#2
(byte) printf_uint::format_min_length#3
(byte) printf_uint::format_min_length#4
(byte) printf_uint::format_min_length#5
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_radix#1
(byte) printf_uint::format_radix#2
(byte) printf_uint::format_radix#3
(byte) printf_uint::format_radix#4
(byte) printf_uint::format_radix#5
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_sign_always#1
(byte) printf_uint::format_sign_always#2
(byte) printf_uint::format_sign_always#3
(byte) printf_uint::format_sign_always#4
(byte) printf_uint::format_sign_always#5
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_upper_case#1
(byte) printf_uint::format_upper_case#2
(byte) printf_uint::format_upper_case#3
(byte) printf_uint::format_upper_case#4
(byte) printf_uint::format_upper_case#5
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(byte) printf_uint::format_zero_padding#1
(byte) printf_uint::format_zero_padding#2
(byte) printf_uint::format_zero_padding#3
(byte) printf_uint::format_zero_padding#4
(byte) printf_uint::format_zero_padding#5
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(word) printf_uint::uvalue#2
(word) printf_uint::uvalue#3
(word) printf_uint::uvalue#4
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(number~) printf_ulong::$0
(byte~) printf_ulong::$1
(number~) printf_ulong::$2
(bool~) printf_ulong::$5
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@3
(label) printf_ulong::@4
(label) printf_ulong::@5
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_justify_left#0
(byte) printf_ulong::format_justify_left#1
(byte) printf_ulong::format_justify_left#2
(byte) printf_ulong::format_justify_left#3
(byte) printf_ulong::format_justify_left#4
(byte) printf_ulong::format_justify_left#5
(byte) printf_ulong::format_justify_left#6
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_min_length#0
(byte) printf_ulong::format_min_length#1
(byte) printf_ulong::format_min_length#2
(byte) printf_ulong::format_min_length#3
(byte) printf_ulong::format_min_length#4
(byte) printf_ulong::format_min_length#5
(byte) printf_ulong::format_min_length#6
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_radix#0
(byte) printf_ulong::format_radix#1
(byte) printf_ulong::format_radix#2
(byte) printf_ulong::format_radix#3
(byte) printf_ulong::format_radix#4
(byte) printf_ulong::format_radix#5
(byte) printf_ulong::format_radix#6
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_sign_always#0
(byte) printf_ulong::format_sign_always#1
(byte) printf_ulong::format_sign_always#2
(byte) printf_ulong::format_sign_always#3
(byte) printf_ulong::format_sign_always#4
(byte) printf_ulong::format_sign_always#5
(byte) printf_ulong::format_sign_always#6
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_upper_case#0
(byte) printf_ulong::format_upper_case#1
(byte) printf_ulong::format_upper_case#2
(byte) printf_ulong::format_upper_case#3
(byte) printf_ulong::format_upper_case#4
(byte) printf_ulong::format_upper_case#5
(byte) printf_ulong::format_upper_case#6
(byte) printf_ulong::format_zero_padding
(byte) printf_ulong::format_zero_padding#0
(byte) printf_ulong::format_zero_padding#1
(byte) printf_ulong::format_zero_padding#2
(byte) printf_ulong::format_zero_padding#3
(byte) printf_ulong::format_zero_padding#4
(byte) printf_ulong::format_zero_padding#5
(byte) printf_ulong::format_zero_padding#6
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0
(dword) printf_ulong::uvalue#1
(dword) printf_ulong::uvalue#2
(dword) printf_ulong::uvalue#3
(dword) printf_ulong::uvalue#4
(dword) printf_ulong::uvalue#5
(void()) queens()
(bool~) queens::$1
(byte~) queens::$2
(bool~) queens::$3
(bool~) queens::$4
(bool~) queens::$6
(bool~) queens::$7
(bool~) queens::$8
(label) queens::@1
(label) queens::@10
(label) queens::@2
(label) queens::@3
(label) queens::@4
(label) queens::@5
(label) queens::@6
(label) queens::@7
(label) queens::@8
(label) queens::@9
(label) queens::@return
(byte) queens::row
(byte) queens::row#0
(byte) queens::row#1
(byte) queens::row#10
(byte) queens::row#11
(byte) queens::row#12
(byte) queens::row#2
(byte) queens::row#3
(byte) queens::row#4
(byte) queens::row#5
(byte) queens::row#6
(byte) queens::row#7
(byte) queens::row#8
(byte) queens::row#9
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(word) strlen::return#5
(word) strlen::return#6
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*) strlen::str#5
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0
(byte) tod_init::tod_HOURS#1
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0
(byte) tod_init::tod_MIN#1
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0
(byte) tod_init::tod_SEC#1
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0
(byte) tod_init::tod_TENTHS#1
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::hours#0
(byte) tod_read::mins
(byte) tod_read::mins#0
(struct TIME_OF_DAY) tod_read::return
(struct TIME_OF_DAY) tod_read::return#0
(struct TIME_OF_DAY) tod_read::return#1
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0
(byte) tod_read::return_HOURS#1
(byte) tod_read::return_HOURS#2
(byte) tod_read::return_HOURS#3
(byte) tod_read::return_HOURS#4
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0
(byte) tod_read::return_MIN#1
(byte) tod_read::return_MIN#2
(byte) tod_read::return_MIN#3
(byte) tod_read::return_MIN#4
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0
(byte) tod_read::return_SEC#1
(byte) tod_read::return_SEC#2
(byte) tod_read::return_SEC#3
(byte) tod_read::return_SEC#4
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0
(byte) tod_read::return_TENTHS#1
(byte) tod_read::return_TENTHS#2
(byte) tod_read::return_TENTHS#3
(byte) tod_read::return_TENTHS#4
(byte) tod_read::secs
(byte) tod_read::secs#0
(byte) tod_read::tenths
(byte) tod_read::tenths#0
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_HOURS#0
(byte) tod_read::tod_MIN
(byte) tod_read::tod_MIN#0
(byte) tod_read::tod_SEC
(byte) tod_read::tod_SEC#0
(byte) tod_read::tod_TENTHS
(byte) tod_read::tod_TENTHS#0
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0
(byte~) tod_str::$1
(number~) tod_str::$10
(number~) tod_str::$11
(byte~) tod_str::$12
(byte~) tod_str::$13
(number~) tod_str::$14
(number~) tod_str::$15
(number~) tod_str::$2
(number~) tod_str::$3
(byte~) tod_str::$4
(byte~) tod_str::$5
(number~) tod_str::$6
(number~) tod_str::$7
(byte~) tod_str::$8
(byte~) tod_str::$9
(label) tod_str::@return
(byte*) tod_str::return
(byte*) tod_str::return#0
(byte*) tod_str::return#1
(byte*) tod_str::return#2
(byte*) tod_str::return#3
(byte*) tod_str::return#4
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0
(byte) tod_str::tod_HOURS#1
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0
(byte) tod_str::tod_MIN#1
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0
(byte) tod_str::tod_SEC#1
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0
(byte) tod_str::tod_TENTHS#1
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(bool~) ultoa::$0
(bool~) ultoa::$1
(byte~) ultoa::$10
(byte~) ultoa::$11
(bool~) ultoa::$2
(bool~) ultoa::$3
(number~) ultoa::$4
(bool~) ultoa::$5
(bool~) ultoa::$6
(bool~) ultoa::$7
(bool~) ultoa::$8
(dword~) ultoa::$9
(label) ultoa::@1
(label) ultoa::@10
(label) ultoa::@11
(label) ultoa::@12
(label) ultoa::@13
(label) ultoa::@14
(label) ultoa::@15
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@8
(label) ultoa::@9
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#0
(byte*) ultoa::buffer#1
(byte*) ultoa::buffer#10
(byte*) ultoa::buffer#11
(byte*) ultoa::buffer#12
(byte*) ultoa::buffer#13
(byte*) ultoa::buffer#14
(byte*) ultoa::buffer#15
(byte*) ultoa::buffer#16
(byte*) ultoa::buffer#17
(byte*) ultoa::buffer#18
(byte*) ultoa::buffer#19
(byte*) ultoa::buffer#2
(byte*) ultoa::buffer#20
(byte*) ultoa::buffer#21
(byte*) ultoa::buffer#3
(byte*) ultoa::buffer#4
(byte*) ultoa::buffer#5
(byte*) ultoa::buffer#6
(byte*) ultoa::buffer#7
(byte*) ultoa::buffer#8
(byte*) ultoa::buffer#9
(byte) ultoa::digit
(byte) ultoa::digit#0
(byte) ultoa::digit#1
(byte) ultoa::digit#2
(byte) ultoa::digit#3
(byte) ultoa::digit#4
(byte) ultoa::digit#5
(byte) ultoa::digit#6
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0
(dword) ultoa::digit_value#1
(dword*) ultoa::digit_values
(dword*) ultoa::digit_values#0
(dword*) ultoa::digit_values#1
(dword*) ultoa::digit_values#10
(dword*) ultoa::digit_values#2
(dword*) ultoa::digit_values#3
(dword*) ultoa::digit_values#4
(dword*) ultoa::digit_values#5
(dword*) ultoa::digit_values#6
(dword*) ultoa::digit_values#7
(dword*) ultoa::digit_values#8
(dword*) ultoa::digit_values#9
(byte) ultoa::max_digits
(byte) ultoa::max_digits#0
(byte) ultoa::max_digits#1
(byte) ultoa::max_digits#10
(byte) ultoa::max_digits#2
(byte) ultoa::max_digits#3
(byte) ultoa::max_digits#4
(byte) ultoa::max_digits#5
(byte) ultoa::max_digits#6
(byte) ultoa::max_digits#7
(byte) ultoa::max_digits#8
(byte) ultoa::max_digits#9
(byte) ultoa::radix
(byte) ultoa::radix#0
(byte) ultoa::radix#1
(byte) ultoa::radix#2
(byte) ultoa::radix#3
(byte) ultoa::radix#4
(byte) ultoa::started
(byte) ultoa::started#0
(byte) ultoa::started#1
(byte) ultoa::started#2
(byte) ultoa::started#3
(byte) ultoa::started#4
(dword) ultoa::value
(dword) ultoa::value#0
(dword) ultoa::value#1
(dword) ultoa::value#10
(dword) ultoa::value#11
(dword) ultoa::value#12
(dword) ultoa::value#13
(dword) ultoa::value#14
(dword) ultoa::value#15
(dword) ultoa::value#2
(dword) ultoa::value#3
(dword) ultoa::value#4
(dword) ultoa::value#5
(dword) ultoa::value#6
(dword) ultoa::value#7
(dword) ultoa::value#8
(dword) ultoa::value#9
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(bool~) ultoa_append::$0
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0
(byte*) ultoa_append::buffer#1
(byte*) ultoa_append::buffer#2
(byte*) ultoa_append::buffer#3
(byte*) ultoa_append::buffer#4
(byte) ultoa_append::digit
(byte) ultoa_append::digit#0
(byte) ultoa_append::digit#1
(byte) ultoa_append::digit#2
(byte) ultoa_append::digit#3
(byte) ultoa_append::digit#4
(dword) ultoa_append::return
(dword) ultoa_append::return#0
(dword) ultoa_append::return#1
(dword) ultoa_append::return#2
(dword) ultoa_append::return#3
(dword) ultoa_append::return#4
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0
(dword) ultoa_append::sub#1
(dword) ultoa_append::sub#2
(dword) ultoa_append::sub#3
(dword) ultoa_append::value
(dword) ultoa_append::value#0
(dword) ultoa_append::value#1
(dword) ultoa_append::value#2
(dword) ultoa_append::value#3
(dword) ultoa_append::value#4
(dword) ultoa_append::value#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#3)
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $a in (byte) ultoa::max_digits#1 ← (number) $a
Adding number conversion cast (unumber) 8 in (byte) ultoa::max_digits#2 ← (number) 8
Adding number conversion cast (unumber) $b in (byte) ultoa::max_digits#3 ← (number) $b
Adding number conversion cast (unumber) $20 in (byte) ultoa::max_digits#4 ← (number) $20
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) ultoa::$4 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) ultoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $19 in (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) gotoxy::$5 in (number~) gotoxy::$5 ← (unumber~) gotoxy::$4 + (byte) gotoxy::x#4
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) cputln::$0 in (number~) cputln::$0 ← (unumber)(number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#2
Adding number conversion cast (unumber) printf_ulong::$2 in (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) printf_ulong::$0 in (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#4 printf_ulong::@2/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#4 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#5 printf_ulong::@2/(byte) printf_ulong::format_sign_always#6 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#4 printf_ulong::@2/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#4 printf_ulong::@2/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#4 printf_ulong::@2/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#3 printf_ulong::@2/(dword) printf_ulong::uvalue#4 )
  (unumber~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uint::$5 ← (number) 0 != (byte) printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (number~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in (byte) printf_uint::format_upper_case#2 ← phi( printf_uint::@1/(byte) printf_uint::format_upper_case#3 printf_uint::@2/(byte) printf_uint::format_upper_case#4 )
  (byte) printf_uint::format_zero_padding#2 ← phi( printf_uint::@1/(byte) printf_uint::format_zero_padding#3 printf_uint::@2/(byte) printf_uint::format_zero_padding#4 )
  (byte) printf_uint::format_sign_always#3 ← phi( printf_uint::@1/(byte) printf_uint::format_sign_always#4 printf_uint::@2/(byte) printf_uint::format_sign_always#5 )
  (byte) printf_uint::format_justify_left#2 ← phi( printf_uint::@1/(byte) printf_uint::format_justify_left#3 printf_uint::@2/(byte) printf_uint::format_justify_left#4 )
  (byte) printf_uint::format_min_length#2 ← phi( printf_uint::@1/(byte) printf_uint::format_min_length#3 printf_uint::@2/(byte) printf_uint::format_min_length#4 )
  (byte) printf_uint::format_radix#1 ← phi( printf_uint::@1/(byte) printf_uint::format_radix#3 printf_uint::@2/(byte) printf_uint::format_radix#4 )
  (word) printf_uint::uvalue#1 ← phi( printf_uint::@1/(word) printf_uint::uvalue#2 printf_uint::@2/(word) printf_uint::uvalue#3 )
  (unumber~) printf_uint::$2 ← phi( printf_uint::@1/(byte~) printf_uint::$1 printf_uint::@2/(number~) printf_uint::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
Adding number conversion cast (unumber) printf_uchar::$2 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (unumber~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#4
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#5
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$14 ← (number) 0 != (byte) printf_string::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$15 ← (number) 0 != (byte) printf_string::format_justify_left#1
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_string::padding#2 ← (number) 0
Adding number conversion cast (unumber) $80 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
Adding number conversion cast (unumber) 0 in *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
Adding number conversion cast (unumber) $f in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$2 in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$3 in (number~) tod_str::$3 ← (byte) '0' + (unumber~) tod_str::$2
Adding number conversion cast (unumber) 1 in *((const byte*) tod_buffer + (number) 1) ← (unumber~) tod_str::$3
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
Adding number conversion cast (unumber) 3 in *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
Adding number conversion cast (unumber) $f in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$6 in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$7 in (number~) tod_str::$7 ← (byte) '0' + (unumber~) tod_str::$6
Adding number conversion cast (unumber) 4 in *((const byte*) tod_buffer + (number) 4) ← (unumber~) tod_str::$7
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
Adding number conversion cast (unumber) 6 in *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
Adding number conversion cast (unumber) $f in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$10 in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$11 in (number~) tod_str::$11 ← (byte) '0' + (unumber~) tod_str::$10
Adding number conversion cast (unumber) 7 in *((const byte*) tod_buffer + (number) 7) ← (unumber~) tod_str::$11
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
Adding number conversion cast (unumber) 9 in *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
Adding number conversion cast (unumber) $f in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$14 in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$15 in (number~) tod_str::$15 ← (byte) '0' + (unumber~) tod_str::$14
Adding number conversion cast (unumber) $a in *((const byte*) tod_buffer + (number) $a) ← (unumber~) tod_str::$15
Adding number conversion cast (unumber) 8 in (word) printf_uint::uvalue#0 ← (number) 8
Adding number conversion cast (unumber) 8+1 in (bool~) queens::$1 ← *((const byte*) board + (byte) queens::row#3) == (number) 8+(number) 1
Adding number conversion cast (unumber) 0 in *((const byte*) board + (byte) queens::row#4) ← (number) 0
Adding number conversion cast (unumber) 1 in (bool~) queens::$6 ← (byte) queens::row#4 == (number) 1
Adding number conversion cast (unumber) 0 in (bool~) queens::$8 ← (number) 0 != (byte~) queens::$2
Adding number conversion cast (unumber) 8 in (bool~) queens::$4 ← (byte) queens::row#6 == (number) 8
Adding number conversion cast (unumber) 1 in (number~) legal::$0 ← (byte) legal::row#1 - (number) 1
Adding number conversion cast (unumber) legal::$0 in (number~) legal::$0 ← (byte) legal::row#1 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) legal::return#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) legal::return#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) legal::return#3 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) 5 in (byte) gotoxy::y#2 ← (number) 5
Adding number conversion cast (unumber) 8 in (bool~) print::$2 ← (byte) print::i#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$4 ← (byte) print::i1#2 <= (number) 8
Adding number conversion cast (unumber) 8 in (bool~) print::$6 ← (byte) print::j#2 <= (number) 8
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_ulong::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uint::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uchar::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) ultoa::max_digits#1 ← (unumber)(number) $a
Inlining cast (byte) ultoa::max_digits#2 ← (unumber)(number) 8
Inlining cast (byte) ultoa::max_digits#3 ← (unumber)(number) $b
Inlining cast (byte) ultoa::max_digits#4 ← (unumber)(number) $20
Inlining cast *((byte*) ultoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) ultoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) ultoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (unumber~) printf_ulong::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uint::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uchar::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (signed byte) printf_string::padding#2 ← (snumber)(number) 0
Inlining cast (word) printf_uint::uvalue#0 ← (unumber)(number) 8
Inlining cast *((const byte*) board + (byte) queens::row#4) ← (unumber)(number) 0
Inlining cast (byte) legal::return#1 ← (unumber)(number) 1
Inlining cast (byte) legal::return#2 ← (unumber)(number) 0
Inlining cast (byte) legal::return#3 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) 5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (byte) 1
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$8 * (byte) $28
Inferred type updated to word in (unumber~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#4
Inferred type updated to byte in (unumber~) cputln::$0 ← (byte) $28 - (byte) conio_cursor_x
Inferred type updated to byte in (unumber~) printf_ulong::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_ulong::$2
Inferred type updated to byte in (unumber~) printf_uint::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uint::$2
Inferred type updated to byte in (unumber~) printf_uchar::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uchar::$2
Inferred type updated to byte in (unumber~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
Inferred type updated to byte in (unumber~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
Inferred type updated to byte in (unumber~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
Inferred type updated to byte in (unumber~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
Inferred type updated to byte in (unumber~) legal::$0 ← (byte) legal::row#1 - (byte) 1
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [356] (bool~) gotoxy::$1 ← (byte) gotoxy::y#3 <= (byte) $19 from [355] (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (byte) $19
Inversing boolean not [360] (bool~) gotoxy::$3 ← (byte) gotoxy::x#3 < (byte) $28 from [359] (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (byte) $28
Inversing boolean not [389] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [388] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [406] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [405] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [537] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#3 from [536] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#3
Inversing boolean not [541] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#3 from [540] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#3
Inversing boolean not [543] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [542] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Inversing boolean not [556] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#3 from [555] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#3
Inversing boolean not [563] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [562] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [571] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#4 from [570] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#4
Inversing boolean not [588] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#3 from [587] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#3
Inversing boolean not [600] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#5 from [599] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#5
Inversing boolean not [618] (bool~) printf_string::$0 ← (byte) 0 == (byte) printf_string::format_min_length#1 from [617] (bool~) printf_string::$14 ← (byte) 0 != (byte) printf_string::format_min_length#1
Inversing boolean not [622] (bool~) printf_string::$1 ← (byte) 0 == (byte) printf_string::format_justify_left#1 from [621] (bool~) printf_string::$15 ← (byte) 0 != (byte) printf_string::format_justify_left#1
Inversing boolean not [637] (bool~) printf_string::$12 ← (signed byte) printf_string::padding#1 >= (signed byte) 0 from [636] (bool~) printf_string::$11 ← (signed byte) printf_string::padding#1 < (signed byte) 0
Inversing boolean not [808] (bool~) queens::$3 ← (byte) 0 == (byte~) queens::$2 from [807] (bool~) queens::$8 ← (byte) 0 != (byte~) queens::$2
Inversing boolean not [867] (bool~) legal::$6 ← (byte~) legal::$3 != (byte~) legal::$4 from [866] (bool~) legal::$5 ← (byte~) legal::$3 == (byte~) legal::$4
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#4 strlen::return#1 
Alias strlen::str#3 = strlen::str#4 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#0 = ultoa::$9 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#3 = cputc::c#4 
Alias cputln::ln_offset#0 = cputln::$0 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#16 cputs::s#15 
Alias printf_padding::pad#5 = printf_padding::pad#6 printf_padding::pad#8 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#5 = printf_padding::length#8 printf_padding::length#7 
Alias printf_ulong::uvalue#3 = printf_ulong::uvalue#5 printf_ulong::uvalue#4 
Alias printf_ulong::format_radix#4 = printf_ulong::format_radix#6 printf_ulong::format_radix#5 
Alias printf_ulong::format_min_length#4 = printf_ulong::format_min_length#6 printf_ulong::format_min_length#5 
Alias printf_ulong::format_justify_left#4 = printf_ulong::format_justify_left#6 printf_ulong::format_justify_left#5 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#5 printf_ulong::format_sign_always#6 
Alias printf_ulong::format_zero_padding#4 = printf_ulong::format_zero_padding#6 printf_ulong::format_zero_padding#5 
Alias printf_ulong::format_upper_case#4 = printf_ulong::format_upper_case#6 printf_ulong::format_upper_case#5 
Alias printf_ulong::format_min_length#2 = printf_ulong::format_min_length#3 
Alias printf_ulong::format_justify_left#2 = printf_ulong::format_justify_left#3 
Alias printf_ulong::format_sign_always#3 = printf_ulong::format_sign_always#4 
Alias printf_ulong::format_zero_padding#2 = printf_ulong::format_zero_padding#3 
Alias printf_ulong::format_upper_case#2 = printf_ulong::format_upper_case#3 
Alias printf_ulong::format_radix#2 = printf_ulong::format_radix#3 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_uchar::uvalue#3 = printf_uchar::uvalue#5 printf_uchar::uvalue#4 
Alias printf_uchar::format_radix#4 = printf_uchar::format_radix#6 printf_uchar::format_radix#5 
Alias printf_uchar::format_min_length#4 = printf_uchar::format_min_length#6 printf_uchar::format_min_length#5 
Alias printf_uchar::format_justify_left#4 = printf_uchar::format_justify_left#6 printf_uchar::format_justify_left#5 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#5 printf_uchar::format_sign_always#6 
Alias printf_uchar::format_zero_padding#4 = printf_uchar::format_zero_padding#6 printf_uchar::format_zero_padding#5 
Alias printf_uchar::format_upper_case#4 = printf_uchar::format_upper_case#6 printf_uchar::format_upper_case#5 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#3 = printf_uchar::format_sign_always#4 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#3 
Alias printf_number_buffer::buffer_digits#20 = printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#21 
Alias printf_number_buffer::buffer_sign#13 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#9 printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#7 printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#6 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#5 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#6 printf_number_buffer::format_zero_padding#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#18 printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#17 
Alias strlen::return#2 = strlen::return#5 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#6 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::format_zero_padding#7 = printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#14 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#18 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#14 = printf_number_buffer::buffer_digits#19 printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::format_justify_left#20 = printf_number_buffer::format_justify_left#22 printf_number_buffer::format_justify_left#3 
Alias printf_number_buffer::buffer_sign#4 = printf_number_buffer::buffer_sign#5 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#15 printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#6 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#16 printf_number_buffer::buffer_digits#12 
Alias printf_number_buffer::format_justify_left#17 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_zero_padding#20 = printf_number_buffer::format_zero_padding#22 printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#14 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#15 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#5 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#16 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#17 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias printf_string::str#1 = printf_string::str#3 printf_string::str#7 printf_string::str#6 
Alias printf_string::format_min_length#1 = printf_string::format_min_length#3 printf_string::format_min_length#2 
Alias printf_string::format_justify_left#3 = printf_string::format_justify_left#7 printf_string::format_justify_left#5 printf_string::format_justify_left#4 
Alias strlen::return#3 = strlen::return#6 
Alias printf_string::padding#1 = printf_string::$10 
Alias printf_string::format_justify_left#2 = printf_string::format_justify_left#6 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#4 = printf_string::str#8 printf_string::str#5 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#9 printf_string::format_justify_left#8 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias count#13 = count#36 count#37 count#34 count#31 count#21 
Alias count#1 = count#6 count#22 count#14 count#7 count#35 count#32 count#23 count#15 count#8 count#2 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$5_TENTHS 
Alias tod_str::tod_SEC#0 = main::$5_SEC 
Alias tod_str::tod_MIN#0 = main::$5_MIN 
Alias tod_str::tod_HOURS#0 = main::$5_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias printf_string::str#0 = main::$6 
Alias queens::row#10 = queens::row#3 queens::row#9 queens::row#4 queens::row#5 queens::row#6 queens::row#12 queens::row#11 queens::row#7 queens::row#8 
Alias count#16 = count#29 count#17 count#18 count#33 count#28 count#9 count#26 count#27 
Alias legal::return#0 = legal::return#5 
Alias count#25 = count#3 
Alias count#10 = count#4 
Alias legal::i#10 = legal::i#3 legal::i#2 legal::i#4 legal::i#12 legal::i#9 
Alias legal::column#1 = legal::column#3 legal::column#2 legal::diff1_b#0 legal::diff1_b#1 legal::column#15 legal::diff1_b#2 legal::column#13 legal::diff1_b#3 legal::column#14 
Alias legal::row#1 = legal::row#14 legal::row#11 legal::row#9 legal::row#6 legal::row#7 
Alias legal::diff1_a#0 = legal::diff1_a#1 legal::diff1_a#2 legal::diff1_a#3 
Alias legal::diff1_return#0 = legal::diff1_$2 
Alias legal::diff1_return#1 = legal::diff1_$1 
Alias legal::diff1_return#2 = legal::diff1_return#3 legal::diff1_return#4 legal::$3 
Alias legal::i#13 = legal::i#5 legal::i#7 legal::diff2_a#0 legal::diff2_a#1 legal::i#15 legal::diff2_a#2 legal::diff2_a#3 legal::i#14 
Alias legal::row#12 = legal::row#2 legal::row#5 legal::diff2_b#0 legal::diff2_b#1 legal::row#15 legal::diff2_b#2 legal::diff2_b#3 legal::row#13 
Alias legal::column#10 = legal::column#11 legal::column#12 legal::column#8 legal::column#9 
Alias legal::diff2_return#0 = legal::diff2_$2 
Alias legal::diff2_return#1 = legal::diff2_$1 
Alias legal::diff2_return#2 = legal::diff2_return#3 legal::diff2_return#4 legal::$4 
Alias legal::i#11 = legal::i#8 legal::i#6 
Alias legal::row#10 = legal::row#8 legal::row#4 
Alias legal::column#5 = legal::column#6 legal::column#7 
Alias legal::return#4 = legal::return#6 
Alias count#11 = count#19 count#30 
Alias print::i#2 = print::i#3 print::i#4 
Alias print::i1#2 = print::i1#6 print::i1#3 print::i1#9 
Alias print::i1#10 = print::i1#4 print::i1#7 print::i1#5 print::i1#12 print::i1#13 print::i1#11 
Alias print::j#2 = print::j#3 print::j#7 print::j#5 print::j#8 print::j#6 
Alias count#0 = count#20 
Alias count#12 = count#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias printf_ulong::uvalue#2 = printf_ulong::uvalue#3 
Alias printf_ulong::format_radix#2 = printf_ulong::format_radix#4 
Alias printf_ulong::format_min_length#2 = printf_ulong::format_min_length#4 
Alias printf_ulong::format_justify_left#2 = printf_ulong::format_justify_left#4 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#3 
Alias printf_ulong::format_zero_padding#2 = printf_ulong::format_zero_padding#4 
Alias printf_ulong::format_upper_case#2 = printf_ulong::format_upper_case#4 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#4 
Alias printf_number_buffer::format_min_length#3 = printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#12 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#13 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#17 = printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#4 
Alias printf_string::format_justify_left#1 = printf_string::format_justify_left#3 printf_string::format_justify_left#2 
Alias printf_string::str#1 = printf_string::str#4 printf_string::str#2 
Alias printf_string::padding#3 = printf_string::padding#4 
Alias count#10 = count#16 
Alias legal::i#10 = legal::i#13 legal::i#11 
Alias legal::row#1 = legal::row#12 legal::row#10 
Alias legal::column#1 = legal::column#10 legal::column#5 
Alias print::j#2 = print::j#4 
Alias print::i1#10 = print::i1#8 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#17 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte) ultoa::radix#1 (byte) ultoa::radix#0
Identical Phi Values (dword) ultoa::value#10 (dword) ultoa::value#1
Identical Phi Values (byte*) ultoa::buffer#10 (byte*) ultoa::buffer#5
Identical Phi Values (byte) ultoa::max_digits#10 (byte) ultoa::max_digits#7
Identical Phi Values (dword*) ultoa::digit_values#10 (dword*) ultoa::digit_values#8
Identical Phi Values (dword) ultoa_append::value#5 (dword) ultoa_append::value#0
Identical Phi Values (dword) ultoa_append::sub#3 (dword) ultoa_append::sub#0
Identical Phi Values (byte*) ultoa_append::buffer#3 (byte*) ultoa_append::buffer#0
Identical Phi Values (dword) ultoa_append::sub#1 (dword) ultoa_append::sub#3
Identical Phi Values (byte*) ultoa_append::buffer#1 (byte*) ultoa_append::buffer#3
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte) printf_padding::length#5 (byte) printf_padding::length#6
Identical Phi Values (byte) printf_padding::pad#5 (byte) printf_padding::pad#7
Identical Phi Values (byte) printf_uint::format_sign_always#1 (byte) printf_uint::format_sign_always#0
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte) printf_uint::format_radix#1 (byte) printf_uint::format_radix#0
Identical Phi Values (byte) printf_uint::format_min_length#1 (byte) printf_uint::format_min_length#0
Identical Phi Values (byte) printf_uint::format_justify_left#1 (byte) printf_uint::format_justify_left#0
Identical Phi Values (byte) printf_uint::format_zero_padding#1 (byte) printf_uint::format_zero_padding#0
Identical Phi Values (byte) printf_uint::format_upper_case#1 (byte) printf_uint::format_upper_case#0
Identical Phi Values (byte) printf_string::format_min_length#1 (byte) printf_string::format_min_length#0
Identical Phi Values (byte) printf_string::format_justify_left#1 (byte) printf_string::format_justify_left#0
Identical Phi Values (byte*) printf_string::str#1 (byte*) printf_string::str#0
Identical Phi Values (byte) tod_init::tod_HOURS#1 (byte) tod_init::tod_HOURS#0
Identical Phi Values (byte) tod_init::tod_MIN#1 (byte) tod_init::tod_MIN#0
Identical Phi Values (byte) tod_init::tod_SEC#1 (byte) tod_init::tod_SEC#0
Identical Phi Values (byte) tod_init::tod_TENTHS#1 (byte) tod_init::tod_TENTHS#0
Identical Phi Values (byte) tod_str::tod_HOURS#1 (byte) tod_str::tod_HOURS#0
Identical Phi Values (byte) tod_str::tod_MIN#1 (byte) tod_str::tod_MIN#0
Identical Phi Values (byte) tod_str::tod_SEC#1 (byte) tod_str::tod_SEC#0
Identical Phi Values (byte) tod_str::tod_TENTHS#1 (byte) tod_str::tod_TENTHS#0
Identical Phi Values (dword) count#13 (dword) count#0
Identical Phi Values (dword) count#1 (dword) count#10
Identical Phi Values (dword) count#24 (dword) count#13
Identical Phi Values (byte) legal::row#3 (byte) legal::row#0
Identical Phi Values (byte) legal::column#4 (byte) legal::column#0
Identical Phi Values (byte) legal::row#1 (byte) legal::row#3
Identical Phi Values (byte) legal::column#1 (byte) legal::column#4
Identical Phi Values (dword) count#11 (dword) count#25
Identical Phi Values (byte) print::i1#10 (byte) print::i1#2
Identical Phi Values (dword) count#12 (dword) count#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [56] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [60] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [64] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [68] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [85] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [108] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) utoa::$0 [117] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [121] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [125] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [129] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [146] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [171] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) ultoa::$0 [180] if((byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
Simple Condition (bool~) ultoa::$1 [184] if((byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
Simple Condition (bool~) ultoa::$2 [188] if((byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
Simple Condition (bool~) ultoa::$3 [192] if((byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
Simple Condition (bool~) ultoa::$5 [209] if((byte) ultoa::digit#2<(byte~) ultoa::$4) goto ultoa::@11
Simple Condition (bool~) ultoa_append::$0 [234] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition (bool~) clrscr::$0 [250] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [258] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [268] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [271] if((byte) gotoxy::x#3<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [287] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [295] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [310] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$9 [312] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [348] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [356] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
Simple Condition (bool~) printf_ulong::$5 [363] if((byte) 0!=(byte) printf_ulong::format_sign_always#2) goto printf_ulong::@1
Simple Condition (bool~) printf_uint::$5 [384] if((byte) 0!=(byte) printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition (bool~) printf_uchar::$5 [405] if((byte) 0!=(byte) printf_uchar::format_sign_always#2) goto printf_uchar::@1
Simple Condition (bool~) printf_number_buffer::$0 [427] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [441] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [446] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [450] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [460] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Simple Condition (bool~) printf_string::$0 [481] if((byte) 0==(byte) printf_string::format_min_length#0) goto printf_string::@1
Simple Condition (bool~) printf_string::$12 [495] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@1
Simple Condition (bool~) queens::$7 [607] if((number) 0!=(number) 1) goto queens::@2
Simple Condition (bool~) queens::$1 [610] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3
Simple Condition (bool~) queens::$6 [613] if((byte) queens::row#10==(byte) 1) goto queens::@return
Simple Condition (bool~) queens::$3 [620] if((byte) 0==(byte~) queens::$2) goto queens::@1
Simple Condition (bool~) queens::$4 [622] if((byte) queens::row#10==(byte) 8) goto queens::@4
Simple Condition (bool~) legal::$1 [633] if((byte) legal::i#10<=(byte~) legal::$0) goto legal::@2
Simple Condition (bool~) legal::$2 [635] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@4
Simple Condition (bool~) legal::diff1_$0 [640] if((byte) legal::diff1_a#0<(byte) legal::column#0) goto legal::diff1_@1
Simple Condition (bool~) legal::diff2_$0 [645] if((byte) legal::i#10<(byte) legal::row#0) goto legal::diff2_@1
Simple Condition (bool~) legal::$6 [650] if((byte) legal::diff1_return#2!=(byte) legal::diff2_return#2) goto legal::@5
Simple Condition (bool~) print::$2 [674] if((byte) print::i#2<=(byte) 8) goto print::@2
Simple Condition (bool~) print::$4 [687] if((byte) print::i1#2<=(byte) 8) goto print::@5
Simple Condition (bool~) print::$6 [701] if((byte) print::j#2<=(byte) 8) goto print::@7
Simple Condition (bool~) print::$7 [703] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [89] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [88] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [151] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [150] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [214] (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
Rewriting || if()-condition to two if()s [213] (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
Rewriting ! if()-condition to reversed if() [433] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [432] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [431] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [455] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [454] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#10 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [469] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [468] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [467] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#10 && (bool~) printf_number_buffer::$14
Rewriting ! if()-condition to reversed if() [485] (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
Rewriting && if()-condition to two if()s [484] (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
Rewriting ! if()-condition to reversed if() [500] (bool~) printf_string::$7 ← ! (bool~) printf_string::$6
Rewriting && if()-condition to two if()s [499] (bool~) printf_string::$6 ← (byte) printf_string::format_justify_left#0 && (signed byte) printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) ultoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_string::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Constant right-side identified [315] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [320] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte) ultoa::max_digits#0 = 0
Constant (const dword*) ultoa::digit_values#0 = (dword*) 0
Constant (const byte) ultoa::max_digits#1 = $a
Constant (const dword*) ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#2 = 8
Constant (const dword*) ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#3 = $b
Constant (const dword*) ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#4 = $20
Constant (const dword*) ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant (const byte) ultoa::started#0 = 0
Constant (const byte) ultoa::digit#0 = 0
Constant (const byte) ultoa::started#1 = 1
Constant (const byte) ultoa_append::digit#0 = 0
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_ulong::$1 = '+'
Constant (const byte) printf_ulong::$0 = 0
Constant (const byte*) ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uint::$1 = '+'
Constant (const byte) printf_uint::$0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uchar::$1 = '+'
Constant (const byte) printf_uchar::$0 = 0
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#2 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const signed byte) printf_string::padding#0 = 0
Constant (const signed byte) printf_string::padding#2 = 0
Constant (const byte) printf_padding::pad#3 = ' '
Constant (const byte) printf_padding::pad#4 = ' '
Constant (const byte*) tod_str::return#0 = tod_buffer
Constant (const dword) count#0 = 0
Constant (const to_nomodify byte*) cputs::s#3 = main::s
Constant (const to_nomodify byte*) cputs::s#4 = main::s1
Constant (const word) printf_uint::uvalue#0 = 8
Constant (const byte) printf_uint::format_min_length#0 = 0
Constant (const byte) printf_uint::format_justify_left#0 = 0
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 0
Constant (const byte) printf_uint::format_radix#0 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#5 = main::s2
Constant (const byte) printf_ulong::format_min_length#0 = 0
Constant (const byte) printf_ulong::format_justify_left#0 = 0
Constant (const byte) printf_ulong::format_sign_always#0 = 0
Constant (const byte) printf_ulong::format_zero_padding#0 = 0
Constant (const byte) printf_ulong::format_upper_case#0 = 0
Constant (const byte) printf_ulong::format_radix#0 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#6 = main::s3
Constant (const byte) printf_string::format_min_length#0 = 0
Constant (const byte) printf_string::format_justify_left#0 = 0
Constant (const to_nomodify byte*) cputs::s#7 = main::s4
Constant (const byte) queens::row#0 = 1
Constant (const byte) legal::i#0 = 1
Constant (const byte) legal::return#1 = 1
Constant (const byte) legal::return#2 = 0
Constant (const byte) legal::return#3 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = 5
Constant (const to_nomodify byte*) cputs::s#8 = print::s
Constant (const byte) printf_ulong::format_min_length#1 = 0
Constant (const byte) printf_ulong::format_justify_left#1 = 0
Constant (const byte) printf_ulong::format_sign_always#1 = 0
Constant (const byte) printf_ulong::format_zero_padding#1 = 0
Constant (const byte) printf_ulong::format_upper_case#1 = 0
Constant (const byte) printf_ulong::format_radix#1 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#9 = print::s1
Constant (const byte) print::i#0 = 1
Constant (const byte) printf_uchar::format_min_length#0 = 0
Constant (const byte) printf_uchar::format_justify_left#0 = 0
Constant (const byte) printf_uchar::format_sign_always#0 = 0
Constant (const byte) printf_uchar::format_zero_padding#0 = 0
Constant (const byte) printf_uchar::format_upper_case#0 = 0
Constant (const byte) printf_uchar::format_radix#0 = HEXADECIMAL
Constant (const byte) print::i1#0 = 1
Constant (const to_nomodify byte*) cputs::s#10 = print::s2
Constant (const byte) printf_uchar::format_min_length#1 = 0
Constant (const byte) printf_uchar::format_justify_left#1 = 0
Constant (const byte) printf_uchar::format_sign_always#1 = 0
Constant (const byte) printf_uchar::format_zero_padding#1 = 0
Constant (const byte) printf_uchar::format_upper_case#1 = 0
Constant (const byte) printf_uchar::format_radix#1 = HEXADECIMAL
Constant (const byte) print::j#0 = 1
Constant (const to_nomodify byte*) cputs::s#11 = print::s3
Constant (const to_nomodify byte*) cputs::s#12 = print::s4
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Constant (const word) utoa::value#1 = printf_uint::uvalue#0
Constant (const byte) utoa::radix#0 = printf_uint::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#1 = printf_uint::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#1 = printf_uint::format_radix#0
Constant (const signed byte) printf_string::$13 = (signed byte)printf_string::format_min_length#0
Constant (const byte*) tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) printf_string::str#0 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) strlen::str#2 = printf_string::str#0
Constant (const to_nomodify byte*) cputs::s#2 = printf_string::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [117] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [121] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [125] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [129] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [312] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [384] if((byte) 0!=(const byte) printf_uint::format_sign_always#0) goto printf_uint::@1
if() condition always true - replacing block destination [481] if((byte) 0==(const byte) printf_string::format_min_length#0) goto printf_string::@1
if() condition always true - replacing block destination [607] if((number) 0!=(number) 1) goto queens::@2
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [268] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Rewriting conditional comparison [674] if((byte) print::i#2<=(byte) 8) goto print::@2
Rewriting conditional comparison [687] if((byte) print::i1#2<=(byte) 8) goto print::@5
Rewriting conditional comparison [701] if((byte) print::j#2<=(byte) 8) goto print::@7
Simplifying constant evaluating to zero (signed byte)(const byte) printf_string::format_min_length#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)&printf_buffer in [367] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_ulong::$2
Simplifying expression containing zero (byte*)&printf_buffer in [372] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [388] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [393] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [409] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [414] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero printf_string::len#0 in [493] (signed byte) printf_string::padding#1 ← (const signed byte) printf_string::$13 - (signed byte) printf_string::len#0
Simplifying expression containing zero tod_buffer in [527] *((const byte*) tod_buffer + (byte) 0) ← (byte~) tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [566] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [214] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [216] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [218] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [220] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#0 and assignment [253] (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#0 and assignment [256] (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#2
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#2 and assignment [275] (byte) printf_number_buffer::format_sign_always#2 ← (byte) printf_uchar::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#2 and assignment [278] (byte) printf_number_buffer::format_radix#2 ← (byte) printf_uchar::format_radix#2
Eliminating unused variable (byte*) strupr::return#2 and assignment [315] (byte*) strupr::return#2 ← (byte*) strupr::str#0
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#0 and assignment [347] (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#1 and assignment [348] (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) ultoa::max_digits#0
Eliminating unused constant (const dword*) ultoa::digit_values#0
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#1
Eliminating unused constant (const byte) printf_number_buffer::format_radix#1
Eliminating unused constant (const byte) printf_string::format_min_length#0
Eliminating unused constant (const signed byte) printf_string::$13
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant (const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Eliminating variable (word) strlen::return#3 from unused block printf_string::@3
Eliminating variable (word~) printf_string::$9 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::len#0 from unused block printf_string::@7
Eliminating variable (signed byte) printf_string::padding#1 from unused block printf_string::@7
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Removing PHI-reference to removed block (printf_string::@3) in block strlen
Removing unused block printf_string::@3
Removing PHI-reference to removed block (printf_string::@7) in block printf_string::@1
Removing unused block printf_string::@7
Removing PHI-reference to removed block (printf_string::@4) in block printf_string::@1
Removing unused block printf_string::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) ultoa::$12 ← (number) 0 != (byte) ultoa::started#2
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#3<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#3<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#10
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$16 ← (number) 0 != (const byte) printf_string::format_justify_left#0
Adding number conversion cast (unumber) 8+1 in if((byte) print::i#2<(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 1 in if((byte) print::i#2<(unumber)(byte) 8+(number) 1) goto print::@2
Adding number conversion cast (unumber) 8+1 in if((byte) print::i1#2<(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 1 in if((byte) print::i1#2<(unumber)(byte) 8+(number) 1) goto print::@5
Adding number conversion cast (unumber) 8+1 in if((byte) print::j#2<(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (unumber) 1 in if((byte) print::j#2<(unumber)(byte) 8+(number) 1) goto print::@7
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$17 ← (number) 0 != (signed byte) printf_string::padding#3
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$18 ← (number) 0 != (signed byte) printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) 8+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Identical Phi Values (byte*) strlen::str#5 (byte*) strlen::str#1
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Identical Phi Values (byte) gotoxy::y#3 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#3 (const byte) gotoxy::x#2
Identical Phi Values (byte~) printf_uint::$2 (const byte) printf_uint::$0
Identical Phi Values (signed byte) printf_string::padding#3 (const signed byte) printf_string::padding#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [61] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) utoa::$12 [89] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) ultoa::$12 [129] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [270] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [286] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [296] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition (bool~) printf_string::$1 [304] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@11
Simple Condition (bool~) printf_string::$16 [307] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@12
Simple Condition (bool~) toupper::$1 [435] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [436] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) utoa::$6 [437] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) ultoa::$6 [438] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [440] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [441] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [443] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [445] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [446] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Simple Condition (bool~) printf_string::$17 [448] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
Simple Condition (bool~) printf_string::$18 [450] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [270] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [286] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [296] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [304] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
Negating conditional jump and destination [307] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
Negating conditional jump and destination [441] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [446] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [47] (byte*) uctoa::buffer#0 ← ++ (const byte*) uctoa::buffer#5
Constant right-side identified [83] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Constant right-side identified [114] (byte*) ultoa::buffer#0 ← ++ (const byte*) ultoa::buffer#5
Constant right-side identified [308] (byte) printf_padding::length#3 ← (byte)(const signed byte) printf_string::padding#0
Constant right-side identified [310] (byte) printf_padding::length#4 ← (byte)(const signed byte) printf_string::padding#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#0 = ++uctoa::buffer#5
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Constant (const byte*) ultoa::buffer#0 = ++ultoa::buffer#5
Constant (const byte) printf_padding::length#3 = (byte)printf_string::padding#0
Constant (const byte) printf_padding::length#4 = (byte)printf_string::padding#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [169] if((const byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@1
if() condition always true - replacing block destination [171] if((const byte) gotoxy::x#2<(byte) $28) goto gotoxy::@2
if() condition always false - eliminating [304] if((byte) 0!=(const byte) printf_string::format_justify_left#0) goto printf_string::@2
if() condition always true - replacing block destination [307] if((byte) 0==(const byte) printf_string::format_justify_left#0) goto printf_string::@return
if() condition always false - eliminating [448] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@5
if() condition always false - eliminating [450] if((signed byte) 0!=(const signed byte) printf_string::padding#0) goto printf_string::@6
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Simplifying constant evaluating to zero (byte)(const signed byte) printf_string::padding#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte*) strlen::str#2
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Eliminating unused constant (const byte) printf_uint::$1
Eliminating unused constant (const signed byte) printf_string::padding#0
Eliminating unused constant (const signed byte) printf_string::padding#2
Eliminating unused constant (const byte) printf_string::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@3) in block gotoxy::@1
Removing unused block gotoxy::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Removing PHI-reference to removed block (printf_string::@5) in block printf_padding
Removing PHI-reference to removed block (printf_string::@5) in block printf_padding
Removing unused block printf_string::@5
Removing unused block printf_string::@9
Removing PHI-reference to removed block (printf_string::@6) in block printf_padding
Removing PHI-reference to removed block (printf_string::@6) in block printf_padding
Removing unused block printf_string::@6
Removing unused block printf_string::@10
Removing unused block printf_string::@12
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Identical Phi Values (byte) gotoxy::y#4 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#4 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [45] (byte*) uctoa::buffer#1 ← ++ (const byte*) uctoa::buffer#0
Constant right-side identified [105] (byte*) ultoa::buffer#1 ← ++ (const byte*) ultoa::buffer#0
Constant right-side identified [159] (word~) gotoxy::$8 ← (word)(const byte) gotoxy::y#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#1 = ++uctoa::buffer#0
Constant (const byte*) ultoa::buffer#1 = ++ultoa::buffer#0
Constant (const word) gotoxy::$8 = (word)gotoxy::y#2
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero gotoxy::$4 in [161] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (const byte) gotoxy::x#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) gotoxy::y#0
Eliminating unused constant (const byte) gotoxy::x#0
Eliminating unused constant (const byte) printf_padding::pad#3
Eliminating unused constant (const byte) printf_padding::pad#4
Eliminating unused constant (const byte) printf_padding::length#3
Eliminating unused constant (const byte) printf_padding::length#4
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias gotoxy::offset#0 = gotoxy::$4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Constant right-side identified [46] (byte*) uctoa::buffer#2 ← ++ (const byte*) uctoa::buffer#1
Constant right-side identified [105] (byte*) ultoa::buffer#2 ← ++ (const byte*) ultoa::buffer#1
Constant right-side identified [155] (word) gotoxy::offset#0 ← (const word) gotoxy::$8 * (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#2 = ++uctoa::buffer#1
Constant (const byte*) ultoa::buffer#2 = ++ultoa::buffer#1
Constant (const word) gotoxy::offset#0 = gotoxy::$8*$28
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Constant right-side identified [153] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (const word) gotoxy::offset#0
Constant right-side identified [155] (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (const word) gotoxy::offset#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) gotoxy::$6 = CONIO_SCREEN_TEXT+gotoxy::offset#0
Constant (const byte*) gotoxy::$7 = CONIO_SCREEN_COLORS+gotoxy::offset#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Inlining Noop Cast [5] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [19] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [248] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 keeping printf_number_buffer::format_min_length#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [75] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [110] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 * (const byte) SIZEOF_DWORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) uctoa::max_digits#1
Inlining constant with var siblings (const byte*) uctoa::digit_values#1
Inlining constant with var siblings (const byte) uctoa::max_digits#2
Inlining constant with var siblings (const byte*) uctoa::digit_values#2
Inlining constant with var siblings (const byte) uctoa::max_digits#3
Inlining constant with var siblings (const byte*) uctoa::digit_values#3
Inlining constant with var siblings (const byte) uctoa::max_digits#4
Inlining constant with var siblings (const byte*) uctoa::digit_values#4
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte*) uctoa::buffer#0
Inlining constant with var siblings (const byte*) uctoa::buffer#1
Inlining constant with var siblings (const byte*) uctoa::buffer#2
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const word) utoa::value#1
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte) ultoa::max_digits#1
Inlining constant with var siblings (const dword*) ultoa::digit_values#1
Inlining constant with var siblings (const byte) ultoa::max_digits#2
Inlining constant with var siblings (const dword*) ultoa::digit_values#2
Inlining constant with var siblings (const byte) ultoa::max_digits#3
Inlining constant with var siblings (const dword*) ultoa::digit_values#3
Inlining constant with var siblings (const byte) ultoa::max_digits#4
Inlining constant with var siblings (const dword*) ultoa::digit_values#4
Inlining constant with var siblings (const byte) ultoa::started#0
Inlining constant with var siblings (const byte) ultoa::digit#0
Inlining constant with var siblings (const byte) ultoa::started#1
Inlining constant with var siblings (const byte*) ultoa::buffer#5
Inlining constant with var siblings (const byte*) ultoa::buffer#0
Inlining constant with var siblings (const byte*) ultoa::buffer#1
Inlining constant with var siblings (const byte*) ultoa::buffer#2
Inlining constant with var siblings (const byte) ultoa_append::digit#0
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#3
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#4
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#5
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#6
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#7
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#8
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#9
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#10
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#11
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#12
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#2
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte) printf_ulong::format_min_length#0
Inlining constant with var siblings (const byte) printf_ulong::format_justify_left#0
Inlining constant with var siblings (const byte) printf_ulong::format_sign_always#0
Inlining constant with var siblings (const byte) printf_ulong::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_ulong::format_upper_case#0
Inlining constant with var siblings (const byte) printf_ulong::format_radix#0
Inlining constant with var siblings (const byte) printf_ulong::format_min_length#1
Inlining constant with var siblings (const byte) printf_ulong::format_justify_left#1
Inlining constant with var siblings (const byte) printf_ulong::format_sign_always#1
Inlining constant with var siblings (const byte) printf_ulong::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_ulong::format_upper_case#1
Inlining constant with var siblings (const byte) printf_ulong::format_radix#1
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#0
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#0
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#0
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#0
Inlining constant with var siblings (const byte) printf_uchar::format_radix#0
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#1
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#1
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#1
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#1
Inlining constant with var siblings (const byte) printf_uchar::format_radix#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#0
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#1
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#2
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#1
Inlining constant with var siblings (const byte) queens::row#0
Inlining constant with var siblings (const byte) legal::i#0
Inlining constant with var siblings (const byte) legal::return#1
Inlining constant with var siblings (const byte) legal::return#2
Inlining constant with var siblings (const byte) legal::return#3
Inlining constant with var siblings (const byte) print::i#0
Inlining constant with var siblings (const byte) print::i1#0
Inlining constant with var siblings (const byte) print::j#0
Inlining constant with var siblings (const dword) count#0
Constant inlined cputs::s#5 = (const byte*) main::s2
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined cputs::s#6 = (const byte*) main::s3
Constant inlined cputs::s#3 = (const byte*) main::s
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined cputs::s#4 = (const byte*) main::s1
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined cputs::s#2 = (const byte*) tod_buffer
Constant inlined printf_number_buffer::format_justify_left#1 = (const byte) printf_uint::format_justify_left#0
Constant inlined conio_textcolor = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_ulong::format_upper_case#0 = (byte) 0
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined tod_str::return#2 = (const byte*) tod_buffer
Constant inlined printf_ulong::format_min_length#1 = (byte) 0
Constant inlined printf_ulong::format_upper_case#1 = (byte) 0
Constant inlined tod_str::return#0 = (const byte*) tod_buffer
Constant inlined printf_ulong::format_min_length#0 = (byte) 0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined clrscr::line_text#0 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28
Constant inlined ultoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_uchar::format_sign_always#1 = (byte) 0
Constant inlined legal::return#2 = (byte) 0
Constant inlined ultoa::digit#0 = (byte) 0
Constant inlined legal::return#3 = (byte) 0
Constant inlined printf_uchar::format_sign_always#0 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined printf_uchar::format_min_length#1 = (byte) 0
Constant inlined legal::return#1 = (byte) 1
Constant inlined memset::c#1 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined cputs::s#9 = (const byte*) print::s1
Constant inlined printf_uchar::format_min_length#0 = (byte) 0
Constant inlined printf_uchar::format_upper_case#1 = (byte) 0
Constant inlined cputs::s#7 = (const byte*) main::s4
Constant inlined cputs::s#8 = (const byte*) print::s
Constant inlined printf_uchar::format_upper_case#0 = (byte) 0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined uctoa::digit_values#1 = (const byte*) RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::digit_values#4 = (const byte*) RADIX_BINARY_VALUES_CHAR
Constant inlined printf_ulong::format_radix#0 = (const byte) DECIMAL
Constant inlined uctoa::digit_values#3 = (const byte*) RADIX_OCTAL_VALUES_CHAR
Constant inlined printf_ulong::format_radix#1 = (const byte) DECIMAL
Constant inlined printf_uchar::$0 = (byte) 0
Constant inlined printf_uchar::$1 = (byte) '+'
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined uctoa::max_digits#1 = (byte) 3
Constant inlined legal::i#0 = (byte) 1
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined ultoa::max_digits#3 = (byte) $b
Constant inlined ultoa::max_digits#4 = (byte) $20
Constant inlined uctoa::max_digits#3 = (byte) 3
Constant inlined printf_number_buffer::format_min_length#1 = (const byte) printf_uint::format_min_length#0
Constant inlined uctoa::max_digits#2 = (byte) 2
Constant inlined uctoa::max_digits#4 = (byte) 8
Constant inlined uctoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined uctoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_uchar::format_zero_padding#1 = (byte) 0
Constant inlined uctoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_uchar::format_zero_padding#0 = (byte) 0
Constant inlined printf_ulong::$1 = (byte) '+'
Constant inlined printf_ulong::$0 = (byte) 0
Constant inlined ultoa::max_digits#1 = (byte) $a
Constant inlined utoa::started#1 = (byte) 1
Constant inlined ultoa::max_digits#2 = (byte) 8
Constant inlined utoa::started#0 = (byte) 0
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::digit_values#2 = (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Constant inlined ultoa::digit_values#3 = (const dword*) RADIX_OCTAL_VALUES_LONG
Constant inlined ultoa_append::digit#0 = (byte) 0
Constant inlined ultoa::digit_values#1 = (const dword*) RADIX_DECIMAL_VALUES_LONG
Constant inlined ultoa::digit_values#4 = (const dword*) RADIX_BINARY_VALUES_LONG
Constant inlined utoa::value#1 = (const word) printf_uint::uvalue#0
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#1 = (byte) 0
Constant inlined memset::num#1 = (byte) $28
Constant inlined memset::num#0 = (byte) $28
Constant inlined printf_ulong::format_justify_left#1 = (byte) 0
Constant inlined printf_ulong::format_justify_left#0 = (byte) 0
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined print::j#0 = (byte) 1
Constant inlined ultoa::started#1 = (byte) 1
Constant inlined count#0 = (dword) 0
Constant inlined printf_ulong::format_zero_padding#0 = (byte) 0
Constant inlined printf_ulong::format_zero_padding#1 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined queens::row#0 = (byte) 1
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined print::i1#0 = (byte) 1
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28
Constant inlined ultoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_upper_case#1 = (const byte) printf_uint::format_upper_case#0
Constant inlined printf_string::str#0 = (const byte*) tod_buffer
Constant inlined ultoa::started#0 = (byte) 0
Constant inlined printf_ulong::format_sign_always#1 = (byte) 0
Constant inlined printf_ulong::format_sign_always#0 = (byte) 0
Constant inlined memset::str#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_number_buffer::format_zero_padding#1 = (const byte) printf_uint::format_zero_padding#0
Constant inlined memset::str#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_uint::$0 = (byte) 0
Constant inlined gotoxy::$8 = (word)(const byte) gotoxy::y#2
Constant inlined gotoxy::$6 = (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0
Constant inlined gotoxy::$7 = (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0
Constant inlined print::i#0 = (byte) 1
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined printf_uchar::format_radix#1 = (const byte) HEXADECIMAL
Constant inlined cputs::s#12 = (const byte*) print::s4
Constant inlined printf_uchar::format_radix#0 = (const byte) HEXADECIMAL
Constant inlined cputs::s#11 = (const byte*) print::s3
Constant inlined cputs::s#10 = (const byte*) print::s2
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [44] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [45] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [46] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Adding number conversion cast (unumber) 1 in [102] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [103] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [104] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Identical Phi Values (byte) printf_ulong::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_radix#2 (const byte) DECIMAL
Identical Phi Values (byte) printf_ulong::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_ulong::format_upper_case#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_radix#2 (const byte) HEXADECIMAL
Identical Phi Values (byte) printf_uchar::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_upper_case#2 (byte) 0
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#10 (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) ultoa::radix#0 = DECIMAL
Constant (const byte) printf_number_buffer::format_min_length#0 = 0
Constant (const byte) printf_number_buffer::format_justify_left#0 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = 0
Constant (const byte) printf_number_buffer::format_upper_case#0 = 0
Constant (const byte) uctoa::radix#0 = HEXADECIMAL
Constant (const byte) printf_number_buffer::format_min_length#2 = 0
Constant (const byte) printf_number_buffer::format_justify_left#2 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#2 = 0
Constant (const byte) printf_number_buffer::format_upper_case#2 = 0
Constant (const byte*) strlen::str#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const to_nomodify byte*) cputs::s#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) strupr::str#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [13] if((byte) $28<=(byte) 0) goto memset::@1
if() condition always false - eliminating [34] if((const byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
if() condition always true - replacing block destination [35] if((const byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [36] if((const byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
if() condition always false - eliminating [37] if((const byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
if() condition always true - replacing block destination [92] if((const byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
if() condition always false - eliminating [93] if((const byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [94] if((const byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
if() condition always false - eliminating [95] if((const byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
if() condition always false - eliminating [200] if((byte) 0!=(byte) 0) goto printf_ulong::@1
if() condition always false - eliminating [219] if((byte) 0!=(byte) 0) goto printf_uchar::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) uctoa::radix#0
Eliminating unused constant (const byte) ultoa::radix#0
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Eliminating unused constant (const byte) HEXADECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing unused block uctoa::@1
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing PHI-reference to removed block (printf_ulong::@1) in block printf_ulong::@3
Removing unused block printf_ulong::@1
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte*) strlen::str#1
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#2
Constant inlined printf_number_buffer::format_justify_left#0 = (byte) 0
Constant inlined printf_number_buffer::format_zero_padding#2 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#2 = (byte) 0
Constant inlined cputs::s#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_justify_left#2 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#0 = (byte) 0
Constant inlined strlen::str#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_min_length#0 = (byte) 0
Constant inlined printf_number_buffer::format_zero_padding#0 = (byte) 0
Constant inlined printf_number_buffer::format_min_length#2 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Identical Phi Values (byte) uctoa::max_digits#7 (byte) 2
Identical Phi Values (byte*) uctoa::digit_values#8 (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Identical Phi Values (byte) ultoa::max_digits#7 (byte) $a
Identical Phi Values (dword*) ultoa::digit_values#8 (const dword*) RADIX_DECIMAL_VALUES_LONG
Identical Phi Values (byte~) printf_ulong::$2 (byte) 0
Identical Phi Values (byte~) printf_uchar::$2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [36] (byte~) uctoa::$4 ← (byte) 2 - (byte) 1
Constant right-side identified [86] (byte~) ultoa::$4 ← (byte) $a - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) uctoa::$4 = 2-1
Constant (const byte) ultoa::$4 = $a-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) RADIX_BINARY_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_DECIMAL_VALUES_CHAR
Eliminating unused constant (const dword*) RADIX_BINARY_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_OCTAL_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined uctoa::$4 = (byte) 2-(byte) 1
Constant inlined ultoa::$4 = (byte) $a-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Added new block during phi lifting queens::@11(between queens::@9 and queens::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_string::@11
Adding NOP phi() at start of printf_string::@2
Adding NOP phi() at start of printf_string::@8
Adding NOP phi() at start of printf_ulong::@2
Adding NOP phi() at start of printf_ulong::@5
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
Adding NOP phi() at start of queens
Adding NOP phi() at start of print
Adding NOP phi() at start of print::@12
Adding NOP phi() at start of print::@14
Adding NOP phi() at start of print::@15
Adding NOP phi() at start of print::@3
Adding NOP phi() at start of print::@5
Adding NOP phi() at start of print::@18
Adding NOP phi() at start of print::@11
Adding NOP phi() at start of print::@20
Adding NOP phi() at start of print::@9
Adding NOP phi() at start of print::@19
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@6
Adding NOP phi() at start of uctoa::@2
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of legal
Adding NOP phi() at start of legal::@3
Adding NOP phi() at start of legal::@8
Adding NOP phi() at start of legal::@7
Adding NOP phi() at start of legal::@4
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of utoa::@5
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to clrscr:11 cputs:13 cputs:15 printf_uint:17 tod_init:22 queens:24 tod_read:26 tod_str:35 cputs:37 printf_ulong:40 cputs:42 printf_string:44 cputs:46 
Calls in [cputs] to cputc:58 
Calls in [cputc] to cscroll:70 cputln:74 
Calls in [cputln] to cscroll:83 
Calls in [cscroll] to memcpy:89 memcpy:91 memset:93 memset:95 
Calls in [printf_string] to cputs:129 
Calls in [printf_ulong] to ultoa:136 printf_number_buffer:139 
Calls in [printf_number_buffer] to strlen:145 cputc:163 strupr:169 cputs:172 printf_padding:179 printf_padding:183 printf_padding:187 
Calls in [printf_padding] to cputc:197 
Calls in [strupr] to toupper:206 
Calls in [ultoa] to ultoa_append:254 
Calls in [queens] to legal:305 print:314 
Calls in [print] to gotoxy:326 cputs:328 printf_ulong:331 cputs:333 cputs:342 printf_uchar:345 cputs:353 cputs:358 printf_uchar:362 
Calls in [printf_uchar] to uctoa:369 printf_number_buffer:372 
Calls in [uctoa] to uctoa_append:400 
Calls in [printf_uint] to utoa:459 printf_number_buffer:462 
Calls in [utoa] to utoa_append:491 

Created 66 initial phi equivalence classes
Coalesced [39] printf_ulong::uvalue#6 ← printf_ulong::uvalue#0
Coalesced [50] cputs::s#17 ← cputs::s#14
Coalesced [57] cputc::c#5 ← cputc::c#0
Coalesced [59] cputs::s#18 ← cputs::s#0
Coalesced [111] memset::dst#5 ← memset::dst#1
Coalesced [123] memcpy::src#5 ← memcpy::src#1
Coalesced [124] memcpy::dst#5 ← memcpy::dst#1
Coalesced [138] printf_number_buffer::buffer_sign#16 ← printf_number_buffer::buffer_sign#0
Coalesced [151] printf_number_buffer::len#5 ← printf_number_buffer::len#1
Coalesced [162] cputc::c#6 ← cputc::c#2
Coalesced [178] printf_padding::length#10 ← printf_padding::length#2
Coalesced [182] printf_padding::length#9 ← printf_padding::length#1
Coalesced [186] printf_padding::length#11 ← printf_padding::length#0
Coalesced [189] printf_number_buffer::padding#18 ← printf_number_buffer::padding#1
Coalesced [190] printf_number_buffer::len#4 ← printf_number_buffer::len#0
Coalesced [196] cputc::c#7 ← cputc::c#1
Coalesced [199] printf_padding::i#5 ← printf_padding::i#1
Coalesced [211] strupr::src#5 ← strupr::src#1
Coalesced [214] toupper::return#7 ← toupper::ch#0
Coalesced [218] toupper::return#6 ← toupper::return#0
Coalesced [226] strlen::str#6 ← strlen::str#0
Coalesced [227] strlen::len#5 ← strlen::len#1
Coalesced [230] ultoa::value#17 ← ultoa::value#1
Coalesced [242] ultoa::value#18 ← ultoa::value#2
Coalesced [243] ultoa::started#6 ← ultoa::started#2
Coalesced [244] ultoa::buffer#23 ← ultoa::buffer#11
Coalesced [247] ultoa::digit#7 ← ultoa::digit#1
Coalesced (already) [248] ultoa::value#16 ← ultoa::value#6
Coalesced (already) [249] ultoa::started#5 ← ultoa::started#4
Coalesced (already) [250] ultoa::buffer#22 ← ultoa::buffer#14
Coalesced [258] ultoa::value#19 ← ultoa::value#0
Coalesced [259] ultoa::buffer#24 ← ultoa::buffer#4
Coalesced [260] ultoa_append::value#6 ← ultoa_append::value#0
Coalesced [267] ultoa_append::value#7 ← ultoa_append::value#1
Coalesced [268] ultoa_append::digit#5 ← ultoa_append::digit#1
Coalesced [311] queens::row#14 ← queens::row#1
Coalesced (already) [312] count#39 ← count#10
Coalesced (already) [315] queens::row#13 ← queens::row#10
Coalesced [316] count#38 ← count#25
Coalesced (already) [317] queens::row#16 ← queens::row#10
Coalesced (already) [318] count#41 ← count#10
Coalesced [322] queens::row#15 ← queens::row#2
Coalesced (already) [323] count#40 ← count#10
Coalesced [330] printf_ulong::uvalue#7 ← printf_ulong::uvalue#1
Coalesced [344] printf_uchar::uvalue#6 ← printf_uchar::uvalue#1
Coalesced [350] print::i1#14 ← print::i1#1
Coalesced [356] print::j#9 ← print::j#1
Coalesced [361] printf_uchar::uvalue#7 ← printf_uchar::uvalue#0
Coalesced [364] print::i#5 ← print::i#1
Coalesced [371] printf_number_buffer::buffer_sign#14 ← printf_number_buffer::buffer_sign#2
Coalesced [378] uctoa::value#17 ← uctoa::value#1
Coalesced [388] uctoa::value#18 ← uctoa::value#2
Coalesced [389] uctoa::started#6 ← uctoa::started#2
Coalesced [390] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [393] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [394] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [395] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [396] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [404] uctoa::value#19 ← uctoa::value#0
Coalesced [405] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [406] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [413] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [414] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced [433] legal::diff1_return#6 ← legal::diff1_return#1
Coalesced [438] legal::diff2_return#6 ← legal::diff2_return#1
Coalesced [443] legal::i#16 ← legal::i#1
Coalesced [445] legal::diff2_return#5 ← legal::diff2_return#0
Coalesced [447] legal::diff1_return#5 ← legal::diff1_return#0
Coalesced [461] printf_number_buffer::buffer_sign#15 ← printf_number_buffer::buffer_sign#1
Coalesced [479] utoa::value#17 ← utoa::value#2
Coalesced [480] utoa::started#6 ← utoa::started#2
Coalesced [481] utoa::buffer#23 ← utoa::buffer#11
Coalesced [484] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [485] utoa::value#16 ← utoa::value#6
Coalesced (already) [486] utoa::started#5 ← utoa::started#4
Coalesced (already) [487] utoa::buffer#22 ← utoa::buffer#14
Coalesced [495] utoa::value#18 ← utoa::value#0
Coalesced [496] utoa::buffer#24 ← utoa::buffer#4
Coalesced [497] utoa_append::value#6 ← utoa_append::value#0
Coalesced [504] utoa_append::value#7 ← utoa_append::value#1
Coalesced [505] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [520] clrscr::l#7 ← clrscr::l#1
Coalesced [521] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [522] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [526] clrscr::c#4 ← clrscr::c#1
Coalesced down to 56 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) @4
Culled Empty Block (label) main::@13
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) printf_string::@1
Culled Empty Block (label) printf_string::@11
Culled Empty Block (label) printf_string::@8
Culled Empty Block (label) printf_ulong::@2
Culled Empty Block (label) printf_ulong::@5
Culled Empty Block (label) printf_number_buffer::@14
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@20
Culled Empty Block (label) printf_number_buffer::@21
Culled Empty Block (label) printf_number_buffer::@18
Culled Empty Block (label) printf_number_buffer::@16
Culled Empty Block (label) printf_number_buffer::@28
Culled Empty Block (label) strupr::@3
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) ultoa::@1
Culled Empty Block (label) ultoa::@5
Culled Empty Block (label) ultoa::@17
Culled Empty Block (label) queens::@10
Culled Empty Block (label) queens::@11
Culled Empty Block (label) print::@15
Culled Empty Block (label) print::@3
Culled Empty Block (label) print::@18
Culled Empty Block (label) print::@20
Culled Empty Block (label) print::@19
Culled Empty Block (label) printf_uchar::@2
Culled Empty Block (label) printf_uchar::@5
Culled Empty Block (label) uctoa::@6
Culled Empty Block (label) uctoa::@2
Culled Empty Block (label) uctoa::@5
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) gotoxy::@1
Culled Empty Block (label) legal::@3
Culled Empty Block (label) legal::@8
Culled Empty Block (label) legal::@7
Culled Empty Block (label) legal::@4
Culled Empty Block (label) printf_uint::@2
Culled Empty Block (label) printf_uint::@5
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) clrscr::@2
Renumbering block @3 to @2
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block strupr::@4 to strupr::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_ulong::@3 to printf_ulong::@1
Renumbering block printf_ulong::@4 to printf_ulong::@2
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Renumbering block printf_string::@2 to printf_string::@1
Renumbering block legal::@5 to legal::@3
Renumbering block legal::@6 to legal::@4
Renumbering block legal::@9 to legal::@5
Renumbering block print::@4 to print::@3
Renumbering block print::@5 to print::@4
Renumbering block print::@6 to print::@5
Renumbering block print::@7 to print::@6
Renumbering block print::@8 to print::@7
Renumbering block print::@9 to print::@8
Renumbering block print::@10 to print::@9
Renumbering block print::@11 to print::@10
Renumbering block print::@12 to print::@11
Renumbering block print::@13 to print::@12
Renumbering block print::@14 to print::@13
Renumbering block print::@16 to print::@14
Renumbering block print::@17 to print::@15
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of printf_string
Adding NOP phi() at start of printf_string::@1
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strlen
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa_append
Adding NOP phi() at start of queens
Adding NOP phi() at start of print
Adding NOP phi() at start of print::@11
Adding NOP phi() at start of print::@13
Adding NOP phi() at start of print::@4
Adding NOP phi() at start of print::@10
Adding NOP phi() at start of print::@8
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of legal
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of clrscr

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [17] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [18] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [19] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [20] call tod_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [21] phi()
  [22] call queens 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [23] phi()
  [24] call tod_read 
  [25] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [26] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [27] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [28] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@7
main::@7: scope:[main]  from main::@6
  [29] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [30] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [31] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [32] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [33] call tod_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [34] phi()
  [35] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10
  [37] call printf_ulong 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [38] phi()
  [39] call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [40] phi()
  [41] call printf_string 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [42] phi()
  [43] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@12
  [44] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@10 main::@12 main::@2 main::@8 print::@10 print::@11 print::@13 print::@4 print::@8 printf_number_buffer::@5 printf_string::@1
  [45] (to_nomodify byte*) cputs::s#14 ← phi( main::@1/(const byte*) main::s main::@10/(const byte*) main::s3 main::@12/(const byte*) main::s4 main::@2/(const byte*) main::s1 main::@8/(const byte*) main::s2 print::@10/(const byte*) print::s4 print::@11/(const byte*) print::s print::@13/(const byte*) print::s1 print::@4/(const byte*) print::s2 print::@8/(const byte*) print::s3 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_string::@1/(const byte*) tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [46] (to_nomodify byte*) cputs::s#13 ← phi( cputs/(to_nomodify byte*) cputs::s#14 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13)
  [48] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13
  [49] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [50] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [51] (byte) cputc::c#0 ← (byte) cputs::c#1
  [52] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [53] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [54] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [61] (byte) conio_cursor_x ← (byte) 0
  [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [63] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [64] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [65] phi()
  [66] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [72] (byte) conio_cursor_x ← (byte) 0
  [73] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [74] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [75] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [77] phi()
  [78] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [79] phi()
  [80] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [81] phi()
  [82] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [83] phi()
  [84] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [89] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [90] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [91] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [91] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [94] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [96] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [97] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [98] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [99] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [99] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [103] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [103] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [105] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [107] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [108] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@11
  [109] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [110] phi()
  [111] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [112] return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@9 print::@12
  [113] (dword) printf_ulong::uvalue#2 ← phi( main::@9/(dword) printf_ulong::uvalue#0 print::@12/(dword) printf_ulong::uvalue#1 )
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2
  [116] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [117] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [118] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [119] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [120] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 printf_ulong::@2/(byte) 0 )
  [120] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#2 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [120] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 printf_ulong::@2/(byte) 0 )
  [120] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 printf_ulong::@2/(byte) 0 )
  [120] (byte) printf_number_buffer::format_min_length#3 ← phi( printf_uchar::@2/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_min_length#0 printf_ulong::@2/(byte) 0 )
  [121] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [122] phi()
  [123] call strlen 
  [124] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [127] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [128] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [129] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2
  [131] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [132] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [133] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [134] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [135] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [136] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [137] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [138] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [139] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [140] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [141] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [142] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [143] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [144] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [145] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [146] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [147] phi()
  [148] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [149] phi()
  [150] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [151] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [152] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [153] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [154] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [155] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [156] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [157] (byte) printf_padding::pad#7 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [157] (byte) printf_padding::length#6 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [158] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [159] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [160] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [161] (byte) cputc::c#1 ← (byte) printf_padding::pad#7
  [162] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [163] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [164] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [165] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [167] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [169] call toupper 
  [170] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [171] (byte~) strupr::$0 ← (byte) toupper::return#3
  [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [173] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [174] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [175] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [177] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [178] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [179] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [180] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [180] (byte*) strlen::str#3 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [182] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [183] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [184] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [185] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [186] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [186] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [186] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [186] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [187] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [191] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [192] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [195] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [197] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [197] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [197] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [198] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [202] call ultoa_append 
  [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [205] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [206] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [207] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [207] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [210] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [211] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [214] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [215] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [217] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [218] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [220] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [221] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [223] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [224] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [226] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [227] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [229] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [230] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [232] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [233] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [235] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [236] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [237] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@6
  [238] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [239] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [240] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [241] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [242] return 
  to:@return

(void()) queens()
queens: scope:[queens]  from main::@5
  [243] phi()
  to:queens::@1
queens::@1: scope:[queens]  from queens queens::@4 queens::@7 queens::@8 queens::@9
  [244] (dword) count#10 ← phi( queens/(dword) 0 queens::@4/(dword) count#25 queens::@7/(dword) count#10 queens::@8/(dword) count#10 queens::@9/(dword) count#10 )
  [244] (byte) queens::row#10 ← phi( queens/(byte) 1 queens::@4/(byte) queens::row#10 queens::@7/(byte) queens::row#1 queens::@8/(byte) queens::row#2 queens::@9/(byte) queens::row#10 )
  to:queens::@2
queens::@2: scope:[queens]  from queens::@1
  [245] *((const byte*) board + (byte) queens::row#10) ← ++ *((const byte*) board + (byte) queens::row#10)
  [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3
  to:queens::@5
queens::@5: scope:[queens]  from queens::@2
  [247] (byte) legal::row#0 ← (byte) queens::row#10
  [248] (byte) legal::column#0 ← *((const byte*) board + (byte) queens::row#10)
  [249] call legal 
  [250] (byte) legal::return#0 ← (byte) legal::return#4
  to:queens::@9
queens::@9: scope:[queens]  from queens::@5
  [251] (byte~) queens::$2 ← (byte) legal::return#0
  [252] if((byte) 0==(byte~) queens::$2) goto queens::@1
  to:queens::@6
queens::@6: scope:[queens]  from queens::@9
  [253] if((byte) queens::row#10==(byte) 8) goto queens::@4
  to:queens::@7
queens::@7: scope:[queens]  from queens::@6
  [254] (byte) queens::row#1 ← ++ (byte) queens::row#10
  to:queens::@1
queens::@4: scope:[queens]  from queens::@6
  [255] (dword) count#25 ← ++ (dword) count#10
  [256] call print 
  to:queens::@1
queens::@3: scope:[queens]  from queens::@2
  [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0
  [258] if((byte) queens::row#10==(byte) 1) goto queens::@return
  to:queens::@8
queens::@8: scope:[queens]  from queens::@3
  [259] (byte) queens::row#2 ← -- (byte) queens::row#10
  to:queens::@1
queens::@return: scope:[queens]  from queens::@3
  [260] return 
  to:@return

(void()) print()
print: scope:[print]  from queens::@4
  [261] phi()
  [262] call gotoxy 
  to:print::@11
print::@11: scope:[print]  from print
  [263] phi()
  [264] call cputs 
  to:print::@12
print::@12: scope:[print]  from print::@11
  [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25
  [266] call printf_ulong 
  to:print::@13
print::@13: scope:[print]  from print::@12
  [267] phi()
  [268] call cputs 
  to:print::@1
print::@1: scope:[print]  from print::@13 print::@14
  [269] (byte) print::i#2 ← phi( print::@13/(byte) 1 print::@14/(byte) print::i#1 )
  [270] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2
  to:print::@3
print::@3: scope:[print]  from print::@1 print::@7
  [271] (byte) print::i1#2 ← phi( print::@1/(byte) 1 print::@7/(byte) print::i1#1 )
  [272] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4
  to:print::@return
print::@return: scope:[print]  from print::@3
  [273] return 
  to:@return
print::@4: scope:[print]  from print::@3
  [274] phi()
  [275] call cputs 
  to:print::@15
print::@15: scope:[print]  from print::@4
  [276] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2
  [277] call printf_uchar 
  to:print::@5
print::@5: scope:[print]  from print::@15 print::@9
  [278] (byte) print::j#2 ← phi( print::@9/(byte) print::j#1 print::@15/(byte) 1 )
  [279] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6
  to:print::@7
print::@7: scope:[print]  from print::@5
  [280] (byte) print::i1#1 ← ++ (byte) print::i1#2
  to:print::@3
print::@6: scope:[print]  from print::@5
  [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8
  to:print::@10
print::@10: scope:[print]  from print::@6
  [282] phi()
  [283] call cputs 
  to:print::@9
print::@9: scope:[print]  from print::@10 print::@8
  [284] (byte) print::j#1 ← ++ (byte) print::j#2
  to:print::@5
print::@8: scope:[print]  from print::@6
  [285] phi()
  [286] call cputs 
  to:print::@9
print::@2: scope:[print]  from print::@1
  [287] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2
  [288] call printf_uchar 
  to:print::@14
print::@14: scope:[print]  from print::@2
  [289] (byte) print::i#1 ← ++ (byte) print::i#2
  to:print::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from print::@15 print::@2
  [290] (byte) printf_uchar::uvalue#2 ← phi( print::@15/(byte) printf_uchar::uvalue#1 print::@2/(byte) printf_uchar::uvalue#0 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [292] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [293] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [294] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [295] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [296] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [297] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [298] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [298] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [298] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [298] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [299] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [302] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [303] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [304] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [305] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [306] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [307] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [307] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [307] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [308] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [310] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [311] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [312] call uctoa_append 
  [313] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [314] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [315] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [316] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [317] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [317] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [318] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [320] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [321] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from print
  [323] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0
  [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [328] return 
  to:@return

(byte()) legal((byte) legal::row , (byte) legal::column)
legal: scope:[legal]  from queens::@5
  [329] phi()
  to:legal::@1
legal::@1: scope:[legal]  from legal legal::@3
  [330] (byte) legal::i#10 ← phi( legal/(byte) 1 legal::@3/(byte) legal::i#1 )
  [331] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1
  [332] if((byte) legal::i#10<=(byte~) legal::$0) goto legal::@2
  to:legal::@return
legal::@return: scope:[legal]  from legal::@1 legal::@2 legal::@5
  [333] (byte) legal::return#4 ← phi( legal::@1/(byte) 1 legal::@2/(byte) 0 legal::@5/(byte) 0 )
  [334] return 
  to:@return
legal::@2: scope:[legal]  from legal::@1
  [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return
  to:legal::@4
legal::@4: scope:[legal]  from legal::@2
  [336] (byte) legal::diff1_a#0 ← *((const byte*) board + (byte) legal::i#10)
  to:legal::diff1
legal::diff1: scope:[legal]  from legal::@4
  [337] if((byte) legal::diff1_a#0<(byte) legal::column#0) goto legal::diff1_@1
  to:legal::diff1_@3
legal::diff1_@3: scope:[legal]  from legal::diff1
  [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0
  to:legal::diff1_@return
legal::diff1_@return: scope:[legal]  from legal::diff1_@1 legal::diff1_@3
  [339] (byte) legal::diff1_return#2 ← phi( legal::diff1_@1/(byte) legal::diff1_return#0 legal::diff1_@3/(byte) legal::diff1_return#1 )
  to:legal::diff2
legal::diff2: scope:[legal]  from legal::diff1_@return
  [340] if((byte) legal::i#10<(byte) legal::row#0) goto legal::diff2_@1
  to:legal::diff2_@3
legal::diff2_@3: scope:[legal]  from legal::diff2
  [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0
  to:legal::diff2_@return
legal::diff2_@return: scope:[legal]  from legal::diff2_@1 legal::diff2_@3
  [342] (byte) legal::diff2_return#2 ← phi( legal::diff2_@1/(byte) legal::diff2_return#0 legal::diff2_@3/(byte) legal::diff2_return#1 )
  to:legal::@5
legal::@5: scope:[legal]  from legal::diff2_@return
  [343] if((byte) legal::diff1_return#2!=(byte) legal::diff2_return#2) goto legal::@3
  to:legal::@return
legal::@3: scope:[legal]  from legal::@5
  [344] (byte) legal::i#1 ← ++ (byte) legal::i#10
  to:legal::@1
legal::diff2_@1: scope:[legal]  from legal::diff2
  [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10
  to:legal::diff2_@return
legal::diff1_@1: scope:[legal]  from legal::diff1
  [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0
  to:legal::diff1_@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main::@4
  [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [349] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [350] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [351] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [352] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [353] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@3
  [354] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [356] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [357] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [358] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [359] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [360] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [361] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [361] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [361] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [361] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [362] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [366] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [367] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [370] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [372] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [372] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [372] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [373] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [375] (word) utoa_append::value#0 ← (word) utoa::value#2
  [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [377] call utoa_append 
  [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [379] (word) utoa::value#0 ← (word) utoa_append::return#0
  [380] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [381] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [382] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [382] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [385] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [386] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [388] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [389] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@5/(byte*) clrscr::line_cols#1 )
  [389] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@5/(byte*) clrscr::line_text#1 )
  [389] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [390] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [391] (byte) conio_cursor_x ← (byte) 0
  [392] (byte) conio_cursor_y ← (byte) 0
  [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [395] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [396] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [397] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [400] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [403] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3

null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope cputs
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope cputs
null depth in calling loop Loop head: queens::@1 tails: queens::@9 queens::@8 queens::@7 queens::@4 blocks: queens::@9 queens::@5 queens::@2 queens::@1 queens::@8 queens::@3 queens::@7 queens::@6 queens::@4  in scope print
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope cputs
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope cputs
null depth in calling loop Loop head: print::@5 tails: print::@9 blocks: print::@9 print::@10 print::@8 print::@6 print::@5  in scope cputs
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: print::@3 tails: print::@7 blocks: print::@7 print::@5 print::@15 print::@9 print::@4 print::@10 print::@8 print::@3 print::@6  in scope printf_uchar
null depth in calling loop Loop head: print::@1 tails: print::@14 blocks: print::@14 print::@2 print::@1  in scope printf_uchar
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte*) conio_cursor_color loadstore 1.1435897436410828E13
(byte*) conio_cursor_text loadstore 1.1319796954822896E13
(byte) conio_cursor_x loadstore 1.311475410383115E12
(byte) conio_cursor_y loadstore 1.6019900498010504E13
(dword) count
(dword) count#10 276.51724137931035
(dword) count#25 387.19354838709677
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 2.0000000002E10
(byte) cputc::c#1 2.000000000002E12
(byte) cputc::c#2 2.00000002E8
(byte) cputc::c#3 1.05050500000025E13
(void()) cputln()
(byte*~) cputln::$1 2.00000000000002E14
(byte*~) cputln::$2 2.00000000000002E14
(word) cputln::ln_offset
(word) cputln::ln_offset#0 1.00000000000001E14
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0000000001E10
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5.0000000005E9
(to_nomodify byte*) cputs::s#13 1.5500000002E10
(to_nomodify byte*) cputs::s#14 1.000000001E9
(void()) cscroll()
(byte*~) cscroll::$7 2.000000000000002E15
(byte*~) cscroll::$8 2.000000000000002E15
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word) gotoxy::offset
(byte) gotoxy::x
(byte) gotoxy::y
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 2000002.0
(byte) legal::column
(byte) legal::column#0 235353.23529411765
(byte) legal::diff1_a
(byte) legal::diff1_a#0 2000002.0
(byte) legal::diff1_b
(byte) legal::diff1_return
(byte) legal::diff1_return#0 2000002.0
(byte) legal::diff1_return#1 2000002.0
(byte) legal::diff1_return#2 600000.6000000001
(byte) legal::diff2_a
(byte) legal::diff2_b
(byte) legal::diff2_return
(byte) legal::diff2_return#0 2000002.0
(byte) legal::diff2_return#1 2000002.0
(byte) legal::diff2_return#2 3000003.0
(byte) legal::i
(byte) legal::i#1 2000002.0
(byte) legal::i#10 571429.1428571428
(byte) legal::return
(byte) legal::return#0 2002.0
(byte) legal::return#4 333.6666666666667
(byte) legal::row
(byte) legal::row#0 222278.05555555556
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.0E20
(byte*) memcpy::dst#2 1.0000333333333333E20
(byte*) memcpy::dst#4 2.0E16
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.0E20
(byte*) memcpy::src#2 1.000025E20
(byte*) memcpy::src#4 1.0E16
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.250125E19
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.4285714285714287E19
(byte*) memset::dst
(byte*) memset::dst#1 2.0E20
(byte*) memset::dst#2 1.3333666666666666E20
(byte*) memset::dst#4 2.0E16
(byte*) memset::end
(byte*) memset::end#0 1.6668333333333332E19
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(void()) print()
(byte) print::i
(byte) print::i#1 2000002.0
(byte) print::i#2 1000001.0
(byte) print::i1
(byte) print::i1#1 2000002.0
(byte) print::i1#2 1000000.357142857
(byte) print::j
(byte) print::j#1 2.0000002E7
(byte) print::j#2 5714286.285714285
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 1.00000001E8
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 200002.0
(byte) printf_number_buffer::buffer_sign#1 202.0
(byte) printf_number_buffer::buffer_sign#10 1.55050053E7
(byte) printf_number_buffer::buffer_sign#2 2.0000002E7
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 6451612.9677419355
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 1.00000001E7
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 3846153.8846153845
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 9375000.09375
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 1.500000015E8
(signed byte) printf_number_buffer::len#1 2.00000002E8
(signed byte) printf_number_buffer::len#2 3.00000003E8
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 1.00000001E8
(signed byte) printf_number_buffer::padding#10 1.904761923809524E7
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 2.000000000002E12
(byte) printf_padding::i#2 7.5000000000075E11
(byte) printf_padding::length
(byte) printf_padding::length#0 2.00000002E8
(byte) printf_padding::length#1 2.00000002E8
(byte) printf_padding::length#2 2.00000002E8
(byte) printf_padding::length#6 1.6671666666733334E11
(byte) printf_padding::pad
(byte) printf_padding::pad#7 1.6666666666683334E11
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 2000002.0
(byte) printf_uchar::uvalue#1 2000002.0
(byte) printf_uchar::uvalue#2 6000001.5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 22.0
(dword) printf_ulong::uvalue#1 20002.0
(dword) printf_ulong::uvalue#2 55006.5
(void()) queens()
(byte~) queens::$2 2002.0
(byte) queens::row
(byte) queens::row#1 2002.0
(byte) queens::row#10 1144.0
(byte) queens::row#2 2002.0
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 1.000000000001E12
(word) strlen::len#2 5.0002500000075E11
(word) strlen::return
(word) strlen::return#2 2.00000002E8
(byte*) strlen::str
(byte*) strlen::str#0 2.000000000002E12
(byte*) strlen::str#3 1.000000000001E12
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 2.000000000002E12
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 2.000000000002E12
(byte*) strupr::src#2 7.142857142864285E11
(byte*) strupr::str
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 12.444444444444443
(byte) tod_read::return_HOURS#2 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 16.0
(byte) tod_read::return_MIN#2 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 22.4
(byte) tod_read::return_SEC#2 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 37.33333333333333
(byte) tod_read::return_TENTHS#2 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 202.0
(byte~) tod_str::$1 202.0
(byte~) tod_str::$10 202.0
(byte~) tod_str::$11 202.0
(byte~) tod_str::$12 202.0
(byte~) tod_str::$13 202.0
(byte~) tod_str::$14 202.0
(byte~) tod_str::$15 202.0
(byte~) tod_str::$2 202.0
(byte~) tod_str::$3 202.0
(byte~) tod_str::$4 202.0
(byte~) tod_str::$5 202.0
(byte~) tod_str::$6 202.0
(byte~) tod_str::$7 202.0
(byte~) tod_str::$8 202.0
(byte~) tod_str::$9 202.0
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 8.52
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1.7000000000001998E13
(byte) toupper::return
(byte) toupper::return#0 2.0000000000002E13
(byte) toupper::return#2 1.0333333333334666E13
(byte) toupper::return#3 2.000000000002E12
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 3.3350000000500004E10
(byte*) uctoa::buffer#14 1.500000000015E11
(byte*) uctoa::buffer#3 2.00000002E8
(byte*) uctoa::buffer#4 2.00000000002E11
(byte) uctoa::digit
(byte) uctoa::digit#1 2.00000000002E11
(byte) uctoa::digit#2 3.076923076953846E10
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 6.0000000000600006E10
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 6.0000000000600006E10
(byte) uctoa::started#4 1.00000000001E11
(byte) uctoa::value
(byte) uctoa::value#0 1.00000000001E11
(byte) uctoa::value#1 5.5000001E7
(byte) uctoa::value#2 6.670000000100001E10
(byte) uctoa::value#6 1.500000000015E11
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 1.3750000000025E11
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0E16
(byte) uctoa_append::digit#2 1.00005E16
(byte) uctoa_append::return
(byte) uctoa_append::return#0 2.00000000002E11
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3.33335E15
(byte) uctoa_append::value
(byte) uctoa_append::value#0 3.666666666673334E11
(byte) uctoa_append::value#1 2.0E16
(byte) uctoa_append::value#2 5.000183333333334E15
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 2.00000002E8
(byte~) ultoa::$11 2000002.0
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 2.871428614285714E7
(byte*) ultoa::buffer#14 1.500000015E8
(byte*) ultoa::buffer#3 2000002.0
(byte*) ultoa::buffer#4 2.00000002E8
(byte) ultoa::digit
(byte) ultoa::digit#1 2.00000002E8
(byte) ultoa::digit#2 2.857142885714286E7
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 6.0000000599999994E7
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 5.00000005E7
(byte) ultoa::started#4 1.00000001E8
(dword) ultoa::value
(dword) ultoa::value#0 1.00000001E8
(dword) ultoa::value#1 550001.0
(dword) ultoa::value#2 5.7285715E7
(dword) ultoa::value#6 1.500000015E8
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 1.3750000025E8
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 1.000000000001E12
(byte) ultoa_append::digit#2 1.0005000000015E12
(dword) ultoa_append::return
(dword) ultoa_append::return#0 2.00000002E8
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 3.333500000005E11
(dword) ultoa_append::value
(dword) ultoa_append::value#0 3.666666673333334E8
(dword) ultoa_append::value#1 2.000000000002E12
(dword) ultoa_append::value#2 5.0018333333416675E11
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 20002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 3000.4285714285716
(byte*) utoa::buffer#14 15001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 20002.0
(byte) utoa::digit#2 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 5000.5
(byte) utoa::started#4 10001.0
(word) utoa::value
(word) utoa::value#0 10001.0
(word) utoa::value#2 5714.857142857143
(word) utoa::value#6 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000001E7
(byte) utoa_append::digit#2 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 36667.33333333333
(word) utoa_append::value#1 2.0000002E7
(word) utoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ cputs::s#13 cputs::s#14 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#7 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#3 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ queens::row#10 queens::row#1 queens::row#2 ]
[ count#10 count#25 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ legal::i#10 legal::i#1 ]
[ legal::return#4 ]
[ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ]
[ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_cursor_text to live range equivalence class [ conio_cursor_text ]
Added variable conio_cursor_color to live range equivalence class [ conio_cursor_color ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable cputln::ln_offset#0 to live range equivalence class [ cputln::ln_offset#0 ]
Added variable cputln::$1 to live range equivalence class [ cputln::$1 ]
Added variable cputln::$2 to live range equivalence class [ cputln::$2 ]
Added variable cscroll::$7 to live range equivalence class [ cscroll::$7 ]
Added variable cscroll::$8 to live range equivalence class [ cscroll::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#3 to live range equivalence class [ ultoa::buffer#3 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable legal::row#0 to live range equivalence class [ legal::row#0 ]
Added variable legal::column#0 to live range equivalence class [ legal::column#0 ]
Added variable legal::return#0 to live range equivalence class [ legal::return#0 ]
Added variable queens::$2 to live range equivalence class [ queens::$2 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable legal::$0 to live range equivalence class [ legal::$0 ]
Added variable legal::diff1_a#0 to live range equivalence class [ legal::diff1_a#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ cputs::s#13 cputs::s#14 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
[ printf_number_buffer::format_min_length#3 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#7 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#3 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ queens::row#10 queens::row#1 queens::row#2 ]
[ count#10 count#25 ]
[ print::i#2 print::i#1 ]
[ print::i1#2 print::i1#1 ]
[ print::j#2 print::j#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ legal::i#10 legal::i#1 ]
[ legal::return#4 ]
[ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ]
[ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_cursor_text ]
[ conio_cursor_color ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ cputs::c#1 ]
[ cputln::ln_offset#0 ]
[ cputln::$1 ]
[ cputln::$2 ]
[ cscroll::$7 ]
[ cscroll::$8 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ ultoa::$11 ]
[ ultoa::buffer#3 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ legal::row#0 ]
[ legal::column#0 ]
[ legal::return#0 ]
[ queens::$2 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ legal::$0 ]
[ legal::diff1_a#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ printf_buffer ]
[ TOD_ZERO ]
Allocated zp[2]:2 [ cputs::s#13 cputs::s#14 cputs::s#0 ]
Allocated zp[1]:4 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
Allocated zp[2]:5 [ memset::str#3 ]
Allocated zp[1]:7 [ memset::c#4 ]
Allocated zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:10 [ memcpy::source#2 ]
Allocated zp[2]:12 [ memcpy::destination#2 ]
Allocated zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[4]:18 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ]
Allocated zp[1]:22 [ printf_number_buffer::format_min_length#3 ]
Allocated zp[1]:23 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ]
Allocated zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:26 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:27 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:30 [ printf_padding::pad#7 ]
Allocated zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[2]:32 [ strupr::src#2 strupr::src#1 ]
Allocated zp[1]:34 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:35 [ strlen::str#3 strlen::str#0 ]
Allocated zp[2]:37 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
Allocated zp[1]:44 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
Allocated zp[4]:47 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:51 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ]
Allocated zp[4]:53 [ count#10 count#25 ]
Allocated zp[1]:57 [ print::i#2 print::i#1 ]
Allocated zp[1]:58 [ print::i1#2 print::i1#1 ]
Allocated zp[1]:59 [ print::j#2 print::j#1 ]
Allocated zp[1]:60 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Allocated zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:62 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:63 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:66 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:67 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:68 [ legal::i#10 legal::i#1 ]
Allocated zp[1]:69 [ legal::return#4 ]
Allocated zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ]
Allocated zp[1]:71 [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
Allocated zp[1]:72 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 ]
Allocated zp[1]:75 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:78 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:80 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[1]:81 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:84 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:86 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:87 [ conio_cursor_x ]
Allocated zp[1]:88 [ conio_cursor_y ]
Allocated zp[2]:89 [ conio_cursor_text ]
Allocated zp[2]:91 [ conio_cursor_color ]
Allocated zp[1]:93 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:94 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:95 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:96 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:97 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:98 [ tod_read::return_SEC#2 ]
Allocated zp[1]:99 [ tod_read::return_MIN#2 ]
Allocated zp[1]:100 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:101 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:102 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:103 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:104 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:105 [ cputs::c#1 ]
Allocated zp[2]:106 [ cputln::ln_offset#0 ]
Allocated zp[2]:108 [ cputln::$1 ]
Allocated zp[2]:110 [ cputln::$2 ]
Allocated zp[2]:112 [ cscroll::$7 ]
Allocated zp[2]:114 [ cscroll::$8 ]
Allocated zp[2]:116 [ memset::end#0 ]
Allocated zp[2]:118 [ memcpy::src_end#0 ]
Allocated zp[2]:120 [ strlen::return#2 ]
Allocated zp[2]:122 [ printf_number_buffer::$19 ]
Allocated zp[1]:124 [ toupper::return#3 ]
Allocated zp[1]:125 [ strupr::$0 ]
Allocated zp[1]:126 [ ultoa::$11 ]
Allocated zp[2]:127 [ ultoa::buffer#3 ]
Allocated zp[1]:129 [ ultoa::$10 ]
Allocated zp[4]:130 [ ultoa::digit_value#0 ]
Allocated zp[2]:134 [ ultoa_append::buffer#0 ]
Allocated zp[4]:136 [ ultoa_append::sub#0 ]
Allocated zp[4]:140 [ ultoa_append::return#0 ]
Allocated zp[1]:144 [ tod_str::$0 ]
Allocated zp[1]:145 [ tod_str::$1 ]
Allocated zp[1]:146 [ tod_str::$2 ]
Allocated zp[1]:147 [ tod_str::$3 ]
Allocated zp[1]:148 [ tod_str::$4 ]
Allocated zp[1]:149 [ tod_str::$5 ]
Allocated zp[1]:150 [ tod_str::$6 ]
Allocated zp[1]:151 [ tod_str::$7 ]
Allocated zp[1]:152 [ tod_str::$8 ]
Allocated zp[1]:153 [ tod_str::$9 ]
Allocated zp[1]:154 [ tod_str::$10 ]
Allocated zp[1]:155 [ tod_str::$11 ]
Allocated zp[1]:156 [ tod_str::$12 ]
Allocated zp[1]:157 [ tod_str::$13 ]
Allocated zp[1]:158 [ tod_str::$14 ]
Allocated zp[1]:159 [ tod_str::$15 ]
Allocated zp[1]:160 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:161 [ tod_read::return_MIN#0 ]
Allocated zp[1]:162 [ tod_read::return_SEC#0 ]
Allocated zp[1]:163 [ tod_read::return_TENTHS#0 ]
Allocated zp[1]:164 [ legal::row#0 ]
Allocated zp[1]:165 [ legal::column#0 ]
Allocated zp[1]:166 [ legal::return#0 ]
Allocated zp[1]:167 [ queens::$2 ]
Allocated zp[2]:168 [ uctoa::buffer#3 ]
Allocated zp[1]:170 [ uctoa::digit_value#0 ]
Allocated zp[2]:171 [ uctoa_append::buffer#0 ]
Allocated zp[1]:173 [ uctoa_append::sub#0 ]
Allocated zp[1]:174 [ uctoa_append::return#0 ]
Allocated zp[1]:175 [ legal::$0 ]
Allocated zp[1]:176 [ legal::diff1_a#0 ]
Allocated zp[1]:177 [ utoa::$11 ]
Allocated zp[2]:178 [ utoa::buffer#3 ]
Allocated zp[1]:180 [ utoa::$10 ]
Allocated zp[2]:181 [ utoa::digit_value#0 ]
Allocated zp[2]:183 [ utoa_append::buffer#0 ]
Allocated zp[2]:185 [ utoa_append::sub#0 ]
Allocated zp[2]:187 [ utoa_append::return#0 ]
Allocated mem[12] [ printf_buffer ]
Allocated mem[4] [ TOD_ZERO ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.
//
// This is an iterative solution.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = $57
  .label conio_cursor_y = $58
  .label conio_cursor_text = $59
  .label conio_cursor_color = $5b
  // The number of found solutions
  .label count = $35
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call clrscr 
    // [388] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call cputs 
    // [45] phi from main::@1 to cputs [phi:main::@1->cputs]
  cputs_from___b1:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call cputs 
    // [45] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_uint 
    // [354] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [16] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [17] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [18] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [19] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [20] call tod_init 
    jsr tod_init
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [22] call queens 
    // [243] phi from main::@5 to queens [phi:main::@5->queens]
  queens_from___b5:
    jsr queens
    // [23] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [24] call tod_read 
    jsr tod_read
    // [25] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS
    sta.z tod_read.return_TENTHS_1
    // [26] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC
    sta.z tod_read.return_SEC_1
    // [27] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN
    sta.z tod_read.return_MIN_1
    // [28] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS
    sta.z tod_read.return_HOURS_1
    jmp __b7
    // main::@7
  __b7:
    // [29] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS_1
    sta.z tod_str.tod_TENTHS
    // [30] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC_1
    sta.z tod_str.tod_SEC
    // [31] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN_1
    sta.z tod_str.tod_MIN
    // [32] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS_1
    sta.z tod_str.tod_HOURS
    // [33] call tod_str 
    jsr tod_str
    // [34] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [35] call cputs 
    // [45] phi from main::@8 to cputs [phi:main::@8->cputs]
  cputs_from___b8:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // main::@9
  __b9:
    // [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10 -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [37] call printf_ulong 
    // [113] phi from main::@9 to printf_ulong [phi:main::@9->printf_ulong]
  printf_ulong_from___b9:
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@9->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [38] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [39] call cputs 
    // [45] phi from main::@10 to cputs [phi:main::@10->cputs]
  cputs_from___b10:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [40] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [41] call printf_string 
    // [109] phi from main::@11 to printf_string [phi:main::@11->printf_string]
  printf_string_from___b11:
    jsr printf_string
    // [42] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [43] call cputs 
    // [45] phi from main::@12 to cputs [phi:main::@12->cputs]
  cputs_from___b12:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@12->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [44] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label c = $69
    .label s = 2
    // [46] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [46] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [48] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [49] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [50] return 
    rts
    // cputs::@2
  __b2:
    // [51] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [52] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp(4) c)
cputc: {
    .label c = 4
    // [54] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [63] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [66] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $6c
    .label __2 = $6e
    .label ln_offset = $6a
    // [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_text
    clc
    adc.z ln_offset
    sta.z __1
    lda.z conio_cursor_text+1
    adc.z ln_offset+1
    sta.z __1+1
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z conio_cursor_text
    lda.z __1+1
    sta.z conio_cursor_text+1
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_color
    clc
    adc.z ln_offset
    sta.z __2
    lda.z conio_cursor_color+1
    adc.z ln_offset+1
    sta.z __2+1
    // [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2 -- pbuz1=pbuz2 
    lda.z __2
    sta.z conio_cursor_color
    lda.z __2+1
    sta.z conio_cursor_color+1
    // [72] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [73] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [74] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [75] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $70
    .label __8 = $72
    // [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [77] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [78] call memcpy 
    // [99] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [79] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [80] call memcpy 
    // [99] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [81] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [82] call memset 
    // [91] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [91] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [83] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [84] call memset 
    // [91] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [91] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta.z memset.c
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_text
    sec
    sbc #<$28
    sta.z __7
    lda.z conio_cursor_text+1
    sbc #>$28
    sta.z __7+1
    // [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 -- pbuz1=pbuz2 
    lda.z __7
    sta.z conio_cursor_text
    lda.z __7+1
    sta.z conio_cursor_text+1
    // [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_color
    sec
    sbc #<$28
    sta.z __8
    lda.z conio_cursor_color+1
    sbc #>$28
    sta.z __8+1
    // [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z conio_cursor_color
    lda.z __8+1
    sta.z conio_cursor_color+1
    // [89] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [90] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(5) str, byte zp(7) c)
memset: {
    .label end = $74
    .label dst = 8
    .label str = 5
    .label c = 7
    jmp __b1
    // memset::@1
  __b1:
    // [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [94] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [94] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [96] return 
    rts
    // memset::@3
  __b3:
    // [97] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [98] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($c) destination, void* zp($a) source)
memcpy: {
    .label src_end = $76
    .label dst = $10
    .label src = $e
    .label source = $a
    .label destination = $c
    // [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [103] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [103] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [103] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [105] return 
    rts
    // memcpy::@2
  __b2:
    // [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [107] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [110] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [111] call cputs 
    // [45] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [112] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($12) uvalue)
printf_ulong: {
    .label uvalue = $12
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [116] call ultoa 
  // Format number into buffer
    // [185] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [117] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [118] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [119] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($19) buffer_sign, byte zp($16) format_min_length, byte zp($17) format_justify_left, byte zp($18) format_zero_padding, byte zp($1a) format_upper_case)
printf_number_buffer: {
    .label __19 = $7a
    .label buffer_sign = $19
    .label len = $1b
    .label padding = $1c
    .label format_min_length = $16
    .label format_zero_padding = $18
    .label format_justify_left = $17
    .label format_upper_case = $1a
    // [121] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    // [122] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [123] call strlen 
    // [179] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [124] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __19
    lda.z strlen.return+1
    sta.z __19+1
    // [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [127] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [128] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [129] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [129] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z format_min_length
    sec
    sbc.z len
    sta.z padding
    // [131] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [133] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [132] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [133] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [134] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [135] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [136] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [137] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [138] call printf_padding 
    // [157] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [139] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [140] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [141] call cputc 
    // [53] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [142] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [143] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [144] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [145] call printf_padding 
    // [157] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [157] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [146] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [147] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [148] call strupr 
    // [164] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [149] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [150] call cputs 
    // [45] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [151] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [152] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [153] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [154] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [155] call printf_padding 
    // [157] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [156] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($1e) pad, byte zp($1d) length)
printf_padding: {
    .label i = $1f
    .label length = $1d
    .label pad = $1e
    // [158] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [158] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [159] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [160] return 
    rts
    // printf_padding::@2
  __b2:
    // [161] (byte) cputc::c#1 ← (byte) printf_padding::pad#7 -- vbuz1=vbuz2 
    lda.z pad
    sta.z cputc.c
    // [162] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [163] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [158] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [158] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label __0 = $7d
    .label src = $20
    // [165] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [165] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [167] return 
    rts
    // strupr::@2
  __b2:
    // [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [169] call toupper 
    jsr toupper
    // [170] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b3
    // strupr::@3
  __b3:
    // [171] (byte~) strupr::$0 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z __0
    // [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [173] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [165] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [165] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($22) ch)
toupper: {
    .label return = $22
    .label ch = $22
    .label return_1 = $7c
    // [174] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [175] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [177] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [177] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [178] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($23) str)
strlen: {
    .label len = $25
    .label str = $23
    .label return = $78
    // [180] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [180] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [180] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [182] return 
    rts
    // strlen::@2
  __b2:
    // [183] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [184] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [180] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [180] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [180] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($28) value, byte* zp($7f) buffer)
ultoa: {
    .label __10 = $81
    .label __11 = $7e
    .label digit_value = $82
    .label buffer = $7f
    .label digit = $27
    .label value = $28
    .label buffer_1 = $2d
    .label started = $2c
    // [186] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [186] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [186] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [187] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [191] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [192] return 
    rts
    // ultoa::@2
  __b2:
    // [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [195] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [197] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [198] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [186] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [186] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [186] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z ultoa_append.buffer
    lda.z buffer_1+1
    sta.z ultoa_append.buffer+1
    // [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 -- vduz1=vduz2 
    lda.z value
    sta.z ultoa_append.value
    lda.z value+1
    sta.z ultoa_append.value+1
    lda.z value+2
    sta.z ultoa_append.value+2
    lda.z value+3
    sta.z ultoa_append.value+3
    // [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 -- vduz1=vduz2 
    lda.z digit_value
    sta.z ultoa_append.sub
    lda.z digit_value+1
    sta.z ultoa_append.sub+1
    lda.z digit_value+2
    sta.z ultoa_append.sub+2
    lda.z digit_value+3
    sta.z ultoa_append.sub+3
    // [202] call ultoa_append 
    // [206] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 -- vduz1=vduz2 
    lda.z ultoa_append.value
    sta.z ultoa_append.return
    lda.z ultoa_append.value+1
    sta.z ultoa_append.return+1
    lda.z ultoa_append.value+2
    sta.z ultoa_append.return+2
    lda.z ultoa_append.value+3
    sta.z ultoa_append.return+3
    jmp __b6
    // ultoa::@6
  __b6:
    // [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 -- vduz1=vduz2 
    lda.z ultoa_append.return
    sta.z value
    lda.z ultoa_append.return+1
    sta.z value+1
    lda.z ultoa_append.return+2
    sta.z value+2
    lda.z ultoa_append.return+3
    sta.z value+3
    // [205] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [197] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($86) buffer, dword zp($2f) value, dword zp($88) sub)
ultoa_append: {
    .label buffer = $86
    .label value = $2f
    .label sub = $88
    .label return = $8c
    .label digit = $33
    // [207] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [207] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [210] return 
    rts
    // ultoa_append::@2
  __b2:
    // [211] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [207] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [207] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($65) tod_TENTHS, byte zp($66) tod_SEC, byte zp($67) tod_MIN, byte zp($68) tod_HOURS)
tod_str: {
    .label __0 = $90
    .label __1 = $91
    .label __2 = $92
    .label __3 = $93
    .label __4 = $94
    .label __5 = $95
    .label __6 = $96
    .label __7 = $97
    .label __8 = $98
    .label __9 = $99
    .label __10 = $9a
    .label __11 = $9b
    .label __12 = $9c
    .label __13 = $9d
    .label __14 = $9e
    .label __15 = $9f
    .label tod_TENTHS = $65
    .label tod_SEC = $66
    .label tod_MIN = $67
    .label tod_HOURS = $68
    // [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [214] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __0
    axs #-['0']
    stx.z __1
    // [215] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta tod_buffer
    // [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_HOURS
    sta.z __2
    // [217] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __2
    axs #-['0']
    stx.z __3
    // [218] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta tod_buffer+1
    // [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // [220] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __4
    axs #-['0']
    stx.z __5
    // [221] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    lda.z __5
    sta tod_buffer+3
    // [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_MIN
    sta.z __6
    // [223] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __6
    axs #-['0']
    stx.z __7
    // [224] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta tod_buffer+4
    // [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // [226] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __8
    axs #-['0']
    stx.z __9
    // [227] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    lda.z __9
    sta tod_buffer+6
    // [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_SEC
    sta.z __10
    // [229] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __10
    axs #-['0']
    stx.z __11
    // [230] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    lda.z __11
    sta tod_buffer+7
    // [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // [232] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __12
    axs #-['0']
    stx.z __13
    // [233] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    lda.z __13
    sta tod_buffer+9
    // [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    sta.z __14
    // [235] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __14
    axs #-['0']
    stx.z __15
    // [236] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    lda.z __15
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [237] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $a3
    .label return_SEC = $a2
    .label return_MIN = $a1
    .label return_HOURS = $a0
    .label return_TENTHS_1 = $61
    .label return_SEC_1 = $62
    .label return_MIN_1 = $63
    .label return_HOURS_1 = $64
    // [238] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [239] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // [240] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // [241] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [242] return 
    rts
}
  // queens
// Generates all valid placements of queens on a NxN board without recursion
// Works exactly like the recursive solution by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then moving on to generating all legal placements on the rows above.
// In practice this works like a depth first tree search where the level in the tree is the row on the board and each branch in the tree is the legal placement of a queen on that row. 
// The solution uses the board itself as a "cursor" moving through all possibilities
// When all columns on a row is exhausted move back down to the lower level and move forward one position until we are done with the last position on the first row
queens: {
    .label __2 = $a7
    // The current row where the queen is moving
    .label row = $34
    // [244] phi from queens to queens::@1 [phi:queens->queens::@1]
  __b1_from_queens:
    // [244] phi (dword) count#10 = (dword) 0 [phi:queens->queens::@1#0] -- vduz1=vduc1 
    lda #<0
    sta.z count
    lda #>0
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [244] phi (byte) queens::row#10 = (byte) 1 [phi:queens->queens::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    jmp __b1
    // [244] phi from queens::@4 queens::@7 queens::@8 queens::@9 to queens::@1 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1]
  __b1_from___b4:
  __b1_from___b7:
  __b1_from___b8:
  __b1_from___b9:
    // [244] phi (dword) count#10 = (dword) count#25 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#0] -- register_copy 
    // [244] phi (byte) queens::row#10 = (byte) queens::row#10 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#1] -- register_copy 
    jmp __b1
    // queens::@1
  __b1:
    jmp __b2
    // queens::@2
  __b2:
    // [245] *((const byte*) board + (byte) queens::row#10) ← ++ *((const byte*) board + (byte) queens::row#10) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z row
    inc board,x
    // [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3 -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z row
    lda board,y
    cmp #8+1
    beq __b3
    jmp __b5
    // queens::@5
  __b5:
    // [247] (byte) legal::row#0 ← (byte) queens::row#10 -- vbuz1=vbuz2 
    lda.z row
    sta.z legal.row
    // [248] (byte) legal::column#0 ← *((const byte*) board + (byte) queens::row#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z row
    lda board,y
    sta.z legal.column
    // [249] call legal 
    // [329] phi from queens::@5 to legal [phi:queens::@5->legal]
  legal_from___b5:
    jsr legal
    // [250] (byte) legal::return#0 ← (byte) legal::return#4 -- vbuz1=vbuz2 
    lda.z legal.return_1
    sta.z legal.return
    jmp __b9
    // queens::@9
  __b9:
    // [251] (byte~) queens::$2 ← (byte) legal::return#0 -- vbuz1=vbuz2 
    lda.z legal.return
    sta.z __2
    // [252] if((byte) 0==(byte~) queens::$2) goto queens::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __2
    beq __b1_from___b9
    jmp __b6
    // queens::@6
  __b6:
    // [253] if((byte) queens::row#10==(byte) 8) goto queens::@4 -- vbuz1_eq_vbuc1_then_la1 
    // position is legal - move up to the next row
    lda #8
    cmp.z row
    beq __b4
    jmp __b7
    // queens::@7
  __b7:
    // [254] (byte) queens::row#1 ← ++ (byte) queens::row#10 -- vbuz1=_inc_vbuz1 
    inc.z row
    jmp __b1_from___b7
    // queens::@4
  __b4:
    // [255] (dword) count#25 ← ++ (dword) count#10 -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [256] call print 
    // [261] phi from queens::@4 to print [phi:queens::@4->print]
  print_from___b4:
    jsr print
    jmp __b1_from___b4
    // queens::@3
  __b3:
    // [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    // We moved past the end of the row - reset position and go down to the lower row
    lda #0
    ldy.z row
    sta board,y
    // [258] if((byte) queens::row#10==(byte) 1) goto queens::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z row
    beq __breturn
    jmp __b8
    // queens::@8
  __b8:
    // [259] (byte) queens::row#2 ← -- (byte) queens::row#10 -- vbuz1=_dec_vbuz1 
    dec.z row
    jmp __b1_from___b8
    // queens::@return
  __breturn:
    // [260] return 
    rts
}
  // print
// Print the board with a legal placement.
print: {
    .label i = $39
    .label i1 = $3a
    .label j = $3b
    // [262] call gotoxy 
    // [323] phi from print to gotoxy [phi:print->gotoxy]
  gotoxy_from_print:
    jsr gotoxy
    // [263] phi from print to print::@11 [phi:print->print::@11]
  __b11_from_print:
    jmp __b11
    // print::@11
  __b11:
    // [264] call cputs 
    // [45] phi from print::@11 to cputs [phi:print::@11->cputs]
  cputs_from___b11:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b12
    // print::@12
  __b12:
    // [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25 -- vduz1=vduz2 
    lda.z count
    sta.z printf_ulong.uvalue
    lda.z count+1
    sta.z printf_ulong.uvalue+1
    lda.z count+2
    sta.z printf_ulong.uvalue+2
    lda.z count+3
    sta.z printf_ulong.uvalue+3
    // [266] call printf_ulong 
    // [113] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
  printf_ulong_from___b12:
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [267] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
  __b13_from___b12:
    jmp __b13
    // print::@13
  __b13:
    // [268] call cputs 
    // [45] phi from print::@13 to cputs [phi:print::@13->cputs]
  cputs_from___b13:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [269] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [269] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [270] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [271] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [271] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [272] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [273] return 
    rts
    // [274] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [275] call cputs 
    // [45] phi from print::@4 to cputs [phi:print::@4->cputs]
  cputs_from___b4:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // print::@15
  __b15:
    // [276] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2 -- vbuz1=vbuz2 
    lda.z i1
    sta.z printf_uchar.uvalue
    // [277] call printf_uchar 
    // [290] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
  printf_uchar_from___b15:
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [278] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
  __b5_from___b15:
    // [278] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [279] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [280] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [271] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [271] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [282] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [283] call cputs 
    // [45] phi from print::@10 to cputs [phi:print::@10->cputs]
  cputs_from___b10:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@9
  __b9:
    // [284] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [278] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [278] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [285] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [286] call cputs 
    // [45] phi from print::@8 to cputs [phi:print::@8->cputs]
  cputs_from___b8:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // [287] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2 -- vbuz1=vbuz2 
    lda.z i
    sta.z printf_uchar.uvalue
    // [288] call printf_uchar 
    // [290] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b14
    // print::@14
  __b14:
    // [289] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [269] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
  __b1_from___b14:
    // [269] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($3c) uvalue)
printf_uchar: {
    .label uvalue = $3c
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [292] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [293] call uctoa 
  // Format number into buffer
    // [297] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [294] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [295] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [296] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($3e) value, byte* zp($a8) buffer)
uctoa: {
    .label digit_value = $aa
    .label buffer = $a8
    .label digit = $3d
    .label value = $3e
    .label buffer_1 = $40
    .label started = $3f
    // [298] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [298] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [298] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [299] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [302] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [303] return 
    rts
    // uctoa::@2
  __b2:
    // [304] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [305] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [306] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [307] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [308] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [298] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [298] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [298] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [310] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [311] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [312] call uctoa_append 
    // [316] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [313] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b6
    // uctoa::@6
  __b6:
    // [314] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [315] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [307] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($ab) buffer, byte zp($42) value, byte zp($ad) sub)
uctoa_append: {
    .label buffer = $ab
    .label value = $42
    .label sub = $ad
    .label return = $ae
    .label digit = $43
    // [317] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [317] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [318] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [320] return 
    rts
    // uctoa_append::@2
  __b2:
    // [321] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [317] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [317] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [328] return 
    rts
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($a4) row, byte zp($a5) column)
legal: {
    .label __0 = $af
    .label row = $a4
    .label column = $a5
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return = $a6
    .label diff1_a = $b0
    .label diff1_return = $46
    .label diff2_return = $47
    // Placement is legal
    // The same column is a conflict.
    // The same diagonal is a conflict.
    .label return_1 = $45
    .label i = $44
    // [330] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [330] phi (byte) legal::i#10 = (byte) 1 [phi:legal->legal::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // legal::@1
  __b1:
    // [331] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z row
    dex
    stx.z __0
    // [332] if((byte) legal::i#10<=(byte~) legal::$0) goto legal::@2 -- vbuz1_le_vbuz2_then_la1 
    lda.z __0
    cmp.z i
    bcs __b2
    // [333] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [333] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return_1
    jmp __breturn
    // [333] phi from legal::@2 legal::@5 to legal::@return [phi:legal::@2/legal::@5->legal::@return]
  __breturn_from___b2:
  __breturn_from___b5:
    // [333] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@5->legal::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z return_1
    jmp __breturn
    // legal::@return
  __breturn:
    // [334] return 
    rts
    // legal::@2
  __b2:
    // [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [336] (byte) legal::diff1_a#0 ← *((const byte*) board + (byte) legal::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda board,y
    sta.z diff1_a
    jmp diff1
    // legal::diff1
  diff1:
    // [337] if((byte) legal::diff1_a#0<(byte) legal::column#0) goto legal::diff1_@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z diff1_a
    cmp.z column
    bcc diff1___b1
    jmp diff1___b3
    // legal::diff1_@3
  diff1___b3:
    // [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z diff1_a
    sec
    sbc.z column
    sta.z diff1_return
    // [339] phi from legal::diff1_@1 legal::diff1_@3 to legal::diff1_@return [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return]
  diff1___breturn_from_diff1___b1:
  diff1___breturn_from_diff1___b3:
    // [339] phi (byte) legal::diff1_return#2 = (byte) legal::diff1_return#0 [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return#0] -- register_copy 
    jmp diff1___breturn
    // legal::diff1_@return
  diff1___breturn:
    jmp diff2
    // legal::diff2
  diff2:
    // [340] if((byte) legal::i#10<(byte) legal::row#0) goto legal::diff2_@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z row
    bcc diff2___b1
    jmp diff2___b3
    // legal::diff2_@3
  diff2___b3:
    // [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z i
    sec
    sbc.z row
    sta.z diff2_return
    // [342] phi from legal::diff2_@1 legal::diff2_@3 to legal::diff2_@return [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return]
  diff2___breturn_from_diff2___b1:
  diff2___breturn_from_diff2___b3:
    // [342] phi (byte) legal::diff2_return#2 = (byte) legal::diff2_return#0 [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return#0] -- register_copy 
    jmp diff2___breturn
    // legal::diff2_@return
  diff2___breturn:
    jmp __b5
    // legal::@5
  __b5:
    // [343] if((byte) legal::diff1_return#2!=(byte) legal::diff2_return#2) goto legal::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z diff1_return
    cmp.z diff2_return
    bne __b3
    jmp __breturn_from___b5
    // legal::@3
  __b3:
    // [344] (byte) legal::i#1 ← ++ (byte) legal::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [330] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [330] phi (byte) legal::i#10 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
    // legal::diff2_@1
  diff2___b1:
    // [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z row
    sec
    sbc.z i
    sta.z diff2_return
    jmp diff2___breturn_from_diff2___b1
    // legal::diff1_@1
  diff1___b1:
    // [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z column
    sec
    sbc.z diff1_a
    sta.z diff1_return
    jmp diff1___breturn_from_diff1___b1
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($5d) tod_TENTHS, byte zp($5e) tod_SEC, byte zp($5f) tod_MIN, byte zp($60) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $5d
    .label tod_SEC = $5e
    .label tod_MIN = $5f
    .label tod_HOURS = $60
    // [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [349] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [350] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [351] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [352] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [353] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_uint::@1
  __b1:
    // [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [356] call utoa 
  // Format number into buffer
    // [360] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [357] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [358] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [359] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($49) value, byte* zp($b2) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $b4
    .label __11 = $b1
    .label digit_value = $b5
    .label buffer = $b2
    .label digit = $48
    .label value = $49
    .label buffer_1 = $4c
    .label started = $4b
    // [361] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [361] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [361] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [361] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [361] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [362] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [366] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [367] return 
    rts
    // utoa::@2
  __b2:
    // [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [370] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [372] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [372] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [373] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [361] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [361] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [361] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [361] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [361] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [375] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [377] call utoa_append 
    // [381] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [379] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [380] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [372] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [372] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($b7) buffer, word zp($4e) value, word zp($b9) sub)
utoa_append: {
    .label buffer = $b7
    .label value = $4e
    .label sub = $b9
    .label return = $bb
    .label digit = $50
    // [382] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [382] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [385] return 
    rts
    // utoa_append::@2
  __b2:
    // [386] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [382] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [382] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $56
    .label line_text = $52
    .label line_cols = $54
    .label l = $51
    // [389] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [389] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [389] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [389] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [390] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [391] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [392] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [395] return 
    rts
    // [396] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [396] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [397] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [400] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [389] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [389] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [389] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [389] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy.z c
    sta (line_cols),y
    // [403] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [396] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [396] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } }  ) always clobbers reg byte a 
Statement [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] ( main:6::cputs:11 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:13 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:35 [ count#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:39 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:43 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::printf_string:41::cputs:111 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::cputs:264 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:268 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:275 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:283 [ queens::row#10 count#25 print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:286 [ queens::row#10 count#25 print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:58 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:58 [ print::i1#2 print::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:57 [ print::i#2 print::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:57 [ print::i#2 print::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:59 [ print::j#2 print::j#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:59 [ print::j#2 print::j#1 ]
Statement [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:26 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:30 [ printf_padding::pad#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ printf_padding::pad#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [61] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [72] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ memset::c#4 ]
Statement [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ memset::c#4 ]
Statement [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] ( main:6::printf_ulong:37 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] ( main:6::printf_ulong:37 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [124] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ printf_number_buffer::format_min_length#3 ]
Statement [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148::toupper:169 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148::toupper:169 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148::toupper:169 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148::toupper:169 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148::toupper:169 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#3 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strlen:123 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strlen:123 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strlen:123 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strlen:123 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strlen:123 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:22 [ printf_number_buffer::format_min_length#3 ]
Statement [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [191] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:44 [ ultoa::started#2 ultoa::started#4 ]
Statement [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:101 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:102 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:103 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:104 [ tod_str::tod_HOURS#0 ]
Statement [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] ( main:6::queens:22 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] { }  ) always clobbers reg byte a 
Statement [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] ( main:6::queens:22 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] { }  ) always clobbers reg byte a 
Statement [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#1 printf_buffer count#25 ] ( main:6::queens:22::print:256 [ queens::row#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#1 printf_buffer count#25 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } }  ) always clobbers reg byte a 
Statement [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer count#25 print::i1#2 print::j#2 ] ( main:6::queens:22::print:256 [ queens::row#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer count#25 print::i1#2 print::j#2 ] { }  ) always clobbers reg byte a 
Statement [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] ( main:6::queens:22::print:256::printf_uchar:277 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
Statement [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [302] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:62 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:170 [ uctoa::digit_value#0 ]
Statement [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:66 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:173 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#10 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:164 [ legal::row#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:165 [ legal::column#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:68 [ legal::i#10 legal::i#1 ]
Statement [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#1 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#1 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#1 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#1 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ]
Statement [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#0 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#0 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#0 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#0 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:20 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:93 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:94 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:95 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:96 [ tod_init::tod_HOURS#0 ]
Statement [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:20 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] ( main:6::printf_uint:15 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [366] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:75 [ utoa::started#2 utoa::started#4 ]
Statement [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [375] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [379] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:72 [ utoa::digit#2 utoa::digit#1 ]
Statement [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [391] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [392] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:81 [ clrscr::l#2 clrscr::l#1 ]
Statement [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:86 [ clrscr::c#2 clrscr::c#1 ]
Statement [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ TOD_ZERO printf_buffer ] (  [ TOD_ZERO printf_buffer ] { }  ) always clobbers reg byte a 
Statement [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#0 printf_buffer ] ( main:6 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } }  ) always clobbers reg byte a 
Statement [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] ( main:6::cputs:11 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:13 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:35 [ count#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:39 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::cputs:43 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::printf_string:41::cputs:111 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::cputs:264 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:268 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:275 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:283 [ queens::row#10 count#25 print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  main:6::queens:22::print:256::cputs:286 [ queens::row#10 count#25 print::i1#2 print::j#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#13 cputs::c#1 printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte y 
Statement [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [61] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [72] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:11::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:82 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:82 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:82 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memset:84 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memset:84 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memset:84 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a 
Statement [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:11::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:78 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:78 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:78 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cscroll:63::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cscroll:63::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cscroll:63::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cscroll:63::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::cputs:11::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:13::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:35::cputc:52::cputln:66::cscroll:74::memcpy:80 [ count#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:39::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:43::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_string:41::cputs:111::cputc:52::cputln:66::cscroll:74::memcpy:80 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uint:15::printf_number_buffer:358::cputs:150::cputc:52::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:264::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:268::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:275::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:283::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::queens:22::print:256::cputs:286::cputc:52::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 print::j#2 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::cputc:141::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::cputc:141::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:138::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:145::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_ulong:37::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i1#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ queens::row#10 count#25 print::i#2 printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  main:6::printf_uint:15::printf_number_buffer:358::printf_padding:155::cputc:162::cputln:66::cscroll:74::memcpy:80 [ TOD_ZERO printf_buffer printf_padding::length#6 printf_padding::pad#7 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#6 } { cputc::c#1 = cputc::c#3 printf_padding::pad#7 } }  ) always clobbers reg byte a reg byte y 
Statement [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] ( main:6::printf_ulong:37 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#2 printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] ( main:6::printf_ulong:37 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [124] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:6::printf_ulong:37::printf_number_buffer:118 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strupr:148::toupper:169 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strupr:148::toupper:169 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strupr:148::toupper:169 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strupr:148::toupper:169 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { toupper::return#2 = toupper::return#3 } }  main:6::printf_uint:15::printf_number_buffer:358::strupr:148::toupper:169 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#3 ] ( main:6::printf_ulong:37::printf_number_buffer:118::strlen:123 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_ulong:266::printf_number_buffer:118::strlen:123 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:277::printf_number_buffer:295::strlen:123 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::queens:22::print:256::printf_uchar:288::printf_number_buffer:295::strlen:123 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 } { printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 } { strlen::return#2 = strlen::len#2 } }  main:6::printf_uint:15::printf_number_buffer:358::strlen:123 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_number_buffer::format_min_length#3 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#3 ] { { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [191] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:6::printf_ulong:37::ultoa:116 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:6::printf_ulong:37::ultoa:116::ultoa_append:202 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = printf_ulong::uvalue#2 count#10 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  main:6::queens:22::print:256::printf_ulong:266::ultoa:116::ultoa_append:202 [ queens::row#10 count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:33 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] ( main:6::queens:22 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] { }  ) always clobbers reg byte a 
Statement [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] ( main:6::queens:22 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 ] { }  ) always clobbers reg byte a 
Statement [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#1 printf_buffer count#25 ] ( main:6::queens:22::print:256 [ queens::row#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_ulong::uvalue#1 printf_buffer count#25 ] { { printf_ulong::uvalue#1 = printf_ulong::uvalue#2 count#25 } }  ) always clobbers reg byte a 
Statement [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer count#25 print::i1#2 print::j#2 ] ( main:6::queens:22::print:256 [ queens::row#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer count#25 print::i1#2 print::j#2 ] { }  ) always clobbers reg byte a 
Statement [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] ( main:6::queens:22::print:256::printf_uchar:277 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer printf_uchar::uvalue#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [302] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::queens:22::print:256::printf_uchar:277::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i1#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 print::i1#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::queens:22::print:256::printf_uchar:288::uctoa:293::uctoa_append:312 [ queens::row#10 count#25 print::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 print::i#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::queens:22::print:256::gotoxy:262 [ queens::row#10 printf_buffer count#25 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return [ legal::row#0 legal::column#0 legal::i#10 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#1 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#1 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#1 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#1 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#0 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#2 legal::diff2_return#0 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0 [ legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#0 ] ( main:6::queens:22::legal:249 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color count#10 printf_buffer queens::row#10 legal::row#0 legal::column#0 legal::i#10 legal::diff1_return#0 ] { { legal::row#0 = queens::row#10 } { legal::return#0 = legal::return#4 } }  ) always clobbers reg byte a 
Statement [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:20 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:20 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] ( main:6::printf_uint:15 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#11 utoa::$11 ] { }  ) always clobbers reg byte a 
Statement [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [366] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { }  ) always clobbers reg byte a 
Statement [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { }  ) always clobbers reg byte a 
Statement [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [375] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [379] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:6::printf_uint:15::utoa:356 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { }  ) always clobbers reg byte a 
Statement [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:6::printf_uint:15::utoa:356::utoa_append:377 [ TOD_ZERO conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [391] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [392] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ TOD_ZERO printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ cputs::s#13 cputs::s#14 cputs::s#0 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ memset::str#3 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ memset::c#4 ] : zp[1]:7 , reg byte x , 
Potential registers zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ memcpy::source#2 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memcpy::destination#2 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:16 , 
Potential registers zp[4]:18 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] : zp[4]:18 , 
Potential registers zp[1]:22 [ printf_number_buffer::format_min_length#3 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:23 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:23 , reg byte x , 
Potential registers zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ] : zp[1]:24 , reg byte x , 
Potential registers zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:26 , reg byte x , 
Potential registers zp[1]:27 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:29 , reg byte x , 
Potential registers zp[1]:30 [ printf_padding::pad#7 ] : zp[1]:30 , reg byte x , 
Potential registers zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:31 , reg byte x , 
Potential registers zp[2]:32 [ strupr::src#2 strupr::src#1 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ strlen::str#3 strlen::str#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ strlen::len#2 strlen::len#1 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:39 , reg byte x , 
Potential registers zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] : zp[4]:40 , 
Potential registers zp[1]:44 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] : zp[2]:45 , 
Potential registers zp[4]:47 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:47 , 
Potential registers zp[1]:51 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ] : zp[1]:52 , reg byte x , 
Potential registers zp[4]:53 [ count#10 count#25 ] : zp[4]:53 , 
Potential registers zp[1]:57 [ print::i#2 print::i#1 ] : zp[1]:57 , reg byte x , 
Potential registers zp[1]:58 [ print::i1#2 print::i1#1 ] : zp[1]:58 , reg byte x , 
Potential registers zp[1]:59 [ print::j#2 print::j#1 ] : zp[1]:59 , reg byte x , 
Potential registers zp[1]:60 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:61 , reg byte x , 
Potential registers zp[1]:62 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:62 , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:66 , reg byte x , 
Potential registers zp[1]:67 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:67 , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ legal::i#10 legal::i#1 ] : zp[1]:68 , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ legal::return#4 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ] : zp[1]:70 , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:72 , reg byte x , 
Potential registers zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 ] : zp[2]:73 , 
Potential registers zp[1]:75 [ utoa::started#2 utoa::started#4 ] : zp[1]:75 , reg byte x , reg byte y , 
Potential registers zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:80 , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:81 , reg byte x , reg byte y , 
Potential registers zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:82 , 
Potential registers zp[2]:84 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:84 , 
Potential registers zp[1]:86 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:86 , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ conio_cursor_x ] : zp[1]:87 , 
Potential registers zp[1]:88 [ conio_cursor_y ] : zp[1]:88 , 
Potential registers zp[2]:89 [ conio_cursor_text ] : zp[2]:89 , 
Potential registers zp[2]:91 [ conio_cursor_color ] : zp[2]:91 , 
Potential registers zp[1]:93 [ tod_init::tod_TENTHS#0 ] : zp[1]:93 , reg byte x , reg byte y , 
Potential registers zp[1]:94 [ tod_init::tod_SEC#0 ] : zp[1]:94 , reg byte x , reg byte y , 
Potential registers zp[1]:95 [ tod_init::tod_MIN#0 ] : zp[1]:95 , reg byte x , reg byte y , 
Potential registers zp[1]:96 [ tod_init::tod_HOURS#0 ] : zp[1]:96 , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ tod_read::return_TENTHS#2 ] : zp[1]:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:98 [ tod_read::return_SEC#2 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ tod_read::return_MIN#2 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ tod_read::return_HOURS#2 ] : zp[1]:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:101 [ tod_str::tod_TENTHS#0 ] : zp[1]:101 , reg byte x , reg byte y , 
Potential registers zp[1]:102 [ tod_str::tod_SEC#0 ] : zp[1]:102 , reg byte x , reg byte y , 
Potential registers zp[1]:103 [ tod_str::tod_MIN#0 ] : zp[1]:103 , reg byte x , reg byte y , 
Potential registers zp[1]:104 [ tod_str::tod_HOURS#0 ] : zp[1]:104 , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ cputs::c#1 ] : zp[1]:105 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:106 [ cputln::ln_offset#0 ] : zp[2]:106 , 
Potential registers zp[2]:108 [ cputln::$1 ] : zp[2]:108 , 
Potential registers zp[2]:110 [ cputln::$2 ] : zp[2]:110 , 
Potential registers zp[2]:112 [ cscroll::$7 ] : zp[2]:112 , 
Potential registers zp[2]:114 [ cscroll::$8 ] : zp[2]:114 , 
Potential registers zp[2]:116 [ memset::end#0 ] : zp[2]:116 , 
Potential registers zp[2]:118 [ memcpy::src_end#0 ] : zp[2]:118 , 
Potential registers zp[2]:120 [ strlen::return#2 ] : zp[2]:120 , 
Potential registers zp[2]:122 [ printf_number_buffer::$19 ] : zp[2]:122 , 
Potential registers zp[1]:124 [ toupper::return#3 ] : zp[1]:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:125 [ strupr::$0 ] : zp[1]:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:126 [ ultoa::$11 ] : zp[1]:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:127 [ ultoa::buffer#3 ] : zp[2]:127 , 
Potential registers zp[1]:129 [ ultoa::$10 ] : zp[1]:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:130 [ ultoa::digit_value#0 ] : zp[4]:130 , 
Potential registers zp[2]:134 [ ultoa_append::buffer#0 ] : zp[2]:134 , 
Potential registers zp[4]:136 [ ultoa_append::sub#0 ] : zp[4]:136 , 
Potential registers zp[4]:140 [ ultoa_append::return#0 ] : zp[4]:140 , 
Potential registers zp[1]:144 [ tod_str::$0 ] : zp[1]:144 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:145 [ tod_str::$1 ] : zp[1]:145 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:146 [ tod_str::$2 ] : zp[1]:146 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:147 [ tod_str::$3 ] : zp[1]:147 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:148 [ tod_str::$4 ] : zp[1]:148 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:149 [ tod_str::$5 ] : zp[1]:149 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:150 [ tod_str::$6 ] : zp[1]:150 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:151 [ tod_str::$7 ] : zp[1]:151 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:152 [ tod_str::$8 ] : zp[1]:152 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:153 [ tod_str::$9 ] : zp[1]:153 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:154 [ tod_str::$10 ] : zp[1]:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:155 [ tod_str::$11 ] : zp[1]:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:156 [ tod_str::$12 ] : zp[1]:156 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:157 [ tod_str::$13 ] : zp[1]:157 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:158 [ tod_str::$14 ] : zp[1]:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:159 [ tod_str::$15 ] : zp[1]:159 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:160 [ tod_read::return_HOURS#0 ] : zp[1]:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:161 [ tod_read::return_MIN#0 ] : zp[1]:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:162 [ tod_read::return_SEC#0 ] : zp[1]:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:163 [ tod_read::return_TENTHS#0 ] : zp[1]:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:164 [ legal::row#0 ] : zp[1]:164 , reg byte x , reg byte y , 
Potential registers zp[1]:165 [ legal::column#0 ] : zp[1]:165 , reg byte x , reg byte y , 
Potential registers zp[1]:166 [ legal::return#0 ] : zp[1]:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:167 [ queens::$2 ] : zp[1]:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:168 [ uctoa::buffer#3 ] : zp[2]:168 , 
Potential registers zp[1]:170 [ uctoa::digit_value#0 ] : zp[1]:170 , reg byte x , reg byte y , 
Potential registers zp[2]:171 [ uctoa_append::buffer#0 ] : zp[2]:171 , 
Potential registers zp[1]:173 [ uctoa_append::sub#0 ] : zp[1]:173 , reg byte x , reg byte y , 
Potential registers zp[1]:174 [ uctoa_append::return#0 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ legal::$0 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:176 [ legal::diff1_a#0 ] : zp[1]:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:177 [ utoa::$11 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:178 [ utoa::buffer#3 ] : zp[2]:178 , 
Potential registers zp[1]:180 [ utoa::$10 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:181 [ utoa::digit_value#0 ] : zp[2]:181 , 
Potential registers zp[2]:183 [ utoa_append::buffer#0 ] : zp[2]:183 , 
Potential registers zp[2]:185 [ utoa_append::sub#0 ] : zp[2]:185 , 
Potential registers zp[2]:187 [ utoa_append::return#0 ] : zp[2]:187 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,012,500,000,000,000,000: zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,023,333,333,333,300,000: zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,501,250,000,000,000,000: zp[2]:118 [ memcpy::src_end#0 ] 0: zp[2]:10 [ memcpy::source#2 ] 0: zp[2]:12 [ memcpy::destination#2 ] 
Uplift Scope [memset] 333,356,666,666,666,700,000: zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,668,333,333,333,332,000: zp[2]:116 [ memset::end#0 ] 14,285,714,285,714,287,000: zp[1]:7 [ memset::c#4 ] 0: zp[2]:5 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,000,550,000,000,000: zp[1]:66 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,000,500,000,000,000: zp[1]:67 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,333,350,000,000,000: zp[1]:173 [ uctoa_append::sub#0 ] 200,000,000,002: zp[1]:174 [ uctoa_append::return#0 ] 137,500,000,000.25: zp[2]:171 [ uctoa_append::buffer#0 ] 
Uplift Scope [cscroll] 2,000,000,000,000,002: zp[2]:112 [ cscroll::$7 ] 2,000,000,000,000,002: zp[2]:114 [ cscroll::$8 ] 
Uplift Scope [cputln] 200,000,000,000,002: zp[2]:108 [ cputln::$1 ] 200,000,000,000,002: zp[2]:110 [ cputln::$2 ] 100,000,000,000,001: zp[2]:106 [ cputln::ln_offset#0 ] 
Uplift Scope [toupper] 47,333,333,333,338.66: zp[1]:34 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 2,000,000,000,002: zp[1]:124 [ toupper::return#3 ] 
Uplift Scope [] 16,019,900,498,010.5: zp[1]:88 [ conio_cursor_y ] 11,435,897,436,410.83: zp[2]:91 [ conio_cursor_color ] 11,319,796,954,822.9: zp[2]:89 [ conio_cursor_text ] 1,311,475,410,383.11: zp[1]:87 [ conio_cursor_x ] 663.71: zp[4]:53 [ count#10 count#25 ] 0: mem[12] [ printf_buffer ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 12,525,250,000,008.5: zp[1]:4 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplift Scope [ultoa_append] 2,500,550,000,003.5: zp[4]:47 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 2,000,500,000,002.5: zp[1]:51 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 333,350,000,000.5: zp[4]:136 [ ultoa_append::sub#0 ] 200,000,002: zp[4]:140 [ ultoa_append::return#0 ] 137,500,000.25: zp[2]:134 [ ultoa_append::buffer#0 ] 
Uplift Scope [strupr] 2,714,285,714,288.43: zp[2]:32 [ strupr::src#2 strupr::src#1 ] 2,000,000,000,002: zp[1]:125 [ strupr::$0 ] 
Uplift Scope [strlen] 3,000,000,000,003: zp[2]:35 [ strlen::str#3 strlen::str#0 ] 1,500,025,000,001.75: zp[2]:37 [ strlen::len#2 strlen::len#1 ] 200,000,002: zp[2]:120 [ strlen::return#2 ] 
Uplift Scope [printf_padding] 2,750,000,000,002.75: zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ] 167,316,666,673.33: zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 166,666,666,666.83: zp[1]:30 [ printf_padding::pad#7 ] 
Uplift Scope [uctoa] 383,350,000,004: zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 316,755,000,004.5: zp[1]:62 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 230,769,230,771.54: zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ] 160,000,000,001.6: zp[1]:63 [ uctoa::started#2 uctoa::started#4 ] 60,000,000,000.6: zp[1]:170 [ uctoa::digit_value#0 ] 200,000,002: zp[2]:168 [ uctoa::buffer#3 ] 
Uplift Scope [cputs] 21,500,000,003.5: zp[2]:2 [ cputs::s#13 cputs::s#14 cputs::s#0 ] 10,000,000,001: zp[1]:105 [ cputs::c#1 ] 
Uplift Scope [ultoa] 378,714,289.64: zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] 307,835,718.5: zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] 228,571,430.86: zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ] 200,000,002: zp[1]:129 [ ultoa::$10 ] 150,000,001.5: zp[1]:44 [ ultoa::started#2 ultoa::started#4 ] 60,000,000.6: zp[4]:130 [ ultoa::digit_value#0 ] 2,000,002: zp[1]:126 [ ultoa::$11 ] 2,000,002: zp[2]:127 [ ultoa::buffer#3 ] 
Uplift Scope [printf_number_buffer] 650,000,006.5: zp[1]:27 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 119,047,620.24: zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 100,000,001: zp[2]:122 [ printf_number_buffer::$19 ] 35,705,211.3: zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 10,000,000.1: zp[1]:22 [ printf_number_buffer::format_min_length#3 ] 9,375,000.09: zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ] 6,451,612.97: zp[1]:23 [ printf_number_buffer::format_justify_left#10 ] 3,846,153.88: zp[1]:26 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [utoa_append] 25,055,003.5: zp[2]:78 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,050,002.5: zp[1]:80 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,335,000.5: zp[2]:185 [ utoa_append::sub#0 ] 20,002: zp[2]:187 [ utoa_append::return#0 ] 13,750.25: zp[2]:183 [ utoa_append::buffer#0 ] 
Uplift Scope [print] 25,714,288.29: zp[1]:59 [ print::j#2 print::j#1 ] 3,000,003: zp[1]:57 [ print::i#2 print::i#1 ] 3,000,002.36: zp[1]:58 [ print::i1#2 print::i1#1 ] 
Uplift Scope [legal] 7,000,007: zp[1]:71 [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ] 4,600,004.6: zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ] 2,571,431.14: zp[1]:68 [ legal::i#10 legal::i#1 ] 2,000,002: zp[1]:175 [ legal::$0 ] 2,000,002: zp[1]:176 [ legal::diff1_a#0 ] 235,353.24: zp[1]:165 [ legal::column#0 ] 222,278.06: zp[1]:164 [ legal::row#0 ] 2,002: zp[1]:166 [ legal::return#0 ] 333.67: zp[1]:69 [ legal::return#4 ] 
Uplift Scope [printf_uchar] 10,000,005.5: zp[1]:60 [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] 
Uplift Scope [utoa] 38,003.93: zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 30,717.36: zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 ] 22,859.43: zp[1]:72 [ utoa::digit#2 utoa::digit#1 ] 20,002: zp[1]:180 [ utoa::$10 ] 15,001.5: zp[1]:75 [ utoa::started#2 utoa::started#4 ] 6,000.6: zp[2]:181 [ utoa::digit_value#0 ] 2,002: zp[1]:177 [ utoa::$11 ] 2,002: zp[2]:178 [ utoa::buffer#3 ] 
Uplift Scope [printf_ulong] 75,030.5: zp[4]:18 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:86 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:84 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:81 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [queens] 5,148: zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ] 2,002: zp[1]:167 [ queens::$2 ] 
Uplift Scope [tod_str] 202: zp[1]:144 [ tod_str::$0 ] 202: zp[1]:145 [ tod_str::$1 ] 202: zp[1]:146 [ tod_str::$2 ] 202: zp[1]:147 [ tod_str::$3 ] 202: zp[1]:148 [ tod_str::$4 ] 202: zp[1]:149 [ tod_str::$5 ] 202: zp[1]:150 [ tod_str::$6 ] 202: zp[1]:151 [ tod_str::$7 ] 202: zp[1]:152 [ tod_str::$8 ] 202: zp[1]:153 [ tod_str::$9 ] 202: zp[1]:154 [ tod_str::$10 ] 202: zp[1]:155 [ tod_str::$11 ] 202: zp[1]:156 [ tod_str::$12 ] 202: zp[1]:157 [ tod_str::$13 ] 202: zp[1]:158 [ tod_str::$14 ] 202: zp[1]:159 [ tod_str::$15 ] 53.25: zp[1]:104 [ tod_str::tod_HOURS#0 ] 19.36: zp[1]:103 [ tod_str::tod_MIN#0 ] 11.83: zp[1]:102 [ tod_str::tod_SEC#0 ] 8.52: zp[1]:101 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [tod_read] 37.33: zp[1]:163 [ tod_read::return_TENTHS#0 ] 22.4: zp[1]:162 [ tod_read::return_SEC#0 ] 16: zp[1]:161 [ tod_read::return_MIN#0 ] 12.44: zp[1]:160 [ tod_read::return_HOURS#0 ] 5.5: zp[1]:97 [ tod_read::return_TENTHS#2 ] 5.5: zp[1]:98 [ tod_read::return_SEC#2 ] 5.5: zp[1]:99 [ tod_read::return_MIN#2 ] 5.5: zp[1]:100 [ tod_read::return_HOURS#2 ] 
Uplift Scope [tod_init] 37.33: zp[1]:96 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:95 [ tod_init::tod_MIN#0 ] 16: zp[1]:94 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:93 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [gotoxy] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_uint] 
Uplift Scope [printf_string] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 

Uplifting [memcpy] best 2074988 combination zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:118 [ memcpy::src_end#0 ] zp[2]:10 [ memcpy::source#2 ] zp[2]:12 [ memcpy::destination#2 ] 
Uplifting [memset] best 2064982 combination zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:116 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:5 [ memset::str#3 ] 
Uplifting [uctoa_append] best 1942979 combination reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ] zp[1]:173 [ uctoa_append::sub#0 ] reg byte x [ uctoa_append::return#0 ] zp[2]:171 [ uctoa_append::buffer#0 ] 
Uplifting [cscroll] best 1942979 combination zp[2]:112 [ cscroll::$7 ] zp[2]:114 [ cscroll::$8 ] 
Uplifting [cputln] best 1942979 combination zp[2]:108 [ cputln::$1 ] zp[2]:110 [ cputln::$2 ] zp[2]:106 [ cputln::ln_offset#0 ] 
Uplifting [toupper] best 1930972 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [] best 1930972 combination zp[1]:88 [ conio_cursor_y ] zp[2]:91 [ conio_cursor_color ] zp[2]:89 [ conio_cursor_text ] zp[1]:87 [ conio_cursor_x ] zp[4]:53 [ count#10 count#25 ] mem[12] [ printf_buffer ] mem[4] [ TOD_ZERO ] 
Uplifting [cputc] best 1927933 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplifting [ultoa_append] best 1921930 combination zp[4]:47 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ] zp[4]:136 [ ultoa_append::sub#0 ] zp[4]:140 [ ultoa_append::return#0 ] zp[2]:134 [ ultoa_append::buffer#0 ] 
Uplifting [strupr] best 1915930 combination zp[2]:32 [ strupr::src#2 strupr::src#1 ] reg byte a [ strupr::$0 ] 
Uplifting [strlen] best 1915930 combination zp[2]:35 [ strlen::str#3 strlen::str#0 ] zp[2]:37 [ strlen::len#2 strlen::len#1 ] zp[2]:120 [ strlen::return#2 ] 
Uplifting [printf_padding] best 1915930 combination zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] zp[1]:30 [ printf_padding::pad#7 ] 
Uplifting [uctoa] best 1906924 combination zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ] zp[1]:63 [ uctoa::started#2 uctoa::started#4 ] zp[1]:170 [ uctoa::digit_value#0 ] zp[2]:168 [ uctoa::buffer#3 ] 
Uplifting [cputs] best 1906834 combination zp[2]:2 [ cputs::s#13 cputs::s#14 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [ultoa] best 1905530 combination zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ] reg byte a [ ultoa::$10 ] reg byte x [ ultoa::started#2 ultoa::started#4 ] zp[4]:130 [ ultoa::digit_value#0 ] reg byte a [ ultoa::$11 ] zp[2]:127 [ ultoa::buffer#3 ] 
Uplifting [printf_number_buffer] best 1905516 combination reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] zp[2]:122 [ printf_number_buffer::$19 ] zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] reg byte x [ printf_number_buffer::format_min_length#3 ] zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ] zp[1]:23 [ printf_number_buffer::format_justify_left#10 ] zp[1]:26 [ printf_number_buffer::format_upper_case#10 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [utoa_append] best 1904913 combination zp[2]:78 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:185 [ utoa_append::sub#0 ] zp[2]:187 [ utoa_append::return#0 ] zp[2]:183 [ utoa_append::buffer#0 ] 
Uplifting [print] best 1904913 combination zp[1]:59 [ print::j#2 print::j#1 ] zp[1]:57 [ print::i#2 print::i#1 ] zp[1]:58 [ print::i1#2 print::i1#1 ] 
Uplifting [legal] best 1902213 combination reg byte a [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ] zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ] reg byte y [ legal::i#10 legal::i#1 ] reg byte x [ legal::$0 ] zp[1]:176 [ legal::diff1_a#0 ] zp[1]:165 [ legal::column#0 ] zp[1]:164 [ legal::row#0 ] zp[1]:166 [ legal::return#0 ] zp[1]:69 [ legal::return#4 ] 
Limited combination testing to 100 combinations of 82944 possible.
Uplifting [printf_uchar] best 1901610 combination reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ] 
Uplifting [utoa] best 1901476 combination zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 ] zp[1]:72 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:181 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:178 [ utoa::buffer#3 ] 
Uplifting [printf_ulong] best 1901476 combination zp[4]:18 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] 
Uplifting [clrscr] best 1899886 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:84 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [queens] best 1899826 combination zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ] reg byte a [ queens::$2 ] 
Uplifting [tod_read] best 1899808 combination reg byte y [ tod_read::return_TENTHS#0 ] reg byte x [ tod_read::return_SEC#0 ] reg byte a [ tod_read::return_MIN#0 ] zp[1]:160 [ tod_read::return_HOURS#0 ] zp[1]:97 [ tod_read::return_TENTHS#2 ] zp[1]:98 [ tod_read::return_SEC#2 ] zp[1]:99 [ tod_read::return_MIN#2 ] zp[1]:100 [ tod_read::return_HOURS#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [tod_init] best 1899796 combination reg byte y [ tod_init::tod_HOURS#0 ] reg byte x [ tod_init::tod_MIN#0 ] zp[1]:94 [ tod_init::tod_SEC#0 ] zp[1]:93 [ tod_init::tod_TENTHS#0 ] 
Uplifting [RADIX] best 1899796 combination 
Uplifting [gotoxy] best 1899796 combination 
Uplifting [printf_format_number] best 1899796 combination 
Uplifting [printf_buffer_number] best 1899796 combination 
Uplifting [printf_format_string] best 1899796 combination 
Uplifting [printf_uint] best 1899796 combination 
Uplifting [printf_string] best 1899796 combination 
Uplifting [TIME_OF_DAY] best 1899796 combination 
Uplifting [MOS6526_CIA] best 1899796 combination 
Uplifting [MOS6569_VICII] best 1899796 combination 
Uplifting [MOS6581_SID] best 1899796 combination 
Uplifting [main] best 1899796 combination 
Attempting to uplift remaining variables inzp[1]:173 [ uctoa_append::sub#0 ]
Uplifting [uctoa_append] best 1899796 combination zp[1]:173 [ uctoa_append::sub#0 ] 
Attempting to uplift remaining variables inzp[1]:88 [ conio_cursor_y ]
Uplifting [] best 1899796 combination zp[1]:88 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 1899796 combination zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ conio_cursor_x ]
Uplifting [] best 1899796 combination zp[1]:87 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ]
Uplifting [uctoa] best 1899796 combination zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Uplifting [printf_padding] best 1899796 combination zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 
Attempting to uplift remaining variables inzp[1]:30 [ printf_padding::pad#7 ]
Uplifting [printf_padding] best 1899796 combination zp[1]:30 [ printf_padding::pad#7 ] 
Attempting to uplift remaining variables inzp[1]:63 [ uctoa::started#2 uctoa::started#4 ]
Uplifting [uctoa] best 1899796 combination zp[1]:63 [ uctoa::started#2 uctoa::started#4 ] 
Attempting to uplift remaining variables inzp[1]:170 [ uctoa::digit_value#0 ]
Uplifting [uctoa] best 1899796 combination zp[1]:170 [ uctoa::digit_value#0 ] 
Attempting to uplift remaining variables inzp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ]
Uplifting [ultoa] best 1899796 combination zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Uplifting [printf_number_buffer] best 1899796 combination zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Uplifting [printf_number_buffer] best 1899796 combination zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 
Attempting to uplift remaining variables inzp[1]:59 [ print::j#2 print::j#1 ]
Uplifting [print] best 1899796 combination zp[1]:59 [ print::j#2 print::j#1 ] 
Attempting to uplift remaining variables inzp[1]:24 [ printf_number_buffer::format_zero_padding#10 ]
Uplifting [printf_number_buffer] best 1899796 combination zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ] 
Attempting to uplift remaining variables inzp[1]:23 [ printf_number_buffer::format_justify_left#10 ]
Uplifting [printf_number_buffer] best 1899796 combination zp[1]:23 [ printf_number_buffer::format_justify_left#10 ] 
Attempting to uplift remaining variables inzp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ]
Uplifting [legal] best 1899796 combination zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ] 
Attempting to uplift remaining variables inzp[1]:26 [ printf_number_buffer::format_upper_case#10 ]
Uplifting [printf_number_buffer] best 1899796 combination zp[1]:26 [ printf_number_buffer::format_upper_case#10 ] 
Attempting to uplift remaining variables inzp[1]:57 [ print::i#2 print::i#1 ]
Uplifting [print] best 1899796 combination zp[1]:57 [ print::i#2 print::i#1 ] 
Attempting to uplift remaining variables inzp[1]:58 [ print::i1#2 print::i1#1 ]
Uplifting [print] best 1899796 combination zp[1]:58 [ print::i1#2 print::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:176 [ legal::diff1_a#0 ]
Uplifting [legal] best 1898796 combination reg byte a [ legal::diff1_a#0 ] 
Attempting to uplift remaining variables inzp[1]:165 [ legal::column#0 ]
Uplifting [legal] best 1898796 combination zp[1]:165 [ legal::column#0 ] 
Attempting to uplift remaining variables inzp[1]:164 [ legal::row#0 ]
Uplifting [legal] best 1898796 combination zp[1]:164 [ legal::row#0 ] 
Attempting to uplift remaining variables inzp[1]:72 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 1898796 combination zp[1]:72 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ]
Uplifting [queens] best 1898796 combination zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ] 
Attempting to uplift remaining variables inzp[1]:166 [ legal::return#0 ]
Uplifting [legal] best 1898736 combination reg byte a [ legal::return#0 ] 
Attempting to uplift remaining variables inzp[1]:69 [ legal::return#4 ]
Uplifting [legal] best 1898700 combination reg byte a [ legal::return#4 ] 
Attempting to uplift remaining variables inzp[1]:144 [ tod_str::$0 ]
Uplifting [tod_str] best 1898696 combination reg byte a [ tod_str::$0 ] 
Attempting to uplift remaining variables inzp[1]:145 [ tod_str::$1 ]
Uplifting [tod_str] best 1898690 combination reg byte a [ tod_str::$1 ] 
Attempting to uplift remaining variables inzp[1]:146 [ tod_str::$2 ]
Uplifting [tod_str] best 1898686 combination reg byte a [ tod_str::$2 ] 
Attempting to uplift remaining variables inzp[1]:147 [ tod_str::$3 ]
Uplifting [tod_str] best 1898680 combination reg byte a [ tod_str::$3 ] 
Attempting to uplift remaining variables inzp[1]:148 [ tod_str::$4 ]
Uplifting [tod_str] best 1898676 combination reg byte a [ tod_str::$4 ] 
Attempting to uplift remaining variables inzp[1]:149 [ tod_str::$5 ]
Uplifting [tod_str] best 1898670 combination reg byte a [ tod_str::$5 ] 
Attempting to uplift remaining variables inzp[1]:150 [ tod_str::$6 ]
Uplifting [tod_str] best 1898666 combination reg byte a [ tod_str::$6 ] 
Attempting to uplift remaining variables inzp[1]:151 [ tod_str::$7 ]
Uplifting [tod_str] best 1898660 combination reg byte a [ tod_str::$7 ] 
Attempting to uplift remaining variables inzp[1]:152 [ tod_str::$8 ]
Uplifting [tod_str] best 1898656 combination reg byte a [ tod_str::$8 ] 
Attempting to uplift remaining variables inzp[1]:153 [ tod_str::$9 ]
Uplifting [tod_str] best 1898650 combination reg byte a [ tod_str::$9 ] 
Attempting to uplift remaining variables inzp[1]:154 [ tod_str::$10 ]
Uplifting [tod_str] best 1898646 combination reg byte a [ tod_str::$10 ] 
Attempting to uplift remaining variables inzp[1]:155 [ tod_str::$11 ]
Uplifting [tod_str] best 1898640 combination reg byte a [ tod_str::$11 ] 
Attempting to uplift remaining variables inzp[1]:156 [ tod_str::$12 ]
Uplifting [tod_str] best 1898636 combination reg byte a [ tod_str::$12 ] 
Attempting to uplift remaining variables inzp[1]:157 [ tod_str::$13 ]
Uplifting [tod_str] best 1898630 combination reg byte a [ tod_str::$13 ] 
Attempting to uplift remaining variables inzp[1]:158 [ tod_str::$14 ]
Uplifting [tod_str] best 1898626 combination reg byte a [ tod_str::$14 ] 
Attempting to uplift remaining variables inzp[1]:159 [ tod_str::$15 ]
Uplifting [tod_str] best 1898620 combination reg byte a [ tod_str::$15 ] 
Attempting to uplift remaining variables inzp[1]:104 [ tod_str::tod_HOURS#0 ]
Uplifting [tod_str] best 1898615 combination reg byte x [ tod_str::tod_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:103 [ tod_str::tod_MIN#0 ]
Uplifting [tod_str] best 1898610 combination reg byte y [ tod_str::tod_MIN#0 ] 
Attempting to uplift remaining variables inzp[1]:94 [ tod_init::tod_SEC#0 ]
Uplifting [tod_init] best 1898610 combination zp[1]:94 [ tod_init::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:93 [ tod_init::tod_TENTHS#0 ]
Uplifting [tod_init] best 1898610 combination zp[1]:93 [ tod_init::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:160 [ tod_read::return_HOURS#0 ]
Uplifting [tod_read] best 1898610 combination zp[1]:160 [ tod_read::return_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:102 [ tod_str::tod_SEC#0 ]
Uplifting [tod_str] best 1898610 combination zp[1]:102 [ tod_str::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:101 [ tod_str::tod_TENTHS#0 ]
Uplifting [tod_str] best 1898610 combination zp[1]:101 [ tod_str::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:97 [ tod_read::return_TENTHS#2 ]
Uplifting [tod_read] best 1898604 combination reg byte y [ tod_read::return_TENTHS#2 ] 
Attempting to uplift remaining variables inzp[1]:98 [ tod_read::return_SEC#2 ]
Uplifting [tod_read] best 1898598 combination reg byte x [ tod_read::return_SEC#2 ] 
Attempting to uplift remaining variables inzp[1]:99 [ tod_read::return_MIN#2 ]
Uplifting [tod_read] best 1898598 combination zp[1]:99 [ tod_read::return_MIN#2 ] 
Attempting to uplift remaining variables inzp[1]:100 [ tod_read::return_HOURS#2 ]
Uplifting [tod_read] best 1898594 combination reg byte a [ tod_read::return_HOURS#2 ] 
Coalescing zero page register [ zp[4]:18 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ] ] with [ zp[4]:53 [ count#10 count#25 ] ] - score: 2
Coalescing zero page register [ zp[2]:89 [ conio_cursor_text ] ] with [ zp[2]:108 [ cputln::$1 ] ] - score: 2
Coalescing zero page register [ zp[2]:89 [ conio_cursor_text cputln::$1 ] ] with [ zp[2]:112 [ cscroll::$7 ] ] - score: 2
Coalescing zero page register [ zp[2]:91 [ conio_cursor_color ] ] with [ zp[2]:110 [ cputln::$2 ] ] - score: 2
Coalescing zero page register [ zp[2]:91 [ conio_cursor_color cputln::$2 ] ] with [ zp[2]:114 [ cscroll::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:5 [ memset::str#3 ] ] with [ zp[2]:8 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memcpy::source#2 ] ] with [ zp[2]:14 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memcpy::destination#2 ] ] with [ zp[2]:16 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:120 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] ] with [ zp[4]:47 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:140 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] ] with [ zp[2]:127 [ ultoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ] ] with [ zp[2]:134 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 ] ] with [ zp[1]:164 [ legal::row#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:168 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:171 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 ] ] with [ zp[2]:78 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:187 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:178 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:183 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:130 [ ultoa::digit_value#0 ] ] with [ zp[4]:136 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:170 [ uctoa::digit_value#0 ] ] with [ zp[1]:173 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:181 [ utoa::digit_value#0 ] ] with [ zp[2]:185 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:122 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:5 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:32 [ strupr::src#2 strupr::src#1 ] ] with [ zp[2]:2 [ cputs::s#13 cputs::s#14 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:35 [ strlen::str#3 strlen::str#0 ] ] with [ zp[2]:12 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:23 [ printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ] with [ zp[2]:37 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[1]:59 [ print::j#2 print::j#1 ] ] with [ zp[1]:24 [ printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[1]:61 [ uctoa::digit#2 uctoa::digit#1 ] ] with [ zp[1]:25 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[1]:63 [ uctoa::started#2 uctoa::started#4 ] ] with [ zp[1]:26 [ printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 ] ] with [ zp[1]:28 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[1]:72 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:29 [ printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ]
Coalescing zero page register [ zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:64 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 ] ] with [ zp[2]:76 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:89 [ conio_cursor_text cputln::$1 cscroll::$7 ] ] with [ zp[2]:84 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:93 [ tod_init::tod_TENTHS#0 ] ] with [ zp[1]:30 [ printf_padding::pad#7 ] ]
Coalescing zero page register [ zp[1]:94 [ tod_init::tod_SEC#0 ] ] with [ zp[1]:31 [ printf_padding::i#2 printf_padding::i#1 ] ]
Coalescing zero page register [ zp[1]:99 [ tod_read::return_MIN#2 ] ] with [ zp[1]:52 [ queens::row#10 queens::row#1 queens::row#2 legal::row#0 ] ]
Coalescing zero page register [ zp[1]:101 [ tod_str::tod_TENTHS#0 ] ] with [ zp[1]:57 [ print::i#2 print::i#1 ] ]
Coalescing zero page register [ zp[1]:102 [ tod_str::tod_SEC#0 ] ] with [ zp[1]:58 [ print::i1#2 print::i1#1 ] ]
Coalescing zero page register [ zp[2]:118 [ memcpy::src_end#0 ] ] with [ zp[2]:116 [ memset::end#0 ] ]
Coalescing zero page register [ zp[1]:165 [ legal::column#0 ] ] with [ zp[1]:160 [ tod_read::return_HOURS#0 ] ]
Coalescing zero page register [ zp[2]:181 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:106 [ cputln::ln_offset#0 ] ]
Coalescing zero page register [ zp[2]:45 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:10 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:73 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:32 [ strupr::src#2 strupr::src#1 cputs::s#13 cputs::s#14 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:82 [ clrscr::line_text#5 clrscr::line_text#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:35 [ strlen::str#3 strlen::str#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:165 [ legal::column#0 tod_read::return_HOURS#0 ] ] with [ zp[1]:39 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[1]:170 [ uctoa::digit_value#0 uctoa_append::sub#0 ] ] with [ zp[1]:70 [ legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[2]:181 [ utoa::digit_value#0 utoa_append::sub#0 cputln::ln_offset#0 ] ] with [ zp[2]:118 [ memcpy::src_end#0 memset::end#0 ] ]
Allocated (was zp[4]:18) zp[4]:2 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 count#10 count#25 ]
Allocated (was zp[4]:40) zp[4]:6 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
Allocated (was zp[2]:45) zp[2]:10 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:59) zp[1]:12 [ print::j#2 print::j#1 printf_number_buffer::format_zero_padding#10 ]
Allocated (was zp[1]:61) zp[1]:13 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated (was zp[1]:63) zp[1]:14 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[1]:72) zp[1]:15 [ utoa::digit#2 utoa::digit#1 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated (was zp[2]:73) zp[2]:16 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strupr::src#2 strupr::src#1 cputs::s#13 cputs::s#14 cputs::s#0 ]
Allocated (was zp[2]:82) zp[2]:18 [ clrscr::line_text#5 clrscr::line_text#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::str#3 strlen::str#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[1]:87) zp[1]:20 [ conio_cursor_x ]
Allocated (was zp[1]:88) zp[1]:21 [ conio_cursor_y ]
Allocated (was zp[2]:89) zp[2]:22 [ conio_cursor_text cputln::$1 cscroll::$7 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:91) zp[2]:24 [ conio_cursor_color cputln::$2 cscroll::$8 ]
Allocated (was zp[1]:93) zp[1]:26 [ tod_init::tod_TENTHS#0 printf_padding::pad#7 ]
Allocated (was zp[1]:94) zp[1]:27 [ tod_init::tod_SEC#0 printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[1]:99) zp[1]:28 [ tod_read::return_MIN#2 queens::row#10 queens::row#1 queens::row#2 legal::row#0 ]
Allocated (was zp[1]:101) zp[1]:29 [ tod_str::tod_TENTHS#0 print::i#2 print::i#1 ]
Allocated (was zp[1]:102) zp[1]:30 [ tod_str::tod_SEC#0 print::i1#2 print::i1#1 ]
Allocated (was zp[4]:130) zp[4]:31 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
Allocated (was zp[1]:165) zp[1]:35 [ legal::column#0 tod_read::return_HOURS#0 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
Allocated (was zp[1]:170) zp[1]:36 [ uctoa::digit_value#0 uctoa_append::sub#0 legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated (was zp[2]:181) zp[2]:37 [ utoa::digit_value#0 utoa_append::sub#0 cputln::ln_offset#0 memcpy::src_end#0 memset::end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.
//
// This is an iterative solution.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = $14
  .label conio_cursor_y = $15
  .label conio_cursor_text = $16
  .label conio_cursor_color = $18
  // The number of found solutions
  .label count = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [9] call clrscr 
    // [388] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call cputs 
    // [45] phi from main::@1 to cputs [phi:main::@1->cputs]
  cputs_from___b1:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call cputs 
    // [45] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_uint 
    // [354] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
  printf_uint_from___b3:
    jsr printf_uint
    jmp __b4
    // main::@4
  __b4:
    // [16] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [17] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [18] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [19] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [20] call tod_init 
    jsr tod_init
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [22] call queens 
    // [243] phi from main::@5 to queens [phi:main::@5->queens]
  queens_from___b5:
    jsr queens
    // [23] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [24] call tod_read 
    jsr tod_read
    // [25] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [26] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [27] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [28] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    jmp __b7
    // main::@7
  __b7:
    // [29] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [30] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [31] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [32] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [33] call tod_str 
    jsr tod_str
    // [34] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [35] call cputs 
    // [45] phi from main::@8 to cputs [phi:main::@8->cputs]
  cputs_from___b8:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // main::@9
  __b9:
    // [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10
    // [37] call printf_ulong 
    // [113] phi from main::@9 to printf_ulong [phi:main::@9->printf_ulong]
  printf_ulong_from___b9:
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@9->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [38] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [39] call cputs 
    // [45] phi from main::@10 to cputs [phi:main::@10->cputs]
  cputs_from___b10:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [40] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [41] call printf_string 
    // [109] phi from main::@11 to printf_string [phi:main::@11->printf_string]
  printf_string_from___b11:
    jsr printf_string
    // [42] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [43] call cputs 
    // [45] phi from main::@12 to cputs [phi:main::@12->cputs]
  cputs_from___b12:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@12->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [44] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($10) s)
cputs: {
    .label s = $10
    // [46] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [46] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [48] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [49] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [50] return 
    rts
    // cputs::@2
  __b2:
    // [51] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [52] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [54] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [63] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [66] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $16
    .label __2 = $18
    .label ln_offset = $25
    // [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // [72] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [73] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [74] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [75] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $16
    .label __8 = $18
    // [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [77] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [78] call memcpy 
    // [99] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [79] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [80] call memcpy 
    // [99] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [81] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [82] call memset 
    // [91] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [91] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [83] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [84] call memset 
    // [91] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [91] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // [89] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [90] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($a) str, byte register(X) c)
memset: {
    .label end = $25
    .label dst = $a
    .label str = $a
    jmp __b1
    // memset::@1
  __b1:
    // [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [94] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [94] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [96] return 
    rts
    // memset::@3
  __b3:
    // [97] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [98] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($12) destination, void* zp($a) source)
memcpy: {
    .label src_end = $25
    .label dst = $12
    .label src = $a
    .label source = $a
    .label destination = $12
    // [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [103] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [103] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [103] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [105] return 
    rts
    // memcpy::@2
  __b2:
    // [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [107] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [110] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
  __b1_from_printf_string:
    jmp __b1
    // printf_string::@1
  __b1:
    // [111] call cputs 
    // [45] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
  cputs_from___b1:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [112] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .label uvalue = 2
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [116] call ultoa 
  // Format number into buffer
    // [185] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [117] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [118] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #0
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [119] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($d) buffer_sign, byte register(X) format_min_length, byte zp($23) format_justify_left, byte zp($c) format_zero_padding, byte zp($e) format_upper_case)
printf_number_buffer: {
    .label __19 = $a
    .label buffer_sign = $d
    .label padding = $24
    .label format_zero_padding = $c
    .label format_justify_left = $23
    .label format_upper_case = $e
    // [121] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b1_from_printf_number_buffer
    // [122] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [123] call strlen 
    // [179] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [124] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // [127] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [128] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [129] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [129] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // [131] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [133] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [132] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [133] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [134] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [135] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [136] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [137] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [138] call printf_padding 
    // [157] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [139] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [140] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [141] call cputc 
    // [53] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [142] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [143] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [144] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [145] call printf_padding 
    // [157] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [157] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [146] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [147] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [148] call strupr 
    // [164] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [149] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [150] call cputs 
    // [45] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [151] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [152] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [153] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [154] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [155] call printf_padding 
    // [157] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [156] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($1a) pad, byte zp($f) length)
printf_padding: {
    .label i = $1b
    .label length = $f
    .label pad = $1a
    // [158] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [158] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [159] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [160] return 
    rts
    // printf_padding::@2
  __b2:
    // [161] (byte) cputc::c#1 ← (byte) printf_padding::pad#7 -- vbuaa=vbuz1 
    lda.z pad
    // [162] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [163] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [158] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [158] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $10
    // [165] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [165] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [167] return 
    rts
    // strupr::@2
  __b2:
    // [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [169] call toupper 
    jsr toupper
    // [170] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [171] (byte~) strupr::$0 ← (byte) toupper::return#3
    // [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // [173] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [165] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [165] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [174] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [175] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [177] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [177] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [178] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($12) str)
strlen: {
    .label len = $a
    .label str = $12
    .label return = $a
    // [180] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [180] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [180] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [182] return 
    rts
    // strlen::@2
  __b2:
    // [183] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [184] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [180] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [180] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [180] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(6) value, byte* zp($a) buffer)
ultoa: {
    .label digit_value = $1f
    .label buffer = $a
    .label digit = $23
    .label value = 6
    // [186] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [186] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [186] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [187] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [191] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [192] return 
    rts
    // ultoa::@2
  __b2:
    // [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [195] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [197] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [198] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [186] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [186] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [186] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [202] call ultoa_append 
    // [206] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // [205] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [197] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($a) buffer, dword zp(6) value, dword zp($1f) sub)
ultoa_append: {
    .label buffer = $a
    .label value = 6
    .label sub = $1f
    .label return = 6
    // [207] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [207] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [210] return 
    rts
    // ultoa_append::@2
  __b2:
    // [211] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [207] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [207] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($1d) tod_TENTHS, byte zp($1e) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $1d
    .label tod_SEC = $1e
    // [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [214] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [215] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [217] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [218] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // [220] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [221] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [223] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [224] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // [226] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [227] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // [229] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [230] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // [232] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [233] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // [235] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [236] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [237] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $23
    .label return_MIN = $1c
    // [238] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [239] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [240] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [241] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [242] return 
    rts
}
  // queens
// Generates all valid placements of queens on a NxN board without recursion
// Works exactly like the recursive solution by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then moving on to generating all legal placements on the rows above.
// In practice this works like a depth first tree search where the level in the tree is the row on the board and each branch in the tree is the legal placement of a queen on that row. 
// The solution uses the board itself as a "cursor" moving through all possibilities
// When all columns on a row is exhausted move back down to the lower level and move forward one position until we are done with the last position on the first row
queens: {
    // The current row where the queen is moving
    .label row = $1c
    // [244] phi from queens to queens::@1 [phi:queens->queens::@1]
  __b1_from_queens:
    // [244] phi (dword) count#10 = (dword) 0 [phi:queens->queens::@1#0] -- vduz1=vduc1 
    lda #<0
    sta.z count
    lda #>0
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [244] phi (byte) queens::row#10 = (byte) 1 [phi:queens->queens::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    jmp __b1
    // [244] phi from queens::@4 queens::@7 queens::@8 queens::@9 to queens::@1 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1]
  __b1_from___b4:
  __b1_from___b7:
  __b1_from___b8:
  __b1_from___b9:
    // [244] phi (dword) count#10 = (dword) count#25 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#0] -- register_copy 
    // [244] phi (byte) queens::row#10 = (byte) queens::row#10 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#1] -- register_copy 
    jmp __b1
    // queens::@1
  __b1:
    jmp __b2
    // queens::@2
  __b2:
    // [245] *((const byte*) board + (byte) queens::row#10) ← ++ *((const byte*) board + (byte) queens::row#10) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z row
    inc board,x
    // [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3 -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z row
    lda board,y
    cmp #8+1
    beq __b3
    jmp __b5
    // queens::@5
  __b5:
    // [247] (byte) legal::row#0 ← (byte) queens::row#10
    // [248] (byte) legal::column#0 ← *((const byte*) board + (byte) queens::row#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z row
    lda board,y
    sta.z legal.column
    // [249] call legal 
    // [329] phi from queens::@5 to legal [phi:queens::@5->legal]
  legal_from___b5:
    jsr legal
    // [250] (byte) legal::return#0 ← (byte) legal::return#4
    jmp __b9
    // queens::@9
  __b9:
    // [251] (byte~) queens::$2 ← (byte) legal::return#0
    // [252] if((byte) 0==(byte~) queens::$2) goto queens::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1_from___b9
    jmp __b6
    // queens::@6
  __b6:
    // [253] if((byte) queens::row#10==(byte) 8) goto queens::@4 -- vbuz1_eq_vbuc1_then_la1 
    // position is legal - move up to the next row
    lda #8
    cmp.z row
    beq __b4
    jmp __b7
    // queens::@7
  __b7:
    // [254] (byte) queens::row#1 ← ++ (byte) queens::row#10 -- vbuz1=_inc_vbuz1 
    inc.z row
    jmp __b1_from___b7
    // queens::@4
  __b4:
    // [255] (dword) count#25 ← ++ (dword) count#10 -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // [256] call print 
    // [261] phi from queens::@4 to print [phi:queens::@4->print]
  print_from___b4:
    jsr print
    jmp __b1_from___b4
    // queens::@3
  __b3:
    // [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    // We moved past the end of the row - reset position and go down to the lower row
    lda #0
    ldy.z row
    sta board,y
    // [258] if((byte) queens::row#10==(byte) 1) goto queens::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z row
    beq __breturn
    jmp __b8
    // queens::@8
  __b8:
    // [259] (byte) queens::row#2 ← -- (byte) queens::row#10 -- vbuz1=_dec_vbuz1 
    dec.z row
    jmp __b1_from___b8
    // queens::@return
  __breturn:
    // [260] return 
    rts
}
  // print
// Print the board with a legal placement.
print: {
    .label i = $1d
    .label i1 = $1e
    .label j = $c
    // [262] call gotoxy 
    // [323] phi from print to gotoxy [phi:print->gotoxy]
  gotoxy_from_print:
    jsr gotoxy
    // [263] phi from print to print::@11 [phi:print->print::@11]
  __b11_from_print:
    jmp __b11
    // print::@11
  __b11:
    // [264] call cputs 
    // [45] phi from print::@11 to cputs [phi:print::@11->cputs]
  cputs_from___b11:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b12
    // print::@12
  __b12:
    // [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25
    // [266] call printf_ulong 
    // [113] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
  printf_ulong_from___b12:
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [267] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
  __b13_from___b12:
    jmp __b13
    // print::@13
  __b13:
    // [268] call cputs 
    // [45] phi from print::@13 to cputs [phi:print::@13->cputs]
  cputs_from___b13:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [269] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
  __b1_from___b13:
    // [269] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b1
    // print::@1
  __b1:
    // [270] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [271] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
  __b3_from___b1:
    // [271] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    jmp __b3
    // print::@3
  __b3:
    // [272] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4_from___b3
    jmp __breturn
    // print::@return
  __breturn:
    // [273] return 
    rts
    // [274] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
  __b4_from___b3:
    jmp __b4
    // print::@4
  __b4:
    // [275] call cputs 
    // [45] phi from print::@4 to cputs [phi:print::@4->cputs]
  cputs_from___b4:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // print::@15
  __b15:
    // [276] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2 -- vbuxx=vbuz1 
    ldx.z i1
    // [277] call printf_uchar 
    // [290] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
  printf_uchar_from___b15:
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [278] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
  __b5_from___b15:
    // [278] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    jmp __b5
    // print::@5
  __b5:
    // [279] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    jmp __b7
    // print::@7
  __b7:
    // [280] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [271] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
  __b3_from___b7:
    // [271] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8_from___b6
    // [282] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
  __b10_from___b6:
    jmp __b10
    // print::@10
  __b10:
    // [283] call cputs 
    // [45] phi from print::@10 to cputs [phi:print::@10->cputs]
  cputs_from___b10:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@9
  __b9:
    // [284] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [278] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
  __b5_from___b9:
    // [278] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [285] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
  __b8_from___b6:
    jmp __b8
    // print::@8
  __b8:
    // [286] call cputs 
    // [45] phi from print::@8 to cputs [phi:print::@8->cputs]
  cputs_from___b8:
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // [287] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2 -- vbuxx=vbuz1 
    ldx.z i
    // [288] call printf_uchar 
    // [290] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
  printf_uchar_from___b2:
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    jmp __b14
    // print::@14
  __b14:
    // [289] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [269] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
  __b1_from___b14:
    // [269] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [292] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
    // [293] call uctoa 
  // Format number into buffer
    // [297] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [294] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [295] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #0
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [296] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($10) buffer)
uctoa: {
    .label digit_value = $24
    .label buffer = $10
    .label digit = $d
    .label started = $e
    // [298] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [298] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [298] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [299] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [302] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [303] return 
    rts
    // uctoa::@2
  __b2:
    // [304] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [305] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [306] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [307] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [308] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [298] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [298] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [298] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [310] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [311] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [312] call uctoa_append 
    // [316] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [313] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [314] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [315] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [307] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($10) buffer, byte register(X) value, byte zp($24) sub)
uctoa_append: {
    .label buffer = $10
    .label sub = $24
    // [317] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [317] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [318] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [320] return 
    rts
    // uctoa_append::@2
  __b2:
    // [321] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [317] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [317] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [328] return 
    rts
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($1c) row, byte zp($23) column)
legal: {
    .label row = $1c
    .label column = $23
    .label diff1_return = $24
    // [330] phi from legal to legal::@1 [phi:legal->legal::@1]
  __b1_from_legal:
    // [330] phi (byte) legal::i#10 = (byte) 1 [phi:legal->legal::@1#0] -- vbuyy=vbuc1 
    ldy #1
    jmp __b1
    // legal::@1
  __b1:
    // [331] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuxx=vbuz1_minus_1 
    ldx.z row
    dex
    // [332] if((byte) legal::i#10<=(byte~) legal::$0) goto legal::@2 -- vbuyy_le_vbuxx_then_la1 
    sty.z $ff
    cpx.z $ff
    bcs __b2
    // [333] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
  __breturn_from___b1:
    // [333] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuaa=vbuc1 
    lda #1
    jmp __breturn
    // [333] phi from legal::@2 legal::@5 to legal::@return [phi:legal::@2/legal::@5->legal::@return]
  __breturn_from___b2:
  __breturn_from___b5:
    // [333] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@5->legal::@return#0] -- vbuaa=vbuc1 
    lda #0
    jmp __breturn
    // legal::@return
  __breturn:
    // [334] return 
    rts
    // legal::@2
  __b2:
    // [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuyy_eq_vbuz1_then_la1 
    lda board,y
    cmp.z column
    beq __breturn_from___b2
    jmp __b4
    // legal::@4
  __b4:
    // [336] (byte) legal::diff1_a#0 ← *((const byte*) board + (byte) legal::i#10) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda board,y
    jmp diff1
    // legal::diff1
  diff1:
    // [337] if((byte) legal::diff1_a#0<(byte) legal::column#0) goto legal::diff1_@1 -- vbuaa_lt_vbuz1_then_la1 
    cmp.z column
    bcc diff1___b1
    jmp diff1___b3
    // legal::diff1_@3
  diff1___b3:
    // [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0 -- vbuz1=vbuaa_minus_vbuz2 
    sec
    sbc.z column
    sta.z diff1_return
    // [339] phi from legal::diff1_@1 legal::diff1_@3 to legal::diff1_@return [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return]
  diff1___breturn_from_diff1___b1:
  diff1___breturn_from_diff1___b3:
    // [339] phi (byte) legal::diff1_return#2 = (byte) legal::diff1_return#0 [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return#0] -- register_copy 
    jmp diff1___breturn
    // legal::diff1_@return
  diff1___breturn:
    jmp diff2
    // legal::diff2
  diff2:
    // [340] if((byte) legal::i#10<(byte) legal::row#0) goto legal::diff2_@1 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z row
    bcc diff2___b1
    jmp diff2___b3
    // legal::diff2_@3
  diff2___b3:
    // [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0 -- vbuaa=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z row
    // [342] phi from legal::diff2_@1 legal::diff2_@3 to legal::diff2_@return [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return]
  diff2___breturn_from_diff2___b1:
  diff2___breturn_from_diff2___b3:
    // [342] phi (byte) legal::diff2_return#2 = (byte) legal::diff2_return#0 [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return#0] -- register_copy 
    jmp diff2___breturn
    // legal::diff2_@return
  diff2___breturn:
    jmp __b5
    // legal::@5
  __b5:
    // [343] if((byte) legal::diff1_return#2!=(byte) legal::diff2_return#2) goto legal::@3 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z diff1_return
    bne __b3
    jmp __breturn_from___b5
    // legal::@3
  __b3:
    // [344] (byte) legal::i#1 ← ++ (byte) legal::i#10 -- vbuyy=_inc_vbuyy 
    iny
    // [330] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
  __b1_from___b3:
    // [330] phi (byte) legal::i#10 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
    // legal::diff2_@1
  diff2___b1:
    // [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10 -- vbuaa=vbuz1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z row
    jmp diff2___breturn_from_diff2___b1
    // legal::diff1_@1
  diff1___b1:
    // [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z column
    sta.z diff1_return
    jmp diff1___breturn_from_diff1___b1
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($1a) tod_TENTHS, byte zp($1b) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $1a
    .label tod_SEC = $1b
    // [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [349] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [350] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [351] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [352] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [353] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_uint::@1
  __b1:
    // [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [356] call utoa 
  // Format number into buffer
    // [360] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [357] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [358] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [359] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($10) value, byte* zp($12) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $25
    .label buffer = $12
    .label digit = $f
    .label value = $10
    // [361] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [361] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [361] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [361] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [361] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [362] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [366] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [367] return 
    rts
    // utoa::@2
  __b2:
    // [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [370] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [372] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [372] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [373] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [361] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [361] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [361] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [361] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [361] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [375] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [377] call utoa_append 
    // [381] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [379] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [380] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [372] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [372] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($12) buffer, word zp($10) value, word zp($25) sub)
utoa_append: {
    .label buffer = $12
    .label value = $10
    .label sub = $25
    .label return = $10
    // [382] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [382] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [385] return 
    rts
    // utoa_append::@2
  __b2:
    // [386] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [382] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [382] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $12
    .label line_cols = $16
    // [389] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [389] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [389] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [389] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [390] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [391] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [392] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [395] return 
    rts
    // [396] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [396] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [397] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [400] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [389] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [389] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [389] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [389] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // [403] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [396] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [396] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b9
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b15
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp diff1
Removing instruction jmp diff1___b3
Removing instruction jmp diff1___breturn
Removing instruction jmp diff2
Removing instruction jmp diff2___b3
Removing instruction jmp diff2___breturn
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda.z padding
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b5_from___b4 with __b5
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b1 with __b2
Replacing label __b1_from___b9 with __b2
Replacing label __b1_from___b7 with __b2
Replacing label __b1_from___b4 with __b2
Replacing label __b1_from___b8 with __b2
Replacing label __b4_from___b3 with __b4
Replacing label __b8_from___b6 with __b8
Replacing label __breturn_from___b2 with __breturn_from___b5
Replacing label diff2___breturn_from_diff2___b1 with __b5
Replacing label diff1___breturn_from_diff1___b1 with diff2
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction cputs_from___b1:
Removing instruction __b2_from___b1:
Removing instruction cputs_from___b2:
Removing instruction __b3_from___b2:
Removing instruction printf_uint_from___b3:
Removing instruction __b5_from___b4:
Removing instruction queens_from___b5:
Removing instruction __b6_from___b5:
Removing instruction __b8_from___b7:
Removing instruction cputs_from___b8:
Removing instruction printf_ulong_from___b9:
Removing instruction __b10_from___b9:
Removing instruction cputs_from___b10:
Removing instruction __b11_from___b10:
Removing instruction printf_string_from___b11:
Removing instruction __b12_from___b11:
Removing instruction cputs_from___b12:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_printf_string:
Removing instruction cputs_from___b1:
Removing instruction __b6_from_printf_number_buffer:
Removing instruction strlen_from___b6:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b11_from___b4:
Removing instruction strupr_from___b11:
Removing instruction __b5_from___b11:
Removing instruction __b5_from___b4:
Removing instruction cputs_from___b5:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Removing instruction __b1_from___b4:
Removing instruction __b1_from___b7:
Removing instruction __b1_from___b8:
Removing instruction __b1_from___b9:
Removing instruction __b1:
Removing instruction __b11_from_print:
Removing instruction cputs_from___b11:
Removing instruction printf_ulong_from___b12:
Removing instruction __b13_from___b12:
Removing instruction cputs_from___b13:
Removing instruction __b4_from___b3:
Removing instruction cputs_from___b4:
Removing instruction __b10_from___b6:
Removing instruction cputs_from___b10:
Removing instruction __b8_from___b6:
Removing instruction cputs_from___b8:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Removing instruction __breturn_from___b2:
Removing instruction diff1___breturn_from_diff1___b1:
Removing instruction diff1___breturn_from_diff1___b3:
Removing instruction diff1___breturn:
Removing instruction diff2___breturn_from_diff2___b1:
Removing instruction diff2___breturn_from_diff2___b3:
Removing instruction diff2___breturn:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction clrscr_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction ultoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction cputc_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction cputc_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_strupr:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_queens:
Removing instruction __b5:
Removing instruction legal_from___b5:
Removing instruction __b9:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction print_from___b4:
Removing instruction __b8:
Removing instruction gotoxy_from_print:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b15:
Removing instruction printf_uchar_from___b15:
Removing instruction __b5_from___b15:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b10:
Removing instruction __b5_from___b9:
Removing instruction printf_uchar_from___b2:
Removing instruction __b14:
Removing instruction __b1_from___b14:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_legal:
Removing instruction __breturn_from___b1:
Removing instruction __b4:
Removing instruction diff1:
Removing instruction diff1___b3:
Removing instruction diff2___b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __breturn_from___b5 to __b4
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy.z row
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore mem[4] = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(const byte*) board[(number) $14]  = { fill( $14, 0) }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 20002.0
(byte) clrscr::c#2 reg byte y 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 2002.0
(byte) clrscr::l#2 reg byte x 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:22 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:22 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:18 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:18 1714.7142857142858
(byte*) conio_cursor_color loadstore zp[2]:24 1.1435897436410828E13
(byte*) conio_cursor_text loadstore zp[2]:22 1.1319796954822896E13
(byte) conio_cursor_x loadstore zp[1]:20 1.311475410383115E12
(byte) conio_cursor_y loadstore zp[1]:21 1.6019900498010504E13
(dword) count
(dword) count#10 count zp[4]:2 276.51724137931035
(dword) count#25 count zp[4]:2 387.19354838709677
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 2.0000000002E10
(byte) cputc::c#1 reg byte a 2.000000000002E12
(byte) cputc::c#2 reg byte a 2.00000002E8
(byte) cputc::c#3 reg byte a 1.05050500000025E13
(void()) cputln()
(byte*~) cputln::$1 zp[2]:22 2.00000000000002E14
(byte*~) cputln::$2 zp[2]:24 2.00000000000002E14
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0 ln_offset zp[2]:37 1.00000000000001E14
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1.0000000001E10
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:16 5.0000000005E9
(to_nomodify byte*) cputs::s#13 s zp[2]:16 1.5500000002E10
(to_nomodify byte*) cputs::s#14 s zp[2]:16 1.000000001E9
(void()) cscroll()
(byte*~) cscroll::$7 zp[2]:22 2.000000000000002E15
(byte*~) cscroll::$8 zp[2]:24 2.000000000000002E15
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(label) gotoxy::@1
(label) gotoxy::@return
(word) gotoxy::offset
(const word) gotoxy::offset#0 offset = (word)(const byte) gotoxy::y#2*(byte) $28
(byte) gotoxy::x
(const byte) gotoxy::x#2 x = (byte) 0
(byte) gotoxy::y
(const byte) gotoxy::y#2 y = (byte) 5
(byte()) legal((byte) legal::row , (byte) legal::column)
(byte~) legal::$0 reg byte x 2000002.0
(label) legal::@1
(label) legal::@2
(label) legal::@3
(label) legal::@4
(label) legal::@5
(label) legal::@return
(byte) legal::column
(byte) legal::column#0 column zp[1]:35 235353.23529411765
(label) legal::diff1
(label) legal::diff1_@1
(label) legal::diff1_@3
(label) legal::diff1_@return
(byte) legal::diff1_a
(byte) legal::diff1_a#0 reg byte a 2000002.0
(byte) legal::diff1_b
(byte) legal::diff1_return
(byte) legal::diff1_return#0 diff1_return zp[1]:36 2000002.0
(byte) legal::diff1_return#1 diff1_return zp[1]:36 2000002.0
(byte) legal::diff1_return#2 diff1_return zp[1]:36 600000.6000000001
(label) legal::diff2
(label) legal::diff2_@1
(label) legal::diff2_@3
(label) legal::diff2_@return
(byte) legal::diff2_a
(byte) legal::diff2_b
(byte) legal::diff2_return
(byte) legal::diff2_return#0 reg byte a 2000002.0
(byte) legal::diff2_return#1 reg byte a 2000002.0
(byte) legal::diff2_return#2 reg byte a 3000003.0
(byte) legal::i
(byte) legal::i#1 reg byte y 2000002.0
(byte) legal::i#10 reg byte y 571429.1428571428
(byte) legal::return
(byte) legal::return#0 reg byte a 2002.0
(byte) legal::return#4 reg byte a 333.6666666666667
(byte) legal::row
(byte) legal::row#0 row zp[1]:28 222278.05555555556
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::s[(byte) $29]  = (byte*) " - n queens problem using backtracking -"
(const byte*) main::s1[(byte) $13]  = (byte*) "
number of queens:"
(const byte*) main::s2[(byte) $e]  = (byte*) "

solutions: "
(const byte*) main::s3[(byte) 8]  = (byte*) " time: "
(const byte*) main::s4[(byte) 3]  = (byte*) ".
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:18
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:18 1.0E20
(byte*) memcpy::dst#2 dst zp[2]:18 1.0000333333333333E20
(byte*) memcpy::dst#4 dst zp[2]:18 2.0E16
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:10
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:10 2.0E20
(byte*) memcpy::src#2 src zp[2]:10 1.000025E20
(byte*) memcpy::src#4 src zp[2]:10 1.0E16
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:37 1.250125E19
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.4285714285714287E19
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:10 2.0E20
(byte*) memset::dst#2 dst zp[2]:10 1.3333666666666666E20
(byte*) memset::dst#4 dst zp[2]:10 2.0E16
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:37 1.6668333333333332E19
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:10
(void()) print()
(label) print::@1
(label) print::@10
(label) print::@11
(label) print::@12
(label) print::@13
(label) print::@14
(label) print::@15
(label) print::@2
(label) print::@3
(label) print::@4
(label) print::@5
(label) print::@6
(label) print::@7
(label) print::@8
(label) print::@9
(label) print::@return
(byte) print::i
(byte) print::i#1 i zp[1]:29 2000002.0
(byte) print::i#2 i zp[1]:29 1000001.0
(byte) print::i1
(byte) print::i1#1 i1 zp[1]:30 2000002.0
(byte) print::i1#2 i1 zp[1]:30 1000000.357142857
(byte) print::j
(byte) print::j#1 j zp[1]:12 2.0000002E7
(byte) print::j#2 j zp[1]:12 5714286.285714285
(const byte*) print::s[(byte) 3]  = (byte*) "
#"
(const byte*) print::s1[(byte) 4]  = (byte*) ":
 "
(const byte*) print::s2[(byte) 2]  = (byte*) "
"
(const byte*) print::s3[(byte) 2]  = (byte*) "Q"
(const byte*) print::s4[(byte) 2]  = (byte*) "-"
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 zp[2]:10 1.00000001E8
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:13 200002.0
(byte) printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:13 202.0
(byte) printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:13 1.55050053E7
(byte) printf_number_buffer::buffer_sign#2 buffer_sign zp[1]:13 2.0000002E7
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:35 6451612.9677419355
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#3 reg byte x 1.00000001E7
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:14 3846153.8846153845
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:12 9375000.09375
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 reg byte y 1.500000015E8
(signed byte) printf_number_buffer::len#1 reg byte y 2.00000002E8
(signed byte) printf_number_buffer::len#2 reg byte y 3.00000003E8
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 padding zp[1]:36 1.00000001E8
(signed byte) printf_number_buffer::padding#10 padding zp[1]:36 1.904761923809524E7
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:27 2.000000000002E12
(byte) printf_padding::i#2 i zp[1]:27 7.5000000000075E11
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:15 2.00000002E8
(byte) printf_padding::length#1 length zp[1]:15 2.00000002E8
(byte) printf_padding::length#2 length zp[1]:15 2.00000002E8
(byte) printf_padding::length#6 length zp[1]:15 1.6671666666733334E11
(byte) printf_padding::pad
(byte) printf_padding::pad#7 pad zp[1]:26 1.6666666666683334E11
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(label) printf_string::@1
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::padding
(byte*) printf_string::str
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 reg byte x 2000002.0
(byte) printf_uchar::uvalue#1 reg byte x 2000002.0
(byte) printf_uchar::uvalue#2 reg byte x 6000001.5
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@1
(label) printf_uint::@2
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(const byte) printf_uint::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_uint::format_min_length
(const byte) printf_uint::format_min_length#0 format_min_length = (byte) 0
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(const byte) printf_uint::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_uint::format_zero_padding
(const byte) printf_uint::format_zero_padding#0 format_zero_padding = (byte) 0
(word) printf_uint::uvalue
(const word) printf_uint::uvalue#0 uvalue = (byte) 8
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 uvalue zp[4]:2 22.0
(dword) printf_ulong::uvalue#1 uvalue zp[4]:2 20002.0
(dword) printf_ulong::uvalue#2 uvalue zp[4]:2 55006.5
(void()) queens()
(byte~) queens::$2 reg byte a 2002.0
(label) queens::@1
(label) queens::@2
(label) queens::@3
(label) queens::@4
(label) queens::@5
(label) queens::@6
(label) queens::@7
(label) queens::@8
(label) queens::@9
(label) queens::@return
(byte) queens::row
(byte) queens::row#1 row zp[1]:28 2002.0
(byte) queens::row#10 row zp[1]:28 1144.0
(byte) queens::row#2 row zp[1]:28 2002.0
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:10 1.000000000001E12
(word) strlen::len#2 len zp[2]:10 5.0002500000075E11
(word) strlen::return
(word) strlen::return#2 return zp[2]:10 2.00000002E8
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:18 2.000000000002E12
(byte*) strlen::str#3 str zp[2]:18 1.000000000001E12
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 reg byte a 2.000000000002E12
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 src zp[2]:16 2.000000000002E12
(byte*) strupr::src#2 src zp[2]:16 7.142857142864285E11
(byte*) strupr::str
(const byte*) strupr::str#0 str = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 reg byte y 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 reg byte x 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 tod_SEC zp[1]:27 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:26 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 return_HOURS zp[1]:35 12.444444444444443
(byte) tod_read::return_HOURS#2 reg byte a 5.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 reg byte a 16.0
(byte) tod_read::return_MIN#2 return_MIN zp[1]:28 5.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 reg byte x 22.4
(byte) tod_read::return_SEC#2 reg byte x 5.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 reg byte y 37.33333333333333
(byte) tod_read::return_TENTHS#2 reg byte y 5.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 reg byte a 202.0
(byte~) tod_str::$1 reg byte a 202.0
(byte~) tod_str::$10 reg byte a 202.0
(byte~) tod_str::$11 reg byte a 202.0
(byte~) tod_str::$12 reg byte a 202.0
(byte~) tod_str::$13 reg byte a 202.0
(byte~) tod_str::$14 reg byte a 202.0
(byte~) tod_str::$15 reg byte a 202.0
(byte~) tod_str::$2 reg byte a 202.0
(byte~) tod_str::$3 reg byte a 202.0
(byte~) tod_str::$4 reg byte a 202.0
(byte~) tod_str::$5 reg byte a 202.0
(byte~) tod_str::$6 reg byte a 202.0
(byte~) tod_str::$7 reg byte a 202.0
(byte~) tod_str::$8 reg byte a 202.0
(byte~) tod_str::$9 reg byte a 202.0
(label) tod_str::@return
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 reg byte x 53.25
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 reg byte y 19.363636363636363
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 tod_SEC zp[1]:30 11.833333333333332
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:29 8.52
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 reg byte a 1.7000000000001998E13
(byte) toupper::return
(byte) toupper::return#0 reg byte a 2.0000000000002E13
(byte) toupper::return#2 reg byte a 1.0333333333334666E13
(byte) toupper::return#3 reg byte a 2.000000000002E12
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:16 3.3350000000500004E10
(byte*) uctoa::buffer#14 buffer zp[2]:16 1.500000000015E11
(byte*) uctoa::buffer#3 buffer zp[2]:16 2.00000002E8
(byte*) uctoa::buffer#4 buffer zp[2]:16 2.00000000002E11
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:13 2.00000000002E11
(byte) uctoa::digit#2 digit zp[1]:13 3.076923076953846E10
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:36 6.0000000000600006E10
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:14 6.0000000000600006E10
(byte) uctoa::started#4 started zp[1]:14 1.00000000001E11
(byte) uctoa::value
(byte) uctoa::value#0 reg byte x 1.00000000001E11
(byte) uctoa::value#1 reg byte x 5.5000001E7
(byte) uctoa::value#2 reg byte x 6.670000000100001E10
(byte) uctoa::value#6 reg byte x 1.500000000015E11
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:16 1.3750000000025E11
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 reg byte y 1.0E16
(byte) uctoa_append::digit#2 reg byte y 1.00005E16
(byte) uctoa_append::return
(byte) uctoa_append::return#0 reg byte x 2.00000000002E11
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:36 3.33335E15
(byte) uctoa_append::value
(byte) uctoa_append::value#0 reg byte x 3.666666666673334E11
(byte) uctoa_append::value#1 reg byte x 2.0E16
(byte) uctoa_append::value#2 reg byte x 5.000183333333334E15
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 reg byte a 2.00000002E8
(byte~) ultoa::$11 reg byte a 2000002.0
(label) ultoa::@1
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 buffer zp[2]:10 2.871428614285714E7
(byte*) ultoa::buffer#14 buffer zp[2]:10 1.500000015E8
(byte*) ultoa::buffer#3 buffer zp[2]:10 2000002.0
(byte*) ultoa::buffer#4 buffer zp[2]:10 2.00000002E8
(byte) ultoa::digit
(byte) ultoa::digit#1 digit zp[1]:35 2.00000002E8
(byte) ultoa::digit#2 digit zp[1]:35 2.857142885714286E7
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 digit_value zp[4]:31 6.0000000599999994E7
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 reg byte x 5.00000005E7
(byte) ultoa::started#4 reg byte x 1.00000001E8
(dword) ultoa::value
(dword) ultoa::value#0 value zp[4]:6 1.00000001E8
(dword) ultoa::value#1 value zp[4]:6 550001.0
(dword) ultoa::value#2 value zp[4]:6 5.7285715E7
(dword) ultoa::value#6 value zp[4]:6 1.500000015E8
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 buffer zp[2]:10 1.3750000025E8
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 reg byte x 1.000000000001E12
(byte) ultoa_append::digit#2 reg byte x 1.0005000000015E12
(dword) ultoa_append::return
(dword) ultoa_append::return#0 return zp[4]:6 2.00000002E8
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 sub zp[4]:31 3.333500000005E11
(dword) ultoa_append::value
(dword) ultoa_append::value#0 value zp[4]:6 3.666666673333334E8
(dword) ultoa_append::value#1 value zp[4]:6 2.000000000002E12
(dword) ultoa_append::value#2 value zp[4]:6 5.0018333333416675E11
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 20002.0
(byte~) utoa::$11 reg byte a 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:18 3000.4285714285716
(byte*) utoa::buffer#14 buffer zp[2]:18 15001.5
(byte*) utoa::buffer#3 buffer zp[2]:18 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:18 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:15 20002.0
(byte) utoa::digit#2 digit zp[1]:15 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:37 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 5000.5
(byte) utoa::started#4 reg byte x 10001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:16 10001.0
(word) utoa::value#2 value zp[2]:16 5714.857142857143
(word) utoa::value#6 value zp[2]:16 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:18 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000001E7
(byte) utoa_append::digit#2 reg byte x 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:16 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:37 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:16 36667.33333333333
(word) utoa_append::value#1 value zp[2]:16 2.0000002E7
(word) utoa_append::value#2 value zp[2]:16 5018334.166666666

reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
reg byte x [ memset::c#4 ]
zp[4]:2 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 count#10 count#25 ]
reg byte x [ printf_number_buffer::format_min_length#3 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[4]:6 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
zp[2]:10 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[1]:12 [ print::j#2 print::j#1 printf_number_buffer::format_zero_padding#10 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
zp[1]:13 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:14 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::format_upper_case#10 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte y [ legal::i#10 legal::i#1 ]
reg byte a [ legal::return#4 ]
reg byte a [ legal::diff2_return#2 legal::diff2_return#0 legal::diff2_return#1 ]
zp[1]:15 [ utoa::digit#2 utoa::digit#1 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[2]:16 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strupr::src#2 strupr::src#1 cputs::s#13 cputs::s#14 cputs::s#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:18 [ clrscr::line_text#5 clrscr::line_text#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::str#3 strlen::str#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:20 [ conio_cursor_x ]
zp[1]:21 [ conio_cursor_y ]
zp[2]:22 [ conio_cursor_text cputln::$1 cscroll::$7 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[2]:24 [ conio_cursor_color cputln::$2 cscroll::$8 ]
zp[1]:26 [ tod_init::tod_TENTHS#0 printf_padding::pad#7 ]
zp[1]:27 [ tod_init::tod_SEC#0 printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ tod_init::tod_MIN#0 ]
reg byte y [ tod_init::tod_HOURS#0 ]
reg byte y [ tod_read::return_TENTHS#2 ]
reg byte x [ tod_read::return_SEC#2 ]
zp[1]:28 [ tod_read::return_MIN#2 queens::row#10 queens::row#1 queens::row#2 legal::row#0 ]
reg byte a [ tod_read::return_HOURS#2 ]
zp[1]:29 [ tod_str::tod_TENTHS#0 print::i#2 print::i#1 ]
zp[1]:30 [ tod_str::tod_SEC#0 print::i1#2 print::i1#1 ]
reg byte y [ tod_str::tod_MIN#0 ]
reg byte x [ tod_str::tod_HOURS#0 ]
reg byte a [ cputs::c#1 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:31 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
reg byte a [ tod_str::$0 ]
reg byte a [ tod_str::$1 ]
reg byte a [ tod_str::$2 ]
reg byte a [ tod_str::$3 ]
reg byte a [ tod_str::$4 ]
reg byte a [ tod_str::$5 ]
reg byte a [ tod_str::$6 ]
reg byte a [ tod_str::$7 ]
reg byte a [ tod_str::$8 ]
reg byte a [ tod_str::$9 ]
reg byte a [ tod_str::$10 ]
reg byte a [ tod_str::$11 ]
reg byte a [ tod_str::$12 ]
reg byte a [ tod_str::$13 ]
reg byte a [ tod_str::$14 ]
reg byte a [ tod_str::$15 ]
reg byte a [ tod_read::return_MIN#0 ]
reg byte x [ tod_read::return_SEC#0 ]
reg byte y [ tod_read::return_TENTHS#0 ]
zp[1]:35 [ legal::column#0 tod_read::return_HOURS#0 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
reg byte a [ legal::return#0 ]
reg byte a [ queens::$2 ]
zp[1]:36 [ uctoa::digit_value#0 uctoa_append::sub#0 legal::diff1_return#2 legal::diff1_return#0 legal::diff1_return#1 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
reg byte x [ uctoa_append::return#0 ]
reg byte x [ legal::$0 ]
reg byte a [ legal::diff1_a#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:37 [ utoa::digit_value#0 utoa_append::sub#0 cputln::ln_offset#0 memcpy::src_end#0 memset::end#0 ]
mem[12] [ printf_buffer ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 1603898

  // File Comments
// N Queens Problem in C Using Backtracking
//
// N Queens Problem is a famous puzzle in which n-queens are to be placed on a nxn chess board such that no two queens are in the same row, column or diagonal.
//
// This is an iterative solution.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = $14
  .label conio_cursor_y = $15
  .label conio_cursor_text = $16
  .label conio_cursor_color = $18
  // The number of found solutions
  .label count = 2
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_cursor_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // conio_cursor_color = CONIO_SCREEN_COLORS
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [7] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // clrscr()
    // [9] call clrscr 
    // [388] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf(" - n queens problem using backtracking -")
    // [11] call cputs 
    // [45] phi from main::@1 to cputs [phi:main::@1->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s [phi:main::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("\nnumber of queens:%u",QUEENS)
    // [13] call cputs 
    // [45] phi from main::@2 to cputs [phi:main::@2->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s1 [phi:main::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf("\nnumber of queens:%u",QUEENS)
    // [15] call printf_uint 
    // [354] phi from main::@3 to printf_uint [phi:main::@3->printf_uint]
    jsr printf_uint
    // main::@4
    // tod_init(TOD_ZERO)
    // [16] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [17] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [18] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [19] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [20] call tod_init 
    jsr tod_init
    // [21] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // queens()
    // [22] call queens 
    // [243] phi from main::@5 to queens [phi:main::@5->queens]
    jsr queens
    // [23] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // tod_read()
    // [24] call tod_read 
    jsr tod_read
    // [25] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [26] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [27] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [28] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    // main::@7
    // tod_str(tod_read())
    // [29] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [30] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [31] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [32] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [33] call tod_str 
    jsr tod_str
    // [34] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [35] call cputs 
    // [45] phi from main::@8 to cputs [phi:main::@8->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s2 [phi:main::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    // main::@9
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [36] (dword) printf_ulong::uvalue#0 ← (dword) count#10
    // [37] call printf_ulong 
    // [113] phi from main::@9 to printf_ulong [phi:main::@9->printf_ulong]
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#0 [phi:main::@9->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [38] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [39] call cputs 
    // [45] phi from main::@10 to cputs [phi:main::@10->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s3 [phi:main::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    // [40] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [41] call printf_string 
    // [109] phi from main::@11 to printf_string [phi:main::@11->printf_string]
    jsr printf_string
    // [42] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // printf("\n\nsolutions: %lu time: %s.\n",count,tod_str(tod_read()))
    // [43] call cputs 
    // [45] phi from main::@12 to cputs [phi:main::@12->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) main::s4 [phi:main::@12->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    // main::@return
    // }
    // [44] return 
    rts
    s: .text " - n queens problem using backtracking -"
    .byte 0
    s1: .text @"\nnumber of queens:"
    .byte 0
    s2: .text @"\n\nsolutions: "
    .byte 0
    s3: .text " time: "
    .byte 0
    s4: .text @".\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($10) s)
cputs: {
    .label s = $10
    // [46] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [46] phi (to_nomodify byte*) cputs::s#13 = (to_nomodify byte*) cputs::s#14 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [47] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#13) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [48] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#13 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [49] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [50] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [51] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [52] call cputc 
    // [53] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [54] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [55] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [56] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [57] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [58] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [59] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // conio_cursor_x = 0
    // [61] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // ++conio_cursor_y;
    // [62] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [63] call cscroll 
    jsr cscroll
    // cputc::@return
  __breturn:
    // }
    // [64] return 
    rts
    // [65] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [66] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $16
    .label __2 = $18
    .label ln_offset = $25
    // ln_offset = CONIO_WIDTH - conio_cursor_x
    // [67] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // conio_cursor_text  + ln_offset
    // [68] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // conio_cursor_text =  conio_cursor_text  + ln_offset
    // [69] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // conio_cursor_color + ln_offset
    // [70] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // conio_cursor_color = conio_cursor_color + ln_offset
    // [71] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // conio_cursor_x = 0
    // [72] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [73] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [74] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [75] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $16
    .label __8 = $18
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [77] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [78] call memcpy 
    // [99] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [79] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [80] call memcpy 
    // [99] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [99] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [99] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [81] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [82] call memset 
    // [91] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [91] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [83] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [84] call memset 
    // [91] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [91] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [91] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_cursor_text-CONIO_WIDTH
    // [85] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // conio_cursor_text = conio_cursor_text-CONIO_WIDTH
    // [86] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // conio_cursor_color-CONIO_WIDTH
    // [87] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // conio_cursor_color = conio_cursor_color-CONIO_WIDTH
    // [88] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // conio_cursor_y--;
    // [89] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [90] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($a) str, byte register(X) c)
memset: {
    .label end = $25
    .label dst = $a
    .label str = $a
    // memset::@1
    // end = (char*)str + num
    // [92] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [93] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [94] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [94] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [95] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [96] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [97] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [98] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($12) destination, void* zp($a) source)
memcpy: {
    .label src_end = $25
    .label dst = $12
    .label src = $a
    .label source = $a
    .label destination = $12
    // src_end = (char*)source+num
    // [100] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [101] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [102] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [103] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [103] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [103] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [104] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [105] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [106] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [107] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [108] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
printf_string: {
    // [110] phi from printf_string to printf_string::@1 [phi:printf_string->printf_string::@1]
    // printf_string::@1
    // cputs(str)
    // [111] call cputs 
    // [45] phi from printf_string::@1 to cputs [phi:printf_string::@1->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) tod_buffer [phi:printf_string::@1->cputs#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z cputs.s
    lda #>tod_buffer
    sta.z cputs.s+1
    jsr cputs
    // printf_string::@return
    // }
    // [112] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .label uvalue = 2
    // printf_ulong::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [114] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // ultoa(uvalue, printf_buffer.digits, format.radix)
    // [115] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#2 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [116] call ultoa 
  // Format number into buffer
    // [185] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
    jsr ultoa
    // printf_ulong::@2
    // printf_number_buffer(printf_buffer, format)
    // [117] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [118] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    tax
    jsr printf_number_buffer
    // printf_ulong::@return
    // }
    // [119] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($d) buffer_sign, byte register(X) format_min_length, byte zp($23) format_justify_left, byte zp($c) format_zero_padding, byte zp($e) format_upper_case)
printf_number_buffer: {
    .label __19 = $a
    .label buffer_sign = $d
    .label padding = $24
    .label format_zero_padding = $c
    .label format_justify_left = $23
    .label format_upper_case = $e
    // if(format.min_length)
    // [121] if((byte) 0==(byte) printf_number_buffer::format_min_length#3) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b6
    // [122] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [123] call strlen 
    // [179] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [124] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_number_buffer::@14
    // [125] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // len = (signed char)strlen(buffer.digits)
    // [126] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // if(buffer.sign)
    // [127] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [128] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [129] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [129] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [130] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#3 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // if(padding<0)
    // [131] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [133] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [132] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [133] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [133] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [134] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [135] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [136] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [137] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [138] call printf_padding 
    // [157] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [139] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // cputc(buffer.sign)
    // [140] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [141] call cputc 
    // [53] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [142] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [143] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [144] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [145] call printf_padding 
    // [157] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [157] phi (byte) printf_padding::pad#7 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [146] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    // [147] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [148] call strupr 
    // [164] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // [149] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
    // printf_number_buffer::@5
  __b5:
    // cputs(buffer.digits)
    // [150] call cputs 
    // [45] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [151] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [152] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [153] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [154] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [155] call printf_padding 
    // [157] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [157] phi (byte) printf_padding::pad#7 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [157] phi (byte) printf_padding::length#6 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [156] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($1a) pad, byte zp($f) length)
printf_padding: {
    .label i = $1b
    .label length = $f
    .label pad = $1a
    // [158] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [158] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [159] if((byte) printf_padding::i#2<(byte) printf_padding::length#6) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [160] return 
    rts
    // printf_padding::@2
  __b2:
    // cputc(pad)
    // [161] (byte) cputc::c#1 ← (byte) printf_padding::pad#7 -- vbuaa=vbuz1 
    lda.z pad
    // [162] call cputc 
    // [53] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
    // [53] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [163] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [158] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [158] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $10
    // [165] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
    // [165] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    // strupr::@1
  __b1:
    // while(*src)
    // [166] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [167] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [168] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [169] call toupper 
    jsr toupper
    // [170] (byte) toupper::return#3 ← (byte) toupper::return#2
    // strupr::@3
    // [171] (byte~) strupr::$0 ← (byte) toupper::return#3
    // *src = toupper(*src)
    // [172] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // src++;
    // [173] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [165] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
    // [165] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [174] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [175] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [177] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [177] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [176] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [178] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($12) str)
strlen: {
    .label len = $a
    .label str = $12
    .label return = $a
    // [180] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [180] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [180] phi (byte*) strlen::str#3 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    // strlen::@1
  __b1:
    // while(*str)
    // [181] if((byte) 0!=*((byte*) strlen::str#3)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [182] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [183] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [184] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [180] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [180] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [180] phi (byte*) strlen::str#3 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(6) value, byte* zp($a) buffer)
ultoa: {
    .label digit_value = $1f
    .label buffer = $a
    .label digit = $23
    .label value = 6
    // [186] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [186] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [186] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [187] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #$a-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [188] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [189] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [190] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [191] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [192] return 
    rts
    // ultoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [193] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [194] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [195] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // ultoa::@7
    // [196] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [197] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [198] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [186] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [186] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [186] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [186] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [186] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [199] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [200] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [201] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [202] call ultoa_append 
    // [206] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [203] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [204] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [205] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [197] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [197] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [197] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [197] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($a) buffer, dword zp(6) value, dword zp($1f) sub)
ultoa_append: {
    .label buffer = $a
    .label value = 6
    .label sub = $1f
    .label return = 6
    // [207] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [207] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [208] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [209] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [210] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [211] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [212] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [207] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [207] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [207] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($1d) tod_TENTHS, byte zp($1e) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $1d
    .label tod_SEC = $1e
    // tod.HOURS>>4
    // [213] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.HOURS>>4)
    // [214] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [215] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // tod.HOURS&0x0f
    // [216] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // '0'+(tod.HOURS&0x0f)
    // [217] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [218] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // tod.MIN>>4
    // [219] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.MIN>>4)
    // [220] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [221] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [222] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // '0'+(tod.MIN&0x0f)
    // [223] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [224] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // tod.SEC>>4
    // [225] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.SEC>>4)
    // [226] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [227] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [228] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // '0'+(tod.SEC&0x0f)
    // [229] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [230] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [231] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.TENTHS>>4)
    // [232] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [233] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [234] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // '0'+(tod.TENTHS&0x0f)
    // [235] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [236] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [237] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $23
    .label return_MIN = $1c
    // hours = CIA1->TOD_HOURS
    // [238] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [239] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // secs = CIA1->TOD_SEC
    // [240] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // tenths = CIA1->TOD_10THS
    // [241] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_read::@return
    // }
    // [242] return 
    rts
}
  // queens
// Generates all valid placements of queens on a NxN board without recursion
// Works exactly like the recursive solution by generating all legal placements af a queen for a specific row taking into consideration the queens already placed on the rows below 
// and then moving on to generating all legal placements on the rows above.
// In practice this works like a depth first tree search where the level in the tree is the row on the board and each branch in the tree is the legal placement of a queen on that row. 
// The solution uses the board itself as a "cursor" moving through all possibilities
// When all columns on a row is exhausted move back down to the lower level and move forward one position until we are done with the last position on the first row
queens: {
    // The current row where the queen is moving
    .label row = $1c
    // [244] phi from queens to queens::@1 [phi:queens->queens::@1]
    // [244] phi (dword) count#10 = (dword) 0 [phi:queens->queens::@1#0] -- vduz1=vduc1 
    lda #<0
    sta.z count
    sta.z count+1
    lda #<0>>$10
    sta.z count+2
    lda #>0>>$10
    sta.z count+3
    // [244] phi (byte) queens::row#10 = (byte) 1 [phi:queens->queens::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [244] phi from queens::@4 queens::@7 queens::@8 queens::@9 to queens::@1 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1]
    // [244] phi (dword) count#10 = (dword) count#25 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#0] -- register_copy 
    // [244] phi (byte) queens::row#10 = (byte) queens::row#10 [phi:queens::@4/queens::@7/queens::@8/queens::@9->queens::@1#1] -- register_copy 
    // queens::@1
    // queens::@2
  __b2:
    // board[row]++;
    // [245] *((const byte*) board + (byte) queens::row#10) ← ++ *((const byte*) board + (byte) queens::row#10) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z row
    inc board,x
    // if(board[row]==QUEENS+1)
    // [246] if(*((const byte*) board + (byte) queens::row#10)==(byte)(number) 8+(number) 1) goto queens::@3 -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z row
    lda board,y
    cmp #8+1
    beq __b3
    // queens::@5
    // legal(row, board[row])
    // [247] (byte) legal::row#0 ← (byte) queens::row#10
    // [248] (byte) legal::column#0 ← *((const byte*) board + (byte) queens::row#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda board,y
    sta.z legal.column
    // [249] call legal 
    // [329] phi from queens::@5 to legal [phi:queens::@5->legal]
    jsr legal
    // legal(row, board[row])
    // [250] (byte) legal::return#0 ← (byte) legal::return#4
    // queens::@9
    // [251] (byte~) queens::$2 ← (byte) legal::return#0
    // if(legal(row, board[row]))
    // [252] if((byte) 0==(byte~) queens::$2) goto queens::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // queens::@6
    // if(row==QUEENS)
    // [253] if((byte) queens::row#10==(byte) 8) goto queens::@4 -- vbuz1_eq_vbuc1_then_la1 
    // position is legal - move up to the next row
    lda #8
    cmp.z row
    beq __b4
    // queens::@7
    // row++;
    // [254] (byte) queens::row#1 ← ++ (byte) queens::row#10 -- vbuz1=_inc_vbuz1 
    inc.z row
    jmp __b2
    // queens::@4
  __b4:
    // ++count;
    // [255] (dword) count#25 ← ++ (dword) count#10 -- vduz1=_inc_vduz1 
    inc.z count
    bne !+
    inc.z count+1
    bne !+
    inc.z count+2
    bne !+
    inc.z count+3
  !:
    // print()
    // [256] call print 
    // [261] phi from queens::@4 to print [phi:queens::@4->print]
    jsr print
    jmp __b2
    // queens::@3
  __b3:
    // board[row] = 0
    // [257] *((const byte*) board + (byte) queens::row#10) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    // We moved past the end of the row - reset position and go down to the lower row
    lda #0
    ldy.z row
    sta board,y
    // if(row==1)
    // [258] if((byte) queens::row#10==(byte) 1) goto queens::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z row
    beq __breturn
    // queens::@8
    // row--;
    // [259] (byte) queens::row#2 ← -- (byte) queens::row#10 -- vbuz1=_dec_vbuz1 
    dec.z row
    jmp __b2
    // queens::@return
  __breturn:
    // }
    // [260] return 
    rts
}
  // print
// Print the board with a legal placement.
print: {
    .label i = $1d
    .label i1 = $1e
    .label j = $c
    // gotoxy(0,5)
    // [262] call gotoxy 
    // [323] phi from print to gotoxy [phi:print->gotoxy]
    jsr gotoxy
    // [263] phi from print to print::@11 [phi:print->print::@11]
    // print::@11
    // printf("\n#%lu:\n ",count)
    // [264] call cputs 
    // [45] phi from print::@11 to cputs [phi:print::@11->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s [phi:print::@11->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // print::@12
    // printf("\n#%lu:\n ",count)
    // [265] (dword) printf_ulong::uvalue#1 ← (dword) count#25
    // [266] call printf_ulong 
    // [113] phi from print::@12 to printf_ulong [phi:print::@12->printf_ulong]
    // [113] phi (dword) printf_ulong::uvalue#2 = (dword) printf_ulong::uvalue#1 [phi:print::@12->printf_ulong#0] -- register_copy 
    jsr printf_ulong
    // [267] phi from print::@12 to print::@13 [phi:print::@12->print::@13]
    // print::@13
    // printf("\n#%lu:\n ",count)
    // [268] call cputs 
    // [45] phi from print::@13 to cputs [phi:print::@13->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s1 [phi:print::@13->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // [269] phi from print::@13 to print::@1 [phi:print::@13->print::@1]
    // [269] phi (byte) print::i#2 = (byte) 1 [phi:print::@13->print::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    // print::@1
  __b1:
    // for(char i=1;i<=QUEENS;++i)
    // [270] if((byte) print::i#2<(byte) 8+(byte) 1) goto print::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8+1
    bcc __b2
    // [271] phi from print::@1 to print::@3 [phi:print::@1->print::@3]
    // [271] phi (byte) print::i1#2 = (byte) 1 [phi:print::@1->print::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z i1
    // print::@3
  __b3:
    // for(char i=1;i<=QUEENS;++i)
    // [272] if((byte) print::i1#2<(byte) 8+(byte) 1) goto print::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #8+1
    bcc __b4
    // print::@return
    // }
    // [273] return 
    rts
    // [274] phi from print::@3 to print::@4 [phi:print::@3->print::@4]
    // print::@4
  __b4:
    // printf("\n%x",i)
    // [275] call cputs 
    // [45] phi from print::@4 to cputs [phi:print::@4->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s2 [phi:print::@4->cputs#0] -- pbuz1=pbuc1 
    lda #<s2
    sta.z cputs.s
    lda #>s2
    sta.z cputs.s+1
    jsr cputs
    // print::@15
    // printf("\n%x",i)
    // [276] (byte) printf_uchar::uvalue#1 ← (byte) print::i1#2 -- vbuxx=vbuz1 
    ldx.z i1
    // [277] call printf_uchar 
    // [290] phi from print::@15 to printf_uchar [phi:print::@15->printf_uchar]
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:print::@15->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [278] phi from print::@15 to print::@5 [phi:print::@15->print::@5]
    // [278] phi (byte) print::j#2 = (byte) 1 [phi:print::@15->print::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta.z j
    // print::@5
  __b5:
    // for(char j=1;j<=QUEENS;++j)
    // [279] if((byte) print::j#2<(byte) 8+(byte) 1) goto print::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #8+1
    bcc __b6
    // print::@7
    // for(char i=1;i<=QUEENS;++i)
    // [280] (byte) print::i1#1 ← ++ (byte) print::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [271] phi from print::@7 to print::@3 [phi:print::@7->print::@3]
    // [271] phi (byte) print::i1#2 = (byte) print::i1#1 [phi:print::@7->print::@3#0] -- register_copy 
    jmp __b3
    // print::@6
  __b6:
    // if(board[i]==j)
    // [281] if(*((const byte*) board + (byte) print::i1#2)==(byte) print::j#2) goto print::@8 -- pbuc1_derefidx_vbuz1_eq_vbuz2_then_la1 
    ldy.z i1
    lda board,y
    cmp.z j
    beq __b8
    // [282] phi from print::@6 to print::@10 [phi:print::@6->print::@10]
    // print::@10
    // printf("-")
    // [283] call cputs 
    // [45] phi from print::@10 to cputs [phi:print::@10->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s4 [phi:print::@10->cputs#0] -- pbuz1=pbuc1 
    lda #<s4
    sta.z cputs.s
    lda #>s4
    sta.z cputs.s+1
    jsr cputs
    // print::@9
  __b9:
    // for(char j=1;j<=QUEENS;++j)
    // [284] (byte) print::j#1 ← ++ (byte) print::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [278] phi from print::@9 to print::@5 [phi:print::@9->print::@5]
    // [278] phi (byte) print::j#2 = (byte) print::j#1 [phi:print::@9->print::@5#0] -- register_copy 
    jmp __b5
    // [285] phi from print::@6 to print::@8 [phi:print::@6->print::@8]
    // print::@8
  __b8:
    // printf("Q")
    // [286] call cputs 
    // [45] phi from print::@8 to cputs [phi:print::@8->cputs]
    // [45] phi (to_nomodify byte*) cputs::s#14 = (const byte*) print::s3 [phi:print::@8->cputs#0] -- pbuz1=pbuc1 
    lda #<s3
    sta.z cputs.s
    lda #>s3
    sta.z cputs.s+1
    jsr cputs
    jmp __b9
    // print::@2
  __b2:
    // printf("%x",i)
    // [287] (byte) printf_uchar::uvalue#0 ← (byte) print::i#2 -- vbuxx=vbuz1 
    ldx.z i
    // [288] call printf_uchar 
    // [290] phi from print::@2 to printf_uchar [phi:print::@2->printf_uchar]
    // [290] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:print::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // print::@14
    // for(char i=1;i<=QUEENS;++i)
    // [289] (byte) print::i#1 ← ++ (byte) print::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [269] phi from print::@14 to print::@1 [phi:print::@14->print::@1]
    // [269] phi (byte) print::i#2 = (byte) print::i#1 [phi:print::@14->print::@1#0] -- register_copy 
    jmp __b1
    s: .text @"\n#"
    .byte 0
    s1: .text @":\n "
    .byte 0
    s2: .text @"\n"
    .byte 0
    s3: .text "Q"
    .byte 0
    s4: .text "-"
    .byte 0
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [291] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [292] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
    // [293] call uctoa 
  // Format number into buffer
    // [297] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [294] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [295] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#2 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (byte) 0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    tax
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [296] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($10) buffer)
uctoa: {
    .label digit_value = $24
    .label buffer = $10
    .label digit = $d
    .label started = $e
    // [298] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [298] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [298] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [299] if((byte) uctoa::digit#2<(byte) 2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #2-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [300] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [301] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [302] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [303] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [304] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [305] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // uctoa::@7
    // [306] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [307] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [308] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [298] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [298] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [298] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [298] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [298] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [309] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [310] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [311] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [312] call uctoa_append 
    // [316] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [313] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [314] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [315] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [307] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [307] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [307] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [307] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($10) buffer, byte register(X) value, byte zp($24) sub)
uctoa_append: {
    .label buffer = $10
    .label sub = $24
    // [317] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [317] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [318] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [319] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [320] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [321] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // value -= sub
    // [322] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [317] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [317] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [317] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 5
    .const offset = y*$28
    // gotoxy::@1
    // conio_cursor_x = x
    // [324] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [325] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT + offset
    // [326] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS + offset
    // [327] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    // gotoxy::@return
    // }
    // [328] return 
    rts
}
  // legal
// Checks is a placement of the queen on the board is legal.
// Checks the passed (row, column) against all queens placed on the board on lower rows.
// If no conflict for desired position returns 1 otherwise returns 0
// legal(byte zp($1c) row, byte zp($23) column)
legal: {
    .label row = $1c
    .label column = $23
    .label diff1_return = $24
    // [330] phi from legal to legal::@1 [phi:legal->legal::@1]
    // [330] phi (byte) legal::i#10 = (byte) 1 [phi:legal->legal::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // legal::@1
  __b1:
    // row-1
    // [331] (byte~) legal::$0 ← (byte) legal::row#0 - (byte) 1 -- vbuxx=vbuz1_minus_1 
    ldx.z row
    dex
    // for(char i=1;i<=row-1;++i)
    // [332] if((byte) legal::i#10<=(byte~) legal::$0) goto legal::@2 -- vbuyy_le_vbuxx_then_la1 
    sty.z $ff
    cpx.z $ff
    bcs __b2
    // [333] phi from legal::@1 to legal::@return [phi:legal::@1->legal::@return]
    // [333] phi (byte) legal::return#4 = (byte) 1 [phi:legal::@1->legal::@return#0] -- vbuaa=vbuc1 
    lda #1
    rts
    // [333] phi from legal::@2 legal::@5 to legal::@return [phi:legal::@2/legal::@5->legal::@return]
  __b4:
    // [333] phi (byte) legal::return#4 = (byte) 0 [phi:legal::@2/legal::@5->legal::@return#0] -- vbuaa=vbuc1 
    lda #0
    // legal::@return
    // }
    // [334] return 
    rts
    // legal::@2
  __b2:
    // if(board[i]==column)
    // [335] if(*((const byte*) board + (byte) legal::i#10)==(byte) legal::column#0) goto legal::@return -- pbuc1_derefidx_vbuyy_eq_vbuz1_then_la1 
    lda board,y
    cmp.z column
    beq __b4
    // legal::@4
    // diff(board[i],column)
    // [336] (byte) legal::diff1_a#0 ← *((const byte*) board + (byte) legal::i#10) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda board,y
    // legal::diff1
    // if(a<b)
    // [337] if((byte) legal::diff1_a#0<(byte) legal::column#0) goto legal::diff1_@1 -- vbuaa_lt_vbuz1_then_la1 
    cmp.z column
    bcc diff1___b1
    // legal::diff1_@3
    // return a-b;
    // [338] (byte) legal::diff1_return#1 ← (byte) legal::diff1_a#0 - (byte) legal::column#0 -- vbuz1=vbuaa_minus_vbuz2 
    sec
    sbc.z column
    sta.z diff1_return
    // [339] phi from legal::diff1_@1 legal::diff1_@3 to legal::diff1_@return [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return]
    // [339] phi (byte) legal::diff1_return#2 = (byte) legal::diff1_return#0 [phi:legal::diff1_@1/legal::diff1_@3->legal::diff1_@return#0] -- register_copy 
    // legal::diff1_@return
    // legal::diff2
  diff2:
    // if(a<b)
    // [340] if((byte) legal::i#10<(byte) legal::row#0) goto legal::diff2_@1 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z row
    bcc diff2___b1
    // legal::diff2_@3
    // return a-b;
    // [341] (byte) legal::diff2_return#1 ← (byte) legal::i#10 - (byte) legal::row#0 -- vbuaa=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z row
    // [342] phi from legal::diff2_@1 legal::diff2_@3 to legal::diff2_@return [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return]
    // [342] phi (byte) legal::diff2_return#2 = (byte) legal::diff2_return#0 [phi:legal::diff2_@1/legal::diff2_@3->legal::diff2_@return#0] -- register_copy 
    // legal::diff2_@return
    // legal::@5
  __b5:
    // if(diff(board[i],column)==diff(i,row))
    // [343] if((byte) legal::diff1_return#2!=(byte) legal::diff2_return#2) goto legal::@3 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z diff1_return
    bne __b3
    jmp __b4
    // legal::@3
  __b3:
    // for(char i=1;i<=row-1;++i)
    // [344] (byte) legal::i#1 ← ++ (byte) legal::i#10 -- vbuyy=_inc_vbuyy 
    iny
    // [330] phi from legal::@3 to legal::@1 [phi:legal::@3->legal::@1]
    // [330] phi (byte) legal::i#10 = (byte) legal::i#1 [phi:legal::@3->legal::@1#0] -- register_copy 
    jmp __b1
    // legal::diff2_@1
  diff2___b1:
    // return b-a;
    // [345] (byte) legal::diff2_return#0 ← (byte) legal::row#0 - (byte) legal::i#10 -- vbuaa=vbuz1_minus_vbuyy 
    tya
    eor #$ff
    sec
    adc.z row
    jmp __b5
    // legal::diff1_@1
  diff1___b1:
    // [346] (byte) legal::diff1_return#0 ← (byte) legal::column#0 - (byte) legal::diff1_a#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z column
    sta.z diff1_return
    jmp diff2
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($1a) tod_TENTHS, byte zp($1b) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $1a
    .label tod_SEC = $1b
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [347] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [348] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [349] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [350] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [351] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [352] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [353] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
printf_uint: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [355] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [356] call utoa 
  // Format number into buffer
    // [360] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [357] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [358] call printf_number_buffer 
  // Print using format
    // [120] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    // [120] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [120] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [120] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [120] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [120] phi (byte) printf_number_buffer::format_min_length#3 = (const byte) printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [359] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($10) value, byte* zp($12) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $25
    .label buffer = $12
    .label digit = $f
    .label value = $10
    // [361] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [361] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [361] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [361] phi (word) utoa::value#2 = (const word) printf_uint::uvalue#0 [phi:utoa->utoa::@1#2] -- vwuz1=vwuc1 
    lda #<printf_uint.uvalue
    sta.z value
    lda #>printf_uint.uvalue
    sta.z value+1
    // [361] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [362] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [363] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [364] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [365] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [366] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [367] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [368] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [369] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [370] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [371] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [372] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [372] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [373] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [361] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [361] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [361] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [361] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [361] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [374] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [375] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [376] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [377] call utoa_append 
    // [381] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [378] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [379] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [380] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [372] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [372] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [372] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [372] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($12) buffer, word zp($10) value, word zp($25) sub)
utoa_append: {
    .label buffer = $12
    .label value = $10
    .label sub = $25
    .label return = $10
    // [382] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [382] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [383] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [384] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [385] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [386] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [387] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [382] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [382] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [382] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $12
    .label line_cols = $16
    // [389] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [389] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [389] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [389] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [390] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [391] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [392] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT
    // [393] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS
    // [394] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // clrscr::@return
    // }
    // [395] return 
    rts
    // [396] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [396] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [397] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [398] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [399] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [400] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [389] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [389] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [389] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [389] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [401] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [402] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [403] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [396] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [396] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // The board. board[i] holds the column position of the queen on row i. 
  board: .fill $14, 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

