Fixing pointer array-indexing *((struct Point[4]) points + (byte) main::i)
Fixing pointer array-indexing *((struct Point[4]) points + (byte) main::i1)
Fixing pointer array-indexing *((struct Point*) main::SCREEN + (byte) main::i1)
Adding struct value list initializer *((signed byte*) main::$8 + (byte~) main::$6) ← (signed byte~) main::$0
Adding struct value list initializer *((signed byte*) main::$9 + (byte~) main::$6) ← (signed byte~) main::$2
Adding struct value list initializer *((signed byte*) main::$10 + (byte~) main::$6) ← (signed byte~) main::$3
Adding struct value member variable copy *((signed byte*) main::$11 + (byte~) main::$7) ← *((signed byte*) main::$12 + (byte~) main::$7)
Adding struct value member variable copy *((signed byte*) main::$13 + (byte~) main::$7) ← *((signed byte*) main::$14 + (byte~) main::$7)
Adding struct value member variable copy *((signed byte*) main::$15 + (byte~) main::$7) ← *((signed byte*) main::$16 + (byte~) main::$7)
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Point[4]) points#0 ← { fill( 4, 0) }
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (signed byte~) main::$0 ← ((signed byte)) (byte) main::i#2
  (signed byte~) main::$1 ← ((signed byte)) (byte) main::i#2
  (signed byte~) main::$2 ← - (signed byte~) main::$1
  (signed byte~) main::$3 ← ((signed byte)) (byte) main::i#2
  (byte~) main::$6 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
  (signed byte*) main::$8 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
  *((signed byte*) main::$8 + (byte~) main::$6) ← (signed byte~) main::$0
  (signed byte*) main::$9 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
  *((signed byte*) main::$9 + (byte~) main::$6) ← (signed byte~) main::$2
  (signed byte*) main::$10 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
  *((signed byte*) main::$10 + (byte~) main::$6) ← (signed byte~) main::$3
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,3)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,3)
  if((bool~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (struct Point*) main::SCREEN#0 ← ((struct Point*)) (number) $400
  (byte) main::i1#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
  (signed byte*) main::$11 ← (signed byte*)(struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_X
  (signed byte*) main::$12 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
  *((signed byte*) main::$11 + (byte~) main::$7) ← *((signed byte*) main::$12 + (byte~) main::$7)
  (signed byte*) main::$13 ← (signed byte*)(struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Y
  (signed byte*) main::$14 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
  *((signed byte*) main::$13 + (byte~) main::$7) ← *((signed byte*) main::$14 + (byte~) main::$7)
  (signed byte*) main::$15 ← (signed byte*)(struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Z
  (signed byte*) main::$16 ← (signed byte*)(struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
  *((signed byte*) main::$15 + (byte~) main::$7) ← *((signed byte*) main::$16 + (byte~) main::$7)
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,3)
  (bool~) main::$5 ← (byte) main::i1#1 != rangelast(0,3)
  if((bool~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_POINT_Z = (byte) 2
(signed byte) Point::x
(signed byte) Point::y
(signed byte) Point::z
(const byte) SIZEOF_STRUCT_POINT = (byte) 3
(void()) main()
(signed byte~) main::$0
(signed byte~) main::$1
(signed byte*) main::$10
(signed byte*) main::$11
(signed byte*) main::$12
(signed byte*) main::$13
(signed byte*) main::$14
(signed byte*) main::$15
(signed byte*) main::$16
(signed byte~) main::$2
(signed byte~) main::$3
(bool~) main::$4
(bool~) main::$5
(byte~) main::$6
(byte~) main::$7
(signed byte*) main::$8
(signed byte*) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(struct Point*) main::SCREEN
(struct Point*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(struct Point[4]) points
(struct Point[4]) points#0

Inlining cast (signed byte~) main::$0 ← (signed byte)(byte) main::i#2
Inlining cast (signed byte~) main::$1 ← (signed byte)(byte) main::i#2
Inlining cast (signed byte~) main::$3 ← (signed byte)(byte) main::i#2
Inlining cast (struct Point*) main::SCREEN#0 ← (struct Point*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct Point*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$4 [16] if((byte) main::i#1!=rangelast(0,3)) goto main::@1
Simple Condition (bool~) main::$5 [32] if((byte) main::i1#1!=rangelast(0,3)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (struct Point[4]) points#0 ← { fill( 4, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point[4]) points#0 = { fill( 4, 0) }
Constant (const byte) main::i#0 = 0
Constant (const struct Point*) main::SCREEN#0 = (struct Point*) 1024
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (signed byte*)points#0 in [8] (signed byte*) main::$8 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (signed byte*)points#0 in [10] (signed byte*) main::$9 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (signed byte*)points#0 in [12] (signed byte*) main::$10 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
Constant value identified (signed byte*)main::SCREEN#0 in [21] (signed byte*) main::$11 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (signed byte*)points#0 in [22] (signed byte*) main::$12 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (signed byte*)main::SCREEN#0 in [24] (signed byte*) main::$13 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (signed byte*)points#0 in [25] (signed byte*) main::$14 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant value identified (signed byte*)main::SCREEN#0 in [27] (signed byte*) main::$15 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Z
Constant value identified (signed byte*)points#0 in [28] (signed byte*) main::$16 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [14] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [16] if(main::i#1!=rangelast(0,3)) goto main::@1 to (number) 4
Resolved ranged next value [30] main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value [32] if(main::i1#1!=rangelast(0,3)) goto main::@3 to (number) 4
Simplifying expression containing zero (signed byte*)points#0 in [8] (signed byte*) main::$8 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (signed byte*)main::SCREEN#0 in [21] (signed byte*) main::$11 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (signed byte*)points#0 in [22] (signed byte*) main::$12 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 4 in if((byte) main::i#1!=(number) 4) goto main::@1
Adding number conversion cast (unumber) 4 in if((byte) main::i1#1!=(number) 4) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [8] (signed byte*) main::$9 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant right-side identified [10] (signed byte*) main::$10 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
Constant right-side identified [19] (signed byte*) main::$13 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant right-side identified [20] (signed byte*) main::$14 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Constant right-side identified [22] (signed byte*) main::$15 ← (signed byte*)(const struct Point*) main::SCREEN#0 + (const byte) OFFSET_STRUCT_POINT_Z
Constant right-side identified [23] (signed byte*) main::$16 ← (signed byte*)(const struct Point[4]) points#0 + (const byte) OFFSET_STRUCT_POINT_Z
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const signed byte*) main::$8 = (signed byte*)points#0
Constant (const signed byte*) main::$9 = (signed byte*)points#0+OFFSET_STRUCT_POINT_Y
Constant (const signed byte*) main::$10 = (signed byte*)points#0+OFFSET_STRUCT_POINT_Z
Constant (const signed byte*) main::$11 = (signed byte*)main::SCREEN#0
Constant (const signed byte*) main::$12 = (signed byte*)points#0
Constant (const signed byte*) main::$13 = (signed byte*)main::SCREEN#0+OFFSET_STRUCT_POINT_Y
Constant (const signed byte*) main::$14 = (signed byte*)points#0+OFFSET_STRUCT_POINT_Y
Constant (const signed byte*) main::$15 = (signed byte*)main::SCREEN#0+OFFSET_STRUCT_POINT_Z
Constant (const signed byte*) main::$16 = (signed byte*)points#0+OFFSET_STRUCT_POINT_Z
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [1] (signed byte~) main::$0 ← (signed byte)(byte) main::i#2 keeping main::i#2
Inlining Noop Cast [2] (signed byte~) main::$1 ← (signed byte)(byte) main::i#2 keeping main::i#2
Inlining Noop Cast [4] (signed byte~) main::$3 ← (signed byte)(byte) main::i#2 keeping main::i#2
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift and addition[5] (byte~) main::$6 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift and addition[12] (byte~) main::$7 ← (byte) main::i1#2 * (const byte) SIZEOF_STRUCT_POINT
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::$16 = (signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z
Constant inlined main::$12 = (signed byte*)(const struct Point[4]) points#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Constant inlined main::$13 = (signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$14 = (signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$15 = (signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z
Constant inlined main::$9 = (signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y
Constant inlined main::$10 = (signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z
Constant inlined main::$8 = (signed byte*)(const struct Point[4]) points#0
Constant inlined main::$11 = (signed byte*)(const struct Point*) main::SCREEN#0
Successful SSA optimization Pass2ConstantInlining
Alias (byte~) main::$6 = (byte) main::$18 
Alias (byte~) main::$7 = (byte) main::$20 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [25] main::i1#3 ← main::i1#1
Coalesced [26] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2
  [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1
  [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2
  [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2
  [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2
  [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [14] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1
  [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2
  [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7)
  [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)
  [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7)
  [20] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [21] if((byte) main::i1#1!=(byte) 4) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed byte) Point::x
(signed byte) Point::y
(signed byte) Point::z
(void()) main()
(byte) main::$17 22.0
(byte) main::$19 22.0
(signed byte~) main::$2 5.5
(byte~) main::$6 14.666666666666666
(byte~) main::$7 25.666666666666668
(struct Point*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 6.285714285714286
(byte) main::i1
(byte) main::i1#1 16.5
(byte) main::i1#2 7.333333333333333
(struct Point[4]) points

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$17 to zero page equivalence class [ main::$17 ]
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Added variable main::$19 to zero page equivalence class [ main::$19 ]
Added variable main::$7 to zero page equivalence class [ main::$7 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::$2 ]
[ main::$17 ]
[ main::$6 ]
[ main::$19 ]
[ main::$7 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
Allocated zp ZP_BYTE:4 [ main::$2 ]
Allocated zp ZP_BYTE:5 [ main::$17 ]
Allocated zp ZP_BYTE:6 [ main::$6 ]
Allocated zp ZP_BYTE:7 [ main::$19 ]
Allocated zp ZP_BYTE:8 [ main::$7 ]

INITIAL ASM
Target platform is c64basic / 6502X
  // File Comments
// Minimal struct -  array of 3-byte structs (required *3)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_POINT_Z = 2
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _2 = 4
    .label _6 = 6
    .label _7 = 8
    .label i = 2
    .label i1 = 3
    .label _17 = 5
    .label _19 = 7
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2 -- vbsz1=_neg_vbsz2 
    lda.z i
    eor #$ff
    clc
    adc #1
    sta.z _2
    // [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _17
    // [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _17
    clc
    adc.z i
    sta.z _6
    // [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuz1=vbsz2 
    lda.z i
    ldy.z _6
    sta points,y
    // [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2 -- pbsc1_derefidx_vbuz1=vbsz2 
    lda.z _2
    ldy.z _6
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuz1=vbsz2 
    lda.z i
    ldy.z _6
    sta points+OFFSET_STRUCT_POINT_Z,y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne b1_from_b1
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [14] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp b2
    // [14] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [14] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i1
    asl
    sta.z _19
    // [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z _19
    clc
    adc.z i1
    sta.z _7
    // [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7) -- pbsc1_derefidx_vbuz1=pbsc2_derefidx_vbuz1 
    ldy.z _7
    lda points,y
    sta SCREEN,y
    // [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbsc1_derefidx_vbuz1=pbsc2_derefidx_vbuz1 
    ldy.z _7
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) -- pbsc1_derefidx_vbuz1=pbsc2_derefidx_vbuz1 
    ldy.z _7
    lda points+OFFSET_STRUCT_POINT_Z,y
    sta SCREEN+OFFSET_STRUCT_POINT_Z,y
    // [20] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [21] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i1
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [22] return 
    rts
}
  // File Data
  points: .fill 3*4, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 main::$17 ] ( main:2 [ main::i#2 main::$2 main::$17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::$2 ]
Statement [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2 [ main::i#2 main::$2 main::$6 ] ( main:2 [ main::i#2 main::$2 main::$6 ] ) always clobbers reg byte a 
Statement [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2 [ main::i#2 main::$2 main::$6 ] ( main:2 [ main::i#2 main::$2 main::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::$6 ]
Statement [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2 [ main::i#2 main::$6 ] ( main:2 [ main::i#2 main::$6 ] ) always clobbers reg byte a 
Statement [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$19 ] ( main:2 [ main::i1#2 main::$19 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ]
Statement [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2 [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Statement [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7) [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ main::$7 ]
Statement [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Statement [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) [ main::i1#2 ] ( main:2 [ main::i1#2 ] ) always clobbers reg byte a 
Statement [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Statement [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 main::$17 ] ( main:2 [ main::i#2 main::$2 main::$17 ] ) always clobbers reg byte a 
Statement [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2 [ main::i#2 main::$2 main::$6 ] ( main:2 [ main::i#2 main::$2 main::$6 ] ) always clobbers reg byte a 
Statement [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2 [ main::i#2 main::$2 main::$6 ] ( main:2 [ main::i#2 main::$2 main::$6 ] ) always clobbers reg byte a 
Statement [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2 [ main::i#2 main::$6 ] ( main:2 [ main::i#2 main::$6 ] ) always clobbers reg byte a 
Statement [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$19 ] ( main:2 [ main::i1#2 main::$19 ] ) always clobbers reg byte a 
Statement [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2 [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Statement [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7) [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Statement [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) [ main::i1#2 main::$7 ] ( main:2 [ main::i1#2 main::$7 ] ) always clobbers reg byte a 
Statement [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) [ main::i1#2 ] ( main:2 [ main::i1#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$2 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$17 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::$6 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$19 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$7 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.67: zp ZP_BYTE:8 [ main::$7 ] 23.83: zp ZP_BYTE:3 [ main::i1#2 main::i1#1 ] 22.79: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:5 [ main::$17 ] 22: zp ZP_BYTE:7 [ main::$19 ] 14.67: zp ZP_BYTE:6 [ main::$6 ] 5.5: zp ZP_BYTE:4 [ main::$2 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1353 combination reg byte y [ main::$7 ] reg byte x [ main::i1#2 main::i1#1 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$17 ] zp ZP_BYTE:7 [ main::$19 ] zp ZP_BYTE:6 [ main::$6 ] zp ZP_BYTE:4 [ main::$2 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [Point] best 1353 combination 
Uplifting [] best 1353 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::$19 ]
Uplifting [main] best 1333 combination reg byte a [ main::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::$6 ]
Uplifting [main] best 1233 combination reg byte y [ main::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ main::$2 ]
Uplifting [main] best 1233 combination zp ZP_BYTE:4 [ main::$2 ] 
Allocated (was zp ZP_BYTE:4) zp ZP_BYTE:2 [ main::$2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  array of 3-byte structs (required *3)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_POINT_Z = 2
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _2 = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2 -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta.z _2
    // [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points,y
    // [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2 -- pbsc1_derefidx_vbuyy=vbsz1 
    lda.z _2
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points+OFFSET_STRUCT_POINT_Z,y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1_from_b1
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [14] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // [14] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [14] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,y
    // [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Z,y
    sta SCREEN+OFFSET_STRUCT_POINT_Z,y
    // [20] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [22] return 
    rts
}
  // File Data
  points: .fill 3*4, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_POINT_Z OFFSET_STRUCT_POINT_Z = (byte) 2
(signed byte) Point::x
(signed byte) Point::y
(signed byte) Point::z
(void()) main()
(byte) main::$17 reg byte a 22.0
(byte) main::$19 reg byte a 22.0
(signed byte~) main::$2 $2 zp ZP_BYTE:2 5.5
(byte~) main::$6 reg byte y 14.666666666666666
(byte~) main::$7 reg byte y 25.666666666666668
(label) main::@1
(label) main::@2
(label) main::@return
(struct Point*) main::SCREEN
(const struct Point*) main::SCREEN#0 SCREEN = (struct Point*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 6.285714285714286
(byte) main::i1
(byte) main::i1#1 reg byte x 16.5
(byte) main::i1#2 reg byte x 7.333333333333333
(struct Point[4]) points
(const struct Point[4]) points#0 points = { fill( 4, 0) }

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::i1#2 main::i1#1 ]
zp ZP_BYTE:2 [ main::$2 ]
reg byte a [ main::$17 ]
reg byte y [ main::$6 ]
reg byte a [ main::$19 ]
reg byte y [ main::$7 ]


FINAL ASSEMBLER
Score: 1071

  // File Comments
// Minimal struct -  array of 3-byte structs (required *3)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_POINT_Z = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label _2 = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // -(signed byte)i
    // [6] (signed byte~) main::$2 ← - (signed byte)(byte) main::i#2 -- vbsz1=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    sta.z _2
    // points[i] = { (signed byte)i, -(signed byte)i, (signed byte)i }
    // [7] (byte) main::$17 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [8] (byte~) main::$6 ← (byte) main::$17 + (byte) main::i#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [9] *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points,y
    // [10] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$6) ← (signed byte~) main::$2 -- pbsc1_derefidx_vbuyy=vbsz1 
    lda.z _2
    sta points+OFFSET_STRUCT_POINT_Y,y
    // [11] *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$6) ← (signed byte)(byte) main::i#2 -- pbsc1_derefidx_vbuyy=vbsxx 
    txa
    sta points+OFFSET_STRUCT_POINT_Z,y
    // for( byte i: 0..3)
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [14] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [14] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [14] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // SCREEN[i] = points[i]
    // [15] (byte) main::$19 ← (byte) main::i1#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [16] (byte~) main::$7 ← (byte) main::$19 + (byte) main::i1#2 -- vbuyy=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    tay
    // [17] *((signed byte*)(const struct Point*) main::SCREEN#0 + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0 + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points,y
    sta SCREEN,y
    // [18] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,y
    // [19] *((signed byte*)(const struct Point*) main::SCREEN#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) ← *((signed byte*)(const struct Point[4]) points#0+(const byte) OFFSET_STRUCT_POINT_Z + (byte~) main::$7) -- pbsc1_derefidx_vbuyy=pbsc2_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Z,y
    sta SCREEN+OFFSET_STRUCT_POINT_Z,y
    // for( byte i: 0..3)
    // [20] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2
    // main::@return
    // }
    // [22] return 
    rts
}
  // File Data
  points: .fill 3*4, 0

