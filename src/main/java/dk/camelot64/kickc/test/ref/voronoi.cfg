@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] call addpoint param-assignment [ ]
  to:main::@3
main::@3: from main
  [2] call addpoint param-assignment [ ]
  to:main::@4
main::@4: from main::@3
  [3] call addpoint param-assignment [ ]
  to:main::@5
main::@5: from main::@4
  [4] call addpoint param-assignment [ ]
  to:main::@6
main::@6: from main::@5
  [5] call addpoint param-assignment [ ]
  to:main::@7
main::@7: from main::@6
  [6] call addpoint param-assignment [ ]
  to:main::@8
main::@8: from main::@7
  [7] call initscreen param-assignment [ ]
  to:main::@1
main::@1: from main::@11 main::@8
  [8] call render param-assignment [ ]
  to:main::@10
main::@10: from main::@1
  [9] call animate param-assignment [ ]
  to:main::@11
main::@11: from main::@10
  [10] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: from main::@11
  [11] return  [ ]
  to:@RETURN
animate: from main::@10
  [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ]
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [14] *((word) 4096) ← (byte~) animate::$1 [ ]
  [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ]
  [16] if((byte~) animate::$2==(byte) 40) goto animate::@1 [ ]
  to:animate::@2
animate::@2: from animate animate::@1
  [17] (byte~) animate::$4 ← * (word) 4352 [ animate::$4 ]
  [18] (byte~) animate::$5 ← (byte~) animate::$4 + (byte) 1 [ animate::$5 ]
  [19] *((word) 4352) ← (byte~) animate::$5 [ ]
  [20] (byte~) animate::$6 ← * (word) 4352 [ animate::$6 ]
  [21] if((byte~) animate::$6==(byte) 25) goto animate::@3 [ ]
  to:animate::@4
animate::@4: from animate::@2 animate::@3
  [22] (byte~) animate::$8 ← * (word) 4097 [ animate::$8 ]
  [23] (byte~) animate::$9 ← (byte~) animate::$8 - (byte) 1 [ animate::$9 ]
  [24] *((word) 4097) ← (byte~) animate::$9 [ ]
  [25] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ]
  [26] if((byte~) animate::$10==(byte) 255) goto animate::@5 [ ]
  to:animate::@6
animate::@6: from animate::@4 animate::@5
  [27] (byte~) animate::$12 ← * (word) 4354 [ animate::$12 ]
  [28] (byte~) animate::$13 ← (byte~) animate::$12 + (byte) 1 [ animate::$13 ]
  [29] *((word) 4354) ← (byte~) animate::$13 [ ]
  [30] (byte~) animate::$14 ← * (word) 4354 [ animate::$14 ]
  [31] if((byte~) animate::$14==(byte) 25) goto animate::@7 [ ]
  to:animate::@8
animate::@8: from animate::@6 animate::@7
  [32] (byte~) animate::$16 ← * (word) 4355 [ animate::$16 ]
  [33] (byte~) animate::$17 ← (byte~) animate::$16 - (byte) 1 [ animate::$17 ]
  [34] *((word) 4355) ← (byte~) animate::$17 [ ]
  [35] (byte~) animate::$18 ← * (word) 4355 [ animate::$18 ]
  [36] if((byte~) animate::$18==(byte) 255) goto animate::@9 [ ]
  to:animate::@return
animate::@return: from animate::@11 animate::@8 animate::@9
  [37] return  [ ]
  to:@RETURN
animate::@9: from animate::@8
  [38] *((word) 4355) ← (byte) 25 [ ]
  [39] (byte~) animate::$20 ← * (word) 4099 [ animate::$20 ]
  [40] (byte~) animate::$21 ← (byte~) animate::$20 + (byte) 7 [ animate::$21 ]
  [41] *((word) 4099) ← (byte~) animate::$21 [ ]
  [42] (byte~) animate::$22 ← * (word) 4099 [ animate::$22 ]
  [43] if((byte~) animate::$22>=(byte) 40) goto animate::@11 [ ]
  to:animate::@return
animate::@11: from animate::@9
  [44] (byte~) animate::$24 ← * (word) 4099 [ animate::$24 ]
  [45] (byte~) animate::$25 ← (byte~) animate::$24 - (byte) 40 [ animate::$25 ]
  [46] *((word) 4099) ← (byte~) animate::$25 [ ]
  to:animate::@return
animate::@7: from animate::@6
  [47] *((word) 4354) ← (byte) 0 [ ]
  to:animate::@8
animate::@5: from animate::@4
  [48] *((word) 4097) ← (byte) 40 [ ]
  to:animate::@6
animate::@3: from animate::@2
  [49] *((word) 4352) ← (byte) 0 [ ]
  to:animate::@4
animate::@1: from animate
  [50] *((word) 4096) ← (byte) 0 [ ]
  to:animate::@2
render: from main::@1
  to:render::@1
render::@1: from render render::@3
  [51] (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 ) [ render::y#2 render::colline#2 ]
  [51] (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: from render::@1 render::@5
  [52] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 ) [ render::x#2 render::y#2 render::colline#2 ]
  [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ]
  [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ]
  [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:render::@5
render::@5: from render::@2
  [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ]
  [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ]
  [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ]
  [59] if((byte) render::x#1<(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ]
  to:render::@3
render::@3: from render::@5
  [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ]
  [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [62] if((byte) render::y#1<(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: from render::@3
  [63] return  [ ]
  to:@RETURN
findcol: from render::@2
  to:findcol::@1
findcol::@1: from findcol findcol::@13
  [64] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::mincol#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@13/(byte) findcol::mindiff#11 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@13/(byte) findcol::i#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [67] if((byte) findcol::x#0==(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@3
findcol::@3: from findcol::@1 findcol::@2
  [68] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@7
findcol::@7: from findcol::@3
  [69] (byte) findcol::diff#1 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#1 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@8
findcol::@8: from findcol::@6 findcol::@7
  [70] (byte) findcol::diff#4 ← phi( findcol::@6/(byte) findcol::diff#0 findcol::@7/(byte) findcol::diff#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [71] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@9 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@10
findcol::@10: from findcol::@8
  [72] (byte~) findcol::$10 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$10 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [73] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@11
findcol::@11: from findcol::@10 findcol::@9
  [74] (byte) findcol::diff#6 ← phi( findcol::@10/(byte) findcol::diff#3 findcol::@9/(byte) findcol::diff#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [75] if((byte) findcol::diff#6<(byte) findcol::mindiff#10) goto findcol::@12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@13
findcol::@13: from findcol::@11 findcol::@12
  [76] (byte) findcol::mindiff#11 ← phi( findcol::@11/(byte) findcol::mindiff#10 findcol::@12/(byte~) findcol::diff#13 ) [ render::x#2 render::y#2 render::colline#2 findcol::mindiff#11 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 ]
  [76] (byte) findcol::mincol#2 ← phi( findcol::@11/(byte) findcol::mincol#11 findcol::@12/(byte) findcol::mincol#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::mindiff#11 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 ]
  [77] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  [78] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#11 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  to:findcol::@return
findcol::@return: from findcol::@13 findcol::@2
  [79] (byte) findcol::return#0 ← phi( findcol::@13/(byte) findcol::mincol#2 findcol::@2/(byte) 0 ) [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  [80] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:@RETURN
findcol::@12: from findcol::@11
  [81] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ]
  [82] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#1 findcol::diff#13 numpoints#1 ]
  to:findcol::@13
findcol::@9: from findcol::@8
  [83] (byte~) findcol::$8 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$8 ]
  [84] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$8 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@11
findcol::@6: from findcol::@3
  [85] (byte) findcol::diff#0 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::diff#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@8
findcol::@2: from findcol::@1
  [86] if((byte) findcol::y#0==(byte) findcol::yp#0) goto findcol::@return [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@3
initscreen: from main::@8
  to:initscreen::@1
initscreen::@1: from initscreen initscreen::@1
  [87] (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [88] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ]
  [89] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [90] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: from initscreen::@1
  [91] return  [ ]
  to:@RETURN
addpoint: from main main::@3 main::@4 main::@5 main::@6 main::@7
  [92] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [92] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [93] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [94] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [95] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [96] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ]
  to:addpoint::@return
addpoint::@return: from addpoint
  [97] return  [ ]
  to:@RETURN
