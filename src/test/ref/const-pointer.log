Identified constant variable (byte*) main::screen
Identified constant variable (byte*) main::NULL
Identified constant variable (byte*) main::rem
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (bool~) main::$0 ← (const byte*) main::rem != (const byte*) main::NULL
  if((bool~) main::$0) goto main::@1
  to:main::@3
main::@1: scope:[main]  from main
  *((const byte*) main::screen + (number) 0) ← (byte) '*'
  to:main::@return
main::@3: scope:[main]  from main
  *((const byte*) main::screen + (number) 0) ← (byte) '.'
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@3
(label) main::@return
(const byte*) main::NULL = (byte*)(number) 0
(const byte*) main::rem = (byte*)(number) $ff
(const byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte) '*'
Adding number conversion cast (unumber) 0 in *((const byte*) main::screen + (number) 0) ← (byte) '.'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [1] if((const byte*) main::rem!=(const byte*) main::NULL) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [1] if((const byte*) main::rem!=(const byte*) main::NULL) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero main::screen in [2] *((const byte*) main::screen + (byte) 0) ← (byte) '*'
Simplifying expression containing zero main::screen in [3] *((const byte*) main::screen + (byte) 0) ← (byte) '.'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte*) main::NULL
Eliminating unused constant (const byte*) main::rem
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@3
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [5] *((const byte*) main::screen) ← (byte) '*'
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const byte*) main::screen) ← (byte) '*' [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 57 combination 
Uplifting [] best 57 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
//Test that constant pointers are detected correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    // main::@1
    // screen[0] = '*'
    // [5] *((const byte*) main::screen) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta screen
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

