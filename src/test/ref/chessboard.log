
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::screen#0 = (byte*)$400
  main::colors#0 = (byte*)$d800
  main::color#0 = 1
  main::row#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::row#4 = phi( main/main::row#0, main::@3/main::row#1 )
  main::colors#4 = phi( main/main::colors#0, main::@3/main::colors#1 )
  main::color#5 = phi( main/main::color#0, main::@3/main::color#2 )
  main::screen#4 = phi( main/main::screen#0, main::@3/main::screen#1 )
  main::column#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  main::row#3 = phi( main::@1/main::row#4, main::@2/main::row#3 )
  main::colors#2 = phi( main::@1/main::colors#4, main::@2/main::colors#2 )
  main::color#3 = phi( main::@1/main::color#5, main::@2/main::color#1 )
  main::column#2 = phi( main::@1/main::column#0, main::@2/main::column#1 )
  main::screen#2 = phi( main::@1/main::screen#4, main::@2/main::screen#2 )
  main::screen#2[main::column#2] = $a0
  main::colors#2[main::column#2] = main::color#3
  main::$0 = main::color#3 ^ 1
  main::color#1 = main::$0
  main::column#1 = main::column#2 + rangenext(0,7)
  main::$1 = main::column#1 != rangelast(0,7)
  if(main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::row#2 = phi( main::@2/main::row#3 )
  main::colors#3 = phi( main::@2/main::colors#2 )
  main::screen#3 = phi( main::@2/main::screen#2 )
  main::color#4 = phi( main::@2/main::color#1 )
  main::$2 = main::color#4 ^ 1
  main::color#2 = main::$2
  main::$3 = main::screen#3 + $28
  main::screen#1 = main::$3
  main::$4 = main::colors#3 + $28
  main::colors#1 = main::$4
  main::row#1 = main::row#2 + rangenext(0,7)
  main::$5 = main::row#1 != rangelast(0,7)
  if(main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number~ main::$0
bool~ main::$1
number~ main::$2
byte*~ main::$3
byte*~ main::$4
bool~ main::$5
byte main::color
byte main::color#0
byte main::color#1
byte main::color#2
byte main::color#3
byte main::color#4
byte main::color#5
byte* main::colors
byte* main::colors#0
byte* main::colors#1
byte* main::colors#2
byte* main::colors#3
byte* main::colors#4
byte main::column
byte main::column#0
byte main::column#1
byte main::column#2
byte main::row
byte main::row#0
byte main::row#1
byte main::row#2
byte main::row#3
byte main::row#4
byte* main::screen
byte* main::screen#0
byte* main::screen#1
byte* main::screen#2
byte* main::screen#3
byte* main::screen#4

Adding number conversion cast (unumber) $a0 in main::screen#2[main::column#2] = $a0
Adding number conversion cast (unumber) 1 in main::$0 = main::color#3 ^ 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::color#3 ^ (unumber)1
Adding number conversion cast (unumber) 1 in main::$2 = main::color#4 ^ 1
Adding number conversion cast (unumber) main::$2 in main::$2 = main::color#4 ^ (unumber)1
Adding number conversion cast (unumber) $28 in main::$3 = main::screen#3 + $28
Adding number conversion cast (unumber) $28 in main::$4 = main::colors#3 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::screen#2[main::column#2] = (unumber)$a0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $a0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $a0
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type $28
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::color#3 ^ 1
Inferred type updated to byte in main::$2 = main::color#4 ^ 1
Alias main::color#1 = main::$0 main::color#4 
Alias main::screen#2 = main::screen#3 
Alias main::colors#2 = main::colors#3 
Alias main::row#2 = main::row#3 
Alias main::color#2 = main::$2 
Alias main::screen#1 = main::$3 
Alias main::colors#1 = main::$4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::screen#2 main::screen#4
Identical Phi Values main::colors#2 main::colors#4
Identical Phi Values main::row#2 main::row#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [12] if(main::column#1!=rangelast(0,7)) goto main::@2
Simple Condition main::$5 [18] if(main::row#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::screen#0 = (byte*) 1024
Constant main::colors#0 = (byte*) 55296
Constant main::color#0 = 1
Constant main::row#0 = 0
Constant main::column#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::column#1 = ++ main::column#2 to ++
Resolved ranged comparison value [12] if(main::column#1!=rangelast(0,7)) goto main::@2 to 8
Resolved ranged next value [16] main::row#1 = ++ main::row#4 to ++
Resolved ranged comparison value [18] if(main::row#1!=rangelast(0,7)) goto main::@1 to 8
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [6] if(main::column#1!=8) goto main::@2
Adding number conversion cast (unumber) 8 in [11] if(main::row#1!=8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 8
Finalized unsigned number type 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::colors#0
Inlining constant with var siblings main::color#0
Inlining constant with var siblings main::row#0
Inlining constant with var siblings main::column#0
Constant inlined main::screen#0 = (byte*) 1024
Constant inlined main::colors#0 = (byte*) 55296
Constant inlined main::color#0 = 1
Constant inlined main::row#0 = 0
Constant inlined main::column#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting main::@5(between main::@2 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 6 initial phi equivalence classes
Coalesced [2] main::color#7 = main::color#5
Coalesced [15] main::screen#5 = main::screen#1
Coalesced [16] main::color#6 = main::color#2
Coalesced [17] main::colors#5 = main::colors#1
Coalesced [18] main::row#5 = main::row#1
Coalesced [19] main::column#3 = main::column#1
Coalesced [20] main::color#8 = main::color#1
Coalesced down to 5 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::row#4 = phi( main/0, main::@3/main::row#1 )
  [1] main::colors#4 = phi( main/(byte*) 55296, main::@3/main::colors#1 )
  [1] main::color#5 = phi( main/1, main::@3/main::color#2 )
  [1] main::screen#4 = phi( main/(byte*) 1024, main::@3/main::screen#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] main::color#3 = phi( main::@1/main::color#5, main::@2/main::color#1 )
  [2] main::column#2 = phi( main::@1/0, main::@2/main::column#1 )
  [3] main::screen#4[main::column#2] = $a0
  [4] main::colors#4[main::column#2] = main::color#3
  [5] main::color#1 = main::color#3 ^ 1
  [6] main::column#1 = ++ main::column#2
  [7] if(main::column#1!=8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] main::color#2 = main::color#1 ^ 1
  [9] main::screen#1 = main::screen#4 + $28
  [10] main::colors#1 = main::colors#4 + $28
  [11] main::row#1 = ++ main::row#4
  [12] if(main::row#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::color
byte main::color#1 71.0
byte main::color#2 4.4
byte main::color#3 104.66666666666666
byte main::color#5 22.0
byte* main::colors
byte* main::colors#1 7.333333333333333
byte* main::colors#4 13.666666666666664
byte main::column
byte main::column#1 151.5
byte main::column#2 101.0
byte main::row
byte main::row#1 16.5
byte main::row#4 2.2
byte* main::screen
byte* main::screen#1 5.5
byte* main::screen#4 15.375

Initial phi equivalence classes
[ main::screen#4 main::screen#1 ]
[ main::colors#4 main::colors#1 ]
[ main::row#4 main::row#1 ]
[ main::column#2 main::column#1 ]
[ main::color#3 main::color#5 main::color#2 main::color#1 ]
Complete equivalence classes
[ main::screen#4 main::screen#1 ]
[ main::colors#4 main::colors#1 ]
[ main::row#4 main::row#1 ]
[ main::column#2 main::column#1 ]
[ main::color#3 main::color#5 main::color#2 main::color#1 ]
Allocated zp[2]:2 [ main::screen#4 main::screen#1 ]
Allocated zp[2]:4 [ main::colors#4 main::colors#1 ]
Allocated zp[1]:6 [ main::row#4 main::row#1 ]
Allocated zp[1]:7 [ main::column#2 main::column#1 ]
Allocated zp[1]:8 [ main::color#3 main::color#5 main::color#2 main::color#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::screen#4[main::column#2] = $a0 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::row#4 main::row#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::column#2 main::column#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::color#3 main::color#5 main::color#2 main::color#1 ]
Statement [4] main::colors#4[main::column#2] = main::color#3 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] { }  ) always clobbers reg byte a 
Statement [5] main::color#1 = main::color#3 ^ 1 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#1 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#1 ] { }  ) always clobbers reg byte a 
Statement [8] main::color#2 = main::color#1 ^ 1 [ main::screen#4 main::colors#4 main::row#4 main::color#2 ] (  [ main::screen#4 main::colors#4 main::row#4 main::color#2 ] { }  ) always clobbers reg byte a 
Statement [9] main::screen#1 = main::screen#4 + $28 [ main::colors#4 main::row#4 main::screen#1 main::color#2 ] (  [ main::colors#4 main::row#4 main::screen#1 main::color#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::colors#1 = main::colors#4 + $28 [ main::row#4 main::screen#1 main::color#2 main::colors#1 ] (  [ main::row#4 main::screen#1 main::color#2 main::colors#1 ] { }  ) always clobbers reg byte a 
Statement [3] main::screen#4[main::column#2] = $a0 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] { }  ) always clobbers reg byte a 
Statement [4] main::colors#4[main::column#2] = main::color#3 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#3 ] { }  ) always clobbers reg byte a 
Statement [5] main::color#1 = main::color#3 ^ 1 [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#1 ] (  [ main::screen#4 main::colors#4 main::row#4 main::column#2 main::color#1 ] { }  ) always clobbers reg byte a 
Statement [8] main::color#2 = main::color#1 ^ 1 [ main::screen#4 main::colors#4 main::row#4 main::color#2 ] (  [ main::screen#4 main::colors#4 main::row#4 main::color#2 ] { }  ) always clobbers reg byte a 
Statement [9] main::screen#1 = main::screen#4 + $28 [ main::colors#4 main::row#4 main::screen#1 main::color#2 ] (  [ main::colors#4 main::row#4 main::screen#1 main::color#2 ] { }  ) always clobbers reg byte a 
Statement [10] main::colors#1 = main::colors#4 + $28 [ main::row#4 main::screen#1 main::color#2 main::colors#1 ] (  [ main::row#4 main::screen#1 main::color#2 main::colors#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::screen#4 main::screen#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::colors#4 main::colors#1 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::row#4 main::row#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::column#2 main::column#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::color#3 main::color#5 main::color#2 main::color#1 ] : zp[1]:8 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 252.5: zp[1]:7 [ main::column#2 main::column#1 ] 202.07: zp[1]:8 [ main::color#3 main::color#5 main::color#2 main::color#1 ] 21: zp[2]:4 [ main::colors#4 main::colors#1 ] 20.88: zp[2]:2 [ main::screen#4 main::screen#1 ] 18.7: zp[1]:6 [ main::row#4 main::row#1 ] 
Uplift Scope [] 

Uplifting [main] best 4851 combination reg byte y [ main::column#2 main::column#1 ] reg byte x [ main::color#3 main::color#5 main::color#2 main::color#1 ] zp[2]:4 [ main::colors#4 main::colors#1 ] zp[2]:2 [ main::screen#4 main::screen#1 ] zp[1]:6 [ main::row#4 main::row#1 ] 
Uplifting [] best 4851 combination 
Attempting to uplift remaining variables inzp[1]:6 [ main::row#4 main::row#1 ]
Uplifting [main] best 4851 combination zp[1]:6 [ main::row#4 main::row#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Draws a chess board in the upper left corner of the screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 2
    .label colors = 4
    .label row = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::row#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    // [1] phi main::colors#4 = (byte*) 55296 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z colors
    lda #>$d800
    sta.z colors+1
    // [1] phi main::color#5 = 1 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #1
    // [1] phi main::screen#4 = (byte*) 1024 [phi:main->main::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::row#4 = main::row#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::colors#4 = main::colors#1 [phi:main::@3->main::@1#1] -- register_copy 
    // [1] phi main::color#5 = main::color#2 [phi:main::@3->main::@1#2] -- register_copy 
    // [1] phi main::screen#4 = main::screen#1 [phi:main::@3->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi main::color#3 = main::color#5 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi main::column#2 = 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [2] phi main::color#3 = main::color#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [2] phi main::column#2 = main::column#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] main::screen#4[main::column#2] = $a0 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #$a0
    sta (screen),y
    // [4] main::colors#4[main::column#2] = main::color#3 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (colors),y
    // [5] main::color#1 = main::color#3 ^ 1 -- vbuxx=vbuxx_bxor_vbuc1 
    txa
    eor #1
    tax
    // [6] main::column#1 = ++ main::column#2 -- vbuyy=_inc_vbuyy 
    iny
    // [7] if(main::column#1!=8) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [8] main::color#2 = main::color#1 ^ 1 -- vbuxx=vbuxx_bxor_vbuc1 
    txa
    eor #1
    tax
    // [9] main::screen#1 = main::screen#4 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [10] main::colors#1 = main::colors#4 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z colors
    sta.z colors
    bcc !+
    inc.z colors+1
  !:
    // [11] main::row#1 = ++ main::row#4 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [12] if(main::row#1!=8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte main::color
byte main::color#1 reg byte x 71.0
byte main::color#2 reg byte x 4.4
byte main::color#3 reg byte x 104.66666666666666
byte main::color#5 reg byte x 22.0
byte* main::colors
byte* main::colors#1 colors zp[2]:4 7.333333333333333
byte* main::colors#4 colors zp[2]:4 13.666666666666664
byte main::column
byte main::column#1 reg byte y 151.5
byte main::column#2 reg byte y 101.0
byte main::row
byte main::row#1 row zp[1]:6 16.5
byte main::row#4 row zp[1]:6 2.2
byte* main::screen
byte* main::screen#1 screen zp[2]:2 5.5
byte* main::screen#4 screen zp[2]:2 15.375

zp[2]:2 [ main::screen#4 main::screen#1 ]
zp[2]:4 [ main::colors#4 main::colors#1 ]
zp[1]:6 [ main::row#4 main::row#1 ]
reg byte y [ main::column#2 main::column#1 ]
reg byte x [ main::color#3 main::color#5 main::color#2 main::color#1 ]


FINAL ASSEMBLER
Score: 3861

  // File Comments
// Draws a chess board in the upper left corner of the screen
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 2
    .label colors = 4
    .label row = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::row#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    // [1] phi main::colors#4 = (byte*) 55296 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z colors
    lda #>$d800
    sta.z colors+1
    // [1] phi main::color#5 = 1 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #1
    // [1] phi main::screen#4 = (byte*) 1024 [phi:main->main::@1#3] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::row#4 = main::row#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::colors#4 = main::colors#1 [phi:main::@3->main::@1#1] -- register_copy 
    // [1] phi main::color#5 = main::color#2 [phi:main::@3->main::@1#2] -- register_copy 
    // [1] phi main::screen#4 = main::screen#1 [phi:main::@3->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi main::color#3 = main::color#5 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi main::column#2 = 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [2] phi main::color#3 = main::color#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [2] phi main::column#2 = main::column#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // screen[column] = $a0
    // [3] main::screen#4[main::column#2] = $a0 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #$a0
    sta (screen),y
    // colors[column] = color
    // [4] main::colors#4[main::column#2] = main::color#3 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (colors),y
    // color = color^1
    // [5] main::color#1 = main::color#3 ^ 1 -- vbuxx=vbuxx_bxor_vbuc1 
    txa
    eor #1
    tax
    // for( byte column: 0..7)
    // [6] main::column#1 = ++ main::column#2 -- vbuyy=_inc_vbuyy 
    iny
    // [7] if(main::column#1!=8) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2
    // main::@3
    // color = color^1
    // [8] main::color#2 = main::color#1 ^ 1 -- vbuxx=vbuxx_bxor_vbuc1 
    txa
    eor #1
    tax
    // screen = screen+40
    // [9] main::screen#1 = main::screen#4 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // colors = colors+40
    // [10] main::colors#1 = main::colors#4 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z colors
    sta.z colors
    bcc !+
    inc.z colors+1
  !:
    // for( byte row: 0..7)
    // [11] main::row#1 = ++ main::row#4 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [12] if(main::row#1!=8) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b1
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

