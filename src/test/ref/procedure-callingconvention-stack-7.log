Calling convention STACK_CALL adding prepare/execute/finalize for call printline 
Calling convention STACK_CALL adding prepare/execute/finalize for call main 

CONTROL FLOW GRAPH SSA

__stackcall void main()
main: scope:[main]  from
  main::val#0 = 0
  main::val#1 = *SCREEN
  callexecute printline 
  SCREEN[$50] = main::val#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__stackcall void printline()
printline: scope:[printline]  from
  printline::i#0 = 0
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  printline::i#2 = phi( printline/printline::i#0, printline::@2/printline::i#1 )
  printline::$0 = printline::i#2 < $28
  if(printline::$0) goto printline::@2
  to:printline::@return
printline::@2: scope:[printline]  from printline::@1
  printline::i#3 = phi( printline::@1/printline::i#2 )
  SCREEN[printline::i#3] = '*'
  printline::i#1 = ++ printline::i#3
  to:printline::@1
printline::@return: scope:[printline]  from printline::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@return
__stackcall void main()
label main::@return
byte main::val
byte main::val#0
byte main::val#1
__stackcall void printline()
bool~ printline::$0
label printline::@1
label printline::@2
label printline::@return
byte printline::i
byte printline::i#0
byte printline::i#1
byte printline::i#2
byte printline::i#3

Adding number conversion cast (unumber) $50 in SCREEN[$50] = main::val#1
Adding number conversion cast (unumber) $28 in printline::$0 = printline::i#2 < $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $50
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $50
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias printline::i#2 = printline::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition printline::$0 [8] if(printline::i#2<$28) goto printline::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::val#0 = 0
Constant printline::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant main::val#0
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings printline::i#0
Constant inlined printline::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+$50)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of __start
Adding NOP phi() at start of printline
CALL GRAPH
Calls in [__start] to main:1 
Calls in [main] to printline:11 

Created 1 initial phi equivalence classes
Coalesced [9] printline::i#4 = printline::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of __start
Adding NOP phi() at start of printline

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  [1] callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start
  [2] return 
  to:@return

__stackcall void printline()
printline: scope:[printline]  from
  [3] phi()
  to:printline::@1
printline::@1: scope:[printline]  from printline printline::@2
  [4] printline::i#2 = phi( printline/0, printline::@2/printline::i#1 )
  [5] if(printline::i#2<$28) goto printline::@2
  to:printline::@return
printline::@return: scope:[printline]  from printline::@1
  [6] return 
  to:@return
printline::@2: scope:[printline]  from printline::@1
  [7] SCREEN[printline::i#2] = '*'
  [8] printline::i#1 = ++ printline::i#2
  to:printline::@1

__stackcall void main()
main: scope:[main]  from
  [9] main::val#1 = *SCREEN
  [10] callexecute printline 
  [11] *(SCREEN+$50) = main::val#1
  to:main::@return
main::@return: scope:[main]  from main
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
__stackcall void main()
byte main::val
byte main::val#1 11.0
__stackcall void printline()
byte printline::i
byte printline::i#1 2002.0
byte printline::i#2 1334.6666666666667

Initial phi equivalence classes
[ printline::i#2 printline::i#1 ]
Added variable main::val#1 to live range equivalence class [ main::val#1 ]
Complete equivalence classes
[ printline::i#2 printline::i#1 ]
[ main::val#1 ]
Allocated zp[1]:2 [ printline::i#2 printline::i#1 ]
Allocated zp[1]:3 [ main::val#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] SCREEN[printline::i#2] = '*' [ printline::i#2 ] ( main:1::printline:10 [ main::val#1 printline::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::val#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ printline::i#2 printline::i#1 ]
Statement [7] SCREEN[printline::i#2] = '*' [ printline::i#2 ] ( main:1::printline:10 [ main::val#1 printline::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printline::i#2 printline::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::val#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [printline] 3,336.67: zp[1]:2 [ printline::i#2 printline::i#1 ] 
Uplift Scope [main] 11: zp[1]:3 [ main::val#1 ] 
Uplift Scope [__start] 
Uplift Scope [] 

Uplifting [printline] best 295 combination reg byte x [ printline::i#2 printline::i#1 ] 
Uplifting [main] best 289 combination reg byte y [ main::val#1 ] 
Uplifting [__start] best 289 combination 
Uplifting [] best 289 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // __start
__start: {
    // [1] callexecute main  -- jsr 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [2] return 
    rts
}
  // printline
printline: {
    // [4] phi from printline to printline::@1 [phi:printline->printline::@1]
  __b1_from_printline:
    // [4] phi printline::i#2 = 0 [phi:printline->printline::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // printline::@1
  __b1:
    // [5] if(printline::i#2<$28) goto printline::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    jmp __breturn
    // printline::@return
  __breturn:
    // [6] return 
    rts
    // printline::@2
  __b2:
    // [7] SCREEN[printline::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta SCREEN,x
    // [8] printline::i#1 = ++ printline::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] phi from printline::@2 to printline::@1 [phi:printline::@2->printline::@1]
  __b1_from___b2:
    // [4] phi printline::i#2 = printline::i#1 [phi:printline::@2->printline::@1#0] -- register_copy 
    jmp __b1
}
  // main
main: {
    // [9] main::val#1 = *SCREEN -- vbuyy=_deref_pbuc1 
    ldy SCREEN
    // [10] callexecute printline  -- jsr 
    jsr printline
    // [11] *(SCREEN+$50) = main::val#1 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __b1_from_printline:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void __start()
label __start::@return
__stackcall void main()
label main::@return
byte main::val
byte main::val#1 reg byte y 11.0
__stackcall void printline()
label printline::@1
label printline::@2
label printline::@return
byte printline::i
byte printline::i#1 reg byte x 2002.0
byte printline::i#2 reg byte x 1334.6666666666667

reg byte x [ printline::i#2 printline::i#1 ]
reg byte y [ main::val#1 ]


FINAL ASSEMBLER
Score: 223

  // File Comments
// Test a procedure with calling convention stack
// Illustrates live ranges for main::val and printline::i
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // __start
__start: {
    // [1] callexecute main  -- jsr 
    jsr main
    // __start::@return
    // [2] return 
    rts
}
  // printline
printline: {
    // [4] phi from printline to printline::@1 [phi:printline->printline::@1]
    // [4] phi printline::i#2 = 0 [phi:printline->printline::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // printline::@1
  __b1:
    // for(char i=0; i<40; i++)
    // [5] if(printline::i#2<$28) goto printline::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    // printline::@return
    // }
    // [6] return 
    rts
    // printline::@2
  __b2:
    // SCREEN[i] = '*'
    // [7] SCREEN[printline::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta SCREEN,x
    // for(char i=0; i<40; i++)
    // [8] printline::i#1 = ++ printline::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] phi from printline::@2 to printline::@1 [phi:printline::@2->printline::@1]
    // [4] phi printline::i#2 = printline::i#1 [phi:printline::@2->printline::@1#0] -- register_copy 
    jmp __b1
}
  // main
main: {
    // val = *SCREEN
    // [9] main::val#1 = *SCREEN -- vbuyy=_deref_pbuc1 
    ldy SCREEN
    // printline()
    // [10] callexecute printline  -- jsr 
    jsr printline
    // SCREEN[80] = val
    // [11] *(SCREEN+$50) = main::val#1 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$50
    // main::@return
    // }
    // [12] return 
    rts
}
  // File Data

