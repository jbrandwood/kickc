PARSING src/test/java/dk/camelot64/kickc/test/loopsplit.kc
void main() {
  byte i=100;
  byte s=0;
  while(--i>0) {
      if(i>50) {
         s++;
      } else {
         s--;
      }
  }
}

Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) main::s ← ++ (byte) main::s
Adding pre/post-modifier (byte) main::s ← -- (byte) main::s

STATEMENTS
proc (void()) main()
  (byte) main::i ← (byte/signed byte/word/signed word) 100
  (byte) main::s ← (byte/signed byte/word/signed word) 0
main::@1:
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte/signed byte/word/signed word) 0
  if((boolean~) main::$0) goto main::@2
  goto main::@3
main::@2:
  (boolean~) main::$1 ← (byte) main::i > (byte/signed byte/word/signed word) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  (byte) main::s ← ++ (byte) main::s
  goto main::@5
main::@4:
  (byte) main::s ← -- (byte) main::s
main::@5:
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::s

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word) 100
  (byte) main::s ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$0 ← (byte) main::i > (byte/signed byte/word/signed word) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@7
  (boolean~) main::$1 ← (byte) main::i > (byte/signed byte/word/signed word) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@6: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@6
  to:main::@return
main::@7: scope:[main]  from
  to:main::@2
main::@4: scope:[main]  from main::@2 main::@9
  (byte) main::s ← -- (byte) main::s
  to:main::@5
main::@8: scope:[main]  from main::@2
  (byte) main::s ← ++ (byte) main::s
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@8
  to:main::@1
main::@9: scope:[main]  from
  to:main::@4
main::@10: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@6
Removing empty block main::@3
Removing empty block main::@7
Removing empty block main::@5
Removing empty block main::@9
Removing empty block main::@10
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 100
  (byte) main::s#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  (byte) main::s#6 ← phi( main/(byte) main::s#0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#4 main::@8/(byte) main::i#5 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 > (byte/signed byte/word/signed word) 0
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#6 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#3 > (byte/signed byte/word/signed word) 50
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@4
  to:main::@8
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#1 ← -- (byte) main::s#3
  to:main::@1
main::@8: scope:[main]  from main::@2
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 )
  (byte) main::s#2 ← ++ (byte) main::s#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (boolean~) main::$2 ← (byte) main::i#3 <= (byte/signed byte/word/signed word) 50 from (boolean~) main::$1 ← (byte) main::i#3 > (byte/signed byte/word/signed word) 50
Succesful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::i#1 = (byte) main::i#3 (byte) main::i#4 (byte) main::i#5 
Alias (byte) main::s#3 = (byte) main::s#5 (byte) main::s#6 (byte) main::s#4 
Succesful SSA optimization Pass2AliasElimination
Simple Condition (boolean~) main::$0 if((byte) main::i#1>(byte/signed byte/word/signed word) 0) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1<=(byte/signed byte/word/signed word) 50) goto main::@4
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 100
Constant (const byte) main::s#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 100
Constant inlined main::s#0 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 main::@8 main::@4 
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 main::@8 main::@4 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 2 initial phi equivalence classes
Coalesced [11] main::i#7 ← main::i#1
Coalesced [12] main::s#8 ← main::s#2
Coalesced (already) [14] main::i#6 ← main::i#1
Coalesced [15] main::s#7 ← main::s#1
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 main::@8 main::@4 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@8
  [5] (byte) main::s#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@4/(byte) main::s#1 main::@8/(byte) main::s#2 ) [ main::i#2 main::s#3 ] ( main:2 [ main::i#2 main::s#3 ] )
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 100 main::@4/(byte) main::i#1 main::@8/(byte) main::i#1 ) [ main::i#2 main::s#3 ] ( main:2 [ main::i#2 main::s#3 ] )
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] )
  [7] if((byte) main::i#1>(byte/signed byte/word/signed word) 0) goto main::@2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return  [ ] ( main:2 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [9] if((byte) main::i#1<=(byte/signed byte/word/signed word) 50) goto main::@4 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] )
  to:main::@8
main::@8: scope:[main]  from main::@2
  [10] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] ( main:2 [ main::i#1 main::s#2 ] )
  to:main::@1
main::@4: scope:[main]  from main::@2
  [11] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] ( main:2 [ main::i#1 main::s#1 ] )
  to:main::@1

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@8 dominated by  @1 @begin main::@8 main::@1 main::@2 main 
main::@4 dominated by  @1 @begin main::@1 main::@2 main main::@4 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@8 blocks: null
Found back edge: Loop head: main::@1 tails: main::@4 blocks: null
Populated: Loop head: main::@1 tails: main::@8 blocks: main::@8 main::@2 main::@1 
Populated: Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@2 main::@1 
Coalesced: Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 
Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4 
Loop head: main::@1 tails: main::@8 main::@4 blocks: main::@8 main::@2 main::@1 main::@4  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 33.0
(byte) main::s
(byte) main::s#1 22.0
(byte) main::s#2 22.0
(byte) main::s#3 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::s#3 main::s#1 main::s#2 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label i = 2
    .label s = 3
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::s#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 100 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #$64
    sta i
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuz1=_dec_vbuz1 
    dec i
  //SEG15 [7] if((byte) main::i#1>(byte/signed byte/word/signed word) 0) goto main::@2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuz1_gt_0_then_la1 
    lda i
    bne b2
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [9] if((byte) main::i#1<=(byte/signed byte/word/signed word) 50) goto main::@4 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuz1_le_vbuc1_then_la1 
    lda i
    cmp #$32
    bcc b4
    beq b4
    jmp b8
  //SEG20 main::@8
  b8:
  //SEG21 [10] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] ( main:2 [ main::i#1 main::s#2 ] ) -- vbuz1=_inc_vbuz1 
    inc s
  //SEG22 [5] phi from main::@4 main::@8 to main::@1 [phi:main::@4/main::@8->main::@1]
  b1_from_b4:
  b1_from_b8:
  //SEG23 [5] phi (byte) main::s#3 = (byte) main::s#1 [phi:main::@4/main::@8->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4/main::@8->main::@1#1] -- register_copy 
    jmp b1
  //SEG25 main::@4
  b4:
  //SEG26 [11] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] ( main:2 [ main::i#1 main::s#1 ] ) -- vbuz1=_dec_vbuz1 
    dec s
    jmp b1_from_b4
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::s#3 main::s#1 main::s#2 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp ZP_BYTE:3 [ main::s#3 main::s#1 main::s#2 ] 44: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 383 combination reg byte y [ main::s#3 main::s#1 main::s#2 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 383 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::s#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 100 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$64
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG15 [7] if((byte) main::i#1>(byte/signed byte/word/signed word) 0) goto main::@2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [9] if((byte) main::i#1<=(byte/signed byte/word/signed word) 50) goto main::@4 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx_le_vbuc1_then_la1 
    cpx #$32
    bcc b4
    beq b4
    jmp b8
  //SEG20 main::@8
  b8:
  //SEG21 [10] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] ( main:2 [ main::i#1 main::s#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG22 [5] phi from main::@4 main::@8 to main::@1 [phi:main::@4/main::@8->main::@1]
  b1_from_b4:
  b1_from_b8:
  //SEG23 [5] phi (byte) main::s#3 = (byte) main::s#1 [phi:main::@4/main::@8->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4/main::@8->main::@1#1] -- register_copy 
    jmp b1
  //SEG25 main::@4
  b4:
  //SEG26 [11] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] ( main:2 [ main::i#1 main::s#1 ] ) -- vbuyy=_dec_vbuyy 
    dey
    jmp b1_from_b4
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b8
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b4 with b1_from_b8
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b8:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b1 in jmp b1_from_b8
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_b8 to b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 33.0
(byte) main::s
(byte) main::s#1 reg byte y 22.0
(byte) main::s#2 reg byte y 22.0
(byte) main::s#3 reg byte y 11.0

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::s#3 main::s#1 main::s#2 ]


FINAL ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::s#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 100 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$64
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG15 [7] if((byte) main::i#1>(byte/signed byte/word/signed word) 0) goto main::@2 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b2
  //SEG16 main::@return
  //SEG17 [8] return  [ ] ( main:2 [ ] )
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [9] if((byte) main::i#1<=(byte/signed byte/word/signed word) 50) goto main::@4 [ main::s#3 main::i#1 ] ( main:2 [ main::s#3 main::i#1 ] ) -- vbuxx_le_vbuc1_then_la1 
    cpx #$32
    bcc b4
    beq b4
  //SEG20 main::@8
  //SEG21 [10] (byte) main::s#2 ← ++ (byte) main::s#3 [ main::i#1 main::s#2 ] ( main:2 [ main::i#1 main::s#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG22 [5] phi from main::@4 main::@8 to main::@1 [phi:main::@4/main::@8->main::@1]
  //SEG23 [5] phi (byte) main::s#3 = (byte) main::s#1 [phi:main::@4/main::@8->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4/main::@8->main::@1#1] -- register_copy 
    jmp b1
  //SEG25 main::@4
  b4:
  //SEG26 [11] (byte) main::s#1 ← -- (byte) main::s#3 [ main::i#1 main::s#1 ] ( main:2 [ main::i#1 main::s#1 ] ) -- vbuyy=_dec_vbuyy 
    dey
    jmp b1
}

