byte* SCREEN = $0400;
byte* SCREEN2 = $0400+40;
main();

void main() {
    for(byte i : 0..10) {
        SCREEN[i] = sum(i,i+1,i+2);
        SCREEN2[i] = sum2(i,i+1,i+2);
    }
}

byte sum(byte a, byte b, byte c) {
  return a+b+c;
}


byte sum2(byte a, byte b, byte c) {
  return a+b+c;
}
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2 ← (word~) $0
  (void~) $1 ← call main 
proc (void()) main()
  (byte) main::i ← (byte) 0
main::@1:
  (byte~) main::$0 ← (byte) main::i + (byte) 1
  (byte~) main::$1 ← (byte) main::i + (byte) 2
  (byte~) main::$2 ← call sum (byte) main::i (byte~) main::$0 (byte~) main::$1 
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i + (byte) 1
  (byte~) main::$4 ← (byte) main::i + (byte) 2
  (byte~) main::$5 ← call sum2 (byte) main::i (byte~) main::$3 (byte~) main::$4 
  *((byte*) SCREEN2 + (byte) main::i) ← (byte~) main::$5
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$6 ← (byte) main::i != (byte) 11
  if((boolean~) main::$6) goto main::@1
main::@return:
  return 
endproc // main()
proc (byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c
  (byte) sum::return ← (byte~) sum::$1
  goto sum::@return
sum::@return:
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
endproc // sum()
proc (byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
  (byte~) sum2::$0 ← (byte) sum2::a + (byte) sum2::b
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c
  (byte) sum2::return ← (byte~) sum2::$1
  goto sum2::@return
sum2::@return:
  (byte) sum2::return ← (byte) sum2::return
  return (byte) sum2::return
endproc // sum2()

SYMBOLS
(word~) $0
(void~) $1
(byte*) SCREEN
(byte*) SCREEN2
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(boolean~) main::$6
(label) main::@1
(label) main::@return
(byte) main::i
(byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
(byte~) sum::$0
(byte~) sum::$1
(label) sum::@return
(byte) sum::a
(byte) sum::b
(byte) sum::c
(byte) sum::return
(byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
(byte~) sum2::$0
(byte~) sum2::$1
(label) sum2::@return
(byte) sum2::a
(byte) sum2::b
(byte) sum2::c
(byte) sum2::return

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2 ← (word~) $0
  (void~) $1 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) main::i + (byte) 1
  (byte~) main::$1 ← (byte) main::i + (byte) 2
  (byte~) main::$2 ← call sum (byte) main::i (byte~) main::$0 (byte~) main::$1 
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i + (byte) 1
  (byte~) main::$4 ← (byte) main::i + (byte) 2
  (byte~) main::$5 ← call sum2 (byte) main::i (byte~) main::$3 (byte~) main::$4 
  *((byte*) SCREEN2 + (byte) main::i) ← (byte~) main::$5
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$6 ← (byte) main::i != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
sum: scope:[sum]  from
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c
  (byte) sum::return ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum sum::@1
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
sum::@1: scope:[sum]  from
  to:sum::@return
@2: scope:[]  from @1
  to:@3
sum2: scope:[sum2]  from
  (byte~) sum2::$0 ← (byte) sum2::a + (byte) sum2::b
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c
  (byte) sum2::return ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2 sum2::@1
  (byte) sum2::return ← (byte) sum2::return
  return (byte) sum2::return
  to:@return
sum2::@1: scope:[sum2]  from
  to:sum2::@return
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Removing empty block main::@2
Removing empty block @1
Removing empty block sum::@1
Removing empty block @2
Removing empty block sum2::@1
Removing empty block @3
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2 ← (word~) $0
  (void~) $1 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) main::i + (byte) 1
  (byte~) main::$1 ← (byte) main::i + (byte) 2
  (byte~) main::$2 ← call sum (byte) main::i (byte~) main::$0 (byte~) main::$1 
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i + (byte) 1
  (byte~) main::$4 ← (byte) main::i + (byte) 2
  (byte~) main::$5 ← call sum2 (byte) main::i (byte~) main::$3 (byte~) main::$4 
  *((byte*) SCREEN2 + (byte) main::i) ← (byte~) main::$5
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$6 ← (byte) main::i != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
sum: scope:[sum]  from
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c
  (byte) sum::return ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
sum2: scope:[sum2]  from
  (byte~) sum2::$0 ← (byte) sum2::a + (byte) sum2::b
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c
  (byte) sum2::return ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  (byte) sum2::return ← (byte) sum2::return
  return (byte) sum2::return
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2 ← (word~) $0
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte~) main::$0 ← (byte) main::i + (byte) 1
  (byte~) main::$1 ← (byte) main::i + (byte) 2
  (byte) sum::a ← (byte) main::i
  (byte) sum::b ← (byte~) main::$0
  (byte) sum::c ← (byte~) main::$1
  (byte) sum::return ← call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i + (byte) 1
  (byte~) main::$4 ← (byte) main::i + (byte) 2
  (byte) sum2::a ← (byte) main::i
  (byte) sum2::b ← (byte~) main::$3
  (byte) sum2::c ← (byte~) main::$4
  (byte) sum2::return ← call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return
  *((byte*) SCREEN2 + (byte) main::i) ← (byte~) main::$5
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$6 ← (byte) main::i != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c
  (byte) sum::return ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a + (byte) sum2::b
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c
  (byte) sum2::return ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  (byte) sum2::return ← (byte) sum2::return
  return (byte) sum2::return
  to:@return
@end: scope:[]  from @4

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2#0 ← (word~) $0
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN2#4 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte*) SCREEN2#3 ← phi( main/(byte*) SCREEN2#4 main::@4/(byte*) SCREEN2#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@4/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  (byte) sum::return#0 ← call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN2#2 ← phi( main::@1/(byte*) SCREEN2#3 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) sum::return#3 ← phi( main::@1/(byte) sum::return#0 )
  (byte~) main::$2 ← (byte) sum::return#3
  *((byte*) SCREEN#1 + (byte) main::i#3) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#3 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#3 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#3
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  (byte) sum2::return#0 ← call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) SCREEN#4 ← phi( main::@3/(byte*) SCREEN#1 )
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#3 )
  (byte*) SCREEN2#1 ← phi( main::@3/(byte*) SCREEN2#2 )
  (byte) sum2::return#3 ← phi( main::@3/(byte) sum2::return#0 )
  (byte~) main::$5 ← (byte) sum2::return#3
  *((byte*) SCREEN2#1 + (byte) main::i#4) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#4
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte) sum::c#1 ← phi( main::@1/(byte) sum::c#0 )
  (byte) sum::b#1 ← phi( main::@1/(byte) sum::b#0 )
  (byte) sum::a#1 ← phi( main::@1/(byte) sum::a#0 )
  (byte~) sum::$0 ← (byte) sum::a#1 + (byte) sum::b#1
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c#1
  (byte) sum::return#1 ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#4 ← phi( sum/(byte) sum::return#1 )
  (byte) sum::return#2 ← (byte) sum::return#4
  return (byte) sum::return#2
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte) sum2::c#1 ← phi( main::@3/(byte) sum2::c#0 )
  (byte) sum2::b#1 ← phi( main::@3/(byte) sum2::b#0 )
  (byte) sum2::a#1 ← phi( main::@3/(byte) sum2::a#0 )
  (byte~) sum2::$0 ← (byte) sum2::a#1 + (byte) sum2::b#1
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c#1
  (byte) sum2::return#1 ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  (byte) sum2::return#4 ← phi( sum2/(byte) sum2::return#1 )
  (byte) sum2::return#2 ← (byte) sum2::return#4
  return (byte) sum2::return#2
  to:@return
@end: scope:[]  from @4

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2#0 ← (word~) $0
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN2#4 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte*) SCREEN2#3 ← phi( main/(byte*) SCREEN2#4 main::@4/(byte*) SCREEN2#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@4/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  (byte) sum::return#0 ← (byte) sum::return#2
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN2#2 ← phi( main::@1/(byte*) SCREEN2#3 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) sum::return#3 ← phi( main::@1/(byte) sum::return#0 )
  (byte~) main::$2 ← (byte) sum::return#3
  *((byte*) SCREEN#1 + (byte) main::i#3) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#3 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#3 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#3
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  (byte) sum2::return#0 ← (byte) sum2::return#2
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) SCREEN#4 ← phi( main::@3/(byte*) SCREEN#1 )
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#3 )
  (byte*) SCREEN2#1 ← phi( main::@3/(byte*) SCREEN2#2 )
  (byte) sum2::return#3 ← phi( main::@3/(byte) sum2::return#0 )
  (byte~) main::$5 ← (byte) sum2::return#3
  *((byte*) SCREEN2#1 + (byte) main::i#4) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#4
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte) sum::c#1 ← phi( main::@1/(byte) sum::c#0 )
  (byte) sum::b#1 ← phi( main::@1/(byte) sum::b#0 )
  (byte) sum::a#1 ← phi( main::@1/(byte) sum::a#0 )
  (byte~) sum::$0 ← (byte) sum::a#1 + (byte) sum::b#1
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c#1
  (byte) sum::return#1 ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#4 ← phi( sum/(byte) sum::return#1 )
  (byte) sum::return#2 ← (byte) sum::return#4
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte) sum2::c#1 ← phi( main::@3/(byte) sum2::c#0 )
  (byte) sum2::b#1 ← phi( main::@3/(byte) sum2::b#0 )
  (byte) sum2::a#1 ← phi( main::@3/(byte) sum2::a#0 )
  (byte~) sum2::$0 ← (byte) sum2::a#1 + (byte) sum2::b#1
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c#1
  (byte) sum2::return#1 ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  (byte) sum2::return#4 ← phi( sum2/(byte) sum2::return#1 )
  (byte) sum2::return#2 ← (byte) sum2::return#4
  return 
  to:@return
@end: scope:[]  from @4

INITIAL SSA SYMBOL TABLE
(word~) $0
(label) @4
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN2
(byte*) SCREEN2#0
(byte*) SCREEN2#1
(byte*) SCREEN2#2
(byte*) SCREEN2#3
(byte*) SCREEN2#4
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(boolean~) main::$6
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
(byte~) sum::$0
(byte~) sum::$1
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::a#1
(byte) sum::b
(byte) sum::b#0
(byte) sum::b#1
(byte) sum::c
(byte) sum::c#0
(byte) sum::c#1
(byte) sum::return
(byte) sum::return#0
(byte) sum::return#1
(byte) sum::return#2
(byte) sum::return#3
(byte) sum::return#4
(byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
(byte~) sum2::$0
(byte~) sum2::$1
(label) sum2::@return
(byte) sum2::a
(byte) sum2::a#0
(byte) sum2::a#1
(byte) sum2::b
(byte) sum2::b#0
(byte) sum2::b#1
(byte) sum2::c
(byte) sum2::c#0
(byte) sum2::c#1
(byte) sum2::return
(byte) sum2::return#0
(byte) sum2::return#1
(byte) sum2::return#2
(byte) sum2::return#3
(byte) sum2::return#4

Culled Empty Block (label) @4
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (word~) $0 ← (word) 1024 + (byte) 40
  (byte*) SCREEN2#0 ← (word~) $0
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN2#4 ← phi( @begin/(byte*) SCREEN2#0 )
  (byte*) SCREEN#3 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte*) SCREEN2#3 ← phi( main/(byte*) SCREEN2#4 main::@4/(byte*) SCREEN2#1 )
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@4/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  (byte) sum::return#0 ← (byte) sum::return#2
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN2#2 ← phi( main::@1/(byte*) SCREEN2#3 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) sum::return#3 ← phi( main::@1/(byte) sum::return#0 )
  (byte~) main::$2 ← (byte) sum::return#3
  *((byte*) SCREEN#1 + (byte) main::i#3) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#3 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#3 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#3
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  (byte) sum2::return#0 ← (byte) sum2::return#2
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) SCREEN#4 ← phi( main::@3/(byte*) SCREEN#1 )
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#3 )
  (byte*) SCREEN2#1 ← phi( main::@3/(byte*) SCREEN2#2 )
  (byte) sum2::return#3 ← phi( main::@3/(byte) sum2::return#0 )
  (byte~) main::$5 ← (byte) sum2::return#3
  *((byte*) SCREEN2#1 + (byte) main::i#4) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#4
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte) sum::c#1 ← phi( main::@1/(byte) sum::c#0 )
  (byte) sum::b#1 ← phi( main::@1/(byte) sum::b#0 )
  (byte) sum::a#1 ← phi( main::@1/(byte) sum::a#0 )
  (byte~) sum::$0 ← (byte) sum::a#1 + (byte) sum::b#1
  (byte~) sum::$1 ← (byte~) sum::$0 + (byte) sum::c#1
  (byte) sum::return#1 ← (byte~) sum::$1
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#4 ← phi( sum/(byte) sum::return#1 )
  (byte) sum::return#2 ← (byte) sum::return#4
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte) sum2::c#1 ← phi( main::@3/(byte) sum2::c#0 )
  (byte) sum2::b#1 ← phi( main::@3/(byte) sum2::b#0 )
  (byte) sum2::a#1 ← phi( main::@3/(byte) sum2::a#0 )
  (byte~) sum2::$0 ← (byte) sum2::a#1 + (byte) sum2::b#1
  (byte~) sum2::$1 ← (byte~) sum2::$0 + (byte) sum2::c#1
  (byte) sum2::return#1 ← (byte~) sum2::$1
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  (byte) sum2::return#4 ← phi( sum2/(byte) sum2::return#1 )
  (byte) sum2::return#2 ← (byte) sum2::return#4
  return 
  to:@return
@end: scope:[]  from @begin

Not aliassing across scopes: sum::a#0 main::i#2
Not aliassing across scopes: sum::b#0 main::$0
Not aliassing across scopes: sum::c#0 main::$1
Not aliassing across scopes: main::$2 sum::return#3
Not aliassing across scopes: sum2::a#0 main::i#3
Not aliassing across scopes: sum2::b#0 main::$3
Not aliassing across scopes: sum2::c#0 main::$4
Not aliassing across scopes: main::$5 sum2::return#3
Alias (byte*) SCREEN2#0 = (word~) $0 (byte*) SCREEN2#4 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 
Alias (byte) sum::return#0 = (byte) sum::return#2 (byte) sum::return#3 (byte) sum::return#1 (byte~) sum::$1 (byte) sum::return#4 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 (byte*) SCREEN#4 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (byte*) SCREEN2#1 = (byte*) SCREEN2#2 (byte*) SCREEN2#3 
Alias (byte) sum2::return#0 = (byte) sum2::return#2 (byte) sum2::return#3 (byte) sum2::return#1 (byte~) sum2::$1 (byte) sum2::return#4 
Alias (byte) sum::a#0 = (byte) sum::a#1 
Alias (byte) sum::b#0 = (byte) sum::b#1 
Alias (byte) sum::c#0 = (byte) sum::c#1 
Alias (byte) sum2::a#0 = (byte) sum2::a#1 
Alias (byte) sum2::b#0 = (byte) sum2::b#1 
Alias (byte) sum2::c#0 = (byte) sum2::c#1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) SCREEN2#0 ← (word) 1024 + (byte) 40
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#0 main::@4/(byte*) SCREEN2#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#0 main::@4/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((byte*) SCREEN2#1 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

Not aliassing across scopes: sum::a#0 main::i#2
Not aliassing across scopes: sum::b#0 main::$0
Not aliassing across scopes: sum::c#0 main::$1
Not aliassing across scopes: main::$2 sum::return#0
Not aliassing across scopes: sum2::a#0 main::i#2
Not aliassing across scopes: sum2::b#0 main::$3
Not aliassing across scopes: sum2::c#0 main::$4
Not aliassing across scopes: main::$5 sum2::return#0
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte*) SCREEN2#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) SCREEN2#0 ← (word) 1024 + (byte) 40
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte*) SCREEN2#1 ← phi( main/(byte*) SCREEN2#0 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((byte*) SCREEN2#1 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN2#1 (byte*) SCREEN2#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) SCREEN2#0 ← (word) 1024 + (byte) 40
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$6 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$6 if((byte) main::i#1!=(byte) 11) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) SCREEN2#0 ← (word) 1024 + (byte) 40
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte*) SCREEN2#0 = 1024+40
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Not aliassing across scopes: sum::a#0 main::i#2
Not aliassing across scopes: sum::b#0 main::$0
Not aliassing across scopes: sum::c#0 main::$1
Not aliassing across scopes: main::$2 sum::return#0
Not aliassing across scopes: sum2::a#0 main::i#2
Not aliassing across scopes: sum2::b#0 main::$3
Not aliassing across scopes: sum2::c#0 main::$4
Not aliassing across scopes: main::$5 sum2::return#0
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
@end: scope:[]  from @begin

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte*) SCREEN2
(const byte*) SCREEN2#0 = (word) 1024+(byte) 40
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::b
(byte) sum::b#0
(byte) sum::c
(byte) sum::c#0
(byte) sum::return
(byte) sum::return#0
(byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
(byte~) sum2::$0
(label) sum2::@return
(byte) sum2::a
(byte) sum2::a#0
(byte) sum2::b
(byte) sum2::b#0
(byte) sum2::c
(byte) sum2::c#0
(byte) sum2::return
(byte) sum2::return#0

Block Sequence Planned @begin @end main main::@1 main::@3 main::@4 main::@return sum2 sum2::@return sum sum::@return 
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Block Sequence Planned @begin @end main main::@1 main::@3 main::@4 main::@return main::@5 sum2 sum2::@return sum sum::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#2 ← phi( main/(byte) 0 main::@5/(byte~) main::i#5 )
  (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$1 ← (byte) main::i#2 + (byte) 2
  (byte) sum::a#0 ← (byte) main::i#2
  (byte) sum::b#0 ← (byte~) main::$0
  (byte) sum::c#0 ← (byte~) main::$1
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) sum::return#0
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::i#2 + (byte) 1
  (byte~) main::$4 ← (byte) main::i#2 + (byte) 2
  (byte) sum2::a#0 ← (byte) main::i#2
  (byte) sum2::b#0 ← (byte~) main::$3
  (byte) sum2::c#0 ← (byte~) main::$4
  call sum2 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) main::$5 ← (byte) sum2::return#0
  *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
main::@5: scope:[main]  from main::@4
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@1
sum2: scope:[sum2]  from main::@3
  (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  return 
  to:@return
sum: scope:[sum]  from main::@1
  (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 8:sum 16:sum2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@5/(byte~) main::i#5 ) [ main::i#2 ]
  [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ]
  [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ]
  [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ]
  [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
  [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ]
  [8] call sum param-assignment [ main::i#2 sum::return#0 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
  [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ]
  [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ]
  [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ]
  [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ]
  [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
  [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ]
  [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
  [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ]
  [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [20] if((byte) main::i#1!=(byte) 11) goto main::@5 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@4
  [21] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@4
  [22] (byte~) main::i#5 ← (byte) main::i#1 [ main::i#5 ]
  to:main::@1
sum2: scope:[sum2]  from main::@3
  [23] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ]
  [24] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ]
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  [25] return  [ sum2::return#0 ]
  to:@return
sum: scope:[sum]  from main::@1
  [26] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ]
  [27] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ]
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [28] return  [ sum::return#0 ]
  to:@return

Created 1 initial phi equivalence classes
Coalesced [22] main::i#5 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@5
Block Sequence Planned @begin @end main main::@1 main::@3 main::@4 main::@return sum2 sum2::@return sum sum::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 ) [ main::i#2 ]
  [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ]
  [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ]
  [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ]
  [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
  [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ]
  [8] call sum param-assignment [ main::i#2 sum::return#0 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
  [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ]
  [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ]
  [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ]
  [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ]
  [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
  [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ]
  [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
  [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ]
  [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@4
  [21] return  [ ]
  to:@return
sum2: scope:[sum2]  from main::@3
  [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ]
  [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ]
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  [24] return  [ sum2::return#0 ]
  to:@return
sum: scope:[sum]  from main::@1
  [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ]
  [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ]
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [27] return  [ sum::return#0 ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@3 dominated by  @begin main::@1 main::@3 main 
main::@4 dominated by  @begin main::@1 main::@4 main::@3 main 
main::@return dominated by  main::@return @begin main::@1 main::@4 main::@3 main 
sum2 dominated by  sum2 @begin main::@1 main::@3 main 
sum2::@return dominated by  sum2 @begin sum2::@return main::@1 main::@3 main 
sum dominated by  @begin sum main::@1 main 
sum::@return dominated by  @begin sum::@return sum main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@4 blocks: null
Populated: Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@3 main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@3 main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@3 main::@1 
Found 0 loops in scope [sum]
Found 0 loops in scope [sum2]
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@4 blocks: main::@4 main::@3 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte*) SCREEN2
(void()) main()
(byte~) main::$0 7.333333333333333
(byte~) main::$1 7.333333333333333
(byte~) main::$2 22.0
(byte~) main::$3 7.333333333333333
(byte~) main::$4 7.333333333333333
(byte~) main::$5 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 6.470588235294119
(byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
(byte~) sum::$0 4.0
(byte) sum::a
(byte) sum::a#0 4.333333333333333
(byte) sum::b
(byte) sum::b#0 6.5
(byte) sum::c
(byte) sum::c#0 6.5
(byte) sum::return
(byte) sum::return#0 4.333333333333333
(byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
(byte~) sum2::$0 4.0
(byte) sum2::a
(byte) sum2::a#0 4.333333333333333
(byte) sum2::b
(byte) sum2::b#0 6.5
(byte) sum2::c
(byte) sum2::c#0 6.5
(byte) sum2::return
(byte) sum2::return#0 4.333333333333333

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable sum::a#0 to zero page equivalence class [ sum::a#0 ]
Added variable sum::b#0 to zero page equivalence class [ sum::b#0 ]
Added variable sum::c#0 to zero page equivalence class [ sum::c#0 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable sum2::a#0 to zero page equivalence class [ sum2::a#0 ]
Added variable sum2::b#0 to zero page equivalence class [ sum2::b#0 ]
Added variable sum2::c#0 to zero page equivalence class [ sum2::c#0 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable sum2::$0 to zero page equivalence class [ sum2::$0 ]
Added variable sum2::return#0 to zero page equivalence class [ sum2::return#0 ]
Added variable sum::$0 to zero page equivalence class [ sum::$0 ]
Added variable sum::return#0 to zero page equivalence class [ sum::return#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ main::$1 ]
[ sum::a#0 ]
[ sum::b#0 ]
[ sum::c#0 ]
[ main::$2 ]
[ main::$3 ]
[ main::$4 ]
[ sum2::a#0 ]
[ sum2::b#0 ]
[ sum2::c#0 ]
[ main::$5 ]
[ sum2::$0 ]
[ sum2::return#0 ]
[ sum::$0 ]
[ sum::return#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$0 ]
Allocated zp ZP_BYTE:4 [ main::$1 ]
Allocated zp ZP_BYTE:5 [ sum::a#0 ]
Allocated zp ZP_BYTE:6 [ sum::b#0 ]
Allocated zp ZP_BYTE:7 [ sum::c#0 ]
Allocated zp ZP_BYTE:8 [ main::$2 ]
Allocated zp ZP_BYTE:9 [ main::$3 ]
Allocated zp ZP_BYTE:10 [ main::$4 ]
Allocated zp ZP_BYTE:11 [ sum2::a#0 ]
Allocated zp ZP_BYTE:12 [ sum2::b#0 ]
Allocated zp ZP_BYTE:13 [ sum2::c#0 ]
Allocated zp ZP_BYTE:14 [ main::$5 ]
Allocated zp ZP_BYTE:15 [ sum2::$0 ]
Allocated zp ZP_BYTE:16 [ sum2::return#0 ]
Allocated zp ZP_BYTE:17 [ sum::$0 ]
Allocated zp ZP_BYTE:18 [ sum::return#0 ]
INITIAL ASM
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
  jmp bend
//SEG4 @end
bend:
//SEG5 main
main: {
    .label _0 = 3
    .label _1 = 4
    .label _2 = 8
    .label _3 = 9
    .label _4 = 10
    .label _5 = 14
    .label i = 2
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp b1
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- zpby1=zpby2_plus_1 
    lda i
    clc
    adc #1
    sta _0
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- zpby1=zpby2_plus_coby1 
    lda i
    clc
    adc #2
    sta _1
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=zpby2 
    lda i
    sta sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ] -- zpby1=zpby2 
    lda _0
    sta sum.b
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=zpby2 
    lda _1
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
    jmp b3
  //SEG17 main::@3
  b3:
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ] -- zpby1=zpby2 
    lda sum.return
    sta _2
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _2
    ldx i
    sta SCREEN,x
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- zpby1=zpby2_plus_1 
    lda i
    clc
    adc #1
    sta _3
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- zpby1=zpby2_plus_coby1 
    lda i
    clc
    adc #2
    sta _4
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=zpby2 
    lda i
    sta sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ] -- zpby1=zpby2 
    lda _3
    sta sum2.b
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=zpby2 
    lda _4
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
    jmp b4
  //SEG26 main::@4
  b4:
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ] -- zpby1=zpby2 
    lda sum2.return
    sta _5
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda _5
    ldx i
    sta SCREEN2,x
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #$b
    bne b1_from_b4
    jmp breturn
  //SEG31 main::@return
  breturn:
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label _0 = 15
    .label a = 11
    .label b = 12
    .label c = 13
    .label return = 16
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- zpby1=zpby2_plus_zpby3 
    lda a
    clc
    adc b
    sta _0
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- zpby1=zpby2_plus_zpby3 
    lda _0
    clc
    adc c
    sta return
    jmp breturn
  //SEG36 sum2::@return
  breturn:
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label _0 = 17
    .label a = 5
    .label b = 6
    .label c = 7
    .label return = 18
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- zpby1=zpby2_plus_zpby3 
    lda a
    clc
    adc b
    sta _0
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- zpby1=zpby2_plus_zpby3 
    lda _0
    clc
    adc c
    sta return
    jmp breturn
  //SEG41 sum::@return
  breturn:
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::$0 ]
Statement [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ main::$3 ]
Statement [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] always clobbers reg byte a 
Statement [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$0 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ sum::a#0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ sum::b#0 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ sum::c#0 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$2 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ main::$3 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ main::$4 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ sum2::a#0 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ sum2::b#0 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ sum2::c#0 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ main::$5 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ sum2::$0 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ sum2::return#0 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ sum::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ sum::return#0 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22.97: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:8 [ main::$2 ] 22: zp ZP_BYTE:14 [ main::$5 ] 7.33: zp ZP_BYTE:3 [ main::$0 ] 7.33: zp ZP_BYTE:4 [ main::$1 ] 7.33: zp ZP_BYTE:9 [ main::$3 ] 7.33: zp ZP_BYTE:10 [ main::$4 ] 
Uplift Scope [sum] 6.5: zp ZP_BYTE:6 [ sum::b#0 ] 6.5: zp ZP_BYTE:7 [ sum::c#0 ] 4.33: zp ZP_BYTE:5 [ sum::a#0 ] 4.33: zp ZP_BYTE:18 [ sum::return#0 ] 4: zp ZP_BYTE:17 [ sum::$0 ] 
Uplift Scope [sum2] 6.5: zp ZP_BYTE:12 [ sum2::b#0 ] 6.5: zp ZP_BYTE:13 [ sum2::c#0 ] 4.33: zp ZP_BYTE:11 [ sum2::a#0 ] 4.33: zp ZP_BYTE:16 [ sum2::return#0 ] 4: zp ZP_BYTE:15 [ sum2::$0 ] 
Uplift Scope [] 

Uplifting [main] best 1012 combination reg byte y [ main::i#2 main::i#1 ] reg byte a [ main::$2 ] reg byte a [ main::$5 ] reg byte x [ main::$0 ] reg byte a [ main::$1 ] reg byte x [ main::$3 ] reg byte a [ main::$4 ] 
Uplifting [sum] best 942 combination reg byte x [ sum::b#0 ] zp ZP_BYTE:7 [ sum::c#0 ] zp ZP_BYTE:5 [ sum::a#0 ] reg byte a [ sum::return#0 ] reg byte a [ sum::$0 ] 
Uplifting [sum2] best 872 combination reg byte x [ sum2::b#0 ] zp ZP_BYTE:13 [ sum2::c#0 ] zp ZP_BYTE:11 [ sum2::a#0 ] reg byte a [ sum2::return#0 ] reg byte a [ sum2::$0 ] 
Uplifting [] best 872 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ sum::c#0 ]
Uplifting [sum] best 872 combination zp ZP_BYTE:7 [ sum::c#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ sum2::c#0 ]
Uplifting [sum2] best 872 combination zp ZP_BYTE:13 [ sum2::c#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ sum::a#0 ]
Uplifting [sum] best 872 combination zp ZP_BYTE:5 [ sum::a#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ sum2::a#0 ]
Uplifting [sum2] best 872 combination zp ZP_BYTE:11 [ sum2::a#0 ] 
Coalescing zero page register [ zp ZP_BYTE:5 [ sum::a#0 ] ] with [ zp ZP_BYTE:11 [ sum2::a#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ sum::c#0 ] ] with [ zp ZP_BYTE:13 [ sum2::c#0 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:2 [ sum::a#0 sum2::a#0 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:3 [ sum::c#0 sum2::c#0 ]
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
main_from_bbegin:
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=yby 
    sty sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
    // (byte) sum::b#0 = (byte~) main::$0  // register copy reg byte x
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=aby 
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
  //SEG17 main::@3
  b3:
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
    // (byte~) main::$2 = (byte) sum::return#0  // register copy reg byte a
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN,y
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=yby 
    sty sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
    // (byte) sum2::b#0 = (byte~) main::$3  // register copy reg byte x
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=aby 
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
  //SEG26 main::@4
  b4:
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
    // (byte~) main::$5 = (byte) sum2::return#0  // register copy reg byte a
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN2,y
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- yby=_inc_yby 
    iny
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1_from_b4
  //SEG31 main::@return
  breturn:
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label a = 2
    .label c = 3
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG36 sum2::@return
  breturn:
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label a = 2
    .label c = 3
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG41 sum::@return
  breturn:
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

Replacing label b1_from_b4 with b1
Removing instruction main_from_bbegin:
Removing instruction b1_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
bend:
//SEG5 main
main: {
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=yby 
    sty sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
    // (byte) sum::b#0 = (byte~) main::$0  // register copy reg byte x
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=aby 
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
  //SEG17 main::@3
  b3:
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
    // (byte~) main::$2 = (byte) sum::return#0  // register copy reg byte a
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN,y
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=yby 
    sty sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
    // (byte) sum2::b#0 = (byte~) main::$3  // register copy reg byte x
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=aby 
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
  //SEG26 main::@4
  b4:
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
    // (byte~) main::$5 = (byte) sum2::return#0  // register copy reg byte a
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN2,y
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- yby=_inc_yby 
    iny
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG31 main::@return
  breturn:
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label a = 2
    .label c = 3
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG36 sum2::@return
  breturn:
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label a = 2
    .label c = 3
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG41 sum::@return
  breturn:
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=yby 
    sty sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
    // (byte) sum::b#0 = (byte~) main::$0  // register copy reg byte x
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=aby 
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
  //SEG17 main::@3
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
    // (byte~) main::$2 = (byte) sum::return#0  // register copy reg byte a
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN,y
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=yby 
    sty sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
    // (byte) sum2::b#0 = (byte~) main::$3  // register copy reg byte x
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=aby 
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
  //SEG26 main::@4
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
    // (byte~) main::$5 = (byte) sum2::return#0  // register copy reg byte a
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN2,y
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- yby=_inc_yby 
    iny
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG31 main::@return
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label a = 2
    .label c = 3
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG36 sum2::@return
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label a = 2
    .label c = 3
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG41 sum::@return
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- yby=coby1 
    ldy #0
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=yby 
    sty sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
    // (byte) sum::b#0 = (byte~) main::$0  // register copy reg byte x
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=aby 
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
  //SEG17 main::@3
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
    // (byte~) main::$2 = (byte) sum::return#0  // register copy reg byte a
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN,y
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=yby 
    sty sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
    // (byte) sum2::b#0 = (byte~) main::$3  // register copy reg byte x
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=aby 
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
  //SEG26 main::@4
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
    // (byte~) main::$5 = (byte) sum2::return#0  // register copy reg byte a
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN2,y
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- yby=_inc_yby 
    iny
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG31 main::@return
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label a = 2
    .label c = 3
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG36 sum2::@return
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label a = 2
    .label c = 3
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG41 sum::@return
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(byte*) SCREEN2
(const byte*) SCREEN2#0 SCREEN2 = (word) 1024+(byte) 40
(void()) main()
(byte~) main::$0 reg byte x 7.333333333333333
(byte~) main::$1 reg byte a 7.333333333333333
(byte~) main::$2 reg byte a 22.0
(byte~) main::$3 reg byte x 7.333333333333333
(byte~) main::$4 reg byte a 7.333333333333333
(byte~) main::$5 reg byte a 22.0
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 6.470588235294119
(byte()) sum((byte) sum::a , (byte) sum::b , (byte) sum::c)
(byte~) sum::$0 reg byte a 4.0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0 a zp ZP_BYTE:2 4.333333333333333
(byte) sum::b
(byte) sum::b#0 reg byte x 6.5
(byte) sum::c
(byte) sum::c#0 c zp ZP_BYTE:3 6.5
(byte) sum::return
(byte) sum::return#0 reg byte a 4.333333333333333
(byte()) sum2((byte) sum2::a , (byte) sum2::b , (byte) sum2::c)
(byte~) sum2::$0 reg byte a 4.0
(label) sum2::@return
(byte) sum2::a
(byte) sum2::a#0 a zp ZP_BYTE:2 4.333333333333333
(byte) sum2::b
(byte) sum2::b#0 reg byte x 6.5
(byte) sum2::c
(byte) sum2::c#0 c zp ZP_BYTE:3 6.5
(byte) sum2::return
(byte) sum2::return#0 reg byte a 4.333333333333333

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::$0 ]
reg byte a [ main::$1 ]
zp ZP_BYTE:2 [ sum::a#0 sum2::a#0 ]
reg byte x [ sum::b#0 ]
zp ZP_BYTE:3 [ sum::c#0 sum2::c#0 ]
reg byte a [ main::$2 ]
reg byte x [ main::$3 ]
reg byte a [ main::$4 ]
reg byte x [ sum2::b#0 ]
reg byte a [ main::$5 ]
reg byte a [ sum2::$0 ]
reg byte a [ sum2::return#0 ]
reg byte a [ sum::$0 ]
reg byte a [ sum::return#0 ]

FINAL CODE
//SEG0 Global Constants & labels
  .const SCREEN = $400
  .const SCREEN2 = $400+$28
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
//SEG3 [1] phi from @begin to main [phi:@begin->main]
  jsr main
//SEG4 @end
//SEG5 main
main: {
  //SEG6 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG7 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- yby=coby1 
    ldy #0
  //SEG8 [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
  //SEG10 main::@1
  b1:
  //SEG11 [3] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$0 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG12 [4] (byte~) main::$1 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$0 main::$1 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG13 [5] (byte) sum::a#0 ← (byte) main::i#2 [ main::i#2 main::$0 main::$1 sum::a#0 ] -- zpby1=yby 
    sty sum.a
  //SEG14 [6] (byte) sum::b#0 ← (byte~) main::$0 [ main::i#2 main::$1 sum::a#0 sum::b#0 ]
    // (byte) sum::b#0 = (byte~) main::$0  // register copy reg byte x
  //SEG15 [7] (byte) sum::c#0 ← (byte~) main::$1 [ main::i#2 sum::a#0 sum::b#0 sum::c#0 ] -- zpby1=aby 
    sta sum.c
  //SEG16 [8] call sum param-assignment [ main::i#2 sum::return#0 ]
    jsr sum
  //SEG17 main::@3
  //SEG18 [9] (byte~) main::$2 ← (byte) sum::return#0 [ main::i#2 main::$2 ]
    // (byte~) main::$2 = (byte) sum::return#0  // register copy reg byte a
  //SEG19 [10] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN,y
  //SEG20 [11] (byte~) main::$3 ← (byte) main::i#2 + (byte) 1 [ main::i#2 main::$3 ] -- xby=yby_plus_1 
    tya
    tax
    inx
  //SEG21 [12] (byte~) main::$4 ← (byte) main::i#2 + (byte) 2 [ main::i#2 main::$3 main::$4 ] -- aby=yby_plus_coby1 
    tya
    clc
    adc #2
  //SEG22 [13] (byte) sum2::a#0 ← (byte) main::i#2 [ main::i#2 main::$3 main::$4 sum2::a#0 ] -- zpby1=yby 
    sty sum2.a
  //SEG23 [14] (byte) sum2::b#0 ← (byte~) main::$3 [ main::i#2 main::$4 sum2::a#0 sum2::b#0 ]
    // (byte) sum2::b#0 = (byte~) main::$3  // register copy reg byte x
  //SEG24 [15] (byte) sum2::c#0 ← (byte~) main::$4 [ main::i#2 sum2::a#0 sum2::b#0 sum2::c#0 ] -- zpby1=aby 
    sta sum2.c
  //SEG25 [16] call sum2 param-assignment [ main::i#2 sum2::return#0 ]
    jsr sum2
  //SEG26 main::@4
  //SEG27 [17] (byte~) main::$5 ← (byte) sum2::return#0 [ main::i#2 main::$5 ]
    // (byte~) main::$5 = (byte) sum2::return#0  // register copy reg byte a
  //SEG28 [18] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5 [ main::i#2 ] -- cowo1_staridx_yby=aby 
    sta SCREEN2,y
  //SEG29 [19] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- yby=_inc_yby 
    iny
  //SEG30 [20] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] -- yby_neq_coby1_then_la1 
    cpy #$b
    bne b1
  //SEG31 main::@return
  //SEG32 [21] return  [ ]
    rts
}
//SEG33 sum2
sum2: {
    .label a = 2
    .label c = 3
  //SEG34 [22] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0 [ sum2::c#0 sum2::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG35 [23] (byte) sum2::return#0 ← (byte~) sum2::$0 + (byte) sum2::c#0 [ sum2::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG36 sum2::@return
  //SEG37 [24] return  [ sum2::return#0 ]
    rts
}
//SEG38 sum
sum: {
    .label a = 2
    .label c = 3
  //SEG39 [25] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0 [ sum::c#0 sum::$0 ] -- aby=zpby1_plus_xby 
    txa
    clc
    adc a
  //SEG40 [26] (byte) sum::return#0 ← (byte~) sum::$0 + (byte) sum::c#0 [ sum::return#0 ] -- aby=aby_plus_zpby1 
    clc
    adc c
  //SEG41 sum::@return
  //SEG42 [27] return  [ sum::return#0 ]
    rts
}

