__constant char *COLORS = (char *) 55296
__constant char COLS[] = { 1, 2, 3, 4, 5, 7 }
__constant char FILL = $e6
__constant char *SCREEN = (char *) 1024
__constant char XPOS[] = { 5, $f, 6, $22, $15, $1f }
__constant char YPOS[] = { 5, 8, $e, 2, $11, $16 }
void animate()
char animate::$0 // reg byte x 202.0
char animate::$12 // reg byte x 202.0
char animate::$15 // reg byte x 202.0
char animate::$18 // reg byte x 202.0
char animate::$3 // reg byte x 202.0
char animate::$6 // reg byte a 202.0
char animate::$9 // reg byte a 202.0
char findcol(char x , char y)
char findcol::$11 // reg byte a 2.0000000002E10
char findcol::$9 // reg byte a 2.0000000002E10
char findcol::diff
char findcol::diff#1 // reg byte y 2.0000000002E10
char findcol::diff#2 // reg byte y 2.0000000002E10
char findcol::diff#3 // reg byte a 2.0000000002E10
char findcol::diff#4 // reg byte a 2.0000000002E10
char findcol::diff#5 // reg byte y 1.0000000001E10
char findcol::diff#7 // reg byte a 1.3333333334666666E10
char findcol::i
char findcol::i#1 // i zp[1]:3 1.0000000001E10
char findcol::i#10 // i zp[1]:3 3.0000000003E9
char findcol::mincol
char findcol::mincol#1 // reg byte x 2.0000000002E10
char findcol::mincol#10 // reg byte x 1.6666666668333335E9
char findcol::mincol#4 // reg byte x 1.0000000001E10
char findcol::mindiff
char findcol::mindiff#10 // mindiff zp[1]:2 1.7647058825294118E9
char findcol::mindiff#12 // reg byte a 1.50000000015E10
char findcol::mindiff#13 // mindiff zp[1]:2 2.0000000002E10
char findcol::mindiff#15 // reg byte a 2.0000000002E10
char findcol::return
char findcol::return#0 // reg byte a 200002.0
char findcol::return#3 // reg byte x 3.333366667333333E9
char findcol::x
char findcol::x#0 // x zp[1]:7 1.6000040002E9
char findcol::xp
char findcol::xp#0 // xp zp[1]:4 1.0000000001E10
char findcol::y
char findcol::y#0 // y zp[1]:6 1.6666708335416665E9
char findcol::yp
char findcol::yp#0 // yp zp[1]:5 6.250000000625E9
void initscreen()
char *initscreen::screen
char *initscreen::screen#1 // screen zp[2]:8 202.0
char *initscreen::screen#2 // screen zp[2]:8 134.66666666666666
void main()
__constant char numpoints = 6
void render()
char render::col
char render::col#0 // reg byte a 200002.0
char *render::colline
char *render::colline#1 // colline zp[2]:8 6667.333333333333
char *render::colline#5 // colline zp[2]:8 12000.300000000001
char render::x
char render::x#1 // x zp[1]:7 150001.5
char render::x#2 // x zp[1]:7 57143.42857142857
char render::y
char render::y#1 // y zp[1]:6 15001.5
char render::y#4 // y zp[1]:6 10909.363636363636

zp[1]:6 [ render::y#4 render::y#1 findcol::y#0 ]
zp[2]:8 [ render::colline#5 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp[1]:7 [ render::x#2 render::x#1 findcol::x#0 ]
zp[1]:3 [ findcol::i#10 findcol::i#1 ]
zp[1]:2 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte x [ findcol::return#3 findcol::mincol#10 findcol::mincol#4 findcol::mincol#1 ]
reg byte y [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte a [ findcol::mindiff#12 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#15 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte x [ animate::$15 ]
reg byte x [ animate::$18 ]
zp[1]:4 [ findcol::xp#0 ]
zp[1]:5 [ findcol::yp#0 ]
reg byte a [ findcol::$9 ]
reg byte a [ findcol::$11 ]
