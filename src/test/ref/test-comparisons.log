Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$13 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
De-inlining cast (byte*)memcpy::source
De-inlining cast (word)memmove::destination
De-inlining cast (word)memmove::source
De-inlining cast (byte*)memmove::source
De-inlining cast (byte*)memmove::destination
De-inlining cast (byte*)memset::str
De-inlining cast (signed word)bsearch16u::key
De-inlining cast (signed word)*(bsearch16u::pivot)
De-inlining cast (byte)uctoa::value
De-inlining cast (byte)utoa::value
De-inlining cast (byte)ultoa::value
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strupr::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) @42
Culled Empty Block (label) @43
Culled Empty Block (label) main::@42
Culled Empty Block (label) main::@44
Culled Empty Block (label) @44

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@18

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@18: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@45

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from printu::@2
  (byte*) print_char_cursor#120 ← phi( printu::@2/(byte*) print_char_cursor#40 )
  (byte*) print_str::str#5 ← phi( printu::@2/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@7
  (byte*) print_char_cursor#93 ← phi( print_str/(byte*) print_char_cursor#120 print_str::@7/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@7/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#92 ← phi( print_str::@1/(byte*) print_char_cursor#93 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@7
print_str::@7: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#47 ← phi( print_str::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#47
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#48 ← phi( print_str::@1/(byte*) print_char_cursor#93 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#48
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@49 main::@54 main::@59 main::@64 main::@69
  (byte*) print_char_cursor#94 ← phi( main::@49/(byte*) print_char_cursor#16 main::@54/(byte*) print_char_cursor#21 main::@59/(byte*) print_char_cursor#26 main::@64/(byte*) print_char_cursor#31 main::@69/(byte*) print_char_cursor#36 )
  (byte*) print_line_cursor#25 ← phi( main::@49/(byte*) print_line_cursor#27 main::@54/(byte*) print_line_cursor#28 main::@59/(byte*) print_line_cursor#29 main::@64/(byte*) print_line_cursor#30 main::@69/(byte*) print_line_cursor#31 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#49 ← phi( print_ln/(byte*) print_char_cursor#94 print_ln::@1/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#13 ← phi( print_ln/(byte*) print_line_cursor#25 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#13 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#49
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#14 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#14
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#50 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#15 ← phi( print_ln::@2/(byte*) print_line_cursor#14 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#50
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from printu::@1 printu::@3
  (byte*) print_char_cursor#95 ← phi( printu::@1/(byte*) print_char_cursor#39 printu::@3/(byte*) print_char_cursor#41 )
  (byte) print_uchar::b#2 ← phi( printu::@1/(byte) print_uchar::b#0 printu::@3/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#51 ← phi( print_uchar/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#51
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#52 ← phi( print_uchar::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#52
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#53 ← phi( print_uchar::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#53
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1 printu printu::@4 printu::@5
  (byte*) print_char_cursor#54 ← phi( print_str::@2/(byte*) print_char_cursor#92 print_uchar/(byte*) print_char_cursor#95 print_uchar::@1/(byte*) print_char_cursor#5 printu/(byte*) print_char_cursor#96 printu::@4/(byte*) print_char_cursor#42 printu::@5/(byte*) print_char_cursor#43 )
  (byte) print_char::ch#6 ← phi( print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 printu/(byte) print_char::ch#3 printu::@4/(byte) print_char::ch#4 printu::@5/(byte) print_char::ch#5 )
  *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6
  (byte*) print_char_cursor#8 ← ++ (byte*) print_char_cursor#54
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#55 ← phi( print_char/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#55
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#10 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#56 ← phi( print_cls::@1/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#16 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#56
  return 
  to:@return

(void()) main()
main: scope:[main]  from @45
  (byte*) print_char_cursor#97 ← phi( @45/(byte*) print_char_cursor#119 )
  (byte*) print_line_cursor#26 ← phi( @45/(byte*) print_line_cursor#33 )
  (byte*) print_screen#3 ← phi( @45/(byte*) print_screen#4 )
  call print_cls 
  to:main::@45
main::@45: scope:[main]  from main
  (byte*) print_char_cursor#57 ← phi( main/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#17 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#57
  (byte) main::a#0 ← (byte) 7
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@45 main::@70
  (byte*) print_line_cursor#84 ← phi( main::@45/(byte*) print_line_cursor#5 main::@70/(byte*) print_line_cursor#10 )
  (byte) main::i#42 ← phi( main::@45/(byte) main::i#0 main::@70/(byte) main::i#1 )
  (byte*) print_char_cursor#121 ← phi( main::@45/(byte*) print_char_cursor#12 main::@70/(byte*) print_char_cursor#37 )
  (byte) main::a#2 ← phi( main::@45/(byte) main::a#0 main::@70/(byte) main::a#1 )
  (byte) main::r#0 ← (byte) 0
  (number~) main::$1 ← (number) $ce - (byte) main::a#2
  (byte) main::b#0 ← (number~) main::$1
  (byte) main::r#1 ← (byte) '-'
  (bool~) main::$2 ← (byte) main::a#2 < (byte) main::b#0
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@2
  to:main::@22
main::@2: scope:[main]  from main::@1 main::@22
  (byte*) print_line_cursor#79 ← phi( main::@1/(byte*) print_line_cursor#84 main::@22/(byte*) print_line_cursor#85 )
  (byte) main::i#35 ← phi( main::@1/(byte) main::i#42 main::@22/(byte) main::i#43 )
  (byte*) print_char_cursor#98 ← phi( main::@1/(byte*) print_char_cursor#121 main::@22/(byte*) print_char_cursor#122 )
  (byte) main::r#41 ← phi( main::@1/(byte) main::r#1 main::@22/(byte) main::r#3 )
  (byte) main::b#1 ← phi( main::@1/(byte) main::b#0 main::@22/(byte) main::b#10 )
  (byte) main::a#3 ← phi( main::@1/(byte) main::a#2 main::@22/(byte) main::a#43 )
  (byte) printu::a#0 ← (byte) main::a#3
  (byte*) printu::op#0 ← (const byte*) main::op
  (byte) printu::b#0 ← (byte) main::b#1
  (byte) printu::res#0 ← (byte) main::r#41
  call printu 
  to:main::@46
main::@46: scope:[main]  from main::@2
  (byte) main::b#48 ← phi( main::@2/(byte) main::b#1 )
  (byte*) print_line_cursor#70 ← phi( main::@2/(byte*) print_line_cursor#79 )
  (byte) main::i#25 ← phi( main::@2/(byte) main::i#35 )
  (byte) main::a#4 ← phi( main::@2/(byte) main::a#3 )
  (byte*) print_char_cursor#58 ← phi( main::@2/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#58
  (byte) main::r#2 ← (byte) '-'
  (bool~) main::$5 ← (byte) main::a#4 < (number) $37
  (bool~) main::$6 ← ! (bool~) main::$5
  if((bool~) main::$6) goto main::@3
  to:main::@23
main::@22: scope:[main]  from main::@1
  (byte*) print_line_cursor#85 ← phi( main::@1/(byte*) print_line_cursor#84 )
  (byte) main::i#43 ← phi( main::@1/(byte) main::i#42 )
  (byte*) print_char_cursor#122 ← phi( main::@1/(byte*) print_char_cursor#121 )
  (byte) main::b#10 ← phi( main::@1/(byte) main::b#0 )
  (byte) main::a#43 ← phi( main::@1/(byte) main::a#2 )
  (byte) main::r#3 ← (byte) '+'
  to:main::@2
main::@3: scope:[main]  from main::@23 main::@46
  (byte) main::b#43 ← phi( main::@23/(byte) main::b#47 main::@46/(byte) main::b#48 )
  (byte*) print_line_cursor#64 ← phi( main::@23/(byte*) print_line_cursor#69 main::@46/(byte*) print_line_cursor#70 )
  (byte) main::i#13 ← phi( main::@23/(byte) main::i#24 main::@46/(byte) main::i#25 )
  (byte*) print_char_cursor#99 ← phi( main::@23/(byte*) print_char_cursor#123 main::@46/(byte*) print_char_cursor#13 )
  (byte) main::r#42 ← phi( main::@23/(byte) main::r#5 main::@46/(byte) main::r#2 )
  (byte) main::a#5 ← phi( main::@23/(byte) main::a#44 main::@46/(byte) main::a#4 )
  (byte) printu::a#1 ← (byte) main::a#5
  (byte*) printu::op#1 ← (const byte*) main::op1
  (byte) printu::b#1 ← (number) $37
  (byte) printu::res#1 ← (byte) main::r#42
  call printu 
  to:main::@47
main::@47: scope:[main]  from main::@3
  (byte) main::b#36 ← phi( main::@3/(byte) main::b#43 )
  (byte*) print_line_cursor#55 ← phi( main::@3/(byte*) print_line_cursor#64 )
  (byte) main::i#2 ← phi( main::@3/(byte) main::i#13 )
  (byte) main::a#6 ← phi( main::@3/(byte) main::a#5 )
  (byte*) print_char_cursor#59 ← phi( main::@3/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#59
  (byte) main::r#4 ← (byte) '-'
  (bool~) main::$8 ← (byte) main::a#6 < *((const byte*) main::cs + (byte) main::i#2)
  (bool~) main::$9 ← ! (bool~) main::$8
  if((bool~) main::$9) goto main::@4
  to:main::@24
main::@23: scope:[main]  from main::@46
  (byte) main::b#47 ← phi( main::@46/(byte) main::b#48 )
  (byte*) print_line_cursor#69 ← phi( main::@46/(byte*) print_line_cursor#70 )
  (byte) main::i#24 ← phi( main::@46/(byte) main::i#25 )
  (byte*) print_char_cursor#123 ← phi( main::@46/(byte*) print_char_cursor#13 )
  (byte) main::a#44 ← phi( main::@46/(byte) main::a#4 )
  (byte) main::r#5 ← (byte) '+'
  to:main::@3
main::@4: scope:[main]  from main::@24 main::@47
  (byte) main::b#31 ← phi( main::@24/(byte) main::b#35 main::@47/(byte) main::b#36 )
  (byte*) print_line_cursor#49 ← phi( main::@24/(byte*) print_line_cursor#54 main::@47/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#100 ← phi( main::@24/(byte*) print_char_cursor#124 main::@47/(byte*) print_char_cursor#14 )
  (byte) main::r#43 ← phi( main::@24/(byte) main::r#7 main::@47/(byte) main::r#4 )
  (byte) main::i#3 ← phi( main::@24/(byte) main::i#14 main::@47/(byte) main::i#2 )
  (byte) main::a#7 ← phi( main::@24/(byte) main::a#45 main::@47/(byte) main::a#6 )
  (byte) printu::a#2 ← (byte) main::a#7
  (byte*) printu::op#2 ← (const byte*) main::op2
  (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#3)
  (byte) printu::res#2 ← (byte) main::r#43
  call printu 
  to:main::@48
main::@48: scope:[main]  from main::@4
  (byte) main::i#61 ← phi( main::@4/(byte) main::i#3 )
  (byte) main::b#24 ← phi( main::@4/(byte) main::b#31 )
  (byte*) print_line_cursor#40 ← phi( main::@4/(byte*) print_line_cursor#49 )
  (byte) main::a#8 ← phi( main::@4/(byte) main::a#7 )
  (byte*) print_char_cursor#60 ← phi( main::@4/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#60
  (byte) main::r#6 ← (byte) '-'
  (bool~) main::$11 ← (byte) main::a#8 < (byte) main::a#8
  (bool~) main::$12 ← ! (bool~) main::$11
  if((bool~) main::$12) goto main::@5
  to:main::@25
main::@24: scope:[main]  from main::@47
  (byte) main::b#35 ← phi( main::@47/(byte) main::b#36 )
  (byte*) print_line_cursor#54 ← phi( main::@47/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#124 ← phi( main::@47/(byte*) print_char_cursor#14 )
  (byte) main::i#14 ← phi( main::@47/(byte) main::i#2 )
  (byte) main::a#45 ← phi( main::@47/(byte) main::a#6 )
  (byte) main::r#7 ← (byte) '+'
  to:main::@4
main::@5: scope:[main]  from main::@25 main::@48
  (byte) main::i#56 ← phi( main::@25/(byte) main::i#60 main::@48/(byte) main::i#61 )
  (byte) main::b#19 ← phi( main::@25/(byte) main::b#23 main::@48/(byte) main::b#24 )
  (byte*) print_line_cursor#34 ← phi( main::@25/(byte*) print_line_cursor#39 main::@48/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#101 ← phi( main::@25/(byte*) print_char_cursor#125 main::@48/(byte*) print_char_cursor#15 )
  (byte) main::r#44 ← phi( main::@25/(byte) main::r#9 main::@48/(byte) main::r#6 )
  (byte) main::a#9 ← phi( main::@25/(byte) main::a#46 main::@48/(byte) main::a#8 )
  (byte) printu::a#3 ← (byte) main::a#9
  (byte*) printu::op#3 ← (const byte*) main::op3
  (byte) printu::b#3 ← (byte) main::a#9
  (byte) printu::res#3 ← (byte) main::r#44
  call printu 
  to:main::@49
main::@49: scope:[main]  from main::@5
  (byte) main::i#52 ← phi( main::@5/(byte) main::i#56 )
  (byte) main::b#11 ← phi( main::@5/(byte) main::b#19 )
  (byte) main::a#47 ← phi( main::@5/(byte) main::a#9 )
  (byte*) print_line_cursor#27 ← phi( main::@5/(byte*) print_line_cursor#34 )
  (byte*) print_char_cursor#61 ← phi( main::@5/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#61
  call print_ln 
  to:main::@50
main::@50: scope:[main]  from main::@49
  (byte) main::i#45 ← phi( main::@49/(byte) main::i#52 )
  (byte) main::b#2 ← phi( main::@49/(byte) main::b#11 )
  (byte) main::a#10 ← phi( main::@49/(byte) main::a#47 )
  (byte*) print_char_cursor#62 ← phi( main::@49/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#18 ← phi( main::@49/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#62
  (byte) main::r#8 ← (byte) '-'
  (bool~) main::$15 ← (byte) main::a#10 > (byte) main::b#2
  (bool~) main::$16 ← ! (bool~) main::$15
  if((bool~) main::$16) goto main::@6
  to:main::@26
main::@25: scope:[main]  from main::@48
  (byte) main::i#60 ← phi( main::@48/(byte) main::i#61 )
  (byte) main::b#23 ← phi( main::@48/(byte) main::b#24 )
  (byte*) print_line_cursor#39 ← phi( main::@48/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#125 ← phi( main::@48/(byte*) print_char_cursor#15 )
  (byte) main::a#46 ← phi( main::@48/(byte) main::a#8 )
  (byte) main::r#9 ← (byte) '+'
  to:main::@5
main::@6: scope:[main]  from main::@26 main::@50
  (byte*) print_line_cursor#80 ← phi( main::@26/(byte*) print_line_cursor#86 main::@50/(byte*) print_line_cursor#6 )
  (byte) main::i#36 ← phi( main::@26/(byte) main::i#44 main::@50/(byte) main::i#45 )
  (byte*) print_char_cursor#102 ← phi( main::@26/(byte*) print_char_cursor#126 main::@50/(byte*) print_char_cursor#17 )
  (byte) main::r#45 ← phi( main::@26/(byte) main::r#11 main::@50/(byte) main::r#8 )
  (byte) main::b#3 ← phi( main::@26/(byte) main::b#12 main::@50/(byte) main::b#2 )
  (byte) main::a#11 ← phi( main::@26/(byte) main::a#48 main::@50/(byte) main::a#10 )
  (byte) printu::a#4 ← (byte) main::a#11
  (byte*) printu::op#4 ← (const byte*) main::op4
  (byte) printu::b#4 ← (byte) main::b#3
  (byte) printu::res#4 ← (byte) main::r#45
  call printu 
  to:main::@51
main::@51: scope:[main]  from main::@6
  (byte) main::b#50 ← phi( main::@6/(byte) main::b#3 )
  (byte*) print_line_cursor#72 ← phi( main::@6/(byte*) print_line_cursor#80 )
  (byte) main::i#27 ← phi( main::@6/(byte) main::i#36 )
  (byte) main::a#12 ← phi( main::@6/(byte) main::a#11 )
  (byte*) print_char_cursor#63 ← phi( main::@6/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#63
  (byte) main::r#10 ← (byte) '-'
  (bool~) main::$18 ← (byte) main::a#12 > (number) $37
  (bool~) main::$19 ← ! (bool~) main::$18
  if((bool~) main::$19) goto main::@7
  to:main::@27
main::@26: scope:[main]  from main::@50
  (byte*) print_line_cursor#86 ← phi( main::@50/(byte*) print_line_cursor#6 )
  (byte) main::i#44 ← phi( main::@50/(byte) main::i#45 )
  (byte*) print_char_cursor#126 ← phi( main::@50/(byte*) print_char_cursor#17 )
  (byte) main::b#12 ← phi( main::@50/(byte) main::b#2 )
  (byte) main::a#48 ← phi( main::@50/(byte) main::a#10 )
  (byte) main::r#11 ← (byte) '+'
  to:main::@6
main::@7: scope:[main]  from main::@27 main::@51
  (byte) main::b#44 ← phi( main::@27/(byte) main::b#49 main::@51/(byte) main::b#50 )
  (byte*) print_line_cursor#65 ← phi( main::@27/(byte*) print_line_cursor#71 main::@51/(byte*) print_line_cursor#72 )
  (byte) main::i#15 ← phi( main::@27/(byte) main::i#26 main::@51/(byte) main::i#27 )
  (byte*) print_char_cursor#103 ← phi( main::@27/(byte*) print_char_cursor#127 main::@51/(byte*) print_char_cursor#18 )
  (byte) main::r#46 ← phi( main::@27/(byte) main::r#13 main::@51/(byte) main::r#10 )
  (byte) main::a#13 ← phi( main::@27/(byte) main::a#49 main::@51/(byte) main::a#12 )
  (byte) printu::a#5 ← (byte) main::a#13
  (byte*) printu::op#5 ← (const byte*) main::op5
  (byte) printu::b#5 ← (number) $37
  (byte) printu::res#5 ← (byte) main::r#46
  call printu 
  to:main::@52
main::@52: scope:[main]  from main::@7
  (byte) main::b#38 ← phi( main::@7/(byte) main::b#44 )
  (byte*) print_line_cursor#57 ← phi( main::@7/(byte*) print_line_cursor#65 )
  (byte) main::i#4 ← phi( main::@7/(byte) main::i#15 )
  (byte) main::a#14 ← phi( main::@7/(byte) main::a#13 )
  (byte*) print_char_cursor#64 ← phi( main::@7/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#64
  (byte) main::r#12 ← (byte) '-'
  (bool~) main::$21 ← (byte) main::a#14 > *((const byte*) main::cs + (byte) main::i#4)
  (bool~) main::$22 ← ! (bool~) main::$21
  if((bool~) main::$22) goto main::@8
  to:main::@28
main::@27: scope:[main]  from main::@51
  (byte) main::b#49 ← phi( main::@51/(byte) main::b#50 )
  (byte*) print_line_cursor#71 ← phi( main::@51/(byte*) print_line_cursor#72 )
  (byte) main::i#26 ← phi( main::@51/(byte) main::i#27 )
  (byte*) print_char_cursor#127 ← phi( main::@51/(byte*) print_char_cursor#18 )
  (byte) main::a#49 ← phi( main::@51/(byte) main::a#12 )
  (byte) main::r#13 ← (byte) '+'
  to:main::@7
main::@8: scope:[main]  from main::@28 main::@52
  (byte) main::b#32 ← phi( main::@28/(byte) main::b#37 main::@52/(byte) main::b#38 )
  (byte*) print_line_cursor#50 ← phi( main::@28/(byte*) print_line_cursor#56 main::@52/(byte*) print_line_cursor#57 )
  (byte*) print_char_cursor#104 ← phi( main::@28/(byte*) print_char_cursor#128 main::@52/(byte*) print_char_cursor#19 )
  (byte) main::r#47 ← phi( main::@28/(byte) main::r#15 main::@52/(byte) main::r#12 )
  (byte) main::i#5 ← phi( main::@28/(byte) main::i#16 main::@52/(byte) main::i#4 )
  (byte) main::a#15 ← phi( main::@28/(byte) main::a#50 main::@52/(byte) main::a#14 )
  (byte) printu::a#6 ← (byte) main::a#15
  (byte*) printu::op#6 ← (const byte*) main::op6
  (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#5)
  (byte) printu::res#6 ← (byte) main::r#47
  call printu 
  to:main::@53
main::@53: scope:[main]  from main::@8
  (byte) main::i#63 ← phi( main::@8/(byte) main::i#5 )
  (byte) main::b#26 ← phi( main::@8/(byte) main::b#32 )
  (byte*) print_line_cursor#42 ← phi( main::@8/(byte*) print_line_cursor#50 )
  (byte) main::a#16 ← phi( main::@8/(byte) main::a#15 )
  (byte*) print_char_cursor#65 ← phi( main::@8/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#65
  (byte) main::r#14 ← (byte) '-'
  (bool~) main::$24 ← (byte) main::a#16 > (byte) main::a#16
  (bool~) main::$25 ← ! (bool~) main::$24
  if((bool~) main::$25) goto main::@9
  to:main::@29
main::@28: scope:[main]  from main::@52
  (byte) main::b#37 ← phi( main::@52/(byte) main::b#38 )
  (byte*) print_line_cursor#56 ← phi( main::@52/(byte*) print_line_cursor#57 )
  (byte*) print_char_cursor#128 ← phi( main::@52/(byte*) print_char_cursor#19 )
  (byte) main::i#16 ← phi( main::@52/(byte) main::i#4 )
  (byte) main::a#50 ← phi( main::@52/(byte) main::a#14 )
  (byte) main::r#15 ← (byte) '+'
  to:main::@8
main::@9: scope:[main]  from main::@29 main::@53
  (byte) main::i#57 ← phi( main::@29/(byte) main::i#62 main::@53/(byte) main::i#63 )
  (byte) main::b#20 ← phi( main::@29/(byte) main::b#25 main::@53/(byte) main::b#26 )
  (byte*) print_line_cursor#35 ← phi( main::@29/(byte*) print_line_cursor#41 main::@53/(byte*) print_line_cursor#42 )
  (byte*) print_char_cursor#105 ← phi( main::@29/(byte*) print_char_cursor#129 main::@53/(byte*) print_char_cursor#20 )
  (byte) main::r#48 ← phi( main::@29/(byte) main::r#17 main::@53/(byte) main::r#14 )
  (byte) main::a#17 ← phi( main::@29/(byte) main::a#51 main::@53/(byte) main::a#16 )
  (byte) printu::a#7 ← (byte) main::a#17
  (byte*) printu::op#7 ← (const byte*) main::op7
  (byte) printu::b#7 ← (byte) main::a#17
  (byte) printu::res#7 ← (byte) main::r#48
  call printu 
  to:main::@54
main::@54: scope:[main]  from main::@9
  (byte) main::i#53 ← phi( main::@9/(byte) main::i#57 )
  (byte) main::b#13 ← phi( main::@9/(byte) main::b#20 )
  (byte) main::a#52 ← phi( main::@9/(byte) main::a#17 )
  (byte*) print_line_cursor#28 ← phi( main::@9/(byte*) print_line_cursor#35 )
  (byte*) print_char_cursor#66 ← phi( main::@9/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#66
  call print_ln 
  to:main::@55
main::@55: scope:[main]  from main::@54
  (byte) main::i#47 ← phi( main::@54/(byte) main::i#53 )
  (byte) main::b#4 ← phi( main::@54/(byte) main::b#13 )
  (byte) main::a#18 ← phi( main::@54/(byte) main::a#52 )
  (byte*) print_char_cursor#67 ← phi( main::@54/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#19 ← phi( main::@54/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#67
  (byte) main::r#16 ← (byte) '-'
  (bool~) main::$28 ← (byte) main::a#18 <= (byte) main::b#4
  (bool~) main::$29 ← ! (bool~) main::$28
  if((bool~) main::$29) goto main::@10
  to:main::@30
main::@29: scope:[main]  from main::@53
  (byte) main::i#62 ← phi( main::@53/(byte) main::i#63 )
  (byte) main::b#25 ← phi( main::@53/(byte) main::b#26 )
  (byte*) print_line_cursor#41 ← phi( main::@53/(byte*) print_line_cursor#42 )
  (byte*) print_char_cursor#129 ← phi( main::@53/(byte*) print_char_cursor#20 )
  (byte) main::a#51 ← phi( main::@53/(byte) main::a#16 )
  (byte) main::r#17 ← (byte) '+'
  to:main::@9
main::@10: scope:[main]  from main::@30 main::@55
  (byte*) print_line_cursor#81 ← phi( main::@30/(byte*) print_line_cursor#87 main::@55/(byte*) print_line_cursor#7 )
  (byte) main::i#37 ← phi( main::@30/(byte) main::i#46 main::@55/(byte) main::i#47 )
  (byte*) print_char_cursor#106 ← phi( main::@30/(byte*) print_char_cursor#130 main::@55/(byte*) print_char_cursor#22 )
  (byte) main::r#49 ← phi( main::@30/(byte) main::r#19 main::@55/(byte) main::r#16 )
  (byte) main::b#5 ← phi( main::@30/(byte) main::b#14 main::@55/(byte) main::b#4 )
  (byte) main::a#19 ← phi( main::@30/(byte) main::a#53 main::@55/(byte) main::a#18 )
  (byte) printu::a#8 ← (byte) main::a#19
  (byte*) printu::op#8 ← (const byte*) main::op8
  (byte) printu::b#8 ← (byte) main::b#5
  (byte) printu::res#8 ← (byte) main::r#49
  call printu 
  to:main::@56
main::@56: scope:[main]  from main::@10
  (byte) main::b#52 ← phi( main::@10/(byte) main::b#5 )
  (byte*) print_line_cursor#74 ← phi( main::@10/(byte*) print_line_cursor#81 )
  (byte) main::i#29 ← phi( main::@10/(byte) main::i#37 )
  (byte) main::a#20 ← phi( main::@10/(byte) main::a#19 )
  (byte*) print_char_cursor#68 ← phi( main::@10/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#68
  (byte) main::r#18 ← (byte) '-'
  (bool~) main::$31 ← (byte) main::a#20 <= (number) $37
  (bool~) main::$32 ← ! (bool~) main::$31
  if((bool~) main::$32) goto main::@11
  to:main::@31
main::@30: scope:[main]  from main::@55
  (byte*) print_line_cursor#87 ← phi( main::@55/(byte*) print_line_cursor#7 )
  (byte) main::i#46 ← phi( main::@55/(byte) main::i#47 )
  (byte*) print_char_cursor#130 ← phi( main::@55/(byte*) print_char_cursor#22 )
  (byte) main::b#14 ← phi( main::@55/(byte) main::b#4 )
  (byte) main::a#53 ← phi( main::@55/(byte) main::a#18 )
  (byte) main::r#19 ← (byte) '+'
  to:main::@10
main::@11: scope:[main]  from main::@31 main::@56
  (byte) main::b#45 ← phi( main::@31/(byte) main::b#51 main::@56/(byte) main::b#52 )
  (byte*) print_line_cursor#66 ← phi( main::@31/(byte*) print_line_cursor#73 main::@56/(byte*) print_line_cursor#74 )
  (byte) main::i#17 ← phi( main::@31/(byte) main::i#28 main::@56/(byte) main::i#29 )
  (byte*) print_char_cursor#107 ← phi( main::@31/(byte*) print_char_cursor#131 main::@56/(byte*) print_char_cursor#23 )
  (byte) main::r#50 ← phi( main::@31/(byte) main::r#21 main::@56/(byte) main::r#18 )
  (byte) main::a#21 ← phi( main::@31/(byte) main::a#54 main::@56/(byte) main::a#20 )
  (byte) printu::a#9 ← (byte) main::a#21
  (byte*) printu::op#9 ← (const byte*) main::op9
  (byte) printu::b#9 ← (number) $37
  (byte) printu::res#9 ← (byte) main::r#50
  call printu 
  to:main::@57
main::@57: scope:[main]  from main::@11
  (byte) main::b#40 ← phi( main::@11/(byte) main::b#45 )
  (byte*) print_line_cursor#59 ← phi( main::@11/(byte*) print_line_cursor#66 )
  (byte) main::i#6 ← phi( main::@11/(byte) main::i#17 )
  (byte) main::a#22 ← phi( main::@11/(byte) main::a#21 )
  (byte*) print_char_cursor#69 ← phi( main::@11/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#69
  (byte) main::r#20 ← (byte) '-'
  (bool~) main::$34 ← (byte) main::a#22 <= *((const byte*) main::cs + (byte) main::i#6)
  (bool~) main::$35 ← ! (bool~) main::$34
  if((bool~) main::$35) goto main::@12
  to:main::@32
main::@31: scope:[main]  from main::@56
  (byte) main::b#51 ← phi( main::@56/(byte) main::b#52 )
  (byte*) print_line_cursor#73 ← phi( main::@56/(byte*) print_line_cursor#74 )
  (byte) main::i#28 ← phi( main::@56/(byte) main::i#29 )
  (byte*) print_char_cursor#131 ← phi( main::@56/(byte*) print_char_cursor#23 )
  (byte) main::a#54 ← phi( main::@56/(byte) main::a#20 )
  (byte) main::r#21 ← (byte) '+'
  to:main::@11
main::@12: scope:[main]  from main::@32 main::@57
  (byte) main::b#33 ← phi( main::@32/(byte) main::b#39 main::@57/(byte) main::b#40 )
  (byte*) print_line_cursor#51 ← phi( main::@32/(byte*) print_line_cursor#58 main::@57/(byte*) print_line_cursor#59 )
  (byte*) print_char_cursor#108 ← phi( main::@32/(byte*) print_char_cursor#132 main::@57/(byte*) print_char_cursor#24 )
  (byte) main::r#51 ← phi( main::@32/(byte) main::r#23 main::@57/(byte) main::r#20 )
  (byte) main::i#7 ← phi( main::@32/(byte) main::i#18 main::@57/(byte) main::i#6 )
  (byte) main::a#23 ← phi( main::@32/(byte) main::a#55 main::@57/(byte) main::a#22 )
  (byte) printu::a#10 ← (byte) main::a#23
  (byte*) printu::op#10 ← (const byte*) main::op10
  (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#7)
  (byte) printu::res#10 ← (byte) main::r#51
  call printu 
  to:main::@58
main::@58: scope:[main]  from main::@12
  (byte) main::i#65 ← phi( main::@12/(byte) main::i#7 )
  (byte) main::b#28 ← phi( main::@12/(byte) main::b#33 )
  (byte*) print_line_cursor#44 ← phi( main::@12/(byte*) print_line_cursor#51 )
  (byte) main::a#24 ← phi( main::@12/(byte) main::a#23 )
  (byte*) print_char_cursor#70 ← phi( main::@12/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#70
  (byte) main::r#22 ← (byte) '-'
  (bool~) main::$37 ← (byte) main::a#24 <= (byte) main::a#24
  (bool~) main::$38 ← ! (bool~) main::$37
  if((bool~) main::$38) goto main::@13
  to:main::@33
main::@32: scope:[main]  from main::@57
  (byte) main::b#39 ← phi( main::@57/(byte) main::b#40 )
  (byte*) print_line_cursor#58 ← phi( main::@57/(byte*) print_line_cursor#59 )
  (byte*) print_char_cursor#132 ← phi( main::@57/(byte*) print_char_cursor#24 )
  (byte) main::i#18 ← phi( main::@57/(byte) main::i#6 )
  (byte) main::a#55 ← phi( main::@57/(byte) main::a#22 )
  (byte) main::r#23 ← (byte) '+'
  to:main::@12
main::@13: scope:[main]  from main::@33 main::@58
  (byte) main::i#58 ← phi( main::@33/(byte) main::i#64 main::@58/(byte) main::i#65 )
  (byte) main::b#21 ← phi( main::@33/(byte) main::b#27 main::@58/(byte) main::b#28 )
  (byte*) print_line_cursor#36 ← phi( main::@33/(byte*) print_line_cursor#43 main::@58/(byte*) print_line_cursor#44 )
  (byte*) print_char_cursor#109 ← phi( main::@33/(byte*) print_char_cursor#133 main::@58/(byte*) print_char_cursor#25 )
  (byte) main::r#52 ← phi( main::@33/(byte) main::r#25 main::@58/(byte) main::r#22 )
  (byte) main::a#25 ← phi( main::@33/(byte) main::a#56 main::@58/(byte) main::a#24 )
  (byte) printu::a#11 ← (byte) main::a#25
  (byte*) printu::op#11 ← (const byte*) main::op11
  (byte) printu::b#11 ← (byte) main::a#25
  (byte) printu::res#11 ← (byte) main::r#52
  call printu 
  to:main::@59
main::@59: scope:[main]  from main::@13
  (byte) main::i#54 ← phi( main::@13/(byte) main::i#58 )
  (byte) main::b#15 ← phi( main::@13/(byte) main::b#21 )
  (byte) main::a#57 ← phi( main::@13/(byte) main::a#25 )
  (byte*) print_line_cursor#29 ← phi( main::@13/(byte*) print_line_cursor#36 )
  (byte*) print_char_cursor#71 ← phi( main::@13/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#71
  call print_ln 
  to:main::@60
main::@60: scope:[main]  from main::@59
  (byte) main::i#49 ← phi( main::@59/(byte) main::i#54 )
  (byte) main::b#6 ← phi( main::@59/(byte) main::b#15 )
  (byte) main::a#26 ← phi( main::@59/(byte) main::a#57 )
  (byte*) print_char_cursor#72 ← phi( main::@59/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#20 ← phi( main::@59/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#72
  (byte) main::r#24 ← (byte) '-'
  (bool~) main::$41 ← (byte) main::a#26 >= (byte) main::b#6
  (bool~) main::$42 ← ! (bool~) main::$41
  if((bool~) main::$42) goto main::@14
  to:main::@34
main::@33: scope:[main]  from main::@58
  (byte) main::i#64 ← phi( main::@58/(byte) main::i#65 )
  (byte) main::b#27 ← phi( main::@58/(byte) main::b#28 )
  (byte*) print_line_cursor#43 ← phi( main::@58/(byte*) print_line_cursor#44 )
  (byte*) print_char_cursor#133 ← phi( main::@58/(byte*) print_char_cursor#25 )
  (byte) main::a#56 ← phi( main::@58/(byte) main::a#24 )
  (byte) main::r#25 ← (byte) '+'
  to:main::@13
main::@14: scope:[main]  from main::@34 main::@60
  (byte*) print_line_cursor#82 ← phi( main::@34/(byte*) print_line_cursor#88 main::@60/(byte*) print_line_cursor#8 )
  (byte) main::i#38 ← phi( main::@34/(byte) main::i#48 main::@60/(byte) main::i#49 )
  (byte*) print_char_cursor#110 ← phi( main::@34/(byte*) print_char_cursor#134 main::@60/(byte*) print_char_cursor#27 )
  (byte) main::r#53 ← phi( main::@34/(byte) main::r#27 main::@60/(byte) main::r#24 )
  (byte) main::b#7 ← phi( main::@34/(byte) main::b#16 main::@60/(byte) main::b#6 )
  (byte) main::a#27 ← phi( main::@34/(byte) main::a#58 main::@60/(byte) main::a#26 )
  (byte) printu::a#12 ← (byte) main::a#27
  (byte*) printu::op#12 ← (const byte*) main::op12
  (byte) printu::b#12 ← (byte) main::b#7
  (byte) printu::res#12 ← (byte) main::r#53
  call printu 
  to:main::@61
main::@61: scope:[main]  from main::@14
  (byte) main::b#54 ← phi( main::@14/(byte) main::b#7 )
  (byte*) print_line_cursor#76 ← phi( main::@14/(byte*) print_line_cursor#82 )
  (byte) main::i#31 ← phi( main::@14/(byte) main::i#38 )
  (byte) main::a#28 ← phi( main::@14/(byte) main::a#27 )
  (byte*) print_char_cursor#73 ← phi( main::@14/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#73
  (byte) main::r#26 ← (byte) '-'
  (bool~) main::$44 ← (byte) main::a#28 >= (number) $37
  (bool~) main::$45 ← ! (bool~) main::$44
  if((bool~) main::$45) goto main::@15
  to:main::@35
main::@34: scope:[main]  from main::@60
  (byte*) print_line_cursor#88 ← phi( main::@60/(byte*) print_line_cursor#8 )
  (byte) main::i#48 ← phi( main::@60/(byte) main::i#49 )
  (byte*) print_char_cursor#134 ← phi( main::@60/(byte*) print_char_cursor#27 )
  (byte) main::b#16 ← phi( main::@60/(byte) main::b#6 )
  (byte) main::a#58 ← phi( main::@60/(byte) main::a#26 )
  (byte) main::r#27 ← (byte) '+'
  to:main::@14
main::@15: scope:[main]  from main::@35 main::@61
  (byte) main::b#46 ← phi( main::@35/(byte) main::b#53 main::@61/(byte) main::b#54 )
  (byte*) print_line_cursor#67 ← phi( main::@35/(byte*) print_line_cursor#75 main::@61/(byte*) print_line_cursor#76 )
  (byte) main::i#19 ← phi( main::@35/(byte) main::i#30 main::@61/(byte) main::i#31 )
  (byte*) print_char_cursor#111 ← phi( main::@35/(byte*) print_char_cursor#135 main::@61/(byte*) print_char_cursor#28 )
  (byte) main::r#54 ← phi( main::@35/(byte) main::r#29 main::@61/(byte) main::r#26 )
  (byte) main::a#29 ← phi( main::@35/(byte) main::a#59 main::@61/(byte) main::a#28 )
  (byte) printu::a#13 ← (byte) main::a#29
  (byte*) printu::op#13 ← (const byte*) main::op13
  (byte) printu::b#13 ← (number) $37
  (byte) printu::res#13 ← (byte) main::r#54
  call printu 
  to:main::@62
main::@62: scope:[main]  from main::@15
  (byte) main::b#42 ← phi( main::@15/(byte) main::b#46 )
  (byte*) print_line_cursor#61 ← phi( main::@15/(byte*) print_line_cursor#67 )
  (byte) main::i#8 ← phi( main::@15/(byte) main::i#19 )
  (byte) main::a#30 ← phi( main::@15/(byte) main::a#29 )
  (byte*) print_char_cursor#74 ← phi( main::@15/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#74
  (byte) main::r#28 ← (byte) '-'
  (bool~) main::$47 ← (byte) main::a#30 >= *((const byte*) main::cs + (byte) main::i#8)
  (bool~) main::$48 ← ! (bool~) main::$47
  if((bool~) main::$48) goto main::@16
  to:main::@36
main::@35: scope:[main]  from main::@61
  (byte) main::b#53 ← phi( main::@61/(byte) main::b#54 )
  (byte*) print_line_cursor#75 ← phi( main::@61/(byte*) print_line_cursor#76 )
  (byte) main::i#30 ← phi( main::@61/(byte) main::i#31 )
  (byte*) print_char_cursor#135 ← phi( main::@61/(byte*) print_char_cursor#28 )
  (byte) main::a#59 ← phi( main::@61/(byte) main::a#28 )
  (byte) main::r#29 ← (byte) '+'
  to:main::@15
main::@16: scope:[main]  from main::@36 main::@62
  (byte) main::b#34 ← phi( main::@36/(byte) main::b#41 main::@62/(byte) main::b#42 )
  (byte*) print_line_cursor#52 ← phi( main::@36/(byte*) print_line_cursor#60 main::@62/(byte*) print_line_cursor#61 )
  (byte*) print_char_cursor#112 ← phi( main::@36/(byte*) print_char_cursor#136 main::@62/(byte*) print_char_cursor#29 )
  (byte) main::r#55 ← phi( main::@36/(byte) main::r#31 main::@62/(byte) main::r#28 )
  (byte) main::i#9 ← phi( main::@36/(byte) main::i#20 main::@62/(byte) main::i#8 )
  (byte) main::a#31 ← phi( main::@36/(byte) main::a#60 main::@62/(byte) main::a#30 )
  (byte) printu::a#14 ← (byte) main::a#31
  (byte*) printu::op#14 ← (const byte*) main::op14
  (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#9)
  (byte) printu::res#14 ← (byte) main::r#55
  call printu 
  to:main::@63
main::@63: scope:[main]  from main::@16
  (byte) main::i#67 ← phi( main::@16/(byte) main::i#9 )
  (byte) main::b#30 ← phi( main::@16/(byte) main::b#34 )
  (byte*) print_line_cursor#46 ← phi( main::@16/(byte*) print_line_cursor#52 )
  (byte) main::a#32 ← phi( main::@16/(byte) main::a#31 )
  (byte*) print_char_cursor#75 ← phi( main::@16/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#75
  (byte) main::r#30 ← (byte) '-'
  (bool~) main::$50 ← (byte) main::a#32 >= (byte) main::a#32
  (bool~) main::$51 ← ! (bool~) main::$50
  if((bool~) main::$51) goto main::@17
  to:main::@37
main::@36: scope:[main]  from main::@62
  (byte) main::b#41 ← phi( main::@62/(byte) main::b#42 )
  (byte*) print_line_cursor#60 ← phi( main::@62/(byte*) print_line_cursor#61 )
  (byte*) print_char_cursor#136 ← phi( main::@62/(byte*) print_char_cursor#29 )
  (byte) main::i#20 ← phi( main::@62/(byte) main::i#8 )
  (byte) main::a#60 ← phi( main::@62/(byte) main::a#30 )
  (byte) main::r#31 ← (byte) '+'
  to:main::@16
main::@17: scope:[main]  from main::@37 main::@63
  (byte) main::i#59 ← phi( main::@37/(byte) main::i#66 main::@63/(byte) main::i#67 )
  (byte) main::b#22 ← phi( main::@37/(byte) main::b#29 main::@63/(byte) main::b#30 )
  (byte*) print_line_cursor#37 ← phi( main::@37/(byte*) print_line_cursor#45 main::@63/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#113 ← phi( main::@37/(byte*) print_char_cursor#137 main::@63/(byte*) print_char_cursor#30 )
  (byte) main::r#56 ← phi( main::@37/(byte) main::r#33 main::@63/(byte) main::r#30 )
  (byte) main::a#33 ← phi( main::@37/(byte) main::a#61 main::@63/(byte) main::a#32 )
  (byte) printu::a#15 ← (byte) main::a#33
  (byte*) printu::op#15 ← (const byte*) main::op15
  (byte) printu::b#15 ← (byte) main::a#33
  (byte) printu::res#15 ← (byte) main::r#56
  call printu 
  to:main::@64
main::@64: scope:[main]  from main::@17
  (byte) main::i#55 ← phi( main::@17/(byte) main::i#59 )
  (byte) main::b#17 ← phi( main::@17/(byte) main::b#22 )
  (byte) main::a#62 ← phi( main::@17/(byte) main::a#33 )
  (byte*) print_line_cursor#30 ← phi( main::@17/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#76 ← phi( main::@17/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#76
  call print_ln 
  to:main::@65
main::@65: scope:[main]  from main::@64
  (byte) main::i#51 ← phi( main::@64/(byte) main::i#55 )
  (byte) main::b#8 ← phi( main::@64/(byte) main::b#17 )
  (byte) main::a#34 ← phi( main::@64/(byte) main::a#62 )
  (byte*) print_char_cursor#77 ← phi( main::@64/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#21 ← phi( main::@64/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#21
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#77
  (byte) main::r#32 ← (byte) '-'
  (bool~) main::$54 ← (byte) main::a#34 == (byte) main::b#8
  (bool~) main::$55 ← ! (bool~) main::$54
  if((bool~) main::$55) goto main::@18
  to:main::@38
main::@37: scope:[main]  from main::@63
  (byte) main::i#66 ← phi( main::@63/(byte) main::i#67 )
  (byte) main::b#29 ← phi( main::@63/(byte) main::b#30 )
  (byte*) print_line_cursor#45 ← phi( main::@63/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#137 ← phi( main::@63/(byte*) print_char_cursor#30 )
  (byte) main::a#61 ← phi( main::@63/(byte) main::a#32 )
  (byte) main::r#33 ← (byte) '+'
  to:main::@17
main::@18: scope:[main]  from main::@38 main::@65
  (byte*) print_line_cursor#83 ← phi( main::@38/(byte*) print_line_cursor#89 main::@65/(byte*) print_line_cursor#9 )
  (byte) main::i#39 ← phi( main::@38/(byte) main::i#50 main::@65/(byte) main::i#51 )
  (byte*) print_char_cursor#114 ← phi( main::@38/(byte*) print_char_cursor#138 main::@65/(byte*) print_char_cursor#32 )
  (byte) main::r#57 ← phi( main::@38/(byte) main::r#35 main::@65/(byte) main::r#32 )
  (byte) main::b#9 ← phi( main::@38/(byte) main::b#18 main::@65/(byte) main::b#8 )
  (byte) main::a#35 ← phi( main::@38/(byte) main::a#63 main::@65/(byte) main::a#34 )
  (byte) printu::a#16 ← (byte) main::a#35
  (byte*) printu::op#16 ← (const byte*) main::op16
  (byte) printu::b#16 ← (byte) main::b#9
  (byte) printu::res#16 ← (byte) main::r#57
  call printu 
  to:main::@66
main::@66: scope:[main]  from main::@18
  (byte*) print_line_cursor#78 ← phi( main::@18/(byte*) print_line_cursor#83 )
  (byte) main::i#33 ← phi( main::@18/(byte) main::i#39 )
  (byte) main::a#36 ← phi( main::@18/(byte) main::a#35 )
  (byte*) print_char_cursor#78 ← phi( main::@18/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#78
  (byte) main::r#34 ← (byte) '-'
  (bool~) main::$57 ← (byte) main::a#36 == (number) $37
  (bool~) main::$58 ← ! (bool~) main::$57
  if((bool~) main::$58) goto main::@19
  to:main::@39
main::@38: scope:[main]  from main::@65
  (byte*) print_line_cursor#89 ← phi( main::@65/(byte*) print_line_cursor#9 )
  (byte) main::i#50 ← phi( main::@65/(byte) main::i#51 )
  (byte*) print_char_cursor#138 ← phi( main::@65/(byte*) print_char_cursor#32 )
  (byte) main::b#18 ← phi( main::@65/(byte) main::b#8 )
  (byte) main::a#63 ← phi( main::@65/(byte) main::a#34 )
  (byte) main::r#35 ← (byte) '+'
  to:main::@18
main::@19: scope:[main]  from main::@39 main::@66
  (byte*) print_line_cursor#68 ← phi( main::@39/(byte*) print_line_cursor#77 main::@66/(byte*) print_line_cursor#78 )
  (byte) main::i#21 ← phi( main::@39/(byte) main::i#32 main::@66/(byte) main::i#33 )
  (byte*) print_char_cursor#115 ← phi( main::@39/(byte*) print_char_cursor#139 main::@66/(byte*) print_char_cursor#33 )
  (byte) main::r#58 ← phi( main::@39/(byte) main::r#37 main::@66/(byte) main::r#34 )
  (byte) main::a#37 ← phi( main::@39/(byte) main::a#64 main::@66/(byte) main::a#36 )
  (byte) printu::a#17 ← (byte) main::a#37
  (byte*) printu::op#17 ← (const byte*) main::op17
  (byte) printu::b#17 ← (number) $37
  (byte) printu::res#17 ← (byte) main::r#58
  call printu 
  to:main::@67
main::@67: scope:[main]  from main::@19
  (byte*) print_line_cursor#63 ← phi( main::@19/(byte*) print_line_cursor#68 )
  (byte) main::i#10 ← phi( main::@19/(byte) main::i#21 )
  (byte) main::a#38 ← phi( main::@19/(byte) main::a#37 )
  (byte*) print_char_cursor#79 ← phi( main::@19/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#79
  (byte) main::r#36 ← (byte) '-'
  (bool~) main::$60 ← (byte) main::a#38 == *((const byte*) main::cs + (byte) main::i#10)
  (bool~) main::$61 ← ! (bool~) main::$60
  if((bool~) main::$61) goto main::@20
  to:main::@40
main::@39: scope:[main]  from main::@66
  (byte*) print_line_cursor#77 ← phi( main::@66/(byte*) print_line_cursor#78 )
  (byte) main::i#32 ← phi( main::@66/(byte) main::i#33 )
  (byte*) print_char_cursor#139 ← phi( main::@66/(byte*) print_char_cursor#33 )
  (byte) main::a#64 ← phi( main::@66/(byte) main::a#36 )
  (byte) main::r#37 ← (byte) '+'
  to:main::@19
main::@20: scope:[main]  from main::@40 main::@67
  (byte*) print_line_cursor#53 ← phi( main::@40/(byte*) print_line_cursor#62 main::@67/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#116 ← phi( main::@40/(byte*) print_char_cursor#140 main::@67/(byte*) print_char_cursor#34 )
  (byte) main::r#59 ← phi( main::@40/(byte) main::r#39 main::@67/(byte) main::r#36 )
  (byte) main::i#11 ← phi( main::@40/(byte) main::i#22 main::@67/(byte) main::i#10 )
  (byte) main::a#39 ← phi( main::@40/(byte) main::a#65 main::@67/(byte) main::a#38 )
  (byte) printu::a#18 ← (byte) main::a#39
  (byte*) printu::op#18 ← (const byte*) main::op18
  (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#11)
  (byte) printu::res#18 ← (byte) main::r#59
  call printu 
  to:main::@68
main::@68: scope:[main]  from main::@20
  (byte) main::i#41 ← phi( main::@20/(byte) main::i#11 )
  (byte*) print_line_cursor#48 ← phi( main::@20/(byte*) print_line_cursor#53 )
  (byte) main::a#40 ← phi( main::@20/(byte) main::a#39 )
  (byte*) print_char_cursor#80 ← phi( main::@20/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#80
  (byte) main::r#38 ← (byte) '-'
  (bool~) main::$63 ← (byte) main::a#40 == (byte) main::a#40
  (bool~) main::$64 ← ! (bool~) main::$63
  if((bool~) main::$64) goto main::@21
  to:main::@41
main::@40: scope:[main]  from main::@67
  (byte*) print_line_cursor#62 ← phi( main::@67/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#140 ← phi( main::@67/(byte*) print_char_cursor#34 )
  (byte) main::i#22 ← phi( main::@67/(byte) main::i#10 )
  (byte) main::a#65 ← phi( main::@67/(byte) main::a#38 )
  (byte) main::r#39 ← (byte) '+'
  to:main::@20
main::@21: scope:[main]  from main::@41 main::@68
  (byte) main::i#34 ← phi( main::@41/(byte) main::i#40 main::@68/(byte) main::i#41 )
  (byte*) print_line_cursor#38 ← phi( main::@41/(byte*) print_line_cursor#47 main::@68/(byte*) print_line_cursor#48 )
  (byte*) print_char_cursor#117 ← phi( main::@41/(byte*) print_char_cursor#141 main::@68/(byte*) print_char_cursor#35 )
  (byte) main::r#60 ← phi( main::@41/(byte) main::r#40 main::@68/(byte) main::r#38 )
  (byte) main::a#41 ← phi( main::@41/(byte) main::a#66 main::@68/(byte) main::a#40 )
  (byte) printu::a#19 ← (byte) main::a#41
  (byte*) printu::op#19 ← (const byte*) main::op19
  (byte) printu::b#19 ← (byte) main::a#41
  (byte) printu::res#19 ← (byte) main::r#60
  call printu 
  to:main::@69
main::@69: scope:[main]  from main::@21
  (byte) main::i#23 ← phi( main::@21/(byte) main::i#34 )
  (byte) main::a#67 ← phi( main::@21/(byte) main::a#41 )
  (byte*) print_line_cursor#31 ← phi( main::@21/(byte*) print_line_cursor#38 )
  (byte*) print_char_cursor#81 ← phi( main::@21/(byte*) print_char_cursor#45 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#81
  call print_ln 
  to:main::@70
main::@70: scope:[main]  from main::@69
  (byte) main::i#12 ← phi( main::@69/(byte) main::i#23 )
  (byte) main::a#42 ← phi( main::@69/(byte) main::a#67 )
  (byte*) print_char_cursor#82 ← phi( main::@69/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#22 ← phi( main::@69/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#82
  (number~) main::$67 ← (byte) main::a#42 + (number) $30
  (byte) main::a#1 ← (number~) main::$67
  (byte) main::i#1 ← (byte) main::i#12 + rangenext(0,4)
  (bool~) main::$68 ← (byte) main::i#1 != rangelast(0,4)
  if((bool~) main::$68) goto main::@1
  to:main::@43
main::@41: scope:[main]  from main::@68
  (byte) main::i#40 ← phi( main::@68/(byte) main::i#41 )
  (byte*) print_line_cursor#47 ← phi( main::@68/(byte*) print_line_cursor#48 )
  (byte*) print_char_cursor#141 ← phi( main::@68/(byte*) print_char_cursor#35 )
  (byte) main::a#66 ← phi( main::@68/(byte) main::a#40 )
  (byte) main::r#40 ← (byte) '+'
  to:main::@21
main::@43: scope:[main]  from main::@43 main::@70
  (byte*) print_char_cursor#118 ← phi( main::@43/(byte*) print_char_cursor#118 main::@70/(byte*) print_char_cursor#37 )
  (byte*) print_line_cursor#32 ← phi( main::@43/(byte*) print_line_cursor#32 main::@70/(byte*) print_line_cursor#10 )
  if(true) goto main::@43
  to:main::@return
main::@return: scope:[main]  from main::@43
  (byte*) print_char_cursor#83 ← phi( main::@43/(byte*) print_char_cursor#118 )
  (byte*) print_line_cursor#23 ← phi( main::@43/(byte*) print_line_cursor#32 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#83
  return 
  to:@return

(void()) printu((byte) printu::a , (byte*) printu::op , (byte) printu::b , (byte) printu::res)
printu: scope:[printu]  from main::@10 main::@11 main::@12 main::@13 main::@14 main::@15 main::@16 main::@17 main::@18 main::@19 main::@2 main::@20 main::@21 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  (byte) printu::res#25 ← phi( main::@10/(byte) printu::res#8 main::@11/(byte) printu::res#9 main::@12/(byte) printu::res#10 main::@13/(byte) printu::res#11 main::@14/(byte) printu::res#12 main::@15/(byte) printu::res#13 main::@16/(byte) printu::res#14 main::@17/(byte) printu::res#15 main::@18/(byte) printu::res#16 main::@19/(byte) printu::res#17 main::@2/(byte) printu::res#0 main::@20/(byte) printu::res#18 main::@21/(byte) printu::res#19 main::@3/(byte) printu::res#1 main::@4/(byte) printu::res#2 main::@5/(byte) printu::res#3 main::@6/(byte) printu::res#4 main::@7/(byte) printu::res#5 main::@8/(byte) printu::res#6 main::@9/(byte) printu::res#7 )
  (byte) printu::b#23 ← phi( main::@10/(byte) printu::b#8 main::@11/(byte) printu::b#9 main::@12/(byte) printu::b#10 main::@13/(byte) printu::b#11 main::@14/(byte) printu::b#12 main::@15/(byte) printu::b#13 main::@16/(byte) printu::b#14 main::@17/(byte) printu::b#15 main::@18/(byte) printu::b#16 main::@19/(byte) printu::b#17 main::@2/(byte) printu::b#0 main::@20/(byte) printu::b#18 main::@21/(byte) printu::b#19 main::@3/(byte) printu::b#1 main::@4/(byte) printu::b#2 main::@5/(byte) printu::b#3 main::@6/(byte) printu::b#4 main::@7/(byte) printu::b#5 main::@8/(byte) printu::b#6 main::@9/(byte) printu::b#7 )
  (byte*) printu::op#22 ← phi( main::@10/(byte*) printu::op#8 main::@11/(byte*) printu::op#9 main::@12/(byte*) printu::op#10 main::@13/(byte*) printu::op#11 main::@14/(byte*) printu::op#12 main::@15/(byte*) printu::op#13 main::@16/(byte*) printu::op#14 main::@17/(byte*) printu::op#15 main::@18/(byte*) printu::op#16 main::@19/(byte*) printu::op#17 main::@2/(byte*) printu::op#0 main::@20/(byte*) printu::op#18 main::@21/(byte*) printu::op#19 main::@3/(byte*) printu::op#1 main::@4/(byte*) printu::op#2 main::@5/(byte*) printu::op#3 main::@6/(byte*) printu::op#4 main::@7/(byte*) printu::op#5 main::@8/(byte*) printu::op#6 main::@9/(byte*) printu::op#7 )
  (byte) printu::a#21 ← phi( main::@10/(byte) printu::a#8 main::@11/(byte) printu::a#9 main::@12/(byte) printu::a#10 main::@13/(byte) printu::a#11 main::@14/(byte) printu::a#12 main::@15/(byte) printu::a#13 main::@16/(byte) printu::a#14 main::@17/(byte) printu::a#15 main::@18/(byte) printu::a#16 main::@19/(byte) printu::a#17 main::@2/(byte) printu::a#0 main::@20/(byte) printu::a#18 main::@21/(byte) printu::a#19 main::@3/(byte) printu::a#1 main::@4/(byte) printu::a#2 main::@5/(byte) printu::a#3 main::@6/(byte) printu::a#4 main::@7/(byte) printu::a#5 main::@8/(byte) printu::a#6 main::@9/(byte) printu::a#7 )
  (byte*) print_char_cursor#96 ← phi( main::@10/(byte*) print_char_cursor#106 main::@11/(byte*) print_char_cursor#107 main::@12/(byte*) print_char_cursor#108 main::@13/(byte*) print_char_cursor#109 main::@14/(byte*) print_char_cursor#110 main::@15/(byte*) print_char_cursor#111 main::@16/(byte*) print_char_cursor#112 main::@17/(byte*) print_char_cursor#113 main::@18/(byte*) print_char_cursor#114 main::@19/(byte*) print_char_cursor#115 main::@2/(byte*) print_char_cursor#98 main::@20/(byte*) print_char_cursor#116 main::@21/(byte*) print_char_cursor#117 main::@3/(byte*) print_char_cursor#99 main::@4/(byte*) print_char_cursor#100 main::@5/(byte*) print_char_cursor#101 main::@6/(byte*) print_char_cursor#102 main::@7/(byte*) print_char_cursor#103 main::@8/(byte*) print_char_cursor#104 main::@9/(byte*) print_char_cursor#105 )
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:printu::@1
printu::@1: scope:[printu]  from printu
  (byte) printu::res#24 ← phi( printu/(byte) printu::res#25 )
  (byte) printu::b#22 ← phi( printu/(byte) printu::b#23 )
  (byte*) printu::op#21 ← phi( printu/(byte*) printu::op#22 )
  (byte) printu::a#20 ← phi( printu/(byte) printu::a#21 )
  (byte*) print_char_cursor#84 ← phi( printu/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#84
  (byte) print_uchar::b#0 ← (byte) printu::a#20
  call print_uchar 
  to:printu::@2
printu::@2: scope:[printu]  from printu::@1
  (byte) printu::res#23 ← phi( printu::@1/(byte) printu::res#24 )
  (byte) printu::b#21 ← phi( printu::@1/(byte) printu::b#22 )
  (byte*) printu::op#20 ← phi( printu::@1/(byte*) printu::op#21 )
  (byte*) print_char_cursor#85 ← phi( printu::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#85
  (byte*) print_str::str#1 ← (byte*) printu::op#20
  call print_str 
  to:printu::@3
printu::@3: scope:[printu]  from printu::@2
  (byte) printu::res#22 ← phi( printu::@2/(byte) printu::res#23 )
  (byte) printu::b#20 ← phi( printu::@2/(byte) printu::b#21 )
  (byte*) print_char_cursor#86 ← phi( printu::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#86
  (byte) print_uchar::b#1 ← (byte) printu::b#20
  call print_uchar 
  to:printu::@4
printu::@4: scope:[printu]  from printu::@3
  (byte) printu::res#21 ← phi( printu::@3/(byte) printu::res#22 )
  (byte*) print_char_cursor#87 ← phi( printu::@3/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#87
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:printu::@5
printu::@5: scope:[printu]  from printu::@4
  (byte) printu::res#20 ← phi( printu::@4/(byte) printu::res#21 )
  (byte*) print_char_cursor#88 ← phi( printu::@4/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#88
  (byte) print_char::ch#5 ← (byte) printu::res#20
  call print_char 
  to:printu::@6
printu::@6: scope:[printu]  from printu::@5
  (byte*) print_char_cursor#89 ← phi( printu::@5/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#89
  to:printu::@return
printu::@return: scope:[printu]  from printu::@6
  (byte*) print_char_cursor#90 ← phi( printu::@6/(byte*) print_char_cursor#44 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#90
  return 
  to:@return
@45: scope:[]  from @18
  (byte*) print_screen#4 ← phi( @18/(byte*) print_screen#0 )
  (byte*) print_char_cursor#119 ← phi( @18/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#33 ← phi( @18/(byte*) print_line_cursor#0 )
  call main 
  to:@46
@46: scope:[]  from @45
  (byte*) print_char_cursor#91 ← phi( @45/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#24 ← phi( @45/(byte*) print_line_cursor#11 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#91
  to:@end
@end: scope:[]  from @46

SYMBOL TABLE SSA
(label) @18
(label) @45
(label) @46
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(number~) main::$1
(bool~) main::$11
(bool~) main::$12
(bool~) main::$15
(bool~) main::$16
(bool~) main::$18
(bool~) main::$19
(bool~) main::$2
(bool~) main::$21
(bool~) main::$22
(bool~) main::$24
(bool~) main::$25
(bool~) main::$28
(bool~) main::$29
(bool~) main::$3
(bool~) main::$31
(bool~) main::$32
(bool~) main::$34
(bool~) main::$35
(bool~) main::$37
(bool~) main::$38
(bool~) main::$41
(bool~) main::$42
(bool~) main::$44
(bool~) main::$45
(bool~) main::$47
(bool~) main::$48
(bool~) main::$5
(bool~) main::$50
(bool~) main::$51
(bool~) main::$54
(bool~) main::$55
(bool~) main::$57
(bool~) main::$58
(bool~) main::$6
(bool~) main::$60
(bool~) main::$61
(bool~) main::$63
(bool~) main::$64
(number~) main::$67
(bool~) main::$68
(bool~) main::$8
(bool~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@3
(label) main::@30
(label) main::@31
(label) main::@32
(label) main::@33
(label) main::@34
(label) main::@35
(label) main::@36
(label) main::@37
(label) main::@38
(label) main::@39
(label) main::@4
(label) main::@40
(label) main::@41
(label) main::@43
(label) main::@45
(label) main::@46
(label) main::@47
(label) main::@48
(label) main::@49
(label) main::@5
(label) main::@50
(label) main::@51
(label) main::@52
(label) main::@53
(label) main::@54
(label) main::@55
(label) main::@56
(label) main::@57
(label) main::@58
(label) main::@59
(label) main::@6
(label) main::@60
(label) main::@61
(label) main::@62
(label) main::@63
(label) main::@64
(label) main::@65
(label) main::@66
(label) main::@67
(label) main::@68
(label) main::@69
(label) main::@7
(label) main::@70
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#10
(byte) main::a#11
(byte) main::a#12
(byte) main::a#13
(byte) main::a#14
(byte) main::a#15
(byte) main::a#16
(byte) main::a#17
(byte) main::a#18
(byte) main::a#19
(byte) main::a#2
(byte) main::a#20
(byte) main::a#21
(byte) main::a#22
(byte) main::a#23
(byte) main::a#24
(byte) main::a#25
(byte) main::a#26
(byte) main::a#27
(byte) main::a#28
(byte) main::a#29
(byte) main::a#3
(byte) main::a#30
(byte) main::a#31
(byte) main::a#32
(byte) main::a#33
(byte) main::a#34
(byte) main::a#35
(byte) main::a#36
(byte) main::a#37
(byte) main::a#38
(byte) main::a#39
(byte) main::a#4
(byte) main::a#40
(byte) main::a#41
(byte) main::a#42
(byte) main::a#43
(byte) main::a#44
(byte) main::a#45
(byte) main::a#46
(byte) main::a#47
(byte) main::a#48
(byte) main::a#49
(byte) main::a#5
(byte) main::a#50
(byte) main::a#51
(byte) main::a#52
(byte) main::a#53
(byte) main::a#54
(byte) main::a#55
(byte) main::a#56
(byte) main::a#57
(byte) main::a#58
(byte) main::a#59
(byte) main::a#6
(byte) main::a#60
(byte) main::a#61
(byte) main::a#62
(byte) main::a#63
(byte) main::a#64
(byte) main::a#65
(byte) main::a#66
(byte) main::a#67
(byte) main::a#7
(byte) main::a#8
(byte) main::a#9
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#10
(byte) main::b#11
(byte) main::b#12
(byte) main::b#13
(byte) main::b#14
(byte) main::b#15
(byte) main::b#16
(byte) main::b#17
(byte) main::b#18
(byte) main::b#19
(byte) main::b#2
(byte) main::b#20
(byte) main::b#21
(byte) main::b#22
(byte) main::b#23
(byte) main::b#24
(byte) main::b#25
(byte) main::b#26
(byte) main::b#27
(byte) main::b#28
(byte) main::b#29
(byte) main::b#3
(byte) main::b#30
(byte) main::b#31
(byte) main::b#32
(byte) main::b#33
(byte) main::b#34
(byte) main::b#35
(byte) main::b#36
(byte) main::b#37
(byte) main::b#38
(byte) main::b#39
(byte) main::b#4
(byte) main::b#40
(byte) main::b#41
(byte) main::b#42
(byte) main::b#43
(byte) main::b#44
(byte) main::b#45
(byte) main::b#46
(byte) main::b#47
(byte) main::b#48
(byte) main::b#49
(byte) main::b#5
(byte) main::b#50
(byte) main::b#51
(byte) main::b#52
(byte) main::b#53
(byte) main::b#54
(byte) main::b#6
(byte) main::b#7
(byte) main::b#8
(byte) main::b#9
(const byte*) main::cs[(number) 5]  = { (byte) 7, (byte) $c7, (byte) $37, (byte) $97, (byte) $67 }
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#14
(byte) main::i#15
(byte) main::i#16
(byte) main::i#17
(byte) main::i#18
(byte) main::i#19
(byte) main::i#2
(byte) main::i#20
(byte) main::i#21
(byte) main::i#22
(byte) main::i#23
(byte) main::i#24
(byte) main::i#25
(byte) main::i#26
(byte) main::i#27
(byte) main::i#28
(byte) main::i#29
(byte) main::i#3
(byte) main::i#30
(byte) main::i#31
(byte) main::i#32
(byte) main::i#33
(byte) main::i#34
(byte) main::i#35
(byte) main::i#36
(byte) main::i#37
(byte) main::i#38
(byte) main::i#39
(byte) main::i#4
(byte) main::i#40
(byte) main::i#41
(byte) main::i#42
(byte) main::i#43
(byte) main::i#44
(byte) main::i#45
(byte) main::i#46
(byte) main::i#47
(byte) main::i#48
(byte) main::i#49
(byte) main::i#5
(byte) main::i#50
(byte) main::i#51
(byte) main::i#52
(byte) main::i#53
(byte) main::i#54
(byte) main::i#55
(byte) main::i#56
(byte) main::i#57
(byte) main::i#58
(byte) main::i#59
(byte) main::i#6
(byte) main::i#60
(byte) main::i#61
(byte) main::i#62
(byte) main::i#63
(byte) main::i#64
(byte) main::i#65
(byte) main::i#66
(byte) main::i#67
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(const byte*) main::op[(byte) 3]  = (byte*) "< "
(const byte*) main::op1[(byte) 3]  = (byte*) "< "
(const byte*) main::op10[(byte) 3]  = (byte*) "<="
(const byte*) main::op11[(byte) 3]  = (byte*) "<="
(const byte*) main::op12[(byte) 3]  = (byte*) ">="
(const byte*) main::op13[(byte) 3]  = (byte*) ">="
(const byte*) main::op14[(byte) 3]  = (byte*) ">="
(const byte*) main::op15[(byte) 3]  = (byte*) ">="
(const byte*) main::op16[(byte) 3]  = (byte*) "=="
(const byte*) main::op17[(byte) 3]  = (byte*) "=="
(const byte*) main::op18[(byte) 3]  = (byte*) "=="
(const byte*) main::op19[(byte) 3]  = (byte*) "=="
(const byte*) main::op2[(byte) 3]  = (byte*) "< "
(const byte*) main::op3[(byte) 3]  = (byte*) "< "
(const byte*) main::op4[(byte) 3]  = (byte*) "> "
(const byte*) main::op5[(byte) 3]  = (byte*) "> "
(const byte*) main::op6[(byte) 3]  = (byte*) "> "
(const byte*) main::op7[(byte) 3]  = (byte*) "> "
(const byte*) main::op8[(byte) 3]  = (byte*) "<="
(const byte*) main::op9[(byte) 3]  = (byte*) "<="
(byte) main::r
(byte) main::r#0
(byte) main::r#1
(byte) main::r#10
(byte) main::r#11
(byte) main::r#12
(byte) main::r#13
(byte) main::r#14
(byte) main::r#15
(byte) main::r#16
(byte) main::r#17
(byte) main::r#18
(byte) main::r#19
(byte) main::r#2
(byte) main::r#20
(byte) main::r#21
(byte) main::r#22
(byte) main::r#23
(byte) main::r#24
(byte) main::r#25
(byte) main::r#26
(byte) main::r#27
(byte) main::r#28
(byte) main::r#29
(byte) main::r#3
(byte) main::r#30
(byte) main::r#31
(byte) main::r#32
(byte) main::r#33
(byte) main::r#34
(byte) main::r#35
(byte) main::r#36
(byte) main::r#37
(byte) main::r#38
(byte) main::r#39
(byte) main::r#4
(byte) main::r#40
(byte) main::r#41
(byte) main::r#42
(byte) main::r#43
(byte) main::r#44
(byte) main::r#45
(byte) main::r#46
(byte) main::r#47
(byte) main::r#48
(byte) main::r#49
(byte) main::r#5
(byte) main::r#50
(byte) main::r#51
(byte) main::r#52
(byte) main::r#53
(byte) main::r#54
(byte) main::r#55
(byte) main::r#56
(byte) main::r#57
(byte) main::r#58
(byte) main::r#59
(byte) main::r#6
(byte) main::r#60
(byte) main::r#7
(byte) main::r#8
(byte) main::r#9
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#87
(byte*) print_line_cursor#88
(byte*) print_line_cursor#89
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@7
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) printu((byte) printu::a , (byte*) printu::op , (byte) printu::b , (byte) printu::res)
(label) printu::@1
(label) printu::@2
(label) printu::@3
(label) printu::@4
(label) printu::@5
(label) printu::@6
(label) printu::@return
(byte) printu::a
(byte) printu::a#0
(byte) printu::a#1
(byte) printu::a#10
(byte) printu::a#11
(byte) printu::a#12
(byte) printu::a#13
(byte) printu::a#14
(byte) printu::a#15
(byte) printu::a#16
(byte) printu::a#17
(byte) printu::a#18
(byte) printu::a#19
(byte) printu::a#2
(byte) printu::a#20
(byte) printu::a#21
(byte) printu::a#3
(byte) printu::a#4
(byte) printu::a#5
(byte) printu::a#6
(byte) printu::a#7
(byte) printu::a#8
(byte) printu::a#9
(byte) printu::b
(byte) printu::b#0
(byte) printu::b#1
(byte) printu::b#10
(byte) printu::b#11
(byte) printu::b#12
(byte) printu::b#13
(byte) printu::b#14
(byte) printu::b#15
(byte) printu::b#16
(byte) printu::b#17
(byte) printu::b#18
(byte) printu::b#19
(byte) printu::b#2
(byte) printu::b#20
(byte) printu::b#21
(byte) printu::b#22
(byte) printu::b#23
(byte) printu::b#3
(byte) printu::b#4
(byte) printu::b#5
(byte) printu::b#6
(byte) printu::b#7
(byte) printu::b#8
(byte) printu::b#9
(byte*) printu::op
(byte*) printu::op#0
(byte*) printu::op#1
(byte*) printu::op#10
(byte*) printu::op#11
(byte*) printu::op#12
(byte*) printu::op#13
(byte*) printu::op#14
(byte*) printu::op#15
(byte*) printu::op#16
(byte*) printu::op#17
(byte*) printu::op#18
(byte*) printu::op#19
(byte*) printu::op#2
(byte*) printu::op#20
(byte*) printu::op#21
(byte*) printu::op#22
(byte*) printu::op#3
(byte*) printu::op#4
(byte*) printu::op#5
(byte*) printu::op#6
(byte*) printu::op#7
(byte*) printu::op#8
(byte*) printu::op#9
(byte) printu::res
(byte) printu::res#0
(byte) printu::res#1
(byte) printu::res#10
(byte) printu::res#11
(byte) printu::res#12
(byte) printu::res#13
(byte) printu::res#14
(byte) printu::res#15
(byte) printu::res#16
(byte) printu::res#17
(byte) printu::res#18
(byte) printu::res#19
(byte) printu::res#2
(byte) printu::res#20
(byte) printu::res#21
(byte) printu::res#22
(byte) printu::res#23
(byte) printu::res#24
(byte) printu::res#25
(byte) printu::res#3
(byte) printu::res#4
(byte) printu::res#5
(byte) printu::res#6
(byte) printu::res#7
(byte) printu::res#8
(byte) printu::res#9

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#13 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $ce in (number~) main::$1 ← (number) $ce - (byte) main::a#2
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) $ce - (byte) main::a#2
Adding number conversion cast (unumber) $37 in (bool~) main::$5 ← (byte) main::a#4 < (number) $37
Adding number conversion cast (unumber) $37 in (byte) printu::b#1 ← (number) $37
Adding number conversion cast (unumber) $37 in (bool~) main::$18 ← (byte) main::a#12 > (number) $37
Adding number conversion cast (unumber) $37 in (byte) printu::b#5 ← (number) $37
Adding number conversion cast (unumber) $37 in (bool~) main::$31 ← (byte) main::a#20 <= (number) $37
Adding number conversion cast (unumber) $37 in (byte) printu::b#9 ← (number) $37
Adding number conversion cast (unumber) $37 in (bool~) main::$44 ← (byte) main::a#28 >= (number) $37
Adding number conversion cast (unumber) $37 in (byte) printu::b#13 ← (number) $37
Adding number conversion cast (unumber) $37 in (bool~) main::$57 ← (byte) main::a#36 == (number) $37
Adding number conversion cast (unumber) $37 in (byte) printu::b#17 ← (number) $37
Adding number conversion cast (unumber) $30 in (number~) main::$67 ← (byte) main::a#42 + (number) $30
Adding number conversion cast (unumber) main::$67 in (number~) main::$67 ← (byte) main::a#42 + (unumber)(number) $30
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) printu::b#1 ← (unumber)(number) $37
Inlining cast (byte) printu::b#5 ← (unumber)(number) $37
Inlining cast (byte) printu::b#9 ← (unumber)(number) $37
Inlining cast (byte) printu::b#13 ← (unumber)(number) $37
Inlining cast (byte) printu::b#17 ← (unumber)(number) $37
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $ce
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $37
Simplifying constant integer cast $30
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $ce
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $30
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Inferred type updated to byte in (unumber~) main::$1 ← (byte) $ce - (byte) main::a#2
Inferred type updated to byte in (unumber~) main::$67 ← (byte) main::a#42 + (byte) $30
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [94] (bool~) main::$3 ← (byte) main::a#2 >= (byte) main::b#0 from [93] (bool~) main::$2 ← (byte) main::a#2 < (byte) main::b#0
Inversing boolean not [106] (bool~) main::$6 ← (byte) main::a#4 >= (byte) $37 from [105] (bool~) main::$5 ← (byte) main::a#4 < (byte) $37
Inversing boolean not [120] (bool~) main::$9 ← (byte) main::a#6 >= *((const byte*) main::cs + (byte) main::i#2) from [119] (bool~) main::$8 ← (byte) main::a#6 < *((const byte*) main::cs + (byte) main::i#2)
Inversing boolean not [134] (bool~) main::$12 ← (byte) main::a#8 >= (byte) main::a#8 from [133] (bool~) main::$11 ← (byte) main::a#8 < (byte) main::a#8
Inversing boolean not [152] (bool~) main::$16 ← (byte) main::a#10 <= (byte) main::b#2 from [151] (bool~) main::$15 ← (byte) main::a#10 > (byte) main::b#2
Inversing boolean not [166] (bool~) main::$19 ← (byte) main::a#12 <= (byte) $37 from [165] (bool~) main::$18 ← (byte) main::a#12 > (byte) $37
Inversing boolean not [180] (bool~) main::$22 ← (byte) main::a#14 <= *((const byte*) main::cs + (byte) main::i#4) from [179] (bool~) main::$21 ← (byte) main::a#14 > *((const byte*) main::cs + (byte) main::i#4)
Inversing boolean not [194] (bool~) main::$25 ← (byte) main::a#16 <= (byte) main::a#16 from [193] (bool~) main::$24 ← (byte) main::a#16 > (byte) main::a#16
Inversing boolean not [212] (bool~) main::$29 ← (byte) main::a#18 > (byte) main::b#4 from [211] (bool~) main::$28 ← (byte) main::a#18 <= (byte) main::b#4
Inversing boolean not [226] (bool~) main::$32 ← (byte) main::a#20 > (byte) $37 from [225] (bool~) main::$31 ← (byte) main::a#20 <= (byte) $37
Inversing boolean not [240] (bool~) main::$35 ← (byte) main::a#22 > *((const byte*) main::cs + (byte) main::i#6) from [239] (bool~) main::$34 ← (byte) main::a#22 <= *((const byte*) main::cs + (byte) main::i#6)
Inversing boolean not [254] (bool~) main::$38 ← (byte) main::a#24 > (byte) main::a#24 from [253] (bool~) main::$37 ← (byte) main::a#24 <= (byte) main::a#24
Inversing boolean not [272] (bool~) main::$42 ← (byte) main::a#26 < (byte) main::b#6 from [271] (bool~) main::$41 ← (byte) main::a#26 >= (byte) main::b#6
Inversing boolean not [286] (bool~) main::$45 ← (byte) main::a#28 < (byte) $37 from [285] (bool~) main::$44 ← (byte) main::a#28 >= (byte) $37
Inversing boolean not [300] (bool~) main::$48 ← (byte) main::a#30 < *((const byte*) main::cs + (byte) main::i#8) from [299] (bool~) main::$47 ← (byte) main::a#30 >= *((const byte*) main::cs + (byte) main::i#8)
Inversing boolean not [314] (bool~) main::$51 ← (byte) main::a#32 < (byte) main::a#32 from [313] (bool~) main::$50 ← (byte) main::a#32 >= (byte) main::a#32
Inversing boolean not [332] (bool~) main::$55 ← (byte) main::a#34 != (byte) main::b#8 from [331] (bool~) main::$54 ← (byte) main::a#34 == (byte) main::b#8
Inversing boolean not [346] (bool~) main::$58 ← (byte) main::a#36 != (byte) $37 from [345] (bool~) main::$57 ← (byte) main::a#36 == (byte) $37
Inversing boolean not [360] (bool~) main::$61 ← (byte) main::a#38 != *((const byte*) main::cs + (byte) main::i#10) from [359] (bool~) main::$60 ← (byte) main::a#38 == *((const byte*) main::cs + (byte) main::i#10)
Inversing boolean not [374] (bool~) main::$64 ← (byte) main::a#40 != (byte) main::a#40 from [373] (bool~) main::$63 ← (byte) main::a#40 == (byte) main::a#40
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#0 = print_screen#0 print_char_cursor#0 print_line_cursor#33 print_char_cursor#119 print_screen#4 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#2 = print_char_cursor#92 print_char_cursor#93 print_char_cursor#48 
Alias print_char_cursor#1 = print_char_cursor#47 
Alias print_line_cursor#1 = print_ln::$0 print_line_cursor#14 print_char_cursor#3 print_line_cursor#15 print_char_cursor#50 print_line_cursor#2 print_char_cursor#4 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#5 = print_char_cursor#51 
Alias print_char_cursor#52 = print_char_cursor#6 print_char_cursor#53 print_char_cursor#7 
Alias print_char_cursor#55 = print_char_cursor#8 print_char_cursor#9 
Alias print_line_cursor#16 = print_screen#2 print_screen#1 print_line_cursor#3 print_char_cursor#10 print_char_cursor#56 print_line_cursor#4 print_char_cursor#11 
Alias print_line_cursor#17 = print_line_cursor#5 
Alias print_char_cursor#12 = print_char_cursor#57 
Alias main::b#0 = main::$1 main::b#10 
Alias main::a#3 = main::a#4 main::a#44 
Alias main::i#24 = main::i#25 main::i#35 
Alias print_line_cursor#69 = print_line_cursor#70 print_line_cursor#79 
Alias main::b#1 = main::b#48 main::b#47 
Alias print_char_cursor#123 = print_char_cursor#13 print_char_cursor#58 
Alias main::a#2 = main::a#43 
Alias print_char_cursor#121 = print_char_cursor#122 
Alias main::i#42 = main::i#43 
Alias print_line_cursor#84 = print_line_cursor#85 
Alias main::a#45 = main::a#6 main::a#5 
Alias main::i#13 = main::i#2 main::i#14 
Alias print_line_cursor#54 = print_line_cursor#55 print_line_cursor#64 
Alias main::b#35 = main::b#36 main::b#43 
Alias print_char_cursor#124 = print_char_cursor#14 print_char_cursor#59 
Alias main::a#46 = main::a#8 main::a#7 
Alias print_line_cursor#39 = print_line_cursor#40 print_line_cursor#49 
Alias main::b#23 = main::b#24 main::b#31 
Alias main::i#3 = main::i#61 main::i#60 
Alias print_char_cursor#125 = print_char_cursor#15 print_char_cursor#60 
Alias print_line_cursor#27 = print_line_cursor#34 
Alias main::a#10 = main::a#47 main::a#9 main::a#48 
Alias main::b#11 = main::b#19 main::b#2 main::b#12 
Alias main::i#44 = main::i#52 main::i#56 main::i#45 
Alias print_char_cursor#16 = print_char_cursor#61 
Alias print_line_cursor#18 = print_line_cursor#6 print_line_cursor#86 
Alias print_char_cursor#126 = print_char_cursor#17 print_char_cursor#62 
Alias main::a#11 = main::a#12 main::a#49 
Alias main::i#26 = main::i#27 main::i#36 
Alias print_line_cursor#71 = print_line_cursor#72 print_line_cursor#80 
Alias main::b#3 = main::b#50 main::b#49 
Alias print_char_cursor#127 = print_char_cursor#18 print_char_cursor#63 
Alias main::a#13 = main::a#14 main::a#50 
Alias main::i#15 = main::i#4 main::i#16 
Alias print_line_cursor#56 = print_line_cursor#57 print_line_cursor#65 
Alias main::b#37 = main::b#38 main::b#44 
Alias print_char_cursor#128 = print_char_cursor#19 print_char_cursor#64 
Alias main::a#15 = main::a#16 main::a#51 
Alias print_line_cursor#41 = print_line_cursor#42 print_line_cursor#50 
Alias main::b#25 = main::b#26 main::b#32 
Alias main::i#5 = main::i#63 main::i#62 
Alias print_char_cursor#129 = print_char_cursor#20 print_char_cursor#65 
Alias print_line_cursor#28 = print_line_cursor#35 
Alias main::a#17 = main::a#52 main::a#18 main::a#53 
Alias main::b#13 = main::b#20 main::b#4 main::b#14 
Alias main::i#46 = main::i#53 main::i#57 main::i#47 
Alias print_char_cursor#21 = print_char_cursor#66 
Alias print_line_cursor#19 = print_line_cursor#7 print_line_cursor#87 
Alias print_char_cursor#130 = print_char_cursor#22 print_char_cursor#67 
Alias main::a#19 = main::a#20 main::a#54 
Alias main::i#28 = main::i#29 main::i#37 
Alias print_line_cursor#73 = print_line_cursor#74 print_line_cursor#81 
Alias main::b#5 = main::b#52 main::b#51 
Alias print_char_cursor#131 = print_char_cursor#23 print_char_cursor#68 
Alias main::a#21 = main::a#22 main::a#55 
Alias main::i#17 = main::i#6 main::i#18 
Alias print_line_cursor#58 = print_line_cursor#59 print_line_cursor#66 
Alias main::b#39 = main::b#40 main::b#45 
Alias print_char_cursor#132 = print_char_cursor#24 print_char_cursor#69 
Alias main::a#23 = main::a#24 main::a#56 
Alias print_line_cursor#43 = print_line_cursor#44 print_line_cursor#51 
Alias main::b#27 = main::b#28 main::b#33 
Alias main::i#64 = main::i#65 main::i#7 
Alias print_char_cursor#133 = print_char_cursor#25 print_char_cursor#70 
Alias print_line_cursor#29 = print_line_cursor#36 
Alias main::a#25 = main::a#57 main::a#26 main::a#58 
Alias main::b#15 = main::b#21 main::b#6 main::b#16 
Alias main::i#48 = main::i#54 main::i#58 main::i#49 
Alias print_char_cursor#26 = print_char_cursor#71 
Alias print_line_cursor#20 = print_line_cursor#8 print_line_cursor#88 
Alias print_char_cursor#134 = print_char_cursor#27 print_char_cursor#72 
Alias main::a#27 = main::a#28 main::a#59 
Alias main::i#30 = main::i#31 main::i#38 
Alias print_line_cursor#75 = print_line_cursor#76 print_line_cursor#82 
Alias main::b#53 = main::b#54 main::b#7 
Alias print_char_cursor#135 = print_char_cursor#28 print_char_cursor#73 
Alias main::a#29 = main::a#30 main::a#60 
Alias main::i#19 = main::i#8 main::i#20 
Alias print_line_cursor#60 = print_line_cursor#61 print_line_cursor#67 
Alias main::b#41 = main::b#42 main::b#46 
Alias print_char_cursor#136 = print_char_cursor#29 print_char_cursor#74 
Alias main::a#31 = main::a#32 main::a#61 
Alias print_line_cursor#45 = print_line_cursor#46 print_line_cursor#52 
Alias main::b#29 = main::b#30 main::b#34 
Alias main::i#66 = main::i#67 main::i#9 
Alias print_char_cursor#137 = print_char_cursor#30 print_char_cursor#75 
Alias print_line_cursor#30 = print_line_cursor#37 
Alias main::a#33 = main::a#62 main::a#34 main::a#63 
Alias main::b#17 = main::b#22 main::b#8 main::b#18 
Alias main::i#50 = main::i#55 main::i#59 main::i#51 
Alias print_char_cursor#31 = print_char_cursor#76 
Alias print_line_cursor#21 = print_line_cursor#9 print_line_cursor#89 
Alias print_char_cursor#138 = print_char_cursor#32 print_char_cursor#77 
Alias main::a#35 = main::a#36 main::a#64 
Alias main::i#32 = main::i#33 main::i#39 
Alias print_line_cursor#77 = print_line_cursor#78 print_line_cursor#83 
Alias print_char_cursor#139 = print_char_cursor#33 print_char_cursor#78 
Alias main::a#37 = main::a#38 main::a#65 
Alias main::i#10 = main::i#21 main::i#22 
Alias print_line_cursor#62 = print_line_cursor#63 print_line_cursor#68 
Alias print_char_cursor#140 = print_char_cursor#34 print_char_cursor#79 
Alias main::a#39 = main::a#40 main::a#66 
Alias print_line_cursor#47 = print_line_cursor#48 print_line_cursor#53 
Alias main::i#11 = main::i#41 main::i#40 
Alias print_char_cursor#141 = print_char_cursor#35 print_char_cursor#80 
Alias print_line_cursor#31 = print_line_cursor#38 
Alias main::a#41 = main::a#67 main::a#42 
Alias main::i#12 = main::i#23 main::i#34 
Alias print_char_cursor#36 = print_char_cursor#81 
Alias print_line_cursor#10 = print_line_cursor#22 
Alias print_char_cursor#37 = print_char_cursor#82 
Alias main::a#1 = main::$67 
Alias print_line_cursor#11 = print_line_cursor#23 print_line_cursor#32 
Alias print_char_cursor#118 = print_char_cursor#83 print_char_cursor#38 
Alias printu::a#20 = printu::a#21 
Alias printu::op#20 = printu::op#21 printu::op#22 
Alias printu::b#20 = printu::b#22 printu::b#23 printu::b#21 
Alias printu::res#20 = printu::res#24 printu::res#25 printu::res#23 printu::res#22 printu::res#21 
Alias print_char_cursor#39 = print_char_cursor#84 
Alias print_char_cursor#40 = print_char_cursor#85 
Alias print_char_cursor#41 = print_char_cursor#86 
Alias print_char_cursor#42 = print_char_cursor#87 
Alias print_char_cursor#43 = print_char_cursor#88 
Alias print_char_cursor#44 = print_char_cursor#89 print_char_cursor#90 print_char_cursor#45 
Alias print_line_cursor#12 = print_line_cursor#24 
Alias print_char_cursor#46 = print_char_cursor#91 
Successful SSA optimization Pass2AliasElimination
Alias main::a#10 = main::a#3 main::a#2 main::a#45 main::a#46 main::a#11 main::a#13 main::a#15 main::a#17 main::a#19 main::a#21 main::a#23 main::a#25 main::a#27 main::a#29 main::a#31 main::a#33 main::a#35 main::a#37 main::a#39 main::a#41 
Alias main::b#0 = main::b#1 main::b#35 main::b#23 main::b#11 main::b#3 main::b#37 main::b#25 main::b#13 main::b#5 main::b#39 main::b#27 main::b#15 main::b#53 main::b#41 main::b#29 main::b#17 main::b#9 
Alias print_char_cursor#121 = print_char_cursor#98 
Alias main::i#10 = main::i#24 main::i#42 main::i#13 main::i#3 main::i#44 main::i#26 main::i#15 main::i#5 main::i#46 main::i#28 main::i#17 main::i#64 main::i#48 main::i#30 main::i#19 main::i#66 main::i#50 main::i#32 main::i#11 main::i#12 
Alias print_line_cursor#27 = print_line_cursor#69 print_line_cursor#84 print_line_cursor#54 print_line_cursor#39 
Alias print_char_cursor#123 = print_char_cursor#99 
Alias print_char_cursor#100 = print_char_cursor#124 
Alias print_char_cursor#101 = print_char_cursor#125 
Alias print_char_cursor#102 = print_char_cursor#126 
Alias print_line_cursor#18 = print_line_cursor#71 print_line_cursor#56 print_line_cursor#41 print_line_cursor#28 
Alias print_char_cursor#103 = print_char_cursor#127 
Alias print_char_cursor#104 = print_char_cursor#128 
Alias print_char_cursor#105 = print_char_cursor#129 
Alias print_char_cursor#106 = print_char_cursor#130 
Alias print_line_cursor#19 = print_line_cursor#73 print_line_cursor#58 print_line_cursor#43 print_line_cursor#29 
Alias print_char_cursor#107 = print_char_cursor#131 
Alias print_char_cursor#108 = print_char_cursor#132 
Alias print_char_cursor#109 = print_char_cursor#133 
Alias print_char_cursor#110 = print_char_cursor#134 
Alias print_line_cursor#20 = print_line_cursor#75 print_line_cursor#60 print_line_cursor#45 print_line_cursor#30 
Alias print_char_cursor#111 = print_char_cursor#135 
Alias print_char_cursor#112 = print_char_cursor#136 
Alias print_char_cursor#113 = print_char_cursor#137 
Alias print_char_cursor#114 = print_char_cursor#138 
Alias print_line_cursor#21 = print_line_cursor#77 print_line_cursor#62 print_line_cursor#47 print_line_cursor#31 
Alias print_char_cursor#115 = print_char_cursor#139 
Alias print_char_cursor#116 = print_char_cursor#140 
Alias print_char_cursor#117 = print_char_cursor#141 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#120 (byte*) print_char_cursor#40
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#49 (byte*) print_char_cursor#94
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#97 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#123 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#101 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#108 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#109 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#110 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#111 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#112 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#113 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#114 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#115 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#116 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#117 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#118 (byte*) print_char_cursor#37
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#52
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#42 (byte*) print_char_cursor#52
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#11
Identical Phi Values (byte*) print_char_cursor#46 (byte*) print_char_cursor#118
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_char_cursor#55
Identical Phi Values (byte*) print_char_cursor#94 (byte*) print_char_cursor#55
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#95 (byte*) print_char_cursor#55
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str::$1 [17] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [27] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1
Simple Condition (bool~) main::$3 [60] if((byte) main::a#10>=(byte) main::b#0) goto main::@2
Simple Condition (bool~) main::$6 [70] if((byte) main::a#10>=(byte) $37) goto main::@3
Simple Condition (bool~) main::$9 [81] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4
Simple Condition (bool~) main::$12 [92] if((byte) main::a#10>=(byte) main::a#10) goto main::@5
Simple Condition (bool~) main::$16 [105] if((byte) main::a#10<=(byte) main::b#0) goto main::@6
Simple Condition (bool~) main::$19 [116] if((byte) main::a#10<=(byte) $37) goto main::@7
Simple Condition (bool~) main::$22 [127] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8
Simple Condition (bool~) main::$25 [138] if((byte) main::a#10<=(byte) main::a#10) goto main::@9
Simple Condition (bool~) main::$29 [151] if((byte) main::a#10>(byte) main::b#0) goto main::@10
Simple Condition (bool~) main::$32 [162] if((byte) main::a#10>(byte) $37) goto main::@11
Simple Condition (bool~) main::$35 [173] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12
Simple Condition (bool~) main::$38 [184] if((byte) main::a#10>(byte) main::a#10) goto main::@13
Simple Condition (bool~) main::$42 [197] if((byte) main::a#10<(byte) main::b#0) goto main::@14
Simple Condition (bool~) main::$45 [208] if((byte) main::a#10<(byte) $37) goto main::@15
Simple Condition (bool~) main::$48 [219] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16
Simple Condition (bool~) main::$51 [230] if((byte) main::a#10<(byte) main::a#10) goto main::@17
Simple Condition (bool~) main::$55 [243] if((byte) main::a#10!=(byte) main::b#0) goto main::@18
Simple Condition (bool~) main::$58 [254] if((byte) main::a#10!=(byte) $37) goto main::@19
Simple Condition (bool~) main::$61 [265] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20
Simple Condition (bool~) main::$64 [276] if((byte) main::a#10!=(byte) main::a#10) goto main::@21
Simple Condition (bool~) main::$68 [290] if((byte) main::i#1!=rangelast(0,4)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) main::a#0 = 7
Constant (const byte) main::i#0 = 0
Constant (const byte) main::r#0 = 0
Constant (const byte) main::r#1 = '-'
Constant (const byte*) printu::op#0 = main::op
Constant (const byte) main::r#2 = '-'
Constant (const byte) main::r#3 = '+'
Constant (const byte*) printu::op#1 = main::op1
Constant (const byte) printu::b#1 = $37
Constant (const byte) main::r#4 = '-'
Constant (const byte) main::r#5 = '+'
Constant (const byte*) printu::op#2 = main::op2
Constant (const byte) main::r#6 = '-'
Constant (const byte) main::r#7 = '+'
Constant (const byte*) printu::op#3 = main::op3
Constant (const byte) main::r#8 = '-'
Constant (const byte) main::r#9 = '+'
Constant (const byte*) printu::op#4 = main::op4
Constant (const byte) main::r#10 = '-'
Constant (const byte) main::r#11 = '+'
Constant (const byte*) printu::op#5 = main::op5
Constant (const byte) printu::b#5 = $37
Constant (const byte) main::r#12 = '-'
Constant (const byte) main::r#13 = '+'
Constant (const byte*) printu::op#6 = main::op6
Constant (const byte) main::r#14 = '-'
Constant (const byte) main::r#15 = '+'
Constant (const byte*) printu::op#7 = main::op7
Constant (const byte) main::r#16 = '-'
Constant (const byte) main::r#17 = '+'
Constant (const byte*) printu::op#8 = main::op8
Constant (const byte) main::r#18 = '-'
Constant (const byte) main::r#19 = '+'
Constant (const byte*) printu::op#9 = main::op9
Constant (const byte) printu::b#9 = $37
Constant (const byte) main::r#20 = '-'
Constant (const byte) main::r#21 = '+'
Constant (const byte*) printu::op#10 = main::op10
Constant (const byte) main::r#22 = '-'
Constant (const byte) main::r#23 = '+'
Constant (const byte*) printu::op#11 = main::op11
Constant (const byte) main::r#24 = '-'
Constant (const byte) main::r#25 = '+'
Constant (const byte*) printu::op#12 = main::op12
Constant (const byte) main::r#26 = '-'
Constant (const byte) main::r#27 = '+'
Constant (const byte*) printu::op#13 = main::op13
Constant (const byte) printu::b#13 = $37
Constant (const byte) main::r#28 = '-'
Constant (const byte) main::r#29 = '+'
Constant (const byte*) printu::op#14 = main::op14
Constant (const byte) main::r#30 = '-'
Constant (const byte) main::r#31 = '+'
Constant (const byte*) printu::op#15 = main::op15
Constant (const byte) main::r#32 = '-'
Constant (const byte) main::r#33 = '+'
Constant (const byte*) printu::op#16 = main::op16
Constant (const byte) main::r#34 = '-'
Constant (const byte) main::r#35 = '+'
Constant (const byte*) printu::op#17 = main::op17
Constant (const byte) printu::b#17 = $37
Constant (const byte) main::r#36 = '-'
Constant (const byte) main::r#37 = '+'
Constant (const byte*) printu::op#18 = main::op18
Constant (const byte) main::r#38 = '-'
Constant (const byte) main::r#39 = '+'
Constant (const byte*) printu::op#19 = main::op19
Constant (const byte) main::r#40 = '+'
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte) print_char::ch#4 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [293] if(true) goto main::@43
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) main::op
Consolidated constant strings into (const byte*) main::op4
Consolidated constant strings into (const byte*) main::op8
Consolidated constant strings into (const byte*) main::op12
Consolidated constant strings into (const byte*) main::op16
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [288] main::i#1 ← ++ main::i#10 to ++
Resolved ranged comparison value [290] if(main::i#1!=rangelast(0,4)) goto main::@1 to (number) 5
Rewriting conditional comparison [116] if((byte) main::a#10<=(byte) $37) goto main::@7
Rewriting conditional comparison [162] if((byte) main::a#10>(byte) $37) goto main::@11
Eliminating unused constant (const void*) memset::return#2
Eliminating unused constant (const byte) main::r#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $37+1 in if((byte) main::a#10<(byte) $37+(number) 1) goto main::@7
Adding number conversion cast (unumber) 1 in if((byte) main::a#10<(unumber)(byte) $37+(number) 1) goto main::@7
Adding number conversion cast (unumber) $37+1 in if((byte) main::a#10>=(byte) $37+(number) 1) goto main::@11
Adding number conversion cast (unumber) 1 in if((byte) main::a#10>=(unumber)(byte) $37+(number) 1) goto main::@11
Adding number conversion cast (unumber) 5 in if((byte) main::i#1!=(number) 5) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) $37+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) $37+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) main::a#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::r#1
Inlining constant with var siblings (const byte) main::r#2
Inlining constant with var siblings (const byte) main::r#3
Inlining constant with var siblings (const byte) main::r#4
Inlining constant with var siblings (const byte) main::r#5
Inlining constant with var siblings (const byte) main::r#6
Inlining constant with var siblings (const byte) main::r#7
Inlining constant with var siblings (const byte) main::r#8
Inlining constant with var siblings (const byte) main::r#9
Inlining constant with var siblings (const byte) main::r#10
Inlining constant with var siblings (const byte) main::r#11
Inlining constant with var siblings (const byte) main::r#12
Inlining constant with var siblings (const byte) main::r#13
Inlining constant with var siblings (const byte) main::r#14
Inlining constant with var siblings (const byte) main::r#15
Inlining constant with var siblings (const byte) main::r#16
Inlining constant with var siblings (const byte) main::r#17
Inlining constant with var siblings (const byte) main::r#18
Inlining constant with var siblings (const byte) main::r#19
Inlining constant with var siblings (const byte) main::r#20
Inlining constant with var siblings (const byte) main::r#21
Inlining constant with var siblings (const byte) main::r#22
Inlining constant with var siblings (const byte) main::r#23
Inlining constant with var siblings (const byte) main::r#24
Inlining constant with var siblings (const byte) main::r#25
Inlining constant with var siblings (const byte) main::r#26
Inlining constant with var siblings (const byte) main::r#27
Inlining constant with var siblings (const byte) main::r#28
Inlining constant with var siblings (const byte) main::r#29
Inlining constant with var siblings (const byte) main::r#30
Inlining constant with var siblings (const byte) main::r#31
Inlining constant with var siblings (const byte) main::r#32
Inlining constant with var siblings (const byte) main::r#33
Inlining constant with var siblings (const byte) main::r#34
Inlining constant with var siblings (const byte) main::r#35
Inlining constant with var siblings (const byte) main::r#36
Inlining constant with var siblings (const byte) main::r#37
Inlining constant with var siblings (const byte) main::r#38
Inlining constant with var siblings (const byte) main::r#39
Inlining constant with var siblings (const byte) main::r#40
Inlining constant with var siblings (const byte*) printu::op#0
Inlining constant with var siblings (const byte*) printu::op#1
Inlining constant with var siblings (const byte) printu::b#1
Inlining constant with var siblings (const byte*) printu::op#2
Inlining constant with var siblings (const byte*) printu::op#3
Inlining constant with var siblings (const byte*) printu::op#4
Inlining constant with var siblings (const byte*) printu::op#5
Inlining constant with var siblings (const byte) printu::b#5
Inlining constant with var siblings (const byte*) printu::op#6
Inlining constant with var siblings (const byte*) printu::op#7
Inlining constant with var siblings (const byte*) printu::op#8
Inlining constant with var siblings (const byte*) printu::op#9
Inlining constant with var siblings (const byte) printu::b#9
Inlining constant with var siblings (const byte*) printu::op#10
Inlining constant with var siblings (const byte*) printu::op#11
Inlining constant with var siblings (const byte*) printu::op#12
Inlining constant with var siblings (const byte*) printu::op#13
Inlining constant with var siblings (const byte) printu::b#13
Inlining constant with var siblings (const byte*) printu::op#14
Inlining constant with var siblings (const byte*) printu::op#15
Inlining constant with var siblings (const byte*) printu::op#16
Inlining constant with var siblings (const byte*) printu::op#17
Inlining constant with var siblings (const byte) printu::b#17
Inlining constant with var siblings (const byte*) printu::op#18
Inlining constant with var siblings (const byte*) printu::op#19
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined printu::op#0 = (const byte*) main::op
Constant inlined printu::op#1 = (const byte*) main::op
Constant inlined printu::op#8 = (const byte*) main::op8
Constant inlined printu::op#9 = (const byte*) main::op8
Constant inlined printu::op#6 = (const byte*) main::op4
Constant inlined main::r#39 = (byte) '+'
Constant inlined printu::op#7 = (const byte*) main::op4
Constant inlined printu::op#4 = (const byte*) main::op4
Constant inlined printu::op#5 = (const byte*) main::op4
Constant inlined printu::op#2 = (const byte*) main::op
Constant inlined printu::op#3 = (const byte*) main::op
Constant inlined main::r#33 = (byte) '+'
Constant inlined main::r#34 = (byte) '-'
Constant inlined main::r#31 = (byte) '+'
Constant inlined main::r#32 = (byte) '-'
Constant inlined main::r#37 = (byte) '+'
Constant inlined main::r#38 = (byte) '-'
Constant inlined main::r#35 = (byte) '+'
Constant inlined main::r#36 = (byte) '-'
Constant inlined main::r#30 = (byte) '-'
Constant inlined main::op11 = (const byte*) main::op8
Constant inlined printu::b#17 = (byte) $37
Constant inlined main::op10 = (const byte*) main::op8
Constant inlined main::op15 = (const byte*) main::op12
Constant inlined printu::b#13 = (byte) $37
Constant inlined main::op13 = (const byte*) main::op12
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined main::op14 = (const byte*) main::op12
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined main::r#40 = (byte) '+'
Constant inlined printu::op#17 = (const byte*) main::op16
Constant inlined main::r#19 = (byte) '+'
Constant inlined printu::op#18 = (const byte*) main::op16
Constant inlined printu::op#19 = (const byte*) main::op16
Constant inlined main::r#17 = (byte) '+'
Constant inlined main::r#18 = (byte) '-'
Constant inlined main::a#0 = (byte) 7
Constant inlined main::r#11 = (byte) '+'
Constant inlined main::r#12 = (byte) '-'
Constant inlined main::r#10 = (byte) '-'
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined main::r#15 = (byte) '+'
Constant inlined main::r#16 = (byte) '-'
Constant inlined main::r#13 = (byte) '+'
Constant inlined main::r#14 = (byte) '-'
Constant inlined main::op19 = (const byte*) main::op16
Constant inlined main::i#0 = (byte) 0
Constant inlined main::op17 = (const byte*) main::op16
Constant inlined main::op18 = (const byte*) main::op16
Constant inlined main::r#1 = (byte) '-'
Constant inlined main::r#8 = (byte) '-'
Constant inlined main::r#9 = (byte) '+'
Constant inlined main::r#6 = (byte) '-'
Constant inlined main::r#28 = (byte) '-'
Constant inlined main::r#7 = (byte) '+'
Constant inlined main::r#29 = (byte) '+'
Constant inlined main::r#4 = (byte) '-'
Constant inlined printu::b#9 = (byte) $37
Constant inlined main::r#5 = (byte) '+'
Constant inlined main::r#2 = (byte) '-'
Constant inlined main::r#3 = (byte) '+'
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined main::r#22 = (byte) '-'
Constant inlined printu::b#5 = (byte) $37
Constant inlined main::op1 = (const byte*) main::op
Constant inlined printu::op#10 = (const byte*) main::op8
Constant inlined main::r#23 = (byte) '+'
Constant inlined printu::op#11 = (const byte*) main::op8
Constant inlined main::r#20 = (byte) '-'
Constant inlined printu::op#12 = (const byte*) main::op12
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined main::r#21 = (byte) '+'
Constant inlined printu::op#13 = (const byte*) main::op12
Constant inlined main::r#26 = (byte) '-'
Constant inlined printu::b#1 = (byte) $37
Constant inlined printu::op#14 = (const byte*) main::op12
Constant inlined main::r#27 = (byte) '+'
Constant inlined printu::op#15 = (const byte*) main::op12
Constant inlined main::r#24 = (byte) '-'
Constant inlined printu::op#16 = (const byte*) main::op16
Constant inlined main::r#25 = (byte) '+'
Constant inlined main::op9 = (const byte*) main::op8
Constant inlined main::op6 = (const byte*) main::op4
Constant inlined main::op7 = (const byte*) main::op4
Constant inlined main::op5 = (const byte*) main::op4
Constant inlined main::op2 = (const byte*) main::op
Constant inlined main::op3 = (const byte*) main::op
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@71(between main::@70 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @18
Adding NOP phi() at start of @45
Adding NOP phi() at start of @46
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@45
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of main::@29
Adding NOP phi() at start of main::@30
Adding NOP phi() at start of main::@31
Adding NOP phi() at start of main::@32
Adding NOP phi() at start of main::@33
Adding NOP phi() at start of main::@34
Adding NOP phi() at start of main::@35
Adding NOP phi() at start of main::@36
Adding NOP phi() at start of main::@37
Adding NOP phi() at start of main::@38
Adding NOP phi() at start of main::@39
Adding NOP phi() at start of main::@40
Adding NOP phi() at start of main::@41
Adding NOP phi() at start of main::@43
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of printu::@6
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 printu:21 printu:30 printu:41 printu:52 print_ln:54 printu:65 printu:74 printu:85 printu:96 print_ln:98 printu:109 printu:118 printu:129 printu:140 print_ln:142 printu:153 printu:162 printu:173 printu:184 print_ln:186 printu:197 printu:206 printu:217 printu:228 print_ln:230 
Calls in [printu] to print_char:249 print_uchar:252 print_str:254 print_uchar:257 print_char:259 print_char:263 
Calls in [print_uchar] to print_char:275 print_char:280 
Calls in [print_str] to print_char:290 
Calls in [print_cls] to memset:294 

Created 36 initial phi equivalence classes
Coalesced [17] print_char_cursor#159 ← print_char_cursor#121
Coalesced [18] printu::a#32 ← printu::a#0
Coalesced [19] printu::b#31 ← printu::b#0
Coalesced [20] printu::res#36 ← printu::res#0
Coalesced [27] print_char_cursor#162 ← print_char_cursor#55
Coalesced [28] printu::a#35 ← printu::a#1
Coalesced [29] printu::res#39 ← printu::res#1
Coalesced (already) [37] print_char_cursor#163 ← print_char_cursor#55
Coalesced [38] printu::a#36 ← printu::a#2
Coalesced [39] printu::b#34 ← printu::b#2
Coalesced [40] printu::res#40 ← printu::res#2
Coalesced (already) [48] print_char_cursor#164 ← print_char_cursor#55
Coalesced [49] printu::a#37 ← printu::a#3
Coalesced [50] printu::b#35 ← printu::b#3
Coalesced [51] printu::res#41 ← printu::res#3
Coalesced [53] print_line_cursor#90 ← print_line_cursor#27
Not coalescing [61] print_char_cursor#165 ← print_line_cursor#1
Coalesced [62] printu::a#38 ← printu::a#4
Coalesced [63] printu::b#36 ← printu::b#4
Coalesced [64] printu::res#42 ← printu::res#4
Coalesced (already) [71] print_char_cursor#166 ← print_char_cursor#55
Coalesced [72] printu::a#39 ← printu::a#5
Coalesced [73] printu::res#43 ← printu::res#5
Coalesced (already) [81] print_char_cursor#167 ← print_char_cursor#55
Coalesced [82] printu::a#40 ← printu::a#6
Coalesced [83] printu::b#37 ← printu::b#6
Coalesced [84] printu::res#44 ← printu::res#6
Coalesced (already) [92] print_char_cursor#168 ← print_char_cursor#55
Coalesced [93] printu::a#41 ← printu::a#7
Coalesced [94] printu::b#38 ← printu::b#7
Coalesced [95] printu::res#45 ← printu::res#7
Coalesced [97] print_line_cursor#91 ← print_line_cursor#1
Not coalescing [105] print_char_cursor#149 ← print_line_cursor#1
Coalesced [106] printu::a#22 ← printu::a#8
Coalesced [107] printu::b#24 ← printu::b#8
Coalesced [108] printu::res#26 ← printu::res#8
Coalesced (already) [115] print_char_cursor#150 ← print_char_cursor#55
Coalesced [116] printu::a#23 ← printu::a#9
Coalesced [117] printu::res#27 ← printu::res#9
Coalesced (already) [125] print_char_cursor#151 ← print_char_cursor#55
Coalesced [126] printu::a#24 ← printu::a#10
Coalesced [127] printu::b#25 ← printu::b#10
Coalesced [128] printu::res#28 ← printu::res#10
Coalesced (already) [136] print_char_cursor#152 ← print_char_cursor#55
Coalesced [137] printu::a#25 ← printu::a#11
Coalesced [138] printu::b#26 ← printu::b#11
Coalesced [139] printu::res#29 ← printu::res#11
Coalesced (already) [141] print_line_cursor#92 ← print_line_cursor#1
Not coalescing [149] print_char_cursor#153 ← print_line_cursor#1
Coalesced [150] printu::a#26 ← printu::a#12
Coalesced [151] printu::b#27 ← printu::b#12
Coalesced [152] printu::res#30 ← printu::res#12
Coalesced (already) [159] print_char_cursor#154 ← print_char_cursor#55
Coalesced [160] printu::a#27 ← printu::a#13
Coalesced [161] printu::res#31 ← printu::res#13
Coalesced (already) [169] print_char_cursor#155 ← print_char_cursor#55
Coalesced [170] printu::a#28 ← printu::a#14
Coalesced [171] printu::b#28 ← printu::b#14
Coalesced [172] printu::res#32 ← printu::res#14
Coalesced (already) [180] print_char_cursor#156 ← print_char_cursor#55
Coalesced [181] printu::a#29 ← printu::a#15
Coalesced [182] printu::b#29 ← printu::b#15
Coalesced [183] printu::res#33 ← printu::res#15
Coalesced (already) [185] print_line_cursor#93 ← print_line_cursor#1
Not coalescing [193] print_char_cursor#157 ← print_line_cursor#1
Coalesced [194] printu::a#30 ← printu::a#16
Coalesced [195] printu::b#30 ← printu::b#16
Coalesced [196] printu::res#34 ← printu::res#16
Coalesced (already) [203] print_char_cursor#158 ← print_char_cursor#55
Coalesced [204] printu::a#31 ← printu::a#17
Coalesced [205] printu::res#35 ← printu::res#17
Coalesced (already) [213] print_char_cursor#160 ← print_char_cursor#55
Coalesced [214] printu::a#33 ← printu::a#18
Coalesced [215] printu::b#32 ← printu::b#18
Coalesced [216] printu::res#37 ← printu::res#18
Coalesced (already) [224] print_char_cursor#161 ← print_char_cursor#55
Coalesced [225] printu::a#34 ← printu::a#19
Coalesced [226] printu::b#33 ← printu::b#19
Coalesced [227] printu::res#38 ← printu::res#19
Coalesced (already) [229] print_line_cursor#94 ← print_line_cursor#1
Coalesced [235] main::a#68 ← main::a#1
Not coalescing [236] print_char_cursor#148 ← print_line_cursor#1
Coalesced [237] main::i#68 ← main::i#1
Coalesced (already) [238] print_line_cursor#97 ← print_line_cursor#1
Coalesced [240] print_line_cursor#95 ← print_line_cursor#25
Coalesced (already) [246] print_line_cursor#96 ← print_line_cursor#1
Coalesced [248] print_char_cursor#145 ← print_char_cursor#96
Coalesced [251] print_uchar::b#4 ← print_uchar::b#0
Coalesced [256] print_uchar::b#5 ← print_uchar::b#1
Coalesced (already) [258] print_char_cursor#146 ← print_char_cursor#55
Coalesced [261] print_char::ch#10 ← print_char::ch#5
Coalesced (already) [262] print_char_cursor#147 ← print_char_cursor#55
Coalesced [273] print_char::ch#8 ← print_char::ch#1
Coalesced (already) [274] print_char_cursor#143 ← print_char_cursor#55
Coalesced [278] print_char::ch#9 ← print_char::ch#2
Coalesced (already) [279] print_char_cursor#144 ← print_char_cursor#55
Coalesced [283] print_str::str#6 ← print_str::str#1
Coalesced [288] print_char::ch#7 ← print_char::ch#0
Coalesced (already) [289] print_char_cursor#142 ← print_char_cursor#55
Coalesced [292] print_str::str#7 ← print_str::str#0
Coalesced [305] memset::dst#4 ← memset::dst#1
Coalesced down to 32 phi equivalence classes
Culled Empty Block (label) @18
Culled Empty Block (label) @46
Culled Empty Block (label) main::@45
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) printu::@6
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @45 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_str::@7 to print_str::@3
Renumbering block main::@43 to main::@42
Renumbering block main::@46 to main::@43
Renumbering block main::@47 to main::@44
Renumbering block main::@48 to main::@45
Renumbering block main::@49 to main::@46
Renumbering block main::@50 to main::@47
Renumbering block main::@51 to main::@48
Renumbering block main::@52 to main::@49
Renumbering block main::@53 to main::@50
Renumbering block main::@54 to main::@51
Renumbering block main::@55 to main::@52
Renumbering block main::@56 to main::@53
Renumbering block main::@57 to main::@54
Renumbering block main::@58 to main::@55
Renumbering block main::@59 to main::@56
Renumbering block main::@60 to main::@57
Renumbering block main::@61 to main::@58
Renumbering block main::@62 to main::@59
Renumbering block main::@63 to main::@60
Renumbering block main::@64 to main::@61
Renumbering block main::@65 to main::@62
Renumbering block main::@66 to main::@63
Renumbering block main::@67 to main::@64
Renumbering block main::@68 to main::@65
Renumbering block main::@69 to main::@66
Renumbering block main::@70 to main::@67
Renumbering block main::@71 to main::@68
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@46
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of main::@29
Adding NOP phi() at start of main::@51
Adding NOP phi() at start of main::@30
Adding NOP phi() at start of main::@31
Adding NOP phi() at start of main::@32
Adding NOP phi() at start of main::@33
Adding NOP phi() at start of main::@56
Adding NOP phi() at start of main::@34
Adding NOP phi() at start of main::@35
Adding NOP phi() at start of main::@36
Adding NOP phi() at start of main::@37
Adding NOP phi() at start of main::@61
Adding NOP phi() at start of main::@38
Adding NOP phi() at start of main::@39
Adding NOP phi() at start of main::@40
Adding NOP phi() at start of main::@41
Adding NOP phi() at start of main::@66
Adding NOP phi() at start of main::@42
Adding NOP phi() at start of printu::@4
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@68
  [6] (byte*) print_line_cursor#27 ← phi( main/(byte*) 1024 main::@68/(byte*) print_line_cursor#1 )
  [6] (byte) main::i#10 ← phi( main/(byte) 0 main::@68/(byte) main::i#1 )
  [6] (byte*) print_char_cursor#121 ← phi( main/(byte*) 1024 main::@68/(byte*) print_char_cursor#148 )
  [6] (byte) main::a#10 ← phi( main/(byte) 7 main::@68/(byte) main::a#1 )
  [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10
  [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2
  to:main::@22
main::@22: scope:[main]  from main::@1
  [9] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@22
  [10] (byte) main::r#41 ← phi( main::@1/(byte) '-' main::@22/(byte) '+' )
  [11] (byte) printu::a#0 ← (byte) main::a#10
  [12] (byte) printu::b#0 ← (byte) main::b#0
  [13] (byte) printu::res#0 ← (byte) main::r#41
  [14] call printu 
  to:main::@43
main::@43: scope:[main]  from main::@2
  [15] if((byte) main::a#10>=(byte) $37) goto main::@3
  to:main::@23
main::@23: scope:[main]  from main::@43
  [16] phi()
  to:main::@3
main::@3: scope:[main]  from main::@23 main::@43
  [17] (byte) main::r#42 ← phi( main::@23/(byte) '+' main::@43/(byte) '-' )
  [18] (byte) printu::a#1 ← (byte) main::a#10
  [19] (byte) printu::res#1 ← (byte) main::r#42
  [20] call printu 
  to:main::@44
main::@44: scope:[main]  from main::@3
  [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4
  to:main::@24
main::@24: scope:[main]  from main::@44
  [22] phi()
  to:main::@4
main::@4: scope:[main]  from main::@24 main::@44
  [23] (byte) main::r#43 ← phi( main::@24/(byte) '+' main::@44/(byte) '-' )
  [24] (byte) printu::a#2 ← (byte) main::a#10
  [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10)
  [26] (byte) printu::res#2 ← (byte) main::r#43
  [27] call printu 
  to:main::@45
main::@45: scope:[main]  from main::@4
  [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5
  to:main::@25
main::@25: scope:[main]  from main::@45
  [29] phi()
  to:main::@5
main::@5: scope:[main]  from main::@25 main::@45
  [30] (byte) main::r#44 ← phi( main::@25/(byte) '+' main::@45/(byte) '-' )
  [31] (byte) printu::a#3 ← (byte) main::a#10
  [32] (byte) printu::b#3 ← (byte) main::a#10
  [33] (byte) printu::res#3 ← (byte) main::r#44
  [34] call printu 
  to:main::@46
main::@46: scope:[main]  from main::@5
  [35] phi()
  [36] call print_ln 
  to:main::@47
main::@47: scope:[main]  from main::@46
  [37] if((byte) main::a#10<=(byte) main::b#0) goto main::@6
  to:main::@26
main::@26: scope:[main]  from main::@47
  [38] phi()
  to:main::@6
main::@6: scope:[main]  from main::@26 main::@47
  [39] (byte) main::r#45 ← phi( main::@26/(byte) '+' main::@47/(byte) '-' )
  [40] (byte) printu::a#4 ← (byte) main::a#10
  [41] (byte) printu::b#4 ← (byte) main::b#0
  [42] (byte) printu::res#4 ← (byte) main::r#45
  [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1
  [44] call printu 
  to:main::@48
main::@48: scope:[main]  from main::@6
  [45] if((byte) main::a#10<(byte) $37+(byte) 1) goto main::@7
  to:main::@27
main::@27: scope:[main]  from main::@48
  [46] phi()
  to:main::@7
main::@7: scope:[main]  from main::@27 main::@48
  [47] (byte) main::r#46 ← phi( main::@27/(byte) '+' main::@48/(byte) '-' )
  [48] (byte) printu::a#5 ← (byte) main::a#10
  [49] (byte) printu::res#5 ← (byte) main::r#46
  [50] call printu 
  to:main::@49
main::@49: scope:[main]  from main::@7
  [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8
  to:main::@28
main::@28: scope:[main]  from main::@49
  [52] phi()
  to:main::@8
main::@8: scope:[main]  from main::@28 main::@49
  [53] (byte) main::r#47 ← phi( main::@28/(byte) '+' main::@49/(byte) '-' )
  [54] (byte) printu::a#6 ← (byte) main::a#10
  [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10)
  [56] (byte) printu::res#6 ← (byte) main::r#47
  [57] call printu 
  to:main::@50
main::@50: scope:[main]  from main::@8
  [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9
  to:main::@29
main::@29: scope:[main]  from main::@50
  [59] phi()
  to:main::@9
main::@9: scope:[main]  from main::@29 main::@50
  [60] (byte) main::r#48 ← phi( main::@29/(byte) '+' main::@50/(byte) '-' )
  [61] (byte) printu::a#7 ← (byte) main::a#10
  [62] (byte) printu::b#7 ← (byte) main::a#10
  [63] (byte) printu::res#7 ← (byte) main::r#48
  [64] call printu 
  to:main::@51
main::@51: scope:[main]  from main::@9
  [65] phi()
  [66] call print_ln 
  to:main::@52
main::@52: scope:[main]  from main::@51
  [67] if((byte) main::a#10>(byte) main::b#0) goto main::@10
  to:main::@30
main::@30: scope:[main]  from main::@52
  [68] phi()
  to:main::@10
main::@10: scope:[main]  from main::@30 main::@52
  [69] (byte) main::r#49 ← phi( main::@30/(byte) '+' main::@52/(byte) '-' )
  [70] (byte) printu::a#8 ← (byte) main::a#10
  [71] (byte) printu::b#8 ← (byte) main::b#0
  [72] (byte) printu::res#8 ← (byte) main::r#49
  [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1
  [74] call printu 
  to:main::@53
main::@53: scope:[main]  from main::@10
  [75] if((byte) main::a#10>=(byte) $37+(byte) 1) goto main::@11
  to:main::@31
main::@31: scope:[main]  from main::@53
  [76] phi()
  to:main::@11
main::@11: scope:[main]  from main::@31 main::@53
  [77] (byte) main::r#50 ← phi( main::@31/(byte) '+' main::@53/(byte) '-' )
  [78] (byte) printu::a#9 ← (byte) main::a#10
  [79] (byte) printu::res#9 ← (byte) main::r#50
  [80] call printu 
  to:main::@54
main::@54: scope:[main]  from main::@11
  [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12
  to:main::@32
main::@32: scope:[main]  from main::@54
  [82] phi()
  to:main::@12
main::@12: scope:[main]  from main::@32 main::@54
  [83] (byte) main::r#51 ← phi( main::@32/(byte) '+' main::@54/(byte) '-' )
  [84] (byte) printu::a#10 ← (byte) main::a#10
  [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10)
  [86] (byte) printu::res#10 ← (byte) main::r#51
  [87] call printu 
  to:main::@55
main::@55: scope:[main]  from main::@12
  [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13
  to:main::@33
main::@33: scope:[main]  from main::@55
  [89] phi()
  to:main::@13
main::@13: scope:[main]  from main::@33 main::@55
  [90] (byte) main::r#52 ← phi( main::@33/(byte) '+' main::@55/(byte) '-' )
  [91] (byte) printu::a#11 ← (byte) main::a#10
  [92] (byte) printu::b#11 ← (byte) main::a#10
  [93] (byte) printu::res#11 ← (byte) main::r#52
  [94] call printu 
  to:main::@56
main::@56: scope:[main]  from main::@13
  [95] phi()
  [96] call print_ln 
  to:main::@57
main::@57: scope:[main]  from main::@56
  [97] if((byte) main::a#10<(byte) main::b#0) goto main::@14
  to:main::@34
main::@34: scope:[main]  from main::@57
  [98] phi()
  to:main::@14
main::@14: scope:[main]  from main::@34 main::@57
  [99] (byte) main::r#53 ← phi( main::@34/(byte) '+' main::@57/(byte) '-' )
  [100] (byte) printu::a#12 ← (byte) main::a#10
  [101] (byte) printu::b#12 ← (byte) main::b#0
  [102] (byte) printu::res#12 ← (byte) main::r#53
  [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1
  [104] call printu 
  to:main::@58
main::@58: scope:[main]  from main::@14
  [105] if((byte) main::a#10<(byte) $37) goto main::@15
  to:main::@35
main::@35: scope:[main]  from main::@58
  [106] phi()
  to:main::@15
main::@15: scope:[main]  from main::@35 main::@58
  [107] (byte) main::r#54 ← phi( main::@35/(byte) '+' main::@58/(byte) '-' )
  [108] (byte) printu::a#13 ← (byte) main::a#10
  [109] (byte) printu::res#13 ← (byte) main::r#54
  [110] call printu 
  to:main::@59
main::@59: scope:[main]  from main::@15
  [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16
  to:main::@36
main::@36: scope:[main]  from main::@59
  [112] phi()
  to:main::@16
main::@16: scope:[main]  from main::@36 main::@59
  [113] (byte) main::r#55 ← phi( main::@36/(byte) '+' main::@59/(byte) '-' )
  [114] (byte) printu::a#14 ← (byte) main::a#10
  [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10)
  [116] (byte) printu::res#14 ← (byte) main::r#55
  [117] call printu 
  to:main::@60
main::@60: scope:[main]  from main::@16
  [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17
  to:main::@37
main::@37: scope:[main]  from main::@60
  [119] phi()
  to:main::@17
main::@17: scope:[main]  from main::@37 main::@60
  [120] (byte) main::r#56 ← phi( main::@37/(byte) '+' main::@60/(byte) '-' )
  [121] (byte) printu::a#15 ← (byte) main::a#10
  [122] (byte) printu::b#15 ← (byte) main::a#10
  [123] (byte) printu::res#15 ← (byte) main::r#56
  [124] call printu 
  to:main::@61
main::@61: scope:[main]  from main::@17
  [125] phi()
  [126] call print_ln 
  to:main::@62
main::@62: scope:[main]  from main::@61
  [127] if((byte) main::a#10!=(byte) main::b#0) goto main::@18
  to:main::@38
main::@38: scope:[main]  from main::@62
  [128] phi()
  to:main::@18
main::@18: scope:[main]  from main::@38 main::@62
  [129] (byte) main::r#57 ← phi( main::@38/(byte) '+' main::@62/(byte) '-' )
  [130] (byte) printu::a#16 ← (byte) main::a#10
  [131] (byte) printu::b#16 ← (byte) main::b#0
  [132] (byte) printu::res#16 ← (byte) main::r#57
  [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1
  [134] call printu 
  to:main::@63
main::@63: scope:[main]  from main::@18
  [135] if((byte) main::a#10!=(byte) $37) goto main::@19
  to:main::@39
main::@39: scope:[main]  from main::@63
  [136] phi()
  to:main::@19
main::@19: scope:[main]  from main::@39 main::@63
  [137] (byte) main::r#58 ← phi( main::@39/(byte) '+' main::@63/(byte) '-' )
  [138] (byte) printu::a#17 ← (byte) main::a#10
  [139] (byte) printu::res#17 ← (byte) main::r#58
  [140] call printu 
  to:main::@64
main::@64: scope:[main]  from main::@19
  [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20
  to:main::@40
main::@40: scope:[main]  from main::@64
  [142] phi()
  to:main::@20
main::@20: scope:[main]  from main::@40 main::@64
  [143] (byte) main::r#59 ← phi( main::@40/(byte) '+' main::@64/(byte) '-' )
  [144] (byte) printu::a#18 ← (byte) main::a#10
  [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10)
  [146] (byte) printu::res#18 ← (byte) main::r#59
  [147] call printu 
  to:main::@65
main::@65: scope:[main]  from main::@20
  [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21
  to:main::@41
main::@41: scope:[main]  from main::@65
  [149] phi()
  to:main::@21
main::@21: scope:[main]  from main::@41 main::@65
  [150] (byte) main::r#60 ← phi( main::@41/(byte) '+' main::@65/(byte) '-' )
  [151] (byte) printu::a#19 ← (byte) main::a#10
  [152] (byte) printu::b#19 ← (byte) main::a#10
  [153] (byte) printu::res#19 ← (byte) main::r#60
  [154] call printu 
  to:main::@66
main::@66: scope:[main]  from main::@21
  [155] phi()
  [156] call print_ln 
  to:main::@67
main::@67: scope:[main]  from main::@66
  [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30
  [158] (byte) main::i#1 ← ++ (byte) main::i#10
  [159] if((byte) main::i#1!=(byte) 5) goto main::@68
  to:main::@42
main::@42: scope:[main]  from main::@42 main::@67
  [160] phi()
  to:main::@42
main::@68: scope:[main]  from main::@67
  [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@46 main::@51 main::@56 main::@61 main::@66
  [162] (byte*) print_line_cursor#25 ← phi( main::@46/(byte*) print_line_cursor#27 main::@51/(byte*) print_line_cursor#1 main::@56/(byte*) print_line_cursor#1 main::@61/(byte*) print_line_cursor#1 main::@66/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [163] (byte*) print_line_cursor#13 ← phi( print_ln/(byte*) print_line_cursor#25 print_ln::@1/(byte*) print_line_cursor#1 )
  [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28
  [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [166] return 
  to:@return

(void()) printu((byte) printu::a , (byte*) printu::op , (byte) printu::b , (byte) printu::res)
printu: scope:[printu]  from main::@10 main::@11 main::@12 main::@13 main::@14 main::@15 main::@16 main::@17 main::@18 main::@19 main::@2 main::@20 main::@21 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [167] (byte) printu::res#20 ← phi( main::@10/(byte) printu::res#8 main::@11/(byte) printu::res#9 main::@12/(byte) printu::res#10 main::@13/(byte) printu::res#11 main::@14/(byte) printu::res#12 main::@15/(byte) printu::res#13 main::@16/(byte) printu::res#14 main::@17/(byte) printu::res#15 main::@18/(byte) printu::res#16 main::@19/(byte) printu::res#17 main::@2/(byte) printu::res#0 main::@20/(byte) printu::res#18 main::@21/(byte) printu::res#19 main::@3/(byte) printu::res#1 main::@4/(byte) printu::res#2 main::@5/(byte) printu::res#3 main::@6/(byte) printu::res#4 main::@7/(byte) printu::res#5 main::@8/(byte) printu::res#6 main::@9/(byte) printu::res#7 )
  [167] (byte) printu::b#20 ← phi( main::@10/(byte) printu::b#8 main::@11/(byte) $37 main::@12/(byte) printu::b#10 main::@13/(byte) printu::b#11 main::@14/(byte) printu::b#12 main::@15/(byte) $37 main::@16/(byte) printu::b#14 main::@17/(byte) printu::b#15 main::@18/(byte) printu::b#16 main::@19/(byte) $37 main::@2/(byte) printu::b#0 main::@20/(byte) printu::b#18 main::@21/(byte) printu::b#19 main::@3/(byte) $37 main::@4/(byte) printu::b#2 main::@5/(byte) printu::b#3 main::@6/(byte) printu::b#4 main::@7/(byte) $37 main::@8/(byte) printu::b#6 main::@9/(byte) printu::b#7 )
  [167] (byte*) printu::op#20 ← phi( main::@10/(const byte*) main::op8 main::@11/(const byte*) main::op8 main::@12/(const byte*) main::op8 main::@13/(const byte*) main::op8 main::@14/(const byte*) main::op12 main::@15/(const byte*) main::op12 main::@16/(const byte*) main::op12 main::@17/(const byte*) main::op12 main::@18/(const byte*) main::op16 main::@19/(const byte*) main::op16 main::@2/(const byte*) main::op main::@20/(const byte*) main::op16 main::@21/(const byte*) main::op16 main::@3/(const byte*) main::op main::@4/(const byte*) main::op main::@5/(const byte*) main::op main::@6/(const byte*) main::op4 main::@7/(const byte*) main::op4 main::@8/(const byte*) main::op4 main::@9/(const byte*) main::op4 )
  [167] (byte) printu::a#20 ← phi( main::@10/(byte) printu::a#8 main::@11/(byte) printu::a#9 main::@12/(byte) printu::a#10 main::@13/(byte) printu::a#11 main::@14/(byte) printu::a#12 main::@15/(byte) printu::a#13 main::@16/(byte) printu::a#14 main::@17/(byte) printu::a#15 main::@18/(byte) printu::a#16 main::@19/(byte) printu::a#17 main::@2/(byte) printu::a#0 main::@20/(byte) printu::a#18 main::@21/(byte) printu::a#19 main::@3/(byte) printu::a#1 main::@4/(byte) printu::a#2 main::@5/(byte) printu::a#3 main::@6/(byte) printu::a#4 main::@7/(byte) printu::a#5 main::@8/(byte) printu::a#6 main::@9/(byte) printu::a#7 )
  [167] (byte*) print_char_cursor#96 ← phi( main::@10/(byte*) print_char_cursor#149 main::@11/(byte*) print_char_cursor#55 main::@12/(byte*) print_char_cursor#55 main::@13/(byte*) print_char_cursor#55 main::@14/(byte*) print_char_cursor#153 main::@15/(byte*) print_char_cursor#55 main::@16/(byte*) print_char_cursor#55 main::@17/(byte*) print_char_cursor#55 main::@18/(byte*) print_char_cursor#157 main::@19/(byte*) print_char_cursor#55 main::@2/(byte*) print_char_cursor#121 main::@20/(byte*) print_char_cursor#55 main::@21/(byte*) print_char_cursor#55 main::@3/(byte*) print_char_cursor#55 main::@4/(byte*) print_char_cursor#55 main::@5/(byte*) print_char_cursor#55 main::@6/(byte*) print_char_cursor#165 main::@7/(byte*) print_char_cursor#55 main::@8/(byte*) print_char_cursor#55 main::@9/(byte*) print_char_cursor#55 )
  [168] call print_char 
  to:printu::@1
printu::@1: scope:[printu]  from printu
  [169] (byte) print_uchar::b#0 ← (byte) printu::a#20
  [170] call print_uchar 
  to:printu::@2
printu::@2: scope:[printu]  from printu::@1
  [171] (byte*) print_str::str#1 ← (byte*) printu::op#20
  [172] call print_str 
  to:printu::@3
printu::@3: scope:[printu]  from printu::@2
  [173] (byte) print_uchar::b#1 ← (byte) printu::b#20
  [174] call print_uchar 
  to:printu::@4
printu::@4: scope:[printu]  from printu::@3
  [175] phi()
  [176] call print_char 
  to:printu::@5
printu::@5: scope:[printu]  from printu::@4
  [177] (byte) print_char::ch#5 ← (byte) printu::res#20
  [178] call print_char 
  to:printu::@return
printu::@return: scope:[printu]  from printu::@5
  [179] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1 printu printu::@4 printu::@5
  [180] (byte*) print_char_cursor#54 ← phi( print_str::@2/(byte*) print_char_cursor#55 print_uchar/(byte*) print_char_cursor#55 print_uchar::@1/(byte*) print_char_cursor#55 printu/(byte*) print_char_cursor#96 printu::@4/(byte*) print_char_cursor#55 printu::@5/(byte*) print_char_cursor#55 )
  [180] (byte) print_char::ch#6 ← phi( print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 printu/(byte) ' ' printu::@4/(byte) ' ' printu::@5/(byte) print_char::ch#5 )
  [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6
  [182] (byte*) print_char_cursor#55 ← ++ (byte*) print_char_cursor#54
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [183] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from printu::@1 printu::@3
  [184] (byte) print_uchar::b#2 ← phi( printu::@1/(byte) print_uchar::b#0 printu::@3/(byte) print_uchar::b#1 )
  [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [186] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [187] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [189] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [190] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [191] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from printu::@2
  [192] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [193] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@3/(byte*) print_str::str#0 )
  [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [195] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [197] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [198] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [199] phi()
  [200] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [201] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [202] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [203] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [205] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [207] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

null depth in calling loop Loop head: print_str::@1 tails: print_str::@3 blocks: print_str::@3 print_str::@2 print_str::@1  in scope print_char

VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::a
(byte) main::a#1 50.5
(byte) main::a#10 35.4503311258278
(byte) main::b
(byte) main::b#0 8.95967741935484
(byte) main::i
(byte) main::i#1 101.0
(byte) main::i#10 7.973684210526318
(byte) main::r
(byte) main::r#41 33.666666666666664
(byte) main::r#42 50.5
(byte) main::r#43 33.666666666666664
(byte) main::r#44 33.666666666666664
(byte) main::r#45 33.666666666666664
(byte) main::r#46 50.5
(byte) main::r#47 33.666666666666664
(byte) main::r#48 33.666666666666664
(byte) main::r#49 33.666666666666664
(byte) main::r#50 50.5
(byte) main::r#51 33.666666666666664
(byte) main::r#52 33.666666666666664
(byte) main::r#53 33.666666666666664
(byte) main::r#54 50.5
(byte) main::r#55 33.666666666666664
(byte) main::r#56 33.666666666666664
(byte) main::r#57 33.666666666666664
(byte) main::r#58 50.5
(byte) main::r#59 33.666666666666664
(byte) main::r#60 33.666666666666664
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 2000002.0
(byte) print_char::ch#1 20002.0
(byte) print_char::ch#2 20002.0
(byte) print_char::ch#5 2002.0
(byte) print_char::ch#6 1.1021005E7
(byte*) print_char_cursor
(byte*) print_char_cursor#121 25.25
(byte*) print_char_cursor#148 202.0
(byte*) print_char_cursor#149 202.0
(byte*) print_char_cursor#153 202.0
(byte*) print_char_cursor#157 202.0
(byte*) print_char_cursor#165 202.0
(byte*) print_char_cursor#54 1.0511504E7
(byte*) print_char_cursor#55 77786.86713286713
(byte*) print_char_cursor#96 3021.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 2351.6640625
(byte*) print_line_cursor#13 201003.0
(byte*) print_line_cursor#25 1506.0
(byte*) print_line_cursor#27 6.733333333333333
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 2000002.0
(byte*) print_str::str#1 5501.0
(byte*) print_str::str#2 1002501.25
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 20002.0
(byte~) print_uchar::$2 20002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 2002.0
(byte) print_uchar::b#1 2002.0
(byte) print_uchar::b#2 5501.0
(void()) printu((byte) printu::a , (byte*) printu::op , (byte) printu::b , (byte) printu::res)
(byte) printu::a
(byte) printu::a#0 67.33333333333333
(byte) printu::a#1 101.0
(byte) printu::a#10 67.33333333333333
(byte) printu::a#11 67.33333333333333
(byte) printu::a#12 50.5
(byte) printu::a#13 101.0
(byte) printu::a#14 67.33333333333333
(byte) printu::a#15 67.33333333333333
(byte) printu::a#16 50.5
(byte) printu::a#17 101.0
(byte) printu::a#18 67.33333333333333
(byte) printu::a#19 67.33333333333333
(byte) printu::a#2 67.33333333333333
(byte) printu::a#20 1510.5
(byte) printu::a#3 67.33333333333333
(byte) printu::a#4 50.5
(byte) printu::a#5 101.0
(byte) printu::a#6 67.33333333333333
(byte) printu::a#7 67.33333333333333
(byte) printu::a#8 50.5
(byte) printu::a#9 101.0
(byte) printu::b
(byte) printu::b#0 101.0
(byte) printu::b#10 101.0
(byte) printu::b#11 101.0
(byte) printu::b#12 67.33333333333333
(byte) printu::b#14 101.0
(byte) printu::b#15 101.0
(byte) printu::b#16 67.33333333333333
(byte) printu::b#18 101.0
(byte) printu::b#19 101.0
(byte) printu::b#2 101.0
(byte) printu::b#20 419.33333333333337
(byte) printu::b#3 101.0
(byte) printu::b#4 67.33333333333333
(byte) printu::b#6 101.0
(byte) printu::b#7 101.0
(byte) printu::b#8 67.33333333333333
(byte*) printu::op
(byte*) printu::op#20 250.25
(byte) printu::res
(byte) printu::res#0 202.0
(byte) printu::res#1 202.0
(byte) printu::res#10 202.0
(byte) printu::res#11 202.0
(byte) printu::res#12 101.0
(byte) printu::res#13 202.0
(byte) printu::res#14 202.0
(byte) printu::res#15 202.0
(byte) printu::res#16 101.0
(byte) printu::res#17 202.0
(byte) printu::res#18 202.0
(byte) printu::res#19 202.0
(byte) printu::res#2 202.0
(byte) printu::res#20 302.0999999999999
(byte) printu::res#3 202.0
(byte) printu::res#4 101.0
(byte) printu::res#5 202.0
(byte) printu::res#6 202.0
(byte) printu::res#7 202.0
(byte) printu::res#8 101.0
(byte) printu::res#9 202.0

Initial phi equivalence classes
[ main::a#10 main::a#1 ]
[ main::i#10 main::i#1 ]
[ main::r#41 ]
[ main::r#42 ]
[ main::r#43 ]
[ main::r#44 ]
[ main::r#45 ]
[ main::r#46 ]
[ main::r#47 ]
[ main::r#48 ]
[ main::r#49 ]
[ main::r#50 ]
[ main::r#51 ]
[ main::r#52 ]
[ main::r#53 ]
[ main::r#54 ]
[ main::r#55 ]
[ main::r#56 ]
[ main::r#57 ]
[ main::r#58 ]
[ main::r#59 ]
[ main::r#60 ]
[ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ]
[ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
[ printu::op#20 ]
[ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
[ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
[ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ]
[ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
Added variable main::b#0 to live range equivalence class [ main::b#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ main::a#10 main::a#1 ]
[ main::i#10 main::i#1 ]
[ main::r#41 ]
[ main::r#42 ]
[ main::r#43 ]
[ main::r#44 ]
[ main::r#45 ]
[ main::r#46 ]
[ main::r#47 ]
[ main::r#48 ]
[ main::r#49 ]
[ main::r#50 ]
[ main::r#51 ]
[ main::r#52 ]
[ main::r#53 ]
[ main::r#54 ]
[ main::r#55 ]
[ main::r#56 ]
[ main::r#57 ]
[ main::r#58 ]
[ main::r#59 ]
[ main::r#60 ]
[ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ]
[ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
[ printu::op#20 ]
[ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
[ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
[ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ]
[ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
[ main::b#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[1]:2 [ main::a#10 main::a#1 ]
Allocated zp[1]:3 [ main::i#10 main::i#1 ]
Allocated zp[1]:4 [ main::r#41 ]
Allocated zp[1]:5 [ main::r#42 ]
Allocated zp[1]:6 [ main::r#43 ]
Allocated zp[1]:7 [ main::r#44 ]
Allocated zp[1]:8 [ main::r#45 ]
Allocated zp[1]:9 [ main::r#46 ]
Allocated zp[1]:10 [ main::r#47 ]
Allocated zp[1]:11 [ main::r#48 ]
Allocated zp[1]:12 [ main::r#49 ]
Allocated zp[1]:13 [ main::r#50 ]
Allocated zp[1]:14 [ main::r#51 ]
Allocated zp[1]:15 [ main::r#52 ]
Allocated zp[1]:16 [ main::r#53 ]
Allocated zp[1]:17 [ main::r#54 ]
Allocated zp[1]:18 [ main::r#55 ]
Allocated zp[1]:19 [ main::r#56 ]
Allocated zp[1]:20 [ main::r#57 ]
Allocated zp[1]:21 [ main::r#58 ]
Allocated zp[1]:22 [ main::r#59 ]
Allocated zp[1]:23 [ main::r#60 ]
Allocated zp[2]:24 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ]
Allocated zp[1]:26 [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
Allocated zp[2]:27 [ printu::op#20 ]
Allocated zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
Allocated zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
Allocated zp[1]:31 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ]
Allocated zp[2]:32 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ]
Allocated zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[2]:35 [ print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated zp[2]:37 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:39 [ main::b#0 ]
Allocated zp[1]:40 [ print_uchar::$0 ]
Allocated zp[1]:41 [ print_uchar::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = $18
  .label print_char_cursor = $20
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label b = $27
    .label a = 2
    .label i = 3
    .label r = 4
    .label r_1 = 5
    .label r_2 = 6
    .label r_3 = 7
    .label r_4 = 8
    .label r_5 = 9
    .label r_6 = $a
    .label r_7 = $b
    .label r_8 = $c
    .label r_9 = $d
    .label r_10 = $e
    .label r_11 = $f
    .label r_12 = $10
    .label r_13 = $11
    .label r_14 = $12
    .label r_15 = $13
    .label r_16 = $14
    .label r_17 = $15
    .label r_18 = $16
    .label r_19 = $17
    // [5] call print_cls 
    // [199] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_line_cursor#27 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi (byte*) print_char_cursor#121 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::a#10 = (byte) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta.z a
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$ce
    sec
    sbc.z a
    sta.z b
    // [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcs __b2_from___b1
    // [9] phi from main::@1 to main::@22 [phi:main::@1->main::@22]
  __b22_from___b1:
    jmp __b22
    // main::@22
  __b22:
    // [10] phi from main::@22 to main::@2 [phi:main::@22->main::@2]
  __b2_from___b22:
    // [10] phi (byte) main::r#41 = (byte) '+' [phi:main::@22->main::@2#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b2
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [10] phi (byte) main::r#41 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b2
    // main::@2
  __b2:
    // [11] (byte) printu::a#0 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [12] (byte) printu::b#0 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [13] (byte) printu::res#0 ← (byte) main::r#41 -- vbuz1=vbuz2 
    lda.z r
    sta.z printu.res
    // [14] call printu 
    // [167] phi from main::@2 to printu [phi:main::@2->printu]
  printu_from___b2:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@2->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#121 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
    jmp __b43
    // main::@43
  __b43:
    // [15] if((byte) main::a#10>=(byte) $37) goto main::@3 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcs __b3_from___b43
    // [16] phi from main::@43 to main::@23 [phi:main::@43->main::@23]
  __b23_from___b43:
    jmp __b23
    // main::@23
  __b23:
    // [17] phi from main::@23 to main::@3 [phi:main::@23->main::@3]
  __b3_from___b23:
    // [17] phi (byte) main::r#42 = (byte) '+' [phi:main::@23->main::@3#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_1
    jmp __b3
    // [17] phi from main::@43 to main::@3 [phi:main::@43->main::@3]
  __b3_from___b43:
    // [17] phi (byte) main::r#42 = (byte) '-' [phi:main::@43->main::@3#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_1
    jmp __b3
    // main::@3
  __b3:
    // [18] (byte) printu::a#1 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [19] (byte) printu::res#1 ← (byte) main::r#42 -- vbuz1=vbuz2 
    lda.z r_1
    sta.z printu.res
    // [20] call printu 
    // [167] phi from main::@3 to printu [phi:main::@3->printu]
  printu_from___b3:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@3->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
    jmp __b44
    // main::@44
  __b44:
    // [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcs __b4_from___b44
    // [22] phi from main::@44 to main::@24 [phi:main::@44->main::@24]
  __b24_from___b44:
    jmp __b24
    // main::@24
  __b24:
    // [23] phi from main::@24 to main::@4 [phi:main::@24->main::@4]
  __b4_from___b24:
    // [23] phi (byte) main::r#43 = (byte) '+' [phi:main::@24->main::@4#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_2
    jmp __b4
    // [23] phi from main::@44 to main::@4 [phi:main::@44->main::@4]
  __b4_from___b44:
    // [23] phi (byte) main::r#43 = (byte) '-' [phi:main::@44->main::@4#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_2
    jmp __b4
    // main::@4
  __b4:
    // [24] (byte) printu::a#2 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [26] (byte) printu::res#2 ← (byte) main::r#43 -- vbuz1=vbuz2 
    lda.z r_2
    sta.z printu.res
    // [27] call printu 
    // [167] phi from main::@4 to printu [phi:main::@4->printu]
  printu_from___b4:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@4->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
    jmp __b45
    // main::@45
  __b45:
    // [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 -- vbuz1_ge_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b5_from___b45
    // [29] phi from main::@45 to main::@25 [phi:main::@45->main::@25]
  __b25_from___b45:
    jmp __b25
    // main::@25
  __b25:
    // [30] phi from main::@25 to main::@5 [phi:main::@25->main::@5]
  __b5_from___b25:
    // [30] phi (byte) main::r#44 = (byte) '+' [phi:main::@25->main::@5#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_3
    jmp __b5
    // [30] phi from main::@45 to main::@5 [phi:main::@45->main::@5]
  __b5_from___b45:
    // [30] phi (byte) main::r#44 = (byte) '-' [phi:main::@45->main::@5#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_3
    jmp __b5
    // main::@5
  __b5:
    // [31] (byte) printu::a#3 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [32] (byte) printu::b#3 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [33] (byte) printu::res#3 ← (byte) main::r#44 -- vbuz1=vbuz2 
    lda.z r_3
    sta.z printu.res
    // [34] call printu 
    // [167] phi from main::@5 to printu [phi:main::@5->printu]
  printu_from___b5:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@5->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
    // [35] phi from main::@5 to main::@46 [phi:main::@5->main::@46]
  __b46_from___b5:
    jmp __b46
    // main::@46
  __b46:
    // [36] call print_ln 
    // [162] phi from main::@46 to print_ln [phi:main::@46->print_ln]
  print_ln_from___b46:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#27 [phi:main::@46->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b47
    // main::@47
  __b47:
    // [37] if((byte) main::a#10<=(byte) main::b#0) goto main::@6 -- vbuz1_le_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcs __b6_from___b47
    // [38] phi from main::@47 to main::@26 [phi:main::@47->main::@26]
  __b26_from___b47:
    jmp __b26
    // main::@26
  __b26:
    // [39] phi from main::@26 to main::@6 [phi:main::@26->main::@6]
  __b6_from___b26:
    // [39] phi (byte) main::r#45 = (byte) '+' [phi:main::@26->main::@6#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_4
    jmp __b6
    // [39] phi from main::@47 to main::@6 [phi:main::@47->main::@6]
  __b6_from___b47:
    // [39] phi (byte) main::r#45 = (byte) '-' [phi:main::@47->main::@6#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_4
    jmp __b6
    // main::@6
  __b6:
    // [40] (byte) printu::a#4 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [41] (byte) printu::b#4 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [42] (byte) printu::res#4 ← (byte) main::r#45 -- vbuz1=vbuz2 
    lda.z r_4
    sta.z printu.res
    // [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [44] call printu 
    // [167] phi from main::@6 to printu [phi:main::@6->printu]
  printu_from___b6:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#4 [phi:main::@6->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#4 [phi:main::@6->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@6->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#4 [phi:main::@6->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#165 [phi:main::@6->printu#4] -- register_copy 
    jsr printu
    jmp __b48
    // main::@48
  __b48:
    // [45] if((byte) main::a#10<(byte) $37+(byte) 1) goto main::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcc __b7_from___b48
    // [46] phi from main::@48 to main::@27 [phi:main::@48->main::@27]
  __b27_from___b48:
    jmp __b27
    // main::@27
  __b27:
    // [47] phi from main::@27 to main::@7 [phi:main::@27->main::@7]
  __b7_from___b27:
    // [47] phi (byte) main::r#46 = (byte) '+' [phi:main::@27->main::@7#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_5
    jmp __b7
    // [47] phi from main::@48 to main::@7 [phi:main::@48->main::@7]
  __b7_from___b48:
    // [47] phi (byte) main::r#46 = (byte) '-' [phi:main::@48->main::@7#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_5
    jmp __b7
    // main::@7
  __b7:
    // [48] (byte) printu::a#5 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [49] (byte) printu::res#5 ← (byte) main::r#46 -- vbuz1=vbuz2 
    lda.z r_5
    sta.z printu.res
    // [50] call printu 
    // [167] phi from main::@7 to printu [phi:main::@7->printu]
  printu_from___b7:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#5 [phi:main::@7->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@7->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@7->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#5 [phi:main::@7->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@7->printu#4] -- register_copy 
    jsr printu
    jmp __b49
    // main::@49
  __b49:
    // [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 -- vbuz1_le_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcs __b8_from___b49
    // [52] phi from main::@49 to main::@28 [phi:main::@49->main::@28]
  __b28_from___b49:
    jmp __b28
    // main::@28
  __b28:
    // [53] phi from main::@28 to main::@8 [phi:main::@28->main::@8]
  __b8_from___b28:
    // [53] phi (byte) main::r#47 = (byte) '+' [phi:main::@28->main::@8#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_6
    jmp __b8
    // [53] phi from main::@49 to main::@8 [phi:main::@49->main::@8]
  __b8_from___b49:
    // [53] phi (byte) main::r#47 = (byte) '-' [phi:main::@49->main::@8#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_6
    jmp __b8
    // main::@8
  __b8:
    // [54] (byte) printu::a#6 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [56] (byte) printu::res#6 ← (byte) main::r#47 -- vbuz1=vbuz2 
    lda.z r_6
    sta.z printu.res
    // [57] call printu 
    // [167] phi from main::@8 to printu [phi:main::@8->printu]
  printu_from___b8:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#6 [phi:main::@8->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#6 [phi:main::@8->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@8->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#6 [phi:main::@8->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@8->printu#4] -- register_copy 
    jsr printu
    jmp __b50
    // main::@50
  __b50:
    // [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 -- vbuz1_le_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b9_from___b50
    // [59] phi from main::@50 to main::@29 [phi:main::@50->main::@29]
  __b29_from___b50:
    jmp __b29
    // main::@29
  __b29:
    // [60] phi from main::@29 to main::@9 [phi:main::@29->main::@9]
  __b9_from___b29:
    // [60] phi (byte) main::r#48 = (byte) '+' [phi:main::@29->main::@9#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_7
    jmp __b9
    // [60] phi from main::@50 to main::@9 [phi:main::@50->main::@9]
  __b9_from___b50:
    // [60] phi (byte) main::r#48 = (byte) '-' [phi:main::@50->main::@9#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_7
    jmp __b9
    // main::@9
  __b9:
    // [61] (byte) printu::a#7 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [62] (byte) printu::b#7 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [63] (byte) printu::res#7 ← (byte) main::r#48 -- vbuz1=vbuz2 
    lda.z r_7
    sta.z printu.res
    // [64] call printu 
    // [167] phi from main::@9 to printu [phi:main::@9->printu]
  printu_from___b9:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#7 [phi:main::@9->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#7 [phi:main::@9->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@9->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#7 [phi:main::@9->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@9->printu#4] -- register_copy 
    jsr printu
    // [65] phi from main::@9 to main::@51 [phi:main::@9->main::@51]
  __b51_from___b9:
    jmp __b51
    // main::@51
  __b51:
    // [66] call print_ln 
    // [162] phi from main::@51 to print_ln [phi:main::@51->print_ln]
  print_ln_from___b51:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@51->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b52
    // main::@52
  __b52:
    // [67] if((byte) main::a#10>(byte) main::b#0) goto main::@10 -- vbuz1_gt_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcc __b10_from___b52
    // [68] phi from main::@52 to main::@30 [phi:main::@52->main::@30]
  __b30_from___b52:
    jmp __b30
    // main::@30
  __b30:
    // [69] phi from main::@30 to main::@10 [phi:main::@30->main::@10]
  __b10_from___b30:
    // [69] phi (byte) main::r#49 = (byte) '+' [phi:main::@30->main::@10#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_8
    jmp __b10
    // [69] phi from main::@52 to main::@10 [phi:main::@52->main::@10]
  __b10_from___b52:
    // [69] phi (byte) main::r#49 = (byte) '-' [phi:main::@52->main::@10#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_8
    jmp __b10
    // main::@10
  __b10:
    // [70] (byte) printu::a#8 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [71] (byte) printu::b#8 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [72] (byte) printu::res#8 ← (byte) main::r#49 -- vbuz1=vbuz2 
    lda.z r_8
    sta.z printu.res
    // [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [74] call printu 
    // [167] phi from main::@10 to printu [phi:main::@10->printu]
  printu_from___b10:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#8 [phi:main::@10->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#8 [phi:main::@10->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@10->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#8 [phi:main::@10->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#149 [phi:main::@10->printu#4] -- register_copy 
    jsr printu
    jmp __b53
    // main::@53
  __b53:
    // [75] if((byte) main::a#10>=(byte) $37+(byte) 1) goto main::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcs __b11_from___b53
    // [76] phi from main::@53 to main::@31 [phi:main::@53->main::@31]
  __b31_from___b53:
    jmp __b31
    // main::@31
  __b31:
    // [77] phi from main::@31 to main::@11 [phi:main::@31->main::@11]
  __b11_from___b31:
    // [77] phi (byte) main::r#50 = (byte) '+' [phi:main::@31->main::@11#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_9
    jmp __b11
    // [77] phi from main::@53 to main::@11 [phi:main::@53->main::@11]
  __b11_from___b53:
    // [77] phi (byte) main::r#50 = (byte) '-' [phi:main::@53->main::@11#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_9
    jmp __b11
    // main::@11
  __b11:
    // [78] (byte) printu::a#9 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [79] (byte) printu::res#9 ← (byte) main::r#50 -- vbuz1=vbuz2 
    lda.z r_9
    sta.z printu.res
    // [80] call printu 
    // [167] phi from main::@11 to printu [phi:main::@11->printu]
  printu_from___b11:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#9 [phi:main::@11->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@11->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@11->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#9 [phi:main::@11->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@11->printu#4] -- register_copy 
    jsr printu
    jmp __b54
    // main::@54
  __b54:
    // [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 -- vbuz1_gt_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcc __b12_from___b54
    // [82] phi from main::@54 to main::@32 [phi:main::@54->main::@32]
  __b32_from___b54:
    jmp __b32
    // main::@32
  __b32:
    // [83] phi from main::@32 to main::@12 [phi:main::@32->main::@12]
  __b12_from___b32:
    // [83] phi (byte) main::r#51 = (byte) '+' [phi:main::@32->main::@12#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_10
    jmp __b12
    // [83] phi from main::@54 to main::@12 [phi:main::@54->main::@12]
  __b12_from___b54:
    // [83] phi (byte) main::r#51 = (byte) '-' [phi:main::@54->main::@12#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_10
    jmp __b12
    // main::@12
  __b12:
    // [84] (byte) printu::a#10 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [86] (byte) printu::res#10 ← (byte) main::r#51 -- vbuz1=vbuz2 
    lda.z r_10
    sta.z printu.res
    // [87] call printu 
    // [167] phi from main::@12 to printu [phi:main::@12->printu]
  printu_from___b12:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#10 [phi:main::@12->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#10 [phi:main::@12->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@12->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#10 [phi:main::@12->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@12->printu#4] -- register_copy 
    jsr printu
    jmp __b55
    // main::@55
  __b55:
    // [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 -- vbuz1_gt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b13_from___b55
    // [89] phi from main::@55 to main::@33 [phi:main::@55->main::@33]
  __b33_from___b55:
    jmp __b33
    // main::@33
  __b33:
    // [90] phi from main::@33 to main::@13 [phi:main::@33->main::@13]
  __b13_from___b33:
    // [90] phi (byte) main::r#52 = (byte) '+' [phi:main::@33->main::@13#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_11
    jmp __b13
    // [90] phi from main::@55 to main::@13 [phi:main::@55->main::@13]
  __b13_from___b55:
    // [90] phi (byte) main::r#52 = (byte) '-' [phi:main::@55->main::@13#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_11
    jmp __b13
    // main::@13
  __b13:
    // [91] (byte) printu::a#11 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [92] (byte) printu::b#11 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [93] (byte) printu::res#11 ← (byte) main::r#52 -- vbuz1=vbuz2 
    lda.z r_11
    sta.z printu.res
    // [94] call printu 
    // [167] phi from main::@13 to printu [phi:main::@13->printu]
  printu_from___b13:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#11 [phi:main::@13->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#11 [phi:main::@13->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@13->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#11 [phi:main::@13->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@13->printu#4] -- register_copy 
    jsr printu
    // [95] phi from main::@13 to main::@56 [phi:main::@13->main::@56]
  __b56_from___b13:
    jmp __b56
    // main::@56
  __b56:
    // [96] call print_ln 
    // [162] phi from main::@56 to print_ln [phi:main::@56->print_ln]
  print_ln_from___b56:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@56->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b57
    // main::@57
  __b57:
    // [97] if((byte) main::a#10<(byte) main::b#0) goto main::@14 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b14_from___b57
    // [98] phi from main::@57 to main::@34 [phi:main::@57->main::@34]
  __b34_from___b57:
    jmp __b34
    // main::@34
  __b34:
    // [99] phi from main::@34 to main::@14 [phi:main::@34->main::@14]
  __b14_from___b34:
    // [99] phi (byte) main::r#53 = (byte) '+' [phi:main::@34->main::@14#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_12
    jmp __b14
    // [99] phi from main::@57 to main::@14 [phi:main::@57->main::@14]
  __b14_from___b57:
    // [99] phi (byte) main::r#53 = (byte) '-' [phi:main::@57->main::@14#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_12
    jmp __b14
    // main::@14
  __b14:
    // [100] (byte) printu::a#12 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [101] (byte) printu::b#12 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [102] (byte) printu::res#12 ← (byte) main::r#53 -- vbuz1=vbuz2 
    lda.z r_12
    sta.z printu.res
    // [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [104] call printu 
    // [167] phi from main::@14 to printu [phi:main::@14->printu]
  printu_from___b14:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#12 [phi:main::@14->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#12 [phi:main::@14->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@14->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#12 [phi:main::@14->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#153 [phi:main::@14->printu#4] -- register_copy 
    jsr printu
    jmp __b58
    // main::@58
  __b58:
    // [105] if((byte) main::a#10<(byte) $37) goto main::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcc __b15_from___b58
    // [106] phi from main::@58 to main::@35 [phi:main::@58->main::@35]
  __b35_from___b58:
    jmp __b35
    // main::@35
  __b35:
    // [107] phi from main::@35 to main::@15 [phi:main::@35->main::@15]
  __b15_from___b35:
    // [107] phi (byte) main::r#54 = (byte) '+' [phi:main::@35->main::@15#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_13
    jmp __b15
    // [107] phi from main::@58 to main::@15 [phi:main::@58->main::@15]
  __b15_from___b58:
    // [107] phi (byte) main::r#54 = (byte) '-' [phi:main::@58->main::@15#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_13
    jmp __b15
    // main::@15
  __b15:
    // [108] (byte) printu::a#13 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [109] (byte) printu::res#13 ← (byte) main::r#54 -- vbuz1=vbuz2 
    lda.z r_13
    sta.z printu.res
    // [110] call printu 
    // [167] phi from main::@15 to printu [phi:main::@15->printu]
  printu_from___b15:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#13 [phi:main::@15->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@15->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@15->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#13 [phi:main::@15->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@15->printu#4] -- register_copy 
    jsr printu
    jmp __b59
    // main::@59
  __b59:
    // [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 -- vbuz1_lt_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcc __b16_from___b59
    // [112] phi from main::@59 to main::@36 [phi:main::@59->main::@36]
  __b36_from___b59:
    jmp __b36
    // main::@36
  __b36:
    // [113] phi from main::@36 to main::@16 [phi:main::@36->main::@16]
  __b16_from___b36:
    // [113] phi (byte) main::r#55 = (byte) '+' [phi:main::@36->main::@16#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_14
    jmp __b16
    // [113] phi from main::@59 to main::@16 [phi:main::@59->main::@16]
  __b16_from___b59:
    // [113] phi (byte) main::r#55 = (byte) '-' [phi:main::@59->main::@16#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_14
    jmp __b16
    // main::@16
  __b16:
    // [114] (byte) printu::a#14 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [116] (byte) printu::res#14 ← (byte) main::r#55 -- vbuz1=vbuz2 
    lda.z r_14
    sta.z printu.res
    // [117] call printu 
    // [167] phi from main::@16 to printu [phi:main::@16->printu]
  printu_from___b16:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#14 [phi:main::@16->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#14 [phi:main::@16->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@16->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#14 [phi:main::@16->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@16->printu#4] -- register_copy 
    jsr printu
    jmp __b60
    // main::@60
  __b60:
    // [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 -- vbuz1_lt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b17_from___b60
    // [119] phi from main::@60 to main::@37 [phi:main::@60->main::@37]
  __b37_from___b60:
    jmp __b37
    // main::@37
  __b37:
    // [120] phi from main::@37 to main::@17 [phi:main::@37->main::@17]
  __b17_from___b37:
    // [120] phi (byte) main::r#56 = (byte) '+' [phi:main::@37->main::@17#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_15
    jmp __b17
    // [120] phi from main::@60 to main::@17 [phi:main::@60->main::@17]
  __b17_from___b60:
    // [120] phi (byte) main::r#56 = (byte) '-' [phi:main::@60->main::@17#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_15
    jmp __b17
    // main::@17
  __b17:
    // [121] (byte) printu::a#15 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [122] (byte) printu::b#15 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [123] (byte) printu::res#15 ← (byte) main::r#56 -- vbuz1=vbuz2 
    lda.z r_15
    sta.z printu.res
    // [124] call printu 
    // [167] phi from main::@17 to printu [phi:main::@17->printu]
  printu_from___b17:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#15 [phi:main::@17->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#15 [phi:main::@17->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@17->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#15 [phi:main::@17->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@17->printu#4] -- register_copy 
    jsr printu
    // [125] phi from main::@17 to main::@61 [phi:main::@17->main::@61]
  __b61_from___b17:
    jmp __b61
    // main::@61
  __b61:
    // [126] call print_ln 
    // [162] phi from main::@61 to print_ln [phi:main::@61->print_ln]
  print_ln_from___b61:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@61->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b62
    // main::@62
  __b62:
    // [127] if((byte) main::a#10!=(byte) main::b#0) goto main::@18 -- vbuz1_neq_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bne __b18_from___b62
    // [128] phi from main::@62 to main::@38 [phi:main::@62->main::@38]
  __b38_from___b62:
    jmp __b38
    // main::@38
  __b38:
    // [129] phi from main::@38 to main::@18 [phi:main::@38->main::@18]
  __b18_from___b38:
    // [129] phi (byte) main::r#57 = (byte) '+' [phi:main::@38->main::@18#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_16
    jmp __b18
    // [129] phi from main::@62 to main::@18 [phi:main::@62->main::@18]
  __b18_from___b62:
    // [129] phi (byte) main::r#57 = (byte) '-' [phi:main::@62->main::@18#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_16
    jmp __b18
    // main::@18
  __b18:
    // [130] (byte) printu::a#16 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [131] (byte) printu::b#16 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [132] (byte) printu::res#16 ← (byte) main::r#57 -- vbuz1=vbuz2 
    lda.z r_16
    sta.z printu.res
    // [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [134] call printu 
    // [167] phi from main::@18 to printu [phi:main::@18->printu]
  printu_from___b18:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#16 [phi:main::@18->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#16 [phi:main::@18->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@18->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#16 [phi:main::@18->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#157 [phi:main::@18->printu#4] -- register_copy 
    jsr printu
    jmp __b63
    // main::@63
  __b63:
    // [135] if((byte) main::a#10!=(byte) $37) goto main::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$37
    cmp.z a
    bne __b19_from___b63
    // [136] phi from main::@63 to main::@39 [phi:main::@63->main::@39]
  __b39_from___b63:
    jmp __b39
    // main::@39
  __b39:
    // [137] phi from main::@39 to main::@19 [phi:main::@39->main::@19]
  __b19_from___b39:
    // [137] phi (byte) main::r#58 = (byte) '+' [phi:main::@39->main::@19#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_17
    jmp __b19
    // [137] phi from main::@63 to main::@19 [phi:main::@63->main::@19]
  __b19_from___b63:
    // [137] phi (byte) main::r#58 = (byte) '-' [phi:main::@63->main::@19#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_17
    jmp __b19
    // main::@19
  __b19:
    // [138] (byte) printu::a#17 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [139] (byte) printu::res#17 ← (byte) main::r#58 -- vbuz1=vbuz2 
    lda.z r_17
    sta.z printu.res
    // [140] call printu 
    // [167] phi from main::@19 to printu [phi:main::@19->printu]
  printu_from___b19:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#17 [phi:main::@19->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@19->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@19->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#17 [phi:main::@19->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@19->printu#4] -- register_copy 
    jsr printu
    jmp __b64
    // main::@64
  __b64:
    // [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bne __b20_from___b64
    // [142] phi from main::@64 to main::@40 [phi:main::@64->main::@40]
  __b40_from___b64:
    jmp __b40
    // main::@40
  __b40:
    // [143] phi from main::@40 to main::@20 [phi:main::@40->main::@20]
  __b20_from___b40:
    // [143] phi (byte) main::r#59 = (byte) '+' [phi:main::@40->main::@20#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_18
    jmp __b20
    // [143] phi from main::@64 to main::@20 [phi:main::@64->main::@20]
  __b20_from___b64:
    // [143] phi (byte) main::r#59 = (byte) '-' [phi:main::@64->main::@20#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_18
    jmp __b20
    // main::@20
  __b20:
    // [144] (byte) printu::a#18 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [146] (byte) printu::res#18 ← (byte) main::r#59 -- vbuz1=vbuz2 
    lda.z r_18
    sta.z printu.res
    // [147] call printu 
    // [167] phi from main::@20 to printu [phi:main::@20->printu]
  printu_from___b20:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#18 [phi:main::@20->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#18 [phi:main::@20->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@20->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#18 [phi:main::@20->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@20->printu#4] -- register_copy 
    jsr printu
    jmp __b65
    // main::@65
  __b65:
    // [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 -- vbuz1_neq_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bne __b21_from___b65
    // [149] phi from main::@65 to main::@41 [phi:main::@65->main::@41]
  __b41_from___b65:
    jmp __b41
    // main::@41
  __b41:
    // [150] phi from main::@41 to main::@21 [phi:main::@41->main::@21]
  __b21_from___b41:
    // [150] phi (byte) main::r#60 = (byte) '+' [phi:main::@41->main::@21#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r_19
    jmp __b21
    // [150] phi from main::@65 to main::@21 [phi:main::@65->main::@21]
  __b21_from___b65:
    // [150] phi (byte) main::r#60 = (byte) '-' [phi:main::@65->main::@21#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r_19
    jmp __b21
    // main::@21
  __b21:
    // [151] (byte) printu::a#19 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.a
    // [152] (byte) printu::b#19 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [153] (byte) printu::res#19 ← (byte) main::r#60 -- vbuz1=vbuz2 
    lda.z r_19
    sta.z printu.res
    // [154] call printu 
    // [167] phi from main::@21 to printu [phi:main::@21->printu]
  printu_from___b21:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#19 [phi:main::@21->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#19 [phi:main::@21->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@21->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#19 [phi:main::@21->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@21->printu#4] -- register_copy 
    jsr printu
    // [155] phi from main::@21 to main::@66 [phi:main::@21->main::@66]
  __b66_from___b21:
    jmp __b66
    // main::@66
  __b66:
    // [156] call print_ln 
    // [162] phi from main::@66 to print_ln [phi:main::@66->print_ln]
  print_ln_from___b66:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@66->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b67
    // main::@67
  __b67:
    // [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z a
    axs #-[$30]
    stx.z a
    // [158] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [159] if((byte) main::i#1!=(byte) 5) goto main::@68 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z i
    bne __b68
    // [160] phi from main::@42 main::@67 to main::@42 [phi:main::@42/main::@67->main::@42]
  __b42_from___b42:
  __b42_from___b67:
    jmp __b42
    // main::@42
  __b42:
    jmp __b42_from___b42
    // main::@68
  __b68:
    // [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@68 to main::@1 [phi:main::@68->main::@1]
  __b1_from___b68:
    // [6] phi (byte*) print_line_cursor#27 = (byte*) print_line_cursor#1 [phi:main::@68->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@68->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#121 = (byte*) print_char_cursor#148 [phi:main::@68->main::@1#2] -- register_copy 
    // [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@68->main::@1#3] -- register_copy 
    jmp __b1
    cs: .byte 7, $c7, $37, $97, $67
    op: .text "< "
    .byte 0
    op4: .text "> "
    .byte 0
    op8: .text "<="
    .byte 0
    op12: .text ">="
    .byte 0
    op16: .text "=="
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [163] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [163] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#25 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [166] return 
    rts
}
  // printu
// printu(byte zp($1a) a, byte* zp($1b) op, byte zp($1d) b, byte zp($1e) res)
printu: {
    .label a = $1a
    .label b = $1d
    .label res = $1e
    .label op = $1b
    // [168] call print_char 
    // [180] phi from printu to print_char [phi:printu->print_char]
  print_char_from_printu:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#96 [phi:printu->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b1
    // printu::@1
  __b1:
    // [169] (byte) print_uchar::b#0 ← (byte) printu::a#20 -- vbuz1=vbuz2 
    lda.z a
    sta.z print_uchar.b
    // [170] call print_uchar 
    // [184] phi from printu::@1 to print_uchar [phi:printu::@1->print_uchar]
  print_uchar_from___b1:
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:printu::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __b2
    // printu::@2
  __b2:
    // [171] (byte*) print_str::str#1 ← (byte*) printu::op#20 -- pbuz1=pbuz2 
    lda.z op
    sta.z print_str.str
    lda.z op+1
    sta.z print_str.str+1
    // [172] call print_str 
    // [192] phi from printu::@2 to print_str [phi:printu::@2->print_str]
  print_str_from___b2:
    jsr print_str
    jmp __b3
    // printu::@3
  __b3:
    // [173] (byte) print_uchar::b#1 ← (byte) printu::b#20 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [174] call print_uchar 
    // [184] phi from printu::@3 to print_uchar [phi:printu::@3->print_uchar]
  print_uchar_from___b3:
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:printu::@3->print_uchar#0] -- register_copy 
    jsr print_uchar
    // [175] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
  __b4_from___b3:
    jmp __b4
    // printu::@4
  __b4:
    // [176] call print_char 
    // [180] phi from printu::@4 to print_char [phi:printu::@4->print_char]
  print_char_from___b4:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@4->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b5
    // printu::@5
  __b5:
    // [177] (byte) print_char::ch#5 ← (byte) printu::res#20 -- vbuz1=vbuz2 
    lda.z res
    sta.z print_char.ch
    // [178] call print_char 
    // [180] phi from printu::@5 to print_char [phi:printu::@5->print_char]
  print_char_from___b5:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@5->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // printu::@return
  __breturn:
    // [179] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($1f) ch)
print_char: {
    .label ch = $1f
    // [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [182] (byte*) print_char_cursor#55 ← ++ (byte*) print_char_cursor#54 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [183] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($22) b)
print_uchar: {
    .label __0 = $28
    .label __2 = $29
    .label b = $22
    // [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [186] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [187] call print_char 
  // Table of hexadecimal digits
    // [180] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [189] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [190] call print_char 
    // [180] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [191] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($23) str)
print_str: {
    .label str = $23
    // [193] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [193] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [195] return 
    rts
    // print_str::@2
  __b2:
    // [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [197] call print_char 
    // [180] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_str::@2->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [198] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [200] call memset 
    // [202] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [201] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $25
    // [203] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [203] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [205] return 
    rts
    // memset::@2
  __b2:
    // [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [207] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [203] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [203] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] ( main:2 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::a#10 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#10 main::i#1 ]
Statement [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ main::b#0 ]
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
Statement [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  ) always clobbers reg byte a 
Statement [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  ) always clobbers reg byte a 
Statement [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  ) always clobbers reg byte a 
Statement [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 [ main::i#10 main::a#1 print_line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [171] (byte*) print_str::str#1 ← (byte*) printu::op#20 [ print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a 
Statement [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 [ print_char_cursor#54 ] ( main:2::printu:14::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 print_char_cursor#54 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } }  main:2::printu:20::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  main:2::printu:50::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  main:2::printu:80::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 print_char_cursor#54 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  main:2::printu:110::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 print_char_cursor#54 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  main:2::printu:140::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#0 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#1 main::r#42 } }  main:2::printu:27::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#2 main::r#43 } }  main:2::printu:34::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#3 main::r#44 } }  main:2::printu:44::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#5 main::r#46 } }  main:2::printu:57::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#6 main::r#47 } }  main:2::printu:64::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#7 main::r#48 } }  main:2::printu:74::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#9 main::r#50 } }  main:2::printu:87::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#10 main::r#51 } }  main:2::printu:94::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#11 main::r#52 } }  main:2::printu:104::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#12 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#13 main::r#54 } }  main:2::printu:117::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#14 main::r#55 } }  main:2::printu:124::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#15 main::r#56 } }  main:2::printu:134::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#16 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#17 main::r#58 } }  main:2::printu:147::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#18 main::r#59 } }  main:2::printu:154::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#19 main::r#60 } }  main:2::printu:14::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::a#10 main::a#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:39 [ main::b#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:26 [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#55 print_uchar::$2 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#55 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a reg byte y 
Statement [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#55 print_char::ch#0 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte a reg byte y 
Statement [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] ( main:2 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] { }  ) always clobbers reg byte a 
Statement [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  ) always clobbers reg byte a 
Statement [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  ) always clobbers reg byte a 
Statement [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  ) always clobbers reg byte a 
Statement [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  ) always clobbers reg byte a 
Statement [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 [ main::i#10 main::a#1 print_line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:3 [ main::i#10 main::i#1 ]
Statement [159] if((byte) main::i#1!=(byte) 5) goto main::@68 [ main::a#1 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [171] (byte*) print_str::str#1 ← (byte*) printu::op#20 [ print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a 
Statement [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 [ print_char_cursor#54 ] ( main:2::printu:14::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 print_char_cursor#54 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } }  main:2::printu:20::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  main:2::printu:50::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  main:2::printu:80::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 print_char_cursor#54 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  main:2::printu:110::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 print_char_cursor#54 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  main:2::printu:140::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#0 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#1 main::r#42 } }  main:2::printu:27::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#2 main::r#43 } }  main:2::printu:34::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#3 main::r#44 } }  main:2::printu:44::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#5 main::r#46 } }  main:2::printu:57::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#6 main::r#47 } }  main:2::printu:64::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#7 main::r#48 } }  main:2::printu:74::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#9 main::r#50 } }  main:2::printu:87::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#10 main::r#51 } }  main:2::printu:94::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#11 main::r#52 } }  main:2::printu:104::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#12 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#13 main::r#54 } }  main:2::printu:117::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#14 main::r#55 } }  main:2::printu:124::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#15 main::r#56 } }  main:2::printu:134::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#16 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#17 main::r#58 } }  main:2::printu:147::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#18 main::r#59 } }  main:2::printu:154::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#19 main::r#60 } }  main:2::printu:14::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte y 
Statement [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#55 print_uchar::$2 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#55 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a reg byte y 
Statement [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#55 print_char::ch#0 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte a reg byte y 
Statement [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] ( main:2 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] { }  ) always clobbers reg byte a 
Statement [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 main::r#43 printu::a#2 printu::b#2 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 main::r#43 printu::a#2 printu::b#2 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::r#43 ]
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  ) always clobbers reg byte a 
Statement [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#47 printu::a#6 printu::b#6 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#47 printu::a#6 printu::b#6 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ main::r#47 ]
Statement [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  ) always clobbers reg byte a 
Statement [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#51 printu::a#10 printu::b#10 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#51 printu::a#10 printu::b#10 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ main::r#51 ]
Statement [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  ) always clobbers reg byte a 
Statement [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#55 printu::a#14 printu::b#14 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#55 printu::a#14 printu::b#14 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ main::r#55 ]
Statement [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  ) always clobbers reg byte a 
Statement [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::r#59 printu::a#18 printu::b#18 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::r#59 printu::a#18 printu::b#18 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:22 [ main::r#59 ]
Statement [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 [ main::i#10 main::a#1 print_line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [159] if((byte) main::i#1!=(byte) 5) goto main::@68 [ main::a#1 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [171] (byte*) print_str::str#1 ← (byte*) printu::op#20 [ print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a 
Statement [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 [ print_char_cursor#54 ] ( main:2::printu:14::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 print_char_cursor#54 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } }  main:2::printu:20::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  main:2::printu:50::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  main:2::printu:80::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 print_char_cursor#54 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  main:2::printu:110::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 print_char_cursor#54 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  main:2::printu:140::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#0 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#1 main::r#42 } }  main:2::printu:27::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#2 main::r#43 } }  main:2::printu:34::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#3 main::r#44 } }  main:2::printu:44::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#5 main::r#46 } }  main:2::printu:57::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#6 main::r#47 } }  main:2::printu:64::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#7 main::r#48 } }  main:2::printu:74::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#9 main::r#50 } }  main:2::printu:87::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#10 main::r#51 } }  main:2::printu:94::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#11 main::r#52 } }  main:2::printu:104::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#12 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#13 main::r#54 } }  main:2::printu:117::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#14 main::r#55 } }  main:2::printu:124::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#15 main::r#56 } }  main:2::printu:134::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#16 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#17 main::r#58 } }  main:2::printu:147::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#18 main::r#59 } }  main:2::printu:154::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#19 main::r#60 } }  main:2::printu:14::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte y 
Statement [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#55 print_uchar::$2 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#55 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a reg byte y 
Statement [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#55 print_char::ch#0 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte a reg byte y 
Statement [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] ( main:2 [ main::a#10 print_char_cursor#121 main::i#10 print_line_cursor#27 main::b#0 ] { }  ) always clobbers reg byte a 
Statement [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 main::r#43 printu::a#2 printu::b#2 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 main::r#43 printu::a#2 printu::b#2 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  ) always clobbers reg byte y 
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#4 printu::b#4 printu::res#4 print_char_cursor#165 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  ) always clobbers reg byte a 
Statement [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#47 printu::a#6 printu::b#6 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#47 printu::a#6 printu::b#6 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  ) always clobbers reg byte y 
Statement [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#8 printu::b#8 printu::res#8 print_char_cursor#149 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  ) always clobbers reg byte a 
Statement [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#51 printu::a#10 printu::b#10 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#51 printu::a#10 printu::b#10 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  ) always clobbers reg byte y 
Statement [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#12 printu::b#12 printu::res#12 print_char_cursor#153 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  ) always clobbers reg byte a 
Statement [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#55 printu::a#14 printu::b#14 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 main::r#55 printu::a#14 printu::b#14 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  ) always clobbers reg byte y 
Statement [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#16 printu::b#16 printu::res#16 print_char_cursor#157 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  ) always clobbers reg byte a 
Statement [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a reg byte y 
Statement [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10) [ main::a#10 main::i#10 print_line_cursor#1 main::r#59 printu::a#18 printu::b#18 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 main::r#59 printu::a#18 printu::b#18 print_char_cursor#55 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  ) always clobbers reg byte y 
Statement [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] ( main:2 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { }  ) always clobbers reg byte a 
Statement [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 [ main::i#10 main::a#1 print_line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [159] if((byte) main::i#1!=(byte) 5) goto main::@68 [ main::a#1 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] ( main:2 [ main::a#1 print_char_cursor#148 main::i#1 print_line_cursor#1 ] { }  ) always clobbers reg byte a 
Statement [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#55 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#25 = print_line_cursor#27 } }  main:2::print_ln:66 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:96 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:126 [ main::a#10 main::i#10 main::b#0 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  main:2::print_ln:156 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 ] { { print_line_cursor#1 = print_line_cursor#25 } }  ) always clobbers reg byte a 
Statement [171] (byte*) print_str::str#1 ← (byte*) printu::op#20 [ print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#55 printu::b#20 printu::res#20 print_str::str#1 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a 
Statement [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 [ print_char_cursor#54 ] ( main:2::printu:14::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 print_char_cursor#54 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } }  main:2::printu:20::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:168 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } }  main:2::printu:50::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 print_char_cursor#54 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } }  main:2::printu:80::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 print_char_cursor#54 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } }  main:2::printu:110::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 print_char_cursor#54 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } }  main:2::printu:140::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:168 [ main::a#10 main::i#10 print_line_cursor#1 printu::a#20 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } }  main:2::printu:27::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } }  main:2::printu:34::print_char:176 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } }  main:2::printu:44::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } }  main:2::printu:57::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } }  main:2::printu:64::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } }  main:2::printu:74::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } }  main:2::printu:87::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } }  main:2::printu:94::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } }  main:2::printu:104::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } }  main:2::printu:117::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } }  main:2::printu:124::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } }  main:2::printu:134::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } }  main:2::printu:147::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } }  main:2::printu:154::print_char:176 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } }  main:2::printu:14::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#0 main::r#41 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#1 main::r#42 } }  main:2::printu:27::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#2 main::r#43 } }  main:2::printu:34::print_char:178 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#3 main::r#44 } }  main:2::printu:44::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#4 main::r#45 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#5 main::r#46 } }  main:2::printu:57::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#6 main::r#47 } }  main:2::printu:64::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#7 main::r#48 } }  main:2::printu:74::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#8 main::r#49 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#9 main::r#50 } }  main:2::printu:87::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#10 main::r#51 } }  main:2::printu:94::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#11 main::r#52 } }  main:2::printu:104::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#12 main::r#53 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#13 main::r#54 } }  main:2::printu:117::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#14 main::r#55 } }  main:2::printu:124::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#15 main::r#56 } }  main:2::printu:134::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#16 main::r#57 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#17 main::r#58 } }  main:2::printu:147::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#18 main::r#59 } }  main:2::printu:154::print_char:178 [ main::a#10 main::i#10 print_line_cursor#1 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#5 = print_char::ch#6 printu::res#20 printu::res#19 main::r#60 } }  main:2::printu:14::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:187 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_uchar::b#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174::print_char:190 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172::print_char:197 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_str::str#2 print_char_cursor#54 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte y 
Statement [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#1 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#1 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::b#2 print_uchar::$0 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#1 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#55 print_uchar::$2 ] ( main:2::printu:14::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#0 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#1 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#2 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#4 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#5 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#6 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#8 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#9 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#10 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#12 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#13 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#14 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#16 main::a#10 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#17 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#0 = print_uchar::b#2 printu::a#20 printu::a#18 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:170 [ main::a#10 main::i#10 print_line_cursor#1 printu::op#20 printu::b#20 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#0 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:14::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::res#0 = printu::res#20 main::r#41 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#0 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:27::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::res#2 = printu::res#20 main::r#43 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#2 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:34::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#3 main::r#44 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#3 printu::a#20 printu::a#3 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:44::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::res#20 = printu::res#4 main::r#45 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#4 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:57::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::res#20 = printu::res#6 main::r#47 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#6 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:64::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#20 = printu::res#7 main::r#48 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#7 printu::a#20 printu::a#7 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:74::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::res#20 = printu::res#8 main::r#49 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#8 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:87::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::res#10 = printu::res#20 main::r#51 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:94::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#11 = printu::res#20 main::r#52 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#11 printu::a#20 printu::a#11 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:104::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::res#12 = printu::res#20 main::r#53 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#12 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:117::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::res#14 = printu::res#20 main::r#55 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#14 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:124::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#15 = printu::res#20 main::r#56 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#15 printu::a#20 printu::a#15 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:134::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::res#16 = printu::res#20 main::r#57 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#16 main::b#0 } { print_char::ch#2 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:147::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::res#18 = printu::res#20 main::r#59 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#18 } { print_char::ch#2 = print_char::ch#6 } }  main:2::printu:154::print_uchar:174 [ main::a#10 main::i#10 print_line_cursor#1 printu::res#20 print_char_cursor#55 print_uchar::$2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::res#19 = printu::res#20 main::r#60 } { print_uchar::b#1 = print_uchar::b#2 printu::b#20 printu::b#19 printu::a#20 printu::a#19 main::a#10 } { print_char::ch#2 = print_char::ch#6 } }  ) always clobbers reg byte a 
Statement [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#55 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_str::str#2 ] { { print_char_cursor#55 = print_char_cursor#96 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } }  ) always clobbers reg byte a reg byte y 
Statement [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#55 print_char::ch#0 print_str::str#2 ] ( main:2::printu:14::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#121 = print_char_cursor#96 } { printu::a#0 = printu::a#20 main::a#10 } { printu::b#0 = printu::b#20 main::b#0 } { printu::res#0 = printu::res#20 main::r#41 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:20::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#1 = printu::a#20 main::a#10 } { printu::res#1 = printu::res#20 main::r#42 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:27::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#2 = printu::a#20 main::a#10 } { printu::b#2 = printu::b#20 } { printu::res#2 = printu::res#20 main::r#43 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:34::print_str:172 [ main::a#10 main::i#10 print_line_cursor#27 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#3 printu::a#20 printu::a#3 main::a#10 } { printu::res#20 = printu::res#3 main::r#44 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:44::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#165 = print_char_cursor#96 } { printu::a#20 = printu::a#4 main::a#10 } { printu::b#20 = printu::b#4 main::b#0 } { printu::res#20 = printu::res#4 main::r#45 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:50::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#5 main::a#10 } { printu::res#20 = printu::res#5 main::r#46 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:57::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#6 main::a#10 } { printu::b#20 = printu::b#6 } { printu::res#20 = printu::res#6 main::r#47 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:64::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#20 = printu::b#7 printu::a#20 printu::a#7 main::a#10 } { printu::res#20 = printu::res#7 main::r#48 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:74::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#149 = print_char_cursor#96 } { printu::a#20 = printu::a#8 main::a#10 } { printu::b#20 = printu::b#8 main::b#0 } { printu::res#20 = printu::res#8 main::r#49 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:80::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#20 = printu::a#9 main::a#10 } { printu::res#20 = printu::res#9 main::r#50 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:87::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#10 = printu::a#20 main::a#10 } { printu::b#10 = printu::b#20 } { printu::res#10 = printu::res#20 main::r#51 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:94::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#11 = printu::b#20 printu::a#20 printu::a#11 main::a#10 } { printu::res#11 = printu::res#20 main::r#52 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:104::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#153 = print_char_cursor#96 } { printu::a#12 = printu::a#20 main::a#10 } { printu::b#12 = printu::b#20 main::b#0 } { printu::res#12 = printu::res#20 main::r#53 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:110::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#13 = printu::a#20 main::a#10 } { printu::res#13 = printu::res#20 main::r#54 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:117::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#14 = printu::a#20 main::a#10 } { printu::b#14 = printu::b#20 } { printu::res#14 = printu::res#20 main::r#55 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:124::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 main::b#0 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#15 = printu::b#20 printu::a#20 printu::a#15 main::a#10 } { printu::res#15 = printu::res#20 main::r#56 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:134::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#157 = print_char_cursor#96 } { printu::a#16 = printu::a#20 main::a#10 } { printu::b#16 = printu::b#20 main::b#0 } { printu::res#16 = printu::res#20 main::r#57 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } { print_char_cursor#54 = print_char_cursor#55 } }  main:2::printu:140::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#17 = printu::a#20 main::a#10 } { printu::res#17 = printu::res#20 main::r#58 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:147::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::a#18 = printu::a#20 main::a#10 } { printu::b#18 = printu::b#20 } { printu::res#18 = printu::res#20 main::r#59 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  main:2::printu:154::print_str:172 [ main::a#10 main::i#10 print_line_cursor#1 printu::b#20 printu::res#20 print_char_cursor#55 print_char::ch#0 print_str::str#2 ] { { print_char_cursor#54 = print_char_cursor#96 print_char_cursor#55 } { printu::b#19 = printu::b#20 printu::a#20 printu::a#19 main::a#10 } { printu::res#19 = printu::res#20 main::r#60 } { print_str::str#1 = printu::op#20 } { print_char::ch#0 = print_char::ch#6 } }  ) always clobbers reg byte a reg byte y 
Statement [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:200 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::a#10 main::a#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::i#10 main::i#1 ] : zp[1]:3 , 
Potential registers zp[1]:4 [ main::r#41 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::r#42 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::r#43 ] : zp[1]:6 , reg byte a , reg byte x , 
Potential registers zp[1]:7 [ main::r#44 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::r#45 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::r#46 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::r#47 ] : zp[1]:10 , reg byte a , reg byte x , 
Potential registers zp[1]:11 [ main::r#48 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ main::r#49 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::r#50 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ main::r#51 ] : zp[1]:14 , reg byte a , reg byte x , 
Potential registers zp[1]:15 [ main::r#52 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ main::r#53 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ main::r#54 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ main::r#55 ] : zp[1]:18 , reg byte a , reg byte x , 
Potential registers zp[1]:19 [ main::r#56 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ main::r#57 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ main::r#58 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ main::r#59 ] : zp[1]:22 , reg byte a , reg byte x , 
Potential registers zp[1]:23 [ main::r#60 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:24 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ] : zp[1]:26 , reg byte x , 
Potential registers zp[2]:27 [ printu::op#20 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ] : zp[1]:29 , reg byte x , 
Potential registers zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] : zp[1]:30 , reg byte x , 
Potential registers zp[1]:31 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:32 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:34 , reg byte x , 
Potential registers zp[2]:35 [ print_str::str#2 print_str::str#1 print_str::str#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ memset::dst#2 memset::dst#1 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ main::b#0 ] : zp[1]:39 , reg byte x , 
Potential registers zp[1]:40 [ print_uchar::$0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ print_uchar::$2 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 13,063,013: zp[1]:31 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ] 
Uplift Scope [] 10,593,347.12: zp[2]:32 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ] 204,867.4: zp[2]:24 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ] 
Uplift Scope [print_str] 3,008,004.25: zp[2]:35 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplift Scope [print_uchar] 20,002: zp[1]:40 [ print_uchar::$0 ] 20,002: zp[1]:41 [ print_uchar::$2 ] 9,505: zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [memset] 33,336.67: zp[2]:37 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [printu] 3,938.1: zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] 2,958.17: zp[1]:26 [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ] 1,799.67: zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ] 250.25: zp[2]:27 [ printu::op#20 ] 
Uplift Scope [main] 108.97: zp[1]:3 [ main::i#10 main::i#1 ] 85.95: zp[1]:2 [ main::a#10 main::a#1 ] 50.5: zp[1]:5 [ main::r#42 ] 50.5: zp[1]:9 [ main::r#46 ] 50.5: zp[1]:13 [ main::r#50 ] 50.5: zp[1]:17 [ main::r#54 ] 50.5: zp[1]:21 [ main::r#58 ] 33.67: zp[1]:4 [ main::r#41 ] 33.67: zp[1]:6 [ main::r#43 ] 33.67: zp[1]:7 [ main::r#44 ] 33.67: zp[1]:8 [ main::r#45 ] 33.67: zp[1]:10 [ main::r#47 ] 33.67: zp[1]:11 [ main::r#48 ] 33.67: zp[1]:12 [ main::r#49 ] 33.67: zp[1]:14 [ main::r#51 ] 33.67: zp[1]:15 [ main::r#52 ] 33.67: zp[1]:16 [ main::r#53 ] 33.67: zp[1]:18 [ main::r#55 ] 33.67: zp[1]:19 [ main::r#56 ] 33.67: zp[1]:20 [ main::r#57 ] 33.67: zp[1]:22 [ main::r#59 ] 33.67: zp[1]:23 [ main::r#60 ] 8.96: zp[1]:39 [ main::b#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [print_char] best 20315 combination reg byte a [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ] 
Uplifting [] best 20315 combination zp[2]:32 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ] zp[2]:24 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ] 
Uplifting [print_str] best 20315 combination zp[2]:35 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplifting [print_uchar] best 20307 combination reg byte a [ print_uchar::$0 ] reg byte a [ print_uchar::$2 ] zp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Limited combination testing to 10 combinations of 32 possible.
Uplifting [memset] best 20307 combination zp[2]:37 [ memset::dst#2 memset::dst#1 ] 
Uplifting [printu] best 19704 combination zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] reg byte x [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ] zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ] zp[2]:27 [ printu::op#20 ] 
Uplifting [RADIX] best 19704 combination 
Uplifting [print_ln] best 19704 combination 
Uplifting [print_cls] best 19704 combination 
Attempting to uplift remaining variables inzp[1]:34 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Uplifting [print_uchar] best 19696 combination reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Attempting to uplift remaining variables inzp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ]
Uplifting [printu] best 19696 combination zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] 
Attempting to uplift remaining variables inzp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
Uplifting [printu] best 19696 combination zp[1]:29 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::i#10 main::i#1 ]
Uplifting [main] best 19696 combination zp[1]:3 [ main::i#10 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::a#10 main::a#1 ]
Uplifting [main] best 19696 combination zp[1]:2 [ main::a#10 main::a#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::r#42 ]
Uplifting [main] best 19606 combination reg byte a [ main::r#42 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::r#46 ]
Uplifting [main] best 19516 combination reg byte a [ main::r#46 ] 
Attempting to uplift remaining variables inzp[1]:13 [ main::r#50 ]
Uplifting [main] best 19426 combination reg byte a [ main::r#50 ] 
Attempting to uplift remaining variables inzp[1]:17 [ main::r#54 ]
Uplifting [main] best 19336 combination reg byte a [ main::r#54 ] 
Attempting to uplift remaining variables inzp[1]:21 [ main::r#58 ]
Uplifting [main] best 19246 combination reg byte a [ main::r#58 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::r#41 ]
Uplifting [main] best 19156 combination reg byte y [ main::r#41 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::r#43 ]
Uplifting [main] best 19156 combination zp[1]:6 [ main::r#43 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::r#44 ]
Uplifting [main] best 19066 combination reg byte y [ main::r#44 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::r#45 ]
Uplifting [main] best 18976 combination reg byte y [ main::r#45 ] 
Attempting to uplift remaining variables inzp[1]:10 [ main::r#47 ]
Uplifting [main] best 18976 combination zp[1]:10 [ main::r#47 ] 
Attempting to uplift remaining variables inzp[1]:11 [ main::r#48 ]
Uplifting [main] best 18886 combination reg byte y [ main::r#48 ] 
Attempting to uplift remaining variables inzp[1]:12 [ main::r#49 ]
Uplifting [main] best 18796 combination reg byte y [ main::r#49 ] 
Attempting to uplift remaining variables inzp[1]:14 [ main::r#51 ]
Uplifting [main] best 18796 combination zp[1]:14 [ main::r#51 ] 
Attempting to uplift remaining variables inzp[1]:15 [ main::r#52 ]
Uplifting [main] best 18706 combination reg byte y [ main::r#52 ] 
Attempting to uplift remaining variables inzp[1]:16 [ main::r#53 ]
Uplifting [main] best 18616 combination reg byte y [ main::r#53 ] 
Attempting to uplift remaining variables inzp[1]:18 [ main::r#55 ]
Uplifting [main] best 18616 combination zp[1]:18 [ main::r#55 ] 
Attempting to uplift remaining variables inzp[1]:19 [ main::r#56 ]
Uplifting [main] best 18526 combination reg byte y [ main::r#56 ] 
Attempting to uplift remaining variables inzp[1]:20 [ main::r#57 ]
Uplifting [main] best 18436 combination reg byte y [ main::r#57 ] 
Attempting to uplift remaining variables inzp[1]:22 [ main::r#59 ]
Uplifting [main] best 18436 combination zp[1]:22 [ main::r#59 ] 
Attempting to uplift remaining variables inzp[1]:23 [ main::r#60 ]
Uplifting [main] best 18346 combination reg byte y [ main::r#60 ] 
Attempting to uplift remaining variables inzp[1]:39 [ main::b#0 ]
Uplifting [main] best 18346 combination zp[1]:39 [ main::b#0 ] 
Coalescing zero page register [ zp[1]:6 [ main::r#43 ] ] with [ zp[1]:30 [ printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ printu::op#20 ] ] with [ zp[2]:35 [ print_str::str#2 print_str::str#1 print_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 ] ] with [ zp[1]:10 [ main::r#47 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 main::r#47 ] ] with [ zp[1]:14 [ main::r#51 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 main::r#47 main::r#51 ] ] with [ zp[1]:18 [ main::r#55 ] ] - score: 1
Coalescing zero page register [ zp[1]:6 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 main::r#47 main::r#51 main::r#55 ] ] with [ zp[1]:22 [ main::r#59 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:27 [ printu::op#20 print_str::str#2 print_str::str#1 print_str::str#0 ] ]
Allocated (was zp[1]:6) zp[1]:4 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 main::r#47 main::r#51 main::r#55 main::r#59 ]
Allocated (was zp[2]:24) zp[2]:5 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ]
Allocated (was zp[1]:29) zp[1]:7 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
Allocated (was zp[2]:32) zp[2]:8 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ]
Allocated (was zp[2]:37) zp[2]:10 [ memset::dst#2 memset::dst#1 printu::op#20 print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated (was zp[1]:39) zp[1]:12 [ main::b#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 5
  .label print_char_cursor = 8
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label b = $c
    .label a = 2
    .label i = 3
    .label r = 4
    // [5] call print_cls 
    // [199] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi (byte*) print_line_cursor#27 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi (byte*) print_char_cursor#121 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::a#10 = (byte) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta.z a
    jmp __b1
    // main::@1
  __b1:
    // [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$ce
    sec
    sbc.z a
    sta.z b
    // [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcs __b2_from___b1
    // [9] phi from main::@1 to main::@22 [phi:main::@1->main::@22]
  __b22_from___b1:
    jmp __b22
    // main::@22
  __b22:
    // [10] phi from main::@22 to main::@2 [phi:main::@22->main::@2]
  __b2_from___b22:
    // [10] phi (byte) main::r#41 = (byte) '+' [phi:main::@22->main::@2#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b2
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [10] phi (byte) main::r#41 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b2
    // main::@2
  __b2:
    // [11] (byte) printu::a#0 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [12] (byte) printu::b#0 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [13] (byte) printu::res#0 ← (byte) main::r#41 -- vbuz1=vbuyy 
    sty.z printu.res
    // [14] call printu 
    // [167] phi from main::@2 to printu [phi:main::@2->printu]
  printu_from___b2:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@2->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#121 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
    jmp __b43
    // main::@43
  __b43:
    // [15] if((byte) main::a#10>=(byte) $37) goto main::@3 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcs __b3_from___b43
    // [16] phi from main::@43 to main::@23 [phi:main::@43->main::@23]
  __b23_from___b43:
    jmp __b23
    // main::@23
  __b23:
    // [17] phi from main::@23 to main::@3 [phi:main::@23->main::@3]
  __b3_from___b23:
    // [17] phi (byte) main::r#42 = (byte) '+' [phi:main::@23->main::@3#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b3
    // [17] phi from main::@43 to main::@3 [phi:main::@43->main::@3]
  __b3_from___b43:
    // [17] phi (byte) main::r#42 = (byte) '-' [phi:main::@43->main::@3#0] -- vbuaa=vbuc1 
    lda #'-'
    jmp __b3
    // main::@3
  __b3:
    // [18] (byte) printu::a#1 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [19] (byte) printu::res#1 ← (byte) main::r#42 -- vbuz1=vbuaa 
    sta.z printu.res
    // [20] call printu 
    // [167] phi from main::@3 to printu [phi:main::@3->printu]
  printu_from___b3:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@3->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
    jmp __b44
    // main::@44
  __b44:
    // [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcs __b4_from___b44
    // [22] phi from main::@44 to main::@24 [phi:main::@44->main::@24]
  __b24_from___b44:
    jmp __b24
    // main::@24
  __b24:
    // [23] phi from main::@24 to main::@4 [phi:main::@24->main::@4]
  __b4_from___b24:
    // [23] phi (byte) main::r#43 = (byte) '+' [phi:main::@24->main::@4#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b4
    // [23] phi from main::@44 to main::@4 [phi:main::@44->main::@4]
  __b4_from___b44:
    // [23] phi (byte) main::r#43 = (byte) '-' [phi:main::@44->main::@4#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b4
    // main::@4
  __b4:
    // [24] (byte) printu::a#2 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [26] (byte) printu::res#2 ← (byte) main::r#43
    // [27] call printu 
    // [167] phi from main::@4 to printu [phi:main::@4->printu]
  printu_from___b4:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@4->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
    jmp __b45
    // main::@45
  __b45:
    // [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 -- vbuz1_ge_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b5_from___b45
    // [29] phi from main::@45 to main::@25 [phi:main::@45->main::@25]
  __b25_from___b45:
    jmp __b25
    // main::@25
  __b25:
    // [30] phi from main::@25 to main::@5 [phi:main::@25->main::@5]
  __b5_from___b25:
    // [30] phi (byte) main::r#44 = (byte) '+' [phi:main::@25->main::@5#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b5
    // [30] phi from main::@45 to main::@5 [phi:main::@45->main::@5]
  __b5_from___b45:
    // [30] phi (byte) main::r#44 = (byte) '-' [phi:main::@45->main::@5#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b5
    // main::@5
  __b5:
    // [31] (byte) printu::a#3 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [32] (byte) printu::b#3 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [33] (byte) printu::res#3 ← (byte) main::r#44 -- vbuz1=vbuyy 
    sty.z printu.res
    // [34] call printu 
    // [167] phi from main::@5 to printu [phi:main::@5->printu]
  printu_from___b5:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@5->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
    // [35] phi from main::@5 to main::@46 [phi:main::@5->main::@46]
  __b46_from___b5:
    jmp __b46
    // main::@46
  __b46:
    // [36] call print_ln 
    // [162] phi from main::@46 to print_ln [phi:main::@46->print_ln]
  print_ln_from___b46:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#27 [phi:main::@46->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b47
    // main::@47
  __b47:
    // [37] if((byte) main::a#10<=(byte) main::b#0) goto main::@6 -- vbuz1_le_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcs __b6_from___b47
    // [38] phi from main::@47 to main::@26 [phi:main::@47->main::@26]
  __b26_from___b47:
    jmp __b26
    // main::@26
  __b26:
    // [39] phi from main::@26 to main::@6 [phi:main::@26->main::@6]
  __b6_from___b26:
    // [39] phi (byte) main::r#45 = (byte) '+' [phi:main::@26->main::@6#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b6
    // [39] phi from main::@47 to main::@6 [phi:main::@47->main::@6]
  __b6_from___b47:
    // [39] phi (byte) main::r#45 = (byte) '-' [phi:main::@47->main::@6#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b6
    // main::@6
  __b6:
    // [40] (byte) printu::a#4 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [41] (byte) printu::b#4 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [42] (byte) printu::res#4 ← (byte) main::r#45 -- vbuz1=vbuyy 
    sty.z printu.res
    // [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [44] call printu 
    // [167] phi from main::@6 to printu [phi:main::@6->printu]
  printu_from___b6:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#4 [phi:main::@6->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#4 [phi:main::@6->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@6->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#4 [phi:main::@6->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#165 [phi:main::@6->printu#4] -- register_copy 
    jsr printu
    jmp __b48
    // main::@48
  __b48:
    // [45] if((byte) main::a#10<(byte) $37+(byte) 1) goto main::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcc __b7_from___b48
    // [46] phi from main::@48 to main::@27 [phi:main::@48->main::@27]
  __b27_from___b48:
    jmp __b27
    // main::@27
  __b27:
    // [47] phi from main::@27 to main::@7 [phi:main::@27->main::@7]
  __b7_from___b27:
    // [47] phi (byte) main::r#46 = (byte) '+' [phi:main::@27->main::@7#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b7
    // [47] phi from main::@48 to main::@7 [phi:main::@48->main::@7]
  __b7_from___b48:
    // [47] phi (byte) main::r#46 = (byte) '-' [phi:main::@48->main::@7#0] -- vbuaa=vbuc1 
    lda #'-'
    jmp __b7
    // main::@7
  __b7:
    // [48] (byte) printu::a#5 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [49] (byte) printu::res#5 ← (byte) main::r#46 -- vbuz1=vbuaa 
    sta.z printu.res
    // [50] call printu 
    // [167] phi from main::@7 to printu [phi:main::@7->printu]
  printu_from___b7:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#5 [phi:main::@7->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@7->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@7->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#5 [phi:main::@7->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@7->printu#4] -- register_copy 
    jsr printu
    jmp __b49
    // main::@49
  __b49:
    // [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 -- vbuz1_le_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcs __b8_from___b49
    // [52] phi from main::@49 to main::@28 [phi:main::@49->main::@28]
  __b28_from___b49:
    jmp __b28
    // main::@28
  __b28:
    // [53] phi from main::@28 to main::@8 [phi:main::@28->main::@8]
  __b8_from___b28:
    // [53] phi (byte) main::r#47 = (byte) '+' [phi:main::@28->main::@8#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b8
    // [53] phi from main::@49 to main::@8 [phi:main::@49->main::@8]
  __b8_from___b49:
    // [53] phi (byte) main::r#47 = (byte) '-' [phi:main::@49->main::@8#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b8
    // main::@8
  __b8:
    // [54] (byte) printu::a#6 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [56] (byte) printu::res#6 ← (byte) main::r#47
    // [57] call printu 
    // [167] phi from main::@8 to printu [phi:main::@8->printu]
  printu_from___b8:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#6 [phi:main::@8->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#6 [phi:main::@8->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@8->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#6 [phi:main::@8->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@8->printu#4] -- register_copy 
    jsr printu
    jmp __b50
    // main::@50
  __b50:
    // [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 -- vbuz1_le_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b9_from___b50
    // [59] phi from main::@50 to main::@29 [phi:main::@50->main::@29]
  __b29_from___b50:
    jmp __b29
    // main::@29
  __b29:
    // [60] phi from main::@29 to main::@9 [phi:main::@29->main::@9]
  __b9_from___b29:
    // [60] phi (byte) main::r#48 = (byte) '+' [phi:main::@29->main::@9#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b9
    // [60] phi from main::@50 to main::@9 [phi:main::@50->main::@9]
  __b9_from___b50:
    // [60] phi (byte) main::r#48 = (byte) '-' [phi:main::@50->main::@9#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b9
    // main::@9
  __b9:
    // [61] (byte) printu::a#7 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [62] (byte) printu::b#7 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [63] (byte) printu::res#7 ← (byte) main::r#48 -- vbuz1=vbuyy 
    sty.z printu.res
    // [64] call printu 
    // [167] phi from main::@9 to printu [phi:main::@9->printu]
  printu_from___b9:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#7 [phi:main::@9->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#7 [phi:main::@9->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@9->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#7 [phi:main::@9->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@9->printu#4] -- register_copy 
    jsr printu
    // [65] phi from main::@9 to main::@51 [phi:main::@9->main::@51]
  __b51_from___b9:
    jmp __b51
    // main::@51
  __b51:
    // [66] call print_ln 
    // [162] phi from main::@51 to print_ln [phi:main::@51->print_ln]
  print_ln_from___b51:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@51->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b52
    // main::@52
  __b52:
    // [67] if((byte) main::a#10>(byte) main::b#0) goto main::@10 -- vbuz1_gt_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcc __b10_from___b52
    // [68] phi from main::@52 to main::@30 [phi:main::@52->main::@30]
  __b30_from___b52:
    jmp __b30
    // main::@30
  __b30:
    // [69] phi from main::@30 to main::@10 [phi:main::@30->main::@10]
  __b10_from___b30:
    // [69] phi (byte) main::r#49 = (byte) '+' [phi:main::@30->main::@10#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b10
    // [69] phi from main::@52 to main::@10 [phi:main::@52->main::@10]
  __b10_from___b52:
    // [69] phi (byte) main::r#49 = (byte) '-' [phi:main::@52->main::@10#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b10
    // main::@10
  __b10:
    // [70] (byte) printu::a#8 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [71] (byte) printu::b#8 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [72] (byte) printu::res#8 ← (byte) main::r#49 -- vbuz1=vbuyy 
    sty.z printu.res
    // [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [74] call printu 
    // [167] phi from main::@10 to printu [phi:main::@10->printu]
  printu_from___b10:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#8 [phi:main::@10->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#8 [phi:main::@10->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@10->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#8 [phi:main::@10->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#149 [phi:main::@10->printu#4] -- register_copy 
    jsr printu
    jmp __b53
    // main::@53
  __b53:
    // [75] if((byte) main::a#10>=(byte) $37+(byte) 1) goto main::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcs __b11_from___b53
    // [76] phi from main::@53 to main::@31 [phi:main::@53->main::@31]
  __b31_from___b53:
    jmp __b31
    // main::@31
  __b31:
    // [77] phi from main::@31 to main::@11 [phi:main::@31->main::@11]
  __b11_from___b31:
    // [77] phi (byte) main::r#50 = (byte) '+' [phi:main::@31->main::@11#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b11
    // [77] phi from main::@53 to main::@11 [phi:main::@53->main::@11]
  __b11_from___b53:
    // [77] phi (byte) main::r#50 = (byte) '-' [phi:main::@53->main::@11#0] -- vbuaa=vbuc1 
    lda #'-'
    jmp __b11
    // main::@11
  __b11:
    // [78] (byte) printu::a#9 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [79] (byte) printu::res#9 ← (byte) main::r#50 -- vbuz1=vbuaa 
    sta.z printu.res
    // [80] call printu 
    // [167] phi from main::@11 to printu [phi:main::@11->printu]
  printu_from___b11:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#9 [phi:main::@11->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@11->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@11->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#9 [phi:main::@11->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@11->printu#4] -- register_copy 
    jsr printu
    jmp __b54
    // main::@54
  __b54:
    // [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 -- vbuz1_gt_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcc __b12_from___b54
    // [82] phi from main::@54 to main::@32 [phi:main::@54->main::@32]
  __b32_from___b54:
    jmp __b32
    // main::@32
  __b32:
    // [83] phi from main::@32 to main::@12 [phi:main::@32->main::@12]
  __b12_from___b32:
    // [83] phi (byte) main::r#51 = (byte) '+' [phi:main::@32->main::@12#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b12
    // [83] phi from main::@54 to main::@12 [phi:main::@54->main::@12]
  __b12_from___b54:
    // [83] phi (byte) main::r#51 = (byte) '-' [phi:main::@54->main::@12#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b12
    // main::@12
  __b12:
    // [84] (byte) printu::a#10 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [86] (byte) printu::res#10 ← (byte) main::r#51
    // [87] call printu 
    // [167] phi from main::@12 to printu [phi:main::@12->printu]
  printu_from___b12:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#10 [phi:main::@12->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#10 [phi:main::@12->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@12->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#10 [phi:main::@12->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@12->printu#4] -- register_copy 
    jsr printu
    jmp __b55
    // main::@55
  __b55:
    // [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 -- vbuz1_gt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b13_from___b55
    // [89] phi from main::@55 to main::@33 [phi:main::@55->main::@33]
  __b33_from___b55:
    jmp __b33
    // main::@33
  __b33:
    // [90] phi from main::@33 to main::@13 [phi:main::@33->main::@13]
  __b13_from___b33:
    // [90] phi (byte) main::r#52 = (byte) '+' [phi:main::@33->main::@13#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b13
    // [90] phi from main::@55 to main::@13 [phi:main::@55->main::@13]
  __b13_from___b55:
    // [90] phi (byte) main::r#52 = (byte) '-' [phi:main::@55->main::@13#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b13
    // main::@13
  __b13:
    // [91] (byte) printu::a#11 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [92] (byte) printu::b#11 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [93] (byte) printu::res#11 ← (byte) main::r#52 -- vbuz1=vbuyy 
    sty.z printu.res
    // [94] call printu 
    // [167] phi from main::@13 to printu [phi:main::@13->printu]
  printu_from___b13:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#11 [phi:main::@13->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#11 [phi:main::@13->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@13->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#11 [phi:main::@13->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@13->printu#4] -- register_copy 
    jsr printu
    // [95] phi from main::@13 to main::@56 [phi:main::@13->main::@56]
  __b56_from___b13:
    jmp __b56
    // main::@56
  __b56:
    // [96] call print_ln 
    // [162] phi from main::@56 to print_ln [phi:main::@56->print_ln]
  print_ln_from___b56:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@56->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b57
    // main::@57
  __b57:
    // [97] if((byte) main::a#10<(byte) main::b#0) goto main::@14 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b14_from___b57
    // [98] phi from main::@57 to main::@34 [phi:main::@57->main::@34]
  __b34_from___b57:
    jmp __b34
    // main::@34
  __b34:
    // [99] phi from main::@34 to main::@14 [phi:main::@34->main::@14]
  __b14_from___b34:
    // [99] phi (byte) main::r#53 = (byte) '+' [phi:main::@34->main::@14#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b14
    // [99] phi from main::@57 to main::@14 [phi:main::@57->main::@14]
  __b14_from___b57:
    // [99] phi (byte) main::r#53 = (byte) '-' [phi:main::@57->main::@14#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b14
    // main::@14
  __b14:
    // [100] (byte) printu::a#12 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [101] (byte) printu::b#12 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [102] (byte) printu::res#12 ← (byte) main::r#53 -- vbuz1=vbuyy 
    sty.z printu.res
    // [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [104] call printu 
    // [167] phi from main::@14 to printu [phi:main::@14->printu]
  printu_from___b14:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#12 [phi:main::@14->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#12 [phi:main::@14->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@14->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#12 [phi:main::@14->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#153 [phi:main::@14->printu#4] -- register_copy 
    jsr printu
    jmp __b58
    // main::@58
  __b58:
    // [105] if((byte) main::a#10<(byte) $37) goto main::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcc __b15_from___b58
    // [106] phi from main::@58 to main::@35 [phi:main::@58->main::@35]
  __b35_from___b58:
    jmp __b35
    // main::@35
  __b35:
    // [107] phi from main::@35 to main::@15 [phi:main::@35->main::@15]
  __b15_from___b35:
    // [107] phi (byte) main::r#54 = (byte) '+' [phi:main::@35->main::@15#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b15
    // [107] phi from main::@58 to main::@15 [phi:main::@58->main::@15]
  __b15_from___b58:
    // [107] phi (byte) main::r#54 = (byte) '-' [phi:main::@58->main::@15#0] -- vbuaa=vbuc1 
    lda #'-'
    jmp __b15
    // main::@15
  __b15:
    // [108] (byte) printu::a#13 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [109] (byte) printu::res#13 ← (byte) main::r#54 -- vbuz1=vbuaa 
    sta.z printu.res
    // [110] call printu 
    // [167] phi from main::@15 to printu [phi:main::@15->printu]
  printu_from___b15:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#13 [phi:main::@15->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@15->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@15->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#13 [phi:main::@15->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@15->printu#4] -- register_copy 
    jsr printu
    jmp __b59
    // main::@59
  __b59:
    // [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 -- vbuz1_lt_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcc __b16_from___b59
    // [112] phi from main::@59 to main::@36 [phi:main::@59->main::@36]
  __b36_from___b59:
    jmp __b36
    // main::@36
  __b36:
    // [113] phi from main::@36 to main::@16 [phi:main::@36->main::@16]
  __b16_from___b36:
    // [113] phi (byte) main::r#55 = (byte) '+' [phi:main::@36->main::@16#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b16
    // [113] phi from main::@59 to main::@16 [phi:main::@59->main::@16]
  __b16_from___b59:
    // [113] phi (byte) main::r#55 = (byte) '-' [phi:main::@59->main::@16#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b16
    // main::@16
  __b16:
    // [114] (byte) printu::a#14 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [116] (byte) printu::res#14 ← (byte) main::r#55
    // [117] call printu 
    // [167] phi from main::@16 to printu [phi:main::@16->printu]
  printu_from___b16:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#14 [phi:main::@16->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#14 [phi:main::@16->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@16->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#14 [phi:main::@16->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@16->printu#4] -- register_copy 
    jsr printu
    jmp __b60
    // main::@60
  __b60:
    // [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 -- vbuz1_lt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b17_from___b60
    // [119] phi from main::@60 to main::@37 [phi:main::@60->main::@37]
  __b37_from___b60:
    jmp __b37
    // main::@37
  __b37:
    // [120] phi from main::@37 to main::@17 [phi:main::@37->main::@17]
  __b17_from___b37:
    // [120] phi (byte) main::r#56 = (byte) '+' [phi:main::@37->main::@17#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b17
    // [120] phi from main::@60 to main::@17 [phi:main::@60->main::@17]
  __b17_from___b60:
    // [120] phi (byte) main::r#56 = (byte) '-' [phi:main::@60->main::@17#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b17
    // main::@17
  __b17:
    // [121] (byte) printu::a#15 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [122] (byte) printu::b#15 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [123] (byte) printu::res#15 ← (byte) main::r#56 -- vbuz1=vbuyy 
    sty.z printu.res
    // [124] call printu 
    // [167] phi from main::@17 to printu [phi:main::@17->printu]
  printu_from___b17:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#15 [phi:main::@17->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#15 [phi:main::@17->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@17->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#15 [phi:main::@17->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@17->printu#4] -- register_copy 
    jsr printu
    // [125] phi from main::@17 to main::@61 [phi:main::@17->main::@61]
  __b61_from___b17:
    jmp __b61
    // main::@61
  __b61:
    // [126] call print_ln 
    // [162] phi from main::@61 to print_ln [phi:main::@61->print_ln]
  print_ln_from___b61:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@61->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b62
    // main::@62
  __b62:
    // [127] if((byte) main::a#10!=(byte) main::b#0) goto main::@18 -- vbuz1_neq_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bne __b18_from___b62
    // [128] phi from main::@62 to main::@38 [phi:main::@62->main::@38]
  __b38_from___b62:
    jmp __b38
    // main::@38
  __b38:
    // [129] phi from main::@38 to main::@18 [phi:main::@38->main::@18]
  __b18_from___b38:
    // [129] phi (byte) main::r#57 = (byte) '+' [phi:main::@38->main::@18#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b18
    // [129] phi from main::@62 to main::@18 [phi:main::@62->main::@18]
  __b18_from___b62:
    // [129] phi (byte) main::r#57 = (byte) '-' [phi:main::@62->main::@18#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b18
    // main::@18
  __b18:
    // [130] (byte) printu::a#16 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [131] (byte) printu::b#16 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [132] (byte) printu::res#16 ← (byte) main::r#57 -- vbuz1=vbuyy 
    sty.z printu.res
    // [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [134] call printu 
    // [167] phi from main::@18 to printu [phi:main::@18->printu]
  printu_from___b18:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#16 [phi:main::@18->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#16 [phi:main::@18->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@18->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#16 [phi:main::@18->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#157 [phi:main::@18->printu#4] -- register_copy 
    jsr printu
    jmp __b63
    // main::@63
  __b63:
    // [135] if((byte) main::a#10!=(byte) $37) goto main::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$37
    cmp.z a
    bne __b19_from___b63
    // [136] phi from main::@63 to main::@39 [phi:main::@63->main::@39]
  __b39_from___b63:
    jmp __b39
    // main::@39
  __b39:
    // [137] phi from main::@39 to main::@19 [phi:main::@39->main::@19]
  __b19_from___b39:
    // [137] phi (byte) main::r#58 = (byte) '+' [phi:main::@39->main::@19#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b19
    // [137] phi from main::@63 to main::@19 [phi:main::@63->main::@19]
  __b19_from___b63:
    // [137] phi (byte) main::r#58 = (byte) '-' [phi:main::@63->main::@19#0] -- vbuaa=vbuc1 
    lda #'-'
    jmp __b19
    // main::@19
  __b19:
    // [138] (byte) printu::a#17 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [139] (byte) printu::res#17 ← (byte) main::r#58 -- vbuz1=vbuaa 
    sta.z printu.res
    // [140] call printu 
    // [167] phi from main::@19 to printu [phi:main::@19->printu]
  printu_from___b19:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#17 [phi:main::@19->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@19->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@19->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#17 [phi:main::@19->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@19->printu#4] -- register_copy 
    jsr printu
    jmp __b64
    // main::@64
  __b64:
    // [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bne __b20_from___b64
    // [142] phi from main::@64 to main::@40 [phi:main::@64->main::@40]
  __b40_from___b64:
    jmp __b40
    // main::@40
  __b40:
    // [143] phi from main::@40 to main::@20 [phi:main::@40->main::@20]
  __b20_from___b40:
    // [143] phi (byte) main::r#59 = (byte) '+' [phi:main::@40->main::@20#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b20
    // [143] phi from main::@64 to main::@20 [phi:main::@64->main::@20]
  __b20_from___b64:
    // [143] phi (byte) main::r#59 = (byte) '-' [phi:main::@64->main::@20#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    jmp __b20
    // main::@20
  __b20:
    // [144] (byte) printu::a#18 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [146] (byte) printu::res#18 ← (byte) main::r#59
    // [147] call printu 
    // [167] phi from main::@20 to printu [phi:main::@20->printu]
  printu_from___b20:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#18 [phi:main::@20->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#18 [phi:main::@20->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@20->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#18 [phi:main::@20->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@20->printu#4] -- register_copy 
    jsr printu
    jmp __b65
    // main::@65
  __b65:
    // [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 -- vbuz1_neq_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bne __b21_from___b65
    // [149] phi from main::@65 to main::@41 [phi:main::@65->main::@41]
  __b41_from___b65:
    jmp __b41
    // main::@41
  __b41:
    // [150] phi from main::@41 to main::@21 [phi:main::@41->main::@21]
  __b21_from___b41:
    // [150] phi (byte) main::r#60 = (byte) '+' [phi:main::@41->main::@21#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b21
    // [150] phi from main::@65 to main::@21 [phi:main::@65->main::@21]
  __b21_from___b65:
    // [150] phi (byte) main::r#60 = (byte) '-' [phi:main::@65->main::@21#0] -- vbuyy=vbuc1 
    ldy #'-'
    jmp __b21
    // main::@21
  __b21:
    // [151] (byte) printu::a#19 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [152] (byte) printu::b#19 ← (byte) main::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z printu.b
    // [153] (byte) printu::res#19 ← (byte) main::r#60 -- vbuz1=vbuyy 
    sty.z printu.res
    // [154] call printu 
    // [167] phi from main::@21 to printu [phi:main::@21->printu]
  printu_from___b21:
    // [167] phi (byte) printu::res#20 = (byte) printu::res#19 [phi:main::@21->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#19 [phi:main::@21->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@21->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#19 [phi:main::@21->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@21->printu#4] -- register_copy 
    jsr printu
    // [155] phi from main::@21 to main::@66 [phi:main::@21->main::@66]
  __b66_from___b21:
    jmp __b66
    // main::@66
  __b66:
    // [156] call print_ln 
    // [162] phi from main::@66 to print_ln [phi:main::@66->print_ln]
  print_ln_from___b66:
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@66->print_ln#0] -- register_copy 
    jsr print_ln
    jmp __b67
    // main::@67
  __b67:
    // [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z a
    axs #-[$30]
    stx.z a
    // [158] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [159] if((byte) main::i#1!=(byte) 5) goto main::@68 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z i
    bne __b68
    // [160] phi from main::@42 main::@67 to main::@42 [phi:main::@42/main::@67->main::@42]
  __b42_from___b42:
  __b42_from___b67:
    jmp __b42
    // main::@42
  __b42:
    jmp __b42_from___b42
    // main::@68
  __b68:
    // [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@68 to main::@1 [phi:main::@68->main::@1]
  __b1_from___b68:
    // [6] phi (byte*) print_line_cursor#27 = (byte*) print_line_cursor#1 [phi:main::@68->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@68->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#121 = (byte*) print_char_cursor#148 [phi:main::@68->main::@1#2] -- register_copy 
    // [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@68->main::@1#3] -- register_copy 
    jmp __b1
    cs: .byte 7, $c7, $37, $97, $67
    op: .text "< "
    .byte 0
    op4: .text "> "
    .byte 0
    op8: .text "<="
    .byte 0
    op12: .text ">="
    .byte 0
    op16: .text "=="
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [163] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [163] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#25 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [166] return 
    rts
}
  // printu
// printu(byte register(X) a, byte* zp($a) op, byte zp(7) b, byte zp(4) res)
printu: {
    .label b = 7
    .label res = 4
    .label op = $a
    // [168] call print_char 
    // [180] phi from printu to print_char [phi:printu->print_char]
  print_char_from_printu:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#96 [phi:printu->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b1
    // printu::@1
  __b1:
    // [169] (byte) print_uchar::b#0 ← (byte) printu::a#20
    // [170] call print_uchar 
    // [184] phi from printu::@1 to print_uchar [phi:printu::@1->print_uchar]
  print_uchar_from___b1:
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:printu::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __b2
    // printu::@2
  __b2:
    // [171] (byte*) print_str::str#1 ← (byte*) printu::op#20
    // [172] call print_str 
    // [192] phi from printu::@2 to print_str [phi:printu::@2->print_str]
  print_str_from___b2:
    jsr print_str
    jmp __b3
    // printu::@3
  __b3:
    // [173] (byte) print_uchar::b#1 ← (byte) printu::b#20 -- vbuxx=vbuz1 
    ldx.z b
    // [174] call print_uchar 
    // [184] phi from printu::@3 to print_uchar [phi:printu::@3->print_uchar]
  print_uchar_from___b3:
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:printu::@3->print_uchar#0] -- register_copy 
    jsr print_uchar
    // [175] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
  __b4_from___b3:
    jmp __b4
    // printu::@4
  __b4:
    // [176] call print_char 
    // [180] phi from printu::@4 to print_char [phi:printu::@4->print_char]
  print_char_from___b4:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@4->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b5
    // printu::@5
  __b5:
    // [177] (byte) print_char::ch#5 ← (byte) printu::res#20 -- vbuaa=vbuz1 
    lda.z res
    // [178] call print_char 
    // [180] phi from printu::@5 to print_char [phi:printu::@5->print_char]
  print_char_from___b5:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@5->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // printu::@return
  __breturn:
    // [179] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [182] (byte*) print_char_cursor#55 ← ++ (byte*) print_char_cursor#54 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [183] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [186] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [187] call print_char 
  // Table of hexadecimal digits
    // [180] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [189] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [190] call print_char 
    // [180] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [191] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($a) str)
print_str: {
    .label str = $a
    // [193] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [193] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [195] return 
    rts
    // print_str::@2
  __b2:
    // [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [197] call print_char 
    // [180] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_str::@2->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [198] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [200] call memset 
    // [202] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [201] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $a
    // [203] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [203] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [205] return 
    rts
    // memset::@2
  __b2:
    // [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [207] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [203] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [203] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b22
Removing instruction jmp __b2
Removing instruction jmp __b43
Removing instruction jmp __b23
Removing instruction jmp __b3
Removing instruction jmp __b44
Removing instruction jmp __b24
Removing instruction jmp __b4
Removing instruction jmp __b45
Removing instruction jmp __b25
Removing instruction jmp __b5
Removing instruction jmp __b46
Removing instruction jmp __b47
Removing instruction jmp __b26
Removing instruction jmp __b6
Removing instruction jmp __b48
Removing instruction jmp __b27
Removing instruction jmp __b7
Removing instruction jmp __b49
Removing instruction jmp __b28
Removing instruction jmp __b8
Removing instruction jmp __b50
Removing instruction jmp __b29
Removing instruction jmp __b9
Removing instruction jmp __b51
Removing instruction jmp __b52
Removing instruction jmp __b30
Removing instruction jmp __b10
Removing instruction jmp __b53
Removing instruction jmp __b31
Removing instruction jmp __b11
Removing instruction jmp __b54
Removing instruction jmp __b32
Removing instruction jmp __b12
Removing instruction jmp __b55
Removing instruction jmp __b33
Removing instruction jmp __b13
Removing instruction jmp __b56
Removing instruction jmp __b57
Removing instruction jmp __b34
Removing instruction jmp __b14
Removing instruction jmp __b58
Removing instruction jmp __b35
Removing instruction jmp __b15
Removing instruction jmp __b59
Removing instruction jmp __b36
Removing instruction jmp __b16
Removing instruction jmp __b60
Removing instruction jmp __b37
Removing instruction jmp __b17
Removing instruction jmp __b61
Removing instruction jmp __b62
Removing instruction jmp __b38
Removing instruction jmp __b18
Removing instruction jmp __b63
Removing instruction jmp __b39
Removing instruction jmp __b19
Removing instruction jmp __b64
Removing instruction jmp __b40
Removing instruction jmp __b20
Removing instruction jmp __b65
Removing instruction jmp __b41
Removing instruction jmp __b21
Removing instruction jmp __b66
Removing instruction jmp __b67
Removing instruction jmp __b42
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z a with TXA
Replacing instruction lda.z a with TXA
Replacing instruction lda.z a with TXA
Replacing instruction lda.z a with TXA
Replacing instruction lda.z a with TXA
Replacing label __b42_from___b42 with __b42
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b22_from___b1:
Removing instruction __b2_from___b22:
Removing instruction __b23_from___b43:
Removing instruction __b3_from___b23:
Removing instruction __b24_from___b44:
Removing instruction __b4_from___b24:
Removing instruction __b25_from___b45:
Removing instruction __b5_from___b25:
Removing instruction __b46_from___b5:
Removing instruction print_ln_from___b46:
Removing instruction __b26_from___b47:
Removing instruction __b6_from___b26:
Removing instruction __b27_from___b48:
Removing instruction __b7_from___b27:
Removing instruction __b28_from___b49:
Removing instruction __b8_from___b28:
Removing instruction __b29_from___b50:
Removing instruction __b9_from___b29:
Removing instruction __b51_from___b9:
Removing instruction print_ln_from___b51:
Removing instruction __b30_from___b52:
Removing instruction __b10_from___b30:
Removing instruction __b31_from___b53:
Removing instruction __b11_from___b31:
Removing instruction __b32_from___b54:
Removing instruction __b12_from___b32:
Removing instruction __b33_from___b55:
Removing instruction __b13_from___b33:
Removing instruction __b56_from___b13:
Removing instruction print_ln_from___b56:
Removing instruction __b34_from___b57:
Removing instruction __b14_from___b34:
Removing instruction __b35_from___b58:
Removing instruction __b15_from___b35:
Removing instruction __b36_from___b59:
Removing instruction __b16_from___b36:
Removing instruction __b37_from___b60:
Removing instruction __b17_from___b37:
Removing instruction __b61_from___b17:
Removing instruction print_ln_from___b61:
Removing instruction __b38_from___b62:
Removing instruction __b18_from___b38:
Removing instruction __b39_from___b63:
Removing instruction __b19_from___b39:
Removing instruction __b40_from___b64:
Removing instruction __b20_from___b40:
Removing instruction __b41_from___b65:
Removing instruction __b21_from___b41:
Removing instruction __b66_from___b21:
Removing instruction print_ln_from___b66:
Removing instruction __b42_from___b42:
Removing instruction __b42_from___b67:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction print_uchar_from___b1:
Removing instruction print_str_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_char_from___b4:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction __b22:
Removing instruction printu_from___b2:
Removing instruction __b43:
Removing instruction __b23:
Removing instruction printu_from___b3:
Removing instruction __b44:
Removing instruction __b24:
Removing instruction printu_from___b4:
Removing instruction __b45:
Removing instruction __b25:
Removing instruction printu_from___b5:
Removing instruction __b46:
Removing instruction __b47:
Removing instruction __b26:
Removing instruction printu_from___b6:
Removing instruction __b48:
Removing instruction __b27:
Removing instruction printu_from___b7:
Removing instruction __b49:
Removing instruction __b28:
Removing instruction printu_from___b8:
Removing instruction __b50:
Removing instruction __b29:
Removing instruction printu_from___b9:
Removing instruction __b51:
Removing instruction __b52:
Removing instruction __b30:
Removing instruction printu_from___b10:
Removing instruction __b53:
Removing instruction __b31:
Removing instruction printu_from___b11:
Removing instruction __b54:
Removing instruction __b32:
Removing instruction printu_from___b12:
Removing instruction __b55:
Removing instruction __b33:
Removing instruction printu_from___b13:
Removing instruction __b56:
Removing instruction __b57:
Removing instruction __b34:
Removing instruction printu_from___b14:
Removing instruction __b58:
Removing instruction __b35:
Removing instruction printu_from___b15:
Removing instruction __b59:
Removing instruction __b36:
Removing instruction printu_from___b16:
Removing instruction __b60:
Removing instruction __b37:
Removing instruction printu_from___b17:
Removing instruction __b61:
Removing instruction __b62:
Removing instruction __b38:
Removing instruction printu_from___b18:
Removing instruction __b63:
Removing instruction __b39:
Removing instruction printu_from___b19:
Removing instruction __b64:
Removing instruction __b40:
Removing instruction printu_from___b20:
Removing instruction __b65:
Removing instruction __b41:
Removing instruction printu_from___b21:
Removing instruction __b66:
Removing instruction __b67:
Removing instruction __b1_from___b68:
Removing instruction __breturn:
Removing instruction print_char_from_printu:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_uchar_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction print_char_from___b5:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b2_from___b1 to __b22
Relabelling long label __b3_from___b43 to __b23
Relabelling long label __b4_from___b44 to __b24
Relabelling long label __b5_from___b45 to __b25
Relabelling long label __b6_from___b47 to __b26
Relabelling long label __b7_from___b48 to __b27
Relabelling long label __b8_from___b49 to __b28
Relabelling long label __b9_from___b50 to __b29
Relabelling long label __b10_from___b52 to __b30
Relabelling long label __b11_from___b53 to __b31
Relabelling long label __b12_from___b54 to __b32
Relabelling long label __b13_from___b55 to __b33
Relabelling long label __b14_from___b57 to __b34
Relabelling long label __b15_from___b58 to __b35
Relabelling long label __b16_from___b59 to __b36
Relabelling long label __b17_from___b60 to __b37
Relabelling long label __b18_from___b62 to __b38
Relabelling long label __b19_from___b63 to __b39
Relabelling long label __b20_from___b64 to __b40
Relabelling long label __b21_from___b65 to __b41
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@3
(label) main::@30
(label) main::@31
(label) main::@32
(label) main::@33
(label) main::@34
(label) main::@35
(label) main::@36
(label) main::@37
(label) main::@38
(label) main::@39
(label) main::@4
(label) main::@40
(label) main::@41
(label) main::@42
(label) main::@43
(label) main::@44
(label) main::@45
(label) main::@46
(label) main::@47
(label) main::@48
(label) main::@49
(label) main::@5
(label) main::@50
(label) main::@51
(label) main::@52
(label) main::@53
(label) main::@54
(label) main::@55
(label) main::@56
(label) main::@57
(label) main::@58
(label) main::@59
(label) main::@6
(label) main::@60
(label) main::@61
(label) main::@62
(label) main::@63
(label) main::@64
(label) main::@65
(label) main::@66
(label) main::@67
(label) main::@68
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::a
(byte) main::a#1 a zp[1]:2 50.5
(byte) main::a#10 a zp[1]:2 35.4503311258278
(byte) main::b
(byte) main::b#0 b zp[1]:12 8.95967741935484
(const byte*) main::cs[(number) 5]  = { (byte) 7, (byte) $c7, (byte) $37, (byte) $97, (byte) $67 }
(byte) main::i
(byte) main::i#1 i zp[1]:3 101.0
(byte) main::i#10 i zp[1]:3 7.973684210526318
(const byte*) main::op[(byte) 3]  = (byte*) "< "
(const byte*) main::op12[(byte) 3]  = (byte*) ">="
(const byte*) main::op16[(byte) 3]  = (byte*) "=="
(const byte*) main::op4[(byte) 3]  = (byte*) "> "
(const byte*) main::op8[(byte) 3]  = (byte*) "<="
(byte) main::r
(byte) main::r#41 reg byte y 33.666666666666664
(byte) main::r#42 reg byte a 50.5
(byte) main::r#43 r zp[1]:4 33.666666666666664
(byte) main::r#44 reg byte y 33.666666666666664
(byte) main::r#45 reg byte y 33.666666666666664
(byte) main::r#46 reg byte a 50.5
(byte) main::r#47 r zp[1]:4 33.666666666666664
(byte) main::r#48 reg byte y 33.666666666666664
(byte) main::r#49 reg byte y 33.666666666666664
(byte) main::r#50 reg byte a 50.5
(byte) main::r#51 r zp[1]:4 33.666666666666664
(byte) main::r#52 reg byte y 33.666666666666664
(byte) main::r#53 reg byte y 33.666666666666664
(byte) main::r#54 reg byte a 50.5
(byte) main::r#55 r zp[1]:4 33.666666666666664
(byte) main::r#56 reg byte y 33.666666666666664
(byte) main::r#57 reg byte y 33.666666666666664
(byte) main::r#58 reg byte a 50.5
(byte) main::r#59 r zp[1]:4 33.666666666666664
(byte) main::r#60 reg byte y 33.666666666666664
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:10 20002.0
(byte*) memset::dst#2 dst zp[2]:10 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2000002.0
(byte) print_char::ch#1 reg byte a 20002.0
(byte) print_char::ch#2 reg byte a 20002.0
(byte) print_char::ch#5 reg byte a 2002.0
(byte) print_char::ch#6 reg byte a 1.1021005E7
(byte*) print_char_cursor
(byte*) print_char_cursor#121 print_char_cursor zp[2]:8 25.25
(byte*) print_char_cursor#148 print_char_cursor zp[2]:8 202.0
(byte*) print_char_cursor#149 print_char_cursor zp[2]:8 202.0
(byte*) print_char_cursor#153 print_char_cursor zp[2]:8 202.0
(byte*) print_char_cursor#157 print_char_cursor zp[2]:8 202.0
(byte*) print_char_cursor#165 print_char_cursor zp[2]:8 202.0
(byte*) print_char_cursor#54 print_char_cursor zp[2]:8 1.0511504E7
(byte*) print_char_cursor#55 print_char_cursor zp[2]:8 77786.86713286713
(byte*) print_char_cursor#96 print_char_cursor zp[2]:8 3021.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:5 2351.6640625
(byte*) print_line_cursor#13 print_line_cursor zp[2]:5 201003.0
(byte*) print_line_cursor#25 print_line_cursor zp[2]:5 1506.0
(byte*) print_line_cursor#27 print_line_cursor zp[2]:5 6.733333333333333
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:10 2000002.0
(byte*) print_str::str#1 str zp[2]:10 5501.0
(byte*) print_str::str#2 str zp[2]:10 1002501.25
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 20002.0
(byte~) print_uchar::$2 reg byte a 20002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#1 reg byte x 2002.0
(byte) print_uchar::b#2 reg byte x 5501.0
(void()) printu((byte) printu::a , (byte*) printu::op , (byte) printu::b , (byte) printu::res)
(label) printu::@1
(label) printu::@2
(label) printu::@3
(label) printu::@4
(label) printu::@5
(label) printu::@return
(byte) printu::a
(byte) printu::a#0 reg byte x 67.33333333333333
(byte) printu::a#1 reg byte x 101.0
(byte) printu::a#10 reg byte x 67.33333333333333
(byte) printu::a#11 reg byte x 67.33333333333333
(byte) printu::a#12 reg byte x 50.5
(byte) printu::a#13 reg byte x 101.0
(byte) printu::a#14 reg byte x 67.33333333333333
(byte) printu::a#15 reg byte x 67.33333333333333
(byte) printu::a#16 reg byte x 50.5
(byte) printu::a#17 reg byte x 101.0
(byte) printu::a#18 reg byte x 67.33333333333333
(byte) printu::a#19 reg byte x 67.33333333333333
(byte) printu::a#2 reg byte x 67.33333333333333
(byte) printu::a#20 reg byte x 1510.5
(byte) printu::a#3 reg byte x 67.33333333333333
(byte) printu::a#4 reg byte x 50.5
(byte) printu::a#5 reg byte x 101.0
(byte) printu::a#6 reg byte x 67.33333333333333
(byte) printu::a#7 reg byte x 67.33333333333333
(byte) printu::a#8 reg byte x 50.5
(byte) printu::a#9 reg byte x 101.0
(byte) printu::b
(byte) printu::b#0 b zp[1]:7 101.0
(byte) printu::b#10 b zp[1]:7 101.0
(byte) printu::b#11 b zp[1]:7 101.0
(byte) printu::b#12 b zp[1]:7 67.33333333333333
(byte) printu::b#14 b zp[1]:7 101.0
(byte) printu::b#15 b zp[1]:7 101.0
(byte) printu::b#16 b zp[1]:7 67.33333333333333
(byte) printu::b#18 b zp[1]:7 101.0
(byte) printu::b#19 b zp[1]:7 101.0
(byte) printu::b#2 b zp[1]:7 101.0
(byte) printu::b#20 b zp[1]:7 419.33333333333337
(byte) printu::b#3 b zp[1]:7 101.0
(byte) printu::b#4 b zp[1]:7 67.33333333333333
(byte) printu::b#6 b zp[1]:7 101.0
(byte) printu::b#7 b zp[1]:7 101.0
(byte) printu::b#8 b zp[1]:7 67.33333333333333
(byte*) printu::op
(byte*) printu::op#20 op zp[2]:10 250.25
(byte) printu::res
(byte) printu::res#0 res zp[1]:4 202.0
(byte) printu::res#1 res zp[1]:4 202.0
(byte) printu::res#10 res zp[1]:4 202.0
(byte) printu::res#11 res zp[1]:4 202.0
(byte) printu::res#12 res zp[1]:4 101.0
(byte) printu::res#13 res zp[1]:4 202.0
(byte) printu::res#14 res zp[1]:4 202.0
(byte) printu::res#15 res zp[1]:4 202.0
(byte) printu::res#16 res zp[1]:4 101.0
(byte) printu::res#17 res zp[1]:4 202.0
(byte) printu::res#18 res zp[1]:4 202.0
(byte) printu::res#19 res zp[1]:4 202.0
(byte) printu::res#2 res zp[1]:4 202.0
(byte) printu::res#20 res zp[1]:4 302.0999999999999
(byte) printu::res#3 res zp[1]:4 202.0
(byte) printu::res#4 res zp[1]:4 101.0
(byte) printu::res#5 res zp[1]:4 202.0
(byte) printu::res#6 res zp[1]:4 202.0
(byte) printu::res#7 res zp[1]:4 202.0
(byte) printu::res#8 res zp[1]:4 101.0
(byte) printu::res#9 res zp[1]:4 202.0

zp[1]:2 [ main::a#10 main::a#1 ]
zp[1]:3 [ main::i#10 main::i#1 ]
reg byte y [ main::r#41 ]
reg byte a [ main::r#42 ]
zp[1]:4 [ main::r#43 printu::res#20 printu::res#8 printu::res#9 printu::res#10 printu::res#11 printu::res#12 printu::res#13 printu::res#14 printu::res#15 printu::res#16 printu::res#17 printu::res#0 printu::res#18 printu::res#19 printu::res#1 printu::res#2 printu::res#3 printu::res#4 printu::res#5 printu::res#6 printu::res#7 main::r#47 main::r#51 main::r#55 main::r#59 ]
reg byte y [ main::r#44 ]
reg byte y [ main::r#45 ]
reg byte a [ main::r#46 ]
reg byte y [ main::r#48 ]
reg byte y [ main::r#49 ]
reg byte a [ main::r#50 ]
reg byte y [ main::r#52 ]
reg byte y [ main::r#53 ]
reg byte a [ main::r#54 ]
reg byte y [ main::r#56 ]
reg byte y [ main::r#57 ]
reg byte a [ main::r#58 ]
reg byte y [ main::r#60 ]
zp[2]:5 [ print_line_cursor#13 print_line_cursor#25 print_line_cursor#27 print_line_cursor#1 ]
reg byte x [ printu::a#20 printu::a#8 printu::a#9 printu::a#10 printu::a#11 printu::a#12 printu::a#13 printu::a#14 printu::a#15 printu::a#16 printu::a#17 printu::a#0 printu::a#18 printu::a#19 printu::a#1 printu::a#2 printu::a#3 printu::a#4 printu::a#5 printu::a#6 printu::a#7 ]
zp[1]:7 [ printu::b#20 printu::b#8 printu::b#10 printu::b#11 printu::b#12 printu::b#14 printu::b#15 printu::b#16 printu::b#0 printu::b#18 printu::b#19 printu::b#2 printu::b#3 printu::b#4 printu::b#6 printu::b#7 ]
reg byte a [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#2 print_char::ch#5 ]
zp[2]:8 [ print_char_cursor#54 print_char_cursor#96 print_char_cursor#149 print_char_cursor#55 print_char_cursor#153 print_char_cursor#157 print_char_cursor#121 print_char_cursor#148 print_char_cursor#165 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:10 [ memset::dst#2 memset::dst#1 printu::op#20 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp[1]:12 [ main::b#0 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 15209

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 5
  .label print_char_cursor = 8
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label b = $c
    .label a = 2
    .label i = 3
    .label r = 4
    // print_cls()
    // [5] call print_cls 
    // [199] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte*) print_line_cursor#27 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [6] phi (byte) main::i#10 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi (byte*) print_char_cursor#121 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [6] phi (byte) main::a#10 = (byte) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta.z a
    // main::@1
  __b1:
    // b = $ce-a
    // [7] (byte) main::b#0 ← (byte) $ce - (byte) main::a#10 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$ce
    sec
    sbc.z a
    sta.z b
    // if(a<b)
    // [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcs __b22
    // [9] phi from main::@1 to main::@22 [phi:main::@1->main::@22]
    // main::@22
    // [10] phi from main::@22 to main::@2 [phi:main::@22->main::@2]
    // [10] phi (byte) main::r#41 = (byte) '+' [phi:main::@22->main::@2#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b2
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b22:
    // [10] phi (byte) main::r#41 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@2
  __b2:
    // printu(a, "< ", b, r)
    // [11] (byte) printu::a#0 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [12] (byte) printu::b#0 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [13] (byte) printu::res#0 ← (byte) main::r#41 -- vbuz1=vbuyy 
    sty.z printu.res
    // [14] call printu 
    // [167] phi from main::@2 to printu [phi:main::@2->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@2->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#121 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
    // main::@43
    // if(a<$37)
    // [15] if((byte) main::a#10>=(byte) $37) goto main::@3 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcs __b23
    // [16] phi from main::@43 to main::@23 [phi:main::@43->main::@23]
    // main::@23
    // [17] phi from main::@23 to main::@3 [phi:main::@23->main::@3]
    // [17] phi (byte) main::r#42 = (byte) '+' [phi:main::@23->main::@3#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b3
    // [17] phi from main::@43 to main::@3 [phi:main::@43->main::@3]
  __b23:
    // [17] phi (byte) main::r#42 = (byte) '-' [phi:main::@43->main::@3#0] -- vbuaa=vbuc1 
    lda #'-'
    // main::@3
  __b3:
    // printu(a, "< ", $37, r)
    // [18] (byte) printu::a#1 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [19] (byte) printu::res#1 ← (byte) main::r#42 -- vbuz1=vbuaa 
    sta.z printu.res
    // [20] call printu 
    // [167] phi from main::@3 to printu [phi:main::@3->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@3->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
    // main::@44
    // if(a<cs[i])
    // [21] if((byte) main::a#10>=*((const byte*) main::cs + (byte) main::i#10)) goto main::@4 -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcs __b24
    // [22] phi from main::@44 to main::@24 [phi:main::@44->main::@24]
    // main::@24
    // [23] phi from main::@24 to main::@4 [phi:main::@24->main::@4]
    // [23] phi (byte) main::r#43 = (byte) '+' [phi:main::@24->main::@4#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b4
    // [23] phi from main::@44 to main::@4 [phi:main::@44->main::@4]
  __b24:
    // [23] phi (byte) main::r#43 = (byte) '-' [phi:main::@44->main::@4#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    // main::@4
  __b4:
    // printu(a, "< ", cs[i], r)
    // [24] (byte) printu::a#2 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [25] (byte) printu::b#2 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [26] (byte) printu::res#2 ← (byte) main::r#43
    // [27] call printu 
    // [167] phi from main::@4 to printu [phi:main::@4->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@4->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
    // main::@45
    // if(a<a)
    // [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 -- vbuz1_ge_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b25
    // [29] phi from main::@45 to main::@25 [phi:main::@45->main::@25]
    // main::@25
    // [30] phi from main::@25 to main::@5 [phi:main::@25->main::@5]
    // [30] phi (byte) main::r#44 = (byte) '+' [phi:main::@25->main::@5#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b5
    // [30] phi from main::@45 to main::@5 [phi:main::@45->main::@5]
  __b25:
    // [30] phi (byte) main::r#44 = (byte) '-' [phi:main::@45->main::@5#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@5
  __b5:
    // printu(a, "< ", a, r)
    // [31] (byte) printu::a#3 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [32] (byte) printu::b#3 ← (byte) main::a#10 -- vbuz1=vbuz2 
    txa
    sta.z printu.b
    // [33] (byte) printu::res#3 ← (byte) main::r#44 -- vbuz1=vbuyy 
    sty.z printu.res
    // [34] call printu 
    // [167] phi from main::@5 to printu [phi:main::@5->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op [phi:main::@5->printu#2] -- pbuz1=pbuc1 
    lda #<op
    sta.z printu.op
    lda #>op
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
    // [35] phi from main::@5 to main::@46 [phi:main::@5->main::@46]
    // main::@46
    // print_ln()
    // [36] call print_ln 
    // [162] phi from main::@46 to print_ln [phi:main::@46->print_ln]
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#27 [phi:main::@46->print_ln#0] -- register_copy 
    jsr print_ln
    // main::@47
    // if(a>b)
    // [37] if((byte) main::a#10<=(byte) main::b#0) goto main::@6 -- vbuz1_le_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcs __b26
    // [38] phi from main::@47 to main::@26 [phi:main::@47->main::@26]
    // main::@26
    // [39] phi from main::@26 to main::@6 [phi:main::@26->main::@6]
    // [39] phi (byte) main::r#45 = (byte) '+' [phi:main::@26->main::@6#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b6
    // [39] phi from main::@47 to main::@6 [phi:main::@47->main::@6]
  __b26:
    // [39] phi (byte) main::r#45 = (byte) '-' [phi:main::@47->main::@6#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@6
  __b6:
    // printu(a, "> ", b, r)
    // [40] (byte) printu::a#4 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [41] (byte) printu::b#4 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [42] (byte) printu::res#4 ← (byte) main::r#45 -- vbuz1=vbuyy 
    sty.z printu.res
    // [43] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // printu(a, "> ", b, r)
    // [44] call printu 
    // [167] phi from main::@6 to printu [phi:main::@6->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#4 [phi:main::@6->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#4 [phi:main::@6->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@6->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#4 [phi:main::@6->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#165 [phi:main::@6->printu#4] -- register_copy 
    jsr printu
    // main::@48
    // if(a>$37)
    // [45] if((byte) main::a#10<(byte) $37+(byte) 1) goto main::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcc __b27
    // [46] phi from main::@48 to main::@27 [phi:main::@48->main::@27]
    // main::@27
    // [47] phi from main::@27 to main::@7 [phi:main::@27->main::@7]
    // [47] phi (byte) main::r#46 = (byte) '+' [phi:main::@27->main::@7#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b7
    // [47] phi from main::@48 to main::@7 [phi:main::@48->main::@7]
  __b27:
    // [47] phi (byte) main::r#46 = (byte) '-' [phi:main::@48->main::@7#0] -- vbuaa=vbuc1 
    lda #'-'
    // main::@7
  __b7:
    // printu(a, "> ", $37, r)
    // [48] (byte) printu::a#5 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [49] (byte) printu::res#5 ← (byte) main::r#46 -- vbuz1=vbuaa 
    sta.z printu.res
    // [50] call printu 
    // [167] phi from main::@7 to printu [phi:main::@7->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#5 [phi:main::@7->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@7->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@7->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#5 [phi:main::@7->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@7->printu#4] -- register_copy 
    jsr printu
    // main::@49
    // if(a>cs[i])
    // [51] if((byte) main::a#10<=*((const byte*) main::cs + (byte) main::i#10)) goto main::@8 -- vbuz1_le_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcs __b28
    // [52] phi from main::@49 to main::@28 [phi:main::@49->main::@28]
    // main::@28
    // [53] phi from main::@28 to main::@8 [phi:main::@28->main::@8]
    // [53] phi (byte) main::r#47 = (byte) '+' [phi:main::@28->main::@8#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b8
    // [53] phi from main::@49 to main::@8 [phi:main::@49->main::@8]
  __b28:
    // [53] phi (byte) main::r#47 = (byte) '-' [phi:main::@49->main::@8#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    // main::@8
  __b8:
    // printu(a, "> ", cs[i], r)
    // [54] (byte) printu::a#6 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [55] (byte) printu::b#6 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [56] (byte) printu::res#6 ← (byte) main::r#47
    // [57] call printu 
    // [167] phi from main::@8 to printu [phi:main::@8->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#6 [phi:main::@8->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#6 [phi:main::@8->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@8->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#6 [phi:main::@8->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@8->printu#4] -- register_copy 
    jsr printu
    // main::@50
    // if(a>a)
    // [58] if((byte) main::a#10<=(byte) main::a#10) goto main::@9 -- vbuz1_le_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcs __b29
    // [59] phi from main::@50 to main::@29 [phi:main::@50->main::@29]
    // main::@29
    // [60] phi from main::@29 to main::@9 [phi:main::@29->main::@9]
    // [60] phi (byte) main::r#48 = (byte) '+' [phi:main::@29->main::@9#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b9
    // [60] phi from main::@50 to main::@9 [phi:main::@50->main::@9]
  __b29:
    // [60] phi (byte) main::r#48 = (byte) '-' [phi:main::@50->main::@9#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@9
  __b9:
    // printu(a, "> ", a, r)
    // [61] (byte) printu::a#7 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [62] (byte) printu::b#7 ← (byte) main::a#10 -- vbuz1=vbuz2 
    txa
    sta.z printu.b
    // [63] (byte) printu::res#7 ← (byte) main::r#48 -- vbuz1=vbuyy 
    sty.z printu.res
    // [64] call printu 
    // [167] phi from main::@9 to printu [phi:main::@9->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#7 [phi:main::@9->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#7 [phi:main::@9->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op4 [phi:main::@9->printu#2] -- pbuz1=pbuc1 
    lda #<op4
    sta.z printu.op
    lda #>op4
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#7 [phi:main::@9->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@9->printu#4] -- register_copy 
    jsr printu
    // [65] phi from main::@9 to main::@51 [phi:main::@9->main::@51]
    // main::@51
    // print_ln()
    // [66] call print_ln 
    // [162] phi from main::@51 to print_ln [phi:main::@51->print_ln]
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@51->print_ln#0] -- register_copy 
    jsr print_ln
    // main::@52
    // if(a<=b)
    // [67] if((byte) main::a#10>(byte) main::b#0) goto main::@10 -- vbuz1_gt_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcc __b30
    // [68] phi from main::@52 to main::@30 [phi:main::@52->main::@30]
    // main::@30
    // [69] phi from main::@30 to main::@10 [phi:main::@30->main::@10]
    // [69] phi (byte) main::r#49 = (byte) '+' [phi:main::@30->main::@10#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b10
    // [69] phi from main::@52 to main::@10 [phi:main::@52->main::@10]
  __b30:
    // [69] phi (byte) main::r#49 = (byte) '-' [phi:main::@52->main::@10#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@10
  __b10:
    // printu(a, "<=", b, r)
    // [70] (byte) printu::a#8 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [71] (byte) printu::b#8 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [72] (byte) printu::res#8 ← (byte) main::r#49 -- vbuz1=vbuyy 
    sty.z printu.res
    // [73] (byte*) print_char_cursor#149 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // printu(a, "<=", b, r)
    // [74] call printu 
    // [167] phi from main::@10 to printu [phi:main::@10->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#8 [phi:main::@10->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#8 [phi:main::@10->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@10->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#8 [phi:main::@10->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#149 [phi:main::@10->printu#4] -- register_copy 
    jsr printu
    // main::@53
    // if(a<=$37)
    // [75] if((byte) main::a#10>=(byte) $37+(byte) 1) goto main::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z a
    cmp #$37+1
    bcs __b31
    // [76] phi from main::@53 to main::@31 [phi:main::@53->main::@31]
    // main::@31
    // [77] phi from main::@31 to main::@11 [phi:main::@31->main::@11]
    // [77] phi (byte) main::r#50 = (byte) '+' [phi:main::@31->main::@11#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b11
    // [77] phi from main::@53 to main::@11 [phi:main::@53->main::@11]
  __b31:
    // [77] phi (byte) main::r#50 = (byte) '-' [phi:main::@53->main::@11#0] -- vbuaa=vbuc1 
    lda #'-'
    // main::@11
  __b11:
    // printu(a, "<=", $37, r)
    // [78] (byte) printu::a#9 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [79] (byte) printu::res#9 ← (byte) main::r#50 -- vbuz1=vbuaa 
    sta.z printu.res
    // [80] call printu 
    // [167] phi from main::@11 to printu [phi:main::@11->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#9 [phi:main::@11->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@11->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@11->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#9 [phi:main::@11->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@11->printu#4] -- register_copy 
    jsr printu
    // main::@54
    // if(a<=cs[i])
    // [81] if((byte) main::a#10>*((const byte*) main::cs + (byte) main::i#10)) goto main::@12 -- vbuz1_gt_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda cs,y
    cmp.z a
    bcc __b32
    // [82] phi from main::@54 to main::@32 [phi:main::@54->main::@32]
    // main::@32
    // [83] phi from main::@32 to main::@12 [phi:main::@32->main::@12]
    // [83] phi (byte) main::r#51 = (byte) '+' [phi:main::@32->main::@12#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b12
    // [83] phi from main::@54 to main::@12 [phi:main::@54->main::@12]
  __b32:
    // [83] phi (byte) main::r#51 = (byte) '-' [phi:main::@54->main::@12#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    // main::@12
  __b12:
    // printu(a, "<=", cs[i], r)
    // [84] (byte) printu::a#10 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [85] (byte) printu::b#10 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [86] (byte) printu::res#10 ← (byte) main::r#51
    // [87] call printu 
    // [167] phi from main::@12 to printu [phi:main::@12->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#10 [phi:main::@12->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#10 [phi:main::@12->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@12->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#10 [phi:main::@12->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@12->printu#4] -- register_copy 
    jsr printu
    // main::@55
    // if(a<=a)
    // [88] if((byte) main::a#10>(byte) main::a#10) goto main::@13 -- vbuz1_gt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b33
    // [89] phi from main::@55 to main::@33 [phi:main::@55->main::@33]
    // main::@33
    // [90] phi from main::@33 to main::@13 [phi:main::@33->main::@13]
    // [90] phi (byte) main::r#52 = (byte) '+' [phi:main::@33->main::@13#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b13
    // [90] phi from main::@55 to main::@13 [phi:main::@55->main::@13]
  __b33:
    // [90] phi (byte) main::r#52 = (byte) '-' [phi:main::@55->main::@13#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@13
  __b13:
    // printu(a, "<=", a, r)
    // [91] (byte) printu::a#11 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [92] (byte) printu::b#11 ← (byte) main::a#10 -- vbuz1=vbuz2 
    txa
    sta.z printu.b
    // [93] (byte) printu::res#11 ← (byte) main::r#52 -- vbuz1=vbuyy 
    sty.z printu.res
    // [94] call printu 
    // [167] phi from main::@13 to printu [phi:main::@13->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#11 [phi:main::@13->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#11 [phi:main::@13->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op8 [phi:main::@13->printu#2] -- pbuz1=pbuc1 
    lda #<op8
    sta.z printu.op
    lda #>op8
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#11 [phi:main::@13->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@13->printu#4] -- register_copy 
    jsr printu
    // [95] phi from main::@13 to main::@56 [phi:main::@13->main::@56]
    // main::@56
    // print_ln()
    // [96] call print_ln 
    // [162] phi from main::@56 to print_ln [phi:main::@56->print_ln]
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@56->print_ln#0] -- register_copy 
    jsr print_ln
    // main::@57
    // if(a>=b)
    // [97] if((byte) main::a#10<(byte) main::b#0) goto main::@14 -- vbuz1_lt_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bcc __b34
    // [98] phi from main::@57 to main::@34 [phi:main::@57->main::@34]
    // main::@34
    // [99] phi from main::@34 to main::@14 [phi:main::@34->main::@14]
    // [99] phi (byte) main::r#53 = (byte) '+' [phi:main::@34->main::@14#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b14
    // [99] phi from main::@57 to main::@14 [phi:main::@57->main::@14]
  __b34:
    // [99] phi (byte) main::r#53 = (byte) '-' [phi:main::@57->main::@14#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@14
  __b14:
    // printu(a, ">=", b, r)
    // [100] (byte) printu::a#12 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [101] (byte) printu::b#12 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [102] (byte) printu::res#12 ← (byte) main::r#53 -- vbuz1=vbuyy 
    sty.z printu.res
    // [103] (byte*) print_char_cursor#153 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // printu(a, ">=", b, r)
    // [104] call printu 
    // [167] phi from main::@14 to printu [phi:main::@14->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#12 [phi:main::@14->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#12 [phi:main::@14->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@14->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#12 [phi:main::@14->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#153 [phi:main::@14->printu#4] -- register_copy 
    jsr printu
    // main::@58
    // if(a>=$37)
    // [105] if((byte) main::a#10<(byte) $37) goto main::@15 -- vbuz1_lt_vbuc1_then_la1 
    lda.z a
    cmp #$37
    bcc __b35
    // [106] phi from main::@58 to main::@35 [phi:main::@58->main::@35]
    // main::@35
    // [107] phi from main::@35 to main::@15 [phi:main::@35->main::@15]
    // [107] phi (byte) main::r#54 = (byte) '+' [phi:main::@35->main::@15#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b15
    // [107] phi from main::@58 to main::@15 [phi:main::@58->main::@15]
  __b35:
    // [107] phi (byte) main::r#54 = (byte) '-' [phi:main::@58->main::@15#0] -- vbuaa=vbuc1 
    lda #'-'
    // main::@15
  __b15:
    // printu(a, ">=", $37, r)
    // [108] (byte) printu::a#13 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [109] (byte) printu::res#13 ← (byte) main::r#54 -- vbuz1=vbuaa 
    sta.z printu.res
    // [110] call printu 
    // [167] phi from main::@15 to printu [phi:main::@15->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#13 [phi:main::@15->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@15->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@15->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#13 [phi:main::@15->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@15->printu#4] -- register_copy 
    jsr printu
    // main::@59
    // if(a>=cs[i])
    // [111] if((byte) main::a#10<*((const byte*) main::cs + (byte) main::i#10)) goto main::@16 -- vbuz1_lt_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bcc __b36
    // [112] phi from main::@59 to main::@36 [phi:main::@59->main::@36]
    // main::@36
    // [113] phi from main::@36 to main::@16 [phi:main::@36->main::@16]
    // [113] phi (byte) main::r#55 = (byte) '+' [phi:main::@36->main::@16#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b16
    // [113] phi from main::@59 to main::@16 [phi:main::@59->main::@16]
  __b36:
    // [113] phi (byte) main::r#55 = (byte) '-' [phi:main::@59->main::@16#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    // main::@16
  __b16:
    // printu(a, ">=", cs[i], r)
    // [114] (byte) printu::a#14 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [115] (byte) printu::b#14 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [116] (byte) printu::res#14 ← (byte) main::r#55
    // [117] call printu 
    // [167] phi from main::@16 to printu [phi:main::@16->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#14 [phi:main::@16->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#14 [phi:main::@16->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@16->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#14 [phi:main::@16->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@16->printu#4] -- register_copy 
    jsr printu
    // main::@60
    // if(a>=a)
    // [118] if((byte) main::a#10<(byte) main::a#10) goto main::@17 -- vbuz1_lt_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bcc __b37
    // [119] phi from main::@60 to main::@37 [phi:main::@60->main::@37]
    // main::@37
    // [120] phi from main::@37 to main::@17 [phi:main::@37->main::@17]
    // [120] phi (byte) main::r#56 = (byte) '+' [phi:main::@37->main::@17#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b17
    // [120] phi from main::@60 to main::@17 [phi:main::@60->main::@17]
  __b37:
    // [120] phi (byte) main::r#56 = (byte) '-' [phi:main::@60->main::@17#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@17
  __b17:
    // printu(a, ">=", a, r)
    // [121] (byte) printu::a#15 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [122] (byte) printu::b#15 ← (byte) main::a#10 -- vbuz1=vbuz2 
    txa
    sta.z printu.b
    // [123] (byte) printu::res#15 ← (byte) main::r#56 -- vbuz1=vbuyy 
    sty.z printu.res
    // [124] call printu 
    // [167] phi from main::@17 to printu [phi:main::@17->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#15 [phi:main::@17->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#15 [phi:main::@17->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op12 [phi:main::@17->printu#2] -- pbuz1=pbuc1 
    lda #<op12
    sta.z printu.op
    lda #>op12
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#15 [phi:main::@17->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@17->printu#4] -- register_copy 
    jsr printu
    // [125] phi from main::@17 to main::@61 [phi:main::@17->main::@61]
    // main::@61
    // print_ln()
    // [126] call print_ln 
    // [162] phi from main::@61 to print_ln [phi:main::@61->print_ln]
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@61->print_ln#0] -- register_copy 
    jsr print_ln
    // main::@62
    // if(a==b)
    // [127] if((byte) main::a#10!=(byte) main::b#0) goto main::@18 -- vbuz1_neq_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bne __b38
    // [128] phi from main::@62 to main::@38 [phi:main::@62->main::@38]
    // main::@38
    // [129] phi from main::@38 to main::@18 [phi:main::@38->main::@18]
    // [129] phi (byte) main::r#57 = (byte) '+' [phi:main::@38->main::@18#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b18
    // [129] phi from main::@62 to main::@18 [phi:main::@62->main::@18]
  __b38:
    // [129] phi (byte) main::r#57 = (byte) '-' [phi:main::@62->main::@18#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@18
  __b18:
    // printu(a, "==", b, r)
    // [130] (byte) printu::a#16 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [131] (byte) printu::b#16 ← (byte) main::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z printu.b
    // [132] (byte) printu::res#16 ← (byte) main::r#57 -- vbuz1=vbuyy 
    sty.z printu.res
    // [133] (byte*) print_char_cursor#157 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // printu(a, "==", b, r)
    // [134] call printu 
    // [167] phi from main::@18 to printu [phi:main::@18->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#16 [phi:main::@18->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#16 [phi:main::@18->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@18->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#16 [phi:main::@18->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#157 [phi:main::@18->printu#4] -- register_copy 
    jsr printu
    // main::@63
    // if(a==$37)
    // [135] if((byte) main::a#10!=(byte) $37) goto main::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$37
    cmp.z a
    bne __b39
    // [136] phi from main::@63 to main::@39 [phi:main::@63->main::@39]
    // main::@39
    // [137] phi from main::@39 to main::@19 [phi:main::@39->main::@19]
    // [137] phi (byte) main::r#58 = (byte) '+' [phi:main::@39->main::@19#0] -- vbuaa=vbuc1 
    lda #'+'
    jmp __b19
    // [137] phi from main::@63 to main::@19 [phi:main::@63->main::@19]
  __b39:
    // [137] phi (byte) main::r#58 = (byte) '-' [phi:main::@63->main::@19#0] -- vbuaa=vbuc1 
    lda #'-'
    // main::@19
  __b19:
    // printu(a, "==", $37, r)
    // [138] (byte) printu::a#17 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [139] (byte) printu::res#17 ← (byte) main::r#58 -- vbuz1=vbuaa 
    sta.z printu.res
    // [140] call printu 
    // [167] phi from main::@19 to printu [phi:main::@19->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#17 [phi:main::@19->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) $37 [phi:main::@19->printu#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z printu.b
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@19->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#17 [phi:main::@19->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@19->printu#4] -- register_copy 
    jsr printu
    // main::@64
    // if(a==cs[i])
    // [141] if((byte) main::a#10!=*((const byte*) main::cs + (byte) main::i#10)) goto main::@20 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z a
    ldy.z i
    cmp cs,y
    bne __b40
    // [142] phi from main::@64 to main::@40 [phi:main::@64->main::@40]
    // main::@40
    // [143] phi from main::@40 to main::@20 [phi:main::@40->main::@20]
    // [143] phi (byte) main::r#59 = (byte) '+' [phi:main::@40->main::@20#0] -- vbuz1=vbuc1 
    lda #'+'
    sta.z r
    jmp __b20
    // [143] phi from main::@64 to main::@20 [phi:main::@64->main::@20]
  __b40:
    // [143] phi (byte) main::r#59 = (byte) '-' [phi:main::@64->main::@20#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z r
    // main::@20
  __b20:
    // printu(a, "==", cs[i], r)
    // [144] (byte) printu::a#18 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [145] (byte) printu::b#18 ← *((const byte*) main::cs + (byte) main::i#10) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda cs,y
    sta.z printu.b
    // [146] (byte) printu::res#18 ← (byte) main::r#59
    // [147] call printu 
    // [167] phi from main::@20 to printu [phi:main::@20->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#18 [phi:main::@20->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#18 [phi:main::@20->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@20->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#18 [phi:main::@20->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@20->printu#4] -- register_copy 
    jsr printu
    // main::@65
    // if(a==a)
    // [148] if((byte) main::a#10!=(byte) main::a#10) goto main::@21 -- vbuz1_neq_vbuz1_then_la1 
    lda.z a
    cmp.z a
    bne __b41
    // [149] phi from main::@65 to main::@41 [phi:main::@65->main::@41]
    // main::@41
    // [150] phi from main::@41 to main::@21 [phi:main::@41->main::@21]
    // [150] phi (byte) main::r#60 = (byte) '+' [phi:main::@41->main::@21#0] -- vbuyy=vbuc1 
    ldy #'+'
    jmp __b21
    // [150] phi from main::@65 to main::@21 [phi:main::@65->main::@21]
  __b41:
    // [150] phi (byte) main::r#60 = (byte) '-' [phi:main::@65->main::@21#0] -- vbuyy=vbuc1 
    ldy #'-'
    // main::@21
  __b21:
    // printu(a, "==", a, r)
    // [151] (byte) printu::a#19 ← (byte) main::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [152] (byte) printu::b#19 ← (byte) main::a#10 -- vbuz1=vbuz2 
    txa
    sta.z printu.b
    // [153] (byte) printu::res#19 ← (byte) main::r#60 -- vbuz1=vbuyy 
    sty.z printu.res
    // [154] call printu 
    // [167] phi from main::@21 to printu [phi:main::@21->printu]
    // [167] phi (byte) printu::res#20 = (byte) printu::res#19 [phi:main::@21->printu#0] -- register_copy 
    // [167] phi (byte) printu::b#20 = (byte) printu::b#19 [phi:main::@21->printu#1] -- register_copy 
    // [167] phi (byte*) printu::op#20 = (const byte*) main::op16 [phi:main::@21->printu#2] -- pbuz1=pbuc1 
    lda #<op16
    sta.z printu.op
    lda #>op16
    sta.z printu.op+1
    // [167] phi (byte) printu::a#20 = (byte) printu::a#19 [phi:main::@21->printu#3] -- register_copy 
    // [167] phi (byte*) print_char_cursor#96 = (byte*) print_char_cursor#55 [phi:main::@21->printu#4] -- register_copy 
    jsr printu
    // [155] phi from main::@21 to main::@66 [phi:main::@21->main::@66]
    // main::@66
    // print_ln()
    // [156] call print_ln 
    // [162] phi from main::@66 to print_ln [phi:main::@66->print_ln]
    // [162] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#1 [phi:main::@66->print_ln#0] -- register_copy 
    jsr print_ln
    // main::@67
    // a=a+$30
    // [157] (byte) main::a#1 ← (byte) main::a#10 + (byte) $30 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z a
    axs #-[$30]
    stx.z a
    // for( byte i : 0..4 )
    // [158] (byte) main::i#1 ← ++ (byte) main::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [159] if((byte) main::i#1!=(byte) 5) goto main::@68 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z i
    bne __b68
    // [160] phi from main::@42 main::@67 to main::@42 [phi:main::@42/main::@67->main::@42]
    // main::@42
  __b42:
    jmp __b42
    // main::@68
  __b68:
    // [161] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [6] phi from main::@68 to main::@1 [phi:main::@68->main::@1]
    // [6] phi (byte*) print_line_cursor#27 = (byte*) print_line_cursor#1 [phi:main::@68->main::@1#0] -- register_copy 
    // [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@68->main::@1#1] -- register_copy 
    // [6] phi (byte*) print_char_cursor#121 = (byte*) print_char_cursor#148 [phi:main::@68->main::@1#2] -- register_copy 
    // [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@68->main::@1#3] -- register_copy 
    jmp __b1
    cs: .byte 7, $c7, $37, $97, $67
    op: .text "< "
    .byte 0
    op4: .text "> "
    .byte 0
    op8: .text "<="
    .byte 0
    op12: .text ">="
    .byte 0
    op16: .text "=="
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [163] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [163] phi (byte*) print_line_cursor#13 = (byte*) print_line_cursor#25 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [164] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#13 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [165] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#55) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [166] return 
    rts
}
  // printu
// printu(byte register(X) a, byte* zp($a) op, byte zp(7) b, byte zp(4) res)
printu: {
    .label b = 7
    .label res = 4
    .label op = $a
    // print_char(' ')
    // [168] call print_char 
    // [180] phi from printu to print_char [phi:printu->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#96 [phi:printu->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // printu::@1
    // print_uchar(a)
    // [169] (byte) print_uchar::b#0 ← (byte) printu::a#20
    // [170] call print_uchar 
    // [184] phi from printu::@1 to print_uchar [phi:printu::@1->print_uchar]
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:printu::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    // printu::@2
    // print_str(op)
    // [171] (byte*) print_str::str#1 ← (byte*) printu::op#20
    // [172] call print_str 
    // [192] phi from printu::@2 to print_str [phi:printu::@2->print_str]
    jsr print_str
    // printu::@3
    // print_uchar(b)
    // [173] (byte) print_uchar::b#1 ← (byte) printu::b#20 -- vbuxx=vbuz1 
    ldx.z b
    // [174] call print_uchar 
    // [184] phi from printu::@3 to print_uchar [phi:printu::@3->print_uchar]
    // [184] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:printu::@3->print_uchar#0] -- register_copy 
    jsr print_uchar
    // [175] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
    // printu::@4
    // print_char(' ')
    // [176] call print_char 
    // [180] phi from printu::@4 to print_char [phi:printu::@4->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@4->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // printu::@5
    // print_char(res)
    // [177] (byte) print_char::ch#5 ← (byte) printu::res#20 -- vbuaa=vbuz1 
    lda.z res
    // [178] call print_char 
    // [180] phi from printu::@5 to print_char [phi:printu::@5->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:printu::@5->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
    // printu::@return
    // }
    // [179] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [181] *((byte*) print_char_cursor#54) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [182] (byte*) print_char_cursor#55 ← ++ (byte*) print_char_cursor#54 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [183] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [185] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [186] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [187] call print_char 
  // Table of hexadecimal digits
    // [180] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [188] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // print_char(print_hextab[b&$f])
    // [189] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [190] call print_char 
    // [180] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [191] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($a) str)
print_str: {
    .label str = $a
    // [193] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [193] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [194] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [195] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [196] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [197] call print_char 
    // [180] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [180] phi (byte*) print_char_cursor#54 = (byte*) print_char_cursor#55 [phi:print_str::@2->print_char#0] -- register_copy 
    // [180] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [198] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [200] call memset 
    // [202] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [201] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $a
    // [203] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [203] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [204] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [205] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [206] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [207] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [203] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [203] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

