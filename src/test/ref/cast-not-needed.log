Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte*~) main::$0 ← (const byte*) SCREEN + (number) $378
  (byte*) main::sprite_ptr#0 ← (byte*~) main::$0
  (byte*~) main::$1 ← (const byte*) sprite / (number) $40
  *((byte*) main::sprite_ptr#0 + (number) 0) ← (byte)(byte*~) main::$1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $4400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(label) main::@return
(byte*) main::sprite_ptr
(byte*) main::sprite_ptr#0
(const byte*) sprite = (byte*)(number) $5000

Adding number conversion cast (unumber) $378 in (byte*~) main::$0 ← (const byte*) SCREEN + (number) $378
Adding number conversion cast (unumber) $40 in (byte*~) main::$1 ← (const byte*) sprite / (number) $40
Adding number conversion cast (unumber) 0 in *((byte*) main::sprite_ptr#0 + (number) 0) ← (byte)(byte*~) main::$1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 20480
Simplifying constant pointer cast (byte*) 17408
Simplifying constant integer cast $378
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $378
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::sprite_ptr#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (byte*) main::sprite_ptr#0 ← (const byte*) SCREEN + (word) $378
Constant right-side identified [1] (byte*~) main::$1 ← (const byte*) sprite / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::sprite_ptr#0 = SCREEN+$378
Constant (const byte*) main::$1 = sprite/$40
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)main::$1 in [2] *((const byte*) main::sprite_ptr#0 + (byte) 0) ← (byte)(const byte*) main::$1
Successful SSA optimization Pass2ConstantValues
Simplifying expression containing zero main::sprite_ptr#0 in [2] *((const byte*) main::sprite_ptr#0 + (byte) 0) ← (byte)(const byte*) main::$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$1 = (const byte*) sprite/(byte) $40
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite/(byte) $40
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::sprite_ptr

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests a cast that is not needed
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
  // main
main: {
    .label sprite_ptr = SCREEN+$378
    // [0] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite/(byte) $40 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a cast that is not needed
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
  // main
main: {
    .label sprite_ptr = SCREEN+$378
    // [0] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 17408
(void()) main()
(label) main::@return
(byte*) main::sprite_ptr
(const byte*) main::sprite_ptr#0 sprite_ptr = (const byte*) SCREEN+(word) $378
(const byte*) sprite = (byte*) 20480



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests a cast that is not needed
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
  // main
main: {
    .label sprite_ptr = SCREEN+$378
    // sprite_ptr[0] = (byte)(sprite/$40)
    // [0] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

