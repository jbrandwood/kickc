Resolved forward reference table_driven_irq to interrupt(KERNEL_MIN)(void()) table_driven_irq()
Replacing struct member reference *((const nomodify struct MOS6526_CIA*) CIA2).PORT_A_DDR with member unwinding reference *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR)
Replacing struct member reference *((const nomodify struct MOS6526_CIA*) CIA2).PORT_A with member unwinding reference *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A)
Replacing struct member reference *((const nomodify struct MOS6526_CIA*) CIA1).INTERRUPT with member unwinding reference *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT)
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  asm { sei  }
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (number) $7f
  *((const nomodify byte*) RASTER) ← (number) $60
  *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq()
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (volatile byte) irq_idx ← (byte) 0
  to:@2

interrupt(KERNEL_MIN)(void()) table_driven_irq()
table_driven_irq: scope:[table_driven_irq]  from
  to:table_driven_irq::@1
table_driven_irq::@1: scope:[table_driven_irq]  from table_driven_irq table_driven_irq::@4
  (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx)
  (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx)
  (volatile byte) irq_idx ← ++ (volatile byte) irq_idx
  (bool~) table_driven_irq::$0 ← (byte) table_driven_irq::idx#0 < (const nomodify byte) VIC_SIZE
  if((bool~) table_driven_irq::$0) goto table_driven_irq::@2
  to:table_driven_irq::@5
table_driven_irq::@2: scope:[table_driven_irq]  from table_driven_irq::@1
  (byte) table_driven_irq::idx#1 ← phi( table_driven_irq::@1/(byte) table_driven_irq::idx#0 )
  (byte) table_driven_irq::val#1 ← phi( table_driven_irq::@1/(byte) table_driven_irq::val#0 )
  *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#1) ← (byte) table_driven_irq::val#1
  to:table_driven_irq::@4
table_driven_irq::@5: scope:[table_driven_irq]  from table_driven_irq::@1
  (byte) table_driven_irq::val#4 ← phi( table_driven_irq::@1/(byte) table_driven_irq::val#0 )
  (byte) table_driven_irq::idx#2 ← phi( table_driven_irq::@1/(byte) table_driven_irq::idx#0 )
  (bool~) table_driven_irq::$1 ← (byte) table_driven_irq::idx#2 < (const nomodify byte) VIC_SIZE+(number) 8
  if((bool~) table_driven_irq::$1) goto table_driven_irq::@3
  to:table_driven_irq::@6
table_driven_irq::@3: scope:[table_driven_irq]  from table_driven_irq::@5
  (byte) table_driven_irq::val#2 ← phi( table_driven_irq::@5/(byte) table_driven_irq::val#4 )
  (byte) table_driven_irq::idx#3 ← phi( table_driven_irq::@5/(byte) table_driven_irq::idx#2 )
  (number~) table_driven_irq::$4 ← (byte) table_driven_irq::idx#3 + (number) $3f8
  (number~) table_driven_irq::$5 ← (number~) table_driven_irq::$4 - (const nomodify byte) VIC_SIZE
  *((const nomodify byte*) SCREEN + (number~) table_driven_irq::$5) ← (byte) table_driven_irq::val#2
  to:table_driven_irq::@4
table_driven_irq::@6: scope:[table_driven_irq]  from table_driven_irq::@5
  (byte) table_driven_irq::val#3 ← phi( table_driven_irq::@5/(byte) table_driven_irq::val#4 )
  *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify byte*) RASTER) ← (byte) table_driven_irq::val#3
  (bool~) table_driven_irq::$2 ← (byte) table_driven_irq::val#3 < *((const nomodify byte*) RASTER)
  (bool~) table_driven_irq::$3 ← ! (bool~) table_driven_irq::$2
  if((bool~) table_driven_irq::$3) goto table_driven_irq::@return
  to:table_driven_irq::@7
table_driven_irq::@7: scope:[table_driven_irq]  from table_driven_irq::@6
  (volatile byte) irq_idx ← (number) 0
  to:table_driven_irq::@return
table_driven_irq::@return: scope:[table_driven_irq]  from table_driven_irq::@4 table_driven_irq::@6 table_driven_irq::@7
  return 
  to:@return
table_driven_irq::@4: scope:[table_driven_irq]  from table_driven_irq::@2 table_driven_irq::@3
  if(true) goto table_driven_irq::@1
  to:table_driven_irq::@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const byte*) IRQ_CHANGE_IDX[]  = { (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT }
(const nomodify byte) IRQ_CHANGE_NEXT = (byte) $7f
(const byte*) IRQ_CHANGE_VAL[]  = { (byte) $b, (byte) $b, (byte) $63, (byte) 0, (byte) 0, (byte) $80, (byte) 7, (byte) 7, (byte) $83, (byte) 0, (byte) 0, (byte) $60 }
(const nomodify byte*) IRQ_ENABLE = (byte*)(number) $d01a
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify byte*) IRQ_STATUS = (byte*)(number) $d019
(const nomodify void()**) KERNEL_IRQ = (void()**)(number) $314
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const nomodify byte*) RASTER = (byte*)(number) $d012
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const nomodify byte*) VIC_BASE = (byte*)(number) $d000
(const nomodify byte*) VIC_CONTROL = (byte*)(number) $d011
(const nomodify byte) VIC_SIZE = (byte) $30
(volatile byte) irq_idx loadstore
(void()) main()
(label) main::@return
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(bool~) table_driven_irq::$0
(bool~) table_driven_irq::$1
(bool~) table_driven_irq::$2
(bool~) table_driven_irq::$3
(number~) table_driven_irq::$4
(number~) table_driven_irq::$5
(label) table_driven_irq::@1
(label) table_driven_irq::@2
(label) table_driven_irq::@3
(label) table_driven_irq::@4
(label) table_driven_irq::@5
(label) table_driven_irq::@6
(label) table_driven_irq::@7
(label) table_driven_irq::@return
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0
(byte) table_driven_irq::idx#1
(byte) table_driven_irq::idx#2
(byte) table_driven_irq::idx#3
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0
(byte) table_driven_irq::val#1
(byte) table_driven_irq::val#2
(byte) table_driven_irq::val#3
(byte) table_driven_irq::val#4

Adding number conversion cast (unumber) $7f in *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (number) $7f
Adding number conversion cast (unumber) $60 in *((const nomodify byte*) RASTER) ← (number) $60
Adding number conversion cast (unumber) VIC_SIZE+8 in (bool~) table_driven_irq::$1 ← (byte) table_driven_irq::idx#2 < (const nomodify byte) VIC_SIZE+(number) 8
Adding number conversion cast (unumber) 8 in (bool~) table_driven_irq::$1 ← (byte) table_driven_irq::idx#2 < (unumber)(const nomodify byte) VIC_SIZE+(number) 8
Adding number conversion cast (unumber) $3f8 in (number~) table_driven_irq::$4 ← (byte) table_driven_irq::idx#3 + (number) $3f8
Adding number conversion cast (unumber) table_driven_irq::$4 in (number~) table_driven_irq::$4 ← (byte) table_driven_irq::idx#3 + (unumber)(number) $3f8
Adding number conversion cast (unumber) table_driven_irq::$5 in (number~) table_driven_irq::$5 ← (unumber~) table_driven_irq::$4 - (const nomodify byte) VIC_SIZE
Adding number conversion cast (unumber) 0 in (volatile byte) irq_idx ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const nomodify byte*) RASTER) ← (unumber)(number) $60
Inlining cast (volatile byte) irq_idx ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $7f
Simplifying constant integer cast $60
Simplifying constant integer cast (const nomodify byte) VIC_SIZE+(unumber)(number) 8
Simplifying constant integer cast 8
Simplifying constant integer cast $3f8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $60
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) table_driven_irq::$4 ← (byte) table_driven_irq::idx#3 + (word) $3f8
Inferred type updated to word in (unumber~) table_driven_irq::$5 ← (word~) table_driven_irq::$4 - (const nomodify byte) VIC_SIZE
Inversing boolean not [28] (bool~) table_driven_irq::$3 ← (byte) table_driven_irq::val#3 >= *((const nomodify byte*) RASTER) from [27] (bool~) table_driven_irq::$2 ← (byte) table_driven_irq::val#3 < *((const nomodify byte*) RASTER)
Successful SSA optimization Pass2UnaryNotSimplification
Alias table_driven_irq::val#0 = table_driven_irq::val#1 table_driven_irq::val#4 table_driven_irq::val#2 table_driven_irq::val#3 
Alias table_driven_irq::idx#0 = table_driven_irq::idx#1 table_driven_irq::idx#2 table_driven_irq::idx#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) table_driven_irq::$0 [14] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE) goto table_driven_irq::@2
Simple Condition (bool~) table_driven_irq::$1 [17] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE+(byte) 8) goto table_driven_irq::@3
Simple Condition (bool~) table_driven_irq::$3 [24] if((byte) table_driven_irq::val#0>=*((const nomodify byte*) RASTER)) goto table_driven_irq::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [27] if(true) goto table_driven_irq::@1
Successful SSA optimization Pass2ConstantIfs
De-inlining pointer[w] to *(pointer+w)   [20] *((const nomodify byte*) SCREEN + (word~) table_driven_irq::$5) ← (byte) table_driven_irq::val#0
Successful SSA optimization Pass2DeInlineWordDerefIdx
Consolidated constant in assignment table_driven_irq::$6
Successful SSA optimization Pass2ConstantAdditionElimination
Alias table_driven_irq::$5 = table_driven_irq::$4 
Successful SSA optimization Pass2AliasElimination
Consolidated constant in assignment table_driven_irq::$6
Successful SSA optimization Pass2ConstantAdditionElimination
Alias table_driven_irq::idx#0 = table_driven_irq::$5 
Successful SSA optimization Pass2AliasElimination
Converting *(pointer+n) to pointer[n] [17] *((byte*~) table_driven_irq::$6) ← (byte) table_driven_irq::val#0  -- *(SCREEN+-VIC_SIZE+$3f8 + table_driven_irq::idx#0)
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable (byte*~) table_driven_irq::$6 and assignment [16] (byte*~) table_driven_irq::$6 ← (const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of table_driven_irq
Adding NOP phi() at start of table_driven_irq::@4
CALL GRAPH
Calls in [] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) table_driven_irq::@4
Renumbering block table_driven_irq::@5 to table_driven_irq::@4
Renumbering block table_driven_irq::@6 to table_driven_irq::@5
Renumbering block table_driven_irq::@7 to table_driven_irq::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of table_driven_irq

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile byte) irq_idx ← (byte) 0
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [8] *((const nomodify byte*) RASTER) ← (byte) $60
  [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq()
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return

interrupt(KERNEL_MIN)(void()) table_driven_irq()
table_driven_irq: scope:[table_driven_irq]  from
  [14] phi()
  to:table_driven_irq::@1
table_driven_irq::@1: scope:[table_driven_irq]  from table_driven_irq table_driven_irq::@2 table_driven_irq::@3
  [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx)
  [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx)
  [17] (volatile byte) irq_idx ← ++ (volatile byte) irq_idx
  [18] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE) goto table_driven_irq::@2
  to:table_driven_irq::@4
table_driven_irq::@4: scope:[table_driven_irq]  from table_driven_irq::@1
  [19] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE+(byte) 8) goto table_driven_irq::@3
  to:table_driven_irq::@5
table_driven_irq::@5: scope:[table_driven_irq]  from table_driven_irq::@4
  [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [21] *((const nomodify byte*) RASTER) ← (byte) table_driven_irq::val#0
  [22] if((byte) table_driven_irq::val#0>=*((const nomodify byte*) RASTER)) goto table_driven_irq::@return
  to:table_driven_irq::@6
table_driven_irq::@6: scope:[table_driven_irq]  from table_driven_irq::@5
  [23] (volatile byte) irq_idx ← (byte) 0
  to:table_driven_irq::@return
table_driven_irq::@return: scope:[table_driven_irq]  from table_driven_irq::@5 table_driven_irq::@6
  [24] return 
  to:@return
table_driven_irq::@3: scope:[table_driven_irq]  from table_driven_irq::@4
  [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0
  to:table_driven_irq::@1
table_driven_irq::@2: scope:[table_driven_irq]  from table_driven_irq::@1
  [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0
  to:table_driven_irq::@1


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(volatile byte) irq_idx loadstore 6.0
(void()) main()
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0 11.0
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0 6.166666666666666

Initial phi equivalence classes
Added variable irq_idx to live range equivalence class [ irq_idx ]
Added variable table_driven_irq::idx#0 to live range equivalence class [ table_driven_irq::idx#0 ]
Added variable table_driven_irq::val#0 to live range equivalence class [ table_driven_irq::val#0 ]
Complete equivalence classes
[ irq_idx ]
[ table_driven_irq::idx#0 ]
[ table_driven_irq::val#0 ]
Allocated zp[1]:2 [ irq_idx ]
Allocated zp[1]:3 [ table_driven_irq::idx#0 ]
Allocated zp[1]:4 [ table_driven_irq::val#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test interrupt routine using a variable between calls (irq_idx)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label irq_idx = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z irq_idx
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [8] *((const nomodify byte*) RASTER) ← (byte) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
    // [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // table_driven_irq
table_driven_irq: {
    .label idx = 3
    .label val = 4
    // entry interrupt(KERNEL_MIN)
    jmp __b1
    // table_driven_irq::@1
  __b1:
    // [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z irq_idx
    lda IRQ_CHANGE_IDX,y
    sta.z idx
    // [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z irq_idx
    lda IRQ_CHANGE_VAL,y
    sta.z val
    // [17] (volatile byte) irq_idx ← ++ (volatile byte) irq_idx -- vbuz1=_inc_vbuz1 
    inc.z irq_idx
    // [18] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE) goto table_driven_irq::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z idx
    cmp #VIC_SIZE
    bcc __b2
    jmp __b4
    // table_driven_irq::@4
  __b4:
    // [19] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE+(byte) 8) goto table_driven_irq::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z idx
    cmp #VIC_SIZE+8
    bcc __b3
    jmp __b5
    // table_driven_irq::@5
  __b5:
    // [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [21] *((const nomodify byte*) RASTER) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta RASTER
    // [22] if((byte) table_driven_irq::val#0>=*((const nomodify byte*) RASTER)) goto table_driven_irq::@return -- vbuz1_ge__deref_pbuc1_then_la1 
    lda RASTER
    ldy.z val
    sta.z $ff
    cpy.z $ff
    bcs __breturn
    jmp __b6
    // table_driven_irq::@6
  __b6:
    // [23] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_idx
    jmp __breturn
    // table_driven_irq::@return
  __breturn:
    // [24] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
    // table_driven_irq::@3
  __b3:
    // [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z val
    ldy.z idx
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp __b1
    // table_driven_irq::@2
  __b2:
    // [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z val
    ldy.z idx
    sta VIC_BASE,y
    jmp __b1
}
  // File Data
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) irq_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) RASTER) ← (byte) $60 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx) [ irq_idx table_driven_irq::idx#0 ] (  [ irq_idx table_driven_irq::idx#0 ] { }  ) always clobbers reg byte y 
Statement [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx) [ irq_idx table_driven_irq::idx#0 table_driven_irq::val#0 ] (  [ irq_idx table_driven_irq::idx#0 table_driven_irq::val#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ table_driven_irq::idx#0 ]
Statement [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ table_driven_irq::val#0 ] (  [ table_driven_irq::val#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ table_driven_irq::val#0 ]
Statement [23] (volatile byte) irq_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx ] (  [ irq_idx ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx ] (  [ irq_idx ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte) irq_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) RASTER) ← (byte) $60 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx) [ irq_idx table_driven_irq::idx#0 ] (  [ irq_idx table_driven_irq::idx#0 ] { }  ) always clobbers reg byte y 
Statement [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx) [ irq_idx table_driven_irq::idx#0 table_driven_irq::val#0 ] (  [ irq_idx table_driven_irq::idx#0 table_driven_irq::val#0 ] { }  ) always clobbers reg byte y 
Statement [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ table_driven_irq::val#0 ] (  [ table_driven_irq::val#0 ] { }  ) always clobbers reg byte a 
Statement [23] (volatile byte) irq_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx ] (  [ irq_idx ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 [ irq_idx ] (  [ irq_idx ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ irq_idx ] : zp[1]:2 , 
Potential registers zp[1]:3 [ table_driven_irq::idx#0 ] : zp[1]:3 , reg byte a , reg byte x , 
Potential registers zp[1]:4 [ table_driven_irq::val#0 ] : zp[1]:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [table_driven_irq] 11: zp[1]:3 [ table_driven_irq::idx#0 ] 6.17: zp[1]:4 [ table_driven_irq::val#0 ] 
Uplift Scope [] 6: zp[1]:2 [ irq_idx ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [main] 

Uplifting [table_driven_irq] best 762 combination reg byte a [ table_driven_irq::idx#0 ] reg byte x [ table_driven_irq::val#0 ] 
Uplifting [] best 762 combination zp[1]:2 [ irq_idx ] 
Uplifting [MOS6526_CIA] best 762 combination 
Uplifting [main] best 762 combination 
Attempting to uplift remaining variables inzp[1]:2 [ irq_idx ]
Uplifting [] best 762 combination zp[1]:2 [ irq_idx ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test interrupt routine using a variable between calls (irq_idx)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label irq_idx = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z irq_idx
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [8] *((const nomodify byte*) RASTER) ← (byte) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
    // [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // table_driven_irq
table_driven_irq: {
    // entry interrupt(KERNEL_MIN)
    jmp __b1
    // table_driven_irq::@1
  __b1:
    // [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z irq_idx
    lda IRQ_CHANGE_IDX,y
    // [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z irq_idx
    ldx IRQ_CHANGE_VAL,y
    // [17] (volatile byte) irq_idx ← ++ (volatile byte) irq_idx -- vbuz1=_inc_vbuz1 
    inc.z irq_idx
    // [18] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE) goto table_driven_irq::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE
    bcc __b2
    jmp __b4
    // table_driven_irq::@4
  __b4:
    // [19] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE+(byte) 8) goto table_driven_irq::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE+8
    bcc __b3
    jmp __b5
    // table_driven_irq::@5
  __b5:
    // [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [21] *((const nomodify byte*) RASTER) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuxx 
    stx RASTER
    // [22] if((byte) table_driven_irq::val#0>=*((const nomodify byte*) RASTER)) goto table_driven_irq::@return -- vbuxx_ge__deref_pbuc1_then_la1 
    ldy RASTER
    sty.z $ff
    cpx.z $ff
    bcs __breturn
    jmp __b6
    // table_driven_irq::@6
  __b6:
    // [23] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_idx
    jmp __breturn
    // table_driven_irq::@return
  __breturn:
    // [24] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
    // table_driven_irq::@3
  __b3:
    // [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp __b1
    // table_driven_irq::@2
  __b2:
    // [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta VIC_BASE,y
    jmp __b1
}
  // File Data
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #IRQ_RASTER
Removing instruction ldy.z irq_idx
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to $ea81 in bcs __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [69] bcs $ea81 to bcc

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const byte*) IRQ_CHANGE_IDX[]  = { (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT, (byte) $20, (byte) $21, (const nomodify byte) IRQ_CHANGE_NEXT }
(const nomodify byte) IRQ_CHANGE_NEXT = (byte) $7f
(const byte*) IRQ_CHANGE_VAL[]  = { (byte) $b, (byte) $b, (byte) $63, (byte) 0, (byte) 0, (byte) $80, (byte) 7, (byte) 7, (byte) $83, (byte) 0, (byte) 0, (byte) $60 }
(const nomodify byte*) IRQ_ENABLE = (byte*) 53274
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify byte*) IRQ_STATUS = (byte*) 53273
(const nomodify void()**) KERNEL_IRQ = (void()**) 788
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const nomodify byte*) RASTER = (byte*) 53266
(const nomodify byte*) SCREEN = (byte*) 1024
(const nomodify byte*) VIC_BASE = (byte*) 53248
(const nomodify byte*) VIC_CONTROL = (byte*) 53265
(const nomodify byte) VIC_SIZE = (byte) $30
(volatile byte) irq_idx loadstore zp[1]:2 6.0
(void()) main()
(label) main::@return
interrupt(KERNEL_MIN)(void()) table_driven_irq()
(label) table_driven_irq::@1
(label) table_driven_irq::@2
(label) table_driven_irq::@3
(label) table_driven_irq::@4
(label) table_driven_irq::@5
(label) table_driven_irq::@6
(label) table_driven_irq::@return
(byte) table_driven_irq::idx
(byte) table_driven_irq::idx#0 reg byte a 11.0
(byte) table_driven_irq::val
(byte) table_driven_irq::val#0 reg byte x 6.166666666666666

zp[1]:2 [ irq_idx ]
reg byte a [ table_driven_irq::idx#0 ]
reg byte x [ table_driven_irq::val#0 ]


FINAL ASSEMBLER
Score: 604

  // File Comments
// Test interrupt routine using a variable between calls (irq_idx)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label VIC_BASE = $d000
  .const VIC_SIZE = $30
  .const IRQ_CHANGE_NEXT = $7f
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label irq_idx = 2
  // @begin
__bbegin:
  // @1
  // irq_idx = 0
  // [1] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z irq_idx
  // [2] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [3] call main 
  jsr main
  rts
  // [4] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // *VIC_CONTROL &=$7f
    // [7] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $60
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = $60
    // [8] *((const nomodify byte*) RASTER) ← (byte) $60 -- _deref_pbuc1=vbuc2 
    lda #$60
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [9] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *IRQ_STATUS = IRQ_RASTER
    // [10] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ
    sta IRQ_STATUS
    // *KERNEL_IRQ = &table_driven_irq
    // [11] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) table_driven_irq() -- _deref_pptc1=pprc2 
    // Setup the table driven IRQ routine
    lda #<table_driven_irq
    sta KERNEL_IRQ
    lda #>table_driven_irq
    sta KERNEL_IRQ+1
    // asm
    // asm { cli  }
    cli
    // main::@return
    // }
    // [13] return 
    rts
}
  // table_driven_irq
table_driven_irq: {
    // entry interrupt(KERNEL_MIN)
    // table_driven_irq::@1
  __b1:
    // idx = IRQ_CHANGE_IDX[irq_idx]
    // [15] (byte) table_driven_irq::idx#0 ← *((const byte*) IRQ_CHANGE_IDX + (volatile byte) irq_idx) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z irq_idx
    lda IRQ_CHANGE_IDX,y
    // val = IRQ_CHANGE_VAL[irq_idx]
    // [16] (byte) table_driven_irq::val#0 ← *((const byte*) IRQ_CHANGE_VAL + (volatile byte) irq_idx) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx IRQ_CHANGE_VAL,y
    // irq_idx++;
    // [17] (volatile byte) irq_idx ← ++ (volatile byte) irq_idx -- vbuz1=_inc_vbuz1 
    inc.z irq_idx
    // if (idx < VIC_SIZE)
    // [18] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE) goto table_driven_irq::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE
    bcc __b2
    // table_driven_irq::@4
    // if (idx < VIC_SIZE + 8)
    // [19] if((byte) table_driven_irq::idx#0<(const nomodify byte) VIC_SIZE+(byte) 8) goto table_driven_irq::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #VIC_SIZE+8
    bcc __b3
    // table_driven_irq::@5
    // *IRQ_STATUS = IRQ_RASTER
    // [20] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // *RASTER = val
    // [21] *((const nomodify byte*) RASTER) ← (byte) table_driven_irq::val#0 -- _deref_pbuc1=vbuxx 
    stx RASTER
    // if (val < *RASTER)
    // [22] if((byte) table_driven_irq::val#0>=*((const nomodify byte*) RASTER)) goto table_driven_irq::@return -- vbuxx_ge__deref_pbuc1_then_la1 
    ldy RASTER
    sty.z $ff
    cpx.z $ff
    bcc !__ea81+
    jmp $ea81
  !__ea81:
    // table_driven_irq::@6
    // irq_idx = 0
    // [23] (volatile byte) irq_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_idx
    // table_driven_irq::@return
    // }
    // [24] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
    // table_driven_irq::@3
  __b3:
    // SCREEN[idx + $3f8 - VIC_SIZE] = val
    // [25] *((const nomodify byte*) SCREEN+-(const nomodify byte) VIC_SIZE+(word) $3f8 + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta SCREEN+-VIC_SIZE+$3f8,y
    jmp __b1
    // table_driven_irq::@2
  __b2:
    // VIC_BASE[idx] = val
    // [26] *((const nomodify byte*) VIC_BASE + (byte) table_driven_irq::idx#0) ← (byte) table_driven_irq::val#0 -- pbuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta VIC_BASE,y
    jmp __b1
}
  // File Data
  IRQ_CHANGE_IDX: .byte $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT, $20, $21, IRQ_CHANGE_NEXT
  IRQ_CHANGE_VAL: .byte $b, $b, $63, 0, 0, $80, 7, 7, $83, 0, 0, $60

