Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) SCREEN 
Inlined call (byte~) main::$4 ← call toD018 (byte*) SCREEN (byte*) BITMAP 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) $30
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $31
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $36
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) $37
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) $d000
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) $d010
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) $d017
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) $d01b
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) $d024
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) $d025
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) $d026
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) $d011
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $40
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $20
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) $d016
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) $10
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) $d018
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) $d013
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) $d014
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) $d01a
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dc01
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc02
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dc03
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) $7f
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) $dd00
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) $dd01
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd02
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) $dd03
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) $dd0d
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) $314
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) $fffe
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) $a
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $b
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $c
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) $d
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) $e
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) $f
  to:@4
@4: scope:[]  from @begin
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
@6: scope:[]  from @4
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@9
divr16u: scope:[divr16u]  from div32u16u div32u16u::@2
  (word) divr16u::divisor#6 ← phi( div32u16u/(word) divr16u::divisor#0 div32u16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( div32u16u/(word) divr16u::dividend#1 div32u16u::@2/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( div32u16u/(word) divr16u::rem#3 div32u16u::@2/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (word/dword~) divr16u::$5 ← (word) divr16u::rem#7 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#1 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#11 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#11
  return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen2
  (word) rem16u#20 ← phi( sin16s_gen2/(word) rem16u#21 )
  (word) div32u16u::divisor#1 ← phi( sin16s_gen2/(word) div32u16u::divisor#0 )
  (dword) div32u16u::dividend#1 ← phi( sin16s_gen2/(dword) div32u16u::dividend#0 )
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend#1
  (word) divr16u::dividend#1 ← (word~) div32u16u::$0
  (word) divr16u::divisor#0 ← (word) div32u16u::divisor#1
  (word) divr16u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  (word) div32u16u::divisor#2 ← phi( div32u16u/(word) div32u16u::divisor#1 )
  (dword) div32u16u::dividend#2 ← phi( div32u16u/(dword) div32u16u::dividend#1 )
  (word) rem16u#12 ← phi( div32u16u/(word) rem16u#2 )
  (word) divr16u::return#5 ← phi( div32u16u/(word) divr16u::return#2 )
  (word~) div32u16u::$1 ← (word) divr16u::return#5
  (word) rem16u#3 ← (word) rem16u#12
  (word) div32u16u::quotient_hi#0 ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend#2
  (word) divr16u::dividend#2 ← (word~) div32u16u::$2
  (word) divr16u::divisor#1 ← (word) div32u16u::divisor#2
  (word) divr16u::rem#4 ← (word) rem16u#3
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  (word) div32u16u::quotient_hi#1 ← phi( div32u16u::@2/(word) div32u16u::quotient_hi#0 )
  (word) rem16u#13 ← phi( div32u16u::@2/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( div32u16u::@2/(word) divr16u::return#3 )
  (word~) div32u16u::$3 ← (word) divr16u::return#6
  (word) rem16u#4 ← (word) rem16u#13
  (word) div32u16u::quotient_lo#0 ← (word~) div32u16u::$3
  (dword) div32u16u::quotient#0 ← { (word) div32u16u::quotient_hi#1, (word) div32u16u::quotient_lo#0 }
  (dword) div32u16u::return#0 ← (dword) div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  (word) rem16u#14 ← phi( div32u16u::@3/(word) rem16u#4 )
  (dword) div32u16u::return#3 ← phi( div32u16u::@3/(dword) div32u16u::return#0 )
  (dword) div32u16u::return#1 ← (dword) div32u16u::return#3
  (word) rem16u#5 ← (word) rem16u#14
  return 
  to:@return
@9: scope:[]  from @6
  (word) rem16u#38 ← phi( @6/(word) rem16u#0 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@10
@10: scope:[]  from @9
  (word) rem16u#36 ← phi( @9/(word) rem16u#38 )
  (signed word) rem16s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@17
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mulu16_sel/(word) mul16u::a#2 )
  (word) mul16u::b#2 ← phi( mul16s/(word) mul16u::b#0 mulu16_sel/(word) mul16u::b#1 )
  (dword) mul16u::res#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#4 ← phi( mul16u::@1/(word) mul16u::a#3 )
  (byte/word~) mul16u::$1 ← (word) mul16u::a#4 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@7/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@7/(dword) mul16u::mb#3 )
  (word) mul16u::a#5 ← phi( mul16u::@2/(word) mul16u::a#4 mul16u::@7/(word) mul16u::a#7 )
  (word~) mul16u::$5 ← (word) mul16u::a#5 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#7 ← phi( mul16u::@2/(word) mul16u::a#4 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#4 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#4
  return 
  to:@return
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  (signed word) mul16s::b#1 ← phi( sin16s_gen2::@4/(signed word) mul16s::b#0 )
  (signed word) mul16s::a#1 ← phi( sin16s_gen2::@4/(signed word) mul16s::a#0 )
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a#1
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b#1
  (word) mul16u::a#1 ← (word~) mul16s::$0
  (word) mul16u::b#0 ← (word~) mul16s::$1
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mul16s::@6
mul16s::@6: scope:[mul16s]  from mul16s
  (signed word) mul16s::b#4 ← phi( mul16s/(signed word) mul16s::b#1 )
  (signed word) mul16s::a#2 ← phi( mul16s/(signed word) mul16s::a#1 )
  (dword) mul16u::return#5 ← phi( mul16s/(dword) mul16u::return#2 )
  (dword~) mul16s::$2 ← (dword) mul16u::return#5
  (dword) mul16s::m#0 ← (dword~) mul16s::$2
  (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$4 ← ! (bool~) mul16s::$3
  if((bool~) mul16s::$4) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@6
  (signed word) mul16s::a#4 ← phi( mul16s::@3/(signed word) mul16s::a#5 mul16s::@6/(signed word) mul16s::a#2 )
  (dword) mul16s::m#6 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@6/(dword) mul16s::m#0 )
  (signed word) mul16s::b#2 ← phi( mul16s::@3/(signed word) mul16s::b#3 mul16s::@6/(signed word) mul16s::b#4 )
  (bool~) mul16s::$9 ← (signed word) mul16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$10 ← ! (bool~) mul16s::$9
  if((bool~) mul16s::$10) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@6
  (signed word) mul16s::a#5 ← phi( mul16s::@6/(signed word) mul16s::a#2 )
  (signed word) mul16s::b#3 ← phi( mul16s::@6/(signed word) mul16s::b#4 )
  (dword) mul16s::m#3 ← phi( mul16s::@6/(dword) mul16s::m#0 )
  (word~) mul16s::$6 ← > (dword) mul16s::m#3
  (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b#3
  (word~) mul16s::$8 ← (word~) mul16s::$6 - (word~) mul16s::$7
  (word~) mul16s::$16 ← (word~) mul16s::$8
  (dword) mul16s::m#1 ← (dword) mul16s::m#3 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#6 mul16s::@4/(dword) mul16s::m#2 )
  (signed dword~) mul16s::$15 ← ((signed dword)) (dword) mul16s::m#4
  (signed dword) mul16s::return#0 ← (signed dword~) mul16s::$15
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (signed word) mul16s::a#3 ← phi( mul16s::@1/(signed word) mul16s::a#4 )
  (dword) mul16s::m#5 ← phi( mul16s::@1/(dword) mul16s::m#6 )
  (word~) mul16s::$12 ← > (dword) mul16s::m#5
  (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a#3
  (word~) mul16s::$14 ← (word~) mul16s::$12 - (word~) mul16s::$13
  (word~) mul16s::$17 ← (word~) mul16s::$14
  (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  (signed dword) mul16s::return#3 ← phi( mul16s::@2/(signed dword) mul16s::return#0 )
  (signed dword) mul16s::return#1 ← (signed dword) mul16s::return#3
  return 
  to:@return
@17: scope:[]  from @10
  (word) rem16u#34 ← phi( @10/(word) rem16u#36 )
  (dword) PI2_u4f28#0 ← (dword/signed dword) $6487ed51
  (dword) PI_u4f28#0 ← (dword/signed dword) $3243f6a9
  (dword) PI_HALF_u4f28#0 ← (dword/signed dword) $1921fb54
  (word) PI2_u4f12#0 ← (word/signed word/dword/signed dword) $6488
  (word) PI_u4f12#0 ← (word/signed word/dword/signed dword) $3244
  (word) PI_HALF_u4f12#0 ← (word/signed word/dword/signed dword) $1922
  to:@26
sin16s_gen2: scope:[sin16s_gen2]  from main::@11
  (signed word*) sin16s_gen2::sintab#6 ← phi( main::@11/(signed word*) sin16s_gen2::sintab#1 )
  (word) rem16u#21 ← phi( main::@11/(word) rem16u#23 )
  (word) sin16s_gen2::wavelength#1 ← phi( main::@11/(word) sin16s_gen2::wavelength#0 )
  (signed word) sin16s_gen2::min#1 ← phi( main::@11/(signed word) sin16s_gen2::min#0 )
  (signed word) sin16s_gen2::max#1 ← phi( main::@11/(signed word) sin16s_gen2::max#0 )
  (signed word~) sin16s_gen2::$0 ← (signed word) sin16s_gen2::max#1 - (signed word) sin16s_gen2::min#1
  (signed word) sin16s_gen2::ampl#0 ← (signed word~) sin16s_gen2::$0
  (signed word~) sin16s_gen2::$1 ← (signed word) sin16s_gen2::ampl#0 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word~) sin16s_gen2::$2 ← (signed word) sin16s_gen2::min#1 + (signed word~) sin16s_gen2::$1
  (signed word) sin16s_gen2::offs#0 ← (signed word~) sin16s_gen2::$2
  (dword) div32u16u::dividend#0 ← (dword) PI2_u4f28#0
  (word) div32u16u::divisor#0 ← (word) sin16s_gen2::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#2 ← (dword) div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  (word) sin16s_gen2::wavelength#5 ← phi( sin16s_gen2/(word) sin16s_gen2::wavelength#1 )
  (signed word*) sin16s_gen2::sintab#5 ← phi( sin16s_gen2/(signed word*) sin16s_gen2::sintab#6 )
  (signed word) sin16s_gen2::offs#4 ← phi( sin16s_gen2/(signed word) sin16s_gen2::offs#0 )
  (signed word) sin16s_gen2::ampl#3 ← phi( sin16s_gen2/(signed word) sin16s_gen2::ampl#0 )
  (word) rem16u#15 ← phi( sin16s_gen2/(word) rem16u#5 )
  (dword) div32u16u::return#4 ← phi( sin16s_gen2/(dword) div32u16u::return#2 )
  (dword~) sin16s_gen2::$3 ← (dword) div32u16u::return#4
  (word) rem16u#6 ← (word) rem16u#15
  (dword) sin16s_gen2::step#0 ← (dword~) sin16s_gen2::$3
  (dword) sin16s_gen2::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen2::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  (word) rem16u#31 ← phi( sin16s_gen2::@3/(word) rem16u#6 sin16s_gen2::@5/(word) rem16u#22 )
  (word) sin16s_gen2::wavelength#4 ← phi( sin16s_gen2::@3/(word) sin16s_gen2::wavelength#5 sin16s_gen2::@5/(word) sin16s_gen2::wavelength#2 )
  (word) sin16s_gen2::i#4 ← phi( sin16s_gen2::@3/(word) sin16s_gen2::i#0 sin16s_gen2::@5/(word) sin16s_gen2::i#1 )
  (dword) sin16s_gen2::step#3 ← phi( sin16s_gen2::@3/(dword) sin16s_gen2::step#0 sin16s_gen2::@5/(dword) sin16s_gen2::step#1 )
  (signed word*) sin16s_gen2::sintab#4 ← phi( sin16s_gen2::@3/(signed word*) sin16s_gen2::sintab#5 sin16s_gen2::@5/(signed word*) sin16s_gen2::sintab#0 )
  (signed word) sin16s_gen2::offs#3 ← phi( sin16s_gen2::@3/(signed word) sin16s_gen2::offs#4 sin16s_gen2::@5/(signed word) sin16s_gen2::offs#1 )
  (signed word) sin16s_gen2::ampl#2 ← phi( sin16s_gen2::@3/(signed word) sin16s_gen2::ampl#3 sin16s_gen2::@5/(signed word) sin16s_gen2::ampl#4 )
  (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@3/(dword) sin16s_gen2::x#0 sin16s_gen2::@5/(dword) sin16s_gen2::x#1 )
  (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  call sin16s 
  (signed word) sin16s::return#0 ← (signed word) sin16s::return#2
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@1
  (word) rem16u#26 ← phi( sin16s_gen2::@1/(word) rem16u#31 )
  (word) sin16s_gen2::wavelength#3 ← phi( sin16s_gen2::@1/(word) sin16s_gen2::wavelength#4 )
  (word) sin16s_gen2::i#3 ← phi( sin16s_gen2::@1/(word) sin16s_gen2::i#4 )
  (dword) sin16s_gen2::step#2 ← phi( sin16s_gen2::@1/(dword) sin16s_gen2::step#3 )
  (dword) sin16s_gen2::x#4 ← phi( sin16s_gen2::@1/(dword) sin16s_gen2::x#2 )
  (signed word*) sin16s_gen2::sintab#3 ← phi( sin16s_gen2::@1/(signed word*) sin16s_gen2::sintab#4 )
  (signed word) sin16s_gen2::offs#2 ← phi( sin16s_gen2::@1/(signed word) sin16s_gen2::offs#3 )
  (signed word) sin16s_gen2::ampl#1 ← phi( sin16s_gen2::@1/(signed word) sin16s_gen2::ampl#2 )
  (signed word) sin16s::return#3 ← phi( sin16s_gen2::@1/(signed word) sin16s::return#0 )
  (signed word~) sin16s_gen2::$4 ← (signed word) sin16s::return#3
  (signed word) mul16s::a#0 ← (signed word~) sin16s_gen2::$4
  (signed word) mul16s::b#0 ← (signed word) sin16s_gen2::ampl#1
  call mul16s 
  (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  (signed word) sin16s_gen2::ampl#4 ← phi( sin16s_gen2::@4/(signed word) sin16s_gen2::ampl#1 )
  (word) rem16u#22 ← phi( sin16s_gen2::@4/(word) rem16u#26 )
  (word) sin16s_gen2::wavelength#2 ← phi( sin16s_gen2::@4/(word) sin16s_gen2::wavelength#3 )
  (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@4/(word) sin16s_gen2::i#3 )
  (dword) sin16s_gen2::step#1 ← phi( sin16s_gen2::@4/(dword) sin16s_gen2::step#2 )
  (dword) sin16s_gen2::x#3 ← phi( sin16s_gen2::@4/(dword) sin16s_gen2::x#4 )
  (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@4/(signed word*) sin16s_gen2::sintab#3 )
  (signed word) sin16s_gen2::offs#1 ← phi( sin16s_gen2::@4/(signed word) sin16s_gen2::offs#2 )
  (signed dword) mul16s::return#4 ← phi( sin16s_gen2::@4/(signed dword) mul16s::return#2 )
  (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#4
  (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5
  (signed word~) sin16s_gen2::$7 ← ((signed word)) (word~) sin16s_gen2::$6
  (signed word~) sin16s_gen2::$8 ← (signed word) sin16s_gen2::offs#1 + (signed word~) sin16s_gen2::$7
  *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8
  (signed word*~) sin16s_gen2::$9 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen2::sintab#0 ← (signed word*~) sin16s_gen2::$9
  (dword~) sin16s_gen2::$10 ← (dword) sin16s_gen2::x#3 + (dword) sin16s_gen2::step#1
  (dword) sin16s_gen2::x#1 ← (dword~) sin16s_gen2::$10
  (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  (bool~) sin16s_gen2::$11 ← (word) sin16s_gen2::i#1 < (word) sin16s_gen2::wavelength#2
  if((bool~) sin16s_gen2::$11) goto sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@5
  (word) rem16u#16 ← phi( sin16s_gen2::@5/(word) rem16u#22 )
  (word) rem16u#7 ← (word) rem16u#16
  return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen2::@1
  (dword) sin16s::x#3 ← phi( sin16s_gen2::@1/(dword) sin16s::x#0 )
  (byte) sin16s::isUpper#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (byte) sin16s::isUpper#8 ← phi( sin16s/(byte) sin16s::isUpper#0 sin16s::@4/(byte) sin16s::isUpper#1 )
  (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#3 sin16s::@4/(dword) sin16s::x#1 )
  (bool~) sin16s::$3 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
  (bool~) sin16s::$4 ← ! (bool~) sin16s::$3
  if((bool~) sin16s::$4) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword) sin16s::x#5 ← phi( sin16s/(dword) sin16s::x#3 )
  (dword~) sin16s::$2 ← (dword) sin16s::x#5 - (dword) PI_u4f28#0
  (dword) sin16s::x#1 ← (dword~) sin16s::$2
  (byte) sin16s::isUpper#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (byte) sin16s::isUpper#7 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 sin16s::@5/(byte) sin16s::isUpper#9 )
  (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) sin16s::$7 ← > (dword~) sin16s::$6
  (word) sin16s::x1#0 ← (word~) sin16s::$7
  (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  (byte) mulu16_sel::select#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  (byte) sin16s::isUpper#6 ← phi( sin16s::@2/(byte) sin16s::isUpper#7 )
  (word) sin16s::x1#1 ← phi( sin16s::@2/(word) sin16s::x1#0 )
  (word) mulu16_sel::return#7 ← phi( sin16s::@2/(word) mulu16_sel::return#0 )
  (word~) sin16s::$8 ← (word) mulu16_sel::return#7
  (word) sin16s::x2#0 ← (word~) sin16s::$8
  (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  (word) mulu16_sel::v2#1 ← (word) sin16s::x1#1
  (byte) mulu16_sel::select#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  (byte) sin16s::isUpper#5 ← phi( sin16s::@8/(byte) sin16s::isUpper#6 )
  (word) sin16s::x1#4 ← phi( sin16s::@8/(word) sin16s::x1#1 )
  (word) mulu16_sel::return#8 ← phi( sin16s::@8/(word) mulu16_sel::return#1 )
  (word~) sin16s::$9 ← (word) mulu16_sel::return#8
  (word) sin16s::x3#0 ← (word~) sin16s::$9
  (word/signed word/dword/signed dword~) sin16s::$10 ← (dword/signed dword) $10000 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  (word) mulu16_sel::v2#2 ← (word/signed word/dword/signed dword~) sin16s::$10
  (byte) mulu16_sel::select#2 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  (byte) sin16s::isUpper#4 ← phi( sin16s::@9/(byte) sin16s::isUpper#5 )
  (word) sin16s::x3#1 ← phi( sin16s::@9/(word) sin16s::x3#0 )
  (word) sin16s::x1#2 ← phi( sin16s::@9/(word) sin16s::x1#4 )
  (word) mulu16_sel::return#9 ← phi( sin16s::@9/(word) mulu16_sel::return#2 )
  (word~) sin16s::$11 ← (word) mulu16_sel::return#9
  (word) sin16s::x3_6#0 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x1#2 - (word) sin16s::x3_6#0
  (word) sin16s::usinx#0 ← (word~) sin16s::$12
  (word) mulu16_sel::v1#3 ← (word) sin16s::x3#1
  (word) mulu16_sel::v2#3 ← (word) sin16s::x1#2
  (byte) mulu16_sel::select#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#3 ← (word) mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  (byte) sin16s::isUpper#3 ← phi( sin16s::@10/(byte) sin16s::isUpper#4 )
  (word) sin16s::usinx#4 ← phi( sin16s::@10/(word) sin16s::usinx#0 )
  (word) sin16s::x1#3 ← phi( sin16s::@10/(word) sin16s::x1#2 )
  (word) mulu16_sel::return#10 ← phi( sin16s::@10/(word) mulu16_sel::return#3 )
  (word~) sin16s::$13 ← (word) mulu16_sel::return#10
  (word) sin16s::x4#0 ← (word~) sin16s::$13
  (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  (word) mulu16_sel::v2#4 ← (word) sin16s::x1#3
  (byte) mulu16_sel::select#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#4 ← (word) mulu16_sel::return#6
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  (byte) sin16s::isUpper#2 ← phi( sin16s::@11/(byte) sin16s::isUpper#3 )
  (word) sin16s::usinx#2 ← phi( sin16s::@11/(word) sin16s::usinx#4 )
  (word) mulu16_sel::return#11 ← phi( sin16s::@11/(word) mulu16_sel::return#4 )
  (word~) sin16s::$14 ← (word) mulu16_sel::return#11
  (word) sin16s::x5#0 ← (word~) sin16s::$14
  (word~) sin16s::$15 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16s::x5_128#0 ← (word~) sin16s::$15
  (word~) sin16s::$16 ← (word) sin16s::usinx#2 + (word) sin16s::x5_128#0
  (word) sin16s::usinx#1 ← (word~) sin16s::$16
  (signed word~) sin16s::$17 ← ((signed word)) (word) sin16s::usinx#1
  (signed word) sin16s::sinx#0 ← (signed word~) sin16s::$17
  (bool~) sin16s::$18 ← (byte) sin16s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$19 ← ! (bool~) sin16s::$18
  if((bool~) sin16s::$19) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (byte) sin16s::isUpper#9 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 )
  (dword) sin16s::x#7 ← phi( sin16s::@1/(dword) sin16s::x#4 )
  (dword~) sin16s::$5 ← (dword) PI_u4f28#0 - (dword) sin16s::x#7
  (dword) sin16s::x#2 ← (dword~) sin16s::$5
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  (signed word) sin16s::sinx#2 ← phi( sin16s::@12/(signed word) sin16s::sinx#0 sin16s::@6/(signed word) sin16s::sinx#1 )
  (signed word) sin16s::return#1 ← (signed word) sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@12
  (word) sin16s::usinx#3 ← phi( sin16s::@12/(word) sin16s::usinx#1 )
  (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx#3
  (signed word~) sin16s::$21 ← - (signed word~) sin16s::$20
  (signed word) sin16s::sinx#1 ← (signed word~) sin16s::$21
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  (signed word) sin16s::return#4 ← phi( sin16s::@3/(signed word) sin16s::return#1 )
  (signed word) sin16s::return#2 ← (signed word) sin16s::return#4
  return 
  to:@return
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9
  (byte) mulu16_sel::select#6 ← phi( sin16s::@10/(byte) mulu16_sel::select#3 sin16s::@11/(byte) mulu16_sel::select#4 sin16s::@2/(byte) mulu16_sel::select#0 sin16s::@8/(byte) mulu16_sel::select#1 sin16s::@9/(byte) mulu16_sel::select#2 )
  (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(word) mulu16_sel::v2#2 )
  (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 )
  (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  call mul16u 
  (dword) mul16u::return#3 ← (dword) mul16u::return#1
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  (byte) mulu16_sel::select#5 ← phi( mulu16_sel/(byte) mulu16_sel::select#6 )
  (dword) mul16u::return#6 ← phi( mulu16_sel/(dword) mul16u::return#3 )
  (dword~) mulu16_sel::$0 ← (dword) mul16u::return#6
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return#5 ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  (word) mulu16_sel::return#12 ← phi( mulu16_sel::@2/(word) mulu16_sel::return#5 )
  (word) mulu16_sel::return#6 ← (word) mulu16_sel::return#12
  return 
  to:@return
fill: scope:[fill]  from main::@8
  (byte) fill::val#2 ← phi( main::@8/(byte) fill::val#0 )
  (word) fill::size#1 ← phi( main::@8/(word) fill::size#0 )
  (byte*) fill::start#1 ← phi( main::@8/(byte*) fill::start#0 )
  (byte*~) fill::$0 ← (byte*) fill::start#1 + (word) fill::size#1
  (byte*) fill::end#0 ← (byte*~) fill::$0
  (byte*) fill::addr#0 ← (byte*) fill::start#1
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  (byte*) fill::end#1 ← phi( fill/(byte*) fill::end#0 fill::@1/(byte*) fill::end#1 )
  (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  (byte) fill::val#1 ← phi( fill/(byte) fill::val#2 fill::@1/(byte) fill::val#1 )
  *((byte*) fill::addr#2) ← (byte) fill::val#1
  (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  (bool~) fill::$1 ← (byte*) fill::addr#1 != (byte*) fill::end#1
  if((bool~) fill::$1) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  return 
  to:@return
@26: scope:[]  from @17
  (word) rem16u#32 ← phi( @17/(word) rem16u#34 )
  (byte[$100]) bitmap_plot_ylo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_yhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_bit#0 ← { fill( $100, 0) }
  to:@29
bitmap_init: scope:[bitmap_init]  from main::@9
  (byte*) bitmap_init::bitmap#5 ← phi( main::@9/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (byte/word/signed word/dword/signed dword) $80
  (byte) bitmap_init::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#5 bitmap_init::@2/(byte*) bitmap_init::bitmap#2 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@5
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@5
  (byte*) bitmap_init::bitmap#2 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#3 bitmap_init::@5/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@5/(byte) bitmap_init::bits#2 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@5/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@6
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (byte/word/signed word/dword/signed dword) $80
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init::@2/(byte*) bitmap_init::bitmap#2 )
  (byte*) bitmap_init::yoffs#0 ← (byte*) bitmap_init::bitmap#1
  (byte) bitmap_init::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@6/(byte*) bitmap_init::yoffs#0 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@6/(byte) bitmap_init::y#0 )
  (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$12 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$12) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@3/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 )
  (word/signed word/dword/signed dword~) bitmap_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) $28 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*~) bitmap_init::$11 ← (byte*) bitmap_init::yoffs#3 + (word/signed word/dword/signed dword~) bitmap_init::$10
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$11
  to:bitmap_init::@4
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@10
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_yhi#0 + (byte/signed byte/word/signed word/dword/signed dword) 0), *((byte[$100]) bitmap_plot_ylo#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) }
  (byte*) bitmap_clear::bitmap#0 ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← (byte) bitmap_clear::x#2 + rangenext(0,$c7)
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x#1 != rangelast(0,$c7)
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← (byte) bitmap_clear::y#2 + rangenext(0,$27)
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y#1 != rangelast(0,$27)
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from render_sine::@5 render_sine::@7
  (word) bitmap_plot::x#2 ← phi( render_sine::@5/(word) bitmap_plot::x#0 render_sine::@7/(word) bitmap_plot::x#1 )
  (byte) bitmap_plot::y#2 ← phi( render_sine::@5/(byte) bitmap_plot::y#0 render_sine::@7/(byte) bitmap_plot::y#1 )
  (byte*~) bitmap_plot::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2), *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) }
  (byte*) bitmap_plot::plotter#0 ← (byte*~) bitmap_plot::$0
  (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8
  (byte*) bitmap_plot::plotter#1 ← (byte*) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1
  (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2
  *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
@29: scope:[]  from @26
  (word) rem16u#30 ← phi( @26/(word) rem16u#32 )
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) BITMAP#0 ← ((byte*)) (word/signed word/dword/signed dword) $2000
  (word) SIN_SIZE#0 ← (word/signed word/dword/signed dword) $200
  (signed word[$200]) sin#0 ← { fill( $200, 0) }
  (signed word*) sin2#0 ← ((signed word*)) (word/signed word/dword/signed dword) $1400
  kickasm(location (signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
  to:@32
main: scope:[main]  from @32
  (signed word*) sin2#21 ← phi( @32/(signed word*) sin2#22 )
  (word) rem16u#45 ← phi( @32/(word) rem16u#25 )
  (byte*) BITMAP#10 ← phi( @32/(byte*) BITMAP#11 )
  (byte*) SCREEN#1 ← phi( @32/(byte*) SCREEN#4 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  (byte~) main::$0 ← (byte) VIC_BMM#0 | (byte) VIC_DEN#0
  (byte~) main::$1 ← (byte~) main::$0 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$2 ← (byte~) main::$1 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011#0) ← (byte/word/dword~) main::$2
  (byte*) main::vicSelectGfxBank1_gfx#0 ← (byte*) SCREEN#1
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  (signed word*) sin2#20 ← phi( main/(signed word*) sin2#21 )
  (word) rem16u#44 ← phi( main/(word) rem16u#45 )
  (byte*) BITMAP#9 ← phi( main/(byte*) BITMAP#10 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#1 )
  (byte*) main::vicSelectGfxBank1_gfx#1 ← phi( main/(byte*) main::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  (signed word*) sin2#19 ← phi( main::vicSelectGfxBank1/(signed word*) sin2#20 )
  (word) rem16u#43 ← phi( main::vicSelectGfxBank1/(word) rem16u#44 )
  (byte*) BITMAP#7 ← phi( main::vicSelectGfxBank1/(byte*) BITMAP#9 )
  (byte*) SCREEN#9 ← phi( main::vicSelectGfxBank1/(byte*) SCREEN#10 )
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 ← phi( main::vicSelectGfxBank1/(byte*) main::vicSelectGfxBank1_toDd001_gfx#0 )
  (word) main::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) main::vicSelectGfxBank1_toDd001_gfx#1
  (byte) main::vicSelectGfxBank1_toDd001_$1#0 ← > (word) main::vicSelectGfxBank1_toDd001_$0#0
  (byte) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte) main::vicSelectGfxBank1_toDd001_$1#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte) main::vicSelectGfxBank1_toDd001_$2#0
  (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  (signed word*) sin2#18 ← phi( main::vicSelectGfxBank1_toDd001/(signed word*) sin2#19 )
  (word) rem16u#42 ← phi( main::vicSelectGfxBank1_toDd001/(word) rem16u#43 )
  (byte*) BITMAP#5 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) BITMAP#7 )
  (byte*) SCREEN#7 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) SCREEN#9 )
  (byte) main::vicSelectGfxBank1_toDd001_return#2 ← phi( main::vicSelectGfxBank1_toDd001/(byte) main::vicSelectGfxBank1_toDd001_return#0 )
  (byte) main::vicSelectGfxBank1_toDd001_return#1 ← (byte) main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  (signed word*) sin2#17 ← phi( main::vicSelectGfxBank1_toDd001_@return/(signed word*) sin2#18 )
  (word) rem16u#41 ← phi( main::vicSelectGfxBank1_toDd001_@return/(word) rem16u#42 )
  (byte*) BITMAP#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) BITMAP#5 )
  (byte*) SCREEN#5 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) SCREEN#7 )
  (byte) main::vicSelectGfxBank1_toDd001_return#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte) main::vicSelectGfxBank1_toDd001_return#1 )
  (byte) main::vicSelectGfxBank1_$0#0 ← (byte) main::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte) main::vicSelectGfxBank1_$0#0
  to:main::@7
main::@7: scope:[main]  from main::vicSelectGfxBank1_@1
  (signed word*) sin2#16 ← phi( main::vicSelectGfxBank1_@1/(signed word*) sin2#17 )
  (word) rem16u#40 ← phi( main::vicSelectGfxBank1_@1/(word) rem16u#41 )
  (byte*) BITMAP#1 ← phi( main::vicSelectGfxBank1_@1/(byte*) BITMAP#3 )
  (byte*) SCREEN#2 ← phi( main::vicSelectGfxBank1_@1/(byte*) SCREEN#5 )
  *((byte*) D016#0) ← (byte) VIC_CSEL#0
  (byte*) main::toD0181_screen#0 ← (byte*) SCREEN#2
  (byte*) main::toD0181_gfx#0 ← (byte*) BITMAP#1
  to:main::toD0181
main::toD0181: scope:[main]  from main::@7
  (signed word*) sin2#15 ← phi( main::@7/(signed word*) sin2#16 )
  (word) rem16u#39 ← phi( main::@7/(word) rem16u#40 )
  (byte*) BITMAP#8 ← phi( main::@7/(byte*) BITMAP#1 )
  (byte*) SCREEN#8 ← phi( main::@7/(byte*) SCREEN#2 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@7/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@7/(byte*) main::toD0181_screen#0 )
  (word) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (word) main::toD0181_$1#0 ← (word) main::toD0181_$0#0 & (word/signed word/dword/signed dword) $3fff
  (word) main::toD0181_$2#0 ← (word) main::toD0181_$1#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) main::toD0181_$3#0 ← > (word) main::toD0181_$2#0
  (word) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte) main::toD0181_$5#0 ← > (word) main::toD0181_$4#0
  (byte) main::toD0181_$6#0 ← (byte) main::toD0181_$5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) main::toD0181_$7#0 ← (byte) main::toD0181_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) main::toD0181_$8#0 ← (byte) main::toD0181_$3#0 | (byte) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (byte) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (signed word*) sin2#14 ← phi( main::toD0181/(signed word*) sin2#15 )
  (word) rem16u#37 ← phi( main::toD0181/(word) rem16u#39 )
  (byte*) BITMAP#6 ← phi( main::toD0181/(byte*) BITMAP#8 )
  (byte*) SCREEN#6 ← phi( main::toD0181/(byte*) SCREEN#8 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@8
main::@8: scope:[main]  from main::toD0181_@return
  (signed word*) sin2#13 ← phi( main::toD0181_@return/(signed word*) sin2#14 )
  (word) rem16u#35 ← phi( main::toD0181_@return/(word) rem16u#37 )
  (byte*) BITMAP#4 ← phi( main::toD0181_@return/(byte*) BITMAP#6 )
  (byte*) SCREEN#3 ← phi( main::toD0181_@return/(byte*) SCREEN#6 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$4 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$4
  (byte*) fill::start#0 ← (byte*) SCREEN#3
  (word) fill::size#0 ← (word/signed word/dword/signed dword) $3e8
  (byte) fill::val#0 ← (byte) WHITE#0
  call fill 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (signed word*) sin2#12 ← phi( main::@8/(signed word*) sin2#13 )
  (word) rem16u#33 ← phi( main::@8/(word) rem16u#35 )
  (byte*) BITMAP#2 ← phi( main::@8/(byte*) BITMAP#4 )
  (byte*) bitmap_init::bitmap#0 ← (byte*) BITMAP#2
  call bitmap_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (signed word*) sin2#11 ← phi( main::@9/(signed word*) sin2#12 )
  (word) rem16u#27 ← phi( main::@9/(word) rem16u#33 )
  call bitmap_clear 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (signed word*) sin2#9 ← phi( main::@10/(signed word*) sin2#11 )
  (word) rem16u#23 ← phi( main::@10/(word) rem16u#27 )
  (signed word/signed dword~) main::$8 ← - (word/signed word/dword/signed dword) $140
  (signed word*) sin16s_gen2::sintab#1 ← (signed word[$200]) sin#0
  (word) sin16s_gen2::wavelength#0 ← (word) SIN_SIZE#0
  (signed word) sin16s_gen2::min#0 ← (signed word/signed dword~) main::$8
  (signed word) sin16s_gen2::max#0 ← (word/signed word/dword/signed dword) $140
  call sin16s_gen2 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (signed word*) sin2#6 ← phi( main::@11/(signed word*) sin2#9 )
  (word) rem16u#17 ← phi( main::@11/(word) rem16u#7 )
  (word) rem16u#8 ← (word) rem16u#17
  call render_sine 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (word) rem16u#28 ← phi( main::@12/(word) rem16u#8 )
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@2
  (word) rem16u#24 ← phi( main::@13/(word) rem16u#28 main::@2/(word) rem16u#29 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (word) rem16u#29 ← phi( main::@1/(word) rem16u#24 )
  *((byte*) BGCOL#0) ← ++ *((byte*) BGCOL#0)
  to:main::@1
main::@return: scope:[main]  from main::@1
  (word) rem16u#18 ← phi( main::@1/(word) rem16u#24 )
  (word) rem16u#9 ← (word) rem16u#18
  return 
  to:@return
render_sine: scope:[render_sine]  from main::@12
  (signed word*) sin2#4 ← phi( main::@12/(signed word*) sin2#6 )
  (word) render_sine::xpos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) render_sine::sin_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@2
  (signed word*) sin2#3 ← phi( render_sine/(signed word*) sin2#4 render_sine::@2/(signed word*) sin2#5 )
  (word) render_sine::xpos#6 ← phi( render_sine/(word) render_sine::xpos#0 render_sine::@2/(word) render_sine::xpos#8 )
  (word) render_sine::sin_idx#2 ← phi( render_sine/(word) render_sine::sin_idx#0 render_sine::@2/(word) render_sine::sin_idx#1 )
  (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word*~) render_sine::$1 ← (signed word[$200]) sin#0 + (word~) render_sine::$0
  (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1)
  (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  call wrap_y 
  (byte) wrap_y::return#0 ← (byte) wrap_y::return#3
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@1
  (signed word*) sin2#2 ← phi( render_sine::@1/(signed word*) sin2#3 )
  (word) render_sine::sin_idx#5 ← phi( render_sine::@1/(word) render_sine::sin_idx#2 )
  (word) render_sine::xpos#3 ← phi( render_sine::@1/(word) render_sine::xpos#6 )
  (byte) wrap_y::return#4 ← phi( render_sine::@1/(byte) wrap_y::return#0 )
  (byte~) render_sine::$2 ← (byte) wrap_y::return#4
  (byte) render_sine::ypos#0 ← (byte~) render_sine::$2
  (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  call bitmap_plot 
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  (word) render_sine::xpos#7 ← phi( render_sine::@5/(word) render_sine::xpos#3 )
  (signed word*) sin2#1 ← phi( render_sine::@5/(signed word*) sin2#2 )
  (word) render_sine::sin_idx#3 ← phi( render_sine::@5/(word) render_sine::sin_idx#5 )
  (word~) render_sine::$4 ← (word) render_sine::sin_idx#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word*~) render_sine::$5 ← (signed word*) sin2#1 + (word~) render_sine::$4
  (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5)
  (signed word/signed dword~) render_sine::$6 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a
  (signed word) wrap_y::y#1 ← (signed word/signed dword~) render_sine::$6
  call wrap_y 
  (byte) wrap_y::return#1 ← (byte) wrap_y::return#3
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  (signed word*) sin2#10 ← phi( render_sine::@6/(signed word*) sin2#1 )
  (word) render_sine::sin_idx#8 ← phi( render_sine::@6/(word) render_sine::sin_idx#3 )
  (word) render_sine::xpos#4 ← phi( render_sine::@6/(word) render_sine::xpos#7 )
  (byte) wrap_y::return#5 ← phi( render_sine::@6/(byte) wrap_y::return#1 )
  (byte~) render_sine::$7 ← (byte) wrap_y::return#5
  (byte) render_sine::ypos2#0 ← (byte~) render_sine::$7
  (word) bitmap_plot::x#1 ← (word) render_sine::xpos#4
  (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  call bitmap_plot 
  to:render_sine::@8
render_sine::@8: scope:[render_sine]  from render_sine::@7
  (signed word*) sin2#8 ← phi( render_sine::@7/(signed word*) sin2#10 )
  (word) render_sine::sin_idx#7 ← phi( render_sine::@7/(word) render_sine::sin_idx#8 )
  (word) render_sine::xpos#5 ← phi( render_sine::@7/(word) render_sine::xpos#4 )
  (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#5
  (bool~) render_sine::$9 ← (word) render_sine::xpos#1 == (word/signed word/dword/signed dword) $140
  (bool~) render_sine::$10 ← ! (bool~) render_sine::$9
  if((bool~) render_sine::$10) goto render_sine::@2
  to:render_sine::@3
render_sine::@2: scope:[render_sine]  from render_sine::@3 render_sine::@8
  (signed word*) sin2#5 ← phi( render_sine::@3/(signed word*) sin2#7 render_sine::@8/(signed word*) sin2#8 )
  (word) render_sine::xpos#8 ← phi( render_sine::@3/(word) render_sine::xpos#2 render_sine::@8/(word) render_sine::xpos#1 )
  (word) render_sine::sin_idx#4 ← phi( render_sine::@3/(word) render_sine::sin_idx#6 render_sine::@8/(word) render_sine::sin_idx#7 )
  (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#4
  (bool~) render_sine::$11 ← (word) render_sine::sin_idx#1 < (word) SIN_SIZE#0
  if((bool~) render_sine::$11) goto render_sine::@1
  to:render_sine::@return
render_sine::@3: scope:[render_sine]  from render_sine::@8
  (signed word*) sin2#7 ← phi( render_sine::@8/(signed word*) sin2#8 )
  (word) render_sine::sin_idx#6 ← phi( render_sine::@8/(word) render_sine::sin_idx#7 )
  (word) render_sine::xpos#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_sine::@2
render_sine::@return: scope:[render_sine]  from render_sine::@2
  return 
  to:@return
wrap_y: scope:[wrap_y]  from render_sine::@1 render_sine::@6
  (signed word) wrap_y::y#9 ← phi( render_sine::@1/(signed word) wrap_y::y#0 render_sine::@6/(signed word) wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  (signed word) wrap_y::y#4 ← phi( wrap_y/(signed word) wrap_y::y#9 wrap_y::@2/(signed word) wrap_y::y#2 )
  (bool~) wrap_y::$0 ← (signed word) wrap_y::y#4 >= (byte/word/signed word/dword/signed dword) $c8
  if((bool~) wrap_y::$0) goto wrap_y::@2
  to:wrap_y::@4
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  (signed word) wrap_y::y#5 ← phi( wrap_y::@1/(signed word) wrap_y::y#4 )
  (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#5 - (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@1
wrap_y::@4: scope:[wrap_y]  from wrap_y::@1 wrap_y::@5
  (signed word) wrap_y::y#6 ← phi( wrap_y::@1/(signed word) wrap_y::y#4 wrap_y::@5/(signed word) wrap_y::y#3 )
  (bool~) wrap_y::$1 ← (signed word) wrap_y::y#6 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) wrap_y::$1) goto wrap_y::@5
  to:wrap_y::@6
wrap_y::@5: scope:[wrap_y]  from wrap_y::@4
  (signed word) wrap_y::y#7 ← phi( wrap_y::@4/(signed word) wrap_y::y#6 )
  (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#7 + (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@4
wrap_y::@6: scope:[wrap_y]  from wrap_y::@4
  (signed word) wrap_y::y#8 ← phi( wrap_y::@4/(signed word) wrap_y::y#6 )
  (byte~) wrap_y::$2 ← ((byte)) (signed word) wrap_y::y#8
  (byte) wrap_y::return#2 ← (byte~) wrap_y::$2
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@6
  (byte) wrap_y::return#6 ← phi( wrap_y::@6/(byte) wrap_y::return#2 )
  (byte) wrap_y::return#3 ← (byte) wrap_y::return#6
  return 
  to:@return
@32: scope:[]  from @29
  (signed word*) sin2#22 ← phi( @29/(signed word*) sin2#0 )
  (byte*) BITMAP#11 ← phi( @29/(byte*) BITMAP#0 )
  (word) rem16u#25 ← phi( @29/(word) rem16u#30 )
  (byte*) SCREEN#4 ← phi( @29/(byte*) SCREEN#0 )
  call main 
  to:@33
@33: scope:[]  from @32
  (word) rem16u#19 ← phi( @32/(word) rem16u#9 )
  (word) rem16u#10 ← (word) rem16u#19
  to:@end
@end: scope:[]  from @33

SYMBOL TABLE SSA
(label) @10
(label) @17
(label) @26
(label) @29
(label) @32
(label) @33
(label) @4
(label) @6
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte*) BITMAP
(byte*) BITMAP#0
(byte*) BITMAP#1
(byte*) BITMAP#10
(byte*) BITMAP#11
(byte*) BITMAP#2
(byte*) BITMAP#3
(byte*) BITMAP#4
(byte*) BITMAP#5
(byte*) BITMAP#6
(byte*) BITMAP#7
(byte*) BITMAP#8
(byte*) BITMAP#9
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(word) PI2_u4f12
(word) PI2_u4f12#0
(dword) PI2_u4f28
(dword) PI2_u4f28#0
(byte) PINK
(byte) PINK#0
(word) PI_HALF_u4f12
(word) PI_HALF_u4f12#0
(dword) PI_HALF_u4f28
(dword) PI_HALF_u4f28#0
(word) PI_u4f12
(word) PI_u4f12#0
(dword) PI_u4f28
(dword) PI_u4f28#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(word) SIN_SIZE
(word) SIN_SIZE#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(word/signed word/dword/signed dword~) bitmap_init::$10
(byte*~) bitmap_init::$11
(bool~) bitmap_init::$12
(bool~) bitmap_init::$2
(byte~) bitmap_init::$3
(byte~) bitmap_init::$4
(byte~) bitmap_init::$5
(byte~) bitmap_init::$6
(byte~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte*) bitmap_init::bitmap#5
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(byte*~) bitmap_plot::$0
(word~) bitmap_plot::$1
(byte~) bitmap_plot::$2
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(byte*) bitmap_plot::plotter#1
(word) bitmap_plot::x
(word) bitmap_plot::x#0
(word) bitmap_plot::x#1
(word) bitmap_plot::x#2
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_bit#0
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_yhi#0
(byte[$100]) bitmap_plot_ylo
(byte[$100]) bitmap_plot_ylo#0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0
(dword) div32u16u::dividend#1
(dword) div32u16u::dividend#2
(word) div32u16u::divisor
(word) div32u16u::divisor#0
(word) div32u16u::divisor#1
(word) div32u16u::divisor#2
(dword) div32u16u::quotient
(dword) div32u16u::quotient#0
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0
(word) div32u16u::quotient_hi#1
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0
(dword) div32u16u::return
(dword) div32u16u::return#0
(dword) div32u16u::return#1
(dword) div32u16u::return#2
(dword) div32u16u::return#3
(dword) div32u16u::return#4
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(byte~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*~) fill::$0
(bool~) fill::$1
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0
(byte*) fill::addr#1
(byte*) fill::addr#2
(byte*) fill::end
(byte*) fill::end#0
(byte*) fill::end#1
(word) fill::size
(word) fill::size#0
(word) fill::size#1
(byte*) fill::start
(byte*) fill::start#0
(byte*) fill::start#1
(byte) fill::val
(byte) fill::val#0
(byte) fill::val#1
(byte) fill::val#2
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte/word/dword~) main::$2
(byte~) main::$4
(signed word/signed dword~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(label) main::toD0181
(word~) main::toD0181_$0
(word) main::toD0181_$0#0
(word~) main::toD0181_$1
(word) main::toD0181_$1#0
(word~) main::toD0181_$2
(word) main::toD0181_$2#0
(byte~) main::toD0181_$3
(byte) main::toD0181_$3#0
(word~) main::toD0181_$4
(word) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte) main::toD0181_$5#0
(byte~) main::toD0181_$6
(byte) main::toD0181_$6#0
(byte~) main::toD0181_$7
(byte) main::toD0181_$7#0
(byte~) main::toD0181_$8
(byte) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(byte) main::vicSelectGfxBank1_$0#0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(byte*) main::vicSelectGfxBank1_gfx#0
(byte*) main::vicSelectGfxBank1_gfx#1
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(word) main::vicSelectGfxBank1_toDd001_$0#0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte) main::vicSelectGfxBank1_toDd001_$1#0
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte) main::vicSelectGfxBank1_toDd001_$2#0
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0
(label) main::vicSelectGfxBank1_toDd001_@return
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte*) main::vicSelectGfxBank1_toDd001_gfx#0
(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
(byte) main::vicSelectGfxBank1_toDd001_return
(byte) main::vicSelectGfxBank1_toDd001_return#0
(byte) main::vicSelectGfxBank1_toDd001_return#1
(byte) main::vicSelectGfxBank1_toDd001_return#2
(byte) main::vicSelectGfxBank1_toDd001_return#3
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$0
(word~) mul16s::$1
(bool~) mul16s::$10
(word~) mul16s::$12
(word~) mul16s::$13
(word~) mul16s::$14
(signed dword~) mul16s::$15
(word~) mul16s::$16
(word~) mul16s::$17
(dword~) mul16s::$2
(bool~) mul16s::$3
(bool~) mul16s::$4
(word~) mul16s::$6
(word~) mul16s::$7
(word~) mul16s::$8
(bool~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@6
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0
(signed word) mul16s::a#1
(signed word) mul16s::a#2
(signed word) mul16s::a#3
(signed word) mul16s::a#4
(signed word) mul16s::a#5
(signed word) mul16s::b
(signed word) mul16s::b#0
(signed word) mul16s::b#1
(signed word) mul16s::b#2
(signed word) mul16s::b#3
(signed word) mul16s::b#4
(dword) mul16s::m
(dword) mul16s::m#0
(dword) mul16s::m#1
(dword) mul16s::m#2
(dword) mul16s::m#3
(dword) mul16s::m#4
(dword) mul16s::m#5
(dword) mul16s::m#6
(signed dword) mul16s::return
(signed dword) mul16s::return#0
(signed dword) mul16s::return#1
(signed dword) mul16s::return#2
(signed dword) mul16s::return#3
(signed dword) mul16s::return#4
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(byte/word~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::a#7
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(word) mul16u::b#2
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(dword) mul16u::return#5
(dword) mul16u::return#6
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0
(word) mulu16_sel::return#1
(word) mulu16_sel::return#10
(word) mulu16_sel::return#11
(word) mulu16_sel::return#12
(word) mulu16_sel::return#2
(word) mulu16_sel::return#3
(word) mulu16_sel::return#4
(word) mulu16_sel::return#5
(word) mulu16_sel::return#6
(word) mulu16_sel::return#7
(word) mulu16_sel::return#8
(word) mulu16_sel::return#9
(byte) mulu16_sel::select
(byte) mulu16_sel::select#0
(byte) mulu16_sel::select#1
(byte) mulu16_sel::select#2
(byte) mulu16_sel::select#3
(byte) mulu16_sel::select#4
(byte) mulu16_sel::select#5
(byte) mulu16_sel::select#6
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0
(word) mulu16_sel::v1#1
(word) mulu16_sel::v1#2
(word) mulu16_sel::v1#3
(word) mulu16_sel::v1#4
(word) mulu16_sel::v1#5
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0
(word) mulu16_sel::v2#1
(word) mulu16_sel::v2#2
(word) mulu16_sel::v2#3
(word) mulu16_sel::v2#4
(word) mulu16_sel::v2#5
(signed word) rem16s
(signed word) rem16s#0
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(byte) rem8u
(byte) rem8u#0
(void()) render_sine()
(word~) render_sine::$0
(signed word*~) render_sine::$1
(bool~) render_sine::$10
(bool~) render_sine::$11
(byte~) render_sine::$2
(word~) render_sine::$4
(signed word*~) render_sine::$5
(signed word/signed dword~) render_sine::$6
(byte~) render_sine::$7
(bool~) render_sine::$9
(label) render_sine::@1
(label) render_sine::@2
(label) render_sine::@3
(label) render_sine::@5
(label) render_sine::@6
(label) render_sine::@7
(label) render_sine::@8
(label) render_sine::@return
(signed word) render_sine::sin2_val
(signed word) render_sine::sin2_val#0
(word) render_sine::sin_idx
(word) render_sine::sin_idx#0
(word) render_sine::sin_idx#1
(word) render_sine::sin_idx#2
(word) render_sine::sin_idx#3
(word) render_sine::sin_idx#4
(word) render_sine::sin_idx#5
(word) render_sine::sin_idx#6
(word) render_sine::sin_idx#7
(word) render_sine::sin_idx#8
(signed word) render_sine::sin_val
(signed word) render_sine::sin_val#0
(word) render_sine::xpos
(word) render_sine::xpos#0
(word) render_sine::xpos#1
(word) render_sine::xpos#2
(word) render_sine::xpos#3
(word) render_sine::xpos#4
(word) render_sine::xpos#5
(word) render_sine::xpos#6
(word) render_sine::xpos#7
(word) render_sine::xpos#8
(byte) render_sine::ypos
(byte) render_sine::ypos#0
(byte) render_sine::ypos2
(byte) render_sine::ypos2#0
(signed word[$200]) sin
(signed word[$200]) sin#0
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word/signed word/dword/signed dword~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(word~) sin16s::$14
(word~) sin16s::$15
(word~) sin16s::$16
(signed word~) sin16s::$17
(bool~) sin16s::$18
(bool~) sin16s::$19
(dword~) sin16s::$2
(signed word~) sin16s::$20
(signed word~) sin16s::$21
(bool~) sin16s::$3
(bool~) sin16s::$4
(dword~) sin16s::$5
(dword~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#0
(byte) sin16s::isUpper#1
(byte) sin16s::isUpper#2
(byte) sin16s::isUpper#3
(byte) sin16s::isUpper#4
(byte) sin16s::isUpper#5
(byte) sin16s::isUpper#6
(byte) sin16s::isUpper#7
(byte) sin16s::isUpper#8
(byte) sin16s::isUpper#9
(signed word) sin16s::return
(signed word) sin16s::return#0
(signed word) sin16s::return#1
(signed word) sin16s::return#2
(signed word) sin16s::return#3
(signed word) sin16s::return#4
(signed word) sin16s::sinx
(signed word) sin16s::sinx#0
(signed word) sin16s::sinx#1
(signed word) sin16s::sinx#2
(word) sin16s::usinx
(word) sin16s::usinx#0
(word) sin16s::usinx#1
(word) sin16s::usinx#2
(word) sin16s::usinx#3
(word) sin16s::usinx#4
(dword) sin16s::x
(dword) sin16s::x#0
(dword) sin16s::x#1
(dword) sin16s::x#2
(dword) sin16s::x#3
(dword) sin16s::x#4
(dword) sin16s::x#5
(dword) sin16s::x#6
(dword) sin16s::x#7
(word) sin16s::x1
(word) sin16s::x1#0
(word) sin16s::x1#1
(word) sin16s::x1#2
(word) sin16s::x1#3
(word) sin16s::x1#4
(word) sin16s::x2
(word) sin16s::x2#0
(word) sin16s::x3
(word) sin16s::x3#0
(word) sin16s::x3#1
(word) sin16s::x3_6
(word) sin16s::x3_6#0
(word) sin16s::x4
(word) sin16s::x4#0
(word) sin16s::x5
(word) sin16s::x5#0
(word) sin16s::x5_128
(word) sin16s::x5_128#0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed word~) sin16s_gen2::$0
(signed word~) sin16s_gen2::$1
(dword~) sin16s_gen2::$10
(bool~) sin16s_gen2::$11
(signed word~) sin16s_gen2::$2
(dword~) sin16s_gen2::$3
(signed word~) sin16s_gen2::$4
(signed dword~) sin16s_gen2::$5
(word~) sin16s_gen2::$6
(signed word~) sin16s_gen2::$7
(signed word~) sin16s_gen2::$8
(signed word*~) sin16s_gen2::$9
(label) sin16s_gen2::@1
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@5
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(signed word) sin16s_gen2::ampl#0
(signed word) sin16s_gen2::ampl#1
(signed word) sin16s_gen2::ampl#2
(signed word) sin16s_gen2::ampl#3
(signed word) sin16s_gen2::ampl#4
(word) sin16s_gen2::i
(word) sin16s_gen2::i#0
(word) sin16s_gen2::i#1
(word) sin16s_gen2::i#2
(word) sin16s_gen2::i#3
(word) sin16s_gen2::i#4
(signed word) sin16s_gen2::max
(signed word) sin16s_gen2::max#0
(signed word) sin16s_gen2::max#1
(signed word) sin16s_gen2::min
(signed word) sin16s_gen2::min#0
(signed word) sin16s_gen2::min#1
(signed word) sin16s_gen2::offs
(signed word) sin16s_gen2::offs#0
(signed word) sin16s_gen2::offs#1
(signed word) sin16s_gen2::offs#2
(signed word) sin16s_gen2::offs#3
(signed word) sin16s_gen2::offs#4
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0
(signed word*) sin16s_gen2::sintab#1
(signed word*) sin16s_gen2::sintab#2
(signed word*) sin16s_gen2::sintab#3
(signed word*) sin16s_gen2::sintab#4
(signed word*) sin16s_gen2::sintab#5
(signed word*) sin16s_gen2::sintab#6
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0
(dword) sin16s_gen2::step#1
(dword) sin16s_gen2::step#2
(dword) sin16s_gen2::step#3
(word) sin16s_gen2::wavelength
(word) sin16s_gen2::wavelength#0
(word) sin16s_gen2::wavelength#1
(word) sin16s_gen2::wavelength#2
(word) sin16s_gen2::wavelength#3
(word) sin16s_gen2::wavelength#4
(word) sin16s_gen2::wavelength#5
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#0
(dword) sin16s_gen2::x#1
(dword) sin16s_gen2::x#2
(dword) sin16s_gen2::x#3
(dword) sin16s_gen2::x#4
(signed word*) sin2
(signed word*) sin2#0
(signed word*) sin2#1
(signed word*) sin2#10
(signed word*) sin2#11
(signed word*) sin2#12
(signed word*) sin2#13
(signed word*) sin2#14
(signed word*) sin2#15
(signed word*) sin2#16
(signed word*) sin2#17
(signed word*) sin2#18
(signed word*) sin2#19
(signed word*) sin2#2
(signed word*) sin2#20
(signed word*) sin2#21
(signed word*) sin2#22
(signed word*) sin2#3
(signed word*) sin2#4
(signed word*) sin2#5
(signed word*) sin2#6
(signed word*) sin2#7
(signed word*) sin2#8
(signed word*) sin2#9
(byte()) wrap_y((signed word) wrap_y::y)
(bool~) wrap_y::$0
(bool~) wrap_y::$1
(byte~) wrap_y::$2
(label) wrap_y::@1
(label) wrap_y::@2
(label) wrap_y::@4
(label) wrap_y::@5
(label) wrap_y::@6
(label) wrap_y::@return
(byte) wrap_y::return
(byte) wrap_y::return#0
(byte) wrap_y::return#1
(byte) wrap_y::return#2
(byte) wrap_y::return#3
(byte) wrap_y::return#4
(byte) wrap_y::return#5
(byte) wrap_y::return#6
(signed word) wrap_y::y
(signed word) wrap_y::y#0
(signed word) wrap_y::y#1
(signed word) wrap_y::y#2
(signed word) wrap_y::y#3
(signed word) wrap_y::y#4
(signed word) wrap_y::y#5
(signed word) wrap_y::y#6
(signed word) wrap_y::y#7
(signed word) wrap_y::y#8
(signed word) wrap_y::y#9

Inversing boolean not [90] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [89] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [98] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [97] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Inversing boolean not [158] (bool~) mul16u::$3 ← (byte/word~) mul16u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [157] (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [184] (bool~) mul16s::$4 ← (signed word) mul16s::a#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [183] (bool~) mul16s::$3 ← (signed word) mul16s::a#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [188] (bool~) mul16s::$10 ← (signed word) mul16s::b#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [187] (bool~) mul16s::$9 ← (signed word) mul16s::b#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [260] (bool~) sin16s::$1 ← (dword) sin16s::x#3 < (dword) PI_u4f28#0 from [259] (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
Inversing boolean not [264] (bool~) sin16s::$4 ← (dword) sin16s::x#4 < (dword) PI_HALF_u4f28#0 from [263] (bool~) sin16s::$3 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
Inversing boolean not [324] (bool~) sin16s::$19 ← (byte) sin16s::isUpper#2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [323] (bool~) sin16s::$18 ← (byte) sin16s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [372] (bool~) bitmap_init::$1 ← (byte) bitmap_init::bits#1 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [371] (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [392] (bool~) bitmap_init::$9 ← (byte~) bitmap_init::$7 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [391] (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [537] (bool~) render_sine::$10 ← (word) render_sine::xpos#1 != (word/signed word/dword/signed dword) $140 from [536] (bool~) render_sine::$9 ← (word) render_sine::xpos#1 == (word/signed word/dword/signed dword) $140
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#7 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#4 = (word) divr16u::divisor#5 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word/dword~) divr16u::$5 
Alias (word) divr16u::rem#6 = (word) divr16u::rem#8 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#3 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#11 = (word) divr16u::rem#9 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#11 (word) rem16u#2 
Alias (word) divr16u::dividend#1 = (word~) div32u16u::$0 
Alias (word) divr16u::return#2 = (word) divr16u::return#5 
Alias (dword) div32u16u::dividend#1 = (dword) div32u16u::dividend#2 
Alias (word) div32u16u::divisor#1 = (word) div32u16u::divisor#2 
Alias (word) rem16u#12 = (word) rem16u#3 
Alias (word) div32u16u::quotient_hi#0 = (word~) div32u16u::$1 (word) div32u16u::quotient_hi#1 
Alias (word) divr16u::dividend#2 = (word~) div32u16u::$2 
Alias (word) divr16u::return#3 = (word) divr16u::return#6 
Alias (word) rem16u#13 = (word) rem16u#4 (word) rem16u#14 (word) rem16u#5 
Alias (word) div32u16u::quotient_lo#0 = (word~) div32u16u::$3 
Alias (dword) div32u16u::return#0 = (dword) div32u16u::quotient#0 (dword) div32u16u::return#3 (dword) div32u16u::return#1 
Alias (word) rem16u#0 = (word) rem16u#38 (word) rem16u#36 (word) rem16u#34 (word) rem16u#32 (word) rem16u#30 (word) rem16u#25 
Alias (word) mul16u::a#3 = (word) mul16u::a#4 (word) mul16u::a#7 
Alias (dword) mul16u::mb#3 = (dword) mul16u::mb#4 (dword) mul16u::mb#5 
Alias (dword) mul16u::res#2 = (dword) mul16u::res#5 (dword) mul16u::res#4 (dword) mul16u::return#0 (dword) mul16u::res#3 (dword) mul16u::return#4 (dword) mul16u::return#1 
Alias (word) mul16u::a#0 = (word~) mul16u::$5 
Alias (dword) mul16u::mb#1 = (dword~) mul16u::$6 
Alias (dword) mul16u::res#1 = (dword~) mul16u::$4 
Alias (word) mul16u::a#1 = (word~) mul16s::$0 
Alias (word) mul16u::b#0 = (word~) mul16s::$1 
Alias (dword) mul16u::return#2 = (dword) mul16u::return#5 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#2 (signed word) mul16s::a#5 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#4 (signed word) mul16s::b#3 
Alias (dword) mul16s::m#0 = (dword~) mul16s::$2 (dword) mul16s::m#3 
Alias (word~) mul16s::$16 = (word~) mul16s::$8 
Alias (signed dword) mul16s::return#0 = (signed dword~) mul16s::$15 (signed dword) mul16s::return#3 (signed dword) mul16s::return#1 
Alias (dword) mul16s::m#5 = (dword) mul16s::m#6 
Alias (signed word) mul16s::a#3 = (signed word) mul16s::a#4 
Alias (word~) mul16s::$17 = (word~) mul16s::$14 
Alias (signed word) sin16s_gen2::ampl#0 = (signed word~) sin16s_gen2::$0 (signed word) sin16s_gen2::ampl#3 
Alias (signed word) sin16s_gen2::offs#0 = (signed word~) sin16s_gen2::$2 (signed word) sin16s_gen2::offs#4 
Alias (dword) div32u16u::return#2 = (dword) div32u16u::return#4 
Alias (signed word*) sin16s_gen2::sintab#5 = (signed word*) sin16s_gen2::sintab#6 
Alias (word) sin16s_gen2::wavelength#1 = (word) sin16s_gen2::wavelength#5 
Alias (word) rem16u#15 = (word) rem16u#6 
Alias (dword) sin16s_gen2::step#0 = (dword~) sin16s_gen2::$3 
Alias (signed word) sin16s::return#0 = (signed word) sin16s::return#3 
Alias (signed word) sin16s_gen2::ampl#1 = (signed word) sin16s_gen2::ampl#2 (signed word) sin16s_gen2::ampl#4 
Alias (signed word) sin16s_gen2::offs#1 = (signed word) sin16s_gen2::offs#2 (signed word) sin16s_gen2::offs#3 
Alias (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#3 (signed word*) sin16s_gen2::sintab#4 
Alias (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#4 (dword) sin16s_gen2::x#3 
Alias (dword) sin16s_gen2::step#1 = (dword) sin16s_gen2::step#2 (dword) sin16s_gen2::step#3 
Alias (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#3 (word) sin16s_gen2::i#4 
Alias (word) sin16s_gen2::wavelength#2 = (word) sin16s_gen2::wavelength#3 (word) sin16s_gen2::wavelength#4 
Alias (word) rem16u#16 = (word) rem16u#26 (word) rem16u#31 (word) rem16u#22 (word) rem16u#7 
Alias (signed word) mul16s::a#0 = (signed word~) sin16s_gen2::$4 
Alias (signed dword) mul16s::return#2 = (signed dword) mul16s::return#4 
Alias (signed word*) sin16s_gen2::sintab#0 = (signed word*~) sin16s_gen2::$9 
Alias (dword) sin16s_gen2::x#1 = (dword~) sin16s_gen2::$10 
Alias (dword) sin16s::x#3 = (dword) sin16s::x#5 
Alias (dword) sin16s::x#1 = (dword~) sin16s::$2 
Alias (word) sin16s::x1#0 = (word~) sin16s::$7 (word) sin16s::x1#1 (word) sin16s::x1#4 (word) sin16s::x1#2 (word) sin16s::x1#3 
Alias (word) mulu16_sel::return#0 = (word) mulu16_sel::return#7 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#6 (byte) sin16s::isUpper#7 (byte) sin16s::isUpper#5 (byte) sin16s::isUpper#4 (byte) sin16s::isUpper#3 
Alias (word) sin16s::x2#0 = (word~) sin16s::$8 
Alias (word) mulu16_sel::return#1 = (word) mulu16_sel::return#8 
Alias (word) sin16s::x3#0 = (word~) sin16s::$9 (word) sin16s::x3#1 
Alias (word) mulu16_sel::v2#2 = (word/signed word/dword/signed dword~) sin16s::$10 
Alias (word) mulu16_sel::return#2 = (word) mulu16_sel::return#9 
Alias (word) sin16s::x3_6#0 = (word~) sin16s::$11 
Alias (word) sin16s::usinx#0 = (word~) sin16s::$12 (word) sin16s::usinx#4 (word) sin16s::usinx#2 
Alias (word) mulu16_sel::return#10 = (word) mulu16_sel::return#3 
Alias (word) sin16s::x4#0 = (word~) sin16s::$13 
Alias (word) mulu16_sel::return#11 = (word) mulu16_sel::return#4 
Alias (word) sin16s::x5#0 = (word~) sin16s::$14 
Alias (word) sin16s::x5_128#0 = (word~) sin16s::$15 
Alias (word) sin16s::usinx#1 = (word~) sin16s::$16 (word) sin16s::usinx#3 
Alias (signed word) sin16s::sinx#0 = (signed word~) sin16s::$17 
Alias (dword) sin16s::x#4 = (dword) sin16s::x#7 
Alias (byte) sin16s::isUpper#8 = (byte) sin16s::isUpper#9 
Alias (dword) sin16s::x#2 = (dword~) sin16s::$5 
Alias (signed word) sin16s::return#1 = (signed word) sin16s::sinx#2 (signed word) sin16s::return#4 (signed word) sin16s::return#2 
Alias (signed word) sin16s::sinx#1 = (signed word~) sin16s::$21 
Alias (dword) mul16u::return#3 = (dword) mul16u::return#6 
Alias (byte) mulu16_sel::select#5 = (byte) mulu16_sel::select#6 
Alias (word) mulu16_sel::return#12 = (word) mulu16_sel::return#5 (word~) mulu16_sel::$2 (word) mulu16_sel::return#6 
Alias (byte*) fill::end#0 = (byte*~) fill::$0 
Alias (byte*) fill::addr#0 = (byte*) fill::start#1 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::bitmap#3 = (byte*) bitmap_init::bitmap#4 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::yoffs#0 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$11 
Alias (byte*) bitmap_clear::bitmap#0 = (byte*~) bitmap_clear::$0 
Alias (byte) bitmap_clear::y#2 = (byte) bitmap_clear::y#3 
Alias (byte*) bitmap_clear::bitmap#1 = (byte*) bitmap_clear::bitmap#4 
Alias (byte*) bitmap_plot::plotter#0 = (byte*~) bitmap_plot::$0 
Alias (byte*) main::vicSelectGfxBank1_gfx#0 = (byte*) main::vicSelectGfxBank1_gfx#1 (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#10 (byte*) SCREEN#9 (byte*) SCREEN#7 (byte*) SCREEN#5 (byte*) SCREEN#2 (byte*) SCREEN#8 (byte*) SCREEN#6 (byte*) SCREEN#3 
Alias (byte*) BITMAP#1 = (byte*) BITMAP#9 (byte*) BITMAP#10 (byte*) BITMAP#7 (byte*) BITMAP#5 (byte*) BITMAP#3 (byte*) BITMAP#8 (byte*) BITMAP#6 (byte*) BITMAP#4 (byte*) BITMAP#2 
Alias (word) rem16u#23 = (word) rem16u#44 (word) rem16u#45 (word) rem16u#43 (word) rem16u#42 (word) rem16u#41 (word) rem16u#40 (word) rem16u#39 (word) rem16u#37 (word) rem16u#35 (word) rem16u#33 (word) rem16u#27 
Alias (signed word*) sin2#11 = (signed word*) sin2#20 (signed word*) sin2#21 (signed word*) sin2#19 (signed word*) sin2#18 (signed word*) sin2#17 (signed word*) sin2#16 (signed word*) sin2#15 (signed word*) sin2#14 (signed word*) sin2#13 (signed word*) sin2#12 (signed word*) sin2#9 (signed word*) sin2#6 
Alias (byte) main::vicSelectGfxBank1_toDd001_return#0 = (byte/word/dword) main::vicSelectGfxBank1_toDd001_$3#0 (byte) main::vicSelectGfxBank1_toDd001_return#2 (byte) main::vicSelectGfxBank1_toDd001_return#1 (byte) main::vicSelectGfxBank1_toDd001_return#3 (byte) main::vicSelectGfxBank1_$0#0 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (byte) main::toD0181_return#0 = (byte) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$4 
Alias (signed word) sin16s_gen2::min#0 = (signed word/signed dword~) main::$8 
Alias (word) rem16u#17 = (word) rem16u#8 (word) rem16u#28 
Alias (word) rem16u#18 = (word) rem16u#29 (word) rem16u#24 (word) rem16u#9 
Alias (byte) wrap_y::return#0 = (byte) wrap_y::return#4 
Alias (word) render_sine::xpos#3 = (word) render_sine::xpos#6 (word) render_sine::xpos#7 (word) render_sine::xpos#4 (word) render_sine::xpos#5 
Alias (word) render_sine::sin_idx#2 = (word) render_sine::sin_idx#5 (word) render_sine::sin_idx#3 (word) render_sine::sin_idx#8 (word) render_sine::sin_idx#7 (word) render_sine::sin_idx#6 
Alias (signed word*) sin2#1 = (signed word*) sin2#2 (signed word*) sin2#3 (signed word*) sin2#10 (signed word*) sin2#8 (signed word*) sin2#7 
Alias (byte) render_sine::ypos#0 = (byte~) render_sine::$2 
Alias (signed word) wrap_y::y#1 = (signed word/signed dword~) render_sine::$6 
Alias (byte) wrap_y::return#1 = (byte) wrap_y::return#5 
Alias (byte) render_sine::ypos2#0 = (byte~) render_sine::$7 
Alias (signed word) wrap_y::y#4 = (signed word) wrap_y::y#5 
Alias (signed word) wrap_y::y#6 = (signed word) wrap_y::y#7 (signed word) wrap_y::y#8 
Alias (byte) wrap_y::return#2 = (byte~) wrap_y::$2 (byte) wrap_y::return#6 (byte) wrap_y::return#3 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Alias (byte*) BITMAP#0 = (byte*) BITMAP#11 
Alias (signed word*) sin2#0 = (signed word*) sin2#22 
Alias (word) rem16u#10 = (word) rem16u#19 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#4 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#4 (word) divr16u::divisor#7 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#6 
Alias (word) mul16u::a#3 = (word) mul16u::a#5 
Alias (dword) mul16u::mb#2 = (dword) mul16u::mb#3 
Alias (signed word) mul16s::b#1 = (signed word) mul16s::b#2 
Alias (signed word) mul16s::a#1 = (signed word) mul16s::a#3 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#8 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Alias (word) render_sine::sin_idx#2 = (word) render_sine::sin_idx#4 
Alias (signed word*) sin2#1 = (signed word*) sin2#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) divr16u::divisor#2
Self Phi Eliminated (signed word) sin16s_gen2::ampl#1
Self Phi Eliminated (signed word) sin16s_gen2::offs#1
Self Phi Eliminated (dword) sin16s_gen2::step#1
Self Phi Eliminated (word) sin16s_gen2::wavelength#2
Self Phi Eliminated (word) rem16u#16
Self Phi Eliminated (byte) fill::val#1
Self Phi Eliminated (byte*) fill::end#1
Self Phi Eliminated (byte*) bitmap_init::bitmap#1
Self Phi Eliminated (byte) bitmap_clear::y#2
Self Phi Eliminated (word) rem16u#18
Self Phi Eliminated (signed word*) sin2#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (word) divr16u::divisor#2 (word) divr16u::divisor#6
Redundant Phi (dword) div32u16u::dividend#1 (dword) div32u16u::dividend#0
Redundant Phi (word) div32u16u::divisor#1 (word) div32u16u::divisor#0
Redundant Phi (word) rem16u#20 (word) rem16u#21
Redundant Phi (word) rem16u#12 (word) rem16u#1
Redundant Phi (word) rem16u#13 (word) rem16u#1
Redundant Phi (signed word) mul16s::a#1 (signed word) mul16s::a#0
Redundant Phi (signed word) mul16s::b#1 (signed word) mul16s::b#0
Redundant Phi (signed word) sin16s_gen2::max#1 (signed word) sin16s_gen2::max#0
Redundant Phi (signed word) sin16s_gen2::min#1 (signed word) sin16s_gen2::min#0
Redundant Phi (word) sin16s_gen2::wavelength#1 (word) sin16s_gen2::wavelength#0
Redundant Phi (word) rem16u#21 (word) rem16u#23
Redundant Phi (signed word*) sin16s_gen2::sintab#5 (signed word*) sin16s_gen2::sintab#1
Redundant Phi (word) rem16u#15 (word) rem16u#13
Redundant Phi (signed word) sin16s_gen2::ampl#1 (signed word) sin16s_gen2::ampl#0
Redundant Phi (signed word) sin16s_gen2::offs#1 (signed word) sin16s_gen2::offs#0
Redundant Phi (dword) sin16s_gen2::step#1 (dword) sin16s_gen2::step#0
Redundant Phi (word) sin16s_gen2::wavelength#2 (word) sin16s_gen2::wavelength#1
Redundant Phi (word) rem16u#16 (word) rem16u#15
Redundant Phi (dword) sin16s::x#3 (dword) sin16s::x#0
Redundant Phi (byte*) fill::addr#0 (byte*) fill::start#0
Redundant Phi (word) fill::size#1 (word) fill::size#0
Redundant Phi (byte) fill::val#2 (byte) fill::val#0
Redundant Phi (byte) fill::val#1 (byte) fill::val#2
Redundant Phi (byte*) fill::end#1 (byte*) fill::end#0
Redundant Phi (byte*) bitmap_init::bitmap#5 (byte*) bitmap_init::bitmap#0
Redundant Phi (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#5
Redundant Phi (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte*) BITMAP#1 (byte*) BITMAP#0
Redundant Phi (word) rem16u#23 (word) rem16u#0
Redundant Phi (signed word*) sin2#11 (signed word*) sin2#0
Redundant Phi (word) rem16u#17 (word) rem16u#16
Redundant Phi (word) rem16u#18 (word) rem16u#17
Redundant Phi (signed word*) sin2#4 (signed word*) sin2#11
Redundant Phi (signed word*) sin2#1 (signed word*) sin2#4
Redundant Phi (word) rem16u#10 (word) rem16u#18
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) divr16u::$4 [91] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [99] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [106] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul16u::$0 [154] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [159] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
Simple Condition (bool~) mul16s::$4 [185] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1
Simple Condition (bool~) mul16s::$10 [189] if((signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2
Simple Condition (bool~) sin16s_gen2::$11 [253] if((word) sin16s_gen2::i#1<(word) sin16s_gen2::wavelength#0) goto sin16s_gen2::@1
Simple Condition (bool~) sin16s::$1 [261] if((dword) sin16s::x#0<(dword) PI_u4f28#0) goto sin16s::@1
Simple Condition (bool~) sin16s::$4 [265] if((dword) sin16s::x#4<(dword) PI_HALF_u4f28#0) goto sin16s::@2
Simple Condition (bool~) sin16s::$19 [325] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@3
Simple Condition (bool~) fill::$1 [359] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
Simple Condition (bool~) bitmap_init::$1 [373] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$2 [377] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$9 [393] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
Simple Condition (bool~) bitmap_init::$12 [397] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@3
Simple Condition (bool~) bitmap_clear::$1 [413] if((byte) bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$2 [417] if((byte) bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition (bool~) render_sine::$10 [538] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@2
Simple Condition (bool~) render_sine::$11 [542] if((word) render_sine::sin_idx#1<(word) SIN_SIZE#0) goto render_sine::@1
Simple Condition (bool~) wrap_y::$0 [549] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2
Simple Condition (bool~) wrap_y::$1 [554] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = $30
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte) PROCPORT_KERNEL_IO#0 = $36
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = $37
Constant (const byte*) CHARGEN#0 = ((byte*))$d000
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))$d000
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))$d001
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))$d010
Constant (const byte*) RASTER#0 = ((byte*))$d012
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))$d015
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))$d017
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))$d01b
Constant (const byte*) SPRITES_MC#0 = ((byte*))$d01c
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))$d01d
Constant (const byte*) BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) BGCOL#0 = ((byte*))$d021
Constant (const byte*) BGCOL1#0 = ((byte*))$d021
Constant (const byte*) BGCOL2#0 = ((byte*))$d022
Constant (const byte*) BGCOL3#0 = ((byte*))$d023
Constant (const byte*) BGCOL4#0 = ((byte*))$d024
Constant (const byte*) SPRITES_MC1#0 = ((byte*))$d025
Constant (const byte*) SPRITES_MC2#0 = ((byte*))$d026
Constant (const byte*) SPRITES_COLS#0 = ((byte*))$d027
Constant (const byte*) VIC_CONTROL#0 = ((byte*))$d011
Constant (const byte*) D011#0 = ((byte*))$d011
Constant (const byte) VIC_RST8#0 = $80
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))$d016
Constant (const byte*) D016#0 = ((byte*))$d016
Constant (const byte) VIC_MCM#0 = $10
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))$d018
Constant (const byte*) VIC_MEMORY#0 = ((byte*))$d018
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))$d013
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))$d014
Constant (const byte*) IRQ_STATUS#0 = ((byte*))$d019
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))$d01a
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))$d800
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))$dc00
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))$dc01
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))$dc02
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))$dc03
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))$dc0d
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))$dd00
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))$dd01
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))$dd02
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))$dd03
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))$dd0d
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))$314
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))$fffe
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) LIGHT_GREY#0 = $f
Constant (const byte) rem8u#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const dword) mul16u::res#0 = 0
Constant (const dword) PI2_u4f28#0 = $6487ed51
Constant (const dword) PI_u4f28#0 = $3243f6a9
Constant (const dword) PI_HALF_u4f28#0 = $1921fb54
Constant (const word) PI2_u4f12#0 = $6488
Constant (const word) PI_u4f12#0 = $3244
Constant (const word) PI_HALF_u4f12#0 = $1922
Constant (const dword) sin16s_gen2::x#0 = 0
Constant (const word) sin16s_gen2::i#0 = 0
Constant (const byte) sin16s::isUpper#0 = 0
Constant (const byte) sin16s::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#0 = 0
Constant (const byte) mulu16_sel::select#1 = 1
Constant (const word) mulu16_sel::v2#2 = $10000/6
Constant (const byte) mulu16_sel::select#2 = 1
Constant (const byte) mulu16_sel::select#3 = 0
Constant (const byte) mulu16_sel::select#4 = 0
Constant (const byte[$100]) bitmap_plot_ylo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_yhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_bit#0 = { fill( $100, 0) }
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word/signed word/dword/signed dword) bitmap_init::$10 = $28*8
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Constant (const byte*) SCREEN#0 = ((byte*))$400
Constant (const byte*) BITMAP#0 = ((byte*))$2000
Constant (const word) SIN_SIZE#0 = $200
Constant (const signed word[$200]) sin#0 = { fill( $200, 0) }
Constant (const signed word*) sin2#0 = ((signed word*))$1400
Constant (const word) fill::size#0 = $3e8
Constant (const signed word) sin16s_gen2::min#0 = -$140
Constant (const signed word) sin16s_gen2::max#0 = $140
Constant (const word) render_sine::xpos#0 = 0
Constant (const word) render_sine::sin_idx#0 = 0
Constant (const word) render_sine::xpos#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed word) sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0
Constant (const dword) div32u16u::dividend#0 = PI2_u4f28#0
Constant (const byte) main::$0 = VIC_BMM#0|VIC_DEN#0
Constant (const byte*) main::vicSelectGfxBank1_gfx#0 = SCREEN#0
Constant (const byte*) main::toD0181_screen#0 = SCREEN#0
Constant (const byte*) main::toD0181_gfx#0 = BITMAP#0
Constant (const byte*) fill::start#0 = SCREEN#0
Constant (const byte) fill::val#0 = WHITE#0
Constant (const byte*) bitmap_init::bitmap#0 = BITMAP#0
Constant (const signed word*) sin16s_gen2::sintab#1 = sin#0
Constant (const word) sin16s_gen2::wavelength#0 = SIN_SIZE#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::dividend#1 = >div32u16u::dividend#0
Constant (const word) divr16u::dividend#2 = <div32u16u::dividend#0
Constant (const signed word) sin16s_gen2::$1 = sin16s_gen2::ampl#0>>1
Constant (const word) div32u16u::divisor#0 = sin16s_gen2::wavelength#0
Constant (const signed word) mul16s::b#0 = sin16s_gen2::ampl#0
Constant (const byte*) fill::end#0 = fill::start#0+fill::size#0
Constant (const byte) main::$1 = main::$0|VIC_RSEL#0
Constant (const word) main::vicSelectGfxBank1_toDd001_$0#0 = ((word))main::vicSelectGfxBank1_gfx#0
Constant (const word) main::toD0181_$0#0 = ((word))main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = ((word))main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16u::divisor#0 = div32u16u::divisor#0
Constant (const word) divr16u::divisor#1 = div32u16u::divisor#0
Constant (const word) mul16u::b#0 = ((word))mul16s::b#0
Constant (const word) mul16s::$7 = ((word))mul16s::b#0
Constant (const signed word) sin16s_gen2::offs#0 = sin16s_gen2::min#0+sin16s_gen2::$1
Constant (const byte/word/dword) main::$2 = main::$1|3
Constant (const byte) main::vicSelectGfxBank1_toDd001_$1#0 = >main::vicSelectGfxBank1_toDd001_$0#0
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&$3fff
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::vicSelectGfxBank1_toDd001_$2#0 = main::vicSelectGfxBank1_toDd001_$1#0>>6
Constant (const word) main::toD0181_$2#0 = main::toD0181_$1#0<<2
Constant (const byte) main::toD0181_$6#0 = main::toD0181_$5#0>>2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::vicSelectGfxBank1_toDd001_return#0 = 3^main::vicSelectGfxBank1_toDd001_$2#0
Constant (const byte) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte) main::toD0181_$7#0 = main::toD0181_$6#0&$f
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(bitmap_plot_yhi#0+0)
Consolidated array index constant in *(bitmap_plot_ylo#0+0)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination [44] if((const signed word) mul16s::b#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@2
if() condition always true - replacing block destination [182] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Fixing inline constructor with bitmap_clear::$3 ← *(bitmap_plot_yhi#0+0) w= *(bitmap_plot_ylo#0+0)
Fixing inline constructor with bitmap_plot::$3 ← *(bitmap_plot_yhi#0 + bitmap_plot::y#2) w= *(bitmap_plot_ylo#0 + bitmap_plot::y#2)
Fixing inline constructor with div32u16u::$4 ← div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (word) mul16u::a#1 ← ((word)) (signed word) mul16s::a#0
Eliminating Noop Cast (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a#0
Eliminating Noop Cast (signed word~) sin16s_gen2::$7 ← ((signed word)) (word~) sin16s_gen2::$6
Eliminating Noop Cast (signed word) sin16s::sinx#0 ← ((signed word)) (word) sin16s::usinx#1
Eliminating Noop Cast (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx#1
Eliminating Noop Cast (byte*) bitmap_clear::bitmap#0 ← ((byte*)) (word~) bitmap_clear::$3
Eliminating Noop Cast (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$3
Successful SSA optimization Pass2NopCastElimination
Eliminating variable (word~) mul16s::$12 from unused block mul16s::@4
Eliminating variable (word~) mul16s::$17 from unused block mul16s::@4
Eliminating variable (dword) mul16s::m#2 from unused block mul16s::@4
Removing PHI-reference to removed block (mul16s::@4) in block mul16s::@2
Removing unused block mul16s::@4
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@3 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value bitmap_clear::x#1 ← ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to (byte/word/signed word/dword/signed dword) $c8
Resolved ranged next value bitmap_clear::y#1 ← ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to (byte/signed byte/word/signed word/dword/signed dword) $28
Culled Empty Block (label) @4
Culled Empty Block (label) @6
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) @17
Culled Empty Block (label) @26
Culled Empty Block (label) bitmap_init::@6
Culled Empty Block (label) main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@1
Culled Empty Block (label) @33
Successful SSA optimization Pass2CullEmptyBlocks
Alias (dword) div32u16u::return#0 = (dword~) div32u16u::$4 
Alias (dword) mul16s::m#4 = (dword) mul16s::m#5 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::divisor#1
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const word) mul16u::b#0
Inlining constant with var siblings (const dword) sin16s_gen2::x#0
Inlining constant with var siblings (const word) sin16s_gen2::i#0
Inlining constant with var siblings (const signed word*) sin16s_gen2::sintab#1
Inlining constant with var siblings (const byte) sin16s::isUpper#0
Inlining constant with var siblings (const byte) sin16s::isUpper#1
Inlining constant with var siblings (const byte) mulu16_sel::select#0
Inlining constant with var siblings (const byte) mulu16_sel::select#1
Inlining constant with var siblings (const word) mulu16_sel::v2#2
Inlining constant with var siblings (const byte) mulu16_sel::select#2
Inlining constant with var siblings (const byte) mulu16_sel::select#3
Inlining constant with var siblings (const byte) mulu16_sel::select#4
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const word) render_sine::xpos#0
Inlining constant with var siblings (const word) render_sine::sin_idx#0
Inlining constant with var siblings (const word) render_sine::xpos#2
Constant inlined divr16u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_gen2::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s::isUpper#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u::b#0 = ((word))(const signed word) sin16s_gen2::ampl#0
Constant inlined mulu16_sel::select#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#2 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu16_sel::select#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::start#0 = (const byte*) SCREEN#0
Constant inlined sin16s::isUpper#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu16_sel::select#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mul16s::b#0 = (const signed word) sin16s_gen2::ampl#0
Constant inlined main::vicSelectGfxBank1_toDd001_$1#0 = >((word))(const byte*) SCREEN#0
Constant inlined bitmap_clear::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_gen2::wavelength#0 = (const word) SIN_SIZE#0
Constant inlined main::toD0181_$1#0 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) $3fff
Constant inlined main::toD0181_$7#0 = >((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) $f
Constant inlined main::toD0181_$3#0 = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) $3fff<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::toD0181_$5#0 = >((word))(const byte*) BITMAP#0
Constant inlined sin16s_gen2::sintab#1 = (const signed word[$200]) sin#0
Constant inlined bitmap_init::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bitmap_init::bitmap#0 = (const byte*) BITMAP#0
Constant inlined fill::val#0 = (const byte) WHITE#0
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN#0
Constant inlined main::toD0181_gfx#0 = (const byte*) BITMAP#0
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div32u16u::dividend#0 = (const dword) PI2_u4f28#0
Constant inlined bitmap_init::bits#0 = (byte/word/signed word/dword/signed dword) $80
Constant inlined render_sine::xpos#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16s::$7 = ((word))(const signed word) sin16s_gen2::ampl#0
Constant inlined sin16s_gen2::$1 = (const signed word) sin16s_gen2::ampl#0>>(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined bitmap_init::bits#2 = (byte/word/signed word/dword/signed dword) $80
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_gen2::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u::res#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr16u::divisor#1 = (const word) SIN_SIZE#0
Constant inlined divr16u::divisor#0 = (const word) SIN_SIZE#0
Constant inlined bitmap_init::$10 = (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined main::vicSelectGfxBank1_toDd001_$2#0 = >((word))(const byte*) SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined render_sine::sin_idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::vicSelectGfxBank1_toDd001_$0#0 = ((word))(const byte*) SCREEN#0
Constant inlined bitmap_clear::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$0#0 = ((word))(const byte*) SCREEN#0
Constant inlined divr16u::dividend#1 = >(const dword) PI2_u4f28#0
Constant inlined divr16u::dividend#2 = <(const dword) PI2_u4f28#0
Constant inlined main::toD0181_$6#0 = >((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$1 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined main::toD0181_$2#0 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) $3fff<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$2 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined render_sine::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::toD0181_$4#0 = ((word))(const byte*) BITMAP#0
Constant inlined main::$0 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Constant inlined mulu16_sel::v2#2 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::vicSelectGfxBank1_gfx#0 = (const byte*) SCREEN#0
Constant inlined bitmap_init::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div32u16u::divisor#0 = (const word) SIN_SIZE#0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::divisor#6 (const word) SIN_SIZE#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simplifying constant plus zero bitmap_plot_yhi#0+0
Simplifying constant plus zero bitmap_plot_ylo#0+0
Added new block during phi lifting render_sine::@9(between render_sine::@2 and render_sine::@1)
Added new block during phi lifting render_sine::@10(between render_sine::@8 and render_sine::@2)
Added new block during phi lifting wrap_y::@14(between wrap_y::@1 and wrap_y::@4)
Added new block during phi lifting sin16s_gen2::@6(between sin16s_gen2::@5 and sin16s_gen2::@1)
Added new block during phi lifting mul16s::@7(between mul16s::@6 and mul16s::@1)
Added new block during phi lifting mul16u::@10(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting sin16s::@13(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@13 ) during phi lifting.
Added new block during phi lifting sin16s::@14(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@15(between sin16s::@12 and sin16s::@3)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@6(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@4 and bitmap_init::@3)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@3 and bitmap_init::@4)
Added new block during phi lifting fill::@3(between fill::@1 and fill::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @32
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of render_sine
Adding NOP phi() at start of render_sine::@3
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@5
Adding NOP phi() at start of fill
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to fill:15 bitmap_init:17 bitmap_clear:19 sin16s_gen2:21 render_sine:23 
Calls in [render_sine] to wrap_y:32 bitmap_plot:39 wrap_y:45 bitmap_plot:52 
Calls in [sin16s_gen2] to div32u16u:84 sin16s:89 mul16s:92 
Calls in [mul16s] to mul16u:107 
Calls in [sin16s] to mulu16_sel:151 mulu16_sel:158 mulu16_sel:163 mulu16_sel:171 mulu16_sel:178 
Calls in [mulu16_sel] to mul16u:196 
Calls in [div32u16u] to divr16u:203 divr16u:208 

Created 45 initial phi equivalence classes
Coalesced [31] wrap_y::y#10 ← wrap_y::y#0
Coalesced [37] bitmap_plot::y#3 ← bitmap_plot::y#0
Coalesced [38] bitmap_plot::x#3 ← bitmap_plot::x#0
Coalesced [44] wrap_y::y#11 ← wrap_y::y#1
Coalesced [50] bitmap_plot::y#4 ← bitmap_plot::y#1
Coalesced [51] bitmap_plot::x#4 ← bitmap_plot::x#1
Coalesced [60] render_sine::sin_idx#9 ← render_sine::sin_idx#1
Coalesced [61] render_sine::xpos#9 ← render_sine::xpos#8
Coalesced [62] render_sine::xpos#10 ← render_sine::xpos#1
Coalesced [71] wrap_y::y#12 ← wrap_y::y#9
Coalesced [74] wrap_y::y#14 ← wrap_y::y#4
Coalesced [80] wrap_y::y#15 ← wrap_y::y#3
Coalesced [82] wrap_y::y#13 ← wrap_y::y#2
Coalesced [103] sin16s_gen2::x#5 ← sin16s_gen2::x#1
Coalesced [104] sin16s_gen2::sintab#7 ← sin16s_gen2::sintab#0
Coalesced [105] sin16s_gen2::i#5 ← sin16s_gen2::i#1
Coalesced [114] mul16s::m#7 ← mul16s::m#1
Coalesced [118] mul16s::m#8 ← mul16s::m#0
Coalesced [121] mul16u::a#10 ← mul16u::a#6
Coalesced [122] mul16u::mb#6 ← mul16u::mb#0
Coalesced [129] mul16u::res#9 ← mul16u::res#1
Coalesced [133] mul16u::a#11 ← mul16u::a#0
Coalesced [134] mul16u::res#7 ← mul16u::res#6
Coalesced [135] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [136] mul16u::res#8 ← mul16u::res#2
Coalesced [139] sin16s::x#9 ← sin16s::x#1
Coalesced [143] sin16s::x#11 ← sin16s::x#2
Coalesced [149] mulu16_sel::v1#8 ← mulu16_sel::v1#0
Coalesced [150] mulu16_sel::v2#8 ← mulu16_sel::v2#0
Coalesced [156] mulu16_sel::v1#9 ← mulu16_sel::v1#1
Coalesced [157] mulu16_sel::v2#9 ← mulu16_sel::v2#1
Coalesced [162] mulu16_sel::v1#10 ← mulu16_sel::v1#2
Coalesced [169] mulu16_sel::v1#6 ← mulu16_sel::v1#3
Coalesced [170] mulu16_sel::v2#6 ← mulu16_sel::v2#3
Coalesced [176] mulu16_sel::v1#7 ← mulu16_sel::v1#4
Coalesced [177] mulu16_sel::v2#7 ← mulu16_sel::v2#4
Coalesced [185] sin16s::return#6 ← sin16s::sinx#1
Coalesced [189] sin16s::x#10 ← sin16s::x#4
Coalesced [190] sin16s::x#8 ← sin16s::x#0
Coalesced [194] mul16u::b#3 ← mul16u::b#1
Coalesced [195] mul16u::a#9 ← mul16u::a#2
Coalesced [207] divr16u::rem#12 ← divr16u::rem#4
Coalesced [214] divr16u::rem#13 ← divr16u::rem#10
Coalesced [215] divr16u::dividend#9 ← divr16u::dividend#5
Coalesced [222] divr16u::rem#16 ← divr16u::rem#1
Coalesced [229] divr16u::rem#18 ← divr16u::rem#2
Coalesced [230] divr16u::return#8 ← divr16u::quotient#2
Coalesced [236] divr16u::rem#14 ← divr16u::rem#11
Coalesced [237] divr16u::dividend#10 ← divr16u::dividend#0
Coalesced [238] divr16u::quotient#9 ← divr16u::return#0
Coalesced [239] divr16u::i#7 ← divr16u::i#1
Coalesced [240] divr16u::rem#17 ← divr16u::rem#6
Coalesced [241] divr16u::return#7 ← divr16u::quotient#1
Coalesced [242] divr16u::rem#15 ← divr16u::rem#0
Coalesced [246] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [255] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [256] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [257] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [258] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [278] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [283] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [284] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [285] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [286] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [287] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [288] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [295] fill::addr#3 ← fill::addr#1
Coalesced down to 31 phi equivalence classes
Culled Empty Block (label) render_sine::@3
Culled Empty Block (label) render_sine::@9
Culled Empty Block (label) wrap_y::@14
Culled Empty Block (label) sin16s_gen2::@6
Culled Empty Block (label) mul16s::@7
Culled Empty Block (label) mul16u::@10
Culled Empty Block (label) sin16s::@14
Culled Empty Block (label) sin16s::@13
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_clear::@6
Culled Empty Block (label) bitmap_init::@5
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Culled Empty Block (label) fill::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @32
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of render_sine
Adding NOP phi() at start of render_sine::@10
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@10
Adding NOP phi() at start of fill

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@29
@29: scope:[]  from @begin
  kickasm(location (const signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
  to:@32
@32: scope:[]  from @29
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @32
  [4] phi()
main: scope:[main]  from @32
  asm { sei  }
  [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [10] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::@7
main::@7: scope:[main]  from main::vicSelectGfxBank1_@1
  [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::@7
  [13] phi()
  to:main::@8
main::@8: scope:[main]  from main::toD0181
  [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [15] call fill 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [16] phi()
  [17] call bitmap_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [18] phi()
  [19] call bitmap_clear 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [20] phi()
  [21] call sin16s_gen2 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [22] phi()
  [23] call render_sine 
  to:main::@2
main::@2: scope:[main]  from main::@12 main::@2
  [24] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  to:main::@2
render_sine: scope:[render_sine]  from main::@12
  [25] phi()
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@2
  [26] (word) render_sine::xpos#3 ← phi( render_sine/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@2/(word) render_sine::xpos#8 )
  [26] (word) render_sine::sin_idx#2 ← phi( render_sine/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@2/(word) render_sine::sin_idx#1 )
  [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0
  [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1)
  [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  [31] call wrap_y 
  [32] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@1
  [33] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0
  [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  [35] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  [36] call bitmap_plot 
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4
  [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5)
  [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a
  [41] call wrap_y 
  [42] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2
  to:render_sine::@7
render_sine::@7: scope:[render_sine]  from render_sine::@6
  [43] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1
  [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3
  [45] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  [46] call bitmap_plot 
  to:render_sine::@8
render_sine::@8: scope:[render_sine]  from render_sine::@7
  [47] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3
  [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10
  to:render_sine::@2
render_sine::@2: scope:[render_sine]  from render_sine::@10 render_sine::@8
  [49] (word) render_sine::xpos#8 ← phi( render_sine::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@10/(word) render_sine::xpos#1 )
  [50] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2
  [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1
  to:render_sine::@return
render_sine::@return: scope:[render_sine]  from render_sine::@2
  [52] return 
  to:@return
render_sine::@10: scope:[render_sine]  from render_sine::@8
  [53] phi()
  to:render_sine::@2
bitmap_plot: scope:[bitmap_plot]  from render_sine::@5 render_sine::@7
  [54] (word) bitmap_plot::x#2 ← phi( render_sine::@5/(word) bitmap_plot::x#0 render_sine::@7/(word) bitmap_plot::x#1 )
  [54] (byte) bitmap_plot::y#2 ← phi( render_sine::@5/(byte) bitmap_plot::y#0 render_sine::@7/(byte) bitmap_plot::y#1 )
  [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2)
  [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8
  [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1
  [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2
  [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [60] return 
  to:@return
wrap_y: scope:[wrap_y]  from render_sine::@1 render_sine::@6
  [61] (signed word) wrap_y::y#9 ← phi( render_sine::@1/(signed word) wrap_y::y#0 render_sine::@6/(signed word) wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  [62] (signed word) wrap_y::y#4 ← phi( wrap_y/(signed word) wrap_y::y#9 wrap_y::@2/(signed word) wrap_y::y#2 )
  [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2
  to:wrap_y::@4
wrap_y::@4: scope:[wrap_y]  from wrap_y::@1 wrap_y::@5
  [64] (signed word) wrap_y::y#6 ← phi( wrap_y::@1/(signed word) wrap_y::y#4 wrap_y::@5/(signed word) wrap_y::y#3 )
  [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5
  to:wrap_y::@6
wrap_y::@6: scope:[wrap_y]  from wrap_y::@4
  [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@6
  [67] return 
  to:@return
wrap_y::@5: scope:[wrap_y]  from wrap_y::@4
  [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@4
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@1
sin16s_gen2: scope:[sin16s_gen2]  from main::@11
  [70] phi()
  [71] call div32u16u 
  [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [74] (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen2::@5/(word) sin16s_gen2::i#1 )
  [74] (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@3/(const signed word[$200]) sin#0 sin16s_gen2::@5/(signed word*) sin16s_gen2::sintab#0 )
  [74] (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen2::@5/(dword) sin16s_gen2::x#1 )
  [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  [76] call sin16s 
  [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  [79] call mul16s 
  [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
  [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5
  [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6
  [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8
  [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0
  [87] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@5
  [89] return 
  to:@return
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0
  [91] call mul16u 
  [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@6
mul16s::@6: scope:[mul16s]  from mul16s
  [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@6
  [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0
  [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@6
  [98] (dword) mul16s::m#4 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@6/(dword) mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [100] return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [101] (word) mul16u::a#6 ← phi( mul16s/(word~) mul16u::a#8 mulu16_sel/(word) mul16u::a#2 )
  [101] (word) mul16u::b#2 ← phi( mul16s/((word))(const signed word) sin16s_gen2::ampl#0 mulu16_sel/(word) mul16u::b#1 )
  [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  [103] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  [103] (dword) mul16u::res#2 ← phi( mul16u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u::@4/(dword) mul16u::res#6 )
  [103] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [105] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [107] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
  to:mul16u::@7
mul16u::@7: scope:[mul16u]  from mul16u::@2
  [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  [109] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@7/(dword) mul16u::res#1 )
  [110] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [111] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mul16u::@1
sin16s: scope:[sin16s]  from sin16s_gen2::@1
  [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [114] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [114] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [117] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6
  [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [122] call mulu16_sel 
  [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [127] call mulu16_sel 
  [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [131] call mulu16_sel 
  [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [137] call mulu16_sel 
  [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [142] call mulu16_sel 
  [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [147] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@12
  [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@15 sin16s::@6
  [149] (signed word) sin16s::return#1 ← phi( sin16s::@15/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [150] return 
  to:@return
sin16s::@15: scope:[sin16s]  from sin16s::@12
  [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9
  [152] (byte) mulu16_sel::select#5 ← phi( sin16s::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 sin16s::@9/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [152] (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 )
  [152] (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 )
  [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  [155] call mul16u 
  [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  [160] return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [161] phi()
  [162] call divr16u 
  [163] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [165] (word) divr16u::rem#4 ← (word) rem16u#1
  [166] call divr16u 
  [167] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  [170] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@2
  [171] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@2/<(const dword) PI2_u4f28#0 )
  [171] (word) divr16u::rem#10 ← phi( div32u16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div32u16u::@2/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [172] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [172] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [172] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [172] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [173] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  [176] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [178] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [179] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [180] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [182] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [184] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [184] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [185] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [186] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [187] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [188] return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@10
  [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0)
  [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [191] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [191] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [192] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [192] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [194] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [195] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [196] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [197] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [198] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [199] return 
  to:@return
bitmap_init: scope:[bitmap_init]  from main::@9
  [200] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [201] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [201] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte/word/signed word/dword/signed dword) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [202] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [203] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [204] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@10
  [205] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@10/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte/word/signed word/dword/signed dword) $80 )
  [206] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [207] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [208] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#4 bitmap_init::@2/(const byte*) BITMAP#0 )
  [208] (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#1 bitmap_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [210] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [211] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
  [212] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [213] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [214] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [216] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
  to:bitmap_init::@7
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@3
  [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@7
  [218] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  [219] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [220] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [221] return 
  to:@return
bitmap_init::@10: scope:[bitmap_init]  from bitmap_init::@1
  [222] phi()
  to:bitmap_init::@2
fill: scope:[fill]  from main::@8
  [223] phi()
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [224] (byte*) fill::addr#2 ← phi( fill/(const byte*) SCREEN#0 fill::@1/(byte*) fill::addr#1 )
  [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0
  [226] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [228] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte*) BITMAP
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(word) PI2_u4f12
(dword) PI2_u4f28
(byte) PINK
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(word) PI_u4f12
(dword) PI_u4f28
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(word) SIN_SIZE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) bitmap_clear()
(word~) bitmap_clear::$3 2.0
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 42.599999999999994
(byte*) bitmap_clear::bitmap#2 157.0
(byte*) bitmap_clear::bitmap#3 24.0
(byte*~) bitmap_clear::bitmap#5 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 151.5
(byte) bitmap_clear::x#2 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 16.5
(byte) bitmap_clear::y#4 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$3 11.0
(byte~) bitmap_init::$4 22.0
(byte~) bitmap_init::$5 22.0
(byte~) bitmap_init::$6 22.0
(byte~) bitmap_init::$7 22.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 11.0
(byte) bitmap_init::bits#3 16.5
(byte) bitmap_init::bits#4 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 16.5
(byte) bitmap_init::x#2 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 16.5
(byte) bitmap_init::y#2 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 22.0
(byte*) bitmap_init::yoffs#2 6.111111111111112
(byte*) bitmap_init::yoffs#4 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 4.0
(byte~) bitmap_plot::$2 4.0
(word~) bitmap_plot::$3 1.0
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#1 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 11.0
(word) bitmap_plot::x#1 11.0
(word) bitmap_plot::x#2 6.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 22.0
(byte) bitmap_plot::y#1 22.0
(byte) bitmap_plot::y#2 26.0
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_ylo
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 1.3333333333333333
(dword) div32u16u::return#2 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#3 5.0
(word) divr16u::dividend#5 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 4.0
(word) divr16u::rem#11 11.666666666666666
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 4.0
(word) divr16u::rem#5 24.0
(word) divr16u::rem#6 11.0
(word) divr16u::return
(word) divr16u::return#0 5.285714285714286
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*) fill::addr
(byte*) fill::addr#1 16.5
(byte*) fill::addr#2 16.5
(byte*) fill::end
(word) fill::size
(byte*) fill::start
(byte) fill::val
(void()) main()
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word~) main::toD0181_$2
(byte~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte~) main::toD0181_$6
(byte~) main::toD0181_$7
(byte~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte~) main::vicSelectGfxBank1_$0
(byte*) main::vicSelectGfxBank1_gfx
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$16 4.0
(word~) mul16s::$6 4.0
(signed word) mul16s::a
(signed word) mul16s::a#0 2.6
(signed word) mul16s::b
(dword) mul16s::m
(dword) mul16s::m#0 2.0
(dword) mul16s::m#1 4.0
(dword) mul16s::m#4 6.0
(signed dword) mul16s::return
(signed dword) mul16s::return#0 4.333333333333333
(signed dword) mul16s::return#2 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 202.0
(word) mul16u::a
(word) mul16u::a#0 101.0
(word) mul16u::a#2 2.0
(word) mul16u::a#3 67.66666666666666
(word) mul16u::a#6 3.0
(word~) mul16u::a#8 4.0
(word) mul16u::b
(word) mul16u::b#1 4.0
(word) mul16u::b#2 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 4.0
(dword) mul16u::mb#1 202.0
(dword) mul16u::mb#2 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 202.0
(dword) mul16u::res#2 43.85714285714286
(dword) mul16u::res#6 101.0
(dword) mul16u::return
(dword) mul16u::return#2 4.0
(dword) mul16u::return#3 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 4.0
(dword~) mulu16_sel::$1 4.0
(word) mulu16_sel::return
(word) mulu16_sel::return#0 4.0
(word) mulu16_sel::return#1 4.0
(word) mulu16_sel::return#10 4.0
(word) mulu16_sel::return#11 4.0
(word) mulu16_sel::return#12 1.714285714285714
(word) mulu16_sel::return#2 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 2.0
(word) mulu16_sel::v1#1 2.0
(word) mulu16_sel::v1#2 4.0
(word) mulu16_sel::v1#3 2.0
(word) mulu16_sel::v1#4 2.0
(word) mulu16_sel::v1#5 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 4.0
(word) mulu16_sel::v2#1 4.0
(word) mulu16_sel::v2#3 4.0
(word) mulu16_sel::v2#4 4.0
(word) mulu16_sel::v2#5 5.0
(signed word) rem16s
(word) rem16u
(word) rem16u#1 0.8
(signed byte) rem8s
(byte) rem8u
(void()) render_sine()
(word~) render_sine::$0 22.0
(signed word*~) render_sine::$1 22.0
(word~) render_sine::$4 22.0
(signed word*~) render_sine::$5 22.0
(signed word) render_sine::sin2_val
(signed word) render_sine::sin2_val#0 22.0
(word) render_sine::sin_idx
(word) render_sine::sin_idx#1 16.5
(word) render_sine::sin_idx#2 1.76
(signed word) render_sine::sin_val
(signed word) render_sine::sin_val#0 22.0
(word) render_sine::xpos
(word) render_sine::xpos#1 11.0
(word) render_sine::xpos#3 2.0952380952380953
(word) render_sine::xpos#8 7.333333333333333
(byte) render_sine::ypos
(byte) render_sine::ypos#0 11.0
(byte) render_sine::ypos2
(byte) render_sine::ypos2#0 11.0
(signed word[$200]) sin
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$6 4.0
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 22.0
(signed word) sin16s::return#1 5.0
(signed word~) sin16s::return#5 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 0.3333333333333333
(word) sin16s::usinx#1 1.0
(dword) sin16s::x
(dword) sin16s::x#0 8.5
(dword) sin16s::x#1 4.0
(dword) sin16s::x#2 4.0
(dword) sin16s::x#4 5.0
(dword) sin16s::x#6 6.0
(word) sin16s::x1
(word) sin16s::x1#0 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 4.0
(word) sin16s::x3
(word) sin16s::x3#0 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 4.0
(word) sin16s::x4
(word) sin16s::x4#0 4.0
(word) sin16s::x5
(word) sin16s::x5#0 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$5 22.0
(word~) sin16s_gen2::$6 11.0
(signed word~) sin16s_gen2::$8 22.0
(signed word) sin16s_gen2::ampl
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 16.5
(word) sin16s_gen2::i#2 1.6923076923076923
(signed word) sin16s_gen2::max
(signed word) sin16s_gen2::min
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 5.5
(signed word*) sin16s_gen2::sintab#2 3.0
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 0.8125
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 7.333333333333333
(dword) sin16s_gen2::x#2 2.75
(signed word*) sin2
(byte()) wrap_y((signed word) wrap_y::y)
(byte) wrap_y::return
(byte) wrap_y::return#0 22.0
(byte) wrap_y::return#1 22.0
(byte) wrap_y::return#2 6.0
(signed word) wrap_y::y
(signed word) wrap_y::y#0 22.0
(signed word) wrap_y::y#1 22.0
(signed word) wrap_y::y#2 202.0
(signed word) wrap_y::y#3 202.0
(signed word) wrap_y::y#4 203.0
(signed word) wrap_y::y#6 203.0
(signed word) wrap_y::y#9 24.0

Initial phi equivalence classes
[ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
[ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ]
[ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
[ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
[ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ mul16u::b#2 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ fill::addr#2 fill::addr#1 ]
Added variable render_sine::$0 to zero page equivalence class [ render_sine::$0 ]
Added variable render_sine::$1 to zero page equivalence class [ render_sine::$1 ]
Added variable render_sine::sin_val#0 to zero page equivalence class [ render_sine::sin_val#0 ]
Added variable wrap_y::return#0 to zero page equivalence class [ wrap_y::return#0 ]
Added variable render_sine::ypos#0 to zero page equivalence class [ render_sine::ypos#0 ]
Added variable render_sine::$4 to zero page equivalence class [ render_sine::$4 ]
Added variable render_sine::$5 to zero page equivalence class [ render_sine::$5 ]
Added variable render_sine::sin2_val#0 to zero page equivalence class [ render_sine::sin2_val#0 ]
Added variable wrap_y::return#1 to zero page equivalence class [ wrap_y::return#1 ]
Added variable render_sine::ypos2#0 to zero page equivalence class [ render_sine::ypos2#0 ]
Added variable bitmap_plot::$3 to zero page equivalence class [ bitmap_plot::$3 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_plot::plotter#1 to zero page equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$2 to zero page equivalence class [ bitmap_plot::$2 ]
Added variable wrap_y::return#2 to zero page equivalence class [ wrap_y::return#2 ]
Added variable div32u16u::return#2 to zero page equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen2::step#0 to zero page equivalence class [ sin16s_gen2::step#0 ]
Added variable sin16s::return#0 to zero page equivalence class [ sin16s::return#0 ]
Added variable mul16s::a#0 to zero page equivalence class [ mul16s::a#0 ]
Added variable mul16s::return#2 to zero page equivalence class [ mul16s::return#2 ]
Added variable sin16s_gen2::$5 to zero page equivalence class [ sin16s_gen2::$5 ]
Added variable sin16s_gen2::$6 to zero page equivalence class [ sin16s_gen2::$6 ]
Added variable sin16s_gen2::$8 to zero page equivalence class [ sin16s_gen2::$8 ]
Added variable mul16u::return#2 to zero page equivalence class [ mul16u::return#2 ]
Added variable mul16s::$6 to zero page equivalence class [ mul16s::$6 ]
Added variable mul16s::$16 to zero page equivalence class [ mul16s::$16 ]
Added variable mul16s::return#0 to zero page equivalence class [ mul16s::return#0 ]
Added variable mul16u::$1 to zero page equivalence class [ mul16u::$1 ]
Added variable sin16s::$6 to zero page equivalence class [ sin16s::$6 ]
Added variable sin16s::x1#0 to zero page equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to zero page equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to zero page equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to zero page equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to zero page equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to zero page equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to zero page equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to zero page equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to zero page equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to zero page equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to zero page equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to zero page equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to zero page equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to zero page equivalence class [ sin16s::usinx#1 ]
Added variable mul16u::return#3 to zero page equivalence class [ mul16u::return#3 ]
Added variable mulu16_sel::$0 to zero page equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to zero page equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to zero page equivalence class [ mulu16_sel::return#12 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to zero page equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to zero page equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to zero page equivalence class [ div32u16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable bitmap_clear::$3 to zero page equivalence class [ bitmap_clear::$3 ]
Added variable bitmap_init::$3 to zero page equivalence class [ bitmap_init::$3 ]
Added variable bitmap_init::$4 to zero page equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to zero page equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to zero page equivalence class [ bitmap_init::$6 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Complete equivalence classes
[ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
[ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ]
[ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
[ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
[ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
[ mul16u::b#2 mul16u::b#1 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
[ mulu16_sel::select#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ fill::addr#2 fill::addr#1 ]
[ render_sine::$0 ]
[ render_sine::$1 ]
[ render_sine::sin_val#0 ]
[ wrap_y::return#0 ]
[ render_sine::ypos#0 ]
[ render_sine::$4 ]
[ render_sine::$5 ]
[ render_sine::sin2_val#0 ]
[ wrap_y::return#1 ]
[ render_sine::ypos2#0 ]
[ bitmap_plot::$3 ]
[ bitmap_plot::$1 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$2 ]
[ wrap_y::return#2 ]
[ div32u16u::return#2 ]
[ sin16s_gen2::step#0 ]
[ sin16s::return#0 ]
[ mul16s::a#0 ]
[ mul16s::return#2 ]
[ sin16s_gen2::$5 ]
[ sin16s_gen2::$6 ]
[ sin16s_gen2::$8 ]
[ mul16u::return#2 ]
[ mul16s::$6 ]
[ mul16s::$16 ]
[ mul16s::return#0 ]
[ mul16u::$1 ]
[ sin16s::$6 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ mul16u::return#3 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ bitmap_clear::$3 ]
[ bitmap_init::$3 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ bitmap_init::$7 ]
Allocated zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ]
Allocated zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ]
Allocated zp ZP_BYTE:6 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
Allocated zp ZP_WORD:7 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ]
Allocated zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ]
Allocated zp ZP_DWORD:11 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated zp ZP_WORD:15 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated zp ZP_WORD:17 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ]
Allocated zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 ]
Allocated zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ]
Allocated zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp ZP_DWORD:31 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp ZP_BYTE:35 [ sin16s::isUpper#2 ]
Allocated zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ]
Allocated zp ZP_WORD:44 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ]
Allocated zp ZP_BYTE:46 [ mulu16_sel::select#5 ]
Allocated zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:49 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
Allocated zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:53 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp ZP_BYTE:57 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp ZP_BYTE:58 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp ZP_BYTE:59 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp ZP_BYTE:60 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp ZP_WORD:61 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp ZP_WORD:63 [ fill::addr#2 fill::addr#1 ]
Allocated zp ZP_WORD:65 [ render_sine::$0 ]
Allocated zp ZP_WORD:67 [ render_sine::$1 ]
Allocated zp ZP_WORD:69 [ render_sine::sin_val#0 ]
Allocated zp ZP_BYTE:71 [ wrap_y::return#0 ]
Allocated zp ZP_BYTE:72 [ render_sine::ypos#0 ]
Allocated zp ZP_WORD:73 [ render_sine::$4 ]
Allocated zp ZP_WORD:75 [ render_sine::$5 ]
Allocated zp ZP_WORD:77 [ render_sine::sin2_val#0 ]
Allocated zp ZP_BYTE:79 [ wrap_y::return#1 ]
Allocated zp ZP_BYTE:80 [ render_sine::ypos2#0 ]
Allocated zp ZP_WORD:81 [ bitmap_plot::$3 ]
Allocated zp ZP_WORD:83 [ bitmap_plot::$1 ]
Allocated zp ZP_WORD:85 [ bitmap_plot::plotter#1 ]
Allocated zp ZP_BYTE:87 [ bitmap_plot::$2 ]
Allocated zp ZP_BYTE:88 [ wrap_y::return#2 ]
Allocated zp ZP_DWORD:89 [ div32u16u::return#2 ]
Allocated zp ZP_DWORD:93 [ sin16s_gen2::step#0 ]
Allocated zp ZP_WORD:97 [ sin16s::return#0 ]
Allocated zp ZP_WORD:99 [ mul16s::a#0 ]
Allocated zp ZP_DWORD:101 [ mul16s::return#2 ]
Allocated zp ZP_DWORD:105 [ sin16s_gen2::$5 ]
Allocated zp ZP_WORD:109 [ sin16s_gen2::$6 ]
Allocated zp ZP_WORD:111 [ sin16s_gen2::$8 ]
Allocated zp ZP_DWORD:113 [ mul16u::return#2 ]
Allocated zp ZP_WORD:117 [ mul16s::$6 ]
Allocated zp ZP_WORD:119 [ mul16s::$16 ]
Allocated zp ZP_DWORD:121 [ mul16s::return#0 ]
Allocated zp ZP_BYTE:125 [ mul16u::$1 ]
Allocated zp ZP_DWORD:126 [ sin16s::$6 ]
Allocated zp ZP_WORD:130 [ sin16s::x1#0 ]
Allocated zp ZP_WORD:132 [ mulu16_sel::return#0 ]
Allocated zp ZP_WORD:134 [ sin16s::x2#0 ]
Allocated zp ZP_WORD:136 [ mulu16_sel::return#1 ]
Allocated zp ZP_WORD:138 [ sin16s::x3#0 ]
Allocated zp ZP_WORD:140 [ mulu16_sel::return#2 ]
Allocated zp ZP_WORD:142 [ sin16s::x3_6#0 ]
Allocated zp ZP_WORD:144 [ sin16s::usinx#0 ]
Allocated zp ZP_WORD:146 [ mulu16_sel::return#10 ]
Allocated zp ZP_WORD:148 [ sin16s::x4#0 ]
Allocated zp ZP_WORD:150 [ mulu16_sel::return#11 ]
Allocated zp ZP_WORD:152 [ sin16s::x5#0 ]
Allocated zp ZP_WORD:154 [ sin16s::x5_128#0 ]
Allocated zp ZP_WORD:156 [ sin16s::usinx#1 ]
Allocated zp ZP_DWORD:158 [ mul16u::return#3 ]
Allocated zp ZP_DWORD:162 [ mulu16_sel::$0 ]
Allocated zp ZP_DWORD:166 [ mulu16_sel::$1 ]
Allocated zp ZP_WORD:170 [ mulu16_sel::return#12 ]
Allocated zp ZP_WORD:172 [ divr16u::return#2 ]
Allocated zp ZP_WORD:174 [ div32u16u::quotient_hi#0 ]
Allocated zp ZP_WORD:176 [ divr16u::return#3 ]
Allocated zp ZP_WORD:178 [ div32u16u::quotient_lo#0 ]
Allocated zp ZP_DWORD:180 [ div32u16u::return#0 ]
Allocated zp ZP_BYTE:184 [ divr16u::$1 ]
Allocated zp ZP_BYTE:185 [ divr16u::$2 ]
Allocated zp ZP_WORD:186 [ rem16u#1 ]
Allocated zp ZP_WORD:188 [ bitmap_clear::$3 ]
Allocated zp ZP_BYTE:190 [ bitmap_init::$3 ]
Allocated zp ZP_BYTE:191 [ bitmap_init::$4 ]
Allocated zp ZP_BYTE:192 [ bitmap_init::$5 ]
Allocated zp ZP_BYTE:193 [ bitmap_init::$6 ]
Allocated zp ZP_BYTE:194 [ bitmap_init::$7 ]

INITIAL ASM
//SEG0 File Comments
// Generate a big sinus and plot it on a bitmap
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label BGCOL = $d021
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D016 = $d016
  .const VIC_CSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label BITMAP = $2000
  .const SIN_SIZE = $200
  .label sin2 = $1400
  .label rem16u = $ba
//SEG3 @begin
bbegin:
  jmp b29
//SEG4 @29
b29:
//SEG5 kickasm(location (const signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {   	  .word sin(toRadians([i*360]/512))*320     }  }}
//SEG6 [2] phi from @29 to @32 [phi:@29->@32]
b32_from_b29:
  jmp b32
//SEG7 @32
b32:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @32 to @end [phi:@32->@end]
bend_from_b32:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG14 [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG15 [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    jmp vicSelectGfxBank1
  //SEG16 main::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG17 [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG18 [10] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG19 main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG20 main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG21 [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b7
  //SEG22 main::@7
  b7:
  //SEG23 [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta D016
  //SEG24 [13] phi from main::@7 to main::toD0181 [phi:main::@7->main::toD0181]
  toD0181_from_b7:
    jmp toD0181
  //SEG25 main::toD0181
  toD0181:
    jmp b8
  //SEG26 main::@8
  b8:
  //SEG27 [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG28 [15] call fill 
  //SEG29 [223] phi from main::@8 to fill [phi:main::@8->fill]
  fill_from_b8:
    jsr fill
  //SEG30 [16] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG31 main::@9
  b9:
  //SEG32 [17] call bitmap_init 
  //SEG33 [200] phi from main::@9 to bitmap_init [phi:main::@9->bitmap_init]
  bitmap_init_from_b9:
    jsr bitmap_init
  //SEG34 [18] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG35 main::@10
  b10:
  //SEG36 [19] call bitmap_clear 
    jsr bitmap_clear
  //SEG37 [20] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG38 main::@11
  b11:
  //SEG39 [21] call sin16s_gen2 
  //SEG40 [70] phi from main::@11 to sin16s_gen2 [phi:main::@11->sin16s_gen2]
  sin16s_gen2_from_b11:
    jsr sin16s_gen2
  //SEG41 [22] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG42 main::@12
  b12:
  //SEG43 [23] call render_sine 
  //SEG44 [25] phi from main::@12 to render_sine [phi:main::@12->render_sine]
  render_sine_from_b12:
    jsr render_sine
    jmp b2
  //SEG45 main::@2
  b2:
  //SEG46 [24] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp b2
}
//SEG47 render_sine
render_sine: {
    .label _0 = $41
    .label _1 = $43
    .label _4 = $49
    .label _5 = $4b
    .label sin_val = $45
    .label ypos = $48
    .label sin2_val = $4d
    .label ypos2 = $50
    .label xpos = 4
    .label sin_idx = 2
  //SEG48 [26] phi from render_sine to render_sine::@1 [phi:render_sine->render_sine::@1]
  b1_from_render_sine:
  //SEG49 [26] phi (word) render_sine::xpos#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    lda #0
    sta xpos+1
  //SEG50 [26] phi (word) render_sine::sin_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta sin_idx
    lda #0
    sta sin_idx+1
    jmp b1
  //SEG51 [26] phi from render_sine::@2 to render_sine::@1 [phi:render_sine::@2->render_sine::@1]
  b1_from_b2:
  //SEG52 [26] phi (word) render_sine::xpos#3 = (word) render_sine::xpos#8 [phi:render_sine::@2->render_sine::@1#0] -- register_copy 
  //SEG53 [26] phi (word) render_sine::sin_idx#2 = (word) render_sine::sin_idx#1 [phi:render_sine::@2->render_sine::@1#1] -- register_copy 
    jmp b1
  //SEG54 render_sine::@1
  b1:
  //SEG55 [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _0
    lda sin_idx+1
    rol
    sta _0+1
  //SEG56 [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0 -- pwsz1=pwsc1_plus_vwuz2 
    lda _0
    clc
    adc #<sin
    sta _1
    lda _0+1
    adc #>sin
    sta _1+1
  //SEG57 [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_1),y
    sta sin_val
    iny
    lda (_1),y
    sta sin_val+1
  //SEG58 [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0 -- vwsz1=vwsz2 
    lda sin_val
    sta wrap_y.y
    lda sin_val+1
    sta wrap_y.y+1
  //SEG59 [31] call wrap_y 
  //SEG60 [61] phi from render_sine::@1 to wrap_y [phi:render_sine::@1->wrap_y]
  wrap_y_from_b1:
  //SEG61 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#0 [phi:render_sine::@1->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG62 [32] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2 -- vbuz1=vbuz2 
    lda wrap_y.return_2
    sta wrap_y.return
    jmp b5
  //SEG63 render_sine::@5
  b5:
  //SEG64 [33] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0 -- vbuz1=vbuz2 
    lda wrap_y.return
    sta ypos
  //SEG65 [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3 -- vwuz1=vwuz2 
    lda xpos
    sta bitmap_plot.x
    lda xpos+1
    sta bitmap_plot.x+1
  //SEG66 [35] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0 -- vbuz1=vbuz2 
    lda ypos
    sta bitmap_plot.y
  //SEG67 [36] call bitmap_plot 
  //SEG68 [54] phi from render_sine::@5 to bitmap_plot [phi:render_sine::@5->bitmap_plot]
  bitmap_plot_from_b5:
  //SEG69 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#0 [phi:render_sine::@5->bitmap_plot#0] -- register_copy 
  //SEG70 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#0 [phi:render_sine::@5->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b6
  //SEG71 render_sine::@6
  b6:
  //SEG72 [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _4
    lda sin_idx+1
    rol
    sta _4+1
  //SEG73 [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4 -- pwsz1=pwsc1_plus_vwuz2 
    lda _4
    clc
    adc #<sin2
    sta _5
    lda _4+1
    adc #>sin2
    sta _5+1
  //SEG74 [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (_5),y
    sta sin2_val
    iny
    lda (_5),y
    sta sin2_val+1
  //SEG75 [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vwsz1=vwsz2_plus_vbsc1 
    lda #$a
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda sin2_val
    adc $fe
    sta wrap_y.y
    lda sin2_val+1
    adc $ff
    sta wrap_y.y+1
  //SEG76 [41] call wrap_y 
  //SEG77 [61] phi from render_sine::@6 to wrap_y [phi:render_sine::@6->wrap_y]
  wrap_y_from_b6:
  //SEG78 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#1 [phi:render_sine::@6->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG79 [42] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2 -- vbuz1=vbuz2 
    lda wrap_y.return_2
    sta wrap_y.return_1
    jmp b7
  //SEG80 render_sine::@7
  b7:
  //SEG81 [43] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1 -- vbuz1=vbuz2 
    lda wrap_y.return_1
    sta ypos2
  //SEG82 [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3 -- vwuz1=vwuz2 
    lda xpos
    sta bitmap_plot.x
    lda xpos+1
    sta bitmap_plot.x+1
  //SEG83 [45] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0 -- vbuz1=vbuz2 
    lda ypos2
    sta bitmap_plot.y
  //SEG84 [46] call bitmap_plot 
  //SEG85 [54] phi from render_sine::@7 to bitmap_plot [phi:render_sine::@7->bitmap_plot]
  bitmap_plot_from_b7:
  //SEG86 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#1 [phi:render_sine::@7->bitmap_plot#0] -- register_copy 
  //SEG87 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#1 [phi:render_sine::@7->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b8
  //SEG88 render_sine::@8
  b8:
  //SEG89 [47] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3 -- vwuz1=_inc_vwuz1 
    inc xpos
    bne !+
    inc xpos+1
  !:
  //SEG90 [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10 -- vwuz1_neq_vwuc1_then_la1 
    lda xpos+1
    cmp #>$140
    bne b10_from_b8
    lda xpos
    cmp #<$140
    bne b10_from_b8
  //SEG91 [49] phi from render_sine::@8 to render_sine::@2 [phi:render_sine::@8->render_sine::@2]
  b2_from_b8:
  //SEG92 [49] phi (word) render_sine::xpos#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine::@8->render_sine::@2#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    lda #0
    sta xpos+1
    jmp b2
  //SEG93 render_sine::@2
  b2:
  //SEG94 [50] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2 -- vwuz1=_inc_vwuz1 
    inc sin_idx
    bne !+
    inc sin_idx+1
  !:
  //SEG95 [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda sin_idx+1
    cmp #>SIN_SIZE
    bcc b1_from_b2
    bne !+
    lda sin_idx
    cmp #<SIN_SIZE
    bcc b1_from_b2
  !:
    jmp breturn
  //SEG96 render_sine::@return
  breturn:
  //SEG97 [52] return 
    rts
  //SEG98 [53] phi from render_sine::@8 to render_sine::@10 [phi:render_sine::@8->render_sine::@10]
  b10_from_b8:
    jmp b10
  //SEG99 render_sine::@10
  b10:
  //SEG100 [49] phi from render_sine::@10 to render_sine::@2 [phi:render_sine::@10->render_sine::@2]
  b2_from_b10:
  //SEG101 [49] phi (word) render_sine::xpos#8 = (word) render_sine::xpos#1 [phi:render_sine::@10->render_sine::@2#0] -- register_copy 
    jmp b2
}
//SEG102 bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage(7) x, byte zeropage(6) y)
bitmap_plot: {
    .label _1 = $53
    .label _2 = $57
    .label plotter = $55
    .label x = 7
    .label y = 6
    .label _3 = $51
  //SEG103 [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda bitmap_plot_yhi,y
    sta _3+1
    lda bitmap_plot_ylo,y
    sta _3
  //SEG104 [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG105 [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 -- pbuz1=pbuz2_plus_vwuz3 
    lda _3
    clc
    adc _1
    sta plotter
    lda _3+1
    adc _1+1
    sta plotter+1
  //SEG106 [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2 -- vbuz1=_lo_vwuz2 
    lda x
    sta _2
  //SEG107 [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter),y
    ldy _2
    ora bitmap_plot_bit,y
    ldy #0
    sta (plotter),y
    jmp breturn
  //SEG108 bitmap_plot::@return
  breturn:
  //SEG109 [60] return 
    rts
}
//SEG110 wrap_y
// wrap_y(signed word zeropage(9) y)
wrap_y: {
    .label y = 9
    .label return = $47
    .label return_1 = $4f
    .label return_2 = $58
  //SEG111 [62] phi from wrap_y wrap_y::@2 to wrap_y::@1 [phi:wrap_y/wrap_y::@2->wrap_y::@1]
  b1_from_wrap_y:
  b1_from_b2:
  //SEG112 [62] phi (signed word) wrap_y::y#4 = (signed word) wrap_y::y#9 [phi:wrap_y/wrap_y::@2->wrap_y::@1#0] -- register_copy 
    jmp b1
  //SEG113 wrap_y::@1
  b1:
  //SEG114 [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2 -- vwsz1_ge_vwsc1_then_la1 
    lda y
    cmp #<$c8
    lda y+1
    sbc #>$c8
    bvc !+
    eor #$80
  !:
    bpl b2
  //SEG115 [64] phi from wrap_y::@1 wrap_y::@5 to wrap_y::@4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG116 [64] phi (signed word) wrap_y::y#6 = (signed word) wrap_y::y#4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4#0] -- register_copy 
    jmp b4
  //SEG117 wrap_y::@4
  b4:
  //SEG118 [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5 -- vwsz1_lt_0_then_la1 
    lda y+1
    bmi b5
    jmp b6
  //SEG119 wrap_y::@6
  b6:
  //SEG120 [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6 -- vbuz1=_byte_vwsz2 
    lda y
    sta return_2
    jmp breturn
  //SEG121 wrap_y::@return
  breturn:
  //SEG122 [67] return 
    rts
  //SEG123 wrap_y::@5
  b5:
  //SEG124 [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda y
    adc #<$c8
    sta y
    lda y+1
    adc #>$c8
    sta y+1
    jmp b4_from_b5
  //SEG125 wrap_y::@2
  b2:
  //SEG126 [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_minus_vbuc1 
    sec
    lda y
    sbc #$c8
    sta y
    bcs !+
    dec y+1
  !:
    jmp b1_from_b2
}
//SEG127 sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage($f) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .const offs = min+(ampl>>1)
    .label _5 = $69
    .label _6 = $6d
    .label _8 = $6f
    .label step = $5d
    .label sintab = $f
    .label x = $b
    .label i = $11
  //SEG128 [71] call div32u16u 
  //SEG129 [161] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
  //SEG130 [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda div32u16u.return
    sta div32u16u.return_2
    lda div32u16u.return+1
    sta div32u16u.return_2+1
    lda div32u16u.return+2
    sta div32u16u.return_2+2
    lda div32u16u.return+3
    sta div32u16u.return_2+3
    jmp b3
  //SEG131 sin16s_gen2::@3
  b3:
  //SEG132 [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 -- vduz1=vduz2 
    lda div32u16u.return_2
    sta step
    lda div32u16u.return_2+1
    sta step+1
    lda div32u16u.return_2+2
    sta step+2
    lda div32u16u.return_2+3
    sta step+3
  //SEG133 [74] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
  b1_from_b3:
  //SEG134 [74] phi (word) sin16s_gen2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG135 [74] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[$200]) sin#0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<sin
    sta sintab
    lda #>sin
    sta sintab+1
  //SEG136 [74] phi (dword) sin16s_gen2::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG137 [74] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
  b1_from_b5:
  //SEG138 [74] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
  //SEG139 [74] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
  //SEG140 [74] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp b1
  //SEG141 sin16s_gen2::@1
  b1:
  //SEG142 [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG143 [76] call sin16s 
    jsr sin16s
  //SEG144 [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 -- vwsz1=vwsz2 
    lda sin16s.return_1
    sta sin16s.return
    lda sin16s.return_1+1
    sta sin16s.return+1
    jmp b4
  //SEG145 sin16s_gen2::@4
  b4:
  //SEG146 [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 -- vwsz1=vwsz2 
    lda sin16s.return
    sta mul16s.a
    lda sin16s.return+1
    sta mul16s.a+1
  //SEG147 [79] call mul16s 
    jsr mul16s
  //SEG148 [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 -- vdsz1=vdsz2 
    lda mul16s.return
    sta mul16s.return_2
    lda mul16s.return+1
    sta mul16s.return_2+1
    lda mul16s.return+2
    sta mul16s.return_2+2
    lda mul16s.return+3
    sta mul16s.return_2+3
    jmp b5
  //SEG149 sin16s_gen2::@5
  b5:
  //SEG150 [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 -- vdsz1=vdsz2 
    lda mul16s.return_2
    sta _5
    lda mul16s.return_2+1
    sta _5+1
    lda mul16s.return_2+2
    sta _5+2
    lda mul16s.return_2+3
    sta _5+3
  //SEG151 [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _6
    lda _5+3
    sta _6+1
  //SEG152 [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6 -- vwsz1=vwsc1_plus_vwsz2 
    lda _6
    clc
    adc #<offs
    sta _8
    lda _6+1
    adc #>offs
    sta _8+1
  //SEG153 [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
  //SEG154 [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [87] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>SIN_SIZE
    bcc b1_from_b5
    bne !+
    lda i
    cmp #<SIN_SIZE
    bcc b1_from_b5
  !:
    jmp breturn
  //SEG158 sin16s_gen2::@return
  breturn:
  //SEG159 [89] return 
    rts
}
//SEG160 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($63) a)
mul16s: {
    .label _6 = $75
    .label _16 = $77
    .label m = $13
    .label return = $79
    .label a = $63
    .label return_2 = $65
  //SEG161 [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG162 [91] call mul16u 
  //SEG163 [101] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
  //SEG164 [101] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG165 [101] phi (word) mul16u::b#2 = ((word))(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vwuz1=vwuc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.b
    lda #>sin16s_gen2.ampl
    sta mul16u.b+1
    jsr mul16u
  //SEG166 [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return
    lda mul16u.res+1
    sta mul16u.return+1
    lda mul16u.res+2
    sta mul16u.return+2
    lda mul16u.res+3
    sta mul16u.return+3
    jmp b6
  //SEG167 mul16s::@6
  b6:
  //SEG168 [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda mul16u.return
    sta m
    lda mul16u.return+1
    sta m+1
    lda mul16u.return+2
    sta m+2
    lda mul16u.return+3
    sta m+3
  //SEG169 [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG170 mul16s::@3
  b3:
  //SEG171 [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG172 [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz2_minus_vwuc1 
    lda _6
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _6+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
  //SEG173 [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG174 [98] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG175 [98] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
    jmp b1
  //SEG176 mul16s::@1
  b1:
    jmp b2
  //SEG177 mul16s::@2
  b2:
  //SEG178 [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz2 
    lda m
    sta return
    lda m+1
    sta return+1
    lda m+2
    sta return+2
    lda m+3
    sta return+3
    jmp breturn
  //SEG179 mul16s::@return
  breturn:
  //SEG180 [100] return 
    rts
}
//SEG181 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($19) a, word zeropage($17) b)
mul16u: {
    .label _1 = $7d
    .label mb = $1f
    .label a = $19
    .label res = $1b
    .label return = $71
    .label b = $17
    .label return_3 = $9e
  //SEG182 [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG183 [103] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG184 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG185 [103] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG186 [103] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG187 mul16u::@1
  b1:
  //SEG188 [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG189 mul16u::@return
  breturn:
  //SEG190 [105] return 
    rts
  //SEG191 mul16u::@2
  b2:
  //SEG192 [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda a
    and #1
    sta _1
  //SEG193 [107] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG194 mul16u::@7
  b7:
  //SEG195 [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG196 [109] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG197 [109] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG198 mul16u::@4
  b4:
  //SEG199 [110] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG200 [111] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG201 [103] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG202 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG203 [103] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG204 [103] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG205 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($24) x)
sin16s: {
    .label _6 = $7e
    .label x = $24
    .label return = $61
    .label x1 = $82
    .label x2 = $86
    .label x3 = $8a
    .label x3_6 = $8e
    .label usinx = $90
    .label x4 = $94
    .label x5 = $98
    .label x5_128 = $9a
    .label usinx_1 = $9c
    .label return_1 = $28
    .label sinx = $28
    .label isUpper = $23
    .label return_5 = $28
  //SEG206 [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG207 sin16s::@4
  b4:
  //SEG208 [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG209 [114] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG210 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG211 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG212 [114] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG213 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG214 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG215 sin16s::@1
  b1:
  //SEG216 [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG217 sin16s::@5
  b5:
  //SEG218 [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG219 [117] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG220 [117] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG221 sin16s::@2
  b2:
  //SEG222 [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz2_rol_3 
    lda x
    sta _6
    lda x+1
    sta _6+1
    lda x+2
    sta _6+2
    lda x+3
    sta _6+3
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG223 [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG224 [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG225 [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG226 [122] call mulu16_sel 
  //SEG227 [152] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG228 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG229 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG230 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG231 [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return+1
    jmp b8
  //SEG232 sin16s::@8
  b8:
  //SEG233 [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG234 [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 -- vwuz1=vwuz2 
    lda x2
    sta mulu16_sel.v1
    lda x2+1
    sta mulu16_sel.v1+1
  //SEG235 [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG236 [127] call mulu16_sel 
  //SEG237 [152] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG238 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG239 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG240 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG241 [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_1
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_1+1
    jmp b9
  //SEG242 sin16s::@9
  b9:
  //SEG243 [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 -- vwuz1=vwuz2 
    lda mulu16_sel.return_1
    sta x3
    lda mulu16_sel.return_1+1
    sta x3+1
  //SEG244 [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG245 [131] call mulu16_sel 
  //SEG246 [152] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG247 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG248 [152] phi (word) mulu16_sel::v2#5 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG249 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG250 [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_2
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_2+1
    jmp b10
  //SEG251 sin16s::@10
  b10:
  //SEG252 [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 -- vwuz1=vwuz2 
    lda mulu16_sel.return_2
    sta x3_6
    lda mulu16_sel.return_2+1
    sta x3_6+1
  //SEG253 [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG254 [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG255 [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG256 [137] call mulu16_sel 
  //SEG257 [152] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG258 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG259 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG260 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG261 [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_10
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_10+1
    jmp b11
  //SEG262 sin16s::@11
  b11:
  //SEG263 [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 -- vwuz1=vwuz2 
    lda mulu16_sel.return_10
    sta x4
    lda mulu16_sel.return_10+1
    sta x4+1
  //SEG264 [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 -- vwuz1=vwuz2 
    lda x4
    sta mulu16_sel.v1
    lda x4+1
    sta mulu16_sel.v1+1
  //SEG265 [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG266 [142] call mulu16_sel 
  //SEG267 [152] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG268 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG269 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG270 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG271 [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return_12
    sta mulu16_sel.return_11
    lda mulu16_sel.return_12+1
    sta mulu16_sel.return_11+1
    jmp b12
  //SEG272 sin16s::@12
  b12:
  //SEG273 [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 -- vwuz1=vwuz2 
    lda mulu16_sel.return_11
    sta x5
    lda mulu16_sel.return_11+1
    sta x5+1
  //SEG274 [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz2_ror_4 
    lda x5+1
    sta x5_128+1
    lda x5
    sta x5_128
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG275 [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
    lda usinx+1
    adc x5_128+1
    sta usinx_1+1
  //SEG276 [147] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG277 sin16s::@6
  b6:
  //SEG278 [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda usinx_1
    eor #$ff
    adc #0
    sta sinx
    lda usinx_1+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG279 [149] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG280 [149] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG281 sin16s::@3
  b3:
    jmp breturn
  //SEG282 sin16s::@return
  breturn:
  //SEG283 [150] return 
    rts
  //SEG284 sin16s::@15
  b15:
  //SEG285 [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 -- vwsz1=vwsz2 
    lda usinx_1
    sta return_5
    lda usinx_1+1
    sta return_5+1
    jmp b3_from_b15
}
//SEG286 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($2a) v1, word zeropage($2c) v2, byte zeropage($2e) select)
mulu16_sel: {
    .label _0 = $a2
    .label _1 = $a6
    .label v1 = $2a
    .label v2 = $2c
    .label return = $84
    .label return_1 = $88
    .label return_2 = $8c
    .label return_10 = $92
    .label return_11 = $96
    .label select = $2e
    .label return_12 = $aa
  //SEG287 [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG288 [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 -- vwuz1=vwuz2 
    lda v2
    sta mul16u.b
    lda v2+1
    sta mul16u.b+1
  //SEG289 [155] call mul16u 
  //SEG290 [101] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
  //SEG291 [101] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
  //SEG292 [101] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG293 [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return_3
    lda mul16u.res+1
    sta mul16u.return_3+1
    lda mul16u.res+2
    sta mul16u.return_3+2
    lda mul16u.res+3
    sta mul16u.return_3+3
    jmp b2
  //SEG294 mulu16_sel::@2
  b2:
  //SEG295 [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 -- vduz1=vduz2 
    lda mul16u.return_3
    sta _0
    lda mul16u.return_3+1
    sta _0+1
    lda mul16u.return_3+2
    sta _0+2
    lda mul16u.return_3+3
    sta _0+3
  //SEG296 [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    lda _0+2
    sta _1+2
    lda _0+3
    sta _1+3
    ldx select
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG297 [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_12
    lda _1+3
    sta return_12+1
    jmp breturn
  //SEG298 mulu16_sel::@return
  breturn:
  //SEG299 [160] return 
    rts
}
//SEG300 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $ae
    .label quotient_lo = $b2
    .label return = $b4
    .label return_2 = $59
  //SEG301 [162] call divr16u 
  //SEG302 [171] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG303 [171] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG304 [171] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG305 [163] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b2
  //SEG306 div32u16u::@2
  b2:
  //SEG307 [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta quotient_hi
    lda divr16u.return_2+1
    sta quotient_hi+1
  //SEG308 [165] (word) divr16u::rem#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta divr16u.rem
    lda rem16u+1
    sta divr16u.rem+1
  //SEG309 [166] call divr16u 
  //SEG310 [171] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  divr16u_from_b2:
  //SEG311 [171] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG312 [171] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG313 [167] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b3
  //SEG314 div32u16u::@3
  b3:
  //SEG315 [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta quotient_lo
    lda divr16u.return_3+1
    sta quotient_lo+1
  //SEG316 [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG317 div32u16u::@return
  breturn:
  //SEG318 [170] return 
    rts
}
//SEG319 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($31) dividend, word zeropage($2f) rem)
divr16u: {
    .label _1 = $b8
    .label _2 = $b9
    .label rem = $2f
    .label dividend = $31
    .label quotient = $33
    .label i = $35
    .label return = $33
    .label return_2 = $ac
    .label return_3 = $b0
  //SEG320 [172] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG321 [172] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG322 [172] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG323 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG324 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG325 [172] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG326 [172] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG327 [172] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG328 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG329 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG330 divr16u::@1
  b1:
  //SEG331 [173] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG332 [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG333 [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG334 [176] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG335 divr16u::@4
  b4:
  //SEG336 [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG337 [178] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG338 [178] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG339 divr16u::@2
  b2:
  //SEG340 [179] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG341 [180] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG342 [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>SIN_SIZE
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<SIN_SIZE
    bcc b3_from_b2
  !:
    jmp b5
  //SEG343 divr16u::@5
  b5:
  //SEG344 [182] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG345 [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<SIN_SIZE
    sta rem
    lda rem+1
    sbc #>SIN_SIZE
    sta rem+1
  //SEG346 [184] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG347 [184] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG348 [184] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG349 divr16u::@3
  b3:
  //SEG350 [185] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG351 [186] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp b6
  //SEG352 divr16u::@6
  b6:
  //SEG353 [187] (word) rem16u#1 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG354 divr16u::@return
  breturn:
  //SEG355 [188] return 
    rts
}
//SEG356 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $37
    .label x = $39
    .label y = $36
    .label _3 = $bc
  //SEG357 [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo
    sta _3
    lda bitmap_plot_yhi
    sta _3+1
  //SEG358 [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 -- pbuz1=pbuz2 
    lda _3
    sta bitmap
    lda _3+1
    sta bitmap+1
  //SEG359 [191] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG360 [191] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG361 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG362 [191] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG363 [191] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG364 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG365 bitmap_clear::@1
  b1:
  //SEG366 [192] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG367 [192] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG368 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG369 [192] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG370 [192] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG371 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG372 bitmap_clear::@2
  b2:
  //SEG373 [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG374 [194] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG375 [195] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG376 [196] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$c8
    bne b2_from_b2
    jmp b3
  //SEG377 bitmap_clear::@3
  b3:
  //SEG378 [197] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG379 [198] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG380 bitmap_clear::@return
  breturn:
  //SEG381 [199] return 
    rts
}
//SEG382 bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _3 = $be
    .label _4 = $bf
    .label _5 = $c0
    .label _6 = $c1
    .label _7 = $c2
    .label bits = $3a
    .label x = $3b
    .label y = $3c
    .label yoffs = $3d
  //SEG383 [201] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG384 [201] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG385 [201] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b1
  //SEG386 [201] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG387 [201] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG388 [201] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG389 bitmap_init::@1
  b1:
  //SEG390 [202] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda bits
    ldy x
    sta bitmap_plot_bit,y
  //SEG391 [203] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_ror_1 
    lsr bits
  //SEG392 [204] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuz1_neq_0_then_la1 
    lda bits
    cmp #0
    bne b10_from_b1
  //SEG393 [205] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG394 [205] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b2
  //SEG395 bitmap_init::@2
  b2:
  //SEG396 [206] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG397 [207] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda x
    cmp #0
    bne b1_from_b2
  //SEG398 [208] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG399 [208] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG400 [208] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b3
  //SEG401 [208] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG402 [208] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG403 [208] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG404 bitmap_init::@3
  b3:
  //SEG405 [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _3
  //SEG406 [210] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda yoffs
    sta _4
  //SEG407 [211] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 -- vbuz1=vbuz2_bor_vbuz3 
    lda _3
    ora _4
    sta _5
  //SEG408 [212] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _5
    ldy y
    sta bitmap_plot_ylo,y
  //SEG409 [213] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda yoffs+1
    sta _6
  //SEG410 [214] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _6
    ldy y
    sta bitmap_plot_yhi,y
  //SEG411 [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _7
  //SEG412 [216] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda _7
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG413 bitmap_init::@7
  b7:
  //SEG414 [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG415 [218] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG416 [218] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG417 bitmap_init::@4
  b4:
  //SEG418 [219] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG419 [220] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda y
    cmp #0
    bne b3_from_b4
    jmp breturn
  //SEG420 bitmap_init::@return
  breturn:
  //SEG421 [221] return 
    rts
  //SEG422 [222] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG423 bitmap_init::@10
  b10:
  //SEG424 [205] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG425 [205] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG426 fill
// Fill some memory with a value
fill: {
    .const size = $3e8
    .label end = SCREEN+size
    .label addr = $3f
  //SEG427 [224] phi from fill to fill::@1 [phi:fill->fill::@1]
  b1_from_fill:
  //SEG428 [224] phi (byte*) fill::addr#2 = (const byte*) SCREEN#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta addr
    lda #>SCREEN
    sta addr+1
    jmp b1
  //SEG429 [224] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  b1_from_b1:
  //SEG430 [224] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG431 fill::@1
  b1:
  //SEG432 [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (addr),y
  //SEG433 [226] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG434 [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1_from_b1
    lda addr
    cmp #<end
    bne b1_from_b1
    jmp breturn
  //SEG435 fill::@return
  breturn:
  //SEG436 [228] return 
    rts
}
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  .align $100
  sin: .fill 2*$200, 0
.pc = sin2 "sin2"
  .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }


REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:191 [ bitmap_init::$4 ] has ALU potential.
Statement [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$0 ] ) always clobbers reg byte a 
Statement [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$1 ] ) always clobbers reg byte a 
Statement [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1) [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin_val#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin_val#0 ] ) always clobbers reg byte a reg byte y 
Statement [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#0 ] ) always clobbers reg byte a 
Statement [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos#0 bitmap_plot::x#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos#0 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:72 [ render_sine::ypos#0 ]
Statement [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ) always clobbers reg byte a 
Statement [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$5 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$5 ] ) always clobbers reg byte a 
Statement [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5) [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ) always clobbers reg byte a reg byte y 
Statement [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ) always clobbers reg byte a 
Statement [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:80 [ render_sine::ypos2#0 ]
Statement [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ) always clobbers reg byte a 
Statement [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1 [ render_sine::sin_idx#1 render_sine::xpos#8 ] ( main:3::render_sine:23 [ render_sine::sin_idx#1 render_sine::xpos#8 ] ) always clobbers reg byte a 
Statement [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) [ bitmap_plot::x#2 bitmap_plot::$3 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 ] ) always clobbers reg byte a 
Statement [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8 [ bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#2 bitmap_plot::plotter#1 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 ] ) always clobbers reg byte a reg byte y 
Statement [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2 [ wrap_y::y#4 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] ) always clobbers reg byte a 
Statement [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5 [ wrap_y::y#6 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] ) always clobbers reg byte a 
Statement [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6 [ wrap_y::return#2 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] ) always clobbers reg byte a 
Statement [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8 [ wrap_y::y#3 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] ) always clobbers reg byte a 
Statement [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8 [ wrap_y::y#2 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] ) always clobbers reg byte a 
Statement [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:3::sin16s_gen2:21 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 ] ) always clobbers reg byte a 
Statement [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ) always clobbers reg byte a 
Statement [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$6 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$6 ] ) always clobbers reg byte a 
Statement [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ) always clobbers reg byte a 
Statement [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ) always clobbers reg byte a 
Statement [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16u::a#8 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#8 ] ) always clobbers reg byte a 
Statement [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 [ mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::m#0 mul16s::$6 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$6 ] ) always clobbers reg byte a 
Statement [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$16 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::m#1 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 [ mul16s::return#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ sin16s::isUpper#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ mulu16_sel::select#5 ]
Statement [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16s::isUpper#2 sin16s::$6 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::$6 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ sin16s::isUpper#2 ]
Statement [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 [ mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 [ mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [163] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [165] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [167] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:53 [ divr16u::i#2 divr16u::i#1 ]
Statement [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [187] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::return#0 rem16u#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0) [ bitmap_clear::$3 ] ( main:3::bitmap_clear:19 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:3::bitmap_clear:19 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:3::bitmap_clear:19 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:57 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:57 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:60 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) always clobbers reg byte a 
Statement [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0 [ fill::addr#2 ] ( main:3::fill:15 [ fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 [ fill::addr#1 ] ( main:3::fill:15 [ fill::addr#1 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$0 ] ) always clobbers reg byte a 
Statement [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$1 ] ) always clobbers reg byte a 
Statement [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1) [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin_val#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin_val#0 ] ) always clobbers reg byte a reg byte y 
Statement [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#0 ] ) always clobbers reg byte a 
Statement [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos#0 bitmap_plot::x#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos#0 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Statement [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$4 ] ) always clobbers reg byte a 
Statement [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$5 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::$5 ] ) always clobbers reg byte a 
Statement [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5) [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::sin2_val#0 ] ) always clobbers reg byte a reg byte y 
Statement [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#1 ] ) always clobbers reg byte a 
Statement [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#3 render_sine::ypos2#0 bitmap_plot::x#1 ] ) always clobbers reg byte a 
Statement [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ( main:3::render_sine:23 [ render_sine::sin_idx#2 render_sine::xpos#1 ] ) always clobbers reg byte a 
Statement [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1 [ render_sine::sin_idx#1 render_sine::xpos#8 ] ( main:3::render_sine:23 [ render_sine::sin_idx#1 render_sine::xpos#8 ] ) always clobbers reg byte a 
Statement [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) [ bitmap_plot::x#2 bitmap_plot::$3 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 ] ) always clobbers reg byte a 
Statement [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8 [ bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::$3 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 [ bitmap_plot::x#2 bitmap_plot::plotter#1 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::x#2 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:3::render_sine:23::bitmap_plot:36 [ render_sine::sin_idx#2 render_sine::xpos#3 ] main:3::render_sine:23::bitmap_plot:46 [ render_sine::sin_idx#2 render_sine::xpos#3 ] ) always clobbers reg byte a reg byte y 
Statement [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2 [ wrap_y::y#4 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#4 ] ) always clobbers reg byte a 
Statement [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5 [ wrap_y::y#6 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#6 ] ) always clobbers reg byte a 
Statement [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6 [ wrap_y::return#2 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::return#2 ] ) always clobbers reg byte a 
Statement [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8 [ wrap_y::y#3 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#3 ] ) always clobbers reg byte a 
Statement [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8 [ wrap_y::y#2 ] ( main:3::render_sine:23::wrap_y:31 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] main:3::render_sine:23::wrap_y:41 [ render_sine::sin_idx#2 render_sine::xpos#3 wrap_y::y#2 ] ) always clobbers reg byte a 
Statement [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:3::sin16s_gen2:21 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 ] ) always clobbers reg byte a 
Statement [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 ] ) always clobbers reg byte a 
Statement [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#2 ] ) always clobbers reg byte a 
Statement [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$5 ] ) always clobbers reg byte a 
Statement [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$6 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$6 ] ) always clobbers reg byte a 
Statement [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s_gen2::$8 ] ) always clobbers reg byte a 
Statement [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::i#2 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ) always clobbers reg byte a 
Statement [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ( main:3::sin16s_gen2:21 [ sin16s_gen2::step#0 sin16s_gen2::x#1 sin16s_gen2::sintab#0 sin16s_gen2::i#1 ] ) always clobbers reg byte a 
Statement [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16u::a#8 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#8 ] ) always clobbers reg byte a 
Statement [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16u::return#2 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 [ mul16s::m#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 ] ) always clobbers reg byte a 
Statement [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::m#0 mul16s::$6 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$6 ] ) always clobbers reg byte a 
Statement [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0 [ mul16s::m#0 mul16s::$16 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#0 mul16s::$16 ] ) always clobbers reg byte a 
Statement [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 [ mul16s::m#1 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::m#1 ] ) always clobbers reg byte a 
Statement [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 [ mul16s::return#0 ] ( main:3::sin16s_gen2:21::mul16s:79 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::return#0 ] ) always clobbers reg byte a 
Statement [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] ) always clobbers reg byte a 
Statement [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::sin16s_gen2:21::mul16s:79::mul16u:91 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 mul16s::a#0 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142::mul16u:155 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16s::isUpper#2 sin16s::$6 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::$6 ] ) always clobbers reg byte a reg byte y 
Statement [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ) always clobbers reg byte a 
Statement [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ) always clobbers reg byte a 
Statement [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ) always clobbers reg byte a 
Statement [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ) always clobbers reg byte a 
Statement [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ) always clobbers reg byte a 
Statement [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ) always clobbers reg byte a 
Statement [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ) always clobbers reg byte a 
Statement [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ) always clobbers reg byte a 
Statement [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ) always clobbers reg byte a 
Statement [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ) always clobbers reg byte a 
Statement [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:21::sin16s:76 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 [ mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#2 mulu16_sel::v2#5 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5 [ mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#1 mul16u::a#2 mulu16_sel::select#5 ] ) always clobbers reg byte a 
Statement [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#3 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#3 ] ) always clobbers reg byte a 
Statement [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:122 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:127 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:131 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:137 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] main:3::sin16s_gen2:21::sin16s:76::mulu16_sel:142 [ sin16s_gen2::step#0 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] ) always clobbers reg byte a 
Statement [163] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [165] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [167] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:21::div32u16u:71 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [187] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:3::sin16s_gen2:21::div32u16u:71::divr16u:162 [ divr16u::return#0 rem16u#1 ] main:3::sin16s_gen2:21::div32u16u:71::divr16u:166 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0) [ bitmap_clear::$3 ] ( main:3::bitmap_clear:19 [ bitmap_clear::$3 ] ) always clobbers reg byte a 
Statement [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3 [ bitmap_clear::bitmap#5 ] ( main:3::bitmap_clear:19 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:3::bitmap_clear:19 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$3 ] ) always clobbers reg byte a 
Statement [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) always clobbers reg byte a 
Statement [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:3::bitmap_init:17 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0 [ fill::addr#2 ] ( main:3::fill:15 [ fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 [ fill::addr#1 ] ( main:3::fill:15 [ fill::addr#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_DWORD:11 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] : zp ZP_DWORD:11 , 
Potential registers zp ZP_WORD:15 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] : zp ZP_DWORD:19 , 
Potential registers zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp ZP_DWORD:27 , 
Potential registers zp ZP_DWORD:31 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp ZP_DWORD:31 , 
Potential registers zp ZP_BYTE:35 [ sin16s::isUpper#2 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp ZP_DWORD:36 , 
Potential registers zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ mulu16_sel::select#5 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_WORD:49 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] : zp ZP_WORD:49 , 
Potential registers zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_BYTE:53 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:53 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp ZP_BYTE:54 , reg byte x , 
Potential registers zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_BYTE:57 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp ZP_BYTE:57 , reg byte x , 
Potential registers zp ZP_BYTE:58 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp ZP_BYTE:60 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:61 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_WORD:63 [ fill::addr#2 fill::addr#1 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_WORD:65 [ render_sine::$0 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ render_sine::$1 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_WORD:69 [ render_sine::sin_val#0 ] : zp ZP_WORD:69 , 
Potential registers zp ZP_BYTE:71 [ wrap_y::return#0 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ render_sine::ypos#0 ] : zp ZP_BYTE:72 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:73 [ render_sine::$4 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_WORD:75 [ render_sine::$5 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ render_sine::sin2_val#0 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_BYTE:79 [ wrap_y::return#1 ] : zp ZP_BYTE:79 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:80 [ render_sine::ypos2#0 ] : zp ZP_BYTE:80 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:81 [ bitmap_plot::$3 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_WORD:83 [ bitmap_plot::$1 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_WORD:85 [ bitmap_plot::plotter#1 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_BYTE:87 [ bitmap_plot::$2 ] : zp ZP_BYTE:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:88 [ wrap_y::return#2 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:89 [ div32u16u::return#2 ] : zp ZP_DWORD:89 , 
Potential registers zp ZP_DWORD:93 [ sin16s_gen2::step#0 ] : zp ZP_DWORD:93 , 
Potential registers zp ZP_WORD:97 [ sin16s::return#0 ] : zp ZP_WORD:97 , 
Potential registers zp ZP_WORD:99 [ mul16s::a#0 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_DWORD:101 [ mul16s::return#2 ] : zp ZP_DWORD:101 , 
Potential registers zp ZP_DWORD:105 [ sin16s_gen2::$5 ] : zp ZP_DWORD:105 , 
Potential registers zp ZP_WORD:109 [ sin16s_gen2::$6 ] : zp ZP_WORD:109 , 
Potential registers zp ZP_WORD:111 [ sin16s_gen2::$8 ] : zp ZP_WORD:111 , 
Potential registers zp ZP_DWORD:113 [ mul16u::return#2 ] : zp ZP_DWORD:113 , 
Potential registers zp ZP_WORD:117 [ mul16s::$6 ] : zp ZP_WORD:117 , 
Potential registers zp ZP_WORD:119 [ mul16s::$16 ] : zp ZP_WORD:119 , 
Potential registers zp ZP_DWORD:121 [ mul16s::return#0 ] : zp ZP_DWORD:121 , 
Potential registers zp ZP_BYTE:125 [ mul16u::$1 ] : zp ZP_BYTE:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:126 [ sin16s::$6 ] : zp ZP_DWORD:126 , 
Potential registers zp ZP_WORD:130 [ sin16s::x1#0 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_WORD:132 [ mulu16_sel::return#0 ] : zp ZP_WORD:132 , 
Potential registers zp ZP_WORD:134 [ sin16s::x2#0 ] : zp ZP_WORD:134 , 
Potential registers zp ZP_WORD:136 [ mulu16_sel::return#1 ] : zp ZP_WORD:136 , 
Potential registers zp ZP_WORD:138 [ sin16s::x3#0 ] : zp ZP_WORD:138 , 
Potential registers zp ZP_WORD:140 [ mulu16_sel::return#2 ] : zp ZP_WORD:140 , 
Potential registers zp ZP_WORD:142 [ sin16s::x3_6#0 ] : zp ZP_WORD:142 , 
Potential registers zp ZP_WORD:144 [ sin16s::usinx#0 ] : zp ZP_WORD:144 , 
Potential registers zp ZP_WORD:146 [ mulu16_sel::return#10 ] : zp ZP_WORD:146 , 
Potential registers zp ZP_WORD:148 [ sin16s::x4#0 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_WORD:150 [ mulu16_sel::return#11 ] : zp ZP_WORD:150 , 
Potential registers zp ZP_WORD:152 [ sin16s::x5#0 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_WORD:154 [ sin16s::x5_128#0 ] : zp ZP_WORD:154 , 
Potential registers zp ZP_WORD:156 [ sin16s::usinx#1 ] : zp ZP_WORD:156 , 
Potential registers zp ZP_DWORD:158 [ mul16u::return#3 ] : zp ZP_DWORD:158 , 
Potential registers zp ZP_DWORD:162 [ mulu16_sel::$0 ] : zp ZP_DWORD:162 , 
Potential registers zp ZP_DWORD:166 [ mulu16_sel::$1 ] : zp ZP_DWORD:166 , 
Potential registers zp ZP_WORD:170 [ mulu16_sel::return#12 ] : zp ZP_WORD:170 , 
Potential registers zp ZP_WORD:172 [ divr16u::return#2 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_WORD:174 [ div32u16u::quotient_hi#0 ] : zp ZP_WORD:174 , 
Potential registers zp ZP_WORD:176 [ divr16u::return#3 ] : zp ZP_WORD:176 , 
Potential registers zp ZP_WORD:178 [ div32u16u::quotient_lo#0 ] : zp ZP_WORD:178 , 
Potential registers zp ZP_DWORD:180 [ div32u16u::return#0 ] : zp ZP_DWORD:180 , 
Potential registers zp ZP_BYTE:184 [ divr16u::$1 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:185 [ divr16u::$2 ] : zp ZP_BYTE:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:186 [ rem16u#1 ] : zp ZP_WORD:186 , 
Potential registers zp ZP_WORD:188 [ bitmap_clear::$3 ] : zp ZP_WORD:188 , 
Potential registers zp ZP_BYTE:190 [ bitmap_init::$3 ] : zp ZP_BYTE:190 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:191 [ bitmap_init::$4 ] : zp ZP_BYTE:191 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:192 [ bitmap_init::$5 ] : zp ZP_BYTE:192 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:193 [ bitmap_init::$6 ] : zp ZP_BYTE:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:194 [ bitmap_init::$7 ] : zp ZP_BYTE:194 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 346.86: zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 249.57: zp ZP_DWORD:31 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 202: zp ZP_BYTE:125 [ mul16u::$1 ] 177.67: zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] 8: zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 ] 4: zp ZP_DWORD:113 [ mul16u::return#2 ] 4: zp ZP_DWORD:158 [ mul16u::return#3 ] 
Uplift Scope [wrap_y] 878: zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] 22: zp ZP_BYTE:71 [ wrap_y::return#0 ] 22: zp ZP_BYTE:79 [ wrap_y::return#1 ] 6: zp ZP_BYTE:88 [ wrap_y::return#2 ] 
Uplift Scope [bitmap_clear] 227.6: zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 218.83: zp ZP_BYTE:57 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 20.17: zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 2: zp ZP_WORD:188 [ bitmap_clear::$3 ] 
Uplift Scope [divr16u] 106.92: zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 35.54: zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:184 [ divr16u::$1 ] 22: zp ZP_BYTE:185 [ divr16u::$2 ] 18.19: zp ZP_BYTE:53 [ divr16u::i#2 divr16u::i#1 ] 9.75: zp ZP_WORD:49 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] 4: zp ZP_WORD:172 [ divr16u::return#2 ] 4: zp ZP_WORD:176 [ divr16u::return#3 ] 
Uplift Scope [bitmap_init] 39.11: zp ZP_WORD:61 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 34.83: zp ZP_BYTE:58 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 22.5: zp ZP_BYTE:60 [ bitmap_init::y#2 bitmap_init::y#1 ] 22: zp ZP_BYTE:59 [ bitmap_init::x#2 bitmap_init::x#1 ] 22: zp ZP_BYTE:191 [ bitmap_init::$4 ] 22: zp ZP_BYTE:192 [ bitmap_init::$5 ] 22: zp ZP_BYTE:193 [ bitmap_init::$6 ] 22: zp ZP_BYTE:194 [ bitmap_init::$7 ] 11: zp ZP_BYTE:190 [ bitmap_init::$3 ] 
Uplift Scope [render_sine] 22: zp ZP_WORD:65 [ render_sine::$0 ] 22: zp ZP_WORD:67 [ render_sine::$1 ] 22: zp ZP_WORD:69 [ render_sine::sin_val#0 ] 22: zp ZP_WORD:73 [ render_sine::$4 ] 22: zp ZP_WORD:75 [ render_sine::$5 ] 22: zp ZP_WORD:77 [ render_sine::sin2_val#0 ] 20.43: zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ] 18.26: zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] 11: zp ZP_BYTE:72 [ render_sine::ypos#0 ] 11: zp ZP_BYTE:80 [ render_sine::ypos2#0 ] 
Uplift Scope [bitmap_plot] 70: zp ZP_BYTE:6 [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] 28.5: zp ZP_WORD:7 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] 4: zp ZP_WORD:83 [ bitmap_plot::$1 ] 4: zp ZP_BYTE:87 [ bitmap_plot::$2 ] 3: zp ZP_WORD:85 [ bitmap_plot::plotter#1 ] 1: zp ZP_WORD:81 [ bitmap_plot::$3 ] 
Uplift Scope [sin16s_gen2] 22: zp ZP_DWORD:105 [ sin16s_gen2::$5 ] 22: zp ZP_WORD:111 [ sin16s_gen2::$8 ] 18.19: zp ZP_WORD:17 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] 11: zp ZP_WORD:109 [ sin16s_gen2::$6 ] 10.08: zp ZP_DWORD:11 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] 8.5: zp ZP_WORD:15 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] 0.81: zp ZP_DWORD:93 [ sin16s_gen2::step#0 ] 
Uplift Scope [sin16s] 27.5: zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 22: zp ZP_WORD:97 [ sin16s::return#0 ] 13: zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 4: zp ZP_DWORD:126 [ sin16s::$6 ] 4: zp ZP_WORD:134 [ sin16s::x2#0 ] 4: zp ZP_WORD:142 [ sin16s::x3_6#0 ] 4: zp ZP_WORD:148 [ sin16s::x4#0 ] 4: zp ZP_WORD:152 [ sin16s::x5#0 ] 4: zp ZP_WORD:154 [ sin16s::x5_128#0 ] 1: zp ZP_WORD:138 [ sin16s::x3#0 ] 1: zp ZP_WORD:156 [ sin16s::usinx#1 ] 0.64: zp ZP_WORD:130 [ sin16s::x1#0 ] 0.33: zp ZP_WORD:144 [ sin16s::usinx#0 ] 0.06: zp ZP_BYTE:35 [ sin16s::isUpper#2 ] 
Uplift Scope [mulu16_sel] 24: zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] 21: zp ZP_WORD:44 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] 4: zp ZP_WORD:132 [ mulu16_sel::return#0 ] 4: zp ZP_WORD:136 [ mulu16_sel::return#1 ] 4: zp ZP_WORD:140 [ mulu16_sel::return#2 ] 4: zp ZP_WORD:146 [ mulu16_sel::return#10 ] 4: zp ZP_WORD:150 [ mulu16_sel::return#11 ] 4: zp ZP_DWORD:162 [ mulu16_sel::$0 ] 4: zp ZP_DWORD:166 [ mulu16_sel::$1 ] 1.71: zp ZP_WORD:170 [ mulu16_sel::return#12 ] 0.33: zp ZP_BYTE:46 [ mulu16_sel::select#5 ] 
Uplift Scope [mul16s] 22: zp ZP_DWORD:101 [ mul16s::return#2 ] 12: zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] 4.33: zp ZP_DWORD:121 [ mul16s::return#0 ] 4: zp ZP_WORD:117 [ mul16s::$6 ] 4: zp ZP_WORD:119 [ mul16s::$16 ] 2.6: zp ZP_WORD:99 [ mul16s::a#0 ] 
Uplift Scope [fill] 33: zp ZP_WORD:63 [ fill::addr#2 fill::addr#1 ] 
Uplift Scope [div32u16u] 4: zp ZP_DWORD:89 [ div32u16u::return#2 ] 4: zp ZP_WORD:178 [ div32u16u::quotient_lo#0 ] 1.33: zp ZP_DWORD:180 [ div32u16u::return#0 ] 0.8: zp ZP_WORD:174 [ div32u16u::quotient_hi#0 ] 
Uplift Scope [] 0.8: zp ZP_WORD:186 [ rem16u#1 ] 
Uplift Scope [main] 

Uplifting [mul16u] best 36944 combination zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp ZP_DWORD:31 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 ] zp ZP_DWORD:113 [ mul16u::return#2 ] zp ZP_DWORD:158 [ mul16u::return#3 ] 
Uplifting [wrap_y] best 36761 combination zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] reg byte a [ wrap_y::return#0 ] reg byte a [ wrap_y::return#1 ] reg byte a [ wrap_y::return#2 ] 
Uplifting [bitmap_clear] best 35861 combination zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp ZP_WORD:188 [ bitmap_clear::$3 ] 
Uplifting [divr16u] best 35651 combination zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:49 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] zp ZP_WORD:172 [ divr16u::return#2 ] zp ZP_WORD:176 [ divr16u::return#3 ] 
Uplifting [bitmap_init] best 35151 combination zp ZP_WORD:61 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte a [ bitmap_init::$4 ] zp ZP_BYTE:192 [ bitmap_init::$5 ] zp ZP_BYTE:193 [ bitmap_init::$6 ] zp ZP_BYTE:194 [ bitmap_init::$7 ] zp ZP_BYTE:190 [ bitmap_init::$3 ] 
Limited combination testing to 100 combinations of 61440 possible.
Uplifting [render_sine] best 35071 combination zp ZP_WORD:65 [ render_sine::$0 ] zp ZP_WORD:67 [ render_sine::$1 ] zp ZP_WORD:69 [ render_sine::sin_val#0 ] zp ZP_WORD:73 [ render_sine::$4 ] zp ZP_WORD:75 [ render_sine::$5 ] zp ZP_WORD:77 [ render_sine::sin2_val#0 ] zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ] zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] reg byte x [ render_sine::ypos#0 ] reg byte x [ render_sine::ypos2#0 ] 
Uplifting [bitmap_plot] best 35004 combination reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ] zp ZP_WORD:7 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] zp ZP_WORD:83 [ bitmap_plot::$1 ] reg byte a [ bitmap_plot::$2 ] zp ZP_WORD:85 [ bitmap_plot::plotter#1 ] zp ZP_WORD:81 [ bitmap_plot::$3 ] 
Uplifting [sin16s_gen2] best 35004 combination zp ZP_DWORD:105 [ sin16s_gen2::$5 ] zp ZP_WORD:111 [ sin16s_gen2::$8 ] zp ZP_WORD:17 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] zp ZP_WORD:109 [ sin16s_gen2::$6 ] zp ZP_DWORD:11 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] zp ZP_WORD:15 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] zp ZP_DWORD:93 [ sin16s_gen2::step#0 ] 
Uplifting [sin16s] best 35004 combination zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp ZP_WORD:97 [ sin16s::return#0 ] zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp ZP_DWORD:126 [ sin16s::$6 ] zp ZP_WORD:134 [ sin16s::x2#0 ] zp ZP_WORD:142 [ sin16s::x3_6#0 ] zp ZP_WORD:148 [ sin16s::x4#0 ] zp ZP_WORD:152 [ sin16s::x5#0 ] zp ZP_WORD:154 [ sin16s::x5_128#0 ] zp ZP_WORD:138 [ sin16s::x3#0 ] zp ZP_WORD:156 [ sin16s::usinx#1 ] zp ZP_WORD:130 [ sin16s::x1#0 ] zp ZP_WORD:144 [ sin16s::usinx#0 ] zp ZP_BYTE:35 [ sin16s::isUpper#2 ] 
Uplifting [mulu16_sel] best 34988 combination zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] zp ZP_WORD:44 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] zp ZP_WORD:132 [ mulu16_sel::return#0 ] zp ZP_WORD:136 [ mulu16_sel::return#1 ] zp ZP_WORD:140 [ mulu16_sel::return#2 ] zp ZP_WORD:146 [ mulu16_sel::return#10 ] zp ZP_WORD:150 [ mulu16_sel::return#11 ] zp ZP_DWORD:162 [ mulu16_sel::$0 ] zp ZP_DWORD:166 [ mulu16_sel::$1 ] zp ZP_WORD:170 [ mulu16_sel::return#12 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [mul16s] best 34988 combination zp ZP_DWORD:101 [ mul16s::return#2 ] zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] zp ZP_DWORD:121 [ mul16s::return#0 ] zp ZP_WORD:117 [ mul16s::$6 ] zp ZP_WORD:119 [ mul16s::$16 ] zp ZP_WORD:99 [ mul16s::a#0 ] 
Uplifting [fill] best 34988 combination zp ZP_WORD:63 [ fill::addr#2 fill::addr#1 ] 
Uplifting [div32u16u] best 34988 combination zp ZP_DWORD:89 [ div32u16u::return#2 ] zp ZP_WORD:178 [ div32u16u::quotient_lo#0 ] zp ZP_DWORD:180 [ div32u16u::return#0 ] zp ZP_WORD:174 [ div32u16u::quotient_hi#0 ] 
Uplifting [] best 34988 combination zp ZP_WORD:186 [ rem16u#1 ] 
Uplifting [main] best 34988 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:192 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 34928 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:193 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 34868 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:194 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 34808 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 34808 combination zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:190 [ bitmap_init::$3 ]
Uplifting [bitmap_init] best 34808 combination zp ZP_BYTE:190 [ bitmap_init::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ sin16s::isUpper#2 ]
Uplifting [sin16s] best 34808 combination zp ZP_BYTE:35 [ sin16s::isUpper#2 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 ] ] with [ zp ZP_WORD:7 [ bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp ZP_WORD:156 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 ] ] with [ zp ZP_WORD:138 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:186 [ rem16u#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 ] ] with [ zp ZP_WORD:69 [ render_sine::sin_val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 ] ] with [ zp ZP_WORD:77 [ render_sine::sin2_val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 ] ] with [ zp ZP_DWORD:113 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 ] ] with [ zp ZP_DWORD:121 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 ] ] with [ zp ZP_WORD:44 [ mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp ZP_DWORD:158 [ mul16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] ] with [ zp ZP_DWORD:126 [ sin16s::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp ZP_WORD:97 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 ] ] with [ zp ZP_WORD:134 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp ZP_WORD:148 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:172 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:176 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp ZP_WORD:188 [ bitmap_clear::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ render_sine::$0 ] ] with [ zp ZP_WORD:67 [ render_sine::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:73 [ render_sine::$4 ] ] with [ zp ZP_WORD:75 [ render_sine::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:81 [ bitmap_plot::$3 ] ] with [ zp ZP_WORD:85 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:89 [ div32u16u::return#2 ] ] with [ zp ZP_DWORD:93 [ sin16s_gen2::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:89 [ div32u16u::return#2 sin16s_gen2::step#0 ] ] with [ zp ZP_DWORD:180 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:101 [ mul16s::return#2 ] ] with [ zp ZP_DWORD:105 [ sin16s_gen2::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:109 [ sin16s_gen2::$6 ] ] with [ zp ZP_WORD:111 [ sin16s_gen2::$8 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:117 [ mul16s::$6 ] ] with [ zp ZP_WORD:119 [ mul16s::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:132 [ mulu16_sel::return#0 ] ] with [ zp ZP_WORD:170 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:140 [ mulu16_sel::return#2 ] ] with [ zp ZP_WORD:142 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:150 [ mulu16_sel::return#11 ] ] with [ zp ZP_WORD:152 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:162 [ mulu16_sel::$0 ] ] with [ zp ZP_DWORD:166 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 ] ] with [ zp ZP_WORD:65 [ render_sine::$0 render_sine::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 ] ] with [ zp ZP_WORD:73 [ render_sine::$4 render_sine::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 ] ] with [ zp ZP_DWORD:27 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 ] ] with [ zp ZP_DWORD:101 [ mul16s::return#2 sin16s_gen2::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp ZP_WORD:99 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:40 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 ] ] with [ zp ZP_WORD:144 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp ZP_WORD:136 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:42 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp ZP_WORD:146 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp ZP_WORD:178 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:132 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp ZP_WORD:140 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:132 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp ZP_WORD:150 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 ] ] with [ zp ZP_DWORD:162 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:132 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp ZP_WORD:154 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 ] ] with [ zp ZP_WORD:15 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ] with [ zp ZP_WORD:47 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ] ] with [ zp ZP_WORD:55 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 ] ] with [ zp ZP_WORD:61 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp ZP_WORD:63 [ fill::addr#2 fill::addr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 ] ] with [ zp ZP_WORD:17 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ] ] with [ zp ZP_WORD:49 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 ] ] with [ zp ZP_WORD:23 [ mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 ] ] with [ zp ZP_WORD:51 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ] with [ zp ZP_WORD:81 [ bitmap_plot::$3 bitmap_plot::plotter#1 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 bitmap_plot::$3 bitmap_plot::plotter#1 ] ] with [ zp ZP_WORD:109 [ sin16s_gen2::$6 sin16s_gen2::$8 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 bitmap_plot::$3 bitmap_plot::plotter#1 sin16s_gen2::$6 sin16s_gen2::$8 ] ] with [ zp ZP_WORD:117 [ mul16s::$6 mul16s::$16 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 bitmap_plot::$3 bitmap_plot::plotter#1 sin16s_gen2::$6 sin16s_gen2::$8 mul16s::$6 mul16s::$16 ] ] with [ zp ZP_WORD:132 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ]
Coalescing zero page register [ zp ZP_DWORD:19 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 ] ] with [ zp ZP_DWORD:36 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ] ]
Coalescing zero page register [ zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 ] ] with [ zp ZP_WORD:83 [ bitmap_plot::$1 ] ]
Coalescing zero page register [ zp ZP_WORD:25 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 bitmap_plot::$1 ] ] with [ zp ZP_WORD:174 [ div32u16u::quotient_hi#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:35 [ sin16s::isUpper#2 ] ] with [ zp ZP_BYTE:54 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:35 [ sin16s::isUpper#2 bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp ZP_BYTE:190 [ bitmap_init::$3 ] ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:6 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 bitmap_plot::$3 bitmap_plot::plotter#1 sin16s_gen2::$6 sin16s_gen2::$8 mul16s::$6 mul16s::$16 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
Allocated (was zp ZP_DWORD:11) zp ZP_DWORD:8 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated (was zp ZP_DWORD:19) zp ZP_DWORD:12 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ]
Allocated (was zp ZP_WORD:25) zp ZP_WORD:16 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 bitmap_plot::$1 div32u16u::quotient_hi#0 ]
Allocated (was zp ZP_DWORD:31) zp ZP_DWORD:18 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp ZP_BYTE:35) zp ZP_BYTE:22 [ sin16s::isUpper#2 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_init::$3 ]
Allocated (was zp ZP_WORD:40) zp ZP_WORD:23 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
Allocated (was zp ZP_WORD:42) zp ZP_WORD:25 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
Allocated (was zp ZP_DWORD:89) zp ZP_DWORD:27 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
Allocated (was zp ZP_WORD:130) zp ZP_WORD:31 [ sin16s::x1#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Generate a big sinus and plot it on a bitmap
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label BGCOL = $d021
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D016 = $d016
  .const VIC_CSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label BITMAP = $2000
  .const SIN_SIZE = $200
  .label sin2 = $1400
  .label rem16u = 2
//SEG3 @begin
bbegin:
  jmp b29
//SEG4 @29
b29:
//SEG5 kickasm(location (const signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {   	  .word sin(toRadians([i*360]/512))*320     }  }}
//SEG6 [2] phi from @29 to @32 [phi:@29->@32]
b32_from_b29:
  jmp b32
//SEG7 @32
b32:
//SEG8 [3] call main 
  jsr main
//SEG9 [4] phi from @32 to @end [phi:@32->@end]
bend_from_b32:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG14 [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG15 [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    jmp vicSelectGfxBank1
  //SEG16 main::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG17 [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG18 [10] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG19 main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG20 main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG21 [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b7
  //SEG22 main::@7
  b7:
  //SEG23 [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta D016
  //SEG24 [13] phi from main::@7 to main::toD0181 [phi:main::@7->main::toD0181]
  toD0181_from_b7:
    jmp toD0181
  //SEG25 main::toD0181
  toD0181:
    jmp b8
  //SEG26 main::@8
  b8:
  //SEG27 [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG28 [15] call fill 
  //SEG29 [223] phi from main::@8 to fill [phi:main::@8->fill]
  fill_from_b8:
    jsr fill
  //SEG30 [16] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG31 main::@9
  b9:
  //SEG32 [17] call bitmap_init 
  //SEG33 [200] phi from main::@9 to bitmap_init [phi:main::@9->bitmap_init]
  bitmap_init_from_b9:
    jsr bitmap_init
  //SEG34 [18] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG35 main::@10
  b10:
  //SEG36 [19] call bitmap_clear 
    jsr bitmap_clear
  //SEG37 [20] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG38 main::@11
  b11:
  //SEG39 [21] call sin16s_gen2 
  //SEG40 [70] phi from main::@11 to sin16s_gen2 [phi:main::@11->sin16s_gen2]
  sin16s_gen2_from_b11:
    jsr sin16s_gen2
  //SEG41 [22] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG42 main::@12
  b12:
  //SEG43 [23] call render_sine 
  //SEG44 [25] phi from main::@12 to render_sine [phi:main::@12->render_sine]
  render_sine_from_b12:
    jsr render_sine
    jmp b2
  //SEG45 main::@2
  b2:
  //SEG46 [24] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp b2
}
//SEG47 render_sine
render_sine: {
    .label _0 = 6
    .label _1 = 6
    .label _4 = 6
    .label _5 = 6
    .label sin_val = 6
    .label sin2_val = 6
    .label xpos = 4
    .label sin_idx = 2
  //SEG48 [26] phi from render_sine to render_sine::@1 [phi:render_sine->render_sine::@1]
  b1_from_render_sine:
  //SEG49 [26] phi (word) render_sine::xpos#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    lda #0
    sta xpos+1
  //SEG50 [26] phi (word) render_sine::sin_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta sin_idx
    lda #0
    sta sin_idx+1
    jmp b1
  //SEG51 [26] phi from render_sine::@2 to render_sine::@1 [phi:render_sine::@2->render_sine::@1]
  b1_from_b2:
  //SEG52 [26] phi (word) render_sine::xpos#3 = (word) render_sine::xpos#8 [phi:render_sine::@2->render_sine::@1#0] -- register_copy 
  //SEG53 [26] phi (word) render_sine::sin_idx#2 = (word) render_sine::sin_idx#1 [phi:render_sine::@2->render_sine::@1#1] -- register_copy 
    jmp b1
  //SEG54 render_sine::@1
  b1:
  //SEG55 [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _0
    lda sin_idx+1
    rol
    sta _0+1
  //SEG56 [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _1
    adc #<sin
    sta _1
    lda _1+1
    adc #>sin
    sta _1+1
  //SEG57 [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_val),y
    tax
    iny
    lda (sin_val),y
    stx sin_val
    sta sin_val+1
  //SEG58 [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  //SEG59 [31] call wrap_y 
  //SEG60 [61] phi from render_sine::@1 to wrap_y [phi:render_sine::@1->wrap_y]
  wrap_y_from_b1:
  //SEG61 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#0 [phi:render_sine::@1->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG62 [32] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2
    jmp b5
  //SEG63 render_sine::@5
  b5:
  //SEG64 [33] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0 -- vbuxx=vbuaa 
    tax
  //SEG65 [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  //SEG66 [35] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  //SEG67 [36] call bitmap_plot 
  //SEG68 [54] phi from render_sine::@5 to bitmap_plot [phi:render_sine::@5->bitmap_plot]
  bitmap_plot_from_b5:
  //SEG69 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#0 [phi:render_sine::@5->bitmap_plot#0] -- register_copy 
  //SEG70 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#0 [phi:render_sine::@5->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b6
  //SEG71 render_sine::@6
  b6:
  //SEG72 [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _4
    lda sin_idx+1
    rol
    sta _4+1
  //SEG73 [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _5
    adc #<sin2
    sta _5
    lda _5+1
    adc #>sin2
    sta _5+1
  //SEG74 [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin2_val),y
    tax
    iny
    lda (sin2_val),y
    stx sin2_val
    sta sin2_val+1
  //SEG75 [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vwsz1=vwsz1_plus_vbsc1 
    lda #$a
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda wrap_y.y
    adc $fe
    sta wrap_y.y
    lda wrap_y.y+1
    adc $ff
    sta wrap_y.y+1
  //SEG76 [41] call wrap_y 
  //SEG77 [61] phi from render_sine::@6 to wrap_y [phi:render_sine::@6->wrap_y]
  wrap_y_from_b6:
  //SEG78 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#1 [phi:render_sine::@6->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG79 [42] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2
    jmp b7
  //SEG80 render_sine::@7
  b7:
  //SEG81 [43] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1 -- vbuxx=vbuaa 
    tax
  //SEG82 [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3
  //SEG83 [45] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  //SEG84 [46] call bitmap_plot 
  //SEG85 [54] phi from render_sine::@7 to bitmap_plot [phi:render_sine::@7->bitmap_plot]
  bitmap_plot_from_b7:
  //SEG86 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#1 [phi:render_sine::@7->bitmap_plot#0] -- register_copy 
  //SEG87 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#1 [phi:render_sine::@7->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp b8
  //SEG88 render_sine::@8
  b8:
  //SEG89 [47] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3 -- vwuz1=_inc_vwuz1 
    inc xpos
    bne !+
    inc xpos+1
  !:
  //SEG90 [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10 -- vwuz1_neq_vwuc1_then_la1 
    lda xpos+1
    cmp #>$140
    bne b10_from_b8
    lda xpos
    cmp #<$140
    bne b10_from_b8
  //SEG91 [49] phi from render_sine::@8 to render_sine::@2 [phi:render_sine::@8->render_sine::@2]
  b2_from_b8:
  //SEG92 [49] phi (word) render_sine::xpos#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine::@8->render_sine::@2#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    lda #0
    sta xpos+1
    jmp b2
  //SEG93 render_sine::@2
  b2:
  //SEG94 [50] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2 -- vwuz1=_inc_vwuz1 
    inc sin_idx
    bne !+
    inc sin_idx+1
  !:
  //SEG95 [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda sin_idx+1
    cmp #>SIN_SIZE
    bcc b1_from_b2
    bne !+
    lda sin_idx
    cmp #<SIN_SIZE
    bcc b1_from_b2
  !:
    jmp breturn
  //SEG96 render_sine::@return
  breturn:
  //SEG97 [52] return 
    rts
  //SEG98 [53] phi from render_sine::@8 to render_sine::@10 [phi:render_sine::@8->render_sine::@10]
  b10_from_b8:
    jmp b10
  //SEG99 render_sine::@10
  b10:
  //SEG100 [49] phi from render_sine::@10 to render_sine::@2 [phi:render_sine::@10->render_sine::@2]
  b2_from_b10:
  //SEG101 [49] phi (word) render_sine::xpos#8 = (word) render_sine::xpos#1 [phi:render_sine::@10->render_sine::@2#0] -- register_copy 
    jmp b2
}
//SEG102 bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage(4) x, byte register(X) y)
bitmap_plot: {
    .label _1 = $10
    .label plotter = 6
    .label x = 4
    .label _3 = 6
  //SEG103 [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta _3+1
    lda bitmap_plot_ylo,x
    sta _3
  //SEG104 [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG105 [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
  //SEG106 [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2 -- vbuaa=_lo_vwuz1 
    lda x
  //SEG107 [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp breturn
  //SEG108 bitmap_plot::@return
  breturn:
  //SEG109 [60] return 
    rts
}
//SEG110 wrap_y
// wrap_y(signed word zeropage(6) y)
wrap_y: {
    .label y = 6
  //SEG111 [62] phi from wrap_y wrap_y::@2 to wrap_y::@1 [phi:wrap_y/wrap_y::@2->wrap_y::@1]
  b1_from_wrap_y:
  b1_from_b2:
  //SEG112 [62] phi (signed word) wrap_y::y#4 = (signed word) wrap_y::y#9 [phi:wrap_y/wrap_y::@2->wrap_y::@1#0] -- register_copy 
    jmp b1
  //SEG113 wrap_y::@1
  b1:
  //SEG114 [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2 -- vwsz1_ge_vwsc1_then_la1 
    lda y
    cmp #<$c8
    lda y+1
    sbc #>$c8
    bvc !+
    eor #$80
  !:
    bpl b2
  //SEG115 [64] phi from wrap_y::@1 wrap_y::@5 to wrap_y::@4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4]
  b4_from_b1:
  b4_from_b5:
  //SEG116 [64] phi (signed word) wrap_y::y#6 = (signed word) wrap_y::y#4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4#0] -- register_copy 
    jmp b4
  //SEG117 wrap_y::@4
  b4:
  //SEG118 [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5 -- vwsz1_lt_0_then_la1 
    lda y+1
    bmi b5
    jmp b6
  //SEG119 wrap_y::@6
  b6:
  //SEG120 [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6 -- vbuaa=_byte_vwsz1 
    lda y
    jmp breturn
  //SEG121 wrap_y::@return
  breturn:
  //SEG122 [67] return 
    rts
  //SEG123 wrap_y::@5
  b5:
  //SEG124 [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda y
    adc #<$c8
    sta y
    lda y+1
    adc #>$c8
    sta y+1
    jmp b4_from_b5
  //SEG125 wrap_y::@2
  b2:
  //SEG126 [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_minus_vbuc1 
    sec
    lda y
    sbc #$c8
    sta y
    bcs !+
    dec y+1
  !:
    jmp b1_from_b2
}
//SEG127 sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage(2) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .const offs = min+(ampl>>1)
    .label _5 = $c
    .label _6 = 6
    .label _8 = 6
    .label step = $1b
    .label sintab = 2
    .label x = 8
    .label i = 4
  //SEG128 [71] call div32u16u 
  //SEG129 [161] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
  //SEG130 [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    jmp b3
  //SEG131 sin16s_gen2::@3
  b3:
  //SEG132 [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  //SEG133 [74] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
  b1_from_b3:
  //SEG134 [74] phi (word) sin16s_gen2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG135 [74] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[$200]) sin#0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<sin
    sta sintab
    lda #>sin
    sta sintab+1
  //SEG136 [74] phi (dword) sin16s_gen2::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG137 [74] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
  b1_from_b5:
  //SEG138 [74] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
  //SEG139 [74] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
  //SEG140 [74] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp b1
  //SEG141 sin16s_gen2::@1
  b1:
  //SEG142 [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG143 [76] call sin16s 
    jsr sin16s
  //SEG144 [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    jmp b4
  //SEG145 sin16s_gen2::@4
  b4:
  //SEG146 [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  //SEG147 [79] call mul16s 
    jsr mul16s
  //SEG148 [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    jmp b5
  //SEG149 sin16s_gen2::@5
  b5:
  //SEG150 [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
  //SEG151 [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _6
    lda _5+3
    sta _6+1
  //SEG152 [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6 -- vwsz1=vwsc1_plus_vwsz1 
    clc
    lda _8
    adc #<offs
    sta _8
    lda _8+1
    adc #>offs
    sta _8+1
  //SEG153 [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
  //SEG154 [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [87] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>SIN_SIZE
    bcc b1_from_b5
    bne !+
    lda i
    cmp #<SIN_SIZE
    bcc b1_from_b5
  !:
    jmp breturn
  //SEG158 sin16s_gen2::@return
  breturn:
  //SEG159 [89] return 
    rts
}
//SEG160 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($17) a)
mul16s: {
    .label _6 = 6
    .label _16 = 6
    .label m = $c
    .label return = $c
    .label a = $17
  //SEG161 [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG162 [91] call mul16u 
  //SEG163 [101] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
  //SEG164 [101] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG165 [101] phi (word) mul16u::b#2 = ((word))(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vwuz1=vwuc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.b
    lda #>sin16s_gen2.ampl
    sta mul16u.b+1
    jsr mul16u
  //SEG166 [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp b6
  //SEG167 mul16s::@6
  b6:
  //SEG168 [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  //SEG169 [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b1_from_b6
    jmp b3
  //SEG170 mul16s::@3
  b3:
  //SEG171 [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG172 [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda _16
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _16+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
  //SEG173 [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG174 [98] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  b1_from_b3:
  b1_from_b6:
  //SEG175 [98] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
    jmp b1
  //SEG176 mul16s::@1
  b1:
    jmp b2
  //SEG177 mul16s::@2
  b2:
  //SEG178 [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz1 
    jmp breturn
  //SEG179 mul16s::@return
  breturn:
  //SEG180 [100] return 
    rts
}
//SEG181 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($10) a, word zeropage(6) b)
mul16u: {
    .label mb = $12
    .label a = $10
    .label res = $c
    .label return = $c
    .label b = 6
  //SEG182 [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG183 [103] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG184 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG185 [103] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG186 [103] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG187 mul16u::@1
  b1:
  //SEG188 [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG189 mul16u::@return
  breturn:
  //SEG190 [105] return 
    rts
  //SEG191 mul16u::@2
  b2:
  //SEG192 [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG193 [107] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG194 mul16u::@7
  b7:
  //SEG195 [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG196 [109] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG197 [109] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG198 mul16u::@4
  b4:
  //SEG199 [110] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG200 [111] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG201 [103] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG202 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG203 [103] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG204 [103] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG205 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($c) x)
sin16s: {
    .label _6 = $c
    .label x = $c
    .label return = $17
    .label x1 = $1f
    .label x2 = $19
    .label x3 = $19
    .label x3_6 = 6
    .label usinx = $17
    .label x4 = $19
    .label x5 = 6
    .label x5_128 = 6
    .label sinx = $17
    .label isUpper = $16
  //SEG206 [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG207 sin16s::@4
  b4:
  //SEG208 [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG209 [114] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG210 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG211 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG212 [114] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG213 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG214 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG215 sin16s::@1
  b1:
  //SEG216 [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG217 sin16s::@5
  b5:
  //SEG218 [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG219 [117] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG220 [117] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG221 sin16s::@2
  b2:
  //SEG222 [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG223 [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG224 [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG225 [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG226 [122] call mulu16_sel 
  //SEG227 [152] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG228 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG229 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG230 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG231 [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
    jmp b8
  //SEG232 sin16s::@8
  b8:
  //SEG233 [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG234 [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG235 [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG236 [127] call mulu16_sel 
  //SEG237 [152] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG238 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG239 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG240 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG241 [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
    jmp b9
  //SEG242 sin16s::@9
  b9:
  //SEG243 [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG244 [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG245 [131] call mulu16_sel 
  //SEG246 [152] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG247 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG248 [152] phi (word) mulu16_sel::v2#5 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG249 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG250 [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
    jmp b10
  //SEG251 sin16s::@10
  b10:
  //SEG252 [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  //SEG253 [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG254 [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG255 [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG256 [137] call mulu16_sel 
  //SEG257 [152] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG258 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG259 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG260 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG261 [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
    jmp b11
  //SEG262 sin16s::@11
  b11:
  //SEG263 [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  //SEG264 [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG265 [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG266 [142] call mulu16_sel 
  //SEG267 [152] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG268 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG269 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG270 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG271 [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
    jmp b12
  //SEG272 sin16s::@12
  b12:
  //SEG273 [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  //SEG274 [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG275 [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG276 [147] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG277 sin16s::@6
  b6:
  //SEG278 [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG279 [149] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG280 [149] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG281 sin16s::@3
  b3:
    jmp breturn
  //SEG282 sin16s::@return
  breturn:
  //SEG283 [150] return 
    rts
  //SEG284 sin16s::@15
  b15:
  //SEG285 [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
    jmp b3_from_b15
}
//SEG286 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($19) v1, word zeropage(6) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $c
    .label _1 = $c
    .label v1 = $19
    .label v2 = 6
    .label return = 6
    .label return_1 = $19
    .label return_10 = $19
  //SEG287 [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG288 [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  //SEG289 [155] call mul16u 
  //SEG290 [101] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
  //SEG291 [101] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
  //SEG292 [101] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG293 [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2
    jmp b2
  //SEG294 mulu16_sel::@2
  b2:
  //SEG295 [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  //SEG296 [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG297 [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
    jmp breturn
  //SEG298 mulu16_sel::@return
  breturn:
  //SEG299 [160] return 
    rts
}
//SEG300 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $10
    .label quotient_lo = 6
    .label return = $1b
  //SEG301 [162] call divr16u 
  //SEG302 [171] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG303 [171] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG304 [171] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG305 [163] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b2
  //SEG306 div32u16u::@2
  b2:
  //SEG307 [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG308 [165] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG309 [166] call divr16u 
  //SEG310 [171] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  divr16u_from_b2:
  //SEG311 [171] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG312 [171] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG313 [167] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b3
  //SEG314 div32u16u::@3
  b3:
  //SEG315 [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  //SEG316 [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG317 div32u16u::@return
  breturn:
  //SEG318 [170] return 
    rts
}
//SEG319 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage(4) dividend, word zeropage(2) rem)
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = 6
    .label return = 6
  //SEG320 [172] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG321 [172] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG322 [172] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG323 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG324 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG325 [172] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG326 [172] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG327 [172] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG328 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG329 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG330 divr16u::@1
  b1:
  //SEG331 [173] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG332 [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG333 [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG334 [176] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG335 divr16u::@4
  b4:
  //SEG336 [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG337 [178] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG338 [178] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG339 divr16u::@2
  b2:
  //SEG340 [179] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG341 [180] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG342 [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>SIN_SIZE
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<SIN_SIZE
    bcc b3_from_b2
  !:
    jmp b5
  //SEG343 divr16u::@5
  b5:
  //SEG344 [182] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG345 [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<SIN_SIZE
    sta rem
    lda rem+1
    sbc #>SIN_SIZE
    sta rem+1
  //SEG346 [184] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG347 [184] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG348 [184] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG349 divr16u::@3
  b3:
  //SEG350 [185] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG351 [186] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG352 divr16u::@6
  b6:
  //SEG353 [187] (word) rem16u#1 ← (word) divr16u::rem#11
    jmp breturn
  //SEG354 divr16u::@return
  breturn:
  //SEG355 [188] return 
    rts
}
//SEG356 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 2
    .label y = $16
    .label _3 = 2
  //SEG357 [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo
    sta _3
    lda bitmap_plot_yhi
    sta _3+1
  //SEG358 [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG359 [191] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
  //SEG360 [191] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG361 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG362 [191] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  b1_from_b3:
  //SEG363 [191] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG364 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp b1
  //SEG365 bitmap_clear::@1
  b1:
  //SEG366 [192] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  b2_from_b1:
  //SEG367 [192] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG368 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG369 [192] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  b2_from_b2:
  //SEG370 [192] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG371 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp b2
  //SEG372 bitmap_clear::@2
  b2:
  //SEG373 [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
  //SEG374 [194] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG375 [195] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG376 [196] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2_from_b2
    jmp b3
  //SEG377 bitmap_clear::@3
  b3:
  //SEG378 [197] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG379 [198] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1_from_b3
    jmp breturn
  //SEG380 bitmap_clear::@return
  breturn:
  //SEG381 [199] return 
    rts
}
//SEG382 bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _3 = $16
    .label yoffs = 2
  //SEG383 [201] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
  //SEG384 [201] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG385 [201] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp b1
  //SEG386 [201] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
  //SEG387 [201] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG388 [201] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
  //SEG389 bitmap_init::@1
  b1:
  //SEG390 [202] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
  //SEG391 [203] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuaa_ror_1 
    lsr
  //SEG392 [204] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b10_from_b1
  //SEG393 [205] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
  //SEG394 [205] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp b2
  //SEG395 bitmap_init::@2
  b2:
  //SEG396 [206] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG397 [207] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
  //SEG398 [208] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
  //SEG399 [208] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG400 [208] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG401 [208] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
  //SEG402 [208] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG403 [208] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
  //SEG404 bitmap_init::@3
  b3:
  //SEG405 [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _3
  //SEG406 [210] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG407 [211] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora _3
  //SEG408 [212] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG409 [213] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG410 [214] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG411 [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG412 [216] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4_from_b3
    jmp b7
  //SEG413 bitmap_init::@7
  b7:
  //SEG414 [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG415 [218] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG416 [218] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
    jmp b4
  //SEG417 bitmap_init::@4
  b4:
  //SEG418 [219] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG419 [220] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
  //SEG420 bitmap_init::@return
  breturn:
  //SEG421 [221] return 
    rts
  //SEG422 [222] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  b10_from_b1:
    jmp b10
  //SEG423 bitmap_init::@10
  b10:
  //SEG424 [205] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  b2_from_b10:
  //SEG425 [205] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
    jmp b2
}
//SEG426 fill
// Fill some memory with a value
fill: {
    .const size = $3e8
    .label end = SCREEN+size
    .label addr = 2
  //SEG427 [224] phi from fill to fill::@1 [phi:fill->fill::@1]
  b1_from_fill:
  //SEG428 [224] phi (byte*) fill::addr#2 = (const byte*) SCREEN#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta addr
    lda #>SCREEN
    sta addr+1
    jmp b1
  //SEG429 [224] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  b1_from_b1:
  //SEG430 [224] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG431 fill::@1
  b1:
  //SEG432 [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (addr),y
  //SEG433 [226] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG434 [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1_from_b1
    lda addr
    cmp #<end
    bne b1_from_b1
    jmp breturn
  //SEG435 fill::@return
  breturn:
  //SEG436 [228] return 
    rts
}
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  .align $100
  sin: .fill 2*$200, 0
.pc = sin2 "sin2"
  .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b29
Removing instruction jmp b32
Removing instruction jmp bend
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp b7
Removing instruction jmp toD0181
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b10_from_b8 with b10
Replacing label b10_from_b8 with b10
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Replacing label b4_from_b5 with b4
Replacing label b1_from_b2 with b1
Replacing label b1_from_b5 with b1
Replacing label b1_from_b5 with b1
Replacing label b1_from_b6 with b2
Replacing label b4_from_b2 with b4
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b15 with b3
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b10_from_b1 with b10
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b29:
Removing instruction b32_from_b29:
Removing instruction b32:
Removing instruction bend_from_b32:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_b7:
Removing instruction toD0181:
Removing instruction b9_from_b8:
Removing instruction bitmap_init_from_b9:
Removing instruction b10_from_b9:
Removing instruction b11_from_b10:
Removing instruction sin16s_gen2_from_b11:
Removing instruction b12_from_b11:
Removing instruction render_sine_from_b12:
Removing instruction b1_from_b2:
Removing instruction b10_from_b8:
Removing instruction b2_from_b10:
Removing instruction b1_from_wrap_y:
Removing instruction b1_from_b2:
Removing instruction b4_from_b1:
Removing instruction b4_from_b5:
Removing instruction b1_from_b3:
Removing instruction b1_from_b5:
Removing instruction b1_from_b3:
Removing instruction b1_from_b6:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b4_from_b7:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulu16_sel_from_b9:
Removing instruction b3_from_b15:
Removing instruction b3_from_b6:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b10_from_b1:
Removing instruction b2_from_b10:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b7:
Removing instruction b8:
Removing instruction fill_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_render_sine:
Removing instruction wrap_y_from_b1:
Removing instruction b5:
Removing instruction bitmap_plot_from_b5:
Removing instruction b6:
Removing instruction wrap_y_from_b6:
Removing instruction b7:
Removing instruction bitmap_plot_from_b7:
Removing instruction b8:
Removing instruction b2_from_b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b6:
Removing instruction breturn:
Removing instruction div32u16u_from_sin16s_gen2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction mul16u_from_mul16s:
Removing instruction b6:
Removing instruction b3:
Removing instruction b1_from_mul16u:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b4:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction mulu16_sel_from_b2:
Removing instruction b8:
Removing instruction mulu16_sel_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction mulu16_sel_from_b10:
Removing instruction b11:
Removing instruction mulu16_sel_from_b11:
Removing instruction b12:
Removing instruction b6:
Removing instruction mul16u_from_mulu16_sel:
Removing instruction b2:
Removing instruction breturn:
Removing instruction divr16u_from_div32u16u:
Removing instruction b2:
Removing instruction divr16u_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b1_from_bitmap_clear:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_bitmap_init:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_fill:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b2 in bne b10
Skipping double jump to b2 in bne b10
Skipping double jump to b3 in beq b15
Skipping double jump to b2 in bne b10
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin16s to b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction b10:
Removing instruction b15:
Removing instruction b10:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b2
Removing unreachable instruction jmp b3
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [160] bcc b1 to bcs
Fixing long branch [166] bcc b1 to bcs

FINAL SYMBOL TABLE
(label) @29
(label) @32
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte*) BITMAP
(const byte*) BITMAP#0 BITMAP = ((byte*))(word/signed word/dword/signed dword) $2000
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) $dd00
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) $dd02
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(const byte*) D011#0 D011 = ((byte*))(word/dword/signed dword) $d011
(byte*) D016
(const byte*) D016#0 D016 = ((byte*))(word/dword/signed dword) $d016
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) $d018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(word) PI2_u4f12
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword/signed dword) $6487ed51
(byte) PINK
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword/signed dword) $1921fb54
(word) PI_u4f12
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword/signed dword) $3243f6a9
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) $35
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(word) SIN_SIZE
(const word) SIN_SIZE#0 SIN_SIZE = (word/signed word/dword/signed dword) $200
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte/signed byte/word/signed word/dword/signed dword) $20
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) $10
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_RST8
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) YELLOW
(void()) bitmap_clear()
(word~) bitmap_clear::$3 $3 zp ZP_WORD:2 2.0
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#1 bitmap zp ZP_WORD:2 42.599999999999994
(byte*) bitmap_clear::bitmap#2 bitmap zp ZP_WORD:2 157.0
(byte*) bitmap_clear::bitmap#3 bitmap zp ZP_WORD:2 24.0
(byte*~) bitmap_clear::bitmap#5 bitmap zp ZP_WORD:2 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 151.5
(byte) bitmap_clear::x#2 reg byte x 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp ZP_BYTE:22 16.5
(byte) bitmap_clear::y#4 y zp ZP_BYTE:22 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$3 $3 zp ZP_BYTE:22 11.0
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 reg byte a 22.0
(label) bitmap_init::@1
(label) bitmap_init::@10
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 6.0
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:2 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:2 6.111111111111112
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:2 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 $1 zp ZP_WORD:16 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(word~) bitmap_plot::$3 $3 zp ZP_WORD:6 1.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#1 plotter zp ZP_WORD:6 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp ZP_WORD:4 11.0
(word) bitmap_plot::x#1 x zp ZP_WORD:4 11.0
(word) bitmap_plot::x#2 x zp ZP_WORD:4 6.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte x 22.0
(byte) bitmap_plot::y#1 reg byte x 22.0
(byte) bitmap_plot::y#2 reg byte x 26.0
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:16 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:6 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:27 1.3333333333333333
(dword) div32u16u::return#2 return zp ZP_DWORD:27 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:4 2.75
(word) divr16u::dividend#3 dividend zp ZP_WORD:4 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:4 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:6 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:6 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:6 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:2 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:2 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:2 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:2 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:2 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:2 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:6 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:6 4.0
(word) divr16u::return#3 return zp ZP_WORD:6 4.0
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#1 addr zp ZP_WORD:2 16.5
(byte*) fill::addr#2 addr zp ZP_WORD:2 16.5
(byte*) fill::end
(const byte*) fill::end#0 end = (const byte*) SCREEN#0+(const word) fill::size#0
(word) fill::size
(const word) fill::size#0 size = (word/signed word/dword/signed dword) $3e8
(byte*) fill::start
(byte) fill::val
(void()) main()
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$1
(word~) main::toD0181_$2
(byte~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(byte~) main::toD0181_$6
(byte~) main::toD0181_$7
(byte~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) $3fff<<(byte/signed byte/word/signed word/dword/signed dword) 2|>((word))(const byte*) BITMAP#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte~) main::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte/signed byte/word/signed word/dword/signed dword) 3^>((word))(const byte*) SCREEN#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$16 $16 zp ZP_WORD:6 4.0
(word~) mul16s::$6 $6 zp ZP_WORD:6 4.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@6
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp ZP_WORD:23 2.6
(signed word) mul16s::b
(dword) mul16s::m
(dword) mul16s::m#0 m zp ZP_DWORD:12 2.0
(dword) mul16s::m#1 m zp ZP_DWORD:12 4.0
(dword) mul16s::m#4 m zp ZP_DWORD:12 6.0
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp ZP_DWORD:12 4.333333333333333
(signed dword) mul16s::return#2 return zp ZP_DWORD:12 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:16 101.0
(word) mul16u::a#2 a zp ZP_WORD:16 2.0
(word) mul16u::a#3 a zp ZP_WORD:16 67.66666666666666
(word) mul16u::a#6 a zp ZP_WORD:16 3.0
(word~) mul16u::a#8 a zp ZP_WORD:16 4.0
(word) mul16u::b
(word) mul16u::b#1 b zp ZP_WORD:6 4.0
(word) mul16u::b#2 b zp ZP_WORD:6 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:18 4.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:18 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:18 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:12 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:12 43.85714285714286
(dword) mul16u::res#6 res zp ZP_DWORD:12 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:12 4.0
(dword) mul16u::return#3 return zp ZP_DWORD:12 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:12 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:12 4.0
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:6 4.0
(word) mulu16_sel::return#1 return#1 zp ZP_WORD:25 4.0
(word) mulu16_sel::return#10 return#10 zp ZP_WORD:25 4.0
(word) mulu16_sel::return#11 return zp ZP_WORD:6 4.0
(word) mulu16_sel::return#12 return zp ZP_WORD:6 1.714285714285714
(word) mulu16_sel::return#2 return zp ZP_WORD:6 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#5 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:25 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:25 2.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:25 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:25 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:25 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:25 12.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:6 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:6 4.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:6 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:6 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:6 5.0
(signed word) rem16s
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:2 0.8
(signed byte) rem8s
(byte) rem8u
(void()) render_sine()
(word~) render_sine::$0 $0 zp ZP_WORD:6 22.0
(signed word*~) render_sine::$1 $1 zp ZP_WORD:6 22.0
(word~) render_sine::$4 $4 zp ZP_WORD:6 22.0
(signed word*~) render_sine::$5 $5 zp ZP_WORD:6 22.0
(label) render_sine::@1
(label) render_sine::@10
(label) render_sine::@2
(label) render_sine::@5
(label) render_sine::@6
(label) render_sine::@7
(label) render_sine::@8
(label) render_sine::@return
(signed word) render_sine::sin2_val
(signed word) render_sine::sin2_val#0 sin2_val zp ZP_WORD:6 22.0
(word) render_sine::sin_idx
(word) render_sine::sin_idx#1 sin_idx zp ZP_WORD:2 16.5
(word) render_sine::sin_idx#2 sin_idx zp ZP_WORD:2 1.76
(signed word) render_sine::sin_val
(signed word) render_sine::sin_val#0 sin_val zp ZP_WORD:6 22.0
(word) render_sine::xpos
(word) render_sine::xpos#1 xpos zp ZP_WORD:4 11.0
(word) render_sine::xpos#3 xpos zp ZP_WORD:4 2.0952380952380953
(word) render_sine::xpos#8 xpos zp ZP_WORD:4 7.333333333333333
(byte) render_sine::ypos
(byte) render_sine::ypos#0 reg byte x 11.0
(byte) render_sine::ypos2
(byte) render_sine::ypos2#0 reg byte x 11.0
(signed word[$200]) sin
(const signed word[$200]) sin#0 sin = { fill( $200, 0) }
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$6 $6 zp ZP_DWORD:12 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@15
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:22 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:23 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:23 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:23 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:23 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:23 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:23 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:12 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:12 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:12 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:12 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:12 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:31 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:25 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:25 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:6 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:25 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:6 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:6 4.0
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed dword~) sin16s_gen2::$5 $5 zp ZP_DWORD:12 22.0
(word~) sin16s_gen2::$6 $6 zp ZP_WORD:6 11.0
(signed word~) sin16s_gen2::$8 $8 zp ZP_WORD:6 22.0
(label) sin16s_gen2::@1
(label) sin16s_gen2::@3
(label) sin16s_gen2::@4
(label) sin16s_gen2::@5
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(const signed word) sin16s_gen2::ampl#0 ampl = (const signed word) sin16s_gen2::max#0-(const signed word) sin16s_gen2::min#0
(word) sin16s_gen2::i
(word) sin16s_gen2::i#1 i zp ZP_WORD:4 16.5
(word) sin16s_gen2::i#2 i zp ZP_WORD:4 1.6923076923076923
(signed word) sin16s_gen2::max
(const signed word) sin16s_gen2::max#0 max = (word/signed word/dword/signed dword) $140
(signed word) sin16s_gen2::min
(const signed word) sin16s_gen2::min#0 min = -(word/signed word/dword/signed dword) $140
(signed word) sin16s_gen2::offs
(const signed word) sin16s_gen2::offs#0 offs = (const signed word) sin16s_gen2::min#0+(const signed word) sin16s_gen2::ampl#0>>(byte/signed byte/word/signed word/dword/signed dword) 1
(signed word*) sin16s_gen2::sintab
(signed word*) sin16s_gen2::sintab#0 sintab zp ZP_WORD:2 5.5
(signed word*) sin16s_gen2::sintab#2 sintab zp ZP_WORD:2 3.0
(dword) sin16s_gen2::step
(dword) sin16s_gen2::step#0 step zp ZP_DWORD:27 0.8125
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(dword) sin16s_gen2::x#1 x zp ZP_DWORD:8 7.333333333333333
(dword) sin16s_gen2::x#2 x zp ZP_DWORD:8 2.75
(signed word*) sin2
(const signed word*) sin2#0 sin2 = ((signed word*))(word/signed word/dword/signed dword) $1400
(byte()) wrap_y((signed word) wrap_y::y)
(label) wrap_y::@1
(label) wrap_y::@2
(label) wrap_y::@4
(label) wrap_y::@5
(label) wrap_y::@6
(label) wrap_y::@return
(byte) wrap_y::return
(byte) wrap_y::return#0 reg byte a 22.0
(byte) wrap_y::return#1 reg byte a 22.0
(byte) wrap_y::return#2 reg byte a 6.0
(signed word) wrap_y::y
(signed word) wrap_y::y#0 y zp ZP_WORD:6 22.0
(signed word) wrap_y::y#1 y zp ZP_WORD:6 22.0
(signed word) wrap_y::y#2 y zp ZP_WORD:6 202.0
(signed word) wrap_y::y#3 y zp ZP_WORD:6 202.0
(signed word) wrap_y::y#4 y zp ZP_WORD:6 203.0
(signed word) wrap_y::y#6 y zp ZP_WORD:6 203.0
(signed word) wrap_y::y#9 y zp ZP_WORD:6 24.0

zp ZP_WORD:2 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::$3 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 fill::addr#2 fill::addr#1 ]
zp ZP_WORD:4 [ render_sine::xpos#3 render_sine::xpos#8 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
zp ZP_WORD:6 [ wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$0 render_sine::$1 render_sine::$4 render_sine::$5 mul16u::b#2 mul16u::b#1 mulu16_sel::v2#5 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 bitmap_plot::$3 bitmap_plot::plotter#1 sin16s_gen2::$6 sin16s_gen2::$8 mul16s::$6 mul16s::$16 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
zp ZP_DWORD:8 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp ZP_DWORD:12 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$5 mulu16_sel::$0 mulu16_sel::$1 sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ]
zp ZP_WORD:16 [ mul16u::a#3 mul16u::a#6 mul16u::a#8 mul16u::a#2 mul16u::a#0 bitmap_plot::$1 div32u16u::quotient_hi#0 ]
zp ZP_DWORD:18 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp ZP_BYTE:22 [ sin16s::isUpper#2 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_init::$3 ]
zp ZP_WORD:23 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
zp ZP_WORD:25 [ mulu16_sel::v1#5 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ]
reg byte x [ mulu16_sel::select#5 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte a [ wrap_y::return#0 ]
reg byte x [ render_sine::ypos#0 ]
reg byte a [ wrap_y::return#1 ]
reg byte x [ render_sine::ypos2#0 ]
reg byte a [ bitmap_plot::$2 ]
reg byte a [ wrap_y::return#2 ]
zp ZP_DWORD:27 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
reg byte a [ mul16u::$1 ]
zp ZP_WORD:31 [ sin16s::x1#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
reg byte a [ bitmap_init::$7 ]


FINAL ASSEMBLER
Score: 28478

//SEG0 File Comments
// Generate a big sinus and plot it on a bitmap
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label BGCOL = $d021
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D016 = $d016
  .const VIC_CSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .label SCREEN = $400
  .label BITMAP = $2000
  .const SIN_SIZE = $200
  .label sin2 = $1400
  .label rem16u = 2
//SEG3 @begin
//SEG4 @29
//SEG5 kickasm(location (const signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {   	  .word sin(toRadians([i*360]/512))*320     }  }}
//SEG6 [2] phi from @29 to @32 [phi:@29->@32]
//SEG7 @32
//SEG8 [3] call main 
//SEG9 [4] phi from @32 to @end [phi:@32->@end]
//SEG10 @end
//SEG11 main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>SCREEN)>>6
    .const toD0181_return = (>(SCREEN&$3fff)<<2)|(>BITMAP)>>2&$f
  //SEG12 asm { sei  }
    sei
  //SEG13 [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG14 [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG15 [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG16 main::vicSelectGfxBank1
  //SEG17 [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG18 [10] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  //SEG19 main::vicSelectGfxBank1_toDd001
  //SEG20 main::vicSelectGfxBank1_@1
  //SEG21 [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG22 main::@7
  //SEG23 [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta D016
  //SEG24 [13] phi from main::@7 to main::toD0181 [phi:main::@7->main::toD0181]
  //SEG25 main::toD0181
  //SEG26 main::@8
  //SEG27 [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
  //SEG28 [15] call fill 
  //SEG29 [223] phi from main::@8 to fill [phi:main::@8->fill]
    jsr fill
  //SEG30 [16] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  //SEG31 main::@9
  //SEG32 [17] call bitmap_init 
  //SEG33 [200] phi from main::@9 to bitmap_init [phi:main::@9->bitmap_init]
    jsr bitmap_init
  //SEG34 [18] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  //SEG35 main::@10
  //SEG36 [19] call bitmap_clear 
    jsr bitmap_clear
  //SEG37 [20] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  //SEG38 main::@11
  //SEG39 [21] call sin16s_gen2 
  //SEG40 [70] phi from main::@11 to sin16s_gen2 [phi:main::@11->sin16s_gen2]
    jsr sin16s_gen2
  //SEG41 [22] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  //SEG42 main::@12
  //SEG43 [23] call render_sine 
  //SEG44 [25] phi from main::@12 to render_sine [phi:main::@12->render_sine]
    jsr render_sine
  //SEG45 main::@2
  b2:
  //SEG46 [24] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp b2
}
//SEG47 render_sine
render_sine: {
    .label _0 = 6
    .label _1 = 6
    .label _4 = 6
    .label _5 = 6
    .label sin_val = 6
    .label sin2_val = 6
    .label xpos = 4
    .label sin_idx = 2
  //SEG48 [26] phi from render_sine to render_sine::@1 [phi:render_sine->render_sine::@1]
  //SEG49 [26] phi (word) render_sine::xpos#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    sta xpos+1
  //SEG50 [26] phi (word) render_sine::sin_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine->render_sine::@1#1] -- vwuz1=vbuc1 
    sta sin_idx
    sta sin_idx+1
  //SEG51 [26] phi from render_sine::@2 to render_sine::@1 [phi:render_sine::@2->render_sine::@1]
  //SEG52 [26] phi (word) render_sine::xpos#3 = (word) render_sine::xpos#8 [phi:render_sine::@2->render_sine::@1#0] -- register_copy 
  //SEG53 [26] phi (word) render_sine::sin_idx#2 = (word) render_sine::sin_idx#1 [phi:render_sine::@2->render_sine::@1#1] -- register_copy 
  //SEG54 render_sine::@1
  b1:
  //SEG55 [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _0
    lda sin_idx+1
    rol
    sta _0+1
  //SEG56 [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _1
    adc #<sin
    sta _1
    lda _1+1
    adc #>sin
    sta _1+1
  //SEG57 [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_val),y
    tax
    iny
    lda (sin_val),y
    stx sin_val
    sta sin_val+1
  //SEG58 [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  //SEG59 [31] call wrap_y 
  //SEG60 [61] phi from render_sine::@1 to wrap_y [phi:render_sine::@1->wrap_y]
  //SEG61 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#0 [phi:render_sine::@1->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG62 [32] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2
  //SEG63 render_sine::@5
  //SEG64 [33] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0 -- vbuxx=vbuaa 
    tax
  //SEG65 [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  //SEG66 [35] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  //SEG67 [36] call bitmap_plot 
  //SEG68 [54] phi from render_sine::@5 to bitmap_plot [phi:render_sine::@5->bitmap_plot]
  //SEG69 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#0 [phi:render_sine::@5->bitmap_plot#0] -- register_copy 
  //SEG70 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#0 [phi:render_sine::@5->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG71 render_sine::@6
  //SEG72 [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz2_rol_1 
    lda sin_idx
    asl
    sta _4
    lda sin_idx+1
    rol
    sta _4+1
  //SEG73 [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda _5
    adc #<sin2
    sta _5
    lda _5+1
    adc #>sin2
    sta _5+1
  //SEG74 [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin2_val),y
    tax
    iny
    lda (sin2_val),y
    stx sin2_val
    sta sin2_val+1
  //SEG75 [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a -- vwsz1=vwsz1_plus_vbsc1 
    lda #$a
    sta $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta $ff
    clc
    lda wrap_y.y
    adc $fe
    sta wrap_y.y
    lda wrap_y.y+1
    adc $ff
    sta wrap_y.y+1
  //SEG76 [41] call wrap_y 
  //SEG77 [61] phi from render_sine::@6 to wrap_y [phi:render_sine::@6->wrap_y]
  //SEG78 [61] phi (signed word) wrap_y::y#9 = (signed word) wrap_y::y#1 [phi:render_sine::@6->wrap_y#0] -- register_copy 
    jsr wrap_y
  //SEG79 [42] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2
  //SEG80 render_sine::@7
  //SEG81 [43] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1 -- vbuxx=vbuaa 
    tax
  //SEG82 [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3
  //SEG83 [45] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  //SEG84 [46] call bitmap_plot 
  //SEG85 [54] phi from render_sine::@7 to bitmap_plot [phi:render_sine::@7->bitmap_plot]
  //SEG86 [54] phi (word) bitmap_plot::x#2 = (word) bitmap_plot::x#1 [phi:render_sine::@7->bitmap_plot#0] -- register_copy 
  //SEG87 [54] phi (byte) bitmap_plot::y#2 = (byte) bitmap_plot::y#1 [phi:render_sine::@7->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
  //SEG88 render_sine::@8
  //SEG89 [47] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3 -- vwuz1=_inc_vwuz1 
    inc xpos
    bne !+
    inc xpos+1
  !:
  //SEG90 [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@10 -- vwuz1_neq_vwuc1_then_la1 
    lda xpos+1
    cmp #>$140
    bne b2
    lda xpos
    cmp #<$140
    bne b2
  //SEG91 [49] phi from render_sine::@8 to render_sine::@2 [phi:render_sine::@8->render_sine::@2]
  //SEG92 [49] phi (word) render_sine::xpos#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_sine::@8->render_sine::@2#0] -- vwuz1=vbuc1 
    lda #0
    sta xpos
    sta xpos+1
  //SEG93 render_sine::@2
  b2:
  //SEG94 [50] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2 -- vwuz1=_inc_vwuz1 
    inc sin_idx
    bne !+
    inc sin_idx+1
  !:
  //SEG95 [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda sin_idx+1
    cmp #>SIN_SIZE
    bcs !b1+
    jmp b1
  !b1:
    bne !+
    lda sin_idx
    cmp #<SIN_SIZE
    bcs !b1+
    jmp b1
  !b1:
  !:
  //SEG96 render_sine::@return
  //SEG97 [52] return 
    rts
  //SEG98 [53] phi from render_sine::@8 to render_sine::@10 [phi:render_sine::@8->render_sine::@10]
  //SEG99 render_sine::@10
  //SEG100 [49] phi from render_sine::@10 to render_sine::@2 [phi:render_sine::@10->render_sine::@2]
  //SEG101 [49] phi (word) render_sine::xpos#8 = (word) render_sine::xpos#1 [phi:render_sine::@10->render_sine::@2#0] -- register_copy 
}
//SEG102 bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage(4) x, byte register(X) y)
bitmap_plot: {
    .label _1 = $10
    .label plotter = 6
    .label x = 4
    .label _3 = 6
  //SEG103 [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta _3+1
    lda bitmap_plot_ylo,x
    sta _3
  //SEG104 [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
  //SEG105 [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
  //SEG106 [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2 -- vbuaa=_lo_vwuz1 
    lda x
  //SEG107 [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    sta (plotter),y
  //SEG108 bitmap_plot::@return
  //SEG109 [60] return 
    rts
}
//SEG110 wrap_y
// wrap_y(signed word zeropage(6) y)
wrap_y: {
    .label y = 6
  //SEG111 [62] phi from wrap_y wrap_y::@2 to wrap_y::@1 [phi:wrap_y/wrap_y::@2->wrap_y::@1]
  //SEG112 [62] phi (signed word) wrap_y::y#4 = (signed word) wrap_y::y#9 [phi:wrap_y/wrap_y::@2->wrap_y::@1#0] -- register_copy 
  //SEG113 wrap_y::@1
  b1:
  //SEG114 [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2 -- vwsz1_ge_vwsc1_then_la1 
    lda y
    cmp #<$c8
    lda y+1
    sbc #>$c8
    bvc !+
    eor #$80
  !:
    bpl b2
  //SEG115 [64] phi from wrap_y::@1 wrap_y::@5 to wrap_y::@4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4]
  //SEG116 [64] phi (signed word) wrap_y::y#6 = (signed word) wrap_y::y#4 [phi:wrap_y::@1/wrap_y::@5->wrap_y::@4#0] -- register_copy 
  //SEG117 wrap_y::@4
  b4:
  //SEG118 [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@5 -- vwsz1_lt_0_then_la1 
    lda y+1
    bmi b5
  //SEG119 wrap_y::@6
  //SEG120 [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6 -- vbuaa=_byte_vwsz1 
    lda y
  //SEG121 wrap_y::@return
  //SEG122 [67] return 
    rts
  //SEG123 wrap_y::@5
  b5:
  //SEG124 [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_plus_vwuc1 
    clc
    lda y
    adc #<$c8
    sta y
    lda y+1
    adc #>$c8
    sta y+1
    jmp b4
  //SEG125 wrap_y::@2
  b2:
  //SEG126 [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8 -- vwsz1=vwsz1_minus_vbuc1 
    sec
    lda y
    sbc #$c8
    sta y
    bcs !+
    dec y+1
  !:
    jmp b1
}
//SEG127 sin16s_gen2
// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen2(signed word* zeropage(2) sintab)
sin16s_gen2: {
    .const min = -$140
    .const max = $140
    .label ampl = max-min
    .const offs = min+(ampl>>1)
    .label _5 = $c
    .label _6 = 6
    .label _8 = 6
    .label step = $1b
    .label sintab = 2
    .label x = 8
    .label i = 4
  //SEG128 [71] call div32u16u 
  //SEG129 [161] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
    jsr div32u16u
  //SEG130 [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  //SEG131 sin16s_gen2::@3
  //SEG132 [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  //SEG133 [74] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
  //SEG134 [74] phi (word) sin16s_gen2::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG135 [74] phi (signed word*) sin16s_gen2::sintab#2 = (const signed word[$200]) sin#0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- pwsz1=pwsc1 
    lda #<sin
    sta sintab
    lda #>sin
    sta sintab+1
  //SEG136 [74] phi (dword) sin16s_gen2::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    sta x+1
    sta x+2
    sta x+3
  // u[4.28]
  //SEG137 [74] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
  //SEG138 [74] phi (word) sin16s_gen2::i#2 = (word) sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
  //SEG139 [74] phi (signed word*) sin16s_gen2::sintab#2 = (signed word*) sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
  //SEG140 [74] phi (dword) sin16s_gen2::x#2 = (dword) sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
  //SEG141 sin16s_gen2::@1
  b1:
  //SEG142 [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG143 [76] call sin16s 
    jsr sin16s
  //SEG144 [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  //SEG145 sin16s_gen2::@4
  //SEG146 [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  //SEG147 [79] call mul16s 
    jsr mul16s
  //SEG148 [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  //SEG149 sin16s_gen2::@5
  //SEG150 [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
  //SEG151 [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5 -- vwuz1=_hi_vdsz2 
    lda _5+2
    sta _6
    lda _5+3
    sta _6+1
  //SEG152 [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6 -- vwsz1=vwsc1_plus_vwsz1 
    clc
    lda _8
    adc #<offs
    sta _8
    lda _8+1
    adc #>offs
    sta _8+1
  //SEG153 [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _8
    sta (sintab),y
    iny
    lda _8+1
    sta (sintab),y
  //SEG154 [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [87] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>SIN_SIZE
    bcc b1
    bne !+
    lda i
    cmp #<SIN_SIZE
    bcc b1
  !:
  //SEG158 sin16s_gen2::@return
  //SEG159 [89] return 
    rts
}
//SEG160 mul16s
// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zeropage($17) a)
mul16s: {
    .label _6 = 6
    .label _16 = 6
    .label m = $c
    .label return = $c
    .label a = $17
  //SEG161 [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda a
    sta mul16u.a
    lda a+1
    sta mul16u.a+1
  //SEG162 [91] call mul16u 
  //SEG163 [101] phi from mul16s to mul16u [phi:mul16s->mul16u]
  //SEG164 [101] phi (word) mul16u::a#6 = (word~) mul16u::a#8 [phi:mul16s->mul16u#0] -- register_copy 
  //SEG165 [101] phi (word) mul16u::b#2 = ((word))(const signed word) sin16s_gen2::ampl#0 [phi:mul16s->mul16u#1] -- vwuz1=vwuc1 
    lda #<sin16s_gen2.ampl
    sta mul16u.b
    lda #>sin16s_gen2.ampl
    sta mul16u.b+1
    jsr mul16u
  //SEG166 [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  //SEG167 mul16s::@6
  //SEG168 [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  //SEG169 [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda a+1
    bpl b2
  //SEG170 mul16s::@3
  //SEG171 [95] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda m+2
    sta _6
    lda m+3
    sta _6+1
  //SEG172 [96] (word~) mul16s::$16 ← (word~) mul16s::$6 - ((word))(const signed word) sin16s_gen2::ampl#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda _16
    sec
    sbc #<sin16s_gen2.ampl
    sta _16
    lda _16+1
    sbc #>sin16s_gen2.ampl
    sta _16+1
  //SEG173 [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16 -- vduz1=vduz1_sethi_vwuz2 
    lda _16
    sta m+2
    lda _16+1
    sta m+3
  //SEG174 [98] phi from mul16s::@3 mul16s::@6 to mul16s::@1 [phi:mul16s::@3/mul16s::@6->mul16s::@1]
  //SEG175 [98] phi (dword) mul16s::m#4 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@6->mul16s::@1#0] -- register_copy 
  //SEG176 mul16s::@1
  //SEG177 mul16s::@2
  b2:
  //SEG178 [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4 -- vdsz1=_sdword_vduz1 
  //SEG179 mul16s::@return
  //SEG180 [100] return 
    rts
}
//SEG181 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($10) a, word zeropage(6) b)
mul16u: {
    .label mb = $12
    .label a = $10
    .label res = $c
    .label return = $c
    .label b = 6
  //SEG182 [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG183 [103] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  //SEG184 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG185 [103] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    sta res
    sta res+1
    sta res+2
    sta res+3
  //SEG186 [103] phi (word) mul16u::a#3 = (word) mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
  //SEG187 mul16u::@1
  b1:
  //SEG188 [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
  //SEG189 mul16u::@return
  //SEG190 [105] return 
    rts
  //SEG191 mul16u::@2
  b2:
  //SEG192 [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG193 [107] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG194 mul16u::@7
  //SEG195 [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG196 [109] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  //SEG197 [109] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
  //SEG198 mul16u::@4
  b4:
  //SEG199 [110] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG200 [111] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG201 [103] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  //SEG202 [103] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG203 [103] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG204 [103] phi (word) mul16u::a#3 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG205 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($c) x)
sin16s: {
    .label _6 = $c
    .label x = $c
    .label return = $17
    .label x1 = $1f
    .label x2 = $19
    .label x3 = $19
    .label x3_6 = 6
    .label usinx = $17
    .label x4 = $19
    .label x5 = 6
    .label x5_128 = 6
    .label sinx = $17
    .label isUpper = $16
  //SEG206 [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b4
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b4
  !:
  //SEG207 sin16s::@4
  //SEG208 [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG209 [114] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  //SEG210 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG211 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG212 [114] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b4:
  //SEG213 [114] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG214 [114] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
  //SEG215 sin16s::@1
  b1:
  //SEG216 [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2
  !:
  //SEG217 sin16s::@5
  //SEG218 [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG219 [117] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  //SEG220 [117] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
  //SEG221 sin16s::@2
  b2:
  //SEG222 [118] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG223 [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG224 [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG225 [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG226 [122] call mulu16_sel 
  //SEG227 [152] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  //SEG228 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG229 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG230 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG231 [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  //SEG232 sin16s::@8
  //SEG233 [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG234 [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG235 [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG236 [127] call mulu16_sel 
  //SEG237 [152] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  //SEG238 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG239 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG240 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG241 [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_1
    lda mulu16_sel.return+1
    sta mulu16_sel.return_1+1
  //SEG242 sin16s::@9
  //SEG243 [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG244 [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG245 [131] call mulu16_sel 
  //SEG246 [152] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  //SEG247 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG248 [152] phi (word) mulu16_sel::v2#5 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG249 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG250 [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  //SEG251 sin16s::@10
  //SEG252 [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  //SEG253 [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG254 [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG255 [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG256 [137] call mulu16_sel 
  //SEG257 [152] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  //SEG258 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG259 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG260 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG261 [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta mulu16_sel.return_10
    lda mulu16_sel.return+1
    sta mulu16_sel.return_10+1
  //SEG262 sin16s::@11
  //SEG263 [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  //SEG264 [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG265 [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG266 [142] call mulu16_sel 
  //SEG267 [152] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  //SEG268 [152] phi (byte) mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG269 [152] phi (word) mulu16_sel::v2#5 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG270 [152] phi (word) mulu16_sel::v1#5 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG271 [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  //SEG272 sin16s::@12
  //SEG273 [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  //SEG274 [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG275 [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG276 [147] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b3
  //SEG277 sin16s::@6
  //SEG278 [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG279 [149] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  //SEG280 [149] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
  //SEG281 sin16s::@3
  b3:
  //SEG282 sin16s::@return
  //SEG283 [150] return 
    rts
  //SEG284 sin16s::@15
  //SEG285 [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
}
//SEG286 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($19) v1, word zeropage(6) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $c
    .label _1 = $c
    .label v1 = $19
    .label v2 = 6
    .label return = 6
    .label return_1 = $19
    .label return_10 = $19
  //SEG287 [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG288 [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  //SEG289 [155] call mul16u 
  //SEG290 [101] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  //SEG291 [101] phi (word) mul16u::a#6 = (word) mul16u::a#2 [phi:mulu16_sel->mul16u#0] -- register_copy 
  //SEG292 [101] phi (word) mul16u::b#2 = (word) mul16u::b#1 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
  //SEG293 [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  //SEG294 mulu16_sel::@2
  //SEG295 [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  //SEG296 [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG297 [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return
    lda _1+3
    sta return+1
  //SEG298 mulu16_sel::@return
  //SEG299 [160] return 
    rts
}
//SEG300 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $10
    .label quotient_lo = 6
    .label return = $1b
  //SEG301 [162] call divr16u 
  //SEG302 [171] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  //SEG303 [171] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG304 [171] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
  //SEG305 [163] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG306 div32u16u::@2
  //SEG307 [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG308 [165] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG309 [166] call divr16u 
  //SEG310 [171] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  //SEG311 [171] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG312 [171] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG313 [167] (word) divr16u::return#3 ← (word) divr16u::return#0
  //SEG314 div32u16u::@3
  //SEG315 [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  //SEG316 [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
  //SEG317 div32u16u::@return
  //SEG318 [170] return 
    rts
}
//SEG319 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage(4) dividend, word zeropage(2) rem)
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = 6
    .label return = 6
  //SEG320 [172] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG321 [172] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG322 [172] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG323 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG324 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
  //SEG325 [172] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG326 [172] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG327 [172] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG328 [172] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG329 [172] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG330 divr16u::@1
  b1:
  //SEG331 [173] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG332 [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG333 [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG334 [176] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG335 divr16u::@4
  //SEG336 [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG337 [178] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG338 [178] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG339 divr16u::@2
  b2:
  //SEG340 [179] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG341 [180] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG342 [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>SIN_SIZE
    bcc b3
    bne !+
    lda rem
    cmp #<SIN_SIZE
    bcc b3
  !:
  //SEG343 divr16u::@5
  //SEG344 [182] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG345 [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<SIN_SIZE
    sta rem
    lda rem+1
    sbc #>SIN_SIZE
    sta rem+1
  //SEG346 [184] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG347 [184] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG348 [184] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG349 divr16u::@3
  b3:
  //SEG350 [185] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG351 [186] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG352 divr16u::@6
  //SEG353 [187] (word) rem16u#1 ← (word) divr16u::rem#11
  //SEG354 divr16u::@return
  //SEG355 [188] return 
    rts
}
//SEG356 bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = 2
    .label y = $16
    .label _3 = 2
  //SEG357 [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_ylo
    sta _3
    lda bitmap_plot_yhi
    sta _3+1
  //SEG358 [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  //SEG359 [191] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  //SEG360 [191] phi (byte) bitmap_clear::y#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG361 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
  //SEG362 [191] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  //SEG363 [191] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
  //SEG364 [191] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
  //SEG365 bitmap_clear::@1
  b1:
  //SEG366 [192] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  //SEG367 [192] phi (byte) bitmap_clear::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG368 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
  //SEG369 [192] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  //SEG370 [192] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
  //SEG371 [192] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
  //SEG372 bitmap_clear::@2
  b2:
  //SEG373 [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
  //SEG374 [194] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc bitmap
    bne !+
    inc bitmap+1
  !:
  //SEG375 [195] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG376 [196] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne b2
  //SEG377 bitmap_clear::@3
  //SEG378 [197] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG379 [198] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$28
    bne b1
  //SEG380 bitmap_clear::@return
  //SEG381 [199] return 
    rts
}
//SEG382 bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _3 = $16
    .label yoffs = 2
  //SEG383 [201] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  //SEG384 [201] phi (byte) bitmap_init::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG385 [201] phi (byte) bitmap_init::bits#3 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
  //SEG386 [201] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  //SEG387 [201] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
  //SEG388 [201] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
  //SEG389 bitmap_init::@1
  b1:
  //SEG390 [202] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
  //SEG391 [203] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuaa_ror_1 
    lsr
  //SEG392 [204] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@10 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG393 [205] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  //SEG394 [205] phi (byte) bitmap_init::bits#4 = (byte/word/signed word/dword/signed dword) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
  //SEG395 bitmap_init::@2
  b2:
  //SEG396 [206] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG397 [207] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG398 [208] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  //SEG399 [208] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta yoffs
    lda #>BITMAP
    sta yoffs+1
  //SEG400 [208] phi (byte) bitmap_init::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG401 [208] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  //SEG402 [208] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
  //SEG403 [208] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
  //SEG404 bitmap_init::@3
  b3:
  //SEG405 [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuxx_band_vbuc1 
    txa
    and #7
    sta _3
  //SEG406 [210] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
  //SEG407 [211] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora _3
  //SEG408 [212] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
  //SEG409 [213] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
  //SEG410 [214] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
  //SEG411 [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG412 [216] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b4
  //SEG413 bitmap_init::@7
  //SEG414 [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
  //SEG415 [218] phi from bitmap_init::@3 bitmap_init::@7 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4]
  //SEG416 [218] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@7->bitmap_init::@4#0] -- register_copy 
  //SEG417 bitmap_init::@4
  b4:
  //SEG418 [219] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG419 [220] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG420 bitmap_init::@return
  //SEG421 [221] return 
    rts
  //SEG422 [222] phi from bitmap_init::@1 to bitmap_init::@10 [phi:bitmap_init::@1->bitmap_init::@10]
  //SEG423 bitmap_init::@10
  //SEG424 [205] phi from bitmap_init::@10 to bitmap_init::@2 [phi:bitmap_init::@10->bitmap_init::@2]
  //SEG425 [205] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@10->bitmap_init::@2#0] -- register_copy 
}
//SEG426 fill
// Fill some memory with a value
fill: {
    .const size = $3e8
    .label end = SCREEN+size
    .label addr = 2
  //SEG427 [224] phi from fill to fill::@1 [phi:fill->fill::@1]
  //SEG428 [224] phi (byte*) fill::addr#2 = (const byte*) SCREEN#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta addr
    lda #>SCREEN
    sta addr+1
  //SEG429 [224] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  //SEG430 [224] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
  //SEG431 fill::@1
  b1:
  //SEG432 [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (addr),y
  //SEG433 [226] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG434 [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1
    lda addr
    cmp #<end
    bne b1
  //SEG435 fill::@return
  //SEG436 [228] return 
    rts
}
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  .align $100
  sin: .fill 2*$200, 0
.pc = sin2 "sin2"
  .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }


