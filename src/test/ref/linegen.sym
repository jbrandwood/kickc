constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte SIZEOF_WORD = 2
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2002.0
byte~ divr16u::$2 reg byte a 2002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:7 250.25
word divr16u::dividend#1 dividend zp[2]:7 22.0
word divr16u::dividend#3 dividend zp[2]:7 443.42857142857144
word divr16u::dividend#5 dividend zp[2]:7 112.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 1501.5
byte divr16u::i#2 reg byte x 154.0
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:15 1501.5
word divr16u::quotient#2 quotient zp[2]:15 1001.0
word divr16u::quotient#3 quotient zp[2]:15 250.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:24 750.75
word divr16u::rem#1 rem zp[2]:24 2002.0
word divr16u::rem#10 rem zp[2]:24 112.0
word divr16u::rem#11 rem zp[2]:24 1034.6666666666667
word divr16u::rem#2 rem zp[2]:24 2002.0
word divr16u::rem#4 rem zp[2]:24 22.0
word divr16u::rem#5 rem zp[2]:24 2103.0
word divr16u::rem#6 rem zp[2]:24 1001.0
word divr16u::return
word divr16u::return#0 return zp[2]:15 432.1428571428571
word divr16u::return#2 return zp[2]:15 22.0
word divr16u::return#3 return zp[2]:15 22.0
void lin16u_gen(word lin16u_gen::min , word lin16u_gen::max , word* lin16u_gen::lintab , word lin16u_gen::length)
word~ lin16u_gen::$6 zp[2]:24 202.0
word lin16u_gen::ampl
word lin16u_gen::ampl#0 ampl zp[2]:7 22.0
word lin16u_gen::i
word lin16u_gen::i#1 i zp[2]:11 202.0
word lin16u_gen::i#2 i zp[2]:11 50.5
word lin16u_gen::length
word* lin16u_gen::lintab
word* lin16u_gen::lintab#3 lintab zp[2]:13 101.0
word* lin16u_gen::lintab#4 lintab zp[2]:13 62.8
word* lin16u_gen::lintab#6 lintab zp[2]:13 0.9166666666666666
word lin16u_gen::max
word lin16u_gen::max#3 max zp[2]:7 11.0
word lin16u_gen::min
word lin16u_gen::min#3 min zp[2]:9 2.0
dword lin16u_gen::step
dword lin16u_gen::step#0 step zp[4]:20 12.444444444444443
word lin16u_gen::stepf
word lin16u_gen::stepf#0 stepf zp[2]:15 22.0
word lin16u_gen::stepi
word lin16u_gen::stepi#0 stepi zp[2]:18 4.4
dword lin16u_gen::val
dword lin16u_gen::val#0 val zp[4]:3 22.0
dword lin16u_gen::val#1 val zp[4]:3 67.33333333333333
dword lin16u_gen::val#2 val zp[4]:3 78.5
void main()
byte~ main::$28 zp[1]:17 4.888888888888889
byte main::i
byte main::i#1 i zp[1]:2 22.0
byte main::i#10 i zp[1]:2 2.75
constant word* main::lintab1[$14]  = { fill( $14, 0) }
constant word* main::lintab2[$14]  = { fill( $14, 0) }
constant word* main::lintab3[$14]  = { fill( $14, 0) }
constant byte* main::str[4]  = "   "
constant byte* main::str1[2]  = " "
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:13 2002.0
byte* memset::dst#2 dst zp[2]:13 1334.6666666666667
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#1 reg byte a 2002.0
byte print_char::ch#2 reg byte a 2002.0
byte print_char::ch#3 reg byte a 112004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:15 808.1600000000001
byte* print_char_cursor#10 print_char_cursor zp[2]:15 3274.216216216216
byte* print_char_cursor#100 print_char_cursor zp[2]:15 4.0
byte* print_char_cursor#104 print_char_cursor zp[2]:15 22.0
byte* print_char_cursor#51 print_char_cursor zp[2]:15 106002.5
byte* print_char_cursor#84 print_char_cursor zp[2]:15 404.6666666666667
byte* print_char_cursor#89 print_char_cursor zp[2]:15 144.0
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:11 790.2368421052631
byte* print_line_cursor#12 print_line_cursor zp[2]:11 20103.0
byte* print_line_cursor#23 print_line_cursor zp[2]:11 114.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:7 20002.0
byte* print_str::str#10 str zp[2]:7 10026.25
byte* print_str::str#13 str zp[2]:7 101.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#1 reg byte x 202.0
byte print_uchar::b#2 reg byte x 11.0
byte print_uchar::b#3 reg byte x 553.75
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#10 w zp[2]:9 78.33333333333333
word print_uint::w#3 w zp[2]:9 22.0
word print_uint::w#4 w zp[2]:9 22.0
word print_uint::w#5 w zp[2]:9 22.0
word rem16u
word rem16u#0 rem16u zp[2]:24 22.4

zp[1]:2 [ main::i#10 main::i#1 ]
zp[4]:3 [ lin16u_gen::val#2 lin16u_gen::val#1 lin16u_gen::val#0 ]
zp[2]:7 [ print_str::str#10 print_str::str#13 print_str::str#0 lin16u_gen::max#3 lin16u_gen::ampl#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#0 ]
zp[2]:9 [ print_uint::w#10 print_uint::w#3 print_uint::w#4 print_uint::w#5 lin16u_gen::min#3 ]
zp[2]:11 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#0 lin16u_gen::i#2 lin16u_gen::i#1 ]
reg byte x [ print_uchar::b#3 print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:13 [ memset::dst#2 memset::dst#1 lin16u_gen::lintab#4 lin16u_gen::lintab#3 lin16u_gen::lintab#6 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:15 [ print_char_cursor#51 print_char_cursor#84 print_char_cursor#104 print_char_cursor#1 print_char_cursor#89 print_char_cursor#10 print_char_cursor#100 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 lin16u_gen::stepf#0 ]
zp[1]:17 [ main::$28 ]
zp[2]:18 [ lin16u_gen::stepi#0 ]
zp[4]:20 [ lin16u_gen::step#0 ]
zp[2]:24 [ lin16u_gen::$6 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
