
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 5
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = 2 + main::i#2
  main::$1 = main::$0 + 2
  main::buf[main::i#2] = main::$1
  main::$2 = main::i#2 + 1
  main::i#1 = main::$2
  main::$3 = main::i#1 < $a
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
number~ main::$0
number~ main::$1
number~ main::$2
bool~ main::$3
label main::@1
label main::@return
const byte* main::buf[$10]  = (byte*)$1100
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2

Adding number conversion cast (unumber) 2 in main::$0 = 2 + main::i#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)2 + main::i#2
Adding number conversion cast (unumber) 2 in main::$1 = main::$0 + 2
Adding number conversion cast (unumber) main::$1 in main::$1 = main::$0 + (unumber)2
Adding number conversion cast (unumber) 1 in main::$2 = main::i#2 + 1
Adding number conversion cast (unumber) main::$2 in main::$2 = main::i#2 + (unumber)1
Adding number conversion cast (unumber) $a in main::$3 = main::i#1 < $a
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 4352
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 2
Finalized unsigned number type 2
Finalized unsigned number type 1
Finalized unsigned number type $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = 2 + main::i#2
Inferred type updated to byte in main::$1 = main::$0 + 2
Inferred type updated to byte in main::$2 = main::i#2 + 1
Alias main::i#1 = main::$2 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$3 [7] if(main::i#1<$a) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 5
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 5
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment main::$1
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::i#2 = main::$0 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/5, main::@1/main::i#1 )
  [2] main::$1 = main::i#2 + 2+2
  [3] main::buf[main::i#2] = main::$1
  [4] main::i#1 = main::i#2 + 1
  [5] if(main::i#1<$a) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 291 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 291 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label buf = $1100
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 5 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #5
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$1 = main::i#2 + 2+2 -- vbuaa=vbuxx_plus_vbuc1 
    txa
    clc
    adc #2+2
    // [3] main::buf[main::i#2] = main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta buf,x
    // [4] main::i#1 = main::i#2 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [5] if(main::i#1<$a) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$1 reg byte a 22.0
label main::@1
label main::@return
const byte* main::buf[$10]  = (byte*) 4352
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 201

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label buf = $1100
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 5 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #5
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // 2+i+2
    // [2] main::$1 = main::i#2 + 2+2 -- vbuaa=vbuxx_plus_vbuc1 
    txa
    clc
    adc #2+2
    // buf[i] = 2+i+2
    // [3] main::buf[main::i#2] = main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta buf,x
    // i = i+1
    // [4] main::i#1 = main::i#2 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // while(i<10)
    // [5] if(main::i#1<$a) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

