Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[$f]) fibs#0 ← ((byte*)) (number) $1100
  to:@1
main: scope:[main]  from @1
  *((byte[$f]) fibs#0 + (number) 0) ← (number) 0
  *((byte[$f]) fibs#0 + (number) 1) ← (number) 1
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (number~) main::$0 ← (byte) main::i#2 + (number) 2
  (number~) main::$1 ← (byte) main::i#2 + (number) 1
  (byte~) main::$2 ← *((byte[$f]) fibs#0 + (byte) main::i#2) + *((byte[$f]) fibs#0 + (number~) main::$1)
  *((byte[$f]) fibs#0 + (number~) main::$0) ← (byte~) main::$2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (bool~) main::$3 ← (byte) main::i#1 < (number) $f
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte[$f]) fibs
(byte[$f]) fibs#0
(void()) main()
(number~) main::$0
(number~) main::$1
(byte~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Adding number conversion cast (unumber) 0 in *((byte[$f]) fibs#0 + (number) 0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte[$f]) fibs#0 + (number) 0) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 1 in *((byte[$f]) fibs#0 + (number) 1) ← (number) 1
Adding number conversion cast (unumber) 1 in *((byte[$f]) fibs#0 + (number) 1) ← ((unumber)) (number) 1
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) main::$0 ← (byte) main::i#2 + (number) 2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::i#2 + (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::i#2 + (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::i#2 + (unumber)(number) 1
Adding number conversion cast (unumber) $f in (bool~) main::$3 ← (byte) main::i#1 < (number) $f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte[$f]) fibs#0 ← (byte*)(number) $1100
Inlining cast *((byte[$f]) fibs#0 + (unumber)(number) 0) ← (unumber)(number) 0
Inlining cast *((byte[$f]) fibs#0 + (unumber)(number) 1) ← (unumber)(number) 1
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 4352
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::i#2 + (byte) 2
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::i#2 + (byte) 1
Simple Condition (bool~) main::$3 [11] if((byte) main::i#1<(byte) $f) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte[$f]) fibs#0 = (byte*) 4352
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero fibs#0 in [1] *((const byte[$f]) fibs#0 + (byte) 0) ← (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(fibs#0+1)
Consolidated array index constant in assignment *(fibs#0+1 + main::$1)
Consolidated array index constant in assignment *(fibs#0+2 + main::$0)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (byte) main::i#2 = (byte~) main::$0 (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [13] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte[$f]) fibs#0) ← (byte) 0
  [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2)
  [8] *((const byte[$f]) fibs#0+(byte) 2 + (byte) main::i#2) ← (byte~) main::$2
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1<(byte) $f) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte[$f]) fibs
(void()) main()
(byte~) main::$2 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 18.333333333333332

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$2 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label fibs = $1100
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label _2 = 3
    .label i = 2
  //SEG10 [4] *((const byte[$f]) fibs#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta fibs
  //SEG11 [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta fibs+1
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG14 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG15 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc2_derefidx_vbuz2 
    ldy i
    lda fibs,y
    clc
    adc fibs+1,y
    sta _2
  //SEG18 [8] *((const byte[$f]) fibs#0+(byte) 2 + (byte) main::i#2) ← (byte~) main::$2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _2
    ldy i
    sta fibs+2,y
  //SEG19 [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG20 [10] if((byte) main::i#1<(byte) $f) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #$f
    bcc b1_from_b1
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return 
    rts
}
//SEG23 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte[$f]) fibs#0) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2) [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [4] *((const byte[$f]) fibs#0) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2) [ main::i#2 main::$2 ] ( main:2 [ main::i#2 main::$2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$2 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:3 [ main::$2 ] 
Uplift Scope [] 

Uplifting [main] best 365 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$2 ] 
Uplifting [] best 365 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label fibs = $1100
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *((const byte[$f]) fibs#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta fibs
  //SEG11 [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta fibs+1
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG14 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG15 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuxx_plus_pbuc2_derefidx_vbuxx 
    lda fibs,x
    clc
    adc fibs+1,x
  //SEG18 [8] *((const byte[$f]) fibs#0+(byte) 2 + (byte) main::i#2) ← (byte~) main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta fibs+2,x
  //SEG19 [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [10] if((byte) main::i#1<(byte) $f) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc b1_from_b1
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [11] return 
    rts
}
//SEG23 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte[$f]) fibs
(const byte[$f]) fibs#0 fibs = (byte*) 4352
(void()) main()
(byte~) main::$2 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 18.333333333333332

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 263

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label fibs = $1100
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [4] *((const byte[$f]) fibs#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta fibs
  //SEG11 [5] *((const byte[$f]) fibs#0+(byte) 1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta fibs+1
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG14 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG15 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte~) main::$2 ← *((const byte[$f]) fibs#0 + (byte) main::i#2) + *((const byte[$f]) fibs#0+(byte) 1 + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuxx_plus_pbuc2_derefidx_vbuxx 
    lda fibs,x
    clc
    adc fibs+1,x
  //SEG18 [8] *((const byte[$f]) fibs#0+(byte) 2 + (byte) main::i#2) ← (byte~) main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta fibs+2,x
  //SEG19 [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [10] if((byte) main::i#1<(byte) $f) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc b1
  //SEG21 main::@return
  //SEG22 [11] return 
    rts
}
//SEG23 File Data

