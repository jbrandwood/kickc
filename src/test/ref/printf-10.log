Added struct type cast to parameter value list call printf_string (byte*) main::name (struct printf_format_string){ (byte) 0, (byte) 0 } 
Eliminating unused variable with no statement (void~) main::$0

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) screen#0 ← (byte*)(number) $400
  to:@1

(void()) cputs((byte*) cputs::str)
cputs: scope:[cputs]  from main main::@2 printf_string
  (byte*) screen#23 ← phi( main/(byte*) screen#21 main::@2/(byte*) screen#6 printf_string/(byte*) screen#20 )
  (byte*) cputs::str#6 ← phi( main/(byte*) cputs::str#2 main::@2/(byte*) cputs::str#3 printf_string/(byte*) cputs::str#1 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  (byte*) screen#19 ← phi( cputs/(byte*) screen#23 cputs::@2/(byte*) screen#1 )
  (byte*) cputs::str#4 ← phi( cputs/(byte*) cputs::str#6 cputs::@2/(byte*) cputs::str#0 )
  (bool~) cputs::$0 ← (number) 0 != *((byte*) cputs::str#4)
  if((bool~) cputs::$0) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (byte*) screen#10 ← phi( cputs::@1/(byte*) screen#19 )
  (byte*) cputs::str#5 ← phi( cputs::@1/(byte*) cputs::str#4 )
  *((byte*) screen#10) ← *((byte*) cputs::str#5)
  (byte*) screen#1 ← ++ (byte*) screen#10
  (byte*) cputs::str#0 ← ++ (byte*) cputs::str#5
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  (byte*) screen#11 ← phi( cputs::@1/(byte*) screen#19 )
  (byte*) screen#2 ← (byte*) screen#11
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1
  (byte*) screen#20 ← phi( main::@1/(byte*) screen#5 )
  (byte*) printf_string::str#1 ← phi( main::@1/(byte*) printf_string::str#0 )
  (byte*) cputs::str#1 ← (byte*) printf_string::str#1
  call cputs 
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  (byte*) screen#12 ← phi( printf_string/(byte*) screen#2 )
  (byte*) screen#3 ← (byte*) screen#12
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  (byte*) screen#13 ← phi( printf_string::@1/(byte*) screen#3 )
  (byte*) screen#4 ← (byte*) screen#13
  return 
  to:@return

(void()) main()
main: scope:[main]  from @1
  (byte*) screen#21 ← phi( @1/(byte*) screen#22 )
  (byte*) cputs::str#2 ← (const byte*) main::str
  call cputs 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#14 ← phi( main/(byte*) screen#2 )
  (byte*) screen#5 ← (byte*) screen#14
  (byte*) printf_string::str#0 ← (const byte*) main::name
  (byte) printf_string::format_min_length#0 ← (byte) 0
  (byte) printf_string::format_justify_left#0 ← (byte) 0
  call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#15 ← phi( main::@1/(byte*) screen#4 )
  (byte*) screen#6 ← (byte*) screen#15
  (byte*) cputs::str#3 ← (const byte*) main::str1
  call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) screen#16 ← phi( main::@2/(byte*) screen#2 )
  (byte*) screen#7 ← (byte*) screen#16
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte*) screen#17 ← phi( main::@3/(byte*) screen#7 )
  (byte*) screen#8 ← (byte*) screen#17
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) screen#22 ← phi( @begin/(byte*) screen#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte*) screen#18 ← phi( @1/(byte*) screen#8 )
  (byte*) screen#9 ← (byte*) screen#18
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) cputs((byte*) cputs::str)
(bool~) cputs::$0
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte*) cputs::str
(byte*) cputs::str#0
(byte*) cputs::str#1
(byte*) cputs::str#2
(byte*) cputs::str#3
(byte*) cputs::str#4
(byte*) cputs::str#5
(byte*) cputs::str#6
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const byte*) main::name = (byte*) "Jesper"
(const byte*) main::str[(byte) $d]  = (byte*) "Hello, I am "
(const byte*) main::str1[(byte) $f]  = (byte*) ". who are you?"
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(label) printf_string::@1
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#15
(byte*) screen#16
(byte*) screen#17
(byte*) screen#18
(byte*) screen#19
(byte*) screen#2
(byte*) screen#20
(byte*) screen#21
(byte*) screen#22
(byte*) screen#23
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Adding number conversion cast (unumber) 0 in (bool~) cputs::$0 ← (number) 0 != *((byte*) cputs::str#4)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias cputs::str#4 = cputs::str#5 
Alias screen#10 = screen#19 screen#11 screen#2 
Alias screen#12 = screen#3 screen#13 screen#4 
Alias screen#14 = screen#5 
Alias screen#15 = screen#6 
Alias screen#16 = screen#7 screen#17 screen#8 
Alias screen#0 = screen#22 
Alias screen#18 = screen#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) printf_string::str#1 (byte*) printf_string::str#0
Identical Phi Values (byte*) screen#20 (byte*) screen#14
Identical Phi Values (byte*) screen#12 (byte*) screen#10
Identical Phi Values (byte*) screen#21 (byte*) screen#0
Identical Phi Values (byte*) screen#14 (byte*) screen#10
Identical Phi Values (byte*) screen#15 (byte*) screen#12
Identical Phi Values (byte*) screen#16 (byte*) screen#10
Identical Phi Values (byte*) screen#18 (byte*) screen#16
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) cputs::$0 [4] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) screen#0 = (byte*) 1024
Constant (const byte*) cputs::str#2 = main::str
Constant (const byte*) printf_string::str#0 = main::name
Constant (const byte) printf_string::format_min_length#0 = 0
Constant (const byte) printf_string::format_justify_left#0 = 0
Constant (const byte*) cputs::str#3 = main::str1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) cputs::str#1 = printf_string::str#0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) printf_string::format_min_length#0
Eliminating unused constant (const byte) printf_string::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) cputs::str#2
Inlining constant with var siblings (const byte*) cputs::str#3
Inlining constant with var siblings (const byte*) cputs::str#1
Inlining constant with var siblings (const byte*) screen#0
Constant inlined cputs::str#1 = (const byte*) main::name
Constant inlined cputs::str#2 = (const byte*) main::str
Constant inlined cputs::str#3 = (const byte*) main::str1
Constant inlined printf_string::str#0 = (const byte*) main::name
Constant inlined screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of printf_string::@1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to cputs:6 printf_string:8 cputs:10 
Calls in [printf_string] to cputs:25 

Created 4 initial phi equivalence classes
Coalesced [9] screen#24 ← screen#10
Coalesced [14] cputs::str#7 ← cputs::str#6
Coalesced (already) [15] screen#26 ← screen#23
Coalesced [22] cputs::str#8 ← cputs::str#0
Coalesced [23] screen#27 ← screen#1
Coalesced (already) [24] screen#25 ← screen#10
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) printf_string::@1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of printf_string

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call cputs 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) cputs((byte*) cputs::str)
cputs: scope:[cputs]  from main main::@2 printf_string
  [11] (byte*) screen#23 ← phi( main/(byte*) 1024 main::@2/(byte*) screen#10 printf_string/(byte*) screen#10 )
  [11] (byte*) cputs::str#6 ← phi( main/(const byte*) main::str main::@2/(const byte*) main::str1 printf_string/(const byte*) main::name )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [12] (byte*) screen#10 ← phi( cputs/(byte*) screen#23 cputs::@2/(byte*) screen#1 )
  [12] (byte*) cputs::str#4 ← phi( cputs/(byte*) cputs::str#6 cputs::@2/(byte*) cputs::str#0 )
  [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [14] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [15] *((byte*) screen#10) ← *((byte*) cputs::str#4)
  [16] (byte*) screen#1 ← ++ (byte*) screen#10
  [17] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4
  to:cputs::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1
  [18] phi()
  [19] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) cputs((byte*) cputs::str)
(byte*) cputs::str
(byte*) cputs::str#0 20002.0
(byte*) cputs::str#4 10251.25
(byte*) cputs::str#6 1001.0
(void()) main()
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(byte*) printf_string::str
(byte*) screen
(byte*) screen#1 10001.0
(byte*) screen#10 2828.7272727272725
(byte*) screen#23 1113.0

Initial phi equivalence classes
[ screen#23 screen#10 screen#1 ]
[ cputs::str#4 cputs::str#6 cputs::str#0 ]
Complete equivalence classes
[ screen#23 screen#10 screen#1 ]
[ cputs::str#4 cputs::str#6 cputs::str#0 ]
Allocated zp[2]:2 [ screen#23 screen#10 screen#1 ]
Allocated zp[2]:4 [ cputs::str#4 cputs::str#6 cputs::str#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests printf function call rewriting
// A simple string - with the printf-sub cuntions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call cputs 
    // [11] phi from main to cputs [phi:main->cputs]
  cputs_from_main:
    // [11] phi (byte*) screen#23 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call printf_string 
    // [18] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    jsr printf_string
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call cputs 
    // [11] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:main::@2->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    name: .text "Jesper"
    .byte 0
    str: .text "Hello, I am "
    .byte 0
    str1: .text ". who are you?"
    .byte 0
}
  // cputs
// cputs(byte* zp(4) str)
cputs: {
    .label str = 4
    // [12] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [12] phi (byte*) screen#10 = (byte*) screen#23 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [12] phi (byte*) cputs::str#4 = (byte*) cputs::str#6 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [14] return 
    rts
    // cputs::@2
  __b2:
    // [15] *((byte*) screen#10) ← *((byte*) cputs::str#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (screen),y
    // [16] (byte*) screen#1 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length
printf_string: {
    // [19] call cputs 
    // [11] phi from printf_string to cputs [phi:printf_string->cputs]
  cputs_from_printf_string:
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:printf_string->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::name [phi:printf_string->cputs#1] -- pbuz1=pbuc1 
    lda #<main.name
    sta.z cputs.str
    lda #>main.name
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2 [ screen#10 cputs::str#4 ] ( main:2::cputs:5 [ screen#10 cputs::str#4 ] { }  main:2::cputs:9 [ screen#10 cputs::str#4 ] { { screen#10 = screen#23 } }  main:2::printf_string:7::cputs:19 [ screen#10 cputs::str#4 ] { { screen#10 = screen#23 } }  ) always clobbers reg byte a reg byte y 
Statement [15] *((byte*) screen#10) ← *((byte*) cputs::str#4) [ screen#10 cputs::str#4 ] ( main:2::cputs:5 [ screen#10 cputs::str#4 ] { }  main:2::cputs:9 [ screen#10 cputs::str#4 ] { { screen#10 = screen#23 } }  main:2::printf_string:7::cputs:19 [ screen#10 cputs::str#4 ] { { screen#10 = screen#23 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ screen#23 screen#10 screen#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ cputs::str#4 cputs::str#6 cputs::str#0 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [cputs] 31,254.25: zp[2]:4 [ cputs::str#4 cputs::str#6 cputs::str#0 ] 
Uplift Scope [] 13,942.73: zp[2]:2 [ screen#23 screen#10 screen#1 ] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_string] 
Uplift Scope [main] 

Uplifting [cputs] best 721 combination zp[2]:4 [ cputs::str#4 cputs::str#6 cputs::str#0 ] 
Uplifting [] best 721 combination zp[2]:2 [ screen#23 screen#10 screen#1 ] 
Uplifting [printf_format_string] best 721 combination 
Uplifting [printf_string] best 721 combination 
Uplifting [main] best 721 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf function call rewriting
// A simple string - with the printf-sub cuntions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call cputs 
    // [11] phi from main to cputs [phi:main->cputs]
  cputs_from_main:
    // [11] phi (byte*) screen#23 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call printf_string 
    // [18] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    jsr printf_string
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call cputs 
    // [11] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:main::@2->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    name: .text "Jesper"
    .byte 0
    str: .text "Hello, I am "
    .byte 0
    str1: .text ". who are you?"
    .byte 0
}
  // cputs
// cputs(byte* zp(4) str)
cputs: {
    .label str = 4
    // [12] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [12] phi (byte*) screen#10 = (byte*) screen#23 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [12] phi (byte*) cputs::str#4 = (byte*) cputs::str#6 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [14] return 
    rts
    // cputs::@2
  __b2:
    // [15] *((byte*) screen#10) ← *((byte*) cputs::str#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (screen),y
    // [16] (byte*) screen#1 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length
printf_string: {
    // [19] call cputs 
    // [11] phi from printf_string to cputs [phi:printf_string->cputs]
  cputs_from_printf_string:
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:printf_string->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::name [phi:printf_string->cputs#1] -- pbuz1=pbuc1 
    lda #<main.name
    sta.z cputs.str
    lda #>main.name
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction printf_string_from___b1:
Removing instruction __b2_from___b1:
Removing instruction cputs_from___b2:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction cputs_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction cputs_from_printf_string:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) cputs((byte*) cputs::str)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte*) cputs::str
(byte*) cputs::str#0 str zp[2]:4 20002.0
(byte*) cputs::str#4 str zp[2]:4 10251.25
(byte*) cputs::str#6 str zp[2]:4 1001.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::name = (byte*) "Jesper"
(const byte*) main::str[(byte) $d]  = (byte*) "Hello, I am "
(const byte*) main::str1[(byte) $f]  = (byte*) ". who are you?"
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_min_length
(byte*) printf_string::str
(byte*) screen
(byte*) screen#1 screen zp[2]:2 10001.0
(byte*) screen#10 screen zp[2]:2 2828.7272727272725
(byte*) screen#23 screen zp[2]:2 1113.0

zp[2]:2 [ screen#23 screen#10 screen#1 ]
zp[2]:4 [ cputs::str#4 cputs::str#6 cputs::str#0 ]


FINAL ASSEMBLER
Score: 617

  // File Comments
// Tests printf function call rewriting
// A simple string - with the printf-sub cuntions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // printf("Hello, I am %s. who are you?", name)
    // [5] call cputs 
    // [11] phi from main to cputs [phi:main->cputs]
    // [11] phi (byte*) screen#23 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf("Hello, I am %s. who are you?", name)
    // [7] call printf_string 
    // [18] phi from main::@1 to printf_string [phi:main::@1->printf_string]
    jsr printf_string
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("Hello, I am %s. who are you?", name)
    // [9] call cputs 
    // [11] phi from main::@2 to cputs [phi:main::@2->cputs]
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:main::@2->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    // main::@return
    // }
    // [10] return 
    rts
    name: .text "Jesper"
    .byte 0
    str: .text "Hello, I am "
    .byte 0
    str1: .text ". who are you?"
    .byte 0
}
  // cputs
// cputs(byte* zp(4) str)
cputs: {
    .label str = 4
    // [12] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [12] phi (byte*) screen#10 = (byte*) screen#23 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [12] phi (byte*) cputs::str#4 = (byte*) cputs::str#6 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    // cputs::@1
  __b1:
    // while(*str)
    // [13] if((byte) 0!=*((byte*) cputs::str#4)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [14] return 
    rts
    // cputs::@2
  __b2:
    // *screen++ = *str++
    // [15] *((byte*) screen#10) ← *((byte*) cputs::str#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (screen),y
    // *screen++ = *str++;
    // [16] (byte*) screen#1 ← ++ (byte*) screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length
printf_string: {
    // cputs(str)
    // [19] call cputs 
    // [11] phi from printf_string to cputs [phi:printf_string->cputs]
    // [11] phi (byte*) screen#23 = (byte*) screen#10 [phi:printf_string->cputs#0] -- register_copy 
    // [11] phi (byte*) cputs::str#6 = (const byte*) main::name [phi:printf_string->cputs#1] -- pbuz1=pbuc1 
    lda #<main.name
    sta.z cputs.str
    lda #>main.name
    sta.z cputs.str+1
    jsr cputs
    // printf_string::@return
    // }
    // [20] return 
    rts
}
  // File Data

