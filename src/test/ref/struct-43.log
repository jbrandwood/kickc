Fixing struct type size struct Point to 7
Fixing struct type SIZE_OF struct Point to 7
Fixing struct type SIZE_OF struct Point to 7

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const nomodify word*) SCREEN + (number~) main::$0) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID)
  (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
  (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
  *((const nomodify word*) SCREEN + (number~) main::$2) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS + (number~) main::$1)
  (number~) main::$3 ← (number) 1 * (const byte) SIZEOF_WORD
  (number~) main::$4 ← (number) 2 * (const byte) SIZEOF_WORD
  *((const nomodify word*) SCREEN + (number~) main::$4) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS + (number~) main::$3)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) OFFSET_STRUCT_POINT_ID = (byte) 5
(const byte) OFFSET_STRUCT_POINT_POS = (byte) 1
(word) Point::id
(const word*) Point::pos[(number) 2]  = { fill( 2, 0) }
(byte) Point::x
(const nomodify word*) SCREEN = (word*)(number) $400
(const byte) SIZEOF_WORD = (byte) 2
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(number~) main::$2
(number~) main::$3
(number~) main::$4
(label) main::@return
(struct Point) point1 loadstore = { x: (byte) 4, pos: { (word) 1, (word) 2 }, id: (word) 3 }

Adding number conversion cast (unumber) 0 in (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 0 in (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$3 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in (number~) main::$4 ← (number) 2 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber)(number) 2 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$3 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$4 ← (byte) 2 * (const byte) SIZEOF_WORD
Constant right-side identified [0] (byte~) main::$0 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [2] (byte~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [3] (byte~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [5] (byte~) main::$3 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [6] (byte~) main::$4 ← (byte) 2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = 0*SIZEOF_WORD
Constant (const byte) main::$1 = 0*SIZEOF_WORD
Constant (const byte) main::$2 = 1*SIZEOF_WORD
Constant (const byte) main::$3 = 1*SIZEOF_WORD
Constant (const byte) main::$4 = 2*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN in [1] *((const nomodify word*) SCREEN + (const byte) main::$0) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID)
Simplifying expression containing zero (word*)&point1+OFFSET_STRUCT_POINT_POS in [4] *((const nomodify word*) SCREEN + (const byte) main::$2) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS + (const byte) main::$1)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$0
Eliminating unused constant (const byte) main::$1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$3 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$4 = (byte) 2*(const byte) SIZEOF_WORD
Constant inlined main::$2 = (byte) 1*(const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+1*SIZEOF_WORD)
Consolidated array index constant in *((word*)&point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD)
Consolidated array index constant in *(SCREEN+2*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify word*) SCREEN) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID)
  [1] *((const nomodify word*) SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS)
  [2] *((const nomodify word*) SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS+(byte) 1*(const byte) SIZEOF_WORD)
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word) Point::id
(byte) Point::x
(void()) main()
(struct Point) point1 loadstore = { x: (byte) 4, pos: { (word) 1, (word) 2 }, id: (word) 3 }

Initial phi equivalence classes
Added variable point1 to live range equivalence class [ point1 ]
Complete equivalence classes
[ point1 ]
Allocated mem[7] [ point1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct with C-Standard behavior - struct with internal int array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const OFFSET_STRUCT_POINT_ID = 5
  .const OFFSET_STRUCT_POINT_POS = 1
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify word*) SCREEN) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_ID
    sta SCREEN
    lda point1+OFFSET_STRUCT_POINT_ID+1
    sta SCREEN+1
    // [1] *((const nomodify word*) SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS
    sta SCREEN+1*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1
    sta SCREEN+1*SIZEOF_WORD+1
    // [2] *((const nomodify word*) SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD
    sta SCREEN+2*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD+1
    sta SCREEN+2*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
  point1: .byte 4
  .word 1, 2, 3

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify word*) SCREEN) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID) [ point1 ] (  [ point1 ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify word*) SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS) [ point1 ] (  [ point1 ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify word*) SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS+(byte) 1*(const byte) SIZEOF_WORD) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers mem[7] [ point1 ] : mem[7] , 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[7] [ point1 ] 

Uplifting [Point] best 57 combination 
Uplifting [main] best 57 combination 
Uplifting [] best 57 combination mem[7] [ point1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - struct with internal int array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const OFFSET_STRUCT_POINT_ID = 5
  .const OFFSET_STRUCT_POINT_POS = 1
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify word*) SCREEN) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_ID
    sta SCREEN
    lda point1+OFFSET_STRUCT_POINT_ID+1
    sta SCREEN+1
    // [1] *((const nomodify word*) SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS
    sta SCREEN+1*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1
    sta SCREEN+1*SIZEOF_WORD+1
    // [2] *((const nomodify word*) SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD
    sta SCREEN+2*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD+1
    sta SCREEN+2*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
  point1: .byte 4
  .word 1, 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) OFFSET_STRUCT_POINT_ID = (byte) 5
(const byte) OFFSET_STRUCT_POINT_POS = (byte) 1
(word) Point::id
(const word*) Point::pos[(number) 2]  = { fill( 2, 0) }
(byte) Point::x
(const nomodify word*) SCREEN = (word*) 1024
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(struct Point) point1 loadstore mem[7] = { x: (byte) 4, pos: { (word) 1, (word) 2 }, id: (word) 3 }

mem[7] [ point1 ]


FINAL ASSEMBLER
Score: 54

  // File Comments
// Minimal struct with C-Standard behavior - struct with internal int array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .const OFFSET_STRUCT_POINT_ID = 5
  .const OFFSET_STRUCT_POINT_POS = 1
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = point1.id
    // [0] *((const nomodify word*) SCREEN) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_ID) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_ID
    sta SCREEN
    lda point1+OFFSET_STRUCT_POINT_ID+1
    sta SCREEN+1
    // SCREEN[1] = point1.pos[0]
    // [1] *((const nomodify word*) SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS
    sta SCREEN+1*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1
    sta SCREEN+1*SIZEOF_WORD+1
    // SCREEN[2] = point1.pos[1]
    // [2] *((const nomodify word*) SCREEN+(byte) 2*(const byte) SIZEOF_WORD) ← *((word*)&(struct Point) point1+(const byte) OFFSET_STRUCT_POINT_POS+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD
    sta SCREEN+2*SIZEOF_WORD
    lda point1+OFFSET_STRUCT_POINT_POS+1*SIZEOF_WORD+1
    sta SCREEN+2*SIZEOF_WORD+1
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data
  point1: .byte 4
  .word 1, 2, 3

