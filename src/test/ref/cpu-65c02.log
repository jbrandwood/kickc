
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::a#0 = SCREEN[0]
  main::$0 = main::a#0 + 1
  SCREEN[1] = main::$0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
number~ main::$0
byte main::a
byte main::a#0

Adding number conversion cast (unumber) 0 in main::a#0 = SCREEN[0]
Adding number conversion cast (unumber) 1 in main::$0 = main::a#0 + 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::a#0 + (unumber)1
Adding number conversion cast (unumber) 1 in SCREEN[1] = main::$0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::a#0 + 1
Simplifying expression containing zero SCREEN in [0] main::a#0 = SCREEN[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::a#0 = *SCREEN
  [1] main::$0 = main::a#0 + 1
  [2] *(SCREEN+1) = main::$0
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 4.0
byte main::a
byte main::a#0 4.0

Initial phi equivalence classes
Added variable main::a#0 to live range equivalence class [ main::a#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::a#0 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::a#0 ]
Allocated zp[1]:3 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::a#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp[1]:2 [ main::a#0 ] 4: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 19 combination reg byte a [ main::a#0 ] reg byte a [ main::$0 ] 
Uplifting [] best 19 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the 65C02 CPU
// A program that uses 65C02 instructions
  // Upstart
.cpu _65c02
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [0] main::a#0 = *SCREEN -- vbuaa=_deref_pbuc1 
    lda SCREEN
    // [1] main::$0 = main::a#0 + 1 -- vbuaa=vbuaa_plus_1 
    inc
    // [2] *(SCREEN+1) = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte~ main::$0 reg byte a 4.0
byte main::a
byte main::a#0 reg byte a 4.0

reg byte a [ main::a#0 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 16

  // File Comments
// Test the 65C02 CPU
// A program that uses 65C02 instructions
  // Upstart
.cpu _65c02
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // a = SCREEN[0]
    // [0] main::a#0 = *SCREEN -- vbuaa=_deref_pbuc1 
    lda SCREEN
    // a+1
    // [1] main::$0 = main::a#0 + 1 -- vbuaa=vbuaa_plus_1 
    inc
    // SCREEN[1] = a+1
    // [2] *(SCREEN+1) = main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

