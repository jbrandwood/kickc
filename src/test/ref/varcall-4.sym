__constant char * const COLS = (char *) 53280
__constant char OFFSET_STRUCT_COLS_BG = 1
__constant char OFFSET_STRUCT_COLS_FG = 2
__constant char SIZEOF_STRUCT_COLS = 3
__loadstore struct Cols a = { border: 1, bg: 2, fg: 3 } // mem[3]
__loadstore struct Cols b = { border: 3, bg: 4, fg: 6 } // mem[3]
__loadstore struct Cols c = { border: 5, bg: 6, fg: 7 } // mem[3]
__loadstore struct Cols d = {} // mem[3]
__varcall char fg_sum(char a_border , char a_bg , char a_fg , char b_border , char b_bg , char b_fg)
char fg_sum::$0 // reg byte a 22.0
__loadstore char fg_sum::a_bg // zp[1]:3 40.0
__loadstore char fg_sum::a_border // zp[1]:2 40.0
__loadstore char fg_sum::a_fg // zp[1]:8 1.875
__loadstore char fg_sum::b_bg // zp[1]:5 40.0
__loadstore char fg_sum::b_border // zp[1]:4 40.0
__loadstore char fg_sum::b_fg // zp[1]:6 7.5
__loadstore char fg_sum::return // zp[1]:7 3.75
void main()
char main::sum1
char main::sum1#0 // reg byte a 4.0
char main::sum2
char main::sum2#0 // reg byte a 4.0

reg byte a [ fg_sum::$0 ]
zp[1]:7 [ fg_sum::return ]
zp[1]:2 [ fg_sum::a_border ]
zp[1]:3 [ fg_sum::a_bg ]
zp[1]:8 [ fg_sum::a_fg ]
zp[1]:4 [ fg_sum::b_border ]
zp[1]:5 [ fg_sum::b_bg ]
zp[1]:6 [ fg_sum::b_fg ]
reg byte a [ main::sum1#0 ]
reg byte a [ main::sum2#0 ]
mem[3] [ a ]
mem[3] [ b ]
mem[3] [ c ]
mem[3] [ d ]
