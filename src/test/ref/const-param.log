
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  sum::a#0 = main::reverse
  sum::b#0 = 'c'
  call sum 
  sum::return#0 = sum::return#4
  to:main::@1
main::@1: scope:[main]  from main
  sum::return#5 = phi( main/sum::return#0 )
  main::$0 = sum::return#5
  main::screen[0] = main::$0
  sum::a#1 = main::reverse
  sum::b#1 = 'm'
  call sum 
  sum::return#1 = sum::return#4
  to:main::@2
main::@2: scope:[main]  from main::@1
  sum::return#6 = phi( main::@1/sum::return#1 )
  main::$1 = sum::return#6
  main::screen[1] = main::$1
  sum::a#2 = main::reverse
  sum::b#2 = 'l'
  call sum 
  sum::return#2 = sum::return#4
  to:main::@3
main::@3: scope:[main]  from main::@2
  sum::return#7 = phi( main::@2/sum::return#2 )
  main::$2 = sum::return#7
  main::screen[2] = main::$2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

byte sum(byte sum::a , byte sum::b)
sum: scope:[sum]  from main main::@1 main::@2
  sum::b#3 = phi( main/sum::b#0, main::@1/sum::b#1, main::@2/sum::b#2 )
  sum::a#3 = phi( main/sum::a#0, main::@1/sum::a#1, main::@2/sum::a#2 )
  sum::$0 = sum::a#3 + sum::b#3
  sum::return#3 = sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  sum::return#8 = phi( sum/sum::return#3 )
  sum::return#4 = sum::return#8
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
byte~ main::$0
byte~ main::$1
byte~ main::$2
const nomodify byte main::reverse = $80
const byte* main::screen = (byte*)$400
byte sum(byte sum::a , byte sum::b)
byte~ sum::$0
byte sum::a
byte sum::a#0
byte sum::a#1
byte sum::a#2
byte sum::a#3
byte sum::b
byte sum::b#0
byte sum::b#1
byte sum::b#2
byte sum::b#3
byte sum::return
byte sum::return#0
byte sum::return#1
byte sum::return#2
byte sum::return#3
byte sum::return#4
byte sum::return#5
byte sum::return#6
byte sum::return#7
byte sum::return#8

Adding number conversion cast (unumber) 0 in main::screen[0] = main::$0
Adding number conversion cast (unumber) 1 in main::screen[1] = main::$1
Adding number conversion cast (unumber) 2 in main::screen[2] = main::$2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias sum::return#0 = sum::return#5 
Alias sum::return#1 = sum::return#6 
Alias sum::return#2 = sum::return#7 
Alias sum::return#3 = sum::$0 sum::return#8 sum::return#4 
Successful SSA optimization Pass2AliasElimination
Constant sum::a#0 = main::reverse
Constant sum::b#0 = 'c'
Constant sum::a#1 = main::reverse
Constant sum::b#1 = 'm'
Constant sum::a#2 = main::reverse
Constant sum::b#2 = 'l'
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen in [5] main::screen[0] = main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings sum::a#0
Inlining constant with var siblings sum::b#0
Inlining constant with var siblings sum::a#1
Inlining constant with var siblings sum::b#1
Inlining constant with var siblings sum::a#2
Inlining constant with var siblings sum::b#2
Constant inlined sum::a#2 = main::reverse
Constant inlined sum::b#1 = 'm'
Constant inlined sum::a#1 = main::reverse
Constant inlined sum::b#0 = 'c'
Constant inlined sum::b#2 = 'l'
Constant inlined sum::a#0 = main::reverse
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::screen+1)
Consolidated array index constant in *(main::screen+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values sum::a#3 main::reverse
Successful SSA optimization Pass2IdenticalPhiElimination
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to sum:1 sum:5 sum:9 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call sum 
  [2] sum::return#0 = sum::return#3
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::$0 = sum::return#0
  [4] *main::screen = main::$0
  [5] call sum 
  [6] sum::return#1 = sum::return#3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] main::$1 = sum::return#1
  [8] *(main::screen+1) = main::$1
  [9] call sum 
  [10] sum::return#2 = sum::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  [11] main::$2 = sum::return#2
  [12] *(main::screen+2) = main::$2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [13] return 
  to:@return

byte sum(byte sum::a , byte sum::b)
sum: scope:[sum]  from main main::@1 main::@2
  [14] sum::b#3 = phi( main/'c', main::@1/'m', main::@2/'l' )
  [15] sum::return#3 = main::reverse + sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 4.0
byte~ main::$1 4.0
byte~ main::$2 4.0
byte sum(byte sum::a , byte sum::b)
byte sum::a
byte sum::b
byte sum::b#3 11.0
byte sum::return
byte sum::return#0 4.0
byte sum::return#1 4.0
byte sum::return#2 4.0
byte sum::return#3 3.4000000000000004

Initial phi equivalence classes
[ sum::b#3 ]
Added variable sum::return#0 to live range equivalence class [ sum::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable sum::return#1 to live range equivalence class [ sum::return#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable sum::return#2 to live range equivalence class [ sum::return#2 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable sum::return#3 to live range equivalence class [ sum::return#3 ]
Complete equivalence classes
[ sum::b#3 ]
[ sum::return#0 ]
[ main::$0 ]
[ sum::return#1 ]
[ main::$1 ]
[ sum::return#2 ]
[ main::$2 ]
[ sum::return#3 ]
Allocated zp[1]:2 [ sum::b#3 ]
Allocated zp[1]:3 [ sum::return#0 ]
Allocated zp[1]:4 [ main::$0 ]
Allocated zp[1]:5 [ sum::return#1 ]
Allocated zp[1]:6 [ main::$1 ]
Allocated zp[1]:7 [ sum::return#2 ]
Allocated zp[1]:8 [ main::$2 ]
Allocated zp[1]:9 [ sum::return#3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ sum::b#3 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ sum::return#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ sum::return#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ sum::return#2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ sum::return#3 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [sum] 11: zp[1]:2 [ sum::b#3 ] 4: zp[1]:3 [ sum::return#0 ] 4: zp[1]:5 [ sum::return#1 ] 4: zp[1]:7 [ sum::return#2 ] 3.4: zp[1]:9 [ sum::return#3 ] 
Uplift Scope [main] 4: zp[1]:4 [ main::$0 ] 4: zp[1]:6 [ main::$1 ] 4: zp[1]:8 [ main::$2 ] 
Uplift Scope [] 

Uplifting [sum] best 97 combination reg byte a [ sum::b#3 ] reg byte a [ sum::return#0 ] reg byte a [ sum::return#1 ] reg byte a [ sum::return#2 ] zp[1]:9 [ sum::return#3 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 79 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] 
Uplifting [] best 79 combination 
Attempting to uplift remaining variables inzp[1]:9 [ sum::return#3 ]
Uplifting [sum] best 67 combination reg byte a [ sum::return#3 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that the compiler optimizes when the same parameter value is passed into a function in all calls
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label reverse = $80
    .label screen = $400
    // [1] call sum 
    // [14] phi from main to sum [phi:main->sum]
  sum_from_main:
    // [14] phi sum::b#3 = 'c' [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr sum
    // [2] sum::return#0 = sum::return#3
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$0 = sum::return#0
    // [4] *main::screen = main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // [5] call sum 
    // [14] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from___b1:
    // [14] phi sum::b#3 = 'm' [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr sum
    // [6] sum::return#1 = sum::return#3
    jmp __b2
    // main::@2
  __b2:
    // [7] main::$1 = sum::return#1
    // [8] *(main::screen+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // [9] call sum 
    // [14] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from___b2:
    // [14] phi sum::b#3 = 'l' [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr sum
    // [10] sum::return#2 = sum::return#3
    jmp __b3
    // main::@3
  __b3:
    // [11] main::$2 = sum::return#2
    // [12] *(main::screen+2) = main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // sum
// sum(byte register(A) b)
sum: {
    // [15] sum::return#3 = main::reverse + sum::b#3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #main.reverse
    jmp __breturn
    // sum::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction sum_from_main:
Removing instruction __b1:
Removing instruction sum_from___b1:
Removing instruction __b2:
Removing instruction sum_from___b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 reg byte a 4.0
byte~ main::$1 reg byte a 4.0
byte~ main::$2 reg byte a 4.0
const nomodify byte main::reverse = $80
const byte* main::screen = (byte*) 1024
byte sum(byte sum::a , byte sum::b)
byte sum::a
byte sum::b
byte sum::b#3 reg byte a 11.0
byte sum::return
byte sum::return#0 reg byte a 4.0
byte sum::return#1 reg byte a 4.0
byte sum::return#2 reg byte a 4.0
byte sum::return#3 reg byte a 3.4000000000000004

reg byte a [ sum::b#3 ]
reg byte a [ sum::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ sum::return#1 ]
reg byte a [ main::$1 ]
reg byte a [ sum::return#2 ]
reg byte a [ main::$2 ]
reg byte a [ sum::return#3 ]


FINAL ASSEMBLER
Score: 52

  // File Comments
// Test that the compiler optimizes when the same parameter value is passed into a function in all calls
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label reverse = $80
    .label screen = $400
    // sum(reverse, 'c')
    // [1] call sum 
    // [14] phi from main to sum [phi:main->sum]
    // [14] phi sum::b#3 = 'c' [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr sum
    // sum(reverse, 'c')
    // [2] sum::return#0 = sum::return#3
    // main::@1
    // [3] main::$0 = sum::return#0
    // screen[0] = sum(reverse, 'c')
    // [4] *main::screen = main::$0 -- _deref_pbuc1=vbuaa 
    sta screen
    // sum(reverse, 'm')
    // [5] call sum 
    // [14] phi from main::@1 to sum [phi:main::@1->sum]
    // [14] phi sum::b#3 = 'm' [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr sum
    // sum(reverse, 'm')
    // [6] sum::return#1 = sum::return#3
    // main::@2
    // [7] main::$1 = sum::return#1
    // screen[1] = sum(reverse, 'm')
    // [8] *(main::screen+1) = main::$1 -- _deref_pbuc1=vbuaa 
    sta screen+1
    // sum(reverse, 'l')
    // [9] call sum 
    // [14] phi from main::@2 to sum [phi:main::@2->sum]
    // [14] phi sum::b#3 = 'l' [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr sum
    // sum(reverse, 'l')
    // [10] sum::return#2 = sum::return#3
    // main::@3
    // [11] main::$2 = sum::return#2
    // screen[2] = sum(reverse, 'l')
    // [12] *(main::screen+2) = main::$2 -- _deref_pbuc1=vbuaa 
    sta screen+2
    // main::@return
    // }
    // [13] return 
    rts
}
  // sum
// sum(byte register(A) b)
sum: {
    // a+b
    // [15] sum::return#3 = main::reverse + sum::b#3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #main.reverse
    // sum::@return
    // }
    // [16] return 
    rts
}
  // File Data

