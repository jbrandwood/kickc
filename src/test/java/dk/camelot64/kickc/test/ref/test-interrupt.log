PARSING src/test/java/dk/camelot64/kickc/test/kc/test-interrupt.kc
void()** KERNEL_IRQ = $0314;


void main() {
    *KERNEL_IRQ = &irq;
    byte* FGCOL = $d021;
    while(true) {
        (*FGCOL)++;
    }
}

interrupt(kernel) void irq() {
    byte* BGCOL = $d020;
    (*BGCOL)++;
    asm {
        lda $dc0d
    }
    (*BGCOL)++;
}

Adding pre/post-modifier *((byte*) main::FGCOL) ← ++ *((byte*) main::FGCOL)
Adding pre/post-modifier *((byte*) irq::BGCOL) ← ++ *((byte*) irq::BGCOL)
Adding pre/post-modifier *((byte*) irq::BGCOL) ← ++ *((byte*) irq::BGCOL)
Resolved forward reference irq to interrupt(KERNEL)(void()) irq()
SYMBOLS
(label) @1
(label) @2
(label) @begin
(label) @end
(void()**) KERNEL_IRQ
interrupt(KERNEL)(void()) irq()
(label) irq::@return
(byte*) irq::BGCOL
(void()) main()
(void()*~) main::$0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::FGCOL

Promoting word/signed word/dword/signed dword to void()** in KERNEL_IRQ ← ((void()**)) 788
Promoting word/dword/signed dword to byte* in main::FGCOL ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in irq::BGCOL ← ((byte*)) 53280
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (void()**) KERNEL_IRQ ← ((void()**)) (word/signed word/dword/signed dword) 788
  to:@1
main: scope:[main]  from
  (void()*~) main::$0 ← & interrupt(KERNEL)(void()) irq()
  *((void()**) KERNEL_IRQ) ← (void()*~) main::$0
  (byte*) main::FGCOL ← ((byte*)) (word/dword/signed dword) 53281
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  *((byte*) main::FGCOL) ← ++ *((byte*) main::FGCOL)
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
irq: scope:[irq]  from
  (byte*) irq::BGCOL ← ((byte*)) (word/dword/signed dword) 53280
  *((byte*) irq::BGCOL) ← ++ *((byte*) irq::BGCOL)
  asm { lda$dc0d  }
  *((byte*) irq::BGCOL) ← ++ *((byte*) irq::BGCOL)
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
Removing empty block @1
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) 788
  to:@2
main: scope:[main]  from @2
  (void()**) KERNEL_IRQ#1 ← phi( @2/(void()**) KERNEL_IRQ#2 )
  (void()*~) main::$0 ← & interrupt(KERNEL)(void()) irq()
  *((void()**) KERNEL_IRQ#1) ← (void()*~) main::$0
  (byte*) main::FGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) main::FGCOL#2 ← phi( main/(byte*) main::FGCOL#0 main::@2/(byte*) main::FGCOL#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) main::FGCOL#1 ← phi( main::@1/(byte*) main::FGCOL#2 )
  *((byte*) main::FGCOL#1) ← ++ *((byte*) main::FGCOL#1)
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
irq: scope:[irq]  from
  (byte*) irq::BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  *((byte*) irq::BGCOL#0) ← ++ *((byte*) irq::BGCOL#0)
  asm { lda$dc0d  }
  *((byte*) irq::BGCOL#0) ← ++ *((byte*) irq::BGCOL#0)
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return
@2: scope:[]  from @begin
  (void()**) KERNEL_IRQ#2 ← phi( @begin/(void()**) KERNEL_IRQ#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(void()**) KERNEL_IRQ#1
(void()**) KERNEL_IRQ#2
interrupt(KERNEL)(void()) irq()
(label) irq::@return
(byte*) irq::BGCOL
(byte*) irq::BGCOL#0
(void()) main()
(void()*~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::FGCOL
(byte*) main::FGCOL#0
(byte*) main::FGCOL#1
(byte*) main::FGCOL#2

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: KERNEL_IRQ#1 KERNEL_IRQ#2
Alias (byte*) main::FGCOL#1 = (byte*) main::FGCOL#2 
Alias (void()**) KERNEL_IRQ#0 = (void()**) KERNEL_IRQ#2 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: KERNEL_IRQ#1 KERNEL_IRQ#0
Self Phi Eliminated (byte*) main::FGCOL#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (void()**) KERNEL_IRQ#1 (void()**) KERNEL_IRQ#0
Redundant Phi (byte*) main::FGCOL#1 (byte*) main::FGCOL#0
Succesful SSA optimization Pass2RedundantPhiElimination
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))788
Constant (const void()*) main::$0 = &irq
Constant (const byte*) main::FGCOL#0 = ((byte*))53281
Constant (const byte*) irq::BGCOL#0 = ((byte*))53280
Succesful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@2
Succesful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Succesful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
OPTIMIZING CONTROL FLOW GRAPH
Constant inlined main::$0 = &interrupt(KERNEL)(void()) irq()
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @2 @end main main::@2 irq irq::@return 
Block Sequence Planned @begin @2 @end main main::@2 irq irq::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @begin @2 @end main main::@2 irq irq::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL)(void()) irq() [ ] ( main:2 [ ] )
  to:main::@2
main::@2: scope:[main]  from main main::@2
  [5] *((const byte*) main::FGCOL#0) ← ++ *((const byte*) main::FGCOL#0) [ ] ( main:2 [ ] )
  to:main::@2
irq: scope:[irq]  from
  [6] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( )
  asm { lda$dc0d  }
  [8] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( )
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [9] return  [ ] ( )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @begin @end 
main dominated by  @2 @begin main 
main::@2 dominated by  @2 @begin main::@2 main 
irq dominated by  @2 @begin @end main::@2 irq irq::@return main 
irq::@return dominated by  @2 @begin @end main::@2 irq irq::@return main 

NATURAL LOOPS
Found back edge: Loop head: main::@2 tails: main::@2 blocks: null
Found back edge: Loop head: irq::@return tails: irq blocks: null
Populated: Loop head: main::@2 tails: main::@2 blocks: main::@2 
Populated: Loop head: irq::@return tails: irq blocks: irq 
Loop head: main::@2 tails: main::@2 blocks: main::@2 
Loop head: irq::@return tails: irq blocks: irq 

NATURAL LOOPS WITH DEPTH
Found 1 loops in scope [irq]
  Loop head: irq::@return tails: irq blocks: irq 
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@2 tails: main::@2 blocks: main::@2 
Loop head: main::@2 tails: main::@2 blocks: main::@2  depth: 1
Loop head: irq::@return tails: irq blocks: irq  depth: 1


VARIABLE REGISTER WEIGHTS
(void()**) KERNEL_IRQ
interrupt(KERNEL)(void()) irq()
(byte*) irq::BGCOL
(void()) main()
(byte*) main::FGCOL

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label FGCOL = $d021
  //SEG9 [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL)(void()) irq() [ ] ( main:2 [ ] ) -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp b2
  //SEG10 main::@2
  b2:
  //SEG11 [5] *((const byte*) main::FGCOL#0) ← ++ *((const byte*) main::FGCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp b2
}
//SEG12 irq
irq: {
    .label BGCOL = $d020
  //SEG13 [6] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG14 asm { lda$dc0d  }
    lda $dc0d
  //SEG15 [8] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG16 irq::@return
  breturn:
  //SEG17 [9] return  [ ] ( )
    jmp $ea81
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL)(void()) irq() [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [] 

Uplifting [main] best 310 combination 
Uplifting [irq] best 310 combination 
Uplifting [] best 310 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label FGCOL = $d021
  //SEG9 [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL)(void()) irq() [ ] ( main:2 [ ] ) -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp b2
  //SEG10 main::@2
  b2:
  //SEG11 [5] *((const byte*) main::FGCOL#0) ← ++ *((const byte*) main::FGCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp b2
}
//SEG12 irq
irq: {
    .label BGCOL = $d020
  //SEG13 [6] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG14 asm { lda$dc0d  }
    lda $dc0d
  //SEG15 [8] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG16 irq::@return
  breturn:
  //SEG17 [9] return  [ ] ( )
    jmp $ea81
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b2_from_bbegin:
Removing instruction bend_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b2:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()**) KERNEL_IRQ
(const void()**) KERNEL_IRQ#0 KERNEL_IRQ = ((void()**))(word/signed word/dword/signed dword) 788
interrupt(KERNEL)(void()) irq()
(label) irq::@return
(byte*) irq::BGCOL
(const byte*) irq::BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) 53280
(void()) main()
(label) main::@2
(byte*) main::FGCOL
(const byte*) main::FGCOL#0 FGCOL = ((byte*))(word/dword/signed dword) 53281



FINAL ASSEMBLER
Score: 271

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @2 to @end [phi:@2->@end]
//SEG7 @end
//SEG8 main
main: {
    .label FGCOL = $d021
  //SEG9 [4] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL)(void()) irq() [ ] ( main:2 [ ] ) -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
  //SEG10 main::@2
  b2:
  //SEG11 [5] *((const byte*) main::FGCOL#0) ← ++ *((const byte*) main::FGCOL#0) [ ] ( main:2 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp b2
}
//SEG12 irq
irq: {
    .label BGCOL = $d020
  //SEG13 [6] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG14 asm { lda$dc0d  }
    lda $dc0d
  //SEG15 [8] *((const byte*) irq::BGCOL#0) ← ++ *((const byte*) irq::BGCOL#0) [ ] ( ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG16 irq::@return
  //SEG17 [9] return  [ ] ( )
    jmp $ea81
}

