Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen_idx#15 = phi( __start::@1/screen_idx#16 )
  print::m#0 = msg1
  call print
  to:main::@1
main::@1: scope:[main]  from main
  screen_idx#8 = phi( main/screen_idx#4 )
  screen_idx#0 = screen_idx#8
  print::m#1 = msg2
  call print
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen_idx#9 = phi( main::@1/screen_idx#4 )
  screen_idx#1 = screen_idx#9
  to:main::@return
main::@return: scope:[main]  from main::@2
  screen_idx#10 = phi( main::@2/screen_idx#1 )
  screen_idx#2 = screen_idx#10
  return 
  to:@return

void print(char *m)
print: scope:[print]  from main main::@1
  screen_idx#11 = phi( main/screen_idx#15, main::@1/screen_idx#0 )
  print::m#2 = phi( main/print::m#0, main::@1/print::m#1 )
  print::$0 = print::m#2 + 2
  print::$1 = screen_idx#11 * SIZEOF_UNSIGNED_INT
  SCREEN[print::$1] = *((unsigned int *)print::$0)
  screen_idx#3 = ++ screen_idx#11
  to:print::@return
print::@return: scope:[print]  from print
  screen_idx#12 = phi( print/screen_idx#3 )
  screen_idx#4 = screen_idx#12
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen_idx#5 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen_idx#16 = phi( __start::__init1/screen_idx#5 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen_idx#13 = phi( __start::@1/screen_idx#2 )
  screen_idx#6 = screen_idx#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen_idx#14 = phi( __start::@2/screen_idx#6 )
  screen_idx#7 = screen_idx#14
  return 
  to:@return

SYMBOL TABLE SSA
__constant unsigned int * const SCREEN = (char *)$400
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
__constant char msg1[] = { 'a', 'b', 'c', 'd' }
__constant char msg2[] = { '1', '2', '3', '4' }
void print(char *m)
char *print::$0
char print::$1
char *print::m
char *print::m#0
char *print::m#1
char *print::m#2
char screen_idx
char screen_idx#0
char screen_idx#1
char screen_idx#10
char screen_idx#11
char screen_idx#12
char screen_idx#13
char screen_idx#14
char screen_idx#15
char screen_idx#16
char screen_idx#2
char screen_idx#3
char screen_idx#4
char screen_idx#5
char screen_idx#6
char screen_idx#7
char screen_idx#8
char screen_idx#9

Adding number conversion cast (unumber) 2 in print::$0 = print::m#2 + 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias screen_idx#0 = screen_idx#8 
Alias screen_idx#1 = screen_idx#9 screen_idx#10 screen_idx#2 
Alias screen_idx#12 = screen_idx#3 screen_idx#4 
Alias screen_idx#16 = screen_idx#5 
Alias screen_idx#13 = screen_idx#6 screen_idx#14 screen_idx#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen_idx#15 screen_idx#16
Identical Phi Values screen_idx#0 screen_idx#12
Identical Phi Values screen_idx#1 screen_idx#12
Identical Phi Values screen_idx#13 screen_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant print::m#0 = msg1
Constant print::m#1 = msg2
Constant screen_idx#16 = 0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [11] SCREEN[print::$1] = *((unsigned int *)print::$0)  -- ((unsigned int *)print::m#2)[2]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable print::$0 and assignment [4] print::$0 = print::m#2 + 2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Rewriting multiplication to use shift [4] print::$1 = screen_idx#11 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings print::m#0
Inlining constant with var siblings print::m#1
Inlining constant with var siblings screen_idx#16
Constant inlined screen_idx#16 = 0
Constant inlined print::m#1 = msg2
Constant inlined print::m#0 = msg1
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_UNSIGNED_INT
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print:1 print:3 

Created 2 initial phi equivalence classes
Coalesced [2] screen_idx#17 = screen_idx#12
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print(char *m)
print: scope:[print]  from main main::@1
  [5] screen_idx#11 = phi( main/0, main::@1/screen_idx#12 )
  [5] print::m#2 = phi( main/msg1, main::@1/msg2 )
  [6] print::$1 = screen_idx#11 << 1
  [7] SCREEN[print::$1] = ((unsigned int *)print::m#2)[2]
  [8] screen_idx#12 = ++ screen_idx#11
  to:print::@return
print::@return: scope:[print]  from print
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void print(char *m)
char print::$1 // 22.0
char *print::m
char *print::m#2
char screen_idx
char screen_idx#11 // 8.0
char screen_idx#12 // 3.25

Initial phi equivalence classes
[ print::m#2 ]
[ screen_idx#11 screen_idx#12 ]
Added variable print::$1 to live range equivalence class [ print::$1 ]
Complete equivalence classes
[ print::m#2 ]
[ screen_idx#11 screen_idx#12 ]
[ print::$1 ]
Allocated zp[2]:2 [ print::m#2 ]
Allocated zp[1]:4 [ screen_idx#11 screen_idx#12 ]
Allocated zp[1]:5 [ print::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] print::$1 = screen_idx#11 << 1 [ print::m#2 screen_idx#11 print::$1 ] ( print:1 [ print::m#2 screen_idx#11 print::$1 ] { }  print:3 [ print::m#2 screen_idx#11 print::$1 ] { { screen_idx#11 = screen_idx#12 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ screen_idx#11 screen_idx#12 ]
Statement [7] SCREEN[print::$1] = ((unsigned int *)print::m#2)[2] [ screen_idx#11 ] ( print:1 [ screen_idx#11 ] { }  print:3 [ screen_idx#11 ] { { screen_idx#11 = screen_idx#12 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ screen_idx#11 screen_idx#12 ]
Statement [6] print::$1 = screen_idx#11 << 1 [ print::m#2 screen_idx#11 print::$1 ] ( print:1 [ print::m#2 screen_idx#11 print::$1 ] { }  print:3 [ print::m#2 screen_idx#11 print::$1 ] { { screen_idx#11 = screen_idx#12 } }  ) always clobbers reg byte a 
Statement [7] SCREEN[print::$1] = ((unsigned int *)print::m#2)[2] [ screen_idx#11 ] ( print:1 [ screen_idx#11 ] { }  print:3 [ screen_idx#11 ] { { screen_idx#11 = screen_idx#12 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ print::m#2 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ screen_idx#11 screen_idx#12 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ print::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 22: zp[1]:5 [ print::$1 ] 0: zp[2]:2 [ print::m#2 ] 
Uplift Scope [] 11.25: zp[1]:4 [ screen_idx#11 screen_idx#12 ] 
Uplift Scope [main] 

Uplifting [print] best 95 combination reg byte a [ print::$1 ] zp[2]:2 [ print::m#2 ] 
Uplifting [] best 95 combination zp[1]:4 [ screen_idx#11 screen_idx#12 ] 
Uplifting [main] best 95 combination 
Attempting to uplift remaining variables inzp[1]:4 [ screen_idx#11 screen_idx#12 ]
Uplifting [] best 95 combination zp[1]:4 [ screen_idx#11 screen_idx#12 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests optimizing derefs of *(ptr+b) to ptr[b - even when a noop-cast is needed
  // Upstart
  // Commodore 64 PRG executable file
.file [name="deref-to-derefidx-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
  .label screen_idx = 4
.segment Code
  // main
main: {
    // [1] call print
    // [5] phi from main to print [phi:main->print]
  print_from_main:
    // [5] phi screen_idx#11 = 0 [phi:main->print#0] -- vbuz1=vbuc1 
    lda #0
    sta.z screen_idx
    // [5] phi print::m#2 = msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.m
    lda #>msg1
    sta.z print.m+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print
    // [5] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [5] phi screen_idx#11 = screen_idx#12 [phi:main::@1->print#0] -- register_copy 
    // [5] phi print::m#2 = msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.m
    lda #>msg2
    sta.z print.m+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print
// void print(__zp(2) char *m)
print: {
    .label m = 2
    // [6] print::$1 = screen_idx#11 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z screen_idx
    asl
    // [7] SCREEN[print::$1] = ((unsigned int *)print::m#2)[2] -- pwuc1_derefidx_vbuaa=pwuz1_derefidx_vbuc2 
    ldy #2
    tax
    lda (m),y
    sta SCREEN,x
    iny
    lda (m),y
    sta SCREEN+1,x
    // [8] screen_idx#12 = ++ screen_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z screen_idx
    jmp __breturn
    // print::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
.segment Data
  msg1: .byte 'a', 'b', 'c', 'd'
  msg2: .byte '1', '2', '3', '4'

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant unsigned int * const SCREEN = (char *) 1024
void main()
__constant char msg1[] = { 'a', 'b', 'c', 'd' }
__constant char msg2[] = { '1', '2', '3', '4' }
void print(char *m)
char print::$1 // reg byte a 22.0
char *print::m
char *print::m#2 // m zp[2]:2
char screen_idx
char screen_idx#11 // screen_idx zp[1]:4 8.0
char screen_idx#12 // screen_idx zp[1]:4 3.25

zp[2]:2 [ print::m#2 ]
zp[1]:4 [ screen_idx#11 screen_idx#12 ]
reg byte a [ print::$1 ]


FINAL ASSEMBLER
Score: 86

  // File Comments
// Tests optimizing derefs of *(ptr+b) to ptr[b - even when a noop-cast is needed
  // Upstart
  // Commodore 64 PRG executable file
.file [name="deref-to-derefidx-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
  .label screen_idx = 4
.segment Code
  // main
main: {
    // print(msg1)
    // [1] call print
    // [5] phi from main to print [phi:main->print]
    // [5] phi screen_idx#11 = 0 [phi:main->print#0] -- vbuz1=vbuc1 
    lda #0
    sta.z screen_idx
    // [5] phi print::m#2 = msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.m
    lda #>msg1
    sta.z print.m+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(msg2)
    // [3] call print
    // [5] phi from main::@1 to print [phi:main::@1->print]
    // [5] phi screen_idx#11 = screen_idx#12 [phi:main::@1->print#0] -- register_copy 
    // [5] phi print::m#2 = msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.m
    lda #>msg2
    sta.z print.m+1
    jsr print
    // main::@return
    // }
    // [4] return 
    rts
}
  // print
// void print(__zp(2) char *m)
print: {
    .label m = 2
    // SCREEN[screen_idx++] = *(word*)(m+2)
    // [6] print::$1 = screen_idx#11 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z screen_idx
    asl
    // [7] SCREEN[print::$1] = ((unsigned int *)print::m#2)[2] -- pwuc1_derefidx_vbuaa=pwuz1_derefidx_vbuc2 
    ldy #2
    tax
    lda (m),y
    sta SCREEN,x
    iny
    lda (m),y
    sta SCREEN+1,x
    // SCREEN[screen_idx++] = *(word*)(m+2);
    // [8] screen_idx#12 = ++ screen_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z screen_idx
    // print::@return
    // }
    // [9] return 
    rts
}
  // File Data
.segment Data
  msg1: .byte 'a', 'b', 'c', 'd'
  msg2: .byte '1', '2', '3', '4'

