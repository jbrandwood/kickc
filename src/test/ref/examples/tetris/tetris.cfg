@begin: scope:[]  from
  [0] phi()
  to:@8
@8: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @8
  [3] phi()
main: scope:[main]  from @8
  [4] phi()
  [5] call init 
  to:main::@7
main::@7: scope:[main]  from main
  [6] phi()
  [7] call render_playfield 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [8] phi()
  [9] call render_current_piece 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@8
  [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:main::@2
render_current_piece: scope:[render_current_piece]  from main::@8
  [11] phi()
  to:render_current_piece::@return
render_current_piece::@return: scope:[render_current_piece]  from render_current_piece
  [12] return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@7
  [13] phi()
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [14] (byte) render_playfield::i#3 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::i#1 )
  [14] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::l#1 )
  [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [17] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [17] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2
  [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2)
  [20] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [21] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [22] if((byte) render_playfield::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [23] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [24] if((byte) render_playfield::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [25] return 
  to:@return
init: scope:[init]  from main
  [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0
  [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0
  [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0
  [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0
  [30] call fill 
  to:init::@7
init::@7: scope:[init]  from init
  [31] phi()
  [32] call fill 
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@7
  [33] (byte*) init::li#2 ← phi( init::@1/(byte*) init::li#1 init::@7/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 )
  [33] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2
  [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [37] (byte) init::i#1 ← ++ (byte) init::i#2
  [38] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1 init::@5
  [39] (byte) init::l#4 ← phi( init::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@5/(byte) init::l#1 )
  [39] (byte*) init::line#4 ← phi( init::@1/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 init::@5/(byte*) init::line#1 )
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [40] (byte) init::c#2 ← phi( init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@3/(byte) init::c#1 )
  [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2
  [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0
  [43] (byte) init::c#1 ← ++ (byte) init::c#2
  [44] if((byte) init::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto init::@3
  to:init::@5
init::@5: scope:[init]  from init::@3
  [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [46] (byte) init::l#1 ← ++ (byte) init::l#4
  [47] if((byte) init::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 22) goto init::@2
  to:init::@return
init::@return: scope:[init]  from init::@5
  [48] return 
  to:@return
fill: scope:[fill]  from init init::@7
  [49] (byte) fill::val#3 ← phi( init/(byte/word/signed word/dword/signed dword) 160 init::@7/(const byte) BLACK#0 )
  [49] (byte*) fill::addr#0 ← phi( init/(const byte*) SCREEN#0 init::@7/(const byte*) COLS#0 )
  [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [51] (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  [52] *((byte*) fill::addr#2) ← (byte) fill::val#3
  [53] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [55] return 
  to:@return
