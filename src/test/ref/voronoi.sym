(label) @1
(label) @begin
(label) @end
(byte*) COLORS
(const byte*) COLORS#0 COLORS = (byte*) 55296
(byte[]) COLS
(const byte[]) COLS#0 COLS = { (byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 7 }
(byte) FILL
(const byte) FILL#0 FILL = (byte) $e6
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte[]) XPOS
(const byte[]) XPOS#0 XPOS = { (byte) 5, (byte) $f, (byte) 6, (byte) $22, (byte) $15, (byte) $1f }
(byte[]) YPOS
(const byte[]) YPOS#0 YPOS = { (byte) 5, (byte) 8, (byte) $e, (byte) 2, (byte) $11, (byte) $16 }
(void()) animate()
(byte~) animate::$0 reg byte x 4.0
(byte~) animate::$12 reg byte x 4.0
(byte~) animate::$15 reg byte a 4.0
(byte~) animate::$18 reg byte a 4.0
(byte~) animate::$3 reg byte x 4.0
(byte~) animate::$6 reg byte a 4.0
(byte~) animate::$9 reg byte a 4.0
(label) animate::@1
(label) animate::@10
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$10 reg byte a 20002.0
(byte~) findcol::$8 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@10
(label) findcol::@11
(label) findcol::@12
(label) findcol::@13
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#1 reg byte x 20002.0
(byte) findcol::diff#2 reg byte x 20002.0
(byte) findcol::diff#3 reg byte x 20002.0
(byte) findcol::diff#4 reg byte x 20002.0
(byte) findcol::diff#5 reg byte x 10001.0
(byte) findcol::diff#7 reg byte x 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte y 10001.0
(byte) findcol::i#10 reg byte y 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 mincol zp ZP_BYTE:5 20002.0
(byte) findcol::mincol#10 mincol zp ZP_BYTE:5 1176.5882352941176
(byte) findcol::mincol#2 mincol zp ZP_BYTE:5 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp ZP_BYTE:4 1875.1875
(byte) findcol::mindiff#11 reg byte x 10001.0
(byte~) findcol::mindiff#12 mindiff zp ZP_BYTE:4 20002.0
(byte~) findcol::mindiff#14 reg byte x 20002.0
(byte) findcol::return
(byte) findcol::return#0 reg byte a 2002.0
(byte) findcol::return#2 return zp ZP_BYTE:5 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 x zp ZP_BYTE:3 1640.2
(byte) findcol::xp
(byte) findcol::xp#0 reg byte x 10001.0
(byte) findcol::y
(byte) findcol::y#0 y zp ZP_BYTE:2 1708.5416666666665
(byte) findcol::yp
(byte) findcol::yp#0 yp zp ZP_BYTE:8 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp ZP_WORD:6 16.5
(byte*) initscreen::screen#2 screen zp ZP_WORD:6 16.5
(void()) main()
(label) main::@1
(label) main::@2
(byte) numpoints
(const byte) numpoints#0 numpoints = (byte) 6
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@4
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp ZP_WORD:6 67.33333333333333
(byte*) render::colline#5 colline zp ZP_WORD:6 120.29999999999998
(byte) render::x
(byte) render::x#1 x zp ZP_BYTE:3 1501.5
(byte) render::x#2 x zp ZP_BYTE:3 572.0
(byte) render::y
(byte) render::y#1 y zp ZP_BYTE:2 151.5
(byte) render::y#4 y zp ZP_BYTE:2 109.36363636363637

zp ZP_BYTE:2 [ render::y#4 render::y#1 findcol::y#0 ]
zp ZP_BYTE:3 [ render::x#2 render::x#1 findcol::x#0 ]
reg byte y [ findcol::i#10 findcol::i#1 ]
zp ZP_BYTE:4 [ findcol::mindiff#10 findcol::mindiff#12 ]
zp ZP_BYTE:5 [ findcol::return#2 findcol::mincol#10 findcol::mincol#2 findcol::mincol#1 ]
reg byte x [ findcol::diff#5 findcol::diff#2 findcol::diff#1 ]
reg byte x [ findcol::mindiff#11 findcol::diff#7 findcol::diff#4 findcol::diff#3 findcol::mindiff#14 ]
zp ZP_WORD:6 [ initscreen::screen#2 initscreen::screen#1 render::colline#5 render::colline#1 ]
reg byte x [ animate::$0 ]
reg byte x [ animate::$3 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$9 ]
reg byte x [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$18 ]
reg byte a [ findcol::return#0 ]
reg byte a [ render::col#0 ]
reg byte x [ findcol::xp#0 ]
zp ZP_BYTE:8 [ findcol::yp#0 ]
reg byte a [ findcol::$8 ]
reg byte a [ findcol::$10 ]
