Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  SCREEN[0] = c1
  SCREEN[1] = c2
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
const byte c1 = 'o'
const byte c2 = 'k'
void main()

Adding number conversion cast (unumber) 0 in SCREEN[0] = c1
Adding number conversion cast (unumber) 1 in SCREEN[1] = c2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [0] SCREEN[0] = c1
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = c1
  [1] *(SCREEN+1) = c2
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = c1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+1) = c2 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests static initialization code
// No initializer code should be needed (since all values are constant)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const c1 = 'o'
  .const c2 = 'k'
  .label SCREEN = $400
  // main
main: {
    // [0] *SCREEN = c1 -- _deref_pbuc1=vbuc2 
    lda #c1
    sta SCREEN
    // [1] *(SCREEN+1) = c2 -- _deref_pbuc1=vbuc2 
    lda #c2
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
const byte c1 = 'o'
const byte c2 = 'k'
void main()



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests static initialization code
// No initializer code should be needed (since all values are constant)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const c1 = 'o'
  .const c2 = 'k'
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = c1
    // [0] *SCREEN = c1 -- _deref_pbuc1=vbuc2 
    lda #c1
    sta SCREEN
    // SCREEN[1] = c2
    // [1] *(SCREEN+1) = c2 -- _deref_pbuc1=vbuc2 
    lda #c2
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

