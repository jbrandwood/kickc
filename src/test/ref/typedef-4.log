
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (volatile byte) v ← (byte) 'v'
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) c
  *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) v
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const nomodify byte) c = (byte) 'c'
(void()) main()
(label) main::@return
(volatile byte) v loadstore

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (const nomodify byte) c
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (volatile byte) v
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero SCREEN in [1] *((const nomodify byte*) SCREEN + (byte) 0) ← (const nomodify byte) c
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (volatile byte) v ← (byte) 'v'
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c
  [5] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(volatile byte) v loadstore 4.333333333333333

Initial phi equivalence classes
Added variable v to live range equivalence class [ v ]
Complete equivalence classes
[ v ]
Allocated zp[1]:2 [ v ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const c = 'c'
  .label v = 2
  // @begin
__bbegin:
  // [0] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
  lda #'v'
  sta.z v
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // [5] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (volatile byte) v ← (byte) 'v' [ v ] (  [ v ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c [ v ] ( main:2 [ v ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ v ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 4.33: zp[1]:2 [ v ] 
Uplift Scope [main] 

Uplifting [] best 39 combination zp[1]:2 [ v ] 
Uplifting [main] best 39 combination 
Attempting to uplift remaining variables inzp[1]:2 [ v ]
Uplifting [] best 39 combination zp[1]:2 [ v ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const c = 'c'
  .label v = 2
  // @begin
__bbegin:
  // [0] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
  lda #'v'
  sta.z v
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // [5] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(const nomodify byte) c = (byte) 'c'
(void()) main()
(label) main::@return
(volatile byte) v loadstore zp[1]:2 4.333333333333333

zp[1]:2 [ v ]


FINAL ASSEMBLER
Score: 36

  // File Comments
// Typedef const/volatile type
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const c = 'c'
  .label v = 2
  // @begin
__bbegin:
  // v = 'v'
  // [0] (volatile byte) v ← (byte) 'v' -- vbuz1=vbuc1 
  lda #'v'
  sta.z v
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  jsr main
  rts
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[0] = c
    // [4] *((const nomodify byte*) SCREEN) ← (const nomodify byte) c -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // SCREEN[1] = v
    // [5] *((const nomodify byte*) SCREEN+(byte) 1) ← (volatile byte) v -- _deref_pbuc1=vbuz1 
    lda.z v
    sta SCREEN+1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

