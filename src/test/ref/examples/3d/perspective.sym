(label) @1
(label) @begin
(label) @end
(const signed byte*) PERSP_Z[(number) $100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) do_perspective((signed byte) do_perspective::x , (signed byte) do_perspective::y , (signed byte) do_perspective::z)
(label) do_perspective::@1
(label) do_perspective::@10
(label) do_perspective::@11
(label) do_perspective::@12
(label) do_perspective::@2
(label) do_perspective::@3
(label) do_perspective::@4
(label) do_perspective::@5
(label) do_perspective::@6
(label) do_perspective::@7
(label) do_perspective::@8
(label) do_perspective::@9
(label) do_perspective::@return
(const byte*) do_perspective::str[(byte) 2]  = (byte*) "("
(const byte*) do_perspective::str1[(byte) 2]  = (byte*) ","
(const byte*) do_perspective::str3[(byte) 7]  = (byte*) ") -> ("
(const byte*) do_perspective::str5[(byte) 2]  = (byte*) ")"
(signed byte) do_perspective::x
(const signed byte) do_perspective::x#0 x = (signed byte) $39
(signed byte) do_perspective::y
(const signed byte) do_perspective::y#0 y = (signed byte) -$47
(signed byte) do_perspective::z
(const signed byte) do_perspective::z#0 z = (signed byte) $36
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:6 20002.0
(byte*) memset::dst#2 dst zp[2]:6 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) mulf_init()
(byte~) mulf_init::$2 reg byte x 1501.5
(byte~) mulf_init::$5 reg byte x 2002.0
(byte~) mulf_init::$6 reg byte x 2002.0
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#1 add zp[2]:8 667.3333333333334
(signed word) mulf_init::add#2 add zp[2]:8 214.5
(byte) mulf_init::i
(byte) mulf_init::i#1 reg byte y 1501.5
(byte) mulf_init::i#2 reg byte y 600.6
(signed word) mulf_init::sqr
(signed word) mulf_init::sqr#1 sqr zp[2]:6 500.5
(signed word) mulf_init::sqr#2 sqr zp[2]:6 231.0
(byte) mulf_init::val
(byte) mulf_init::val#0 val zp[1]:10 819.0
(const byte*) mulf_sqr1[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2[(number) $200]  = { fill( $200, 0) }
(void()) perspective((signed byte) perspective::x , (signed byte) perspective::y , (signed byte) perspective::z)
(label) perspective::@return
(signed byte) perspective::x
(signed byte) perspective::y
(signed byte) perspective::z
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 20002.0
(byte) print_char::ch#3 reg byte a 20002.0
(byte) print_char::ch#4 reg byte a 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:4 10001.0
(byte*) print_char_cursor#12 print_char_cursor zp[2]:4 4646.166666666666
(byte*) print_char_cursor#2 print_char_cursor zp[2]:4 1661.8846153846155
(byte*) print_char_cursor#44 print_char_cursor zp[2]:4 111003.0
(byte*) print_char_cursor#69 print_char_cursor zp[2]:4 3734.6666666666665
(byte*) print_char_cursor#74 print_char_cursor zp[2]:4 1506.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:2 15001.5
(byte*) print_line_cursor#11 print_line_cursor zp[2]:2 20002.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 reg byte x 2002.0
(signed byte) print_schar::b#4 reg byte x 500.5
(signed byte) print_schar::b#6 reg byte x 2002.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:6 20002.0
(byte*) print_str::str#7 str zp[2]:6 10251.25
(byte*) print_str::str#9 str zp[2]:6 1001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 20002.0
(byte~) print_uchar::$2 reg byte x 20002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#3 reg byte x 5301.25
(byte) print_uchar::b#5 reg byte x 202.0
(byte) print_uchar::b#6 reg byte x 202.0
(const word*) psp1 = (word*) 243
(const word*) psp2 = (word*) 245
(const signed byte*) xr = (signed byte*) 240
(const signed byte*) yr = (signed byte*) 241
(const signed byte*) zr = (signed byte*) 242

zp[2]:2 [ print_line_cursor#11 print_line_cursor#1 ]
reg byte x [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp[2]:4 [ print_char_cursor#44 print_char_cursor#69 print_char_cursor#2 print_char_cursor#74 print_char_cursor#12 print_char_cursor#1 ]
reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
zp[2]:6 [ mulf_init::sqr#2 mulf_init::sqr#1 memset::dst#2 memset::dst#1 print_str::str#7 print_str::str#9 print_str::str#0 ]
reg byte y [ mulf_init::i#2 mulf_init::i#1 ]
zp[2]:8 [ mulf_init::add#2 mulf_init::add#1 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[1]:10 [ mulf_init::val#0 ]
reg byte x [ mulf_init::$2 ]
reg byte x [ mulf_init::$5 ]
reg byte x [ mulf_init::$6 ]
