Culled Empty Block (label) main::@2
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx#0 ← (byte) 0
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte) idx#13 ← phi( @2/(byte) idx#12 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) idx#11 ← phi( main/(byte) idx#13 main::@3/(byte) idx#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte) out::c#0 ← *((const byte*) msg + (byte) main::i#2)
  call out 
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) idx#6 ← phi( main::@1/(byte) idx#4 )
  (byte) idx#1 ← (byte) idx#6
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$b)
  (bool~) main::$1 ← (byte) main::i#1 != rangelast(0,$b)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) idx#7 ← phi( main::@3/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#7
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main::@1
  (byte) idx#8 ← phi( main::@1/(byte) idx#11 )
  (byte) out::c#1 ← phi( main::@1/(byte) out::c#0 )
  *((const byte*) SCREEN + (byte) idx#8) ← (byte) out::c#1
  (byte) idx#3 ← ++ (byte) idx#8
  to:out::@return
out::@return: scope:[out]  from out
  (byte) idx#9 ← phi( out/(byte) idx#3 )
  (byte) idx#4 ← (byte) idx#9
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) idx#12 ← phi( @begin/(byte) idx#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) idx#10 ← phi( @2/(byte) idx#2 )
  (byte) idx#5 ← (byte) idx#10
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(const byte*) msg[]  = (byte*) "hello world!"
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::i#2 = main::i#3 
Alias idx#1 = idx#6 idx#7 idx#2 
Alias idx#3 = idx#9 idx#4 
Alias idx#0 = idx#12 
Alias idx#10 = idx#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#13 (byte) idx#0
Identical Phi Values (byte) idx#1 (byte) idx#3
Identical Phi Values (byte) out::c#1 (byte) out::c#0
Identical Phi Values (byte) idx#8 (byte) idx#11
Identical Phi Values (byte) idx#10 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [9] if((byte) main::i#1!=rangelast(0,$b)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) idx#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [9] if(main::i#1!=rangelast(0,$b)) goto main::@1 to (number) $c
Adding number conversion cast (unumber) $c in if((byte) main::i#1!=(number) $c) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) idx#0
Constant inlined main::i#0 = (byte) 0
Constant inlined idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to out:8 

Created 2 initial phi equivalence classes
Coalesced [12] main::i#4 ← main::i#1
Coalesced [13] idx#14 ← idx#3
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@4
Renumbering block @2 to @1
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) idx#11 ← phi( main/(byte) 0 main::@2/(byte) idx#3 )
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] (byte) out::c#0 ← *((const byte*) msg + (byte) main::i#2)
  [7] call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::i#1 ← ++ (byte) main::i#2
  [9] if((byte) main::i#1!=(byte) $c) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main::@1
  [11] *((const byte*) SCREEN + (byte) idx#11) ← (byte) out::c#0
  [12] (byte) idx#3 ← ++ (byte) idx#11
  to:out::@return
out::@return: scope:[out]  from out
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#11 701.0
(byte) idx#3 220.39999999999998
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 101.0
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#0 1102.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ idx#11 idx#3 ]
Added variable out::c#0 to live range equivalence class [ out::c#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx#11 idx#3 ]
[ out::c#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx#11 idx#3 ]
Allocated zp[1]:4 [ out::c#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test effective live range and register allocation
// out::c should be a hardware register, main::i should be a hardware register, global idx should be a hardware register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#11 = (byte) idx#3 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) out::c#0 ← *((const byte*) msg + (byte) main::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda msg,y
    sta.z out.c
    // [7] call out 
    jsr out
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [9] if((byte) main::i#1!=(byte) $c) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c
    cmp.z i
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // out
// out(byte zp(4) c)
out: {
    .label c = 4
    // [11] *((const byte*) SCREEN + (byte) idx#11) ← (byte) out::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z idx
    sta SCREEN,y
    // [12] (byte) idx#3 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // out::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data
  msg: .text "hello world!"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#11 idx#3 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out::c#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [out] 1,102: zp[1]:4 [ out::c#0 ] 
Uplift Scope [] 921.4: zp[1]:3 [ idx#11 idx#3 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::i#2 main::i#1 ] 

Uplifting [out] best 520 combination reg byte a [ out::c#0 ] 
Uplifting [] best 484 combination reg byte x [ idx#11 idx#3 ] 
Uplifting [main] best 364 combination reg byte y [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// out::c should be a hardware register, main::i should be a hardware register, global idx should be a hardware register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#11 = (byte) idx#3 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) out::c#0 ← *((const byte*) msg + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda msg,y
    // [7] call out 
    jsr out
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if((byte) main::i#1!=(byte) $c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [11] *((const byte*) SCREEN + (byte) idx#11) ← (byte) out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [12] (byte) idx#3 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // out::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data
  msg: .text "hello world!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#11 reg byte x 701.0
(byte) idx#3 reg byte x 220.39999999999998
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 151.5
(byte) main::i#2 reg byte y 101.0
(const byte*) msg[]  = (byte*) "hello world!"
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0 reg byte a 1102.0

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ idx#11 idx#3 ]
reg byte a [ out::c#0 ]


FINAL ASSEMBLER
Score: 229

  // File Comments
// Test effective live range and register allocation
// out::c should be a hardware register, main::i should be a hardware register, global idx should be a hardware register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) idx#11 = (byte) idx#3 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // out(msg[i])
    // [6] (byte) out::c#0 ← *((const byte*) msg + (byte) main::i#2) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda msg,y
    // [7] call out 
    jsr out
    // main::@2
    // for( byte i: 0..11)
    // [8] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if((byte) main::i#1!=(byte) $c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // SCREEN[idx++] = c
    // [11] *((const byte*) SCREEN + (byte) idx#11) ← (byte) out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = c;
    // [12] (byte) idx#3 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    // out::@return
    // }
    // [13] return 
    rts
}
  // File Data
  msg: .text "hello world!"
  .byte 0

