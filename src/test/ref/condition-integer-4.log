
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  main::idx#7 = phi( main/main::idx#0, main::@5/main::idx#1 )
  main::i#2 = phi( main/main::i#0, main::@5/main::i#1 )
  main::$0 = main::i#2 & 1
  main::$13 = 0 != main::$0
  main::$1 = ! main::$13
  if(main::$1) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@6
  main::idx#8 = phi( main::@1/main::idx#7, main::@6/main::idx#2 )
  main::i#3 = phi( main::@1/main::i#2, main::@6/main::i#7 )
  main::$2 = main::i#3 & 2
  main::$14 = 0 != main::$2
  main::$3 = ! main::$14
  if(main::$3) goto main::@3
  to:main::@7
main::@6: scope:[main]  from main::@1
  main::i#7 = phi( main::@1/main::i#2 )
  main::idx#2 = phi( main::@1/main::idx#7 )
  (SCREEN+$28*0)[main::idx#2] = '+'
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@7
  main::idx#9 = phi( main::@2/main::idx#8, main::@7/main::idx#3 )
  main::i#4 = phi( main::@2/main::i#3, main::@7/main::i#8 )
  main::$4 = main::i#4 & 1
  main::$5 = main::i#4 & 2
  main::$6 = main::$4 && main::$5
  main::$7 = ! main::$6
  if(main::$7) goto main::@4
  to:main::@8
main::@7: scope:[main]  from main::@2
  main::i#8 = phi( main::@2/main::i#3 )
  main::idx#3 = phi( main::@2/main::idx#8 )
  (SCREEN+$28*1)[main::idx#3] = '+'
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@8
  main::idx#10 = phi( main::@3/main::idx#9, main::@8/main::idx#4 )
  main::i#5 = phi( main::@3/main::i#4, main::@8/main::i#9 )
  main::$8 = main::i#5 & 1
  main::$9 = main::i#5 & 2
  main::$10 = main::$8 || main::$9
  main::$11 = ! main::$10
  if(main::$11) goto main::@5
  to:main::@9
main::@8: scope:[main]  from main::@3
  main::i#9 = phi( main::@3/main::i#4 )
  main::idx#4 = phi( main::@3/main::idx#9 )
  (SCREEN+$28*2)[main::idx#4] = '+'
  to:main::@4
main::@5: scope:[main]  from main::@4 main::@9
  main::i#6 = phi( main::@4/main::i#5, main::@9/main::i#10 )
  main::idx#5 = phi( main::@4/main::idx#10, main::@9/main::idx#6 )
  main::idx#1 = ++ main::idx#5
  main::i#1 = main::i#6 + rangenext(0,7)
  main::$12 = main::i#1 != rangelast(0,7)
  if(main::$12) goto main::@1
  to:main::@return
main::@9: scope:[main]  from main::@4
  main::i#10 = phi( main::@4/main::i#5 )
  main::idx#6 = phi( main::@4/main::idx#10 )
  (SCREEN+$28*3)[main::idx#6] = '+'
  to:main::@5
main::@return: scope:[main]  from main::@5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const SCREEN = (byte*)$400
void __start()
void main()
number~ main::$0
bool~ main::$1
bool~ main::$10
bool~ main::$11
bool~ main::$12
bool~ main::$13
bool~ main::$14
number~ main::$2
bool~ main::$3
number~ main::$4
number~ main::$5
bool~ main::$6
bool~ main::$7
number~ main::$8
number~ main::$9
byte main::i
byte main::i#0
byte main::i#1
byte main::i#10
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6
byte main::i#7
byte main::i#8
byte main::i#9
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#10
byte main::idx#2
byte main::idx#3
byte main::idx#4
byte main::idx#5
byte main::idx#6
byte main::idx#7
byte main::idx#8
byte main::idx#9

Adding number conversion cast (unumber) 1 in main::$0 = main::i#2 & 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#2 & (unumber)1
Adding number conversion cast (unumber) 0 in main::$13 = 0 != main::$0
Adding number conversion cast (unumber) 2 in main::$2 = main::i#3 & 2
Adding number conversion cast (unumber) main::$2 in main::$2 = main::i#3 & (unumber)2
Adding number conversion cast (unumber) 0 in main::$14 = 0 != main::$2
Adding number conversion cast (unumber) $28*0 in (SCREEN+$28*0)[main::idx#2] = '+'
Adding number conversion cast (unumber) 1 in main::$4 = main::i#4 & 1
Adding number conversion cast (unumber) main::$4 in main::$4 = main::i#4 & (unumber)1
Adding number conversion cast (unumber) 2 in main::$5 = main::i#4 & 2
Adding number conversion cast (unumber) main::$5 in main::$5 = main::i#4 & (unumber)2
Adding number conversion cast (unumber) $28*1 in (SCREEN+$28*1)[main::idx#3] = '+'
Adding number conversion cast (unumber) 1 in main::$8 = main::i#5 & 1
Adding number conversion cast (unumber) main::$8 in main::$8 = main::i#5 & (unumber)1
Adding number conversion cast (unumber) 2 in main::$9 = main::i#5 & 2
Adding number conversion cast (unumber) main::$9 in main::$9 = main::i#5 & (unumber)2
Adding number conversion cast (unumber) $28*2 in (SCREEN+$28*2)[main::idx#4] = '+'
Adding number conversion cast (unumber) $28*3 in (SCREEN+$28*3)[main::idx#6] = '+'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::i#2 & 1
Inferred type updated to byte in main::$2 = main::i#3 & 2
Inferred type updated to byte in main::$4 = main::i#4 & 1
Inferred type updated to byte in main::$5 = main::i#4 & 2
Inferred type updated to byte in main::$8 = main::i#5 & 1
Inferred type updated to byte in main::$9 = main::i#5 & 2
Inversing boolean not [5] main::$1 = 0 == main::$0 from [4] main::$13 = 0 != main::$0
Inversing boolean not [10] main::$3 = 0 == main::$2 from [9] main::$14 = 0 != main::$2
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::idx#2 = main::idx#7 
Alias main::i#2 = main::i#7 
Alias main::idx#3 = main::idx#8 
Alias main::i#3 = main::i#8 
Alias main::idx#4 = main::idx#9 
Alias main::i#4 = main::i#9 
Alias main::idx#10 = main::idx#6 
Alias main::i#10 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Alias main::i#10 = main::i#3 main::i#2 main::i#4 main::i#6 
Alias main::idx#10 = main::idx#3 main::idx#2 main::idx#4 main::idx#5 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [15] main::$4 = main::i#10 & 1
Identified duplicate assignment right side [16] main::$5 = main::i#10 & 2
Identified duplicate assignment right side [23] main::$8 = main::i#10 & 1
Identified duplicate assignment right side [24] main::$9 = main::i#10 & 2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$1 [5] if(0==main::$0) goto main::@2
Simple Condition main::$3 [8] if(0==main::$2) goto main::@3
Simple Condition main::$12 [25] if(main::i#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [13] main::$7 = ! main::$6
Rewriting && if()-condition to two if()s [12] main::$6 = main::$4 && main::$5
Rewriting ! if()-condition to reversed if() [19] main::$11 = ! main::$10
Rewriting || if()-condition to two if()s [18] main::$10 = main::$8 || main::$9
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition main::$4
Warning! Adding boolean cast to non-boolean condition main::$8
Warning! Adding boolean cast to non-boolean condition main::$5
Warning! Adding boolean cast to non-boolean condition main::$9
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [23] main::i#1 = ++ main::i#10 to ++
Resolved ranged comparison value [25] if(main::i#1!=rangelast(0,7)) goto main::@1 to 8
Simplifying constant evaluating to zero (byte)$28*0 in [9] (SCREEN+(byte)$28*0)[main::idx#10] = '+'
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero SCREEN in [9] (SCREEN+0)[main::idx#10] = '+'
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [8] main::$15 = 0 != main::$4
Adding number conversion cast (unumber) 0 in [13] main::$16 = 0 != main::$8
Adding number conversion cast (unumber) 8 in [18] if(main::i#1!=8) goto main::@1
Adding number conversion cast (unumber) 0 in [23] main::$17 = 0 != main::$5
Adding number conversion cast (unumber) 0 in [25] main::$18 = 0 != main::$9
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$4 = main::$0 main::$8 
Alias main::$5 = main::$2 main::$9 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$15 [7] if(0!=main::$4) goto main::@10
Simple Condition main::$16 [10] if(0!=main::$4) goto main::@9
Simple Condition main::$17 [18] if(0!=main::$5) goto main::@8
Simple Condition main::$18 [20] if(0!=main::$5) goto main::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [7] if(0==main::$4) goto main::@4
Negating conditional jump and destination [18] if(0==main::$5) goto main::@4
Negating conditional jump and destination [20] if(0==main::$5) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $28*1
Simplifying constant integer cast $28*2
Simplifying constant integer cast $28*3
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting main::@12(between main::@5 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [18] main::i#11 = main::i#1
Coalesced [19] main::idx#11 = main::idx#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@12
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::idx#10 = phi( main/0, main::@5/main::idx#1 )
  [1] main::i#10 = phi( main/0, main::@5/main::i#1 )
  [2] main::$4 = main::i#10 & 1
  [3] if(0==main::$4) goto main::@2
  to:main::@6
main::@6: scope:[main]  from main::@1
  [4] SCREEN[main::idx#10] = '+'
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [5] main::$5 = main::i#10 & 2
  [6] if(0==main::$5) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@2
  [7] (SCREEN+$28*1)[main::idx#10] = '+'
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@7
  [8] if(0==main::$4) goto main::@4
  to:main::@10
main::@10: scope:[main]  from main::@3
  [9] if(0==main::$5) goto main::@4
  to:main::@8
main::@8: scope:[main]  from main::@10
  [10] (SCREEN+$28*2)[main::idx#10] = '+'
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@3 main::@8
  [11] if(0!=main::$4) goto main::@9
  to:main::@11
main::@11: scope:[main]  from main::@4
  [12] if(0==main::$5) goto main::@5
  to:main::@9
main::@9: scope:[main]  from main::@11 main::@4
  [13] (SCREEN+$28*3)[main::idx#10] = '+'
  to:main::@5
main::@5: scope:[main]  from main::@11 main::@9
  [14] main::idx#1 = ++ main::idx#10
  [15] main::i#1 = ++ main::i#10
  [16] if(main::i#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$4 4.888888888888889
byte~ main::$5 6.285714285714286
byte main::i
byte main::i#1 16.5
byte main::i#10 3.142857142857143
byte main::idx
byte main::idx#1 7.333333333333333
byte main::idx#10 5.076923076923077

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ main::idx#10 main::idx#1 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ main::idx#10 main::idx#1 ]
[ main::$4 ]
[ main::$5 ]
Allocated zp[1]:2 [ main::i#10 main::i#1 ]
Allocated zp[1]:3 [ main::idx#10 main::idx#1 ]
Allocated zp[1]:4 [ main::$4 ]
Allocated zp[1]:5 [ main::$5 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] SCREEN[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 ] (  [ main::i#10 main::idx#10 main::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#10 main::idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$4 ]
Statement [5] main::$5 = main::i#10 & 2 [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Statement [7] (SCREEN+$28*1)[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::$5 ]
Statement [10] (SCREEN+$28*2)[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Statement [13] (SCREEN+$28*3)[main::idx#10] = '+' [ main::i#10 main::idx#10 ] (  [ main::i#10 main::idx#10 ] { }  ) always clobbers reg byte a 
Statement [2] main::$4 = main::i#10 & 1 [ main::i#10 main::idx#10 main::$4 ] (  [ main::i#10 main::idx#10 main::$4 ] { }  ) always clobbers reg byte a 
Statement [4] SCREEN[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 ] (  [ main::i#10 main::idx#10 main::$4 ] { }  ) always clobbers reg byte a 
Statement [5] main::$5 = main::i#10 & 2 [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Statement [7] (SCREEN+$28*1)[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Statement [10] (SCREEN+$28*2)[main::idx#10] = '+' [ main::i#10 main::idx#10 main::$4 main::$5 ] (  [ main::i#10 main::idx#10 main::$4 main::$5 ] { }  ) always clobbers reg byte a 
Statement [13] (SCREEN+$28*3)[main::idx#10] = '+' [ main::i#10 main::idx#10 ] (  [ main::i#10 main::idx#10 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#10 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#10 main::idx#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$4 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$5 ] : zp[1]:5 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 19.64: zp[1]:2 [ main::i#10 main::i#1 ] 12.41: zp[1]:3 [ main::idx#10 main::idx#1 ] 6.29: zp[1]:5 [ main::$5 ] 4.89: zp[1]:4 [ main::$4 ] 
Uplift Scope [] 

Uplifting [main] best 1231 combination reg byte x [ main::i#10 main::i#1 ] reg byte y [ main::idx#10 main::idx#1 ] zp[1]:5 [ main::$5 ] zp[1]:4 [ main::$4 ] 
Uplifting [] best 1231 combination 
Attempting to uplift remaining variables inzp[1]:5 [ main::$5 ]
Uplifting [main] best 1231 combination zp[1]:5 [ main::$5 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::$4 ]
Uplifting [main] best 1231 combination zp[1]:4 [ main::$4 ] 
Allocated (was zp[1]:4) zp[1]:2 [ main::$4 ]
Allocated (was zp[1]:5) zp[1]:3 [ main::$5 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests using integer conditions in && and || operator
// This should produce '01010101', '00110011', '00010001', '01110111' at the top of the screen
  // Upstart
  // Commodore 64 PRG executable file
.file [name="condition-integer-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __4 = 2
    .label __5 = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#10 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#10 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::idx#10 = main::idx#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [1] phi main::i#10 = main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$4 = main::i#10 & 1 -- vbuz1=vbuxx_band_vbuc1 
    lda #1
    sax.z __4
    // [3] if(0==main::$4) goto main::@2 -- 0_eq_vbuz1_then_la1 
    lda.z __4
    beq __b2
    jmp __b6
    // main::@6
  __b6:
    // [4] SCREEN[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN,y
    jmp __b2
    // main::@2
  __b2:
    // [5] main::$5 = main::i#10 & 2 -- vbuz1=vbuxx_band_vbuc1 
    lda #2
    sax.z __5
    // [6] if(0==main::$5) goto main::@3 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b3
    jmp __b7
    // main::@7
  __b7:
    // [7] (SCREEN+$28*1)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*1,y
    jmp __b3
    // main::@3
  __b3:
    // [8] if(0==main::$4) goto main::@4 -- 0_eq_vbuz1_then_la1 
    lda.z __4
    beq __b4
    jmp __b10
    // main::@10
  __b10:
    // [9] if(0==main::$5) goto main::@4 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b4
    jmp __b8
    // main::@8
  __b8:
    // [10] (SCREEN+$28*2)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*2,y
    jmp __b4
    // main::@4
  __b4:
    // [11] if(0!=main::$4) goto main::@9 -- 0_neq_vbuz1_then_la1 
    lda.z __4
    bne __b9
    jmp __b11
    // main::@11
  __b11:
    // [12] if(0==main::$5) goto main::@5 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b5
    jmp __b9
    // main::@9
  __b9:
    // [13] (SCREEN+$28*3)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*3,y
    jmp __b5
    // main::@5
  __b5:
    // [14] main::idx#1 = ++ main::idx#10 -- vbuyy=_inc_vbuyy 
    iny
    // [15] main::i#1 = ++ main::i#10 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b10
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b10:
Removing instruction __b8:
Removing instruction __b11:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte* const SCREEN = (byte*) 1024
void main()
byte~ main::$4 zp[1]:2 4.888888888888889
byte~ main::$5 zp[1]:3 6.285714285714286
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#10 reg byte x 3.142857142857143
byte main::idx
byte main::idx#1 reg byte y 7.333333333333333
byte main::idx#10 reg byte y 5.076923076923077

reg byte x [ main::i#10 main::i#1 ]
reg byte y [ main::idx#10 main::idx#1 ]
zp[1]:2 [ main::$4 ]
zp[1]:3 [ main::$5 ]


FINAL ASSEMBLER
Score: 841

  // File Comments
// Tests using integer conditions in && and || operator
// This should produce '01010101', '00110011', '00010001', '01110111' at the top of the screen
  // Upstart
  // Commodore 64 PRG executable file
.file [name="condition-integer-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __4 = 2
    .label __5 = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#10 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#10 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::idx#10 = main::idx#1 [phi:main::@5->main::@1#0] -- register_copy 
    // [1] phi main::i#10 = main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // i&1
    // [2] main::$4 = main::i#10 & 1 -- vbuz1=vbuxx_band_vbuc1 
    lda #1
    sax.z __4
    // if(i&1)
    // [3] if(0==main::$4) goto main::@2 -- 0_eq_vbuz1_then_la1 
    lda.z __4
    beq __b2
    // main::@6
    // (SCREEN+40*0)[idx] = '+'
    // [4] SCREEN[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN,y
    // main::@2
  __b2:
    // i&2
    // [5] main::$5 = main::i#10 & 2 -- vbuz1=vbuxx_band_vbuc1 
    lda #2
    sax.z __5
    // if(i&2)
    // [6] if(0==main::$5) goto main::@3 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b3
    // main::@7
    // (SCREEN+40*1)[idx] = '+'
    // [7] (SCREEN+$28*1)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*1,y
    // main::@3
  __b3:
    // if(i&1 && i&2)
    // [8] if(0==main::$4) goto main::@4 -- 0_eq_vbuz1_then_la1 
    lda.z __4
    beq __b4
    // main::@10
    // [9] if(0==main::$5) goto main::@4 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b4
    // main::@8
    // (SCREEN+40*2)[idx] = '+'
    // [10] (SCREEN+$28*2)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*2,y
    // main::@4
  __b4:
    // if(i&1 || i&2)
    // [11] if(0!=main::$4) goto main::@9 -- 0_neq_vbuz1_then_la1 
    lda.z __4
    bne __b9
    // main::@11
    // [12] if(0==main::$5) goto main::@5 -- 0_eq_vbuz1_then_la1 
    lda.z __5
    beq __b5
    // main::@9
  __b9:
    // (SCREEN+40*3)[idx] = '+'
    // [13] (SCREEN+$28*3)[main::idx#10] = '+' -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #'+'
    sta SCREEN+$28*3,y
    // main::@5
  __b5:
    // idx++;
    // [14] main::idx#1 = ++ main::idx#10 -- vbuyy=_inc_vbuyy 
    iny
    // for( byte i:0..7)
    // [15] main::i#1 = ++ main::i#10 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // main::@return
    // }
    // [17] return 
    rts
}
  // File Data

