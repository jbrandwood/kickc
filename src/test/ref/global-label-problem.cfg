@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call print1 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) print1()
print1: scope:[print1]  from main::@2
  [11] phi()
  [12] call print 
  to:print1::@1
print1::@1: scope:[print1]  from print1
  [13] phi()
  [14] call print 
  to:print1::@return
print1::@return: scope:[print1]  from print1::@1
  [15] return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from main main::@1 print1 print1::@1
  [16] (byte) idx#25 ← phi( main/(byte) 0 main::@1/(byte) idx#18 print1/(byte) idx#18 print1::@1/(byte) idx#18 )
  [16] (byte*) print::msg#7 ← phi( main/(const byte*) msg main::@1/(const byte*) main::msg1 print1/(const byte*) print1::msg print1::@1/(const byte*) msg )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [17] (byte) idx#18 ← phi( print/(byte) idx#25 print::@2/(byte) idx#8 )
  [17] (byte*) print::msg#5 ← phi( print/(byte*) print::msg#7 print::@2/(byte*) print::msg#4 )
  [18] if((byte) 0!=*((byte*) print::msg#5)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [19] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [20] *((const nomodify byte*) SCREEN + (byte) idx#18) ← *((byte*) print::msg#5)
  [21] (byte) idx#8 ← ++ (byte) idx#18
  [22] (byte*) print::msg#4 ← ++ (byte*) print::msg#5
  to:print::@1
