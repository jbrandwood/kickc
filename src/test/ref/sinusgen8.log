Inlined call call __init
Eliminating unused variable with no statement sin8s_gen::$0
Eliminating unused variable with no statement sin8s::$5
Eliminating unused variable with no statement sin8s::$6
Eliminating unused variable with no statement sin8s::$7
Eliminating unused variable with no statement sin8s::$8
Eliminating unused variable with no statement sin8s::$9
Eliminating unused variable with no statement sin8s::$10
Eliminating unused variable with no statement sin8s::$11
Eliminating unused variable with no statement sin8s::$12
Eliminating unused variable with no statement memset::$2
Eliminating unused variable with no statement main::$2

CONTROL FLOW GRAPH SSA

void sin8s_gen(signed char *sintab , unsigned int wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  sin8s_gen::sintab#6 = phi( main/sin8s_gen::sintab#1 )
  sin8s_gen::wavelength#1 = phi( main/sin8s_gen::wavelength#0 )
  div16u::dividend#0 = PI2_u4f12
  div16u::divisor#0 = sin8s_gen::wavelength#1
  call div16u
  div16u::return#0 = div16u::return#2
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  sin8s_gen::sintab#5 = phi( sin8s_gen/sin8s_gen::sintab#6 )
  sin8s_gen::wavelength#3 = phi( sin8s_gen/sin8s_gen::wavelength#1 )
  div16u::return#3 = phi( sin8s_gen/div16u::return#0 )
  sin8s_gen::step#0 = div16u::return#3
  sin8s_gen::x#0 = 0
  sin8s_gen::i#0 = 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  sin8s_gen::step#3 = phi( sin8s_gen::@3/sin8s_gen::step#0, sin8s_gen::@4/sin8s_gen::step#1 )
  sin8s_gen::sintab#4 = phi( sin8s_gen::@3/sin8s_gen::sintab#5, sin8s_gen::@4/sin8s_gen::sintab#0 )
  sin8s_gen::x#4 = phi( sin8s_gen::@3/sin8s_gen::x#0, sin8s_gen::@4/sin8s_gen::x#1 )
  sin8s_gen::wavelength#2 = phi( sin8s_gen::@3/sin8s_gen::wavelength#3, sin8s_gen::@4/sin8s_gen::wavelength#4 )
  sin8s_gen::i#2 = phi( sin8s_gen::@3/sin8s_gen::i#0, sin8s_gen::@4/sin8s_gen::i#1 )
  sin8s_gen::$1 = sin8s_gen::i#2 < sin8s_gen::wavelength#2
  if(sin8s_gen::$1) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  sin8s_gen::wavelength#5 = phi( sin8s_gen::@1/sin8s_gen::wavelength#2 )
  sin8s_gen::i#4 = phi( sin8s_gen::@1/sin8s_gen::i#2 )
  sin8s_gen::step#2 = phi( sin8s_gen::@1/sin8s_gen::step#3 )
  sin8s_gen::sintab#3 = phi( sin8s_gen::@1/sin8s_gen::sintab#4 )
  sin8s_gen::x#2 = phi( sin8s_gen::@1/sin8s_gen::x#4 )
  sin8s::x#0 = sin8s_gen::x#2
  call sin8s
  sin8s::return#0 = sin8s::return#2
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  sin8s_gen::wavelength#4 = phi( sin8s_gen::@2/sin8s_gen::wavelength#5 )
  sin8s_gen::i#3 = phi( sin8s_gen::@2/sin8s_gen::i#4 )
  sin8s_gen::step#1 = phi( sin8s_gen::@2/sin8s_gen::step#2 )
  sin8s_gen::x#3 = phi( sin8s_gen::@2/sin8s_gen::x#2 )
  sin8s_gen::sintab#2 = phi( sin8s_gen::@2/sin8s_gen::sintab#3 )
  sin8s::return#3 = phi( sin8s_gen::@2/sin8s::return#0 )
  sin8s_gen::$2 = sin8s::return#3
  *sin8s_gen::sintab#2 = sin8s_gen::$2
  sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2
  sin8s_gen::$3 = sin8s_gen::x#3 + sin8s_gen::step#1
  sin8s_gen::x#1 = sin8s_gen::$3
  sin8s_gen::i#1 = ++ sin8s_gen::i#3
  to:sin8s_gen::@1
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  return 
  to:@return

signed char sin8s(unsigned int x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  sin8s::x#3 = phi( sin8s_gen::@2/sin8s::x#0 )
  sin8s::isUpper#0 = 0
  sin8s::$0 = sin8s::x#3 >= PI_u4f12
  sin8s::$1 = ! sin8s::$0
  if(sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  sin8s::isUpper#10 = phi( sin8s/sin8s::isUpper#0, sin8s::@5/sin8s::isUpper#1 )
  sin8s::x#4 = phi( sin8s/sin8s::x#3, sin8s::@5/sin8s::x#1 )
  sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
  sin8s::$3 = ! sin8s::$2
  if(sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  sin8s::x#5 = phi( sin8s/sin8s::x#3 )
  sin8s::$18 = sin8s::x#5 - PI_u4f12
  sin8s::x#1 = sin8s::$18
  sin8s::isUpper#1 = 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  sin8s::isUpper#9 = phi( sin8s::@1/sin8s::isUpper#10, sin8s::@6/sin8s::isUpper#11 )
  sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#2 )
  sin8s::$4 = sin8s::x#6 << 3
  sin8s::x1#0 = byte1  sin8s::$4
  mulu8_sel::v1#0 = sin8s::x1#0
  mulu8_sel::v2#0 = sin8s::x1#0
  mulu8_sel::select#0 = 0
  call mulu8_sel
  mulu8_sel::return#0 = mulu8_sel::return#6
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  sin8s::isUpper#8 = phi( sin8s::@2/sin8s::isUpper#9 )
  sin8s::x1#1 = phi( sin8s::@2/sin8s::x1#0 )
  mulu8_sel::return#7 = phi( sin8s::@2/mulu8_sel::return#0 )
  sin8s::x2#0 = mulu8_sel::return#7
  mulu8_sel::v1#1 = sin8s::x2#0
  mulu8_sel::v2#1 = sin8s::x1#1
  mulu8_sel::select#1 = 1
  call mulu8_sel
  mulu8_sel::return#1 = mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  sin8s::isUpper#7 = phi( sin8s::@9/sin8s::isUpper#8 )
  sin8s::x1#4 = phi( sin8s::@9/sin8s::x1#1 )
  mulu8_sel::return#8 = phi( sin8s::@9/mulu8_sel::return#1 )
  sin8s::x3#0 = mulu8_sel::return#8
  mulu8_sel::v1#2 = sin8s::x3#0
  mulu8_sel::v2#2 = sin8s::DIV_6
  mulu8_sel::select#2 = 1
  call mulu8_sel
  mulu8_sel::return#2 = mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  sin8s::isUpper#6 = phi( sin8s::@10/sin8s::isUpper#7 )
  sin8s::x3#1 = phi( sin8s::@10/sin8s::x3#0 )
  sin8s::x1#2 = phi( sin8s::@10/sin8s::x1#4 )
  mulu8_sel::return#9 = phi( sin8s::@10/mulu8_sel::return#2 )
  sin8s::x3_6#0 = mulu8_sel::return#9
  sin8s::usinx#0 = sin8s::x1#2 - sin8s::x3_6#0
  mulu8_sel::v1#3 = sin8s::x3#1
  mulu8_sel::v2#3 = sin8s::x1#2
  mulu8_sel::select#3 = 0
  call mulu8_sel
  mulu8_sel::return#3 = mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  sin8s::isUpper#5 = phi( sin8s::@11/sin8s::isUpper#6 )
  sin8s::usinx#7 = phi( sin8s::@11/sin8s::usinx#0 )
  sin8s::x1#3 = phi( sin8s::@11/sin8s::x1#2 )
  mulu8_sel::return#10 = phi( sin8s::@11/mulu8_sel::return#3 )
  sin8s::x4#0 = mulu8_sel::return#10
  mulu8_sel::v1#4 = sin8s::x4#0
  mulu8_sel::v2#4 = sin8s::x1#3
  mulu8_sel::select#4 = 0
  call mulu8_sel
  mulu8_sel::return#4 = mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  sin8s::isUpper#3 = phi( sin8s::@12/sin8s::isUpper#5 )
  sin8s::usinx#3 = phi( sin8s::@12/sin8s::usinx#7 )
  mulu8_sel::return#11 = phi( sin8s::@12/mulu8_sel::return#4 )
  sin8s::x5#0 = mulu8_sel::return#11
  sin8s::x5_128#0 = sin8s::x5#0 >> 4
  sin8s::$13 = sin8s::usinx#3 + sin8s::x5_128#0
  sin8s::usinx#1 = sin8s::$13
  sin8s::$14 = sin8s::usinx#1 >= $80
  sin8s::$15 = ! sin8s::$14
  if(sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  sin8s::isUpper#11 = phi( sin8s::@1/sin8s::isUpper#10 )
  sin8s::x#7 = phi( sin8s::@1/sin8s::x#4 )
  sin8s::$19 = PI_u4f12 - sin8s::x#7
  sin8s::x#2 = sin8s::$19
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  sin8s::isUpper#2 = phi( sin8s::@13/sin8s::isUpper#3, sin8s::@7/sin8s::isUpper#4 )
  sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  sin8s::sinx#0 = (signed char)sin8s::usinx#4
  sin8s::$16 = sin8s::isUpper#2 != 0
  sin8s::$17 = ! sin8s::$16
  if(sin8s::$17) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@13
  sin8s::isUpper#4 = phi( sin8s::@13/sin8s::isUpper#3 )
  sin8s::usinx#5 = phi( sin8s::@13/sin8s::usinx#1 )
  sin8s::usinx#2 = -- sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  sin8s::sinx#2 = phi( sin8s::@3/sin8s::sinx#0, sin8s::@8/sin8s::sinx#1 )
  sin8s::return#1 = sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  sin8s::usinx#6 = phi( sin8s::@3/sin8s::usinx#4 )
  sin8s::$20 = - (signed char)sin8s::usinx#6
  sin8s::sinx#1 = sin8s::$20
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  sin8s::return#4 = phi( sin8s::@4/sin8s::return#1 )
  sin8s::return#2 = sin8s::return#4
  return 
  to:@return

char mulu8_sel(char v1 , char v2 , char select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  mulu8_sel::select#6 = phi( sin8s::@10/mulu8_sel::select#2, sin8s::@11/mulu8_sel::select#3, sin8s::@12/mulu8_sel::select#4, sin8s::@2/mulu8_sel::select#0, sin8s::@9/mulu8_sel::select#1 )
  mulu8_sel::v2#5 = phi( sin8s::@10/mulu8_sel::v2#2, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  mul8u::a#0 = mulu8_sel::v1#5
  mul8u::b#0 = mulu8_sel::v2#5
  call mul8u
  mul8u::return#0 = mul8u::return#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  mulu8_sel::select#5 = phi( mulu8_sel/mulu8_sel::select#6 )
  mul8u::return#3 = phi( mulu8_sel/mul8u::return#0 )
  mulu8_sel::$0 = mul8u::return#3
  mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  mulu8_sel::$2 = byte1  mulu8_sel::$1
  mulu8_sel::return#5 = mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  mulu8_sel::return#12 = phi( mulu8_sel::@1/mulu8_sel::return#5 )
  mulu8_sel::return#6 = mulu8_sel::return#12
  return 
  to:@return

unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
divr16u: scope:[divr16u]  from div16u
  divr16u::divisor#5 = phi( div16u/divr16u::divisor#0 )
  divr16u::dividend#4 = phi( div16u/divr16u::dividend#1 )
  divr16u::rem#8 = phi( div16u/divr16u::rem#3 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#3 = phi( divr16u/divr16u::divisor#5, divr16u::@3/divr16u::divisor#6 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#2 = phi( divr16u/divr16u::dividend#4, divr16u::@3/divr16u::dividend#5 )
  divr16u::rem#4 = phi( divr16u/divr16u::rem#8, divr16u::@3/divr16u::rem#9 )
  divr16u::$0 = divr16u::rem#4 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = byte1  divr16u::dividend#2
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#1 = phi( divr16u::@1/divr16u::divisor#3, divr16u::@4/divr16u::divisor#4 )
  divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#3 = phi( divr16u::@1/divr16u::dividend#2, divr16u::@4/divr16u::dividend#6 )
  divr16u::$6 = divr16u::dividend#3 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#4 = phi( divr16u::@1/divr16u::divisor#3 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#6 = phi( divr16u::@1/divr16u::dividend#2 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#6 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#6 = phi( divr16u::@2/divr16u::divisor#1, divr16u::@5/divr16u::divisor#2 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#5 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#7 )
  divr16u::rem#9 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#7 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#2 = phi( divr16u::@2/divr16u::divisor#1 )
  divr16u::rem#7 = phi( divr16u::@2/divr16u::rem#5 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#7 - divr16u::divisor#2
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  divr16u::return#3 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#3
  return 
  to:@return

unsigned int div16u(unsigned int dividend , unsigned int divisor)
div16u: scope:[div16u]  from sin8s_gen
  div16u::divisor#1 = phi( sin8s_gen/div16u::divisor#0 )
  div16u::dividend#1 = phi( sin8s_gen/div16u::dividend#0 )
  divr16u::dividend#1 = div16u::dividend#1
  divr16u::divisor#0 = div16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u
  divr16u::return#2 = divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  divr16u::return#4 = phi( div16u/divr16u::return#2 )
  div16u::$0 = divr16u::return#4
  div16u::return#1 = div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  div16u::return#4 = phi( div16u::@1/div16u::return#1 )
  div16u::return#2 = div16u::return#4
  return 
  to:@return

unsigned int mul8u(char a , char b)
mul8u: scope:[mul8u]  from mulu8_sel
  mul8u::a#5 = phi( mulu8_sel/mul8u::a#0 )
  mul8u::b#1 = phi( mulu8_sel/mul8u::b#0 )
  mul8u::res#0 = 0
  mul8u::mb#0 = (unsigned int)mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  mul8u::mb#5 = phi( mul8u/mul8u::mb#0, mul8u::@4/mul8u::mb#1 )
  mul8u::res#4 = phi( mul8u/mul8u::res#0, mul8u::@4/mul8u::res#6 )
  mul8u::a#2 = phi( mul8u/mul8u::a#5, mul8u::@4/mul8u::a#1 )
  mul8u::$0 = mul8u::a#2 != 0
  if(mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  mul8u::res#5 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::mb#4 = phi( mul8u::@1/mul8u::mb#5 )
  mul8u::a#3 = phi( mul8u::@1/mul8u::a#2 )
  mul8u::$1 = mul8u::a#3 & 1
  mul8u::$2 = mul8u::$1 != 0
  mul8u::$3 = ! mul8u::$2
  if(mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  mul8u::res#2 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::return#1 = mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  mul8u::res#6 = phi( mul8u::@2/mul8u::res#5, mul8u::@5/mul8u::res#1 )
  mul8u::mb#2 = phi( mul8u::@2/mul8u::mb#4, mul8u::@5/mul8u::mb#3 )
  mul8u::a#4 = phi( mul8u::@2/mul8u::a#3, mul8u::@5/mul8u::a#6 )
  mul8u::$5 = mul8u::a#4 >> 1
  mul8u::a#1 = mul8u::$5
  mul8u::$6 = mul8u::mb#2 << 1
  mul8u::mb#1 = mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  mul8u::a#6 = phi( mul8u::@2/mul8u::a#3 )
  mul8u::mb#3 = phi( mul8u::@2/mul8u::mb#4 )
  mul8u::res#3 = phi( mul8u::@2/mul8u::res#5 )
  mul8u::$4 = mul8u::res#3 + mul8u::mb#3
  mul8u::res#1 = mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  mul8u::return#4 = phi( mul8u::@3/mul8u::return#1 )
  mul8u::return#2 = mul8u::return#4
  return 
  to:@return

void print_str(char *str)
print_str: scope:[print_str]  from main::@4
  print_char_cursor#47 = phi( main::@4/print_char_cursor#14 )
  print_str::str#5 = phi( main::@4/print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#39 = phi( print_str/print_char_cursor#47, print_str::@3/print_char_cursor#0 )
  print_str::str#2 = phi( print_str/print_str::str#5, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#2
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#38 = phi( print_str::@1/print_char_cursor#39 )
  print_str::str#3 = phi( print_str::@1/print_str::str#2 )
  print_char::ch#0 = *print_str::str#3
  call print_char
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#4 = phi( print_str::@2/print_str::str#3 )
  print_char_cursor#20 = phi( print_str::@2/print_char_cursor#10 )
  print_char_cursor#0 = print_char_cursor#20
  print_str::str#0 = ++ print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#21 = phi( print_str::@1/print_char_cursor#39 )
  print_char_cursor#1 = print_char_cursor#21
  return 
  to:@return

void print_schar(signed char b)
print_schar: scope:[print_schar]  from main::@1
  print_char_cursor#48 = phi( main::@1/print_char_cursor#45 )
  print_schar::b#2 = phi( main::@1/print_schar::b#1 )
  print_schar::$0 = print_schar::b#2 < 0
  if(print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  print_schar::b#5 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#40 = phi( print_schar/print_char_cursor#48 )
  print_char::ch#1 = '-'
  call print_char
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  print_schar::b#3 = phi( print_schar::@1/print_schar::b#5 )
  print_char_cursor#22 = phi( print_schar::@1/print_char_cursor#10 )
  print_char_cursor#2 = print_char_cursor#22
  print_schar::$4 = - print_schar::b#3
  print_schar::b#0 = print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  print_schar::b#7 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#41 = phi( print_schar/print_char_cursor#48 )
  print_char::ch#2 = ' '
  call print_char
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  print_schar::b#6 = phi( print_schar::@3/print_schar::b#7 )
  print_char_cursor#23 = phi( print_schar::@3/print_char_cursor#10 )
  print_char_cursor#3 = print_char_cursor#23
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  print_char_cursor#42 = phi( print_schar::@4/print_char_cursor#2, print_schar::@5/print_char_cursor#3 )
  print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@5/print_schar::b#6 )
  print_uchar::b#0 = (char)print_schar::b#4
  call print_uchar
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  print_char_cursor#24 = phi( print_schar::@2/print_char_cursor#8 )
  print_char_cursor#4 = print_char_cursor#24
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  print_char_cursor#25 = phi( print_schar::@6/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#25
  return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  print_char_cursor#43 = phi( print_schar::@2/print_char_cursor#42 )
  print_uchar::b#1 = phi( print_schar::@2/print_uchar::b#0 )
  print_uchar::$0 = print_uchar::b#1 >> 4
  print_char::ch#3 = print_hextab[print_uchar::$0]
  call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#2 = phi( print_uchar/print_uchar::b#1 )
  print_char_cursor#26 = phi( print_uchar/print_char_cursor#10 )
  print_char_cursor#6 = print_char_cursor#26
  print_uchar::$2 = print_uchar::b#2 & $f
  print_char::ch#4 = print_hextab[print_uchar::$2]
  call print_char
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#27 = phi( print_uchar::@1/print_char_cursor#10 )
  print_char_cursor#7 = print_char_cursor#27
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#28 = phi( print_uchar::@2/print_char_cursor#7 )
  print_char_cursor#8 = print_char_cursor#28
  return 
  to:@return

void print_char(char ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  print_char_cursor#29 = phi( print_schar::@1/print_char_cursor#40, print_schar::@3/print_char_cursor#41, print_str::@2/print_char_cursor#38, print_uchar/print_char_cursor#43, print_uchar::@1/print_char_cursor#6 )
  print_char::ch#5 = phi( print_schar::@1/print_char::ch#1, print_schar::@3/print_char::ch#2, print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  *print_char_cursor#29 = print_char::ch#5
  print_char_cursor#9 = ++ print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#30 = phi( print_char/print_char_cursor#9 )
  print_char_cursor#10 = print_char_cursor#30
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@2
  print_screen#2 = phi( main::@2/print_screen#5 )
  memset::str#0 = (void *)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset
  memset::return#0 = memset::return#2
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#0 = print_screen#3
  print_char_cursor#11 = print_line_cursor#0
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#31 = phi( print_cls::@1/print_char_cursor#11 )
  print_line_cursor#7 = phi( print_cls::@1/print_line_cursor#0 )
  print_line_cursor#1 = print_line_cursor#7
  print_char_cursor#12 = print_char_cursor#31
  return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#1 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (char *)memset::str#2
  memset::end#0 = memset::$4 + memset::num#2
  memset::dst#0 = ((char *)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#1 )
  memset::return#2 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#49 = phi( __start::@1/print_char_cursor#46 )
  print_line_cursor#15 = phi( __start::@1/print_line_cursor#14 )
  print_screen#7 = phi( __start::@1/print_screen#8 )
  sin8s_gen::sintab#1 = sintab2
  sin8s_gen::wavelength#0 = wavelength
  call sin8s_gen
  to:main::@2
main::@2: scope:[main]  from main
  print_char_cursor#44 = phi( main/print_char_cursor#49 )
  print_line_cursor#12 = phi( main/print_line_cursor#15 )
  print_screen#5 = phi( main/print_screen#7 )
  call print_cls
  to:main::@3
main::@3: scope:[main]  from main::@2
  print_char_cursor#32 = phi( main::@2/print_char_cursor#12 )
  print_line_cursor#8 = phi( main::@2/print_line_cursor#1 )
  print_line_cursor#2 = print_line_cursor#8
  print_char_cursor#13 = print_char_cursor#32
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  print_line_cursor#17 = phi( main::@3/print_line_cursor#2, main::@5/print_line_cursor#13 )
  print_char_cursor#45 = phi( main::@3/print_char_cursor#13, main::@5/print_char_cursor#15 )
  main::i#2 = phi( main::@3/main::i#0, main::@5/main::i#1 )
  main::$6 = (signed char)sintabref[main::i#2]
  main::sb#0 = sintab2[main::i#2] - main::$6
  print_schar::b#1 = main::sb#0
  call print_schar
  to:main::@4
main::@4: scope:[main]  from main::@1
  print_line_cursor#16 = phi( main::@1/print_line_cursor#17 )
  main::i#4 = phi( main::@1/main::i#2 )
  print_char_cursor#33 = phi( main::@1/print_char_cursor#5 )
  print_char_cursor#14 = print_char_cursor#33
  print_str::str#1 = main::str
  call print_str
  to:main::@5
main::@5: scope:[main]  from main::@4
  print_line_cursor#13 = phi( main::@4/print_line_cursor#16 )
  main::i#3 = phi( main::@4/main::i#4 )
  print_char_cursor#34 = phi( main::@4/print_char_cursor#1 )
  print_char_cursor#15 = print_char_cursor#34
  main::i#1 = main::i#3 + rangenext(0,$bf)
  main::$5 = main::i#1 != rangelast(0,$bf)
  if(main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  print_char_cursor#35 = phi( main::@5/print_char_cursor#15 )
  print_line_cursor#9 = phi( main::@5/print_line_cursor#13 )
  print_line_cursor#3 = print_line_cursor#9
  print_char_cursor#16 = print_char_cursor#35
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (char *)$400
  print_line_cursor#4 = print_screen#0
  print_char_cursor#17 = print_line_cursor#4
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#46 = phi( __start::__init1/print_char_cursor#17 )
  print_line_cursor#14 = phi( __start::__init1/print_line_cursor#4 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  print_char_cursor#36 = phi( __start::@1/print_char_cursor#16 )
  print_line_cursor#10 = phi( __start::@1/print_line_cursor#3 )
  print_line_cursor#5 = print_line_cursor#10
  print_char_cursor#18 = print_char_cursor#36
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#37 = phi( __start::@2/print_char_cursor#18 )
  print_line_cursor#11 = phi( __start::@2/print_line_cursor#5 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#6 = print_line_cursor#11
  print_char_cursor#19 = print_char_cursor#37
  return 
  to:@return

SYMBOL TABLE SSA
__constant const unsigned int PI2_u4f12 = $6488
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned int PI_u4f12 = $3244
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void __start()
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::$0
unsigned int div16u::dividend
unsigned int div16u::dividend#0
unsigned int div16u::dividend#1
unsigned int div16u::divisor
unsigned int div16u::divisor#0
unsigned int div16u::divisor#1
unsigned int div16u::return
unsigned int div16u::return#0
unsigned int div16u::return#1
unsigned int div16u::return#2
unsigned int div16u::return#3
unsigned int div16u::return#4
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
unsigned int divr16u::$0
char divr16u::$1
unsigned int divr16u::$10
bool divr16u::$11
number divr16u::$2
bool divr16u::$3
bool divr16u::$4
number divr16u::$5
unsigned int divr16u::$6
unsigned int divr16u::$7
bool divr16u::$8
bool divr16u::$9
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0
unsigned int divr16u::dividend#1
unsigned int divr16u::dividend#2
unsigned int divr16u::dividend#3
unsigned int divr16u::dividend#4
unsigned int divr16u::dividend#5
unsigned int divr16u::dividend#6
unsigned int divr16u::dividend#7
unsigned int divr16u::divisor
unsigned int divr16u::divisor#0
unsigned int divr16u::divisor#1
unsigned int divr16u::divisor#2
unsigned int divr16u::divisor#3
unsigned int divr16u::divisor#4
unsigned int divr16u::divisor#5
unsigned int divr16u::divisor#6
char divr16u::i
char divr16u::i#0
char divr16u::i#1
char divr16u::i#2
char divr16u::i#3
char divr16u::i#4
char divr16u::i#5
char divr16u::i#6
unsigned int divr16u::quotient
unsigned int divr16u::quotient#0
unsigned int divr16u::quotient#1
unsigned int divr16u::quotient#2
unsigned int divr16u::quotient#3
unsigned int divr16u::quotient#4
unsigned int divr16u::quotient#5
unsigned int divr16u::quotient#6
unsigned int divr16u::quotient#7
unsigned int divr16u::quotient#8
unsigned int divr16u::rem
unsigned int divr16u::rem#0
unsigned int divr16u::rem#1
unsigned int divr16u::rem#2
unsigned int divr16u::rem#3
unsigned int divr16u::rem#4
unsigned int divr16u::rem#5
unsigned int divr16u::rem#6
unsigned int divr16u::rem#7
unsigned int divr16u::rem#8
unsigned int divr16u::rem#9
unsigned int divr16u::return
unsigned int divr16u::return#0
unsigned int divr16u::return#1
unsigned int divr16u::return#2
unsigned int divr16u::return#3
unsigned int divr16u::return#4
void main()
bool main::$5
signed char main::$6
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
signed char main::sb
signed char main::sb#0
__constant char main::str[3] = "  "
void * memset(void *str , char c , unsigned int num)
bool memset::$0
bool memset::$1
bool memset::$3
char *memset::$4
char memset::c
char memset::c#0
char memset::c#1
char memset::c#2
char memset::c#3
char memset::c#4
char *memset::dst
char *memset::dst#0
char *memset::dst#1
char *memset::dst#2
char *memset::dst#3
char *memset::end
char *memset::end#0
char *memset::end#1
char *memset::end#2
unsigned int memset::num
unsigned int memset::num#0
unsigned int memset::num#1
unsigned int memset::num#2
void *memset::return
void *memset::return#0
void *memset::return#1
void *memset::return#2
void *memset::return#3
void *memset::str
void *memset::str#0
void *memset::str#1
void *memset::str#2
void *memset::str#3
void *memset::str#4
void *memset::str#5
unsigned int mul8u(char a , char b)
bool mul8u::$0
number mul8u::$1
bool mul8u::$2
bool mul8u::$3
unsigned int mul8u::$4
char mul8u::$5
unsigned int mul8u::$6
char mul8u::a
char mul8u::a#0
char mul8u::a#1
char mul8u::a#2
char mul8u::a#3
char mul8u::a#4
char mul8u::a#5
char mul8u::a#6
char mul8u::b
char mul8u::b#0
char mul8u::b#1
unsigned int mul8u::mb
unsigned int mul8u::mb#0
unsigned int mul8u::mb#1
unsigned int mul8u::mb#2
unsigned int mul8u::mb#3
unsigned int mul8u::mb#4
unsigned int mul8u::mb#5
unsigned int mul8u::res
unsigned int mul8u::res#0
unsigned int mul8u::res#1
unsigned int mul8u::res#2
unsigned int mul8u::res#3
unsigned int mul8u::res#4
unsigned int mul8u::res#5
unsigned int mul8u::res#6
unsigned int mul8u::return
unsigned int mul8u::return#0
unsigned int mul8u::return#1
unsigned int mul8u::return#2
unsigned int mul8u::return#3
unsigned int mul8u::return#4
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0
unsigned int mulu8_sel::$1
char mulu8_sel::$2
char mulu8_sel::return
char mulu8_sel::return#0
char mulu8_sel::return#1
char mulu8_sel::return#10
char mulu8_sel::return#11
char mulu8_sel::return#12
char mulu8_sel::return#2
char mulu8_sel::return#3
char mulu8_sel::return#4
char mulu8_sel::return#5
char mulu8_sel::return#6
char mulu8_sel::return#7
char mulu8_sel::return#8
char mulu8_sel::return#9
char mulu8_sel::select
char mulu8_sel::select#0
char mulu8_sel::select#1
char mulu8_sel::select#2
char mulu8_sel::select#3
char mulu8_sel::select#4
char mulu8_sel::select#5
char mulu8_sel::select#6
char mulu8_sel::v1
char mulu8_sel::v1#0
char mulu8_sel::v1#1
char mulu8_sel::v1#2
char mulu8_sel::v1#3
char mulu8_sel::v1#4
char mulu8_sel::v1#5
char mulu8_sel::v2
char mulu8_sel::v2#0
char mulu8_sel::v2#1
char mulu8_sel::v2#2
char mulu8_sel::v2#3
char mulu8_sel::v2#4
char mulu8_sel::v2#5
void print_char(char ch)
char print_char::ch
char print_char::ch#0
char print_char::ch#1
char print_char::ch#2
char print_char::ch#3
char print_char::ch#4
char print_char::ch#5
char *print_char_cursor
char *print_char_cursor#0
char *print_char_cursor#1
char *print_char_cursor#10
char *print_char_cursor#11
char *print_char_cursor#12
char *print_char_cursor#13
char *print_char_cursor#14
char *print_char_cursor#15
char *print_char_cursor#16
char *print_char_cursor#17
char *print_char_cursor#18
char *print_char_cursor#19
char *print_char_cursor#2
char *print_char_cursor#20
char *print_char_cursor#21
char *print_char_cursor#22
char *print_char_cursor#23
char *print_char_cursor#24
char *print_char_cursor#25
char *print_char_cursor#26
char *print_char_cursor#27
char *print_char_cursor#28
char *print_char_cursor#29
char *print_char_cursor#3
char *print_char_cursor#30
char *print_char_cursor#31
char *print_char_cursor#32
char *print_char_cursor#33
char *print_char_cursor#34
char *print_char_cursor#35
char *print_char_cursor#36
char *print_char_cursor#37
char *print_char_cursor#38
char *print_char_cursor#39
char *print_char_cursor#4
char *print_char_cursor#40
char *print_char_cursor#41
char *print_char_cursor#42
char *print_char_cursor#43
char *print_char_cursor#44
char *print_char_cursor#45
char *print_char_cursor#46
char *print_char_cursor#47
char *print_char_cursor#48
char *print_char_cursor#49
char *print_char_cursor#5
char *print_char_cursor#6
char *print_char_cursor#7
char *print_char_cursor#8
char *print_char_cursor#9
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0
char *print_line_cursor#1
char *print_line_cursor#10
char *print_line_cursor#11
char *print_line_cursor#12
char *print_line_cursor#13
char *print_line_cursor#14
char *print_line_cursor#15
char *print_line_cursor#16
char *print_line_cursor#17
char *print_line_cursor#2
char *print_line_cursor#3
char *print_line_cursor#4
char *print_line_cursor#5
char *print_line_cursor#6
char *print_line_cursor#7
char *print_line_cursor#8
char *print_line_cursor#9
void print_schar(signed char b)
bool print_schar::$0
signed char print_schar::$4
signed char print_schar::b
signed char print_schar::b#0
signed char print_schar::b#1
signed char print_schar::b#2
signed char print_schar::b#3
signed char print_schar::b#4
signed char print_schar::b#5
signed char print_schar::b#6
signed char print_schar::b#7
char *print_screen
char *print_screen#0
char *print_screen#1
char *print_screen#2
char *print_screen#3
char *print_screen#4
char *print_screen#5
char *print_screen#6
char *print_screen#7
char *print_screen#8
void print_str(char *str)
bool print_str::$1
char *print_str::str
char *print_str::str#0
char *print_str::str#1
char *print_str::str#2
char *print_str::str#3
char *print_str::str#4
char *print_str::str#5
void print_uchar(char b)
char print_uchar::$0
number print_uchar::$2
char print_uchar::b
char print_uchar::b#0
char print_uchar::b#1
char print_uchar::b#2
signed char sin8s(unsigned int x)
bool sin8s::$0
bool sin8s::$1
char sin8s::$13
bool sin8s::$14
bool sin8s::$15
bool sin8s::$16
bool sin8s::$17
unsigned int sin8s::$18
unsigned int sin8s::$19
bool sin8s::$2
signed char sin8s::$20
bool sin8s::$3
unsigned int sin8s::$4
__constant const char sin8s::DIV_6 = $2b
char sin8s::isUpper
char sin8s::isUpper#0
char sin8s::isUpper#1
char sin8s::isUpper#10
char sin8s::isUpper#11
char sin8s::isUpper#2
char sin8s::isUpper#3
char sin8s::isUpper#4
char sin8s::isUpper#5
char sin8s::isUpper#6
char sin8s::isUpper#7
char sin8s::isUpper#8
char sin8s::isUpper#9
signed char sin8s::return
signed char sin8s::return#0
signed char sin8s::return#1
signed char sin8s::return#2
signed char sin8s::return#3
signed char sin8s::return#4
signed char sin8s::sinx
signed char sin8s::sinx#0
signed char sin8s::sinx#1
signed char sin8s::sinx#2
char sin8s::usinx
char sin8s::usinx#0
char sin8s::usinx#1
char sin8s::usinx#2
char sin8s::usinx#3
char sin8s::usinx#4
char sin8s::usinx#5
char sin8s::usinx#6
char sin8s::usinx#7
unsigned int sin8s::x
unsigned int sin8s::x#0
unsigned int sin8s::x#1
unsigned int sin8s::x#2
unsigned int sin8s::x#3
unsigned int sin8s::x#4
unsigned int sin8s::x#5
unsigned int sin8s::x#6
unsigned int sin8s::x#7
char sin8s::x1
char sin8s::x1#0
char sin8s::x1#1
char sin8s::x1#2
char sin8s::x1#3
char sin8s::x1#4
char sin8s::x2
char sin8s::x2#0
char sin8s::x3
char sin8s::x3#0
char sin8s::x3#1
char sin8s::x3_6
char sin8s::x3_6#0
char sin8s::x4
char sin8s::x4#0
char sin8s::x5
char sin8s::x5#0
char sin8s::x5_128
char sin8s::x5_128#0
void sin8s_gen(signed char *sintab , unsigned int wavelength)
bool sin8s_gen::$1
signed char sin8s_gen::$2
unsigned int sin8s_gen::$3
unsigned int sin8s_gen::i
unsigned int sin8s_gen::i#0
unsigned int sin8s_gen::i#1
unsigned int sin8s_gen::i#2
unsigned int sin8s_gen::i#3
unsigned int sin8s_gen::i#4
signed char *sin8s_gen::sintab
signed char *sin8s_gen::sintab#0
signed char *sin8s_gen::sintab#1
signed char *sin8s_gen::sintab#2
signed char *sin8s_gen::sintab#3
signed char *sin8s_gen::sintab#4
signed char *sin8s_gen::sintab#5
signed char *sin8s_gen::sintab#6
unsigned int sin8s_gen::step
unsigned int sin8s_gen::step#0
unsigned int sin8s_gen::step#1
unsigned int sin8s_gen::step#2
unsigned int sin8s_gen::step#3
unsigned int sin8s_gen::wavelength
unsigned int sin8s_gen::wavelength#0
unsigned int sin8s_gen::wavelength#1
unsigned int sin8s_gen::wavelength#2
unsigned int sin8s_gen::wavelength#3
unsigned int sin8s_gen::wavelength#4
unsigned int sin8s_gen::wavelength#5
unsigned int sin8s_gen::x
unsigned int sin8s_gen::x#0
unsigned int sin8s_gen::x#1
unsigned int sin8s_gen::x#2
unsigned int sin8s_gen::x#3
unsigned int sin8s_gen::x#4
__constant signed char sintab2[$c0] = { fill( $c0, 0) }
__constant char sintabref[] = { 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc }
__constant unsigned int wavelength = $c0

Adding number conversion cast (unumber) 1 in sin8s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin8s::$4 = sin8s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu8_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu8_sel::select#1 = 1
Adding number conversion cast (unumber) 1 in mulu8_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu8_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu8_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin8s::x5_128#0 = sin8s::x5#0 >> 4
Adding number conversion cast (unumber) $80 in sin8s::$14 = sin8s::usinx#1 >= $80
Adding number conversion cast (unumber) 0 in sin8s::$16 = sin8s::isUpper#2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#4 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#6 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#6 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in mul8u::$0 = mul8u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul8u::$1 = mul8u::a#3 & 1
Adding number conversion cast (unumber) mul8u::$1 in mul8u::$1 = mul8u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul8u::$2 = mul8u::$1 != 0
Adding number conversion cast (unumber) 1 in mul8u::$5 = mul8u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul8u::$6 = mul8u::mb#2 << 1
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#2
Adding number conversion cast (snumber) 0 in print_schar::$0 = print_schar::b#2 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#1 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#2 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#2 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast sin8s::isUpper#1 = (unumber)1
Inlining cast mulu8_sel::select#0 = (unumber)0
Inlining cast mulu8_sel::select#1 = (unumber)1
Inlining cast mulu8_sel::select#2 = (unumber)1
Inlining cast mulu8_sel::select#3 = (unumber)0
Inlining cast mulu8_sel::select#4 = (unumber)0
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast memset::dst#0 = (char *)memset::str#2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized signed number type (signed char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (unsigned int) $3e8
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to unsigned int in divr16u::$5 = divr16u::rem#6 | 1
Inferred type updated to char in mul8u::$1 = mul8u::a#3 & 1
Inferred type updated to char in print_uchar::$2 = print_uchar::b#2 & $f
Inversing boolean not [27] sin8s::$1 = sin8s::x#3 < PI_u4f12 from [26] sin8s::$0 = sin8s::x#3 >= PI_u4f12
Inversing boolean not [31] sin8s::$3 = sin8s::x#4 < PI_HALF_u4f12 from [30] sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
Inversing boolean not [80] sin8s::$15 = sin8s::usinx#1 < $80 from [79] sin8s::$14 = sin8s::usinx#1 >= $80
Inversing boolean not [88] sin8s::$17 = sin8s::isUpper#2 == 0 from [87] sin8s::$16 = sin8s::isUpper#2 != 0
Inversing boolean not [122] divr16u::$4 = divr16u::$2 == 0 from [121] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [130] divr16u::$9 = divr16u::rem#5 < divr16u::divisor#1 from [129] divr16u::$8 = divr16u::rem#5 >= divr16u::divisor#1
Inversing boolean not [169] mul8u::$3 = mul8u::$1 == 0 from [168] mul8u::$2 = mul8u::$1 != 0
Inversing boolean not [255] memset::$1 = memset::num#1 <= 0 from [254] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias div16u::return#0 = div16u::return#3 
Alias sin8s_gen::wavelength#1 = sin8s_gen::wavelength#3 
Alias sin8s_gen::sintab#5 = sin8s_gen::sintab#6 
Alias sin8s_gen::x#2 = sin8s_gen::x#4 sin8s_gen::x#3 
Alias sin8s_gen::sintab#2 = sin8s_gen::sintab#3 sin8s_gen::sintab#4 
Alias sin8s_gen::step#1 = sin8s_gen::step#2 sin8s_gen::step#3 
Alias sin8s_gen::i#2 = sin8s_gen::i#4 sin8s_gen::i#3 
Alias sin8s_gen::wavelength#2 = sin8s_gen::wavelength#5 sin8s_gen::wavelength#4 
Alias sin8s::return#0 = sin8s::return#3 
Alias sin8s_gen::x#1 = sin8s_gen::$3 
Alias sin8s::x#3 = sin8s::x#5 
Alias sin8s::x#1 = sin8s::$18 
Alias mulu8_sel::return#0 = mulu8_sel::return#7 
Alias sin8s::x1#0 = sin8s::x1#1 sin8s::x1#4 sin8s::x1#2 sin8s::x1#3 
Alias sin8s::isUpper#3 = sin8s::isUpper#8 sin8s::isUpper#9 sin8s::isUpper#7 sin8s::isUpper#6 sin8s::isUpper#5 sin8s::isUpper#4 
Alias mulu8_sel::return#1 = mulu8_sel::return#8 
Alias mulu8_sel::return#2 = mulu8_sel::return#9 
Alias sin8s::x3#0 = sin8s::x3#1 
Alias mulu8_sel::return#10 = mulu8_sel::return#3 
Alias sin8s::usinx#0 = sin8s::usinx#7 sin8s::usinx#3 
Alias mulu8_sel::return#11 = mulu8_sel::return#4 
Alias sin8s::usinx#1 = sin8s::$13 sin8s::usinx#5 
Alias sin8s::x#4 = sin8s::x#7 
Alias sin8s::isUpper#10 = sin8s::isUpper#11 
Alias sin8s::x#2 = sin8s::$19 
Alias sin8s::return#1 = sin8s::sinx#2 sin8s::return#4 sin8s::return#2 
Alias sin8s::usinx#4 = sin8s::usinx#6 
Alias sin8s::sinx#1 = sin8s::$20 
Alias mul8u::return#0 = mul8u::return#3 
Alias mulu8_sel::select#5 = mulu8_sel::select#6 
Alias mulu8_sel::return#12 = mulu8_sel::return#5 mulu8_sel::$2 mulu8_sel::return#6 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#6 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#7 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#2 = divr16u::dividend#6 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#5 = divr16u::rem#7 
Alias divr16u::divisor#1 = divr16u::divisor#2 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#3 divr16u::return#1 
Alias divr16u::return#2 = divr16u::return#4 
Alias div16u::return#1 = div16u::$0 div16u::return#4 div16u::return#2 
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#1 mul8u::res#3 mul8u::return#4 mul8u::return#2 
Alias mul8u::a#1 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#38 print_char_cursor#39 print_char_cursor#21 
Alias print_char_cursor#0 = print_char_cursor#20 
Alias print_char_cursor#40 = print_char_cursor#48 print_char_cursor#41 
Alias print_schar::b#2 = print_schar::b#5 print_schar::b#3 print_schar::b#7 print_schar::b#6 
Alias print_char_cursor#2 = print_char_cursor#22 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#23 = print_char_cursor#3 
Alias print_char_cursor#24 = print_char_cursor#4 print_char_cursor#25 print_char_cursor#5 
Alias print_uchar::b#1 = print_uchar::b#2 
Alias print_char_cursor#26 = print_char_cursor#6 
Alias print_char_cursor#27 = print_char_cursor#7 print_char_cursor#28 print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#30 print_char_cursor#9 
Alias print_line_cursor#0 = print_screen#3 print_screen#2 print_char_cursor#11 print_line_cursor#7 print_char_cursor#31 print_line_cursor#1 print_char_cursor#12 
Alias memset::return#1 = memset::str#1 memset::return#3 memset::return#2 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_screen#5 = print_screen#7 
Alias print_line_cursor#12 = print_line_cursor#15 
Alias print_char_cursor#44 = print_char_cursor#49 
Alias print_line_cursor#2 = print_line_cursor#8 
Alias print_char_cursor#13 = print_char_cursor#32 
Alias main::i#2 = main::i#4 main::i#3 
Alias print_line_cursor#13 = print_line_cursor#16 print_line_cursor#17 print_line_cursor#9 print_line_cursor#3 
Alias print_char_cursor#14 = print_char_cursor#33 
Alias print_char_cursor#15 = print_char_cursor#34 print_char_cursor#35 print_char_cursor#16 
Alias print_screen#0 = print_line_cursor#4 print_char_cursor#17 print_line_cursor#14 print_char_cursor#46 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#10 = print_line_cursor#5 print_line_cursor#11 print_line_cursor#6 
Alias print_char_cursor#18 = print_char_cursor#36 print_char_cursor#37 print_char_cursor#19 
Successful SSA optimization Pass2AliasElimination
Alias sin8s::isUpper#10 = sin8s::isUpper#3 sin8s::isUpper#2 
Alias divr16u::dividend#2 = divr16u::dividend#3 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#1 = divr16u::divisor#3 divr16u::divisor#6 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#5 
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values sin8s_gen::wavelength#1 sin8s_gen::wavelength#0
Identical Phi Values sin8s_gen::sintab#5 sin8s_gen::sintab#1
Identical Phi Values sin8s_gen::wavelength#2 sin8s_gen::wavelength#1
Identical Phi Values sin8s_gen::step#1 sin8s_gen::step#0
Identical Phi Values sin8s::x#3 sin8s::x#0
Identical Phi Values divr16u::rem#8 divr16u::rem#3
Identical Phi Values divr16u::dividend#4 divr16u::dividend#1
Identical Phi Values divr16u::divisor#5 divr16u::divisor#0
Identical Phi Values divr16u::divisor#1 divr16u::divisor#5
Identical Phi Values div16u::dividend#1 div16u::dividend#0
Identical Phi Values div16u::divisor#1 div16u::divisor#0
Identical Phi Values mul8u::b#1 mul8u::b#0
Identical Phi Values mul8u::a#5 mul8u::a#0
Identical Phi Values print_str::str#5 print_str::str#1
Identical Phi Values print_char_cursor#47 print_char_cursor#14
Identical Phi Values print_char_cursor#0 print_char_cursor#10
Identical Phi Values print_schar::b#2 print_schar::b#1
Identical Phi Values print_char_cursor#40 print_char_cursor#45
Identical Phi Values print_char_cursor#2 print_char_cursor#10
Identical Phi Values print_char_cursor#23 print_char_cursor#10
Identical Phi Values print_char_cursor#24 print_char_cursor#27
Identical Phi Values print_uchar::b#1 print_uchar::b#0
Identical Phi Values print_char_cursor#43 print_char_cursor#42
Identical Phi Values print_char_cursor#26 print_char_cursor#10
Identical Phi Values print_char_cursor#27 print_char_cursor#10
Identical Phi Values print_line_cursor#0 print_screen#5
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_screen#5 print_screen#0
Identical Phi Values print_line_cursor#12 print_screen#0
Identical Phi Values print_char_cursor#44 print_screen#0
Identical Phi Values print_line_cursor#2 print_line_cursor#0
Identical Phi Values print_char_cursor#13 print_line_cursor#0
Identical Phi Values print_line_cursor#13 print_line_cursor#2
Identical Phi Values print_char_cursor#14 print_char_cursor#24
Identical Phi Values print_char_cursor#15 print_char_cursor#1
Identical Phi Values print_line_cursor#10 print_line_cursor#13
Identical Phi Values print_char_cursor#18 print_char_cursor#15
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#1 print_char_cursor#10
Identical Phi Values print_char_cursor#42 print_char_cursor#10
Identical Phi Values memset::return#1 memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition sin8s_gen::$1 [10] if(sin8s_gen::i#2<sin8s_gen::wavelength#0) goto sin8s_gen::@2
Simple Condition sin8s::$1 [23] if(sin8s::x#0<PI_u4f12) goto sin8s::@1
Simple Condition sin8s::$3 [26] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
Simple Condition sin8s::$15 [66] if(sin8s::usinx#1<$80) goto sin8s::@3
Simple Condition sin8s::$17 [71] if(sin8s::isUpper#10==0) goto sin8s::@4
Simple Condition divr16u::$4 [93] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [98] if(divr16u::rem#5<divr16u::divisor#0) goto divr16u::@3
Simple Condition divr16u::$11 [103] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition mul8u::$0 [120] if(mul8u::a#2!=0) goto mul8u::@2
Simple Condition mul8u::$3 [123] if(mul8u::$1==0) goto mul8u::@4
Simple Condition print_str::$1 [132] if(0!=*print_str::str#2) goto print_str::@2
Simple Condition print_schar::$0 [140] if(print_schar::b#1<0) goto print_schar::@1
Simple Condition memset::$1 [176] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [183] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$5 [205] if(main::i#1!=rangelast(0,$bf)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant div16u::dividend#0 = PI2_u4f12
Constant sin8s_gen::x#0 = 0
Constant sin8s_gen::i#0 = 0
Constant sin8s::isUpper#0 = 0
Constant sin8s::isUpper#1 = 1
Constant mulu8_sel::select#0 = 0
Constant mulu8_sel::select#1 = 1
Constant mulu8_sel::v2#2 = sin8s::DIV_6
Constant mulu8_sel::select#2 = 1
Constant mulu8_sel::select#3 = 0
Constant mulu8_sel::select#4 = 0
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant mul8u::res#0 = 0
Constant print_char::ch#1 = '-'
Constant print_char::ch#2 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant sin8s_gen::sintab#1 = sintab2
Constant sin8s_gen::wavelength#0 = wavelength
Constant main::i#0 = 0
Constant print_str::str#1 = main::str
Constant print_screen#0 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant div16u::divisor#0 = sin8s_gen::wavelength#0
Constant divr16u::dividend#1 = div16u::dividend#0
Constant memset::str#0 = (void *)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div16u::divisor#0
Constant memset::return#0 = memset::str#0
Constant memset::$4 = (char *)memset::str#0
Constant memset::dst#0 = (char *)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [176] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [101] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [103] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
Resolved ranged next value [203] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [205] if(main::i#1!=rangelast(0,$bf)) goto main::@1 to $c0
Eliminating unused constant memset::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [78] if(divr16u::i#1!=$10) goto divr16u::@1
Adding number conversion cast (unumber) $c0 in [138] if(main::i#1!=$c0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [123] memset::end#0 = memset::$4 + memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [51] sin8s::sinx#0 = (signed char)sin8s::usinx#4 keeping sin8s::usinx#4
Inlining Noop Cast [131] main::$6 = (signed char)sintabref[main::i#2] keeping sintabref[main::i#2]
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings sin8s_gen::x#0
Inlining constant with var siblings sin8s_gen::i#0
Inlining constant with var siblings sin8s_gen::sintab#1
Inlining constant with var siblings sin8s::isUpper#0
Inlining constant with var siblings sin8s::isUpper#1
Inlining constant with var siblings mulu8_sel::select#0
Inlining constant with var siblings mulu8_sel::select#1
Inlining constant with var siblings mulu8_sel::v2#2
Inlining constant with var siblings mulu8_sel::select#2
Inlining constant with var siblings mulu8_sel::select#3
Inlining constant with var siblings mulu8_sel::select#4
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::dividend#1
Inlining constant with var siblings mul8u::res#0
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#2
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::i#0
Constant inlined divr16u::rem#3 = 0
Constant inlined divr16u::i#0 = 0
Constant inlined sin8s::isUpper#1 = 1
Constant inlined sin8s::isUpper#0 = 0
Constant inlined sin8s_gen::x#0 = 0
Constant inlined divr16u::quotient#0 = 0
Constant inlined memset::$4 = (char *)memset::str#0
Constant inlined div16u::divisor#0 = wavelength
Constant inlined main::i#0 = 0
Constant inlined mulu8_sel::select#0 = 0
Constant inlined div16u::dividend#0 = PI2_u4f12
Constant inlined mulu8_sel::select#2 = 1
Constant inlined divr16u::divisor#0 = wavelength
Constant inlined mulu8_sel::select#1 = 1
Constant inlined mulu8_sel::select#4 = 0
Constant inlined mulu8_sel::select#3 = 0
Constant inlined divr16u::dividend#1 = PI2_u4f12
Constant inlined print_char::ch#2 = ' '
Constant inlined mulu8_sel::v2#2 = sin8s::DIV_6
Constant inlined mul8u::res#0 = 0
Constant inlined print_char::ch#1 = '-'
Constant inlined sin8s_gen::sintab#1 = sintab2
Constant inlined sin8s_gen::wavelength#0 = wavelength
Constant inlined memset::dst#0 = (char *)memset::str#0
Constant inlined print_str::str#1 = main::str
Constant inlined sin8s_gen::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $c0
Finalized unsigned number type (char) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting sin8s::@14(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@14 ) during phi lifting.
Added new block during phi lifting sin8s::@15(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@16(between sin8s::@13 and sin8s::@3)
Added new block during phi lifting sin8s::@17(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting main::@6(between main::@5 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of print_str
Adding NOP phi() at start of div16u
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of divr16u::@6
Adding NOP phi() at start of mul8u::@3
CALL GRAPH
Calls in [main] to sin8s_gen:1 print_cls:3 print_schar:8 print_str:10 
Calls in [sin8s_gen] to div16u:17 sin8s:24 
Calls in [print_cls] to memset:35 
Calls in [print_schar] to print_char:40 print_uchar:44 print_char:48 
Calls in [print_str] to print_char:58 
Calls in [div16u] to divr16u:62 
Calls in [sin8s] to mulu8_sel:80 mulu8_sel:87 mulu8_sel:92 mulu8_sel:100 mulu8_sel:107 
Calls in [print_uchar] to print_char:142 print_char:147 
Calls in [mulu8_sel] to mul8u:181 

Created 29 initial phi equivalence classes
Coalesced [14] main::i#5 = main::i#1
Coalesced [15] print_char_cursor#55 = print_char_cursor#10
Coalesced [31] sin8s_gen::i#5 = sin8s_gen::i#1
Coalesced [32] sin8s_gen::x#5 = sin8s_gen::x#1
Coalesced [33] sin8s_gen::sintab#7 = sin8s_gen::sintab#0
Coalesced [39] print_char_cursor#51 = print_char_cursor#45
Coalesced [41] print_schar::b#9 = print_schar::b#1
Coalesced (already) [47] print_char_cursor#50 = print_char_cursor#45
Coalesced [50] print_schar::b#8 = print_schar::b#0
Coalesced [56] print_char::ch#6 = print_char::ch#0
Coalesced (already) [57] print_char_cursor#52 = print_char_cursor#10
Coalesced [60] print_str::str#6 = print_str::str#0
Coalesced [68] sin8s::x#9 = sin8s::x#1
Coalesced [72] sin8s::x#11 = sin8s::x#2
Coalesced [78] mulu8_sel::v1#9 = mulu8_sel::v1#0
Coalesced [79] mulu8_sel::v2#8 = mulu8_sel::v2#0
Coalesced [85] mulu8_sel::v1#10 = mulu8_sel::v1#1
Coalesced [86] mulu8_sel::v2#9 = mulu8_sel::v2#1
Coalesced [91] mulu8_sel::v1#6 = mulu8_sel::v1#2
Coalesced [98] mulu8_sel::v1#7 = mulu8_sel::v1#3
Coalesced [99] mulu8_sel::v2#6 = mulu8_sel::v2#3
Coalesced [105] mulu8_sel::v1#8 = mulu8_sel::v1#4
Coalesced [106] mulu8_sel::v2#7 = mulu8_sel::v2#4
Coalesced [114] sin8s::usinx#9 = sin8s::usinx#2
Coalesced [118] sin8s::return#6 = sin8s::sinx#1
Coalesced [122] sin8s::usinx#8 = sin8s::usinx#1
Coalesced [123] sin8s::x#10 = sin8s::x#4
Coalesced [124] sin8s::x#8 = sin8s::x#0
Coalesced [133] memset::dst#4 = memset::dst#1
Coalesced [140] print_char::ch#7 = print_char::ch#3
Coalesced (already) [141] print_char_cursor#53 = print_char_cursor#10
Coalesced [145] print_char::ch#8 = print_char::ch#4
Coalesced (already) [146] print_char_cursor#54 = print_char_cursor#10
Coalesced [157] divr16u::rem#12 = divr16u::rem#1
Coalesced [164] divr16u::rem#14 = divr16u::rem#2
Coalesced [165] divr16u::return#6 = divr16u::quotient#2
Coalesced [171] divr16u::rem#10 = divr16u::rem#9
Coalesced [172] divr16u::dividend#8 = divr16u::dividend#0
Coalesced [173] divr16u::quotient#9 = divr16u::return#0
Coalesced [174] divr16u::i#7 = divr16u::i#1
Coalesced [175] divr16u::rem#13 = divr16u::rem#5
Coalesced [176] divr16u::return#5 = divr16u::quotient#1
Coalesced [177] divr16u::rem#11 = divr16u::rem#0
Coalesced [188] mul8u::a#7 = mul8u::a#0
Coalesced [189] mul8u::mb#6 = mul8u::mb#0
Coalesced [197] mul8u::res#9 = mul8u::res#1
Coalesced [201] mul8u::a#8 = mul8u::a#1
Coalesced [202] mul8u::res#7 = mul8u::res#6
Coalesced [203] mul8u::mb#7 = mul8u::mb#1
Coalesced (already) [204] mul8u::res#8 = mul8u::res#2
Coalesced down to 23 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@6
Culled Empty Block label print_cls::@1
Culled Empty Block label print_schar::@5
Culled Empty Block label print_schar::@6
Culled Empty Block label sin8s::@16
Culled Empty Block label sin8s::@15
Culled Empty Block label sin8s::@14
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_uchar::@2
Culled Empty Block label divr16u::@6
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Culled Empty Block label mul8u::@3
Culled Empty Block label mul8u::@6
Renumbering block sin8s::@17 to sin8s::@14
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of print_str
Adding NOP phi() at start of div16u
Adding NOP phi() at start of memset
Adding NOP phi() at start of divr16u

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call sin8s_gen
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call print_cls
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  [4] print_char_cursor#45 = phi( main::@2/print_screen#0, main::@4/print_char_cursor#10 )
  [4] main::i#2 = phi( main::@2/0, main::@4/main::i#1 )
  [5] main::sb#0 = sintab2[main::i#2] - (signed char)sintabref[main::i#2]
  [6] print_schar::b#1 = main::sb#0
  [7] call print_schar
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] phi()
  [9] call print_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] main::i#1 = ++ main::i#2
  [11] if(main::i#1!=$c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [12] return 
  to:@return

void sin8s_gen(signed char *sintab , unsigned int wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  [13] phi()
  [14] call div16u
  [15] div16u::return#0 = div16u::return#1
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [16] sin8s_gen::step#0 = div16u::return#0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  [17] sin8s_gen::sintab#2 = phi( sin8s_gen::@3/sintab2, sin8s_gen::@4/sin8s_gen::sintab#0 )
  [17] sin8s_gen::x#2 = phi( sin8s_gen::@3/0, sin8s_gen::@4/sin8s_gen::x#1 )
  [17] sin8s_gen::i#2 = phi( sin8s_gen::@3/0, sin8s_gen::@4/sin8s_gen::i#1 )
  [18] if(sin8s_gen::i#2<wavelength) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [19] return 
  to:@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  [20] sin8s::x#0 = sin8s_gen::x#2
  [21] call sin8s
  [22] sin8s::return#0 = sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [23] sin8s_gen::$2 = sin8s::return#0
  [24] *sin8s_gen::sintab#2 = sin8s_gen::$2
  [25] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2
  [26] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0
  [27] sin8s_gen::i#1 = ++ sin8s_gen::i#2
  to:sin8s_gen::@1

void print_cls()
print_cls: scope:[print_cls]  from main::@2
  [28] phi()
  [29] call memset
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [30] return 
  to:@return

void print_schar(signed char b)
print_schar: scope:[print_schar]  from main::@1
  [31] if(print_schar::b#1<0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [32] phi()
  [33] call print_char
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [34] print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@3/print_schar::b#1 )
  [35] print_uchar::b#0 = (char)print_schar::b#4
  [36] call print_uchar
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [37] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [38] phi()
  [39] call print_char
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [40] print_schar::b#0 = - print_schar::b#1
  to:print_schar::@2

void print_str(char *str)
print_str: scope:[print_str]  from main::@3
  [41] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [42] print_str::str#2 = phi( print_str/main::str, print_str::@3/print_str::str#0 )
  [43] if(0!=*print_str::str#2) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [44] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [45] print_char::ch#0 = *print_str::str#2
  [46] call print_char
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [47] print_str::str#0 = ++ print_str::str#2
  to:print_str::@1

unsigned int div16u(unsigned int dividend , unsigned int divisor)
div16u: scope:[div16u]  from sin8s_gen
  [48] phi()
  [49] call divr16u
  [50] divr16u::return#2 = divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [51] div16u::return#1 = divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [52] return 
  to:@return

signed char sin8s(unsigned int x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [53] if(sin8s::x#0<PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [54] sin8s::x#1 = sin8s::x#0 - PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [55] sin8s::isUpper#10 = phi( sin8s/0, sin8s::@5/1 )
  [55] sin8s::x#4 = phi( sin8s/sin8s::x#0, sin8s::@5/sin8s::x#1 )
  [56] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [57] sin8s::x#2 = PI_u4f12 - sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [58] sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#2 )
  [59] sin8s::$4 = sin8s::x#6 << 3
  [60] sin8s::x1#0 = byte1  sin8s::$4
  [61] mulu8_sel::v1#0 = sin8s::x1#0
  [62] mulu8_sel::v2#0 = sin8s::x1#0
  [63] call mulu8_sel
  [64] mulu8_sel::return#0 = mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [65] sin8s::x2#0 = mulu8_sel::return#0
  [66] mulu8_sel::v1#1 = sin8s::x2#0
  [67] mulu8_sel::v2#1 = sin8s::x1#0
  [68] call mulu8_sel
  [69] mulu8_sel::return#1 = mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [70] sin8s::x3#0 = mulu8_sel::return#1
  [71] mulu8_sel::v1#2 = sin8s::x3#0
  [72] call mulu8_sel
  [73] mulu8_sel::return#2 = mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [74] sin8s::x3_6#0 = mulu8_sel::return#2
  [75] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0
  [76] mulu8_sel::v1#3 = sin8s::x3#0
  [77] mulu8_sel::v2#3 = sin8s::x1#0
  [78] call mulu8_sel
  [79] mulu8_sel::return#10 = mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [80] sin8s::x4#0 = mulu8_sel::return#10
  [81] mulu8_sel::v1#4 = sin8s::x4#0
  [82] mulu8_sel::v2#4 = sin8s::x1#0
  [83] call mulu8_sel
  [84] mulu8_sel::return#11 = mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [85] sin8s::x5#0 = mulu8_sel::return#11
  [86] sin8s::x5_128#0 = sin8s::x5#0 >> 4
  [87] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0
  [88] if(sin8s::usinx#1<$80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [89] sin8s::usinx#2 = -- sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [90] sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  [91] if(sin8s::isUpper#10==0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [92] sin8s::sinx#1 = - (signed char)sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [93] sin8s::return#1 = phi( sin8s::@14/sin8s::return#5, sin8s::@8/sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [94] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [95] sin8s::return#5 = (signed char)sin8s::usinx#4
  to:sin8s::@4

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  [96] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [97] memset::dst#2 = phi( memset/(char *)memset::str#0, memset::@2/memset::dst#1 )
  [98] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [99] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [100] *memset::dst#2 = memset::c#0
  [101] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_char(char ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [102] print_char_cursor#29 = phi( print_schar::@1/print_char_cursor#45, print_schar::@3/print_char_cursor#45, print_str::@2/print_char_cursor#10, print_uchar/print_char_cursor#10, print_uchar::@1/print_char_cursor#10 )
  [102] print_char::ch#5 = phi( print_schar::@1/'-', print_schar::@3/' ', print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  [103] *print_char_cursor#29 = print_char::ch#5
  [104] print_char_cursor#10 = ++ print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [105] return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  [106] print_uchar::$0 = print_uchar::b#0 >> 4
  [107] print_char::ch#3 = print_hextab[print_uchar::$0]
  [108] call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [109] print_uchar::$2 = print_uchar::b#0 & $f
  [110] print_char::ch#4 = print_hextab[print_uchar::$2]
  [111] call print_char
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [112] return 
  to:@return

unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
divr16u: scope:[divr16u]  from div16u
  [113] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [114] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [114] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [114] divr16u::dividend#2 = phi( divr16u/PI2_u4f12, divr16u::@3/divr16u::dividend#0 )
  [114] divr16u::rem#4 = phi( divr16u/0, divr16u::@3/divr16u::rem#9 )
  [115] divr16u::rem#0 = divr16u::rem#4 << 1
  [116] divr16u::$1 = byte1  divr16u::dividend#2
  [117] divr16u::$2 = divr16u::$1 & $80
  [118] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [119] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [120] divr16u::rem#5 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [121] divr16u::dividend#0 = divr16u::dividend#2 << 1
  [122] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [123] if(divr16u::rem#5<wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [124] divr16u::quotient#2 = ++ divr16u::quotient#1
  [125] divr16u::rem#2 = divr16u::rem#5 - wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [126] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [126] divr16u::rem#9 = phi( divr16u::@2/divr16u::rem#5, divr16u::@5/divr16u::rem#2 )
  [127] divr16u::i#1 = ++ divr16u::i#2
  [128] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [129] return 
  to:@return

char mulu8_sel(char v1 , char v2 , char select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [130] mulu8_sel::select#5 = phi( sin8s::@10/1, sin8s::@11/0, sin8s::@12/0, sin8s::@2/0, sin8s::@9/1 )
  [130] mulu8_sel::v2#5 = phi( sin8s::@10/sin8s::DIV_6, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  [130] mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  [131] mul8u::a#0 = mulu8_sel::v1#5
  [132] mul8u::b#0 = mulu8_sel::v2#5
  [133] call mul8u
  [134] mul8u::return#0 = mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [135] mulu8_sel::$0 = mul8u::return#0
  [136] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  [137] mulu8_sel::return#12 = byte1  mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [138] return 
  to:@return

unsigned int mul8u(char a , char b)
mul8u: scope:[mul8u]  from mulu8_sel
  [139] mul8u::mb#0 = (unsigned int)mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [140] mul8u::mb#2 = phi( mul8u/mul8u::mb#0, mul8u::@3/mul8u::mb#1 )
  [140] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [140] mul8u::a#2 = phi( mul8u/mul8u::a#0, mul8u::@3/mul8u::a#1 )
  [141] if(mul8u::a#2!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [142] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [143] mul8u::$1 = mul8u::a#2 & 1
  [144] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [145] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [146] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [147] mul8u::a#1 = mul8u::a#2 >> 1
  [148] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1


VARIABLE REGISTER WEIGHTS
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::divisor
unsigned int div16u::return
unsigned int div16u::return#0 // 22.0
unsigned int div16u::return#1 // 37.33333333333333
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // 20002.0
char divr16u::$2 // 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // 2500.25
unsigned int divr16u::dividend#2 // 4286.142857142857
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // 15001.5
char divr16u::i#2 // 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // 15001.5
unsigned int divr16u::quotient#2 // 10001.0
unsigned int divr16u::quotient#3 // 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // 7500.75
unsigned int divr16u::rem#1 // 20002.0
unsigned int divr16u::rem#2 // 20002.0
unsigned int divr16u::rem#4 // 20002.0
unsigned int divr16u::rem#5 // 10001.0
unsigned int divr16u::rem#9 // 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // 6020.8
unsigned int divr16u::return#2 // 202.0
void main()
char main::i
char main::i#1 // 16.5
char main::i#2 // 5.5
signed char main::sb
signed char main::sb#0 // 22.0
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // 2002.0
char *memset::dst#2 // 1334.6666666666667
char *memset::end
unsigned int memset::num
void *memset::return
void *memset::str
unsigned int mul8u(char a , char b)
char mul8u::$1 // 2.0000002E7
char mul8u::a
char mul8u::a#0 // 36667.33333333333
char mul8u::a#1 // 1.0000001E7
char mul8u::a#2 // 6683334.166666666
char mul8u::b
char mul8u::b#0 // 10001.0
unsigned int mul8u::mb
unsigned int mul8u::mb#0 // 200002.0
unsigned int mul8u::mb#1 // 2.0000002E7
unsigned int mul8u::mb#2 // 4300000.571428571
unsigned int mul8u::res
unsigned int mul8u::res#1 // 2.0000002E7
unsigned int mul8u::res#2 // 5001667.333333333
unsigned int mul8u::res#6 // 1.0000001E7
unsigned int mul8u::return
unsigned int mul8u::return#0 // 20002.0
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0 // 20002.0
unsigned int mulu8_sel::$1 // 20002.0
char mulu8_sel::return
char mulu8_sel::return#0 // 2002.0
char mulu8_sel::return#1 // 2002.0
char mulu8_sel::return#10 // 2002.0
char mulu8_sel::return#11 // 2002.0
char mulu8_sel::return#12 // 2143.714285714286
char mulu8_sel::return#2 // 2002.0
char mulu8_sel::select
char mulu8_sel::select#5 // 1666.8333333333333
char mulu8_sel::v1
char mulu8_sel::v1#0 // 1001.0
char mulu8_sel::v1#1 // 1001.0
char mulu8_sel::v1#2 // 2002.0
char mulu8_sel::v1#3 // 1001.0
char mulu8_sel::v1#4 // 1001.0
char mulu8_sel::v1#5 // 15006.0
char mulu8_sel::v2
char mulu8_sel::v2#0 // 2002.0
char mulu8_sel::v2#1 // 2002.0
char mulu8_sel::v2#3 // 2002.0
char mulu8_sel::v2#4 // 2002.0
char mulu8_sel::v2#5 // 7002.5
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // 20002.0
char print_char::ch#3 // 2002.0
char print_char::ch#4 // 2002.0
char print_char::ch#5 // 112004.0
char *print_char_cursor
char *print_char_cursor#10 // 4000.535714285714
char *print_char_cursor#29 // 106103.5
char *print_char_cursor#45 // 35.5
void print_cls()
char *print_line_cursor
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // 202.0
signed char print_schar::b#1 // 52.33333333333333
signed char print_schar::b#4 // 202.0
char *print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // 20002.0
char *print_str::str#2 // 10001.0
void print_uchar(char b)
char print_uchar::$0 // 2002.0
char print_uchar::$2 // 2002.0
char print_uchar::b
char print_uchar::b#0 // 525.75
signed char sin8s(unsigned int x)
unsigned int sin8s::$4 // 2002.0
char sin8s::isUpper
char sin8s::isUpper#10 // 27.805555555555557
signed char sin8s::return
signed char sin8s::return#0 // 202.0
signed char sin8s::return#1 // 701.0
signed char sin8s::return#5 // 2002.0
signed char sin8s::sinx
signed char sin8s::sinx#1 // 2002.0
char sin8s::usinx
char sin8s::usinx#0 // 166.83333333333334
char sin8s::usinx#1 // 2002.0
char sin8s::usinx#2 // 2002.0
char sin8s::usinx#4 // 1001.0
unsigned int sin8s::x
unsigned int sin8s::x#0 // 1552.0
unsigned int sin8s::x#1 // 2002.0
unsigned int sin8s::x#2 // 2002.0
unsigned int sin8s::x#4 // 2502.5
unsigned int sin8s::x#6 // 3003.0
char sin8s::x1
char sin8s::x1#0 // 318.5
char sin8s::x2
char sin8s::x2#0 // 2002.0
char sin8s::x3
char sin8s::x3#0 // 500.5
char sin8s::x3_6
char sin8s::x3_6#0 // 2002.0
char sin8s::x4
char sin8s::x4#0 // 2002.0
char sin8s::x5
char sin8s::x5#0 // 2002.0
char sin8s::x5_128
char sin8s::x5_128#0 // 2002.0
void sin8s_gen(signed char *sintab , unsigned int wavelength)
signed char sin8s_gen::$2 // 202.0
unsigned int sin8s_gen::i
unsigned int sin8s_gen::i#1 // 202.0
unsigned int sin8s_gen::i#2 // 33.666666666666664
signed char *sin8s_gen::sintab
signed char *sin8s_gen::sintab#0 // 67.33333333333333
signed char *sin8s_gen::sintab#2 // 43.285714285714285
unsigned int sin8s_gen::step
unsigned int sin8s_gen::step#0 // 10.181818181818182
unsigned int sin8s_gen::wavelength
unsigned int sin8s_gen::x
unsigned int sin8s_gen::x#1 // 101.0
unsigned int sin8s_gen::x#2 // 37.875

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_str::str#2 print_str::str#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Added variable main::sb#0 to live range equivalence class [ main::sb#0 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Added variable sin8s_gen::step#0 to live range equivalence class [ sin8s_gen::step#0 ]
Added variable sin8s::return#0 to live range equivalence class [ sin8s::return#0 ]
Added variable sin8s_gen::$2 to live range equivalence class [ sin8s_gen::$2 ]
Added variable print_uchar::b#0 to live range equivalence class [ print_uchar::b#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#1 to live range equivalence class [ div16u::return#1 ]
Added variable sin8s::$4 to live range equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to live range equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to live range equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to live range equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to live range equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to live range equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to live range equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to live range equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to live range equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to live range equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to live range equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to live range equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to live range equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to live range equivalence class [ sin8s::x5_128#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable mul8u::b#0 to live range equivalence class [ mul8u::b#0 ]
Added variable mul8u::return#0 to live range equivalence class [ mul8u::return#0 ]
Added variable mulu8_sel::$0 to live range equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to live range equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to live range equivalence class [ mulu8_sel::return#12 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_str::str#2 print_str::str#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ main::sb#0 ]
[ div16u::return#0 ]
[ sin8s_gen::step#0 ]
[ sin8s::return#0 ]
[ sin8s_gen::$2 ]
[ print_uchar::b#0 ]
[ divr16u::return#2 ]
[ div16u::return#1 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ mul8u::b#0 ]
[ mul8u::return#0 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul8u::$1 ]
Allocated zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:6 [ mul8u::$1 ]
Allocated zp[1]:7 [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
Allocated zp[1]:8 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
Allocated zp[2]:9 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
Allocated zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[2]:15 [ print_str::str#2 print_str::str#0 ]
Allocated zp[1]:17 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
Allocated zp[1]:18 [ divr16u::$1 ]
Allocated zp[1]:19 [ divr16u::$2 ]
Allocated zp[2]:20 [ mul8u::return#0 ]
Allocated zp[2]:22 [ mulu8_sel::$0 ]
Allocated zp[2]:24 [ mulu8_sel::$1 ]
Allocated zp[1]:26 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[1]:27 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
Allocated zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
Allocated zp[1]:30 [ mul8u::b#0 ]
Allocated zp[2]:31 [ divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[1]:33 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:34 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[2]:35 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:37 [ mulu8_sel::return#12 ]
Allocated zp[2]:38 [ sin8s::$4 ]
Allocated zp[1]:40 [ mulu8_sel::return#0 ]
Allocated zp[1]:41 [ sin8s::x2#0 ]
Allocated zp[1]:42 [ mulu8_sel::return#1 ]
Allocated zp[1]:43 [ mulu8_sel::return#2 ]
Allocated zp[1]:44 [ sin8s::x3_6#0 ]
Allocated zp[1]:45 [ mulu8_sel::return#10 ]
Allocated zp[1]:46 [ sin8s::x4#0 ]
Allocated zp[1]:47 [ mulu8_sel::return#11 ]
Allocated zp[1]:48 [ sin8s::x5#0 ]
Allocated zp[1]:49 [ sin8s::x5_128#0 ]
Allocated zp[1]:50 [ print_uchar::$0 ]
Allocated zp[1]:51 [ print_uchar::$2 ]
Allocated zp[1]:52 [ mulu8_sel::select#5 ]
Allocated zp[1]:53 [ print_uchar::b#0 ]
Allocated zp[1]:54 [ sin8s::x3#0 ]
Allocated zp[1]:55 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Allocated zp[1]:56 [ sin8s::x1#0 ]
Allocated zp[2]:57 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated zp[1]:59 [ sin8s::return#0 ]
Allocated zp[1]:60 [ sin8s_gen::$2 ]
Allocated zp[2]:61 [ divr16u::return#2 ]
Allocated zp[1]:63 [ sin8s::usinx#0 ]
Allocated zp[2]:64 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated zp[2]:66 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated zp[2]:68 [ div16u::return#1 ]
Allocated zp[1]:70 [ sin8s::isUpper#10 ]
Allocated zp[1]:71 [ main::i#2 main::i#1 ]
Allocated zp[1]:72 [ main::sb#0 ]
Allocated zp[2]:73 [ div16u::return#0 ]
Allocated zp[2]:75 [ sin8s_gen::step#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] main::sb#0 = sintab2[main::i#2] - (signed char)sintabref[main::i#2] [ main::i#2 print_char_cursor#45 main::sb#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 ] { { print_schar::b#1 = main::sb#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:71 [ main::i#2 main::i#1 ]
Statement [15] div16u::return#0 = div16u::return#1 [ div16u::return#0 ] ( sin8s_gen:1 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#1 } }  ) always clobbers reg byte a 
Statement [16] sin8s_gen::step#0 = div16u::return#0 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [18] if(sin8s_gen::i#2<wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [20] sin8s::x#0 = sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [24] *sin8s_gen::sintab#2 = sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [26] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [40] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:7 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sb#0 } }  ) always clobbers reg byte a 
Statement [43] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:9 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:71 [ main::i#2 main::i#1 ]
Statement [45] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:9 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [50] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:14 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [51] div16u::return#1 = divr16u::return#2 [ div16u::return#1 ] ( sin8s_gen:1::div16u:14 [ div16u::return#1 ] { { div16u::return#0 = div16u::return#1 } }  ) always clobbers reg byte a 
Statement [53] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [54] sin8s::x#1 = sin8s::x#0 - PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [56] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:70 [ sin8s::isUpper#10 ]
Statement [57] sin8s::x#2 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [59] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [75] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ sin8s::x3#0 ]
Statement [86] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:63 [ sin8s::usinx#0 ]
Statement [87] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [92] sin8s::sinx#1 = - (signed char)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [98] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:3::memset:29 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [100] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:3::memset:29 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [103] *print_char_cursor#29 = print_char::ch#5 [ print_char_cursor#29 ] ( print_schar:7::print_char:33 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:7::print_char:39 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_str:9::print_char:46 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:7::print_uchar:36::print_char:108 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:7::print_uchar:36::print_char:111 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:55 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ print_uchar::b#0 ]
Statement [106] print_uchar::$0 = print_uchar::b#0 >> 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:7::print_uchar:36 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:53 [ print_uchar::b#0 ]
Statement [109] print_uchar::$2 = print_uchar::b#0 & $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:7::print_uchar:36 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [119] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ divr16u::i#2 divr16u::i#1 ]
Statement [123] if(divr16u::rem#5<wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [125] divr16u::rem#2 = divr16u::rem#5 - wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [134] mul8u::return#0 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mulu8_sel::select#5 ]
Statement [135] mulu8_sel::$0 = mul8u::return#0 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [136] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [139] mul8u::mb#0 = (unsigned int)mul8u::b#0 [ mul8u::a#0 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
Statement [143] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [145] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [5] main::sb#0 = sintab2[main::i#2] - (signed char)sintabref[main::i#2] [ main::i#2 print_char_cursor#45 main::sb#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 ] { { print_schar::b#1 = main::sb#0 } }  ) always clobbers reg byte a 
Statement [15] div16u::return#0 = div16u::return#1 [ div16u::return#0 ] ( sin8s_gen:1 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#1 } }  ) always clobbers reg byte a 
Statement [16] sin8s_gen::step#0 = div16u::return#0 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [18] if(sin8s_gen::i#2<wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [20] sin8s::x#0 = sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [24] *sin8s_gen::sintab#2 = sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [26] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [40] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:7 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sb#0 } }  ) always clobbers reg byte a 
Statement [43] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:9 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:9 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [50] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:14 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [51] div16u::return#1 = divr16u::return#2 [ div16u::return#1 ] ( sin8s_gen:1::div16u:14 [ div16u::return#1 ] { { div16u::return#0 = div16u::return#1 } }  ) always clobbers reg byte a 
Statement [53] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [54] sin8s::x#1 = sin8s::x#0 - PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [56] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [57] sin8s::x#2 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [59] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [75] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [86] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [87] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [92] sin8s::sinx#1 = - (signed char)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:21 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [98] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:3::memset:29 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [100] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:3::memset:29 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [103] *print_char_cursor#29 = print_char::ch#5 [ print_char_cursor#29 ] ( print_schar:7::print_char:33 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:7::print_char:39 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_str:9::print_char:46 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:7::print_uchar:36::print_char:108 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:7::print_uchar:36::print_char:111 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Statement [106] print_uchar::$0 = print_uchar::b#0 >> 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:7::print_uchar:36 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [109] print_uchar::$2 = print_uchar::b#0 & $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:7::print_uchar:36 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sb#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [119] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [123] if(divr16u::rem#5<wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [125] divr16u::rem#2 = divr16u::rem#5 - wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8s_gen:1::div16u:14::divr16u:49 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [134] mul8u::return#0 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [135] mulu8_sel::$0 = mul8u::return#0 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [136] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [139] mul8u::mb#0 = (unsigned int)mul8u::b#0 [ mul8u::a#0 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#0 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [143] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [145] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:21::mulu8_sel:63::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#0 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:68::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:72::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:78::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  sin8s_gen:1::sin8s:21::mulu8_sel:83::mul8u:133 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#0 = mul8u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:71 [ main::i#2 main::i#1 ] : zp[1]:71 , reg byte x , 
Potential registers zp[2]:57 [ sin8s_gen::i#2 sin8s_gen::i#1 ] : zp[2]:57 , 
Potential registers zp[2]:64 [ sin8s_gen::x#2 sin8s_gen::x#1 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] : zp[2]:66 , 
Potential registers zp[1]:55 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] : zp[1]:55 , reg byte a , reg byte x , 
Potential registers zp[2]:15 [ print_str::str#2 print_str::str#0 ] : zp[2]:15 , 
Potential registers zp[1]:70 [ sin8s::isUpper#10 ] : zp[1]:70 , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] : zp[2]:28 , 
Potential registers zp[1]:33 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ memset::dst#2 memset::dst#1 ] : zp[2]:35 , 
Potential registers zp[1]:8 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:9 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:11 , 
Potential registers zp[2]:31 [ divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:31 , 
Potential registers zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:13 , 
Potential registers zp[1]:26 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ mulu8_sel::select#5 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:4 , 
Potential registers zp[1]:72 [ main::sb#0 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:73 [ div16u::return#0 ] : zp[2]:73 , 
Potential registers zp[2]:75 [ sin8s_gen::step#0 ] : zp[2]:75 , 
Potential registers zp[1]:59 [ sin8s::return#0 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ sin8s_gen::$2 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ print_uchar::b#0 ] : zp[1]:53 , reg byte x , 
Potential registers zp[2]:61 [ divr16u::return#2 ] : zp[2]:61 , 
Potential registers zp[2]:68 [ div16u::return#1 ] : zp[2]:68 , 
Potential registers zp[2]:38 [ sin8s::$4 ] : zp[2]:38 , 
Potential registers zp[1]:56 [ sin8s::x1#0 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ mulu8_sel::return#0 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ sin8s::x2#0 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ mulu8_sel::return#1 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ sin8s::x3#0 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ mulu8_sel::return#2 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ sin8s::x3_6#0 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ sin8s::usinx#0 ] : zp[1]:63 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ mulu8_sel::return#10 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ sin8s::x4#0 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ mulu8_sel::return#11 ] : zp[1]:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:48 [ sin8s::x5#0 ] : zp[1]:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ sin8s::x5_128#0 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ print_uchar::$0 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ print_uchar::$2 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ divr16u::$1 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ divr16u::$2 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ mul8u::b#0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:20 [ mul8u::return#0 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ mulu8_sel::$0 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ mulu8_sel::$1 ] : zp[2]:24 , 
Potential registers zp[1]:37 [ mulu8_sel::return#12 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ mul8u::$1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 35,001,670.33: zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,500,004.57: zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 20,000,002: zp[1]:6 [ mul8u::$1 ] 16,720,002.5: zp[1]:7 [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ] 20,002: zp[2]:20 [ mul8u::return#0 ] 10,001: zp[1]:30 [ mul8u::b#0 ] 
Uplift Scope [divr16u] 87,508.75: zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 33,523.55: zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,002: zp[1]:18 [ divr16u::$1 ] 20,002: zp[1]:19 [ divr16u::$2 ] 16,540.12: zp[1]:26 [ divr16u::i#2 divr16u::i#1 ] 6,786.39: zp[2]:31 [ divr16u::dividend#2 divr16u::dividend#0 ] 202: zp[2]:61 [ divr16u::return#2 ] 
Uplift Scope [print_char] 136,010: zp[1]:8 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplift Scope [] 110,139.54: zp[2]:9 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] 
Uplift Scope [mulu8_sel] 21,012: zp[1]:17 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] 20,002: zp[2]:22 [ mulu8_sel::$0 ] 20,002: zp[2]:24 [ mulu8_sel::$1 ] 15,010.5: zp[1]:27 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] 2,143.71: zp[1]:37 [ mulu8_sel::return#12 ] 2,002: zp[1]:40 [ mulu8_sel::return#0 ] 2,002: zp[1]:42 [ mulu8_sel::return#1 ] 2,002: zp[1]:43 [ mulu8_sel::return#2 ] 2,002: zp[1]:45 [ mulu8_sel::return#10 ] 2,002: zp[1]:47 [ mulu8_sel::return#11 ] 1,666.83: zp[1]:52 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8s] 11,061.5: zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] 5,005: zp[1]:33 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4,705: zp[1]:34 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] 2,002: zp[2]:38 [ sin8s::$4 ] 2,002: zp[1]:41 [ sin8s::x2#0 ] 2,002: zp[1]:44 [ sin8s::x3_6#0 ] 2,002: zp[1]:46 [ sin8s::x4#0 ] 2,002: zp[1]:48 [ sin8s::x5#0 ] 2,002: zp[1]:49 [ sin8s::x5_128#0 ] 500.5: zp[1]:54 [ sin8s::x3#0 ] 318.5: zp[1]:56 [ sin8s::x1#0 ] 202: zp[1]:59 [ sin8s::return#0 ] 166.83: zp[1]:63 [ sin8s::usinx#0 ] 27.81: zp[1]:70 [ sin8s::isUpper#10 ] 
Uplift Scope [print_str] 30,003: zp[2]:15 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:50 [ print_uchar::$0 ] 2,002: zp[1]:51 [ print_uchar::$2 ] 525.75: zp[1]:53 [ print_uchar::b#0 ] 
Uplift Scope [memset] 3,336.67: zp[2]:35 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [sin8s_gen] 235.67: zp[2]:57 [ sin8s_gen::i#2 sin8s_gen::i#1 ] 202: zp[1]:60 [ sin8s_gen::$2 ] 138.88: zp[2]:64 [ sin8s_gen::x#2 sin8s_gen::x#1 ] 110.62: zp[2]:66 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] 10.18: zp[2]:75 [ sin8s_gen::step#0 ] 
Uplift Scope [print_schar] 456.33: zp[1]:55 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplift Scope [div16u] 37.33: zp[2]:68 [ div16u::return#1 ] 22: zp[2]:73 [ div16u::return#0 ] 
Uplift Scope [main] 22: zp[1]:71 [ main::i#2 main::i#1 ] 22: zp[1]:72 [ main::sb#0 ] 
Uplift Scope [print_cls] 
Uplift Scope [RADIX] 

Uplifting [mul8u] best 18119 combination zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ] zp[2]:20 [ mul8u::return#0 ] reg byte a [ mul8u::b#0 ] 
Uplifting [divr16u] best 17929 combination zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:31 [ divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:61 [ divr16u::return#2 ] 
Uplifting [print_char] best 17614 combination reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplifting [] best 17614 combination zp[2]:9 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] 
Uplifting [mulu8_sel] best 17556 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] zp[2]:22 [ mulu8_sel::$0 ] zp[2]:24 [ mulu8_sel::$1 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] reg byte a [ mulu8_sel::return#12 ] reg byte a [ mulu8_sel::return#0 ] zp[1]:42 [ mulu8_sel::return#1 ] zp[1]:43 [ mulu8_sel::return#2 ] zp[1]:45 [ mulu8_sel::return#10 ] zp[1]:47 [ mulu8_sel::return#11 ] zp[1]:52 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8s] best 17503 combination zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] zp[2]:38 [ sin8s::$4 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] zp[1]:46 [ sin8s::x4#0 ] zp[1]:48 [ sin8s::x5#0 ] zp[1]:49 [ sin8s::x5_128#0 ] zp[1]:54 [ sin8s::x3#0 ] zp[1]:56 [ sin8s::x1#0 ] zp[1]:59 [ sin8s::return#0 ] zp[1]:63 [ sin8s::usinx#0 ] zp[1]:70 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [print_str] best 17503 combination zp[2]:15 [ print_str::str#2 print_str::str#0 ] 
Uplifting [print_uchar] best 17488 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#0 ] 
Uplifting [memset] best 17488 combination zp[2]:35 [ memset::dst#2 memset::dst#1 ] 
Uplifting [sin8s_gen] best 17428 combination zp[2]:57 [ sin8s_gen::i#2 sin8s_gen::i#1 ] reg byte a [ sin8s_gen::$2 ] zp[2]:64 [ sin8s_gen::x#2 sin8s_gen::x#1 ] zp[2]:66 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] zp[2]:75 [ sin8s_gen::step#0 ] 
Uplifting [print_schar] best 17392 combination reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplifting [div16u] best 17392 combination zp[2]:68 [ div16u::return#1 ] zp[2]:73 [ div16u::return#0 ] 
Uplifting [main] best 17352 combination zp[1]:71 [ main::i#2 main::i#1 ] reg byte a [ main::sb#0 ] 
Uplifting [print_cls] best 17352 combination 
Uplifting [RADIX] best 17352 combination 
Attempting to uplift remaining variables inzp[1]:42 [ mulu8_sel::return#1 ]
Uplifting [mulu8_sel] best 17346 combination reg byte a [ mulu8_sel::return#1 ] 
Attempting to uplift remaining variables inzp[1]:43 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 17340 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:45 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 17334 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:46 [ sin8s::x4#0 ]
Uplifting [sin8s] best 17330 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:47 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 17324 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:48 [ sin8s::x5#0 ]
Uplifting [sin8s] best 17318 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:49 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 17312 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:52 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 17312 combination zp[1]:52 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:54 [ sin8s::x3#0 ]
Uplifting [sin8s] best 17312 combination zp[1]:54 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:56 [ sin8s::x1#0 ]
Uplifting [sin8s] best 17312 combination zp[1]:56 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:59 [ sin8s::return#0 ]
Uplifting [sin8s] best 17252 combination reg byte a [ sin8s::return#0 ] 
Attempting to uplift remaining variables inzp[1]:63 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 17252 combination zp[1]:63 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:70 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 17252 combination zp[1]:70 [ sin8s::isUpper#10 ] 
Attempting to uplift remaining variables inzp[1]:71 [ main::i#2 main::i#1 ]
Uplifting [main] best 17252 combination zp[1]:71 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] ] with [ zp[2]:38 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:61 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:20 [ mul8u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ div16u::return#0 ] ] with [ zp[2]:75 [ sin8s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:73 [ div16u::return#0 sin8s_gen::step#0 ] ] with [ zp[2]:68 [ div16u::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulu8_sel::$0 ] ] with [ zp[2]:24 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:73 [ div16u::return#0 sin8s_gen::step#0 div16u::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 ] ] with [ zp[2]:22 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ print_str::str#2 print_str::str#0 ] ] with [ zp[2]:57 [ sin8s_gen::i#2 sin8s_gen::i#1 ] ]
Coalescing zero page register [ zp[2]:35 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:64 [ sin8s_gen::x#2 sin8s_gen::x#1 ] ]
Coalescing zero page register [ zp[2]:9 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] ] with [ zp[2]:66 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ]
Coalescing zero page register [ zp[2]:11 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:28 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ] ]
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 ] ] with [ zp[2]:31 [ divr16u::dividend#2 divr16u::dividend#0 ] ]
Allocated (was zp[2]:9) zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated (was zp[2]:11) zp[2]:8 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
Allocated (was zp[2]:13) zp[2]:10 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#0 sin8s_gen::step#0 div16u::return#1 ]
Allocated (was zp[2]:15) zp[2]:12 [ print_str::str#2 print_str::str#0 sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated (was zp[2]:35) zp[2]:14 [ memset::dst#2 memset::dst#1 sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated (was zp[1]:52) zp[1]:16 [ mulu8_sel::select#5 ]
Allocated (was zp[1]:54) zp[1]:17 [ sin8s::x3#0 ]
Allocated (was zp[1]:56) zp[1]:18 [ sin8s::x1#0 ]
Allocated (was zp[1]:63) zp[1]:19 [ sin8s::usinx#0 ]
Allocated (was zp[1]:70) zp[1]:20 [ sin8s::isUpper#10 ]
Allocated (was zp[1]:71) zp[1]:21 [ main::i#2 main::i#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/// @file
/// Sine Generator functions using only multiplication, addition and bit shifting
///
/// Uses a single division for converting the wavelength to a reciprocal.
/// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
/// Uses the approximation sin(x) = x - x^/6 + x^/128
/// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sinusgen8.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const wavelength = $c0
  .label print_screen = $400
  .label print_char_cursor = 6
.segment Code
  // main
main: {
    .label i = $15
    // [1] call sin8s_gen
    // [13] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call print_cls
    // [28] phi from main::@2 to print_cls [phi:main::@2->print_cls]
  print_cls_from___b2:
    jsr print_cls
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [4] phi print_char_cursor#45 = print_screen#0 [phi:main::@2->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [4] phi main::i#2 = 0 [phi:main::@2->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [4] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [4] phi print_char_cursor#45 = print_char_cursor#10 [phi:main::@4->main::@1#0] -- register_copy 
    // [4] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [5] main::sb#0 = sintab2[main::i#2] - (signed char)sintabref[main::i#2] -- vbsaa=pbsc1_derefidx_vbuz1_minus_pbsc2_derefidx_vbuz1 
    ldy.z i
    lda sintab2,y
    sec
    sbc sintabref,y
    // [6] print_schar::b#1 = main::sb#0 -- vbsxx=vbsaa 
    tax
    // [7] call print_schar
    jsr print_schar
    // [8] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [9] call print_str
    // [41] phi from main::@3 to print_str [phi:main::@3->print_str]
  print_str_from___b3:
    jsr print_str
    jmp __b4
    // main::@4
  __b4:
    // [10] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [11] if(main::i#1!=$c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1_from___b4
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
  .segment Data
    str: .text "  "
    .byte 0
}
.segment Code
  // sin8s_gen
// Generate signed char sine table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// void sin8s_gen(__zp(6) signed char *sintab, unsigned int wavelength)
sin8s_gen: {
    .label step = $a
    .label sintab = 6
    // u[4.12]
    // Iterate over the table
    .label x = $e
    .label i = $c
    // [14] call div16u
  // u[4.28] step = PI*2/wavelength
    // [48] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [15] div16u::return#0 = div16u::return#1
    jmp __b3
    // sin8s_gen::@3
  __b3:
    // [16] sin8s_gen::step#0 = div16u::return#0
    // [17] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  __b1_from___b3:
    // [17] phi sin8s_gen::sintab#2 = sintab2 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<sintab2
    sta.z sintab
    lda #>sintab2
    sta.z sintab+1
    // [17] phi sin8s_gen::x#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [17] phi sin8s_gen::i#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // [18] if(sin8s_gen::i#2<wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>@wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<@wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin8s_gen::@return
  __breturn:
    // [19] return 
    rts
    // sin8s_gen::@2
  __b2:
    // [20] sin8s::x#0 = sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [21] call sin8s
    jsr sin8s
    // [22] sin8s::return#0 = sin8s::return#1
    jmp __b4
    // sin8s_gen::@4
  __b4:
    // [23] sin8s_gen::$2 = sin8s::return#0
    // [24] *sin8s_gen::sintab#2 = sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // [25] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [26] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z x
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [27] sin8s_gen::i#1 = ++ sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [17] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  __b1_from___b4:
    // [17] phi sin8s_gen::sintab#2 = sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [17] phi sin8s_gen::x#2 = sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [17] phi sin8s_gen::i#2 = sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [29] call memset
    // [96] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [30] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// void print_schar(__register(X) signed char b)
print_schar: {
    // [31] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [32] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [33] call print_char
    // [102] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [102] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [34] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [34] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [35] print_uchar::b#0 = (char)print_schar::b#4
    // [36] call print_uchar
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [37] return 
    rts
    // [38] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [39] call print_char
    // [102] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [102] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [40] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // print_str
// Print a zero-terminated string
// void print_str(__zp($c) char *str)
print_str: {
    .label str = $c
    // [42] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [42] phi print_str::str#2 = main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [43] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [44] return 
    rts
    // print_str::@2
  __b2:
    // [45] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [46] call print_char
    // [102] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [47] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [42] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [42] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($a) unsigned int div16u(unsigned int dividend, unsigned int divisor)
div16u: {
    .label return = $a
    // [49] call divr16u
    // [113] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
    // [50] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [51] div16u::return#1 = divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [52] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// __register(A) signed char sin8s(__zp(8) unsigned int x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = 8
    .label x = 8
    .label x1 = $12
    .label x3 = $11
    .label usinx = $13
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $14
    // [53] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [54] sin8s::x#1 = sin8s::x#0 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [55] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [55] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [55] phi sin8s::x#4 = sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [55] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [55] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [55] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [56] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [57] sin8s::x#2 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    lda #<PI_u4f12
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [58] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [58] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [59] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [60] sin8s::x1#0 = byte1  sin8s::$4 -- vbuz1=_byte1_vwuz2 
    // sinx = x - x^3/6 + x5/128;
    lda.z __4+1
    sta.z x1
    // [61] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [62] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [63] call mulu8_sel
  // u[1.7]
    // [130] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [64] mulu8_sel::return#0 = mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [65] sin8s::x2#0 = mulu8_sel::return#0
    // [66] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [67] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [68] call mulu8_sel
  // u[2.6] x^2
    // [130] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [130] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [69] mulu8_sel::return#1 = mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [70] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [71] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [72] call mulu8_sel
  // u[0.7] - $2a.aa rounded to $2b
    // [130] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [130] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [73] mulu8_sel::return#2 = mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [74] sin8s::x3_6#0 = mulu8_sel::return#2
    // [75] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    // u[1.7] x^3/6;
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [76] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [77] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [78] call mulu8_sel
  // u[1.7] x - x^3/6
    // [130] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [79] mulu8_sel::return#10 = mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [80] sin8s::x4#0 = mulu8_sel::return#10
    // [81] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [82] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [83] call mulu8_sel
  // u[3.5] x^4
    // [130] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [84] mulu8_sel::return#11 = mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [85] sin8s::x5#0 = mulu8_sel::return#11
    // [86] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    // u[4.4] x^5
    lsr
    lsr
    lsr
    lsr
    // [87] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [88] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [89] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [90] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [90] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [91] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [92] sin8s::sinx#1 = - (signed char)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [93] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [93] phi sin8s::return#1 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [94] return 
    rts
    // sin8s::@14
  __b14:
    // [95] sin8s::return#5 = (signed char)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $e
    // [97] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [97] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [98] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [99] return 
    rts
    // memset::@2
  __b2:
    // [100] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [101] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [97] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [97] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // [103] *print_char_cursor#29 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [104] print_char_cursor#10 = ++ print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [105] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // [106] print_uchar::$0 = print_uchar::b#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [107] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [108] call print_char
  // Table of hexadecimal digits
    // [102] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [109] print_uchar::$2 = print_uchar::b#0 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [110] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [111] call print_char
    // [102] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [112] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($a) unsigned int divr16u(__zp(2) unsigned int dividend, unsigned int divisor, __zp(8) unsigned int rem)
divr16u: {
    .label rem = 8
    .label dividend = 2
    .label quotient = $a
    .label return = $a
    // [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [114] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [114] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [114] phi divr16u::dividend#2 = PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [114] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [114] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [114] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [114] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [114] phi divr16u::rem#4 = divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [115] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [116] divr16u::$1 = byte1  divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // [117] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [118] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [119] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [120] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [121] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [122] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [123] if(divr16u::rem#5<wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>wavelength
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<wavelength
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [124] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [125] divr16u::rem#2 = divr16u::rem#5 - wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<wavelength
    sta.z rem
    lda.z rem+1
    sbc #>wavelength
    sta.z rem+1
    // [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [126] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [126] phi divr16u::rem#9 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [127] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [128] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [129] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// __register(A) char mulu8_sel(__register(X) char v1, __register(Y) char v2, __zp($10) char select)
mulu8_sel: {
    .label __0 = 2
    .label __1 = 2
    .label select = $10
    // [131] mul8u::a#0 = mulu8_sel::v1#5
    // [132] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [133] call mul8u
    jsr mul8u
    // [134] mul8u::return#0 = mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [135] mulu8_sel::$0 = mul8u::return#0
    // [136] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [137] mulu8_sel::return#12 = byte1  mulu8_sel::$1 -- vbuaa=_byte1_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [138] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// __zp(2) unsigned int mul8u(__register(X) char a, __register(A) char b)
mul8u: {
    .label return = 2
    .label mb = 4
    .label res = 2
    // [139] mul8u::mb#0 = (unsigned int)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [140] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [140] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [140] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [140] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [141] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [142] return 
    rts
    // mul8u::@2
  __b2:
    // [143] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [144] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [145] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [146] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [146] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [147] mul8u::a#1 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [148] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [140] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [140] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [140] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [140] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"
  sintab2: .fill $c0, 0
  // .fill $c0, round(127.5*sin(i*2*PI/$c0))
  sintabref: .byte 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b2_from_main:
Removing instruction print_cls_from___b2:
Removing instruction __b1_from___b4:
Removing instruction __b3_from___b1:
Removing instruction print_str_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction sin8s_gen_from_main:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction div16u_from_sin8s_gen:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin8s to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant const unsigned int PI2_u4f12 = $6488
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned int PI_u4f12 = $3244
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::divisor
unsigned int div16u::return
unsigned int div16u::return#0 // return zp[2]:10 22.0
unsigned int div16u::return#1 // return zp[2]:10 37.33333333333333
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:2 2500.25
unsigned int divr16u::dividend#2 // dividend zp[2]:2 4286.142857142857
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:10 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:10 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:10 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:8 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#2 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#4 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#5 // rem zp[2]:8 10001.0
unsigned int divr16u::rem#9 // rem zp[2]:8 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:10 6020.8
unsigned int divr16u::return#2 // return zp[2]:10 202.0
void main()
char main::i
char main::i#1 // i zp[1]:21 16.5
char main::i#2 // i zp[1]:21 5.5
signed char main::sb
signed char main::sb#0 // reg byte a 22.0
__constant char main::str[3] = "  "
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:14 2002.0
char *memset::dst#2 // dst zp[2]:14 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
unsigned int mul8u(char a , char b)
char mul8u::$1 // reg byte a 2.0000002E7
char mul8u::a
char mul8u::a#0 // reg byte x 36667.33333333333
char mul8u::a#1 // reg byte x 1.0000001E7
char mul8u::a#2 // reg byte x 6683334.166666666
char mul8u::b
char mul8u::b#0 // reg byte a 10001.0
unsigned int mul8u::mb
unsigned int mul8u::mb#0 // mb zp[2]:4 200002.0
unsigned int mul8u::mb#1 // mb zp[2]:4 2.0000002E7
unsigned int mul8u::mb#2 // mb zp[2]:4 4300000.571428571
unsigned int mul8u::res
unsigned int mul8u::res#1 // res zp[2]:2 2.0000002E7
unsigned int mul8u::res#2 // res zp[2]:2 5001667.333333333
unsigned int mul8u::res#6 // res zp[2]:2 1.0000001E7
unsigned int mul8u::return
unsigned int mul8u::return#0 // return zp[2]:2 20002.0
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0 // zp[2]:2 20002.0
unsigned int mulu8_sel::$1 // zp[2]:2 20002.0
char mulu8_sel::return
char mulu8_sel::return#0 // reg byte a 2002.0
char mulu8_sel::return#1 // reg byte a 2002.0
char mulu8_sel::return#10 // reg byte a 2002.0
char mulu8_sel::return#11 // reg byte a 2002.0
char mulu8_sel::return#12 // reg byte a 2143.714285714286
char mulu8_sel::return#2 // reg byte a 2002.0
char mulu8_sel::select
char mulu8_sel::select#5 // select zp[1]:16 1666.8333333333333
char mulu8_sel::v1
char mulu8_sel::v1#0 // reg byte x 1001.0
char mulu8_sel::v1#1 // reg byte x 1001.0
char mulu8_sel::v1#2 // reg byte x 2002.0
char mulu8_sel::v1#3 // reg byte x 1001.0
char mulu8_sel::v1#4 // reg byte x 1001.0
char mulu8_sel::v1#5 // reg byte x 15006.0
char mulu8_sel::v2
char mulu8_sel::v2#0 // reg byte y 2002.0
char mulu8_sel::v2#1 // reg byte y 2002.0
char mulu8_sel::v2#3 // reg byte y 2002.0
char mulu8_sel::v2#4 // reg byte y 2002.0
char mulu8_sel::v2#5 // reg byte y 7002.5
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 2002.0
char print_char::ch#4 // reg byte a 2002.0
char print_char::ch#5 // reg byte a 112004.0
char *print_char_cursor
char *print_char_cursor#10 // print_char_cursor zp[2]:6 4000.535714285714
char *print_char_cursor#29 // print_char_cursor zp[2]:6 106103.5
char *print_char_cursor#45 // print_char_cursor zp[2]:6 35.5
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 202.0
signed char print_schar::b#1 // reg byte x 52.33333333333333
signed char print_schar::b#4 // reg byte x 202.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:12 20002.0
char *print_str::str#2 // str zp[2]:12 10001.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 2002.0
char print_uchar::$2 // reg byte x 2002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 525.75
signed char sin8s(unsigned int x)
unsigned int sin8s::$4 // zp[2]:8 2002.0
__constant const char sin8s::DIV_6 = $2b
char sin8s::isUpper
char sin8s::isUpper#10 // isUpper zp[1]:20 27.805555555555557
signed char sin8s::return
signed char sin8s::return#0 // reg byte a 202.0
signed char sin8s::return#1 // reg byte a 701.0
signed char sin8s::return#5 // reg byte a 2002.0
signed char sin8s::sinx
signed char sin8s::sinx#1 // reg byte a 2002.0
char sin8s::usinx
char sin8s::usinx#0 // usinx zp[1]:19 166.83333333333334
char sin8s::usinx#1 // reg byte x 2002.0
char sin8s::usinx#2 // reg byte x 2002.0
char sin8s::usinx#4 // reg byte x 1001.0
unsigned int sin8s::x
unsigned int sin8s::x#0 // x zp[2]:8 1552.0
unsigned int sin8s::x#1 // x zp[2]:8 2002.0
unsigned int sin8s::x#2 // x zp[2]:8 2002.0
unsigned int sin8s::x#4 // x zp[2]:8 2502.5
unsigned int sin8s::x#6 // x zp[2]:8 3003.0
char sin8s::x1
char sin8s::x1#0 // x1 zp[1]:18 318.5
char sin8s::x2
char sin8s::x2#0 // reg byte a 2002.0
char sin8s::x3
char sin8s::x3#0 // x3 zp[1]:17 500.5
char sin8s::x3_6
char sin8s::x3_6#0 // reg byte a 2002.0
char sin8s::x4
char sin8s::x4#0 // reg byte a 2002.0
char sin8s::x5
char sin8s::x5#0 // reg byte a 2002.0
char sin8s::x5_128
char sin8s::x5_128#0 // reg byte a 2002.0
void sin8s_gen(signed char *sintab , unsigned int wavelength)
signed char sin8s_gen::$2 // reg byte a 202.0
unsigned int sin8s_gen::i
unsigned int sin8s_gen::i#1 // i zp[2]:12 202.0
unsigned int sin8s_gen::i#2 // i zp[2]:12 33.666666666666664
signed char *sin8s_gen::sintab
signed char *sin8s_gen::sintab#0 // sintab zp[2]:6 67.33333333333333
signed char *sin8s_gen::sintab#2 // sintab zp[2]:6 43.285714285714285
unsigned int sin8s_gen::step
unsigned int sin8s_gen::step#0 // step zp[2]:10 10.181818181818182
unsigned int sin8s_gen::wavelength
unsigned int sin8s_gen::x
unsigned int sin8s_gen::x#1 // x zp[2]:14 101.0
unsigned int sin8s_gen::x#2 // x zp[2]:14 37.875
__constant signed char sintab2[$c0] = { fill( $c0, 0) }
__constant char sintabref[] = { 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc }
__constant unsigned int wavelength = $c0

zp[1]:21 [ main::i#2 main::i#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:12 [ print_str::str#2 print_str::str#0 sin8s_gen::i#2 sin8s_gen::i#1 ]
zp[1]:20 [ sin8s::isUpper#10 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:14 [ memset::dst#2 memset::dst#1 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:6 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:8 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
zp[2]:10 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#0 sin8s_gen::step#0 div16u::return#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:16 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 divr16u::dividend#2 divr16u::dividend#0 ]
zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ main::sb#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:18 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:17 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:19 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 14262

  // File Comments
/// @file
/// Sine Generator functions using only multiplication, addition and bit shifting
///
/// Uses a single division for converting the wavelength to a reciprocal.
/// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
/// Uses the approximation sin(x) = x - x^/6 + x^/128
/// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sinusgen8.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const wavelength = $c0
  .label print_screen = $400
  .label print_char_cursor = 6
.segment Code
  // main
main: {
    .label i = $15
    // sin8s_gen(sintab2, wavelength)
    // [1] call sin8s_gen
    // [13] phi from main to sin8s_gen [phi:main->sin8s_gen]
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // print_cls()
    // [3] call print_cls
    // [28] phi from main::@2 to print_cls [phi:main::@2->print_cls]
    jsr print_cls
    // [4] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [4] phi print_char_cursor#45 = print_screen#0 [phi:main::@2->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [4] phi main::i#2 = 0 [phi:main::@2->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [4] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [4] phi print_char_cursor#45 = print_char_cursor#10 [phi:main::@4->main::@1#0] -- register_copy 
    // [4] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // signed byte sb = sintab2[i]-(signed byte)sintabref[i]
    // [5] main::sb#0 = sintab2[main::i#2] - (signed char)sintabref[main::i#2] -- vbsaa=pbsc1_derefidx_vbuz1_minus_pbsc2_derefidx_vbuz1 
    ldy.z i
    lda sintab2,y
    sec
    sbc sintabref,y
    // print_schar(sb)
    // [6] print_schar::b#1 = main::sb#0 -- vbsxx=vbsaa 
    tax
    // [7] call print_schar
    jsr print_schar
    // [8] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // print_str("  ")
    // [9] call print_str
    // [41] phi from main::@3 to print_str [phi:main::@3->print_str]
    jsr print_str
    // main::@4
    // for(byte i: 0..191)
    // [10] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [11] if(main::i#1!=$c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [12] return 
    rts
  .segment Data
    str: .text "  "
    .byte 0
}
.segment Code
  // sin8s_gen
// Generate signed char sine table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// void sin8s_gen(__zp(6) signed char *sintab, unsigned int wavelength)
sin8s_gen: {
    .label step = $a
    .label sintab = 6
    // u[4.12]
    // Iterate over the table
    .label x = $e
    .label i = $c
    // unsigned int step = div16u(PI2_u4f12, wavelength)
    // [14] call div16u
  // u[4.28] step = PI*2/wavelength
    // [48] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
    jsr div16u
    // unsigned int step = div16u(PI2_u4f12, wavelength)
    // [15] div16u::return#0 = div16u::return#1
    // sin8s_gen::@3
    // [16] sin8s_gen::step#0 = div16u::return#0
    // [17] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
    // [17] phi sin8s_gen::sintab#2 = sintab2 [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<sintab2
    sta.z sintab
    lda #>sintab2
    sta.z sintab+1
    // [17] phi sin8s_gen::x#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [17] phi sin8s_gen::i#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [18] if(sin8s_gen::i#2<wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>@wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<@wavelength
    bcc __b2
  !:
    // sin8s_gen::@return
    // }
    // [19] return 
    rts
    // sin8s_gen::@2
  __b2:
    // sin8s(x)
    // [20] sin8s::x#0 = sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [21] call sin8s
    jsr sin8s
    // [22] sin8s::return#0 = sin8s::return#1
    // sin8s_gen::@4
    // [23] sin8s_gen::$2 = sin8s::return#0
    // *sintab++ = sin8s(x)
    // [24] *sin8s_gen::sintab#2 = sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // *sintab++ = sin8s(x);
    // [25] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // x = x + step
    // [26] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z x
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( unsigned int i=0; i<wavelength; i++)
    // [27] sin8s_gen::i#1 = ++ sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [17] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
    // [17] phi sin8s_gen::sintab#2 = sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [17] phi sin8s_gen::x#2 = sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [17] phi sin8s_gen::i#2 = sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [29] call memset
    // [96] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [30] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// void print_schar(__register(X) signed char b)
print_schar: {
    // if(b<0)
    // [31] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [32] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [33] call print_char
    // [102] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [102] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [34] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [34] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [35] print_uchar::b#0 = (char)print_schar::b#4
    // [36] call print_uchar
    jsr print_uchar
    // print_schar::@return
    // }
    // [37] return 
    rts
    // [38] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [39] call print_char
    // [102] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [102] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [40] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // print_str
// Print a zero-terminated string
// void print_str(__zp($c) char *str)
print_str: {
    .label str = $c
    // [42] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [42] phi print_str::str#2 = main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [43] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [44] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [45] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [46] call print_char
    // [102] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [47] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [42] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [42] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($a) unsigned int div16u(unsigned int dividend, unsigned int divisor)
div16u: {
    .label return = $a
    // divr16u(dividend, divisor, 0)
    // [49] call divr16u
    // [113] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [50] divr16u::return#2 = divr16u::return#0
    // div16u::@1
    // [51] div16u::return#1 = divr16u::return#2
    // div16u::@return
    // }
    // [52] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// __register(A) signed char sin8s(__zp(8) unsigned int x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = 8
    .label x = 8
    .label x1 = $12
    .label x3 = $11
    .label usinx = $13
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $14
    // if(x >= PI_u4f12 )
    // [53] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [54] sin8s::x#1 = sin8s::x#0 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [55] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [55] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [55] phi sin8s::x#4 = sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [55] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b5:
    // [55] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [55] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [56] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [57] sin8s::x#2 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    lda #<PI_u4f12
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [58] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [58] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [59] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // char x1 = BYTE1(x<<3)
    // [60] sin8s::x1#0 = byte1  sin8s::$4 -- vbuz1=_byte1_vwuz2 
    // sinx = x - x^3/6 + x5/128;
    lda.z __4+1
    sta.z x1
    // char x2 = mulu8_sel(x1, x1, 0)
    // [61] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [62] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [63] call mulu8_sel
  // u[1.7]
    // [130] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // char x2 = mulu8_sel(x1, x1, 0)
    // [64] mulu8_sel::return#0 = mulu8_sel::return#12
    // sin8s::@9
    // [65] sin8s::x2#0 = mulu8_sel::return#0
    // char x3 = mulu8_sel(x2, x1, 1)
    // [66] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [67] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [68] call mulu8_sel
  // u[2.6] x^2
    // [130] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [130] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // char x3 = mulu8_sel(x2, x1, 1)
    // [69] mulu8_sel::return#1 = mulu8_sel::return#12
    // sin8s::@10
    // [70] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // char x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [71] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [72] call mulu8_sel
  // u[0.7] - $2a.aa rounded to $2b
    // [130] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [130] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // char x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [73] mulu8_sel::return#2 = mulu8_sel::return#12
    // sin8s::@11
    // [74] sin8s::x3_6#0 = mulu8_sel::return#2
    // char usinx = x1 - x3_6
    // [75] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    // u[1.7] x^3/6;
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // char x4 = mulu8_sel(x3, x1, 0)
    // [76] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [77] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [78] call mulu8_sel
  // u[1.7] x - x^3/6
    // [130] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // char x4 = mulu8_sel(x3, x1, 0)
    // [79] mulu8_sel::return#10 = mulu8_sel::return#12
    // sin8s::@12
    // [80] sin8s::x4#0 = mulu8_sel::return#10
    // char x5 = mulu8_sel(x4, x1, 0)
    // [81] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [82] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [83] call mulu8_sel
  // u[3.5] x^4
    // [130] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [130] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [130] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [130] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // char x5 = mulu8_sel(x4, x1, 0)
    // [84] mulu8_sel::return#11 = mulu8_sel::return#12
    // sin8s::@13
    // [85] sin8s::x5#0 = mulu8_sel::return#11
    // char x5_128 = x5>>4
    // [86] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    // u[4.4] x^5
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [87] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [88] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [89] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [90] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [90] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [91] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    beq __b14
    // sin8s::@8
    // sinx = -(signed char)usinx
    // [92] sin8s::sinx#1 = - (signed char)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [93] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [93] phi sin8s::return#1 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [94] return 
    rts
    // sin8s::@14
  __b14:
    // [95] sin8s::return#5 = (signed char)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $e
    // [97] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [97] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [98] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [99] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [100] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [101] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [97] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [97] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [103] *print_char_cursor#29 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [104] print_char_cursor#10 = ++ print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [105] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // b>>4
    // [106] print_uchar::$0 = print_uchar::b#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [107] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [108] call print_char
  // Table of hexadecimal digits
    // [102] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [109] print_uchar::$2 = print_uchar::b#0 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [110] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [111] call print_char
    // [102] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [102] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [102] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [112] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($a) unsigned int divr16u(__zp(2) unsigned int dividend, unsigned int divisor, __zp(8) unsigned int rem)
divr16u: {
    .label rem = 8
    .label dividend = 2
    .label quotient = $a
    .label return = $a
    // [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [114] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [114] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [114] phi divr16u::dividend#2 = PI2_u4f12 [phi:divr16u->divr16u::@1#2] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z dividend
    lda #>PI2_u4f12
    sta.z dividend+1
    // [114] phi divr16u::rem#4 = 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    txa
    sta.z rem
    sta.z rem+1
    // [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [114] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [114] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [114] phi divr16u::dividend#2 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [114] phi divr16u::rem#4 = divr16u::rem#9 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [115] divr16u::rem#0 = divr16u::rem#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // BYTE1(dividend)
    // [116] divr16u::$1 = byte1  divr16u::dividend#2 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // BYTE1(dividend) & $80
    // [117] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (BYTE1(dividend) & $80) != 0 )
    // [118] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [119] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [120] phi divr16u::rem#5 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [121] divr16u::dividend#0 = divr16u::dividend#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [122] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [123] if(divr16u::rem#5<wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>wavelength
    bcc __b3
    bne !+
    lda.z rem
    cmp #<wavelength
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [124] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [125] divr16u::rem#2 = divr16u::rem#5 - wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<wavelength
    sta.z rem
    lda.z rem+1
    sbc #>wavelength
    sta.z rem+1
    // [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [126] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [126] phi divr16u::rem#9 = divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [127] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [128] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@return
    // }
    // [129] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// __register(A) char mulu8_sel(__register(X) char v1, __register(Y) char v2, __zp($10) char select)
mulu8_sel: {
    .label __0 = 2
    .label __1 = 2
    .label select = $10
    // mul8u(v1, v2)
    // [131] mul8u::a#0 = mulu8_sel::v1#5
    // [132] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [133] call mul8u
    jsr mul8u
    // [134] mul8u::return#0 = mul8u::res#2
    // mulu8_sel::@1
    // [135] mulu8_sel::$0 = mul8u::return#0
    // mul8u(v1, v2)<<select
    // [136] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // BYTE1(mul8u(v1, v2)<<select)
    // [137] mulu8_sel::return#12 = byte1  mulu8_sel::$1 -- vbuaa=_byte1_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [138] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// __zp(2) unsigned int mul8u(__register(X) char a, __register(A) char b)
mul8u: {
    .label return = 2
    .label mb = 4
    .label res = 2
    // unsigned int mb = b
    // [139] mul8u::mb#0 = (unsigned int)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [140] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [140] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [140] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [140] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [141] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [142] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [143] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [144] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [145] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [146] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [146] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [147] mul8u::a#1 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [148] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [140] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [140] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [140] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [140] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"
  sintab2: .fill $c0, 0
  // .fill $c0, round(127.5*sin(i*2*PI/$c0))
  sintabref: .byte 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc

