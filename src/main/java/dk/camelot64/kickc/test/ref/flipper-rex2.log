byte[1000] SCREEN = $0400;
byte[16*16] buffer1 = $1000;
byte[16*16] buffer2 = $1100;
byte *RASTER = $d012;

main();

void main() {
  prepare();
  do {
     byte c = 25;
     do{
       do { } while(*RASTER!=254)
       do { } while(*RASTER!=255)
       c--;
     } while(c!=0)
     flip();
     plot();
  } while(true)
}

// Prepare buffer
void prepare() {
   byte i=0;
   do {
      buffer1[i] = i;
   } while (++i!=0)
}

// Flip buffer
void flip() {
   byte srcIdx = 0;
   byte dstIdx = 15;
   byte r=16;
   do {
      byte c = 16;
      do {
         buffer2[dstIdx] = buffer1[srcIdx++];
         dstIdx = dstIdx+16;
      } while(--c!=0)
      dstIdx--;
     } while(--r!=0)
   byte i=0;
   do {
      buffer1[i] = buffer2[i];
   } while (++i!=0)
}

// Plot buffer on screen
void plot() {
   byte* line = SCREEN+5*40+12;
   byte y=16;
   byte i=0;
   do {
      byte x=0;
      do {
         line[x] = buffer1[i++];
      } while(++x<16)
      line = line+40;
   } while(--y!=0)
}
Adding pre/post-modifier (byte) main::c ← -- (byte) main::c
Adding pre/post-modifier (byte) prepare::i ← ++ (byte) prepare::i
Adding pre/post-modifier (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
Adding pre/post-modifier (byte) flip::c ← -- (byte) flip::c
Adding pre/post-modifier (byte) flip::dstIdx ← -- (byte) flip::dstIdx
Adding pre/post-modifier (byte) flip::r ← -- (byte) flip::r
Adding pre/post-modifier (byte) flip::i ← ++ (byte) flip::i
Adding pre/post-modifier (byte) plot::i ← ++ (byte) plot::i
Adding pre/post-modifier (byte) plot::x ← ++ (byte) plot::x
Adding pre/post-modifier (byte) plot::y ← -- (byte) plot::y
PROGRAM
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  proc (void()) main()
  (void~) main::$0 ← call prepare 
main::@1:
  (byte) main::c ← (byte) 25
main::@2:
main::@3:
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
main::@4:
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
main::@return:
  return 
  endproc // main()
  proc (void()) prepare()
  (byte) prepare::i ← (byte) 0
prepare::@1:
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
prepare::@return:
  return 
  endproc // prepare()
  proc (void()) flip()
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
flip::@1:
  (byte) flip::c ← (byte) 16
flip::@2:
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  (byte) flip::i ← (byte) 0
flip::@3:
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
flip::@return:
  return 
  endproc // flip()
  proc (void()) plot()
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
plot::@1:
  (byte) plot::x ← (byte) 0
plot::@2:
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
plot::@return:
  return 
  endproc // plot()

SYMBOLS
(void~) $0
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@return
(byte) flip::c
(byte) flip::dstIdx
(byte) flip::i
(byte) flip::r
(byte) flip::srcIdx
(void()) main()
(void~) main::$0
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(void~) main::$6
(void~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c
(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@return
(byte) plot::i
(byte*) plot::line
(byte) plot::x
(byte) plot::y
(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  to:@1
main: from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@2
main::@2: from main::@1 main::@6
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@5
main::@5: from main::@3
  to:main::@4
main::@4: from main::@4 main::@5
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@8
main::@8: from main::@7
  to:main::@return
main::@return: from main::@8
  return 
  to:@RETURN
@1: from @BEGIN
  to:@2
prepare: from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@2
prepare::@2: from prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@2
  return 
  to:@RETURN
@2: from @1
  to:@3
flip: from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@6
flip::@6: from flip::@3
  to:flip::@return
flip::@return: from flip::@6
  return 
  to:@RETURN
@3: from @2
  to:@4
plot: from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@4
plot::@4: from plot::@3
  to:plot::@return
plot::@return: from plot::@4
  return 
  to:@RETURN
@4: from @3
  to:@END
@END: from @4

Removing empty block main::@5
Removing empty block main::@8
Removing empty block @1
Removing empty block prepare::@2
Removing empty block @2
Removing empty block flip::@6
Removing empty block @3
Removing empty block plot::@4
Removing empty block @4
CONTROL FLOW GRAPH
@BEGIN: from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  to:@END
main: from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@7
  return 
  to:@RETURN
prepare: from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  call main param-assignment
  to:@5
@5: from @BEGIN
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@9
main::@9: from main
  to:main::@1
main::@1: from main::@11 main::@9
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @5

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@5
@5: from @BEGIN
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#15 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @5

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@5
@5: from @BEGIN
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#15 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @5

Culled Empty Block (label) @5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#15 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte[1000]) SCREEN#0 (word) 1024
Constant (byte[256]) buffer1#0 (word) 4096
Constant (byte[256]) buffer2#0 (word) 4352
Constant (byte*) RASTER#0 (word) 53266
Constant (byte) main::c#0 (byte) 25
Constant (byte) prepare::i#0 (byte) 0
Constant (byte) flip::srcIdx#0 (byte) 0
Constant (byte) flip::dstIdx#0 (byte) 15
Constant (byte) flip::r#0 (byte) 16
Constant (byte) flip::c#0 (byte) 16
Constant (byte) flip::i#0 (byte) 0
Constant (byte~) plot::$0 (byte) 200
Constant (byte) plot::y#0 (byte) 16
Constant (byte) plot::i#0 (byte) 0
Constant (byte) plot::x#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#15 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#11 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#8 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte) 200
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Consolidated constant in assignment plot::$2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#15 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#11 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#8 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 212
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#6 = (byte*) RASTER#8 
Alias (byte[1000]) SCREEN#10 = (byte[1000]) SCREEN#11 
Alias (byte[256]) buffer1#22 = (byte[256]) buffer1#9 (byte[256]) buffer1#5 
Alias (byte[256]) buffer2#14 = (byte[256]) buffer2#15 
Alias (byte*) RASTER#10 = (byte*) RASTER#4 (byte*) RASTER#7 (byte*) RASTER#2 (byte*) RASTER#9 (byte*) RASTER#5 
Alias (byte) main::c#1 = (byte) main::c#5 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#8 (byte[1000]) SCREEN#4 (byte[1000]) SCREEN#5 (byte[1000]) SCREEN#3 (byte[1000]) SCREEN#2 (byte[1000]) SCREEN#9 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#20 (byte[256]) buffer1#16 (byte[256]) buffer1#17 (byte[256]) buffer1#14 (byte[256]) buffer1#15 (byte[256]) buffer1#21 (byte[256]) buffer1#12 
Alias (byte[256]) buffer2#12 = (byte[256]) buffer2#8 (byte[256]) buffer2#9 (byte[256]) buffer2#7 (byte[256]) buffer2#16 (byte[256]) buffer2#13 (byte[256]) buffer2#5 
Alias (byte) main::c#2 = (byte) main::c#3 
Alias (byte) flip::dstIdx#1 = (byte~) flip::$1 (byte) flip::dstIdx#4 
Alias (byte) flip::r#2 = (byte) flip::r#3 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#2 (byte[256]) buffer1#7 
Alias (byte) flip::srcIdx#1 = (byte) flip::srcIdx#4 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#6 (byte[256]) buffer2#4 
Alias (byte*) plot::line#0 = (byte*~) plot::$2 
Alias (byte*) plot::line#2 = (byte*) plot::line#3 
Alias (byte) plot::y#2 = (byte) plot::y#3 
Alias (byte[256]) buffer1#13 = (byte[256]) buffer1#4 
Alias (byte) plot::i#1 = (byte) plot::i#4 
Alias (byte*) plot::line#1 = (byte*~) plot::$5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#14 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#10 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#6 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#22 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: from main
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#22 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#11 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#13 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Redundant Phi (byte[256]) buffer1#22 (word) 4096
Redundant Phi (byte*) RASTER#6 (word) 53266
Redundant Phi (byte[1000]) SCREEN#10 (word) 1024
Redundant Phi (byte[256]) buffer2#14 (word) 4352
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@9
main::@9: from main
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#11 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#13 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte) main::c#4
Self Phi Eliminated (byte[1000]) SCREEN#6
Self Phi Eliminated (byte[256]) buffer1#18
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte*) RASTER#10
Self Phi Eliminated (byte) main::c#2
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#12
Self Phi Eliminated (byte[256]) buffer1#1
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte) flip::r#2
Self Phi Eliminated (byte[256]) buffer2#2
Self Phi Eliminated (byte[256]) buffer1#3
Self Phi Eliminated (byte[256]) buffer1#13
Self Phi Eliminated (byte*) plot::line#2
Self Phi Eliminated (byte) plot::y#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@9
main::@9: from main
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Simple Condition (boolean~) main::$2 if((byte~) main::$1!=(byte) 254) goto main::@3
Simple Condition (boolean~) main::$4 if((byte~) main::$3!=(byte) 255) goto main::@4
Simple Condition (boolean~) main::$5 if((byte) main::c#1!=(byte) 0) goto main::@2
Simple Condition (boolean~) prepare::$0 if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
Simple Condition (boolean~) flip::$2 if((byte) flip::c#1!=(byte) 0) goto flip::@2
Simple Condition (boolean~) flip::$3 if((byte) flip::r#1!=(byte) 0) goto flip::@1
Simple Condition (boolean~) flip::$5 if((byte) flip::i#1!=(byte) 0) goto flip::@3
Simple Condition (boolean~) plot::$4 if((byte) plot::x#1<(byte) 16) goto plot::@2
Simple Condition (boolean~) plot::$6 if((byte) plot::y#1!=(byte) 0) goto plot::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@9
main::@9: from main
  to:main::@1
main::@1: from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: from main::@6
  to:main::@3
main::@3: from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@5
flip::@5: from flip::@4
  to:flip::@3
flip::@3: from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@2
Culled Empty Block (label) flip::@5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte[256]) buffer1#3 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@4/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte[256]) buffer1#1 (word) 4096
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte[256]) buffer1#3 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@4/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#1 = (byte*) RASTER#10 
Alias (byte) main::c#2 = (byte) main::c#4 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#6 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#18 
Alias (byte[256]) buffer2#10 = (byte[256]) buffer2#12 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#6 (byte[256]) buffer1#3 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#3 (byte[256]) buffer2#2 
Alias (byte) flip::r#2 = (byte) flip::r#4 
Alias (byte[256]) buffer1#13 = (byte[256]) buffer1#8 
Alias (byte*) plot::line#2 = (byte*) plot::line#4 
Alias (byte) plot::y#2 = (byte) plot::y#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#1 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#11 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte[256]) buffer1#13
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#10 ← phi( main::@1/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#1 ← phi( main::@1/(byte[1000]) SCREEN#7 )
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#1 ← phi( flip/(byte[256]) buffer2#10 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip/(byte[256]) buffer1#10 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#11 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot/(byte[256]) buffer1#10 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#1 = (byte*) RASTER#3 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#7 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#19 (byte[256]) buffer1#11 (byte[256]) buffer1#13 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#10 (byte[256]) buffer2#11 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#1 ← phi( main::@11/(byte[256]) buffer2#1 main/(word) 4352 )
  (byte[256]) buffer1#10 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#1 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#1 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  (byte[256]) buffer2#1 ← phi( main/(word) 4352 )
  (byte[256]) buffer1#10 ← phi( main/(word) 4096 )
  (byte[1000]) SCREEN#1 ← phi( main/(word) 1024 )
  (byte*) RASTER#1 ← phi( main/(word) 53266 )
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte*) RASTER#1 (word) 53266
Constant (byte[1000]) SCREEN#1 (word) 1024
Constant (byte[256]) buffer1#10 (word) 4096
Constant (byte[256]) buffer2#1 (word) 4352
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from main main::@11
  to:main::@3
main::@3: from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (word) 1024
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@3
main::@3: from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*~) plot::$1 ← (word) 1024
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte*~) plot::$1 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@3
main::@3: from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  (byte*) plot::line#0 ← (word) 1024 + (byte) 212
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Constant (byte*) plot::line#0 (word) 1236
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@3
main::@3: from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from main::@10
  to:plot::@1
plot::@1: from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Added new block during phi lifting main::@12(between main::@6 and main::@3)
Added new block during phi lifting plot::@5(between plot::@3 and plot::@1)
Added new block during phi lifting plot::@6(between plot::@2 and plot::@2)
Added new block during phi lifting flip::@7(between flip::@4 and flip::@1)
Added new block during phi lifting flip::@8(between flip::@2 and flip::@2)
Added new block during phi lifting flip::@9(between flip::@3 and flip::@3)
Added new block during phi lifting prepare::@3(between prepare::@1 and prepare::@1)
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return main::@12 plot plot::@1 plot::@2 plot::@3 plot::@return plot::@5 plot::@6 flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return flip::@9 flip::@7 flip::@8 prepare prepare::@1 prepare::@return prepare::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@BEGIN: from
  call main param-assignment
  to:@END
@END: from @BEGIN
main: from @BEGIN
  call prepare param-assignment
  to:main::@3
main::@3: from main main::@11 main::@12 main::@3
  (byte) main::c#2 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@12
  to:main::@7
main::@7: from main::@6
  call flip param-assignment
  to:main::@10
main::@10: from main::@7
  call plot param-assignment
  to:main::@11
main::@11: from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: from main::@11
  return 
  to:@RETURN
main::@12: from main::@6
  (byte~) main::c#6 ← (byte) main::c#1
  to:main::@3
plot: from main::@10
  to:plot::@1
plot::@1: from plot plot::@5
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 )
  (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@5/(byte*~) plot::line#5 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 )
  (byte~) plot::i#6 ← (byte) plot::i#3
  to:plot::@2
plot::@2: from plot::@1 plot::@6
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 )
  (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@6
  to:plot::@3
plot::@3: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@5
  to:plot::@return
plot::@return: from plot::@3
  return 
  to:@RETURN
plot::@5: from plot::@3
  (byte~) plot::i#5 ← (byte) plot::i#1
  (byte*~) plot::line#5 ← (byte*) plot::line#1
  (byte~) plot::y#5 ← (byte) plot::y#1
  to:plot::@1
plot::@6: from plot::@2
  (byte~) plot::i#7 ← (byte) plot::i#1
  (byte~) plot::x#3 ← (byte) plot::x#1
  to:plot::@2
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@7
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 )
  (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3
  (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5
  to:flip::@2
flip::@2: from flip::@1 flip::@8
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@8
  to:flip::@4
flip::@4: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@7
  to:flip::@3
flip::@3: from flip::@4 flip::@9
  (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@9
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
flip::@9: from flip::@3
  (byte~) flip::i#3 ← (byte) flip::i#1
  to:flip::@3
flip::@7: from flip::@4
  (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2
  (byte~) flip::r#5 ← (byte) flip::r#1
  to:flip::@1
flip::@8: from flip::@2
  (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1
  (byte~) flip::c#3 ← (byte) flip::c#1
  to:flip::@2
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@3
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@3
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
prepare::@3: from prepare::@1
  (byte~) prepare::i#3 ← (byte) prepare::i#1
  to:prepare::@1

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] call prepare param-assignment [ ]
  to:main::@3
main::@3: from main main::@11 main::@12 main::@3
  [2] (byte) main::c#2 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 ) [ main::c#2 ]
  [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ]
  [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ]
  to:main::@4
main::@4: from main::@3 main::@4
  [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ]
  [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ]
  to:main::@6
main::@6: from main::@4
  [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ]
  [8] if((byte) main::c#1!=(byte) 0) goto main::@12 [ main::c#1 ]
  to:main::@7
main::@7: from main::@6
  [9] call flip param-assignment [ ]
  to:main::@10
main::@10: from main::@7
  [10] call plot param-assignment [ ]
  to:main::@11
main::@11: from main::@10
  [11] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: from main::@11
  [12] return  [ ]
  to:@RETURN
main::@12: from main::@6
  [13] (byte~) main::c#6 ← (byte) main::c#1 [ main::c#6 ]
  to:main::@3
plot: from main::@10
  to:plot::@1
plot::@1: from plot plot::@5
  [14] (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [14] (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@5/(byte*~) plot::line#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [14] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [15] (byte~) plot::i#6 ← (byte) plot::i#3 [ plot::i#6 plot::line#2 plot::y#2 ]
  to:plot::@2
plot::@2: from plot::@1 plot::@6
  [16] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [16] (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [17] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ]
  [18] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#2 plot::x#2 plot::y#2 plot::i#1 ]
  [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#2 plot::x#1 plot::y#2 plot::i#1 ]
  [21] if((byte) plot::x#1<(byte) 16) goto plot::@6 [ plot::line#2 plot::x#1 plot::y#2 plot::i#1 ]
  to:plot::@3
plot::@3: from plot::@2
  [22] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::y#2 plot::i#1 plot::line#1 ]
  [23] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::y#1 plot::i#1 plot::line#1 ]
  [24] if((byte) plot::y#1!=(byte) 0) goto plot::@5 [ plot::y#1 plot::i#1 plot::line#1 ]
  to:plot::@return
plot::@return: from plot::@3
  [25] return  [ ]
  to:@RETURN
plot::@5: from plot::@3
  [26] (byte~) plot::i#5 ← (byte) plot::i#1 [ plot::i#5 plot::y#1 plot::line#1 ]
  [27] (byte*~) plot::line#5 ← (byte*) plot::line#1 [ plot::i#5 plot::line#5 plot::y#1 ]
  [28] (byte~) plot::y#5 ← (byte) plot::y#1 [ plot::i#5 plot::line#5 plot::y#5 ]
  to:plot::@1
plot::@6: from plot::@2
  [29] (byte~) plot::i#7 ← (byte) plot::i#1 [ plot::i#7 plot::line#2 plot::x#1 plot::y#2 ]
  [30] (byte~) plot::x#3 ← (byte) plot::x#1 [ plot::i#7 plot::x#3 plot::line#2 plot::y#2 ]
  to:plot::@2
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@7
  [31] (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [31] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [31] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [32] (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3 [ flip::dstIdx#5 flip::srcIdx#6 flip::r#2 ]
  [33] (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5 [ flip::srcIdx#6 flip::dstIdx#7 flip::r#2 ]
  to:flip::@2
flip::@2: from flip::@1 flip::@8
  [34] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [34] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [34] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [35] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ]
  [36] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [37] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::dstIdx#3 flip::c#2 flip::r#2 flip::srcIdx#1 ]
  [38] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::c#2 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  [39] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::c#1 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  [40] if((byte) flip::c#1!=(byte) 0) goto flip::@8 [ flip::c#1 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  to:flip::@4
flip::@4: from flip::@2
  [41] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#2 flip::srcIdx#1 flip::dstIdx#2 ]
  [42] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::r#1 flip::srcIdx#1 flip::dstIdx#2 ]
  [43] if((byte) flip::r#1!=(byte) 0) goto flip::@7 [ flip::r#1 flip::srcIdx#1 flip::dstIdx#2 ]
  to:flip::@3
flip::@3: from flip::@4 flip::@9
  [44] (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [45] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [46] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [47] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [48] if((byte) flip::i#1!=(byte) 0) goto flip::@9 [ flip::i#1 ]
  to:flip::@return
flip::@return: from flip::@3
  [49] return  [ ]
  to:@RETURN
flip::@9: from flip::@3
  [50] (byte~) flip::i#3 ← (byte) flip::i#1 [ flip::i#3 ]
  to:flip::@3
flip::@7: from flip::@4
  [51] (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1 [ flip::srcIdx#5 flip::r#1 flip::dstIdx#2 ]
  [52] (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#1 ]
  [53] (byte~) flip::r#5 ← (byte) flip::r#1 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#5 ]
  to:flip::@1
flip::@8: from flip::@2
  [54] (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1 [ flip::srcIdx#7 flip::c#1 flip::dstIdx#1 flip::r#2 ]
  [55] (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1 [ flip::srcIdx#7 flip::dstIdx#8 flip::c#1 flip::r#2 ]
  [56] (byte~) flip::c#3 ← (byte) flip::c#1 [ flip::srcIdx#7 flip::dstIdx#8 flip::c#3 flip::r#2 ]
  to:flip::@2
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@3
  [57] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 ) [ prepare::i#2 ]
  [58] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [59] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [60] if((byte) prepare::i#1!=(byte) 0) goto prepare::@3 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: from prepare::@1
  [61] return  [ ]
  to:@RETURN
prepare::@3: from prepare::@1
  [62] (byte~) prepare::i#3 ← (byte) prepare::i#1 [ prepare::i#3 ]
  to:prepare::@1

Created 14 initial phi equivalence classes
Coalesced [13] main::c#6 ← main::c#1
Coalesced [15] plot::i#6 ← plot::i#3
Coalesced [26] plot::i#5 ← plot::i#1
Coalesced [27] plot::line#5 ← plot::line#1
Coalesced [28] plot::y#5 ← plot::y#1
Coalesced (already) [29] plot::i#7 ← plot::i#1
Coalesced [30] plot::x#3 ← plot::x#1
Coalesced [32] flip::srcIdx#6 ← flip::srcIdx#3
Coalesced [33] flip::dstIdx#7 ← flip::dstIdx#5
Coalesced [50] flip::i#3 ← flip::i#1
Coalesced [51] flip::srcIdx#5 ← flip::srcIdx#1
Coalesced [52] flip::dstIdx#6 ← flip::dstIdx#2
Coalesced [53] flip::r#5 ← flip::r#1
Coalesced (already) [54] flip::srcIdx#7 ← flip::srcIdx#1
Coalesced [55] flip::dstIdx#8 ← flip::dstIdx#1
Coalesced [56] flip::c#3 ← flip::c#1
Coalesced [62] prepare::i#3 ← prepare::i#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) plot::@5
Culled Empty Block (label) plot::@6
Culled Empty Block (label) flip::@9
Culled Empty Block (label) flip::@7
Culled Empty Block (label) flip::@8
Culled Empty Block (label) prepare::@3
Block Sequence Planned @BEGIN @END main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@BEGIN: from
  [0] call main param-assignment [ ]
  to:@END
@END: from @BEGIN
main: from @BEGIN
  [1] call prepare param-assignment [ ]
  to:main::@3
main::@3: from main main::@11 main::@3 main::@6
  [2] (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 ) [ main::c#2 ]
  [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ]
  [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ]
  to:main::@4
main::@4: from main::@3 main::@4
  [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ]
  [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ]
  to:main::@6
main::@6: from main::@4
  [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ]
  [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ]
  to:main::@7
main::@7: from main::@6
  [9] call flip param-assignment [ ]
  to:main::@10
main::@10: from main::@7
  [10] call plot param-assignment [ ]
  to:main::@11
main::@11: from main::@10
  [11] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: from main::@11
  [12] return  [ ]
  to:@RETURN
plot: from main::@10
  to:plot::@1
plot::@1: from plot plot::@3
  [13] (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [13] (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@3/(byte*) plot::line#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [13] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  [14] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [14] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ]
  [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ]
  [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ]
  [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ]
  to:plot::@3
plot::@3: from plot::@2
  [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ]
  [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ]
  [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ]
  to:plot::@return
plot::@return: from plot::@3
  [23] return  [ ]
  to:@RETURN
flip: from main::@7
  to:flip::@1
flip::@1: from flip flip::@4
  [24] (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [24] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [24] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  [25] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [25] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [25] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ]
  [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ]
  [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ]
  [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ]
  to:flip::@4
flip::@4: from flip::@2
  [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ]
  [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  to:flip::@3
flip::@3: from flip::@3 flip::@4
  [35] (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ]
  to:flip::@return
flip::@return: from flip::@3
  [40] return  [ ]
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  [41] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 ) [ prepare::i#2 ]
  [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: from prepare::@1
  [45] return  [ ]
  to:@RETURN

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 1:prepare 9:flip 10:plot 

DOMINATORS
@BEGIN dominated by  @BEGIN 
@END dominated by  @BEGIN @END 
main dominated by  @BEGIN main 
main::@3 dominated by  @BEGIN main::@3 main 
main::@4 dominated by  @BEGIN main::@4 main::@3 main 
main::@6 dominated by  @BEGIN main::@4 main::@3 main::@6 main 
main::@7 dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 
main::@10 dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 main::@10 
main::@11 dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 main::@10 main::@11 
main::@return dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 main::@return main::@10 main::@11 
plot dominated by  @BEGIN main::@4 main::@3 main::@6 plot main main::@7 main::@10 
plot::@1 dominated by  @BEGIN main::@4 main::@3 main::@6 main plot main::@7 plot::@1 main::@10 
plot::@2 dominated by  @BEGIN main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 
plot::@3 dominated by  @BEGIN main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
plot::@return dominated by  @BEGIN main::@4 main::@3 plot::@return main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
flip dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 flip 
flip::@1 dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 flip::@1 flip 
flip::@2 dominated by  @BEGIN main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@4 dominated by  flip::@4 @BEGIN main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@3 dominated by  flip::@4 flip::@3 @BEGIN main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@return dominated by  flip::@4 flip::@3 @BEGIN main::@4 main::@3 main::@6 main main::@7 flip::@return flip::@1 flip::@2 flip 
prepare dominated by  @BEGIN prepare main 
prepare::@1 dominated by  @BEGIN prepare main prepare::@1 
prepare::@return dominated by  @BEGIN prepare::@return prepare main prepare::@1 

Found back edge: Loop head: main::@3 tails: main::@3 blocks: null
Found back edge: Loop head: main::@4 tails: main::@4 blocks: null
Found back edge: Loop head: main::@3 tails: main::@6 blocks: null
Found back edge: Loop head: main::@3 tails: main::@11 blocks: null
Found back edge: Loop head: plot::@2 tails: plot::@2 blocks: null
Found back edge: Loop head: plot::@1 tails: plot::@3 blocks: null
Found back edge: Loop head: flip::@2 tails: flip::@2 blocks: null
Found back edge: Loop head: flip::@1 tails: flip::@4 blocks: null
Found back edge: Loop head: flip::@3 tails: flip::@3 blocks: null
Found back edge: Loop head: prepare::@1 tails: prepare::@1 blocks: null
Populated: Loop head: main::@3 tails: main::@3 blocks: main::@3 
Populated: Loop head: main::@4 tails: main::@4 blocks: main::@4 
Populated: Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Populated: Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Populated: Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Populated: Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Populated: Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Populated: Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Populated: Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Populated: Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
NATURAL LOOPS
Loop head: main::@3 tails: main::@3 blocks: main::@3 
Loop head: main::@4 tails: main::@4 blocks: main::@4 
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 

Found 0 loops in scope []
Found 4 loops in scope [main]
  Loop head: main::@3 tails: main::@3 blocks: main::@3 
  Loop head: main::@4 tails: main::@4 blocks: main::@4 
  Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
  Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Found 1 loops in scope [prepare]
  Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
Found 3 loops in scope [flip]
  Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
  Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
  Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Found 2 loops in scope [plot]
  Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
  Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@3 tails: main::@3 blocks: main::@3  depth: 3
Loop head: main::@4 tails: main::@4 blocks: main::@4  depth: 3
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3  depth: 2
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3  depth: 1
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2  depth: 3
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1  depth: 2
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2  depth: 3
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1  depth: 2
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3  depth: 2
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 2002.0
(byte~) flip::$4 202.0
(byte) flip::c
(byte) flip::c#1 1501.5
(byte) flip::c#2 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 701.0
(byte) flip::dstIdx#2 67.33333333333333
(byte) flip::dstIdx#3 776.0
(byte) flip::dstIdx#5 202.0
(byte) flip::i
(byte) flip::i#1 151.5
(byte) flip::i#2 134.66666666666666
(byte) flip::r
(byte) flip::r#1 151.5
(byte) flip::r#2 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 300.42857142857144
(byte) flip::srcIdx#2 1034.6666666666667
(byte) flip::srcIdx#3 202.0
(void()) main()
(byte~) main::$1 2002.0
(byte~) main::$3 2002.0
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 40.4
(void()) plot()
(byte~) plot::$3 2002.0
(byte) plot::i
(byte) plot::i#1 350.5
(byte) plot::i#2 1034.6666666666667
(byte) plot::i#3 202.0
(byte*) plot::line
(byte*) plot::line#1 67.33333333333333
(byte*) plot::line#2 171.85714285714283
(byte) plot::x
(byte) plot::x#1 1501.5
(byte) plot::x#2 750.75
(byte) plot::y
(byte) plot::y#1 151.5
(byte) plot::y#2 25.25
(void()) prepare()
(byte) prepare::i
(byte) prepare::i#1 16.5
(byte) prepare::i#2 22.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ plot::line#2 plot::line#1 ]
[ plot::y#2 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#2 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable plot::$3 to zero page equivalence class [ plot::$3 ]
Added variable flip::$0 to zero page equivalence class [ flip::$0 ]
Added variable flip::$4 to zero page equivalence class [ flip::$4 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ plot::line#2 plot::line#1 ]
[ plot::y#2 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#2 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
[ main::$1 ]
[ main::$3 ]
[ plot::$3 ]
[ flip::$0 ]
[ flip::$4 ]
Allocated zp byte:2 to zp byte:2 [ main::c#2 main::c#1 ]
Allocated zp ptr byte:3 to zp ptr byte:3 [ plot::line#2 plot::line#1 ]
Allocated zp byte:5 to zp byte:5 [ plot::y#2 plot::y#1 ]
Allocated zp byte:6 to zp byte:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Allocated zp byte:7 to zp byte:7 [ plot::x#2 plot::x#1 ]
Allocated zp byte:8 to zp byte:8 [ flip::r#2 flip::r#1 ]
Allocated zp byte:9 to zp byte:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Allocated zp byte:10 to zp byte:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
Allocated zp byte:11 to zp byte:11 [ flip::c#2 flip::c#1 ]
Allocated zp byte:12 to zp byte:12 [ flip::i#2 flip::i#1 ]
Allocated zp byte:13 to zp byte:13 [ prepare::i#2 prepare::i#1 ]
Allocated zp byte:14 to zp byte:14 [ main::$1 ]
Allocated zp byte:15 to zp byte:15 [ main::$3 ]
Allocated zp byte:16 to zp byte:16 [ plot::$3 ]
Allocated zp byte:17 to zp byte:17 [ flip::$0 ]
Allocated zp byte:18 to zp byte:18 [ flip::$4 ]
INITIAL ASM
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp BEND
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call prepare param-assignment [ ]
  jsr prepare
//SEG5 [2] phi from main to main::@3
main__B3_from_main:
//SEG6 [2] phi (byte) main::c#2 = (byte) 25 -- zpby1=coby1 
  lda #$19
  sta $2
  jmp main__B3
//SEG7 [2] phi from main::@11 to main::@3
main__B3_from_B11:
//SEG8 [2] phi (byte) main::c#2 = (byte) 25 -- zpby1=coby1 
  lda #$19
  sta $2
  jmp main__B3
//SEG9 [2] phi from main::@3 to main::@3
main__B3_from_B3:
  jmp main__B3
//SEG10 [2] phi from main::@6 to main::@3
main__B3_from_B6:
//SEG11 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  jmp main__B3
//SEG12 main::@3
main__B3:
//SEG13 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- zpby1=_star_cowo1 
  lda $d012
  sta $e
//SEG14 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- zpby1_neq_coby1_then_la1 
  lda $e
  cmp #$fe
  bne main__B3_from_B3
  jmp main__B4
//SEG15 main::@4
main__B4:
//SEG16 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- zpby1=_star_cowo1 
  lda $d012
  sta $f
//SEG17 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- zpby1_neq_coby1_then_la1 
  lda $f
  cmp #$ff
  bne main__B4
  jmp main__B6
//SEG18 main::@6
main__B6:
//SEG19 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- zpby1=_dec_zpby1 
  dec $2
//SEG20 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- zpby1_neq_0_then_la1 
  lda $2
  bne main__B3_from_B6
  jmp main__B7
//SEG21 main::@7
main__B7:
//SEG22 [9] call flip param-assignment [ ]
  jsr flip
  jmp main__B10
//SEG23 main::@10
main__B10:
//SEG24 [10] call plot param-assignment [ ]
  jsr plot
  jmp main__B11
//SEG25 main::@11
main__B11:
//SEG26 [11] if(true) goto main::@3 [ ] -- true_then_la1 
  jmp main__B3_from_B11
  jmp main__Breturn
//SEG27 main::@return
main__Breturn:
//SEG28 [12] return  [ ]
  rts
//SEG29 plot
plot:
//SEG30 [13] phi from plot to plot::@1
plot__B1_from_plot:
//SEG31 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $5
//SEG32 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
  lda #<$4d4
  sta $3
  lda #>$4d4
  sta $3+$1
//SEG33 [13] phi (byte) plot::i#3 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta $6
  jmp plot__B1
//SEG34 [13] phi from plot::@3 to plot::@1
plot__B1_from_B3:
//SEG35 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
//SEG36 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
//SEG37 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  jmp plot__B1
//SEG38 plot::@1
plot__B1:
//SEG39 [14] phi from plot::@1 to plot::@2
plot__B2_from_B1:
//SEG40 [14] phi (byte) plot::x#2 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta $7
//SEG41 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  jmp plot__B2
//SEG42 [14] phi from plot::@2 to plot::@2
plot__B2_from_B2:
//SEG43 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
//SEG44 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  jmp plot__B2
//SEG45 plot::@2
plot__B2:
//SEG46 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- zpby1=cowo1_staridx_zpby2 
  ldx $6
  lda $1000,x
  sta $10
//SEG47 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_zpby1=zpby2 
  lda $10
  ldy $7
  sta ($3),y
//SEG48 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- zpby1=_inc_zpby1 
  inc $6
//SEG49 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- zpby1=_inc_zpby1 
  inc $7
//SEG50 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- zpby1_lt_coby1_then_la1 
  lda $7
  cmp #$10
  bcc plot__B2_from_B2
  jmp plot__B3
//SEG51 plot::@3
plot__B3:
//SEG52 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda $3
  clc
  adc #$28
  sta $3
  bcc !+
  inc $3+$1
!:
//SEG53 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
  dec $5
//SEG54 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
  lda $5
  bne plot__B1_from_B3
  jmp plot__Breturn
//SEG55 plot::@return
plot__Breturn:
//SEG56 [23] return  [ ]
  rts
//SEG57 flip
flip:
//SEG58 [24] phi from flip to flip::@1
flip__B1_from_flip:
//SEG59 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $8
//SEG60 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- zpby1=coby1 
  lda #$f
  sta $a
//SEG61 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta $9
  jmp flip__B1
//SEG62 [24] phi from flip::@4 to flip::@1
flip__B1_from_B4:
//SEG63 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
//SEG64 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
//SEG65 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  jmp flip__B1
//SEG66 flip::@1
flip__B1:
//SEG67 [25] phi from flip::@1 to flip::@2
flip__B2_from_B1:
//SEG68 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $b
//SEG69 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
//SEG70 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  jmp flip__B2
//SEG71 [25] phi from flip::@2 to flip::@2
flip__B2_from_B2:
//SEG72 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
//SEG73 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
//SEG74 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  jmp flip__B2
//SEG75 flip::@2
flip__B2:
//SEG76 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- zpby1=cowo1_staridx_zpby2 
  ldx $9
  lda $1000,x
  sta $11
//SEG77 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda $11
  ldx $a
  sta $1100,x
//SEG78 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- zpby1=_inc_zpby1 
  inc $9
//SEG79 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- zpby1=zpby1_plus_coby1 
  lda $a
  clc
  adc #$10
  sta $a
//SEG80 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $b
//SEG81 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
  lda $b
  bne flip__B2_from_B2
  jmp flip__B4
//SEG82 flip::@4
flip__B4:
//SEG83 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $a
//SEG84 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
  dec $8
//SEG85 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
  lda $8
  bne flip__B1_from_B4
//SEG86 [35] phi from flip::@4 to flip::@3
flip__B3_from_B4:
//SEG87 [35] phi (byte) flip::i#2 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta $c
  jmp flip__B3
//SEG88 [35] phi from flip::@3 to flip::@3
flip__B3_from_B3:
//SEG89 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  jmp flip__B3
//SEG90 flip::@3
flip__B3:
//SEG91 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- zpby1=cowo1_staridx_zpby2 
  ldx $c
  lda $1100,x
  sta $12
//SEG92 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_zpby1=zpby2 
  lda $12
  ldx $c
  sta $1000,x
//SEG93 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- zpby1=_inc_zpby1 
  inc $c
//SEG94 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- zpby1_neq_0_then_la1 
  lda $c
  bne flip__B3_from_B3
  jmp flip__Breturn
//SEG95 flip::@return
flip__Breturn:
//SEG96 [40] return  [ ]
  rts
//SEG97 prepare
prepare:
//SEG98 [41] phi from prepare to prepare::@1
prepare__B1_from_prepare:
//SEG99 [41] phi (byte) prepare::i#2 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta $d
  jmp prepare__B1
//SEG100 [41] phi from prepare::@1 to prepare::@1
prepare__B1_from_B1:
//SEG101 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  jmp prepare__B1
//SEG102 prepare::@1
prepare__B1:
//SEG103 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_zpby1=zpby1 
  ldx $d
  txa
  sta $1000,x
//SEG104 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- zpby1=_inc_zpby1 
  inc $d
//SEG105 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- zpby1_neq_0_then_la1 
  lda $d
  bne prepare__B1_from_B1
  jmp prepare__Breturn
//SEG106 prepare::@return
prepare__Breturn:
//SEG107 [45] return  [ ]
  rts

Statement [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp byte:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Removing always clobbered register reg byte a as potential for zp byte:5 [ plot::y#2 plot::y#1 ]
Statement [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp byte:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Removing always clobbered register reg byte a as potential for zp byte:11 [ flip::c#2 flip::c#1 ]
Removing always clobbered register reg byte a as potential for zp byte:8 [ flip::r#2 flip::r#1 ]
Statement [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] always clobbers reg byte a 
Statement [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] always clobbers reg byte a 
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::c#2 main::c#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ptr byte:3 [ plot::line#2 plot::line#1 ] : zp ptr byte:3 , 
Potential registers zp byte:5 [ plot::y#2 plot::y#1 ] : zp byte:5 , reg byte x , reg byte y , 
Potential registers zp byte:6 [ plot::i#2 plot::i#3 plot::i#1 ] : zp byte:6 , reg byte x , reg byte y , 
Potential registers zp byte:7 [ plot::x#2 plot::x#1 ] : zp byte:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:8 [ flip::r#2 flip::r#1 ] : zp byte:8 , reg byte x , reg byte y , 
Potential registers zp byte:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] : zp byte:9 , reg byte x , reg byte y , 
Potential registers zp byte:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] : zp byte:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:11 [ flip::c#2 flip::c#1 ] : zp byte:11 , reg byte x , reg byte y , 
Potential registers zp byte:12 [ flip::i#2 flip::i#1 ] : zp byte:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:13 [ prepare::i#2 prepare::i#1 ] : zp byte:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:14 [ main::$1 ] : zp byte:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:15 [ main::$3 ] : zp byte:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:16 [ plot::$3 ] : zp byte:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:17 [ flip::$0 ] : zp byte:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:18 [ flip::$4 ] : zp byte:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [flip] 2,002: zp byte:17 [ flip::$0 ] 1,901.9: zp byte:11 [ flip::c#2 flip::c#1 ] 1,746.33: zp byte:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] 1,537.1: zp byte:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] 286.17: zp byte:12 [ flip::i#2 flip::i#1 ] 202: zp byte:18 [ flip::$4 ] 173.94: zp byte:8 [ flip::r#2 flip::r#1 ] 
Uplift Scope [plot] 2,252.25: zp byte:7 [ plot::x#2 plot::x#1 ] 2,002: zp byte:16 [ plot::$3 ] 1,587.17: zp byte:6 [ plot::i#2 plot::i#3 plot::i#1 ] 239.19: zp ptr byte:3 [ plot::line#2 plot::line#1 ] 176.75: zp byte:5 [ plot::y#2 plot::y#1 ] 
Uplift Scope [main] 2,002: zp byte:14 [ main::$1 ] 2,002: zp byte:15 [ main::$3 ] 191.9: zp byte:2 [ main::c#2 main::c#1 ] 
Uplift Scope [prepare] 38.5: zp byte:13 [ prepare::i#2 prepare::i#1 ] 
Uplift Scope [] 

Uplifting [flip] best 168324 combination reg byte a [ flip::$0 ] zp byte:11 [ flip::c#2 flip::c#1 ] reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] reg byte x [ flip::i#2 flip::i#1 ] reg byte a [ flip::$4 ] zp byte:8 [ flip::r#2 flip::r#1 ] 
Uplifting [plot] best 144024 combination reg byte y [ plot::x#2 plot::x#1 ] reg byte a [ plot::$3 ] reg byte x [ plot::i#2 plot::i#3 plot::i#1 ] zp ptr byte:3 [ plot::line#2 plot::line#1 ] zp byte:5 [ plot::y#2 plot::y#1 ] 
Uplifting [main] best 125624 combination reg byte a [ main::$1 ] reg byte a [ main::$3 ] reg byte x [ main::c#2 main::c#1 ] 
Uplifting [prepare] best 125524 combination reg byte x [ prepare::i#2 prepare::i#1 ] 
Uplifting [] best 125524 combination 
Coalescing zero page register [ zp byte:5 [ plot::y#2 plot::y#1 ] ] with [ zp byte:8 [ flip::r#2 flip::r#1 ] ]
Re-allocated ZP register from zp ptr byte:3 to zp ptr byte:2
Re-allocated ZP register from zp byte:5 to zp byte:4
Re-allocated ZP register from zp byte:11 to zp byte:5
Removing instruction jmp BEND
Removing instruction jmp main__B3
Removing instruction jmp main__B4
Removing instruction jmp main__B6
Removing instruction jmp main__B7
Removing instruction jmp main__B10
Removing instruction jmp main__B11
Removing instruction jmp main__Breturn
Removing instruction jmp plot__B1
Removing instruction jmp plot__B2
Removing instruction jmp plot__B3
Removing instruction jmp plot__Breturn
Removing instruction jmp flip__B1
Removing instruction jmp flip__B2
Removing instruction jmp flip__B4
Removing instruction jmp flip__B3
Removing instruction jmp flip__Breturn
Removing instruction jmp prepare__B1
Removing instruction jmp prepare__Breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call prepare param-assignment [ ]
  jsr prepare
//SEG5 [2] phi from main to main::@3
main__B3_from_main:
//SEG6 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG7 [2] phi from main::@11 to main::@3
main__B3_from_B11:
//SEG8 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG9 [2] phi from main::@3 to main::@3
main__B3_from_B3:
  jmp main__B3
//SEG10 [2] phi from main::@6 to main::@3
main__B3_from_B6:
//SEG11 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
//SEG12 main::@3
main__B3:
//SEG13 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG14 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$fe
  bne main__B3_from_B3
//SEG15 main::@4
main__B4:
//SEG16 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG17 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$ff
  bne main__B4
//SEG18 main::@6
main__B6:
//SEG19 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
  dex
//SEG20 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne main__B3_from_B6
//SEG21 main::@7
main__B7:
//SEG22 [9] call flip param-assignment [ ]
  jsr flip
//SEG23 main::@10
main__B10:
//SEG24 [10] call plot param-assignment [ ]
  jsr plot
//SEG25 main::@11
main__B11:
//SEG26 [11] if(true) goto main::@3 [ ] -- true_then_la1 
  jmp main__B3_from_B11
//SEG27 main::@return
main__Breturn:
//SEG28 [12] return  [ ]
  rts
//SEG29 plot
plot:
//SEG30 [13] phi from plot to plot::@1
plot__B1_from_plot:
//SEG31 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG32 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
  lda #<$4d4
  sta $2
  lda #>$4d4
  sta $2+$1
//SEG33 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
  ldx #$0
  jmp plot__B1
//SEG34 [13] phi from plot::@3 to plot::@1
plot__B1_from_B3:
//SEG35 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
//SEG36 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
//SEG37 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
//SEG38 plot::@1
plot__B1:
//SEG39 [14] phi from plot::@1 to plot::@2
plot__B2_from_B1:
//SEG40 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
  ldy #$0
//SEG41 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  jmp plot__B2
//SEG42 [14] phi from plot::@2 to plot::@2
plot__B2_from_B2:
//SEG43 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
//SEG44 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
//SEG45 plot::@2
plot__B2:
//SEG46 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG47 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
  sta ($2),y
//SEG48 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
  inx
//SEG49 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
  iny
//SEG50 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
  cpy #$10
  bcc plot__B2_from_B2
//SEG51 plot::@3
plot__B3:
//SEG52 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda $2
  clc
  adc #$28
  sta $2
  bcc !+
  inc $2+$1
!:
//SEG53 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG54 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne plot__B1_from_B3
//SEG55 plot::@return
plot__Breturn:
//SEG56 [23] return  [ ]
  rts
//SEG57 flip
flip:
//SEG58 [24] phi from flip to flip::@1
flip__B1_from_flip:
//SEG59 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG60 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
  ldy #$f
//SEG61 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
  ldx #$0
  jmp flip__B1
//SEG62 [24] phi from flip::@4 to flip::@1
flip__B1_from_B4:
//SEG63 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
//SEG64 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
//SEG65 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
//SEG66 flip::@1
flip__B1:
//SEG67 [25] phi from flip::@1 to flip::@2
flip__B2_from_B1:
//SEG68 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $5
//SEG69 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
//SEG70 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  jmp flip__B2
//SEG71 [25] phi from flip::@2 to flip::@2
flip__B2_from_B2:
//SEG72 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
//SEG73 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
//SEG74 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
//SEG75 flip::@2
flip__B2:
//SEG76 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG77 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
  sta $1100,y
//SEG78 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
  inx
//SEG79 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
  tya
  clc
  adc #$10
  tay
//SEG80 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $5
//SEG81 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
  lda $5
  bne flip__B2_from_B2
//SEG82 flip::@4
flip__B4:
//SEG83 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
  dey
//SEG84 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG85 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne flip__B1_from_B4
//SEG86 [35] phi from flip::@4 to flip::@3
flip__B3_from_B4:
//SEG87 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
  jmp flip__B3
//SEG88 [35] phi from flip::@3 to flip::@3
flip__B3_from_B3:
//SEG89 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
//SEG90 flip::@3
flip__B3:
//SEG91 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
  lda $1100,x
//SEG92 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
  sta $1000,x
//SEG93 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
  inx
//SEG94 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne flip__B3_from_B3
//SEG95 flip::@return
flip__Breturn:
//SEG96 [40] return  [ ]
  rts
//SEG97 prepare
prepare:
//SEG98 [41] phi from prepare to prepare::@1
prepare__B1_from_prepare:
//SEG99 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
  jmp prepare__B1
//SEG100 [41] phi from prepare::@1 to prepare::@1
prepare__B1_from_B1:
//SEG101 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
//SEG102 prepare::@1
prepare__B1:
//SEG103 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
  txa
  sta $1000,x
//SEG104 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
  inx
//SEG105 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne prepare__B1_from_B1
//SEG106 prepare::@return
prepare__Breturn:
//SEG107 [45] return  [ ]
  rts

Removing instruction jmp main__B3
Removing instruction jmp plot__B1
Removing instruction jmp plot__B2
Removing instruction jmp flip__B1
Removing instruction jmp flip__B2
Removing instruction jmp flip__B3
Removing instruction jmp prepare__B1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call prepare param-assignment [ ]
  jsr prepare
//SEG5 [2] phi from main to main::@3
main__B3_from_main:
//SEG6 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG7 [2] phi from main::@11 to main::@3
main__B3_from_B11:
//SEG8 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG9 [2] phi from main::@3 to main::@3
main__B3_from_B3:
//SEG10 [2] phi from main::@6 to main::@3
main__B3_from_B6:
//SEG11 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
//SEG12 main::@3
main__B3:
//SEG13 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG14 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$fe
  bne main__B3_from_B3
//SEG15 main::@4
main__B4:
//SEG16 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG17 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$ff
  bne main__B4
//SEG18 main::@6
main__B6:
//SEG19 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
  dex
//SEG20 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne main__B3_from_B6
//SEG21 main::@7
main__B7:
//SEG22 [9] call flip param-assignment [ ]
  jsr flip
//SEG23 main::@10
main__B10:
//SEG24 [10] call plot param-assignment [ ]
  jsr plot
//SEG25 main::@11
main__B11:
//SEG26 [11] if(true) goto main::@3 [ ] -- true_then_la1 
  jmp main__B3_from_B11
//SEG27 main::@return
main__Breturn:
//SEG28 [12] return  [ ]
  rts
//SEG29 plot
plot:
//SEG30 [13] phi from plot to plot::@1
plot__B1_from_plot:
//SEG31 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG32 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
  lda #<$4d4
  sta $2
  lda #>$4d4
  sta $2+$1
//SEG33 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG34 [13] phi from plot::@3 to plot::@1
plot__B1_from_B3:
//SEG35 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
//SEG36 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
//SEG37 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
//SEG38 plot::@1
plot__B1:
//SEG39 [14] phi from plot::@1 to plot::@2
plot__B2_from_B1:
//SEG40 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
  ldy #$0
//SEG41 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
//SEG42 [14] phi from plot::@2 to plot::@2
plot__B2_from_B2:
//SEG43 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
//SEG44 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
//SEG45 plot::@2
plot__B2:
//SEG46 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG47 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
  sta ($2),y
//SEG48 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
  inx
//SEG49 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
  iny
//SEG50 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
  cpy #$10
  bcc plot__B2_from_B2
//SEG51 plot::@3
plot__B3:
//SEG52 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda $2
  clc
  adc #$28
  sta $2
  bcc !+
  inc $2+$1
!:
//SEG53 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG54 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne plot__B1_from_B3
//SEG55 plot::@return
plot__Breturn:
//SEG56 [23] return  [ ]
  rts
//SEG57 flip
flip:
//SEG58 [24] phi from flip to flip::@1
flip__B1_from_flip:
//SEG59 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG60 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
  ldy #$f
//SEG61 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG62 [24] phi from flip::@4 to flip::@1
flip__B1_from_B4:
//SEG63 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
//SEG64 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
//SEG65 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
//SEG66 flip::@1
flip__B1:
//SEG67 [25] phi from flip::@1 to flip::@2
flip__B2_from_B1:
//SEG68 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $5
//SEG69 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
//SEG70 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
//SEG71 [25] phi from flip::@2 to flip::@2
flip__B2_from_B2:
//SEG72 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
//SEG73 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
//SEG74 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
//SEG75 flip::@2
flip__B2:
//SEG76 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG77 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
  sta $1100,y
//SEG78 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
  inx
//SEG79 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
  tya
  clc
  adc #$10
  tay
//SEG80 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $5
//SEG81 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
  lda $5
  bne flip__B2_from_B2
//SEG82 flip::@4
flip__B4:
//SEG83 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
  dey
//SEG84 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG85 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne flip__B1_from_B4
//SEG86 [35] phi from flip::@4 to flip::@3
flip__B3_from_B4:
//SEG87 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG88 [35] phi from flip::@3 to flip::@3
flip__B3_from_B3:
//SEG89 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
//SEG90 flip::@3
flip__B3:
//SEG91 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
  lda $1100,x
//SEG92 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
  sta $1000,x
//SEG93 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
  inx
//SEG94 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne flip__B3_from_B3
//SEG95 flip::@return
flip__Breturn:
//SEG96 [40] return  [ ]
  rts
//SEG97 prepare
prepare:
//SEG98 [41] phi from prepare to prepare::@1
prepare__B1_from_prepare:
//SEG99 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG100 [41] phi from prepare::@1 to prepare::@1
prepare__B1_from_B1:
//SEG101 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
//SEG102 prepare::@1
prepare__B1:
//SEG103 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
  txa
  sta $1000,x
//SEG104 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
  inx
//SEG105 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne prepare__B1_from_B1
//SEG106 prepare::@return
prepare__Breturn:
//SEG107 [45] return  [ ]
  rts

Removing instruction jmp main__B3
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call prepare param-assignment [ ]
  jsr prepare
//SEG5 [2] phi from main to main::@3
main__B3_from_main:
//SEG6 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG7 [2] phi from main::@11 to main::@3
main__B3_from_B11:
//SEG8 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
//SEG9 [2] phi from main::@3 to main::@3
main__B3_from_B3:
//SEG10 [2] phi from main::@6 to main::@3
main__B3_from_B6:
//SEG11 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
//SEG12 main::@3
main__B3:
//SEG13 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG14 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$fe
  bne main__B3_from_B3
//SEG15 main::@4
main__B4:
//SEG16 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG17 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$ff
  bne main__B4
//SEG18 main::@6
main__B6:
//SEG19 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
  dex
//SEG20 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne main__B3_from_B6
//SEG21 main::@7
main__B7:
//SEG22 [9] call flip param-assignment [ ]
  jsr flip
//SEG23 main::@10
main__B10:
//SEG24 [10] call plot param-assignment [ ]
  jsr plot
//SEG25 main::@11
main__B11:
//SEG26 [11] if(true) goto main::@3 [ ] -- true_then_la1 
  jmp main__B3_from_B11
//SEG27 main::@return
main__Breturn:
//SEG28 [12] return  [ ]
  rts
//SEG29 plot
plot:
//SEG30 [13] phi from plot to plot::@1
plot__B1_from_plot:
//SEG31 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG32 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
  lda #<$4d4
  sta $2
  lda #>$4d4
  sta $2+$1
//SEG33 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG34 [13] phi from plot::@3 to plot::@1
plot__B1_from_B3:
//SEG35 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
//SEG36 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
//SEG37 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
//SEG38 plot::@1
plot__B1:
//SEG39 [14] phi from plot::@1 to plot::@2
plot__B2_from_B1:
//SEG40 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
  ldy #$0
//SEG41 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
//SEG42 [14] phi from plot::@2 to plot::@2
plot__B2_from_B2:
//SEG43 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
//SEG44 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
//SEG45 plot::@2
plot__B2:
//SEG46 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG47 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
  sta ($2),y
//SEG48 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
  inx
//SEG49 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
  iny
//SEG50 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
  cpy #$10
  bcc plot__B2_from_B2
//SEG51 plot::@3
plot__B3:
//SEG52 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda $2
  clc
  adc #$28
  sta $2
  bcc !+
  inc $2+$1
!:
//SEG53 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG54 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne plot__B1_from_B3
//SEG55 plot::@return
plot__Breturn:
//SEG56 [23] return  [ ]
  rts
//SEG57 flip
flip:
//SEG58 [24] phi from flip to flip::@1
flip__B1_from_flip:
//SEG59 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG60 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
  ldy #$f
//SEG61 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG62 [24] phi from flip::@4 to flip::@1
flip__B1_from_B4:
//SEG63 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
//SEG64 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
//SEG65 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
//SEG66 flip::@1
flip__B1:
//SEG67 [25] phi from flip::@1 to flip::@2
flip__B2_from_B1:
//SEG68 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $5
//SEG69 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
//SEG70 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
//SEG71 [25] phi from flip::@2 to flip::@2
flip__B2_from_B2:
//SEG72 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
//SEG73 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
//SEG74 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
//SEG75 flip::@2
flip__B2:
//SEG76 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG77 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
  sta $1100,y
//SEG78 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
  inx
//SEG79 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
  tya
  clc
  adc #$10
  tay
//SEG80 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $5
//SEG81 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
  lda $5
  bne flip__B2_from_B2
//SEG82 flip::@4
flip__B4:
//SEG83 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
  dey
//SEG84 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG85 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne flip__B1_from_B4
//SEG86 [35] phi from flip::@4 to flip::@3
flip__B3_from_B4:
//SEG87 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG88 [35] phi from flip::@3 to flip::@3
flip__B3_from_B3:
//SEG89 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
//SEG90 flip::@3
flip__B3:
//SEG91 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
  lda $1100,x
//SEG92 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
  sta $1000,x
//SEG93 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
  inx
//SEG94 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne flip__B3_from_B3
//SEG95 flip::@return
flip__Breturn:
//SEG96 [40] return  [ ]
  rts
//SEG97 prepare
prepare:
//SEG98 [41] phi from prepare to prepare::@1
prepare__B1_from_prepare:
//SEG99 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG100 [41] phi from prepare::@1 to prepare::@1
prepare__B1_from_B1:
//SEG101 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
//SEG102 prepare::@1
prepare__B1:
//SEG103 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
  txa
  sta $1000,x
//SEG104 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
  inx
//SEG105 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne prepare__B1_from_B1
//SEG106 prepare::@return
prepare__Breturn:
//SEG107 [45] return  [ ]
  rts

FINAL SYMBOL TABLE
(label) @BEGIN
(label) @END
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 reg byte a 2002.0
(byte~) flip::$4 reg byte a 202.0
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@return
(byte) flip::c
(byte) flip::c#1 zp byte:5 1501.5
(byte) flip::c#2 zp byte:5 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 reg byte y 701.0
(byte) flip::dstIdx#2 reg byte y 67.33333333333333
(byte) flip::dstIdx#3 reg byte y 776.0
(byte) flip::dstIdx#5 reg byte y 202.0
(byte) flip::i
(byte) flip::i#1 reg byte x 151.5
(byte) flip::i#2 reg byte x 134.66666666666666
(byte) flip::r
(byte) flip::r#1 zp byte:4 151.5
(byte) flip::r#2 zp byte:4 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 reg byte x 300.42857142857144
(byte) flip::srcIdx#2 reg byte x 1034.6666666666667
(byte) flip::srcIdx#3 reg byte x 202.0
(void()) main()
(byte~) main::$1 reg byte a 2002.0
(byte~) main::$3 reg byte a 2002.0
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 151.5
(byte) main::c#2 reg byte x 40.4
(void()) plot()
(byte~) plot::$3 reg byte a 2002.0
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#1 reg byte x 350.5
(byte) plot::i#2 reg byte x 1034.6666666666667
(byte) plot::i#3 reg byte x 202.0
(byte*) plot::line
(byte*) plot::line#1 zp ptr byte:2 67.33333333333333
(byte*) plot::line#2 zp ptr byte:2 171.85714285714283
(byte) plot::x
(byte) plot::x#1 reg byte y 1501.5
(byte) plot::x#2 reg byte y 750.75
(byte) plot::y
(byte) plot::y#1 zp byte:4 151.5
(byte) plot::y#2 zp byte:4 25.25
(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1 reg byte x 16.5
(byte) prepare::i#2 reg byte x 22.0

reg byte x [ main::c#2 main::c#1 ]
zp ptr byte:2 [ plot::line#2 plot::line#1 ]
zp byte:4 [ plot::y#2 plot::y#1 flip::r#2 flip::r#1 ]
reg byte x [ plot::i#2 plot::i#3 plot::i#1 ]
reg byte y [ plot::x#2 plot::x#1 ]
reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
zp byte:5 [ flip::c#2 flip::c#1 ]
reg byte x [ flip::i#2 flip::i#1 ]
reg byte x [ prepare::i#2 prepare::i#1 ]
reg byte a [ main::$1 ]
reg byte a [ main::$3 ]
reg byte a [ plot::$3 ]
reg byte a [ flip::$0 ]
reg byte a [ flip::$4 ]

FINAL CODE
//SEG0 @BEGIN
BBEGIN:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @END
BEND:
//SEG3 main
main:
//SEG4 [1] call prepare param-assignment [ ]
  jsr prepare
//SEG5 [2] phi from main to main::@3
main__B3_from_main:
//SEG6 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
  jmp main__B3
//SEG7 [2] phi from main::@11 to main::@3
main__B3_from_B11:
//SEG8 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
  ldx #$19
//SEG9 [2] phi from main::@3 to main::@3
main__B3_from_B3:
//SEG10 [2] phi from main::@6 to main::@3
main__B3_from_B6:
//SEG11 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
//SEG12 main::@3
main__B3:
//SEG13 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG14 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$fe
  bne main__B3_from_B3
//SEG15 main::@4
main__B4:
//SEG16 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
  lda $d012
//SEG17 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
  cmp #$ff
  bne main__B4
//SEG18 main::@6
main__B6:
//SEG19 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
  dex
//SEG20 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne main__B3_from_B6
//SEG21 main::@7
main__B7:
//SEG22 [9] call flip param-assignment [ ]
  jsr flip
//SEG23 main::@10
main__B10:
//SEG24 [10] call plot param-assignment [ ]
  jsr plot
//SEG25 main::@11
main__B11:
//SEG26 [11] if(true) goto main::@3 [ ] -- true_then_la1 
  jmp main__B3_from_B11
//SEG27 main::@return
main__Breturn:
//SEG28 [12] return  [ ]
  rts
//SEG29 plot
plot:
//SEG30 [13] phi from plot to plot::@1
plot__B1_from_plot:
//SEG31 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG32 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
  lda #<$4d4
  sta $2
  lda #>$4d4
  sta $2+$1
//SEG33 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG34 [13] phi from plot::@3 to plot::@1
plot__B1_from_B3:
//SEG35 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
//SEG36 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
//SEG37 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
//SEG38 plot::@1
plot__B1:
//SEG39 [14] phi from plot::@1 to plot::@2
plot__B2_from_B1:
//SEG40 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
  ldy #$0
//SEG41 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
//SEG42 [14] phi from plot::@2 to plot::@2
plot__B2_from_B2:
//SEG43 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
//SEG44 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
//SEG45 plot::@2
plot__B2:
//SEG46 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG47 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
  sta ($2),y
//SEG48 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
  inx
//SEG49 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
  iny
//SEG50 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
  cpy #$10
  bcc plot__B2_from_B2
//SEG51 plot::@3
plot__B3:
//SEG52 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
  lda $2
  clc
  adc #$28
  sta $2
  bcc !+
  inc $2+$1
!:
//SEG53 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG54 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne plot__B1_from_B3
//SEG55 plot::@return
plot__Breturn:
//SEG56 [23] return  [ ]
  rts
//SEG57 flip
flip:
//SEG58 [24] phi from flip to flip::@1
flip__B1_from_flip:
//SEG59 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $4
//SEG60 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
  ldy #$f
//SEG61 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG62 [24] phi from flip::@4 to flip::@1
flip__B1_from_B4:
//SEG63 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
//SEG64 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
//SEG65 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
//SEG66 flip::@1
flip__B1:
//SEG67 [25] phi from flip::@1 to flip::@2
flip__B2_from_B1:
//SEG68 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
  lda #$10
  sta $5
//SEG69 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
//SEG70 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
//SEG71 [25] phi from flip::@2 to flip::@2
flip__B2_from_B2:
//SEG72 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
//SEG73 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
//SEG74 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
//SEG75 flip::@2
flip__B2:
//SEG76 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
  lda $1000,x
//SEG77 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
  sta $1100,y
//SEG78 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
  inx
//SEG79 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
  tya
  clc
  adc #$10
  tay
//SEG80 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
  dec $5
//SEG81 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
  lda $5
  bne flip__B2_from_B2
//SEG82 flip::@4
flip__B4:
//SEG83 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
  dey
//SEG84 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
  dec $4
//SEG85 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
  lda $4
  bne flip__B1_from_B4
//SEG86 [35] phi from flip::@4 to flip::@3
flip__B3_from_B4:
//SEG87 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG88 [35] phi from flip::@3 to flip::@3
flip__B3_from_B3:
//SEG89 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
//SEG90 flip::@3
flip__B3:
//SEG91 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
  lda $1100,x
//SEG92 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
  sta $1000,x
//SEG93 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
  inx
//SEG94 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne flip__B3_from_B3
//SEG95 flip::@return
flip__Breturn:
//SEG96 [40] return  [ ]
  rts
//SEG97 prepare
prepare:
//SEG98 [41] phi from prepare to prepare::@1
prepare__B1_from_prepare:
//SEG99 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
  ldx #$0
//SEG100 [41] phi from prepare::@1 to prepare::@1
prepare__B1_from_B1:
//SEG101 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
//SEG102 prepare::@1
prepare__B1:
//SEG103 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
  txa
  sta $1000,x
//SEG104 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
  inx
//SEG105 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
  cpx #$0
  bne prepare__B1_from_B1
//SEG106 prepare::@return
prepare__Breturn:
//SEG107 [45] return  [ ]
  rts

