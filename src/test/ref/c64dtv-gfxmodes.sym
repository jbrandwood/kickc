__constant char * const BG_COLOR = (char *) 53281
__constant char * const BG_COLOR1 = (char *) 53282
__constant char * const BG_COLOR2 = (char *) 53283
__constant char * const BG_COLOR3 = (char *) 53284
__constant const char BLACK = 0
__constant const char BLUE = 6
__constant char * const BORDER_COLOR = (char *) 53280
__constant struct MOS6526_CIA * const CIA1 = (struct MOS6526_CIA *) 56320
__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant char * const COLS = (char *) 55296
__constant const char DTV_BORDER_OFF = 2
__constant const char DTV_CHUNKY = $40
__constant const char DTV_COLORRAM_OFF = $10
__constant const unsigned long DTV_COLOR_BANK_DEFAULT = $1d800
__constant char * const DTV_COLOR_BANK_HI = (char *) 53303
__constant char * const DTV_COLOR_BANK_LO = (char *) 53302
__constant char * const DTV_CONTROL = (char *) 53308
__constant char * const DTV_FEATURE = (char *) 53311
__constant const char DTV_FEATURE_ENABLE = 1
__constant char * const DTV_GRAPHICS_VIC_BANK = (char *) 53309
__constant const char DTV_HIGHCOLOR = 4
__constant const char DTV_LINEAR = 1
__constant const char DTV_OVERSCAN = 8
__constant char * const DTV_PALETTE = (char *) 53760
__constant char DTV_PALETTE_DEFAULT[$10] = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
__constant char * const DTV_PLANEA_MODULO_HI = (char *) 53305
__constant char * const DTV_PLANEA_MODULO_LO = (char *) 53304
__constant char * const DTV_PLANEA_START_HI = (char *) 53317
__constant char * const DTV_PLANEA_START_LO = (char *) 53306
__constant char * const DTV_PLANEA_START_MI = (char *) 53307
__constant char * const DTV_PLANEA_STEP = (char *) 53318
__constant char * const DTV_PLANEB_MODULO_HI = (char *) 53320
__constant char * const DTV_PLANEB_MODULO_LO = (char *) 53319
__constant char * const DTV_PLANEB_START_HI = (char *) 53323
__constant char * const DTV_PLANEB_START_LO = (char *) 53321
__constant char * const DTV_PLANEB_START_MI = (char *) 53322
__constant char * const DTV_PLANEB_STEP = (char *) 53324
__constant const char GREEN = 5
__constant const char KEY_0 = $23
__constant const char KEY_1 = $38
__constant const char KEY_2 = $3b
__constant const char KEY_3 = 8
__constant const char KEY_4 = $b
__constant const char KEY_6 = $13
__constant const char KEY_7 = $18
__constant const char KEY_8 = $1b
__constant const char KEY_A = $a
__constant const char KEY_B = $1c
__constant const char KEY_C = $14
__constant const char KEY_D = $12
__constant const char KEY_E = $e
__constant const char KEY_H = $1d
__constant const char KEY_L = $2a
__constant const char KEY_O = $26
__constant const char KEY_SPACE = $3c
__constant const char KEY_U = $1e
__constant const char LIGHT_GREEN = $d
__constant char MENU_TEXT[] = "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
__constant char * const PROCPORT = (char *) 1
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_CHARROM = 1
__constant const char PROCPORT_RAM_IO = 5
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char * const RASTER = (char *) 53266
__constant const char VICII_BMM = $20
__constant char * const VICII_CONTROL1 = (char *) 53265
__constant char * const VICII_CONTROL2 = (char *) 53270
__constant const char VICII_CSEL = 8
__constant const char VICII_DEN = $10
__constant const char VICII_ECM = $40
__constant const char VICII_MCM = $10
__constant char * const VICII_MEMORY = (char *) 53272
__constant const char VICII_RSEL = 8
__constant const char WHITE = 1
unsigned int abs_u16(unsigned int w)
char abs_u16::$0 // reg byte a 2.0000002E7
char abs_u16::$1 // reg byte a 2.0000002E7
unsigned int abs_u16::return
unsigned int abs_u16::return#0 // return zp[2]:14 2000002.0
unsigned int abs_u16::return#1 // return zp[2]:14 2000002.0
unsigned int abs_u16::return#2 // return zp[2]:14 2.0000002E7
unsigned int abs_u16::return#4 // return zp[2]:14 5500001.0
unsigned int abs_u16::w
unsigned int abs_u16::w#0 // w zp[2]:14 2000002.0
unsigned int abs_u16::w#1 // w zp[2]:14 2000002.0
unsigned int abs_u16::w#2 // w zp[2]:14 8000001.25
void bitmap_clear(char bgcol , char fgcol)
char bitmap_clear::bgcol
char bitmap_clear::col
__constant char bitmap_clear::col#0 = WHITE*$10 // col
char bitmap_clear::fgcol
char *bitmap_gfx
char *bitmap_gfx#14 // bitmap_gfx zp[2]:47 10.485981308411215
char *bitmap_gfx#15 // bitmap_gfx zp[2]:47 374.0
void bitmap_init(char *gfx , char *screen)
char bitmap_init::$4 // reg byte a 2000002.0
char bitmap_init::$5 // reg byte a 2000002.0
char bitmap_init::$6 // reg byte a 2000002.0
char bitmap_init::$7 // zp[1]:23 500000.5
char bitmap_init::bits
char bitmap_init::bits#1 // reg byte a 1000001.0
char bitmap_init::bits#3 // reg byte a 1500001.5
char bitmap_init::bits#4 // reg byte a 666667.3333333334
char *bitmap_init::gfx
char *bitmap_init::screen
char bitmap_init::x
char bitmap_init::x#1 // reg byte x 1500001.5
char bitmap_init::x#2 // reg byte x 500000.5
char bitmap_init::y
char bitmap_init::y#1 // reg byte x 1500001.5
char bitmap_init::y#2 // reg byte x 500000.5
char *bitmap_init::yoffs
char *bitmap_init::yoffs#1 // yoffs zp[2]:14 2000002.0
char *bitmap_init::yoffs#2 // yoffs zp[2]:14 625000.625
char *bitmap_init::yoffs#4 // yoffs zp[2]:14 1000001.0
void bitmap_line(unsigned int x1 , unsigned int y1 , unsigned int x2 , unsigned int y2)
unsigned int bitmap_line::dx
unsigned int bitmap_line::dx#0 // dx zp[2]:19 7.5100000175E7
unsigned int bitmap_line::dy
unsigned int bitmap_line::dy#0 // dy zp[2]:14 8.344444463888888E7
unsigned int bitmap_line::e
unsigned int bitmap_line::e#0 // e zp[2]:12 2000002.0
unsigned int bitmap_line::e#1 // e zp[2]:12 1.3333333346666667E9
unsigned int bitmap_line::e#2 // e zp[2]:12 2.000000002E9
unsigned int bitmap_line::e#3 // e zp[2]:12 4.0020000059999996E8
unsigned int bitmap_line::e#6 // e zp[2]:12 1.5000000015E9
unsigned int bitmap_line::e1
unsigned int bitmap_line::e1#0 // e1 zp[2]:10 2000002.0
unsigned int bitmap_line::e1#1 // e1 zp[2]:10 1.3333333346666667E9
unsigned int bitmap_line::e1#2 // e1 zp[2]:10 2.000000002E9
unsigned int bitmap_line::e1#3 // e1 zp[2]:10 4.0020000059999996E8
unsigned int bitmap_line::e1#6 // e1 zp[2]:10 1.5000000015E9
unsigned int bitmap_line::sx
unsigned int bitmap_line::sx#0 // sx zp[2]:21 6.67000001E7
unsigned int bitmap_line::sy
unsigned int bitmap_line::sy#0 // sy zp[2]:17 7.696153857692307E7
unsigned int bitmap_line::x
unsigned int bitmap_line::x#1 // x zp[2]:6 1.000000001E9
unsigned int bitmap_line::x#12 // x zp[2]:6 2.000000002E9
unsigned int bitmap_line::x#13 // x zp[2]:6 5.715714292857143E8
unsigned int bitmap_line::x#15 // x zp[2]:6 5.71428572E8
unsigned int bitmap_line::x#6 // x zp[2]:6 2.001000003E9
unsigned int bitmap_line::x#7 // x zp[2]:6 7.50250001E8
unsigned int bitmap_line::x1
unsigned int bitmap_line::x1#0 // x1 zp[2]:6 204000.24000000002
unsigned int bitmap_line::x2
unsigned int bitmap_line::x2#0 // x2 zp[2]:26 3.0366666787878785E7
unsigned int bitmap_line::y
unsigned int bitmap_line::y#1 // y zp[2]:8 5.71428572E8
unsigned int bitmap_line::y#13 // y zp[2]:8 2.000000002E9
unsigned int bitmap_line::y#15 // y zp[2]:8 4.2871428628571427E8
unsigned int bitmap_line::y#2 // y zp[2]:8 1.000000001E9
unsigned int bitmap_line::y#4 // y zp[2]:8 5.0025000075E8
unsigned int bitmap_line::y#7 // y zp[2]:8 1.000000001E9
unsigned int bitmap_line::y1
unsigned int bitmap_line::y1#0 // y1 zp[2]:8 164000.2
unsigned int bitmap_line::y2
unsigned int bitmap_line::y2#0 // y2 zp[2]:24 3.1315625125E7
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$1 // zp[2]:4 2.0000000002E10
char bitmap_plot::$2 // reg byte x 2.0000000002E10
char *bitmap_plot::plotter
unsigned int bitmap_plot::plotter#0 // plotter zp[2]:2 5.0000000005E9
char *bitmap_plot::plotter#1 // plotter zp[2]:2 1.50000000015E10
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0 // x zp[2]:6 1000001.0
unsigned int bitmap_plot::x#1 // x zp[2]:6 1.000000001E9
unsigned int bitmap_plot::x#2 // x zp[2]:6 1000001.0
unsigned int bitmap_plot::x#3 // x zp[2]:6 1.000000001E9
unsigned int bitmap_plot::x#4 // x zp[2]:6 5.5005000015E9
char bitmap_plot::y
char bitmap_plot::y#0 // reg byte x 2000002.0
char bitmap_plot::y#1 // reg byte x 2.000000002E9
char bitmap_plot::y#2 // reg byte x 2000002.0
char bitmap_plot::y#3 // reg byte x 2.000000002E9
char bitmap_plot::y#4 // reg byte x 2.2002000006E10
__constant const char bitmap_plot_bit[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_yhi[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_ylo[$100] = { fill( $100, 0) }
char *bitmap_screen
char *bitmap_screen#14 // bitmap_screen zp[2]:49 10.485981308411215
char *bitmap_screen#15 // bitmap_screen zp[2]:49 374.0
void dtvSetCpuBankSegment1(char cpuBankIdx)
__constant char *dtvSetCpuBankSegment1::cpuBank = (char *) 255
char dtvSetCpuBankSegment1::cpuBankIdx
char dtvSetCpuBankSegment1::cpuBankIdx#1 // reg byte a 2000002.0
char dtvSetCpuBankSegment1::cpuBankIdx#3 // reg byte a 1.1000002E7
char dtv_control
char dtv_control#116 // reg byte x 804117.7647058824
char dtv_control#146 // reg byte x 10001.0
char dtv_control#16 // reg byte x 666667.3333333334
char keyboard_key_pressed(char key)
char keyboard_key_pressed::$2 // reg byte a 2.00000002E8
char keyboard_key_pressed::colidx
char keyboard_key_pressed::colidx#0 // colidx zp[1]:23 3.3333333666666668E7
char keyboard_key_pressed::key
char keyboard_key_pressed::key#20 // reg byte y 1.00000001E8
char keyboard_key_pressed::return
char keyboard_key_pressed::return#0 // reg byte a 8187273.681818182
char keyboard_key_pressed::return#10 // reg byte a 20002.0
char keyboard_key_pressed::return#11 // reg byte a 20002.0
char keyboard_key_pressed::return#12 // reg byte a 20002.0
char keyboard_key_pressed::return#13 // reg byte a 20002.0
char keyboard_key_pressed::return#14 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#15 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#16 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#17 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#18 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#19 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#2 // reg byte a 20002.0
char keyboard_key_pressed::return#20 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#21 // reg byte a 2.0000002E7
char keyboard_key_pressed::return#24 // reg byte a 20002.0
char keyboard_key_pressed::return#25 // reg byte a 20002.0
char keyboard_key_pressed::return#26 // reg byte a 20002.0
char keyboard_key_pressed::return#27 // reg byte a 20002.0
char keyboard_key_pressed::return#28 // reg byte a 20002.0
char keyboard_key_pressed::return#29 // reg byte a 20002.0
char keyboard_key_pressed::return#30 // reg byte a 20002.0
char keyboard_key_pressed::rowidx
char keyboard_key_pressed::rowidx#0 // reg byte a 2.00000002E8
__constant char keyboard_matrix_col_bitmask[8] = { 1, 2, 4, 8, $10, $20, $40, $80 }
char keyboard_matrix_read(char rowid)
char keyboard_matrix_read::return
char keyboard_matrix_read::return#0 // reg byte a 3.666666673333334E8
char keyboard_matrix_read::return#2 // reg byte a 2.00000002E8
char keyboard_matrix_read::row_pressed_bits
char keyboard_matrix_read::rowid
char keyboard_matrix_read::rowid#0 // reg byte y 1.100000002E9
__constant char keyboard_matrix_row_bitmask[8] = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#5 // reg byte x 1250000.125
char *memset::dst
char *memset::dst#1 // dst zp[2]:14 2.0000002E7
char *memset::dst#2 // dst zp[2]:14 1.3366668333333332E7
char *memset::dst#4 // dst zp[2]:14 200002.0
char *memset::end
char *memset::end#0 // end zp[2]:6 1683333.6666666665
unsigned int memset::num
unsigned int memset::num#3 // num zp[2]:43 100001.0
void *memset::return
void *memset::str
void *memset::str#4 // str zp[2]:51
void menu()
char menu::$13 // reg byte a 20002.0
char menu::$17 // reg byte a 20002.0
char menu::$21 // reg byte a 20002.0
char menu::$25 // reg byte a 20002.0
char menu::$29 // reg byte a 20002.0
char menu::$33 // reg byte a 20002.0
char menu::$37 // reg byte a 20002.0
char menu::$41 // reg byte a 20002.0
char menu::$45 // reg byte a 20002.0
char menu::$49 // reg byte a 20002.0
char menu::$5 // reg byte a 20002.0
char menu::$9 // reg byte a 20002.0
__constant char * const menu::CHARSET = (char *) 38912
__constant char * const menu::SCREEN = (char *) 32768
char *menu::c
char *menu::c#1 // c zp[2]:45 20002.0
char *menu::c#2 // c zp[2]:45 13334.666666666666
char menu::i
char menu::i#1 // reg byte x 15001.5
char menu::i#2 // reg byte x 20002.0
void mode_8bppchunkybmm()
unsigned int mode_8bppchunkybmm::$7 // zp[2]:12 1000001.0
__constant const unsigned long mode_8bppchunkybmm::PLANEB = $20000
char mode_8bppchunkybmm::c
char mode_8bppchunkybmm::c#0 // reg byte a 2000002.0
char *mode_8bppchunkybmm::gfxb
char *mode_8bppchunkybmm::gfxb#1 // gfxb zp[2]:14 420000.60000000003
char *mode_8bppchunkybmm::gfxb#3 // gfxb zp[2]:14 1550002.0
char *mode_8bppchunkybmm::gfxb#4 // gfxb zp[2]:14 750000.75
char *mode_8bppchunkybmm::gfxb#5 // gfxb zp[2]:14 200002.0
char mode_8bppchunkybmm::gfxbCpuBank
char mode_8bppchunkybmm::gfxbCpuBank#2 // reg byte x 2000002.0
char mode_8bppchunkybmm::gfxbCpuBank#4 // reg byte x 1025001.25
char mode_8bppchunkybmm::gfxbCpuBank#7 // reg byte x 200002.0
char mode_8bppchunkybmm::gfxbCpuBank#8 // reg byte x 344444.8888888889
char mode_8bppchunkybmm::i
char mode_8bppchunkybmm::i#1 // reg byte x 150001.5
char mode_8bppchunkybmm::i#2 // reg byte x 200002.0
unsigned int mode_8bppchunkybmm::x
unsigned int mode_8bppchunkybmm::x#1 // x zp[2]:10 1500001.5
unsigned int mode_8bppchunkybmm::x#2 // x zp[2]:10 300000.30000000005
char mode_8bppchunkybmm::y
char mode_8bppchunkybmm::y#1 // y zp[1]:38 150001.5
char mode_8bppchunkybmm::y#6 // y zp[1]:38 92307.92307692306
void mode_8bpppixelcell()
char mode_8bpppixelcell::$2 // reg byte a 2000002.0
char mode_8bpppixelcell::$3 // zp[1]:23 1000001.0
char mode_8bpppixelcell::$4 // reg byte a 2000002.0
char mode_8bpppixelcell::$5 // reg byte a 2000002.0
char mode_8bpppixelcell::$8 // reg byte a 2.0000002E7
__constant char *mode_8bpppixelcell::CHARGEN = (char *) 53248
__constant char * const mode_8bpppixelcell::PLANEA = (char *) 15360
__constant char * const mode_8bpppixelcell::PLANEB = (char *) 16384
char mode_8bpppixelcell::ax
char mode_8bpppixelcell::ax#1 // reg byte x 1500001.5
char mode_8bpppixelcell::ax#2 // reg byte x 428571.85714285716
char mode_8bpppixelcell::ay
char mode_8bpppixelcell::ay#1 // ay zp[1]:32 150001.5
char mode_8bpppixelcell::ay#4 // ay zp[1]:32 120000.30000000002
char mode_8bpppixelcell::bits
char mode_8bpppixelcell::bits#0 // bits zp[1]:16 1000001.0
char mode_8bpppixelcell::bits#1 // bits zp[1]:16 5000000.5
char mode_8bpppixelcell::bits#2 // bits zp[1]:16 4428572.0
char mode_8bpppixelcell::c
char mode_8bpppixelcell::c#2 // reg byte a 2.0000002E7
char mode_8bpppixelcell::c#3 // reg byte a 2.0000002E7
char mode_8bpppixelcell::ch
char mode_8bpppixelcell::ch#1 // ch zp[1]:42 150001.5
char mode_8bpppixelcell::ch#8 // ch zp[1]:42 11764.823529411764
char *mode_8bpppixelcell::chargen
char *mode_8bpppixelcell::chargen#1 // chargen zp[2]:8 131250.1875
char *mode_8bpppixelcell::chargen#2 // chargen zp[2]:8 1550002.0
char *mode_8bpppixelcell::chargen#4 // chargen zp[2]:8 200002.0
char mode_8bpppixelcell::col
char mode_8bpppixelcell::col#1 // col zp[1]:28 3014286.2857142854
char mode_8bpppixelcell::col#2 // col zp[1]:28 3875000.5
char mode_8bpppixelcell::col#5 // col zp[1]:28 700001.0
char mode_8bpppixelcell::col#7 // col zp[1]:28 200002.0
char mode_8bpppixelcell::cp
char mode_8bpppixelcell::cp#1 // reg byte x 1.50000015E7
char mode_8bpppixelcell::cp#2 // reg byte x 2222222.4444444445
char mode_8bpppixelcell::cr
char mode_8bpppixelcell::cr#1 // cr zp[1]:31 1500001.5
char mode_8bpppixelcell::cr#6 // cr zp[1]:31 142857.2857142857
char *mode_8bpppixelcell::gfxa
char *mode_8bpppixelcell::gfxa#1 // gfxa zp[2]:14 420000.60000000003
char *mode_8bpppixelcell::gfxa#2 // gfxa zp[2]:14 516667.3333333334
char *mode_8bpppixelcell::gfxa#3 // gfxa zp[2]:14 200002.0
char *mode_8bpppixelcell::gfxb
char *mode_8bpppixelcell::gfxb#1 // gfxb zp[2]:10 2344444.888888889
char *mode_8bpppixelcell::gfxb#2 // gfxb zp[2]:10 5166667.333333333
char *mode_8bpppixelcell::gfxb#5 // gfxb zp[2]:10 700001.0
char *mode_8bpppixelcell::gfxb#7 // gfxb zp[2]:10 200002.0
char mode_8bpppixelcell::i
char mode_8bpppixelcell::i#1 // reg byte x 150001.5
char mode_8bpppixelcell::i#2 // reg byte x 200002.0
void mode_ctrl()
char mode_ctrl::$1 // reg byte a 2.0000002E7
char mode_ctrl::$12 // reg byte a 2.0000002E7
char mode_ctrl::$16 // reg byte a 2.0000002E7
char mode_ctrl::$20 // reg byte a 2.0000002E7
char mode_ctrl::$24 // reg byte a 2.0000002E7
char mode_ctrl::$28 // reg byte a 2.0000002E7
char mode_ctrl::$4 // reg byte a 2.0000002E7
char mode_ctrl::$8 // reg byte a 2.0000002E7
char mode_ctrl::ctrl
char mode_ctrl::ctrl#0 // ctrl zp[1]:16 6000000.6
char mode_ctrl::ctrl#1 // ctrl zp[1]:16 2.0000002E7
char mode_ctrl::ctrl#10 // ctrl zp[1]:16 8000000.8
char mode_ctrl::ctrl#11 // ctrl zp[1]:16 8000000.8
char mode_ctrl::ctrl#12 // ctrl zp[1]:16 8000000.8
char mode_ctrl::ctrl#13 // ctrl zp[1]:16 8000000.8
char mode_ctrl::ctrl#14 // ctrl zp[1]:16 5750001.25
char mode_ctrl::ctrl#17 // ctrl zp[1]:16 8000000.8
char mode_ctrl::ctrl#2 // ctrl zp[1]:16 2.0000002E7
char mode_ctrl::ctrl#22 // ctrl zp[1]:16 5000000.5
char mode_ctrl::ctrl#3 // ctrl zp[1]:16 2.0000002E7
char mode_ctrl::ctrl#4 // ctrl zp[1]:16 2.0000002E7
char mode_ctrl::ctrl#5 // ctrl zp[1]:16 2.0000002E7
char mode_ctrl::ctrl#6 // ctrl zp[1]:16 2.0000002E7
void mode_ecmchar()
char mode_ecmchar::$2 // reg byte a 2000002.0
char mode_ecmchar::$3 // reg byte a 2000002.0
char mode_ecmchar::$4 // reg byte a 2000002.0
char mode_ecmchar::$5 // zp[1]:16 1000001.0
char mode_ecmchar::$6 // reg byte a 2000002.0
char mode_ecmchar::$7 // reg byte a 2000002.0
__constant char * const mode_ecmchar::CHARSET = (char *) 36864
__constant char * const mode_ecmchar::COLORS = (char *) 55296
__constant char * const mode_ecmchar::SCREEN = (char *) 32768
char *mode_ecmchar::ch
char *mode_ecmchar::ch#1 // ch zp[2]:10 420000.60000000003
char *mode_ecmchar::ch#2 // ch zp[2]:10 310000.4
char *mode_ecmchar::ch#3 // ch zp[2]:10 200002.0
char *mode_ecmchar::col
char *mode_ecmchar::col#1 // col zp[2]:29 190909.36363636365
char *mode_ecmchar::col#2 // col zp[2]:29 775001.0
char *mode_ecmchar::col#3 // col zp[2]:29 200002.0
char mode_ecmchar::cx
char mode_ecmchar::cx#1 // reg byte x 1500001.5
char mode_ecmchar::cx#2 // reg byte x 363636.7272727273
char mode_ecmchar::cy
char mode_ecmchar::cy#1 // cy zp[1]:32 150001.5
char mode_ecmchar::cy#4 // cy zp[1]:32 157143.14285714284
char mode_ecmchar::i
char mode_ecmchar::i#1 // reg byte x 150001.5
char mode_ecmchar::i#2 // reg byte x 200002.0
void mode_hicolecmchar()
char mode_hicolecmchar::$2 // reg byte a 2000002.0
char mode_hicolecmchar::$3 // zp[1]:16 1000001.0
char mode_hicolecmchar::$4 // reg byte a 2000002.0
__constant char * const mode_hicolecmchar::CHARSET = (char *) 36864
__constant char * const mode_hicolecmchar::COLORS = (char *) 33792
__constant char * const mode_hicolecmchar::SCREEN = (char *) 32768
char *mode_hicolecmchar::ch
char *mode_hicolecmchar::ch#1 // ch zp[2]:29 420000.60000000003
char *mode_hicolecmchar::ch#2 // ch zp[2]:29 387500.5
char *mode_hicolecmchar::ch#3 // ch zp[2]:29 200002.0
char *mode_hicolecmchar::col
char *mode_hicolecmchar::col#1 // col zp[2]:10 300000.4285714285
char *mode_hicolecmchar::col#2 // col zp[2]:10 516667.3333333334
char *mode_hicolecmchar::col#3 // col zp[2]:10 200002.0
char mode_hicolecmchar::cx
char mode_hicolecmchar::cx#1 // reg byte x 1500001.5
char mode_hicolecmchar::cx#2 // reg byte x 333333.6666666666
char mode_hicolecmchar::cy
char mode_hicolecmchar::cy#1 // cy zp[1]:36 150001.5
char mode_hicolecmchar::cy#4 // cy zp[1]:36 100000.25000000001
char mode_hicolecmchar::i
char mode_hicolecmchar::i#1 // reg byte x 150001.5
char mode_hicolecmchar::i#2 // reg byte x 200002.0
char mode_hicolecmchar::v
char mode_hicolecmchar::v#0 // reg byte a 1000001.0
void mode_hicolmcchar()
char mode_hicolmcchar::$2 // reg byte a 2000002.0
char mode_hicolmcchar::$3 // zp[1]:16 1000001.0
char mode_hicolmcchar::$4 // reg byte a 2000002.0
__constant char * const mode_hicolmcchar::CHARSET = (char *) 36864
__constant char * const mode_hicolmcchar::COLORS = (char *) 33792
__constant char * const mode_hicolmcchar::SCREEN = (char *) 32768
char *mode_hicolmcchar::ch
char *mode_hicolmcchar::ch#1 // ch zp[2]:10 420000.60000000003
char *mode_hicolmcchar::ch#2 // ch zp[2]:10 387500.5
char *mode_hicolmcchar::ch#3 // ch zp[2]:10 200002.0
char *mode_hicolmcchar::col
char *mode_hicolmcchar::col#1 // col zp[2]:29 300000.4285714285
char *mode_hicolmcchar::col#2 // col zp[2]:29 516667.3333333334
char *mode_hicolmcchar::col#3 // col zp[2]:29 200002.0
char mode_hicolmcchar::cx
char mode_hicolmcchar::cx#1 // reg byte x 1500001.5
char mode_hicolmcchar::cx#2 // reg byte x 333333.6666666666
char mode_hicolmcchar::cy
char mode_hicolmcchar::cy#1 // cy zp[1]:37 150001.5
char mode_hicolmcchar::cy#4 // cy zp[1]:37 100000.25000000001
char mode_hicolmcchar::i
char mode_hicolmcchar::i#1 // reg byte x 150001.5
char mode_hicolmcchar::i#2 // reg byte x 200002.0
char mode_hicolmcchar::v
char mode_hicolmcchar::v#0 // reg byte a 1000001.0
void mode_hicolstdchar()
char mode_hicolstdchar::$2 // reg byte a 2000002.0
char mode_hicolstdchar::$3 // zp[1]:23 1000001.0
char mode_hicolstdchar::$4 // reg byte a 2000002.0
__constant char * const mode_hicolstdchar::CHARSET = (char *) 36864
__constant char * const mode_hicolstdchar::COLORS = (char *) 33792
__constant char * const mode_hicolstdchar::SCREEN = (char *) 32768
char *mode_hicolstdchar::ch
char *mode_hicolstdchar::ch#1 // ch zp[2]:10 420000.60000000003
char *mode_hicolstdchar::ch#2 // ch zp[2]:10 387500.5
char *mode_hicolstdchar::ch#3 // ch zp[2]:10 200002.0
char *mode_hicolstdchar::col
char *mode_hicolstdchar::col#1 // col zp[2]:29 300000.4285714285
char *mode_hicolstdchar::col#2 // col zp[2]:29 516667.3333333334
char *mode_hicolstdchar::col#3 // col zp[2]:29 200002.0
char mode_hicolstdchar::cx
char mode_hicolstdchar::cx#1 // reg byte x 1500001.5
char mode_hicolstdchar::cx#2 // reg byte x 333333.6666666666
char mode_hicolstdchar::cy
char mode_hicolstdchar::cy#1 // cy zp[1]:35 150001.5
char mode_hicolstdchar::cy#4 // cy zp[1]:35 100000.25000000001
char mode_hicolstdchar::i
char mode_hicolstdchar::i#1 // reg byte x 150001.5
char mode_hicolstdchar::i#2 // reg byte x 200002.0
char mode_hicolstdchar::v
char mode_hicolstdchar::v#0 // reg byte a 1000001.0
void mode_mcchar()
char mode_mcchar::$2 // reg byte a 2000002.0
char mode_mcchar::$3 // reg byte a 2000002.0
char mode_mcchar::$4 // reg byte a 2000002.0
char mode_mcchar::$5 // zp[1]:28 1000001.0
char mode_mcchar::$6 // reg byte a 2000002.0
char mode_mcchar::$7 // reg byte a 2000002.0
__constant char * const mode_mcchar::CHARSET = (char *) 36864
__constant char * const mode_mcchar::COLORS = (char *) 55296
__constant char * const mode_mcchar::SCREEN = (char *) 32768
char *mode_mcchar::ch
char *mode_mcchar::ch#1 // ch zp[2]:10 420000.60000000003
char *mode_mcchar::ch#2 // ch zp[2]:10 310000.4
char *mode_mcchar::ch#3 // ch zp[2]:10 200002.0
char *mode_mcchar::col
char *mode_mcchar::col#1 // col zp[2]:29 190909.36363636365
char *mode_mcchar::col#2 // col zp[2]:29 775001.0
char *mode_mcchar::col#3 // col zp[2]:29 200002.0
char mode_mcchar::cx
char mode_mcchar::cx#1 // reg byte x 1500001.5
char mode_mcchar::cx#2 // reg byte x 363636.7272727273
char mode_mcchar::cy
char mode_mcchar::cy#1 // cy zp[1]:32 150001.5
char mode_mcchar::cy#4 // cy zp[1]:32 157143.14285714284
char mode_mcchar::i
char mode_mcchar::i#1 // reg byte x 150001.5
char mode_mcchar::i#2 // reg byte x 200002.0
void mode_sixsfred()
char mode_sixsfred::$2 // reg byte a 2000002.0
char mode_sixsfred::$3 // reg byte a 2000002.0
char mode_sixsfred::$6 // reg byte a 2000002.0
__constant char * const mode_sixsfred::COLORS = (char *) 32768
__constant char * const mode_sixsfred::PLANEA = (char *) 16384
__constant char * const mode_sixsfred::PLANEB = (char *) 24576
char mode_sixsfred::ax
char mode_sixsfred::ax#1 // reg byte x 1500001.5
char mode_sixsfred::ax#2 // reg byte x 400000.4
char mode_sixsfred::ay
char mode_sixsfred::ay#1 // ay zp[1]:32 150001.5
char mode_sixsfred::ay#4 // ay zp[1]:32 150000.375
char mode_sixsfred::bx
char mode_sixsfred::bx#1 // reg byte x 1500001.5
char mode_sixsfred::bx#2 // reg byte x 666667.3333333334
char mode_sixsfred::by
char mode_sixsfred::by#1 // by zp[1]:41 150001.5
char mode_sixsfred::by#4 // by zp[1]:41 33333.666666666664
char *mode_sixsfred::col
char *mode_sixsfred::col#1 // col zp[2]:10 420000.60000000003
char *mode_sixsfred::col#2 // col zp[2]:10 775001.0
char *mode_sixsfred::col#3 // col zp[2]:10 200002.0
char mode_sixsfred::cx
char mode_sixsfred::cx#1 // reg byte x 1500001.5
char mode_sixsfred::cx#2 // reg byte x 600000.6000000001
char mode_sixsfred::cy
char mode_sixsfred::cy#1 // cy zp[1]:31 150001.5
char mode_sixsfred::cy#4 // cy zp[1]:31 150000.375
char *mode_sixsfred::gfxa
char *mode_sixsfred::gfxa#1 // gfxa zp[2]:14 420000.60000000003
char *mode_sixsfred::gfxa#2 // gfxa zp[2]:14 775001.0
char *mode_sixsfred::gfxa#3 // gfxa zp[2]:14 200002.0
char *mode_sixsfred::gfxb
char *mode_sixsfred::gfxb#1 // gfxb zp[2]:8 420000.60000000003
char *mode_sixsfred::gfxb#2 // gfxb zp[2]:8 1550002.0
char *mode_sixsfred::gfxb#3 // gfxb zp[2]:8 200002.0
char mode_sixsfred::i
char mode_sixsfred::i#1 // reg byte x 150001.5
char mode_sixsfred::i#2 // reg byte x 200002.0
char mode_sixsfred::row
char mode_sixsfred::row#0 // reg byte a 2000002.0
__constant char mode_sixsfred::row_bitmask[] = { 0, $55, $aa, $ff }
void mode_sixsfred2()
char mode_sixsfred2::$2 // reg byte a 2000002.0
char mode_sixsfred2::$3 // zp[1]:28 1000001.0
char mode_sixsfred2::$4 // reg byte a 2000002.0
char mode_sixsfred2::$5 // reg byte a 2000002.0
char mode_sixsfred2::$8 // reg byte a 2000002.0
__constant char * const mode_sixsfred2::COLORS = (char *) 32768
__constant char * const mode_sixsfred2::PLANEA = (char *) 16384
__constant char * const mode_sixsfred2::PLANEB = (char *) 24576
char mode_sixsfred2::ax
char mode_sixsfred2::ax#1 // reg byte x 1500001.5
char mode_sixsfred2::ax#2 // reg byte x 400000.4
char mode_sixsfred2::ay
char mode_sixsfred2::ay#1 // ay zp[1]:31 150001.5
char mode_sixsfred2::ay#4 // ay zp[1]:31 150000.375
char mode_sixsfred2::bx
char mode_sixsfred2::bx#1 // reg byte x 1500001.5
char mode_sixsfred2::bx#2 // reg byte x 666667.3333333334
char mode_sixsfred2::by
char mode_sixsfred2::by#1 // by zp[1]:39 150001.5
char mode_sixsfred2::by#4 // by zp[1]:39 33333.666666666664
char *mode_sixsfred2::col
char *mode_sixsfred2::col#1 // col zp[2]:10 420000.60000000003
char *mode_sixsfred2::col#2 // col zp[2]:10 516667.3333333334
char *mode_sixsfred2::col#3 // col zp[2]:10 200002.0
char mode_sixsfred2::cx
char mode_sixsfred2::cx#1 // reg byte x 1500001.5
char mode_sixsfred2::cx#2 // reg byte x 428571.85714285716
char mode_sixsfred2::cy
char mode_sixsfred2::cy#1 // cy zp[1]:32 150001.5
char mode_sixsfred2::cy#4 // cy zp[1]:32 120000.30000000002
char *mode_sixsfred2::gfxa
char *mode_sixsfred2::gfxa#1 // gfxa zp[2]:14 420000.60000000003
char *mode_sixsfred2::gfxa#2 // gfxa zp[2]:14 775001.0
char *mode_sixsfred2::gfxa#3 // gfxa zp[2]:14 200002.0
char *mode_sixsfred2::gfxb
char *mode_sixsfred2::gfxb#1 // gfxb zp[2]:8 420000.60000000003
char *mode_sixsfred2::gfxb#2 // gfxb zp[2]:8 1550002.0
char *mode_sixsfred2::gfxb#3 // gfxb zp[2]:8 200002.0
char mode_sixsfred2::i
char mode_sixsfred2::i#1 // reg byte x 150001.5
char mode_sixsfred2::i#2 // reg byte x 200002.0
char mode_sixsfred2::row
char mode_sixsfred2::row#0 // reg byte a 2000002.0
__constant char mode_sixsfred2::row_bitmask[] = { 0, $55, $aa, $ff }
void mode_stdbitmap()
char mode_stdbitmap::$4 // reg byte a 2000002.0
char mode_stdbitmap::$7 // reg byte a 2000002.0
char mode_stdbitmap::$8 // reg byte a 2000002.0
__constant char * const mode_stdbitmap::BITMAP = (char *) 24576
__constant char * const mode_stdbitmap::SCREEN = (char *) 16384
char *mode_stdbitmap::ch
char *mode_stdbitmap::ch#1 // ch zp[2]:29 420000.60000000003
char *mode_stdbitmap::ch#2 // ch zp[2]:29 442857.7142857142
char *mode_stdbitmap::ch#3 // ch zp[2]:29 200002.0
char mode_stdbitmap::col
char mode_stdbitmap::col#0 // reg byte y 1500001.5
char mode_stdbitmap::col2
char mode_stdbitmap::col2#0 // col2 zp[1]:16 1000001.0
char mode_stdbitmap::cx
char mode_stdbitmap::cx#1 // reg byte x 1500001.5
char mode_stdbitmap::cx#2 // reg byte x 375000.375
char mode_stdbitmap::cy
char mode_stdbitmap::cy#1 // cy zp[1]:33 150001.5
char mode_stdbitmap::cy#4 // cy zp[1]:33 109091.18181818182
char mode_stdbitmap::i
char mode_stdbitmap::i#1 // reg byte x 150001.5
char mode_stdbitmap::i#2 // reg byte x 200002.0
char mode_stdbitmap::l
char mode_stdbitmap::l#1 // l zp[1]:32 200002.0
char mode_stdbitmap::l#2 // l zp[1]:32 100001.0
__constant char mode_stdbitmap::lines_cnt = 9
__constant char mode_stdbitmap::lines_x[] = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
__constant char mode_stdbitmap::lines_y[] = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void mode_stdchar()
char mode_stdchar::$2 // reg byte a 2000002.0
char mode_stdchar::$3 // reg byte a 2000002.0
char mode_stdchar::$4 // reg byte a 2000002.0
char mode_stdchar::$5 // zp[1]:31 1000001.0
char mode_stdchar::$6 // reg byte a 2000002.0
char mode_stdchar::$7 // reg byte a 2000002.0
__constant char * const mode_stdchar::CHARSET = (char *) 36864
__constant char * const mode_stdchar::COLORS = (char *) 55296
__constant char * const mode_stdchar::SCREEN = (char *) 32768
char *mode_stdchar::ch
char *mode_stdchar::ch#1 // ch zp[2]:10 420000.60000000003
char *mode_stdchar::ch#2 // ch zp[2]:10 310000.4
char *mode_stdchar::ch#3 // ch zp[2]:10 200002.0
char *mode_stdchar::col
char *mode_stdchar::col#1 // col zp[2]:29 190909.36363636365
char *mode_stdchar::col#2 // col zp[2]:29 775001.0
char *mode_stdchar::col#3 // col zp[2]:29 200002.0
char mode_stdchar::cx
char mode_stdchar::cx#1 // reg byte x 1500001.5
char mode_stdchar::cx#2 // reg byte x 363636.7272727273
char mode_stdchar::cy
char mode_stdchar::cy#1 // cy zp[1]:32 150001.5
char mode_stdchar::cy#4 // cy zp[1]:32 157143.14285714284
char mode_stdchar::i
char mode_stdchar::i#1 // reg byte x 150001.5
char mode_stdchar::i#2 // reg byte x 200002.0
void mode_twoplanebitmap()
char mode_twoplanebitmap::$2 // reg byte a 2000002.0
char mode_twoplanebitmap::$3 // zp[1]:28 1000001.0
char mode_twoplanebitmap::$4 // reg byte a 2000002.0
char mode_twoplanebitmap::$5 // reg byte a 2000002.0
char mode_twoplanebitmap::$8 // reg byte a 2000002.0
__constant char * const mode_twoplanebitmap::COLORS = (char *) 32768
__constant char * const mode_twoplanebitmap::PLANEA = (char *) 16384
__constant char * const mode_twoplanebitmap::PLANEB = (char *) 24576
char mode_twoplanebitmap::ax
char mode_twoplanebitmap::ax#1 // reg byte x 1500001.5
char mode_twoplanebitmap::ax#2 // reg byte x 250000.25
char mode_twoplanebitmap::ay
char mode_twoplanebitmap::ay#1 // ay zp[1]:34 150001.5
char mode_twoplanebitmap::ay#5 // ay zp[1]:34 109091.18181818182
char mode_twoplanebitmap::bx
char mode_twoplanebitmap::bx#1 // reg byte x 1500001.5
char mode_twoplanebitmap::bx#2 // reg byte x 666667.3333333334
char mode_twoplanebitmap::by
char mode_twoplanebitmap::by#1 // by zp[1]:40 150001.5
char mode_twoplanebitmap::by#4 // by zp[1]:40 33333.666666666664
char *mode_twoplanebitmap::col
char *mode_twoplanebitmap::col#1 // col zp[2]:14 420000.60000000003
char *mode_twoplanebitmap::col#2 // col zp[2]:14 516667.3333333334
char *mode_twoplanebitmap::col#3 // col zp[2]:14 200002.0
char mode_twoplanebitmap::cx
char mode_twoplanebitmap::cx#1 // reg byte x 1500001.5
char mode_twoplanebitmap::cx#2 // reg byte x 428571.85714285716
char mode_twoplanebitmap::cy
char mode_twoplanebitmap::cy#1 // cy zp[1]:32 150001.5
char mode_twoplanebitmap::cy#4 // cy zp[1]:32 120000.30000000002
char *mode_twoplanebitmap::gfxa
char *mode_twoplanebitmap::gfxa#1 // gfxa zp[2]:8 2000002.0
char *mode_twoplanebitmap::gfxa#2 // gfxa zp[2]:8 2000002.0
char *mode_twoplanebitmap::gfxa#3 // gfxa zp[2]:8 1020001.2
char *mode_twoplanebitmap::gfxa#6 // gfxa zp[2]:8 620000.8
char *mode_twoplanebitmap::gfxa#7 // gfxa zp[2]:8 200002.0
char *mode_twoplanebitmap::gfxb
char *mode_twoplanebitmap::gfxb#1 // gfxb zp[2]:10 420000.60000000003
char *mode_twoplanebitmap::gfxb#2 // gfxb zp[2]:10 1550002.0
char *mode_twoplanebitmap::gfxb#3 // gfxb zp[2]:10 200002.0
char mode_twoplanebitmap::i
char mode_twoplanebitmap::i#1 // reg byte x 150001.5
char mode_twoplanebitmap::i#2 // reg byte x 200002.0
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 1.1000002E7
char *print_char_cursor
char *print_char_cursor#103 // print_char_cursor zp[2]:10 200002.0
char *print_char_cursor#2 // print_char_cursor zp[2]:10 100001.0
char *print_char_cursor#26 // print_char_cursor zp[2]:10 3666667.333333333
char *print_char_cursor#37 // print_char_cursor zp[2]:10 3683334.1666666665
char *print_char_cursor#38 // print_char_cursor zp[2]:10 1.4328571485714287E8
void print_cls()
char *print_line_cursor
char *print_line_cursor#1 // print_line_cursor zp[2]:14 91666.83333333334
char *print_line_cursor#19 // print_line_cursor zp[2]:14 2.001000003E9
char *print_line_cursor#2 // print_line_cursor zp[2]:14 6.00040001E8
void print_ln()
char *print_screen
void print_str_lines(char *str)
char print_str_lines::ch
char print_str_lines::ch#0 // reg byte a 666667.3333333334
char *print_str_lines::str
char *print_str_lines::str#0 // str zp[2]:29 233333.66666666666
char *print_str_lines::str#2 // str zp[2]:29 150001.5
char *print_str_lines::str#3 // str zp[2]:29 1550002.0
unsigned int sgn_u16(unsigned int w)
char sgn_u16::$0 // reg byte a 2.0000002E7
char sgn_u16::$1 // reg byte a 2.0000002E7
unsigned int sgn_u16::return
unsigned int sgn_u16::return#0 // return zp[2]:17 2000002.0
unsigned int sgn_u16::return#1 // return zp[2]:17 2000002.0
unsigned int sgn_u16::return#4 // return zp[2]:17 500000.5
unsigned int sgn_u16::w
unsigned int sgn_u16::w#0 // w zp[2]:2 2000002.0
unsigned int sgn_u16::w#1 // w zp[2]:2 2000002.0
unsigned int sgn_u16::w#2 // w zp[2]:2 1.2000003E7

zp[2]:47 [ bitmap_gfx#14 bitmap_gfx#15 ]
zp[2]:49 [ bitmap_screen#14 bitmap_screen#15 ]
reg byte x [ menu::i#2 menu::i#1 ]
zp[2]:45 [ menu::c#2 menu::c#1 ]
reg byte y [ keyboard_key_pressed::key#20 ]
reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ]
reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ]
reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
zp[1]:33 [ mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 ]
reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
zp[1]:35 [ mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 ]
reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
zp[1]:36 [ mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 ]
reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
zp[1]:37 [ mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 ]
reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
zp[2]:29 [ mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
zp[1]:39 [ mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
zp[1]:34 [ mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 ]
reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
zp[1]:40 [ mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 ]
reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
zp[1]:41 [ mode_sixsfred::by#4 mode_sixsfred::by#1 ]
reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
zp[1]:32 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ]
reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
zp[1]:42 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 ]
reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
zp[1]:38 [ mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 ]
reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
zp[2]:43 [ memset::num#3 ]
zp[2]:51 [ memset::str#4 ]
reg byte x [ memset::c#5 ]
reg byte x [ dtv_control#116 dtv_control#146 dtv_control#16 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:8 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
zp[2]:10 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
zp[2]:14 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::dst#2 memset::dst#4 memset::dst#1 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 ]
zp[2]:17 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
reg byte x [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$5 ]
reg byte a [ keyboard_key_pressed::return#24 ]
reg byte a [ menu::$9 ]
reg byte a [ keyboard_key_pressed::return#25 ]
reg byte a [ menu::$13 ]
reg byte a [ keyboard_key_pressed::return#26 ]
reg byte a [ menu::$17 ]
reg byte a [ keyboard_key_pressed::return#27 ]
reg byte a [ menu::$21 ]
reg byte a [ keyboard_key_pressed::return#28 ]
reg byte a [ menu::$25 ]
reg byte a [ keyboard_key_pressed::return#29 ]
reg byte a [ menu::$29 ]
reg byte a [ keyboard_key_pressed::return#30 ]
reg byte a [ menu::$33 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ menu::$37 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ menu::$41 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ menu::$45 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ menu::$49 ]
reg byte a [ print_str_lines::ch#0 ]
reg byte a [ print_char::ch#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte y [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ mode_stdchar::$2 ]
reg byte a [ mode_stdchar::$3 ]
reg byte a [ mode_stdchar::$4 ]
zp[1]:31 [ mode_stdchar::$5 mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 ]
reg byte a [ mode_stdchar::$6 ]
reg byte a [ mode_stdchar::$7 ]
reg byte a [ mode_ecmchar::$2 ]
reg byte a [ mode_ecmchar::$3 ]
reg byte a [ mode_ecmchar::$4 ]
reg byte a [ mode_ecmchar::$6 ]
reg byte a [ mode_ecmchar::$7 ]
reg byte a [ mode_mcchar::$2 ]
reg byte a [ mode_mcchar::$3 ]
reg byte a [ mode_mcchar::$4 ]
reg byte a [ mode_mcchar::$6 ]
reg byte a [ mode_mcchar::$7 ]
reg byte a [ mode_stdbitmap::$4 ]
reg byte y [ mode_stdbitmap::col#0 ]
reg byte a [ mode_stdbitmap::$7 ]
reg byte a [ mode_stdbitmap::$8 ]
zp[2]:26 [ bitmap_line::x2#0 ]
zp[2]:24 [ bitmap_line::y2#0 ]
reg byte a [ mode_hicolstdchar::$2 ]
reg byte a [ mode_hicolstdchar::$4 ]
reg byte a [ mode_hicolstdchar::v#0 ]
reg byte a [ mode_hicolecmchar::$2 ]
reg byte a [ mode_hicolecmchar::$4 ]
reg byte a [ mode_hicolecmchar::v#0 ]
reg byte a [ mode_hicolmcchar::$2 ]
zp[1]:16 [ mode_hicolmcchar::$3 mode_hicolecmchar::$3 mode_ecmchar::$5 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 mode_stdbitmap::col2#0 mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
reg byte a [ mode_hicolmcchar::$4 ]
reg byte a [ mode_hicolmcchar::v#0 ]
reg byte a [ mode_sixsfred2::$2 ]
reg byte a [ mode_sixsfred2::$4 ]
reg byte a [ mode_sixsfred2::$5 ]
reg byte a [ mode_sixsfred2::$8 ]
reg byte a [ mode_sixsfred2::row#0 ]
reg byte a [ mode_twoplanebitmap::$2 ]
zp[1]:28 [ mode_twoplanebitmap::$3 mode_sixsfred2::$3 mode_mcchar::$5 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
reg byte a [ mode_twoplanebitmap::$4 ]
reg byte a [ mode_twoplanebitmap::$5 ]
reg byte a [ mode_twoplanebitmap::$8 ]
reg byte a [ mode_sixsfred::$2 ]
reg byte a [ mode_sixsfred::$3 ]
reg byte a [ mode_sixsfred::$6 ]
reg byte a [ mode_sixsfred::row#0 ]
reg byte a [ mode_8bpppixelcell::$2 ]
reg byte a [ mode_8bpppixelcell::$4 ]
reg byte a [ mode_8bpppixelcell::$5 ]
reg byte a [ mode_8bpppixelcell::$8 ]
zp[2]:12 [ mode_8bppchunkybmm::$7 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
reg byte a [ mode_8bppchunkybmm::c#0 ]
zp[2]:6 [ memset::end#0 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ mode_ctrl::$1 ]
reg byte a [ keyboard_key_pressed::return#15 ]
reg byte a [ mode_ctrl::$4 ]
reg byte a [ keyboard_key_pressed::return#16 ]
reg byte a [ mode_ctrl::$8 ]
reg byte a [ keyboard_key_pressed::return#17 ]
reg byte a [ mode_ctrl::$12 ]
reg byte a [ keyboard_key_pressed::return#18 ]
reg byte a [ mode_ctrl::$16 ]
reg byte a [ keyboard_key_pressed::return#19 ]
reg byte a [ mode_ctrl::$20 ]
reg byte a [ keyboard_key_pressed::return#20 ]
reg byte a [ mode_ctrl::$24 ]
reg byte a [ keyboard_key_pressed::return#21 ]
reg byte a [ mode_ctrl::$28 ]
zp[1]:23 [ bitmap_init::$7 mode_8bpppixelcell::$3 mode_hicolstdchar::$3 keyboard_key_pressed::colidx#0 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[2]:19 [ bitmap_line::dx#0 ]
zp[2]:21 [ bitmap_line::sx#0 ]
reg byte a [ abs_u16::$0 ]
reg byte a [ abs_u16::$1 ]
reg byte a [ sgn_u16::$0 ]
reg byte a [ sgn_u16::$1 ]
zp[2]:2 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
zp[2]:4 [ bitmap_plot::$1 ]
reg byte x [ bitmap_plot::$2 ]
