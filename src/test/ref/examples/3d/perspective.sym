(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const signed byte*) PERSP_Z[(number) $100]  = kickasm {{ {
    .var d = 256.0	
    .var z0 = 5.0	
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) do_perspective((signed byte) do_perspective::x , (signed byte) do_perspective::y , (signed byte) do_perspective::z)
(label) do_perspective::@1
(label) do_perspective::@10
(label) do_perspective::@11
(label) do_perspective::@12
(label) do_perspective::@2
(label) do_perspective::@3
(label) do_perspective::@4
(label) do_perspective::@5
(label) do_perspective::@6
(label) do_perspective::@7
(label) do_perspective::@8
(label) do_perspective::@9
(label) do_perspective::@return
(const byte*) do_perspective::str[(byte) 2]  = (byte*) "("
(const byte*) do_perspective::str1[(byte) 2]  = (byte*) ","
(const byte*) do_perspective::str3[(byte) 7]  = (byte*) ") -> ("
(const byte*) do_perspective::str5[(byte) 2]  = (byte*) ")"
(signed byte) do_perspective::x
(const signed byte) do_perspective::x#0 x = (signed byte) $39
(signed byte) do_perspective::y
(const signed byte) do_perspective::y#0 y = (signed byte) -$47
(signed byte) do_perspective::z
(const signed byte) do_perspective::z#0 z = (signed byte) $36
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 2002.0
(byte*) memset::dst#2 dst zp[2]:4 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(void()) mulf_init()
(byte~) mulf_init::$2 reg byte x 151.5
(byte~) mulf_init::$5 reg byte x 202.0
(byte~) mulf_init::$6 reg byte x 202.0
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#1 add zp[2]:4 67.33333333333333
(signed word) mulf_init::add#2 add zp[2]:4 21.642857142857142
(byte) mulf_init::i
(byte) mulf_init::i#1 reg byte y 151.5
(byte) mulf_init::i#2 reg byte y 60.6
(signed word) mulf_init::sqr
(signed word) mulf_init::sqr#1 sqr zp[2]:2 50.5
(signed word) mulf_init::sqr#2 sqr zp[2]:2 23.307692307692307
(byte) mulf_init::val
(byte) mulf_init::val#0 val zp[1]:6 82.63636363636364
(const byte*) mulf_sqr1[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2[(number) $200]  = { fill( $200, 0) }
(void()) perspective((signed byte) perspective::x , (signed byte) perspective::y , (signed byte) perspective::z)
(label) perspective::@return
(signed byte) perspective::x
(signed byte) perspective::y
(signed byte) perspective::z
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2002.0
(byte) print_char::ch#3 reg byte a 2002.0
(byte) print_char::ch#4 reg byte a 2002.0
(byte) print_char::ch#5 reg byte a 13004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:4 128.0
(byte*) print_char_cursor#11 print_char_cursor zp[2]:4 467.6538461538461
(byte*) print_char_cursor#45 print_char_cursor zp[2]:4 11603.5
(byte*) print_char_cursor#72 print_char_cursor zp[2]:4 374.66666666666674
(byte*) print_char_cursor#77 print_char_cursor zp[2]:4 156.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:2 1501.5
(byte*) print_line_cursor#12 print_line_cursor zp[2]:2 2002.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 reg byte x 202.0
(signed byte) print_schar::b#4 reg byte x 50.5
(signed byte) print_schar::b#6 reg byte x 202.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:2 2002.0
(byte*) print_str::str#10 str zp[2]:2 101.0
(byte*) print_str::str#7 str zp[2]:2 1026.25
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2002.0
(byte~) print_uchar::$2 reg byte x 2002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 202.0
(byte) print_uchar::b#3 reg byte x 531.25
(byte) print_uchar::b#5 reg byte x 22.0
(byte) print_uchar::b#6 reg byte x 22.0
(const word*) psp1 = (word*) 243
(const word*) psp2 = (word*) 245
(const signed byte*) xr = (signed byte*) 240
(const signed byte*) yr = (signed byte*) 241
(const signed byte*) zr = (signed byte*) 242

reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
reg byte x [ print_uchar::b#3 print_uchar::b#5 print_uchar::b#6 print_uchar::b#0 ]
reg byte x [ print_schar::b#6 print_schar::b#0 print_schar::b#4 ]
zp[2]:2 [ mulf_init::sqr#2 mulf_init::sqr#1 print_str::str#7 print_str::str#10 print_str::str#0 print_line_cursor#12 print_line_cursor#0 ]
reg byte y [ mulf_init::i#2 mulf_init::i#1 ]
zp[2]:4 [ mulf_init::add#2 mulf_init::add#1 memset::dst#2 memset::dst#1 print_char_cursor#45 print_char_cursor#1 print_char_cursor#77 print_char_cursor#11 print_char_cursor#72 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[1]:6 [ mulf_init::val#0 ]
reg byte x [ mulf_init::$2 ]
reg byte x [ mulf_init::$5 ]
reg byte x [ mulf_init::$6 ]
