@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) VIC_MEMORY#0) ← (byte) $14
  [5] *((const byte*) BGCOL#0) ← (byte) $f
  [6] call memset 
  to:main::@6
main::@6: scope:[main]  from main
  [7] phi()
  [8] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@6
  [9] (byte*) main::sc#2 ← phi( main::@6/(const byte*) SCREEN#0+(byte) $28 main::@2/(byte*) main::sc#1 )
  [9] (byte*) main::msg#2 ← phi( main::@6/(const byte[]) MESSAGE#0 main::@2/(byte*) main::msg#1 )
  [10] if((byte) 0!=*((byte*) main::msg#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4 main::@5
  [11] if(*((const byte*) RASTER#0)==(byte) $36) goto main::@4
  to:main::@7
main::@7: scope:[main]  from main::@3
  [12] if(*((const byte*) RASTER#0)==(byte) $42) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@7
  [13] *((const byte*) BGCOL#0) ← (const byte) BLACK#0
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@7
  [14] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  to:main::@3
main::@2: scope:[main]  from main::@1
  [15] *((byte*) main::sc#2) ← *((byte*) main::msg#2)
  [16] (byte*) main::sc#1 ← ++ (byte*) main::sc#2
  [17] (byte*) main::msg#1 ← ++ (byte*) main::msg#2
  to:main::@1
memset: scope:[memset]  from main main::@6
  [18] (byte) memset::c#4 ← phi( main/(byte) ' ' main::@6/(const byte) WHITE#0 )
  [18] (void*) memset::str#3 ← phi( main/(void*)(const byte*) SCREEN#0 main::@6/(void*)(const byte*) COLS#0 )
  [18] (word) memset::num#2 ← phi( main/(word)(number) $28*(number) $19 main::@6/(word)(number) $28*(number) $19 )
  [19] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [20] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [21] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [22] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [23] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [24] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [25] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [26] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
syscall2: scope:[syscall2]  from
  [27] *((const byte*) syscall2::BGCOL#0) ← ++ *((const byte*) syscall2::BGCOL#0)
  to:syscall2::@return
syscall2::@return: scope:[syscall2]  from syscall2
  [28] return 
  to:@return
syscall1: scope:[syscall1]  from
  [29] *((const byte*) syscall1::BORDERCOL#0) ← ++ *((const byte*) syscall1::BORDERCOL#0)
  to:syscall1::@return
syscall1::@return: scope:[syscall1]  from syscall1
  [30] return 
  to:@return
