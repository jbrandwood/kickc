Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (number) $400
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@4
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#3 main::@4/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (bool~) main::$0 ← (byte) main::i#1 < (number) $28*(number) 6
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#1 )
  (bool~) main::$1 ← *((byte*) SCREEN + (byte) main::i#3) == (byte) ' '
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@4
  to:main::@1
main::@4: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  *((byte*) SCREEN + (byte) main::i#4) ← ++ *((byte*) SCREEN + (byte) main::i#4)
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) $28*6 in (bool~) main::$0 ← (byte) main::i#1 < (number) $28*(number) 6
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN ← (byte*)(number) $400
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [8] (bool~) main::$2 ← *((byte*) SCREEN + (byte) main::i#3) != (byte) ' ' from [7] (bool~) main::$1 ← *((byte*) SCREEN + (byte) main::i#3) == (byte) ' '
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::i#1 = (byte) main::i#3 (byte) main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [5] if((byte) main::i#1<(byte)(number) $28*(number) 6) goto main::@2
Simple Condition (bool~) main::$2 [9] if(*((byte*) SCREEN + (byte) main::i#1)!=(byte) ' ') goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [9] if(*((byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant (const byte*) SCREEN = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@10(between main::@2 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [12] main::i#6 ← main::i#1
Coalesced (already) [13] main::i#5 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@10
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 main::@3/(byte) main::i#1 )
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] if((byte) main::i#1<(byte)(number) $28*(number) 6) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] *((const byte*) SCREEN + (byte) main::i#1) ← ++ *((const byte*) SCREEN + (byte) main::i#1)
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 109.25
(byte) main::i#2 213.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] if((byte) main::i#1<(byte)(number) $28*(number) 6) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$28*6
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1 -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z i
    lda SCREEN,y
    cmp #' '
    beq __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [10] *((const byte*) SCREEN + (byte) main::i#1) ← ++ *((const byte*) SCREEN + (byte) main::i#1) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z i
    inc SCREEN,x
    jmp __b1_from___b3
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 322.25: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 3068 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 3068 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if((byte) main::i#1<(byte)(number) $28*(number) 6) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28*6
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // main::@2
  __b2:
    // [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [10] *((const byte*) SCREEN + (byte) main::i#1) ← ++ *((const byte*) SCREEN + (byte) main::i#1) -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    jmp __b1_from___b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 109.25
(byte) main::i#2 reg byte x 213.0

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 1856

  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // while(++i<40*6)
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if((byte) main::i#1<(byte)(number) $28*(number) 6) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28*6
    bcc __b2
    // main::@return
    // }
    // [8] return 
    rts
    // main::@2
  __b2:
    // if(SCREEN[i]==' ')
    // [9] if(*((const byte*) SCREEN + (byte) main::i#1)==(byte) ' ') goto main::@1 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda SCREEN,x
    cmp #' '
    beq __b1
    // main::@3
    // SCREEN[i]++;
    // [10] *((const byte*) SCREEN + (byte) main::i#1) ← ++ *((const byte*) SCREEN + (byte) main::i#1) -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc SCREEN,x
    jmp __b1
}
  // File Data

