@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile word) last_time ← (word) 0
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(signed word()) main()
main: scope:[main]  from @2
  [5] phi()
  [6] call start 
  to:main::@1
main::@1: scope:[main]  from main
  [7] phi()
  [8] call round 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [9] phi()
  [10] call round 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [11] phi()
  [12] call round 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [13] phi()
  [14] call round 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [15] phi()
  [16] call round 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [17] phi()
  [18] call round 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [19] phi()
  [20] call round 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [21] phi()
  [22] call round 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [23] phi()
  [24] call round 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [25] phi()
  [26] call round 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [27] phi()
  [28] call end 
  to:main::@return
main::@return: scope:[main]  from main::@11
  [29] return 
  to:@return

(void()) end()
end: scope:[end]  from main::@11
  [30] (word) Ticks#1 ← (volatile word) last_time
  [31] call start 
  to:end::@1
end::@1: scope:[end]  from end
  [32] (volatile word) last_time ← (volatile word) last_time - (word) Ticks#1
  [33] (word) Ticks#12 ← (volatile word) last_time
  [34] (word) print_uint::w#0 ← (word) Ticks#12
  [35] call print_uint 
  to:end::@2
end::@2: scope:[end]  from end::@1
  [36] phi()
  [37] call print_ln 
  to:end::@return
end::@return: scope:[end]  from end::@2
  [38] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from end::@2
  [39] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [40] (byte*) print_line_cursor#8 ← phi( print_ln/(byte*) 1024 print_ln::@1/(byte*) print_line_cursor#1 )
  [41] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#8 + (byte) $28
  [42] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#10) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [43] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from end::@1
  [44] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [45] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [46] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [47] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [48] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [49] (byte*) print_char_cursor#35 ← phi( print_uint/(byte*) 1024 print_uint::@1/(byte*) print_char_cursor#10 )
  [49] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [50] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [51] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [52] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [53] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [54] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [55] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [56] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [57] (byte*) print_char_cursor#25 ← phi( print_uchar/(byte*) print_char_cursor#35 print_uchar::@1/(byte*) print_char_cursor#10 )
  [57] (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [58] *((byte*) print_char_cursor#25) ← (byte) print_char::ch#2
  [59] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#25
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [60] return 
  to:@return

(void()) start()
start: scope:[start]  from end main
  asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
  to:start::@return
start::@return: scope:[start]  from start
  [62] return 
  to:@return

(void()) round()
round: scope:[round]  from main::@1 main::@10 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [63] phi()
  to:round::@1
round::@1: scope:[round]  from round round::@2
  [64] (byte*) round::p#2 ← phi( round/(const byte*) Sieve round::@2/(byte*) round::p#1 )
  [65] if((byte*) round::p#2<(const byte*) Sieve+(const nomodify word) COUNT) goto round::@2
  to:round::@3
round::@3: scope:[round]  from round::@1 round::@5
  [66] (byte) round::I#3 ← phi( round::@5/(byte) round::I#2 round::@1/(byte) 2 )
  [67] if((byte) round::I#3<(const nomodify byte) SQRT_COUNT) goto round::@4
  to:round::@return
round::@return: scope:[round]  from round::@3
  [68] return 
  to:@return
round::@4: scope:[round]  from round::@3
  [69] if(*((const byte*) Sieve + (byte) round::I#3)!=(byte) 0) goto round::@5
  to:round::@8
round::@8: scope:[round]  from round::@4
  [70] (byte~) round::$4 ← (byte) round::I#3 << (byte) 1
  [71] (byte*) round::S#1 ← (const byte*) Sieve + (byte~) round::$4
  to:round::@6
round::@6: scope:[round]  from round::@7 round::@8
  [72] (byte*) round::S#3 ← phi( round::@7/(byte*) round::S#2 round::@8/(byte*) round::S#1 )
  [73] if((byte*) round::S#3<(const byte*) Sieve+(const nomodify word) COUNT) goto round::@7
  to:round::@5
round::@5: scope:[round]  from round::@4 round::@6
  [74] (byte) round::I#2 ← ++ (byte) round::I#3
  to:round::@3
round::@7: scope:[round]  from round::@6
  [75] *((byte*) round::S#3) ← (byte) 1
  [76] (byte*) round::S#2 ← (byte*) round::S#3 + (byte) round::I#3
  to:round::@6
round::@2: scope:[round]  from round::@1
  [77] *((byte*) round::p#2) ← (byte) 0
  [78] (byte*) round::p#1 ← ++ (byte*) round::p#2
  to:round::@1
