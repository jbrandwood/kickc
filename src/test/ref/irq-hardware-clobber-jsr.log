Resolved forward reference irq to __interrupt(hardware_clobber) void irq()
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { sei  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  *VIC_CONTROL = *VIC_CONTROL | $80
  *RASTER = 0
  *IRQ_ENABLE = IRQ_RASTER
  *HARDWARE_IRQ = &irq
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *BORDER_COLOR = ++ *BORDER_COLOR
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  call do_irq 
  to:irq::@1
irq::@1: scope:[irq]  from irq
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  return 
  to:@return

void do_irq()
do_irq: scope:[do_irq]  from irq
  *BG_COLOR = WHITE
  *BG_COLOR = BLACK
  *IRQ_STATUS = IRQ_RASTER
  to:do_irq::@return
do_irq::@return: scope:[do_irq]  from do_irq
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d021
const nomodify byte BLACK = 0
const nomodify byte* BORDER_COLOR = (byte*)$d020
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify void()** HARDWARE_IRQ = (void()**)$fffe
const nomodify byte* IRQ_ENABLE = (byte*)$d01a
const nomodify byte IRQ_RASTER = 1
const nomodify byte* IRQ_STATUS = (byte*)$d019
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte* PROCPORT_DDR = (byte*)0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const nomodify byte* RASTER = (byte*)$d012
const nomodify byte* VIC_CONTROL = (byte*)$d011
const nomodify byte WHITE = 1
void __start()
void do_irq()
__interrupt(hardware_clobber) void irq()
void main()

Adding number conversion cast (unumber) $80 in *VIC_CONTROL = *VIC_CONTROL | $80
Adding number conversion cast (unumber) 0 in *RASTER = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *RASTER = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (void()**) 65534
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
if() condition always true - replacing block destination [9] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of irq
Adding NOP phi() at start of irq::@1
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [irq] to do_irq:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label irq::@1
Culled Empty Block label main::@1
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of irq

FINAL CONTROL FLOW GRAPH

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  [0] phi()
  [1] call do_irq 
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [2] return 
  to:@return

void main()
main: scope:[main]  from
  asm { sei  }
  [4] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [5] *PROCPORT = PROCPORT_RAM_IO
  [6] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [7] *VIC_CONTROL = *VIC_CONTROL | $80
  [8] *RASTER = 0
  [9] *IRQ_ENABLE = IRQ_RASTER
  [10] *HARDWARE_IRQ = &irq
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [12] *BORDER_COLOR = ++ *BORDER_COLOR
  to:main::@1

void do_irq()
do_irq: scope:[do_irq]  from irq
  [13] *BG_COLOR = WHITE
  [14] *BG_COLOR = BLACK
  [15] *IRQ_STATUS = IRQ_RASTER
  to:do_irq::@return
do_irq::@return: scope:[do_irq]  from do_irq
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void do_irq()
__interrupt(hardware_clobber) void irq()
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [4] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *PROCPORT = PROCPORT_RAM_IO [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *VIC_CONTROL = *VIC_CONTROL | $80 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *RASTER = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *IRQ_ENABLE = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *HARDWARE_IRQ = &irq [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] *BG_COLOR = WHITE [ ] ( do_irq:1 [ ] { }  ) always clobbers reg byte a 
Statement [14] *BG_COLOR = BLACK [ ] ( do_irq:1 [ ] { }  ) always clobbers reg byte a 
Statement [15] *IRQ_STATUS = IRQ_RASTER [ ] ( do_irq:1 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [do_irq] 
Uplift Scope [] 

Uplifting [MOS6526_CIA] best 425 combination 
Uplifting [MOS6569_VICII] best 425 combination 
Uplifting [MOS6581_SID] best 425 combination 
Uplifting [main] best 425 combination 
Uplifting [irq] best 425 combination 
Uplifting [do_irq] best 425 combination 
Uplifting [] best 425 combination 
Interrupt procedure irq clobbers AnzPS

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A minimal working raster hardware IRQ with clobber-based register savings
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // irq
// Interrupt Routine
irq: {
    // interrupt(isr_hardware_cloba_entry) -- isr_hardware_cloba_entry 
    pha
    // [1] call do_irq 
    jsr do_irq
    jmp __breturn
    // irq::@return
  __breturn:
    // [2] return 
    // interrupt(isr_hardware_cloba_exit) -- isr_hardware_cloba_exit 
    pla
    rti
}
  // main
main: {
    // asm { sei  }
    sei
    // [4] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [5] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [6] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [7] *VIC_CONTROL = *VIC_CONTROL | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VIC_CONTROL
    sta VIC_CONTROL
    // [8] *RASTER = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // [9] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [10] *HARDWARE_IRQ = &irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __b1
    // main::@1
  __b1:
    // [12] *BORDER_COLOR = ++ *BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __b1
}
  // do_irq
do_irq: {
    // [13] *BG_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // [14] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [15] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // do_irq::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte BLACK = 0
const nomodify byte* BORDER_COLOR = (byte*) 53280
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify void()** HARDWARE_IRQ = (void()**) 65534
const nomodify byte* IRQ_ENABLE = (byte*) 53274
const nomodify byte IRQ_RASTER = 1
const nomodify byte* IRQ_STATUS = (byte*) 53273
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const nomodify byte* RASTER = (byte*) 53266
const nomodify byte* VIC_CONTROL = (byte*) 53265
const nomodify byte WHITE = 1
void do_irq()
__interrupt(hardware_clobber) void irq()
void main()



FINAL ASSEMBLER
Score: 306

  // File Comments
// A minimal working raster hardware IRQ with clobber-based register savings
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label RASTER = $d012
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // irq
// Interrupt Routine
irq: {
    // interrupt(isr_hardware_cloba_entry) -- isr_hardware_cloba_entry 
    pha
    // do_irq()
    // [1] call do_irq 
    jsr do_irq
    // irq::@return
    // }
    // [2] return 
    // interrupt(isr_hardware_cloba_exit) -- isr_hardware_cloba_exit 
    pla
    rti
}
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [4] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [5] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [6] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // *VIC_CONTROL |=$80
    // [7] *VIC_CONTROL = *VIC_CONTROL | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = $00
    // [8] *RASTER = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [9] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &irq
    // [10] *HARDWARE_IRQ = &irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // main::@1
  __b1:
    // (*BORDER_COLOR)++;
    // [12] *BORDER_COLOR = ++ *BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __b1
}
  // do_irq
do_irq: {
    // *BG_COLOR = WHITE
    // [13] *BG_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // *BG_COLOR = BLACK
    // [14] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // *IRQ_STATUS = IRQ_RASTER
    // [15] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // do_irq::@return
    // }
    // [16] return 
    rts
}
  // File Data

