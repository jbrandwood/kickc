
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) col1 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [5] *((const nomodify byte*) IRQ_STATUS) ← (byte) 1
  asm { lda$dc0d  }
  [7] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1
  [8] (volatile byte) col1 ← ++ (volatile byte) col1
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [9] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [10] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@5 main::@6
  [11] (byte) main::x#6 ← phi( main/(byte) 0 main::@6/(byte) main::x#1 main::@5/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [12] (byte) main::y#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::y#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [13] (byte) main::a#2 ← phi( main::@2/(byte) 0 main::@3/(byte) main::a#1 )
  [14] (byte~) main::$0 ← (byte) main::a#2 + (byte) main::y#4
  [15] *((const nomodify byte*) SCREEN + (byte) main::x#6) ← (byte~) main::$0
  [16] (byte) main::a#1 ← ++ (byte) main::a#2
  [17] if((byte) main::a#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [18] (byte) main::y#1 ← ++ (byte) main::y#4
  [19] if((byte) main::y#1!=(byte) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [20] (byte) main::x#1 ← ++ (byte) main::x#6
  [21] if((byte) main::x#1!=(byte) $b) goto main::@6
  to:main::@1
main::@6: scope:[main]  from main::@5
  [22] phi()
  to:main::@1
