@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)(const struct Point[2]) points#0) ← (byte) 1
  [5] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) 2
  [6] *((byte*)(const struct Point[2]) points#0+(byte) 1*(const byte) SIZEOF_STRUCT_POINT) ← (byte) 3
  [7] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y+(byte) 1*(const byte) SIZEOF_STRUCT_POINT) ← (byte) 4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [8] (byte) idx#12 ← phi( main/(byte) 0 main::@2/(byte) idx#10 )
  [8] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [9] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1
  [10] (byte) print::p_x#0 ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$4)
  [11] (byte) print::p_y#0 ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$4)
  [12] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [15] return 
  to:@return

(void()) print((byte) print::p_x , (byte) print::p_y)
print: scope:[print]  from main::@1
  [16] *((const byte*) SCREEN#0 + (byte) idx#12) ← (byte) print::p_x#0
  [17] (byte) idx#3 ← ++ (byte) idx#12
  [18] *((const byte*) SCREEN#0 + (byte) idx#3) ← (byte) print::p_y#0
  [19] (byte) idx#10 ← ++ (byte) idx#3
  to:print::@return
print::@return: scope:[print]  from print
  [20] return 
  to:@return
