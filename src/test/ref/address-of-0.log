Setting inferred volatile on symbol affected by address-of main::bp = &main::b

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::b = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::$0 = *main::bp + 1
  main::c#0 = main::$0
  main::SCREEN[main::b] = main::c#0
  main::b = main::b + rangenext(0,$a)
  main::$1 = main::b != rangelast(0,$a)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number~ main::$0
bool~ main::$1
const byte* main::SCREEN = (byte*)$400
volatile byte main::b loadstore
const byte* main::bp = &main::b
byte main::c
byte main::c#0

Adding number conversion cast (unumber) 1 in main::$0 = *main::bp + 1
Adding number conversion cast (unumber) main::$0 in main::$0 = *main::bp + (unumber)1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = *main::bp + 1
Alias main::c#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [5] if(main::b!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Resolved ranged next value [3] main::b = ++ main::b to ++
Resolved ranged comparison value [5] if(main::b!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [4] if(main::b!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::b = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::c#0 = *main::bp + 1
  [2] main::SCREEN[main::b] = main::c#0
  [3] main::b = ++ main::b
  [4] if(main::b!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
volatile byte main::b loadstore 9.200000000000001
byte main::c
byte main::c#0 22.0

Initial phi equivalence classes
Added variable main::b to live range equivalence class [ main::b ]
Added variable main::c#0 to live range equivalence class [ main::c#0 ]
Complete equivalence classes
[ main::b ]
[ main::c#0 ]
Allocated zp[1]:2 [ main::b ]
Allocated zp[1]:3 [ main::c#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::b = 0 [ main::b ] (  [ main::b ] { }  ) always clobbers reg byte a 
Statement [2] main::SCREEN[main::b] = main::c#0 [ main::b ] (  [ main::b ] { }  ) always clobbers reg byte y 
Statement [4] if(main::b!=$b) goto main::@1 [ main::b ] (  [ main::b ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::b ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::c#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:3 [ main::c#0 ] 9.2: zp[1]:2 [ main::b ] 
Uplift Scope [] 

Uplifting [main] best 319 combination reg byte a [ main::c#0 ] zp[1]:2 [ main::b ] 
Uplifting [] best 319 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::b ]
Uplifting [main] best 319 combination zp[1]:2 [ main::b ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test address-of - use the pointer to get the value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label bp = b
    .label b = 2
    // [0] main::b = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b1
    // main::@1
  __b1:
    // [1] main::c#0 = *main::bp + 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda.z bp
    clc
    adc #1
    // [2] main::SCREEN[main::b] = main::c#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z b
    sta SCREEN,y
    // [3] main::b = ++ main::b -- vbuz1=_inc_vbuz1 
    inc.z b
    // [4] if(main::b!=$b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z b
    bne __b1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::SCREEN = (byte*) 1024
volatile byte main::b loadstore zp[1]:2 9.200000000000001
const byte* main::bp = &main::b
byte main::c
byte main::c#0 reg byte a 22.0

zp[1]:2 [ main::b ]
reg byte a [ main::c#0 ]


FINAL ASSEMBLER
Score: 286

  // File Comments
// Test address-of - use the pointer to get the value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label bp = b
    .label b = 2
    // for( byte b: 0..10)
    // [0] main::b = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // main::@1
  __b1:
    // c = *bp +1
    // [1] main::c#0 = *main::bp + 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda.z bp
    clc
    adc #1
    // SCREEN[b] = c
    // [2] main::SCREEN[main::b] = main::c#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z b
    sta SCREEN,y
    // for( byte b: 0..10)
    // [3] main::b = ++ main::b -- vbuz1=_inc_vbuz1 
    inc.z b
    // [4] if(main::b!=$b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z b
    bne __b1
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

