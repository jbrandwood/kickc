
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] (byte) main::i#1 ← ++ (byte) main::i#2
  [3] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1
  [4] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1
  [5] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2)
  [6] call *((void()*) main::f#0) 
  to:main::@1

(void()) fn2()
fn2: scope:[fn2]  from
  [7] *((const nomodify byte*) fn2::BG_COLOR) ← ++ *((const nomodify byte*) fn2::BG_COLOR)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [8] return 
  to:@return

(void()) fn1()
fn1: scope:[fn1]  from
  [9] *((const nomodify byte*) fn1::BORDER_COLOR) ← ++ *((const nomodify byte*) fn1::BORDER_COLOR)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [10] return 
  to:@return
