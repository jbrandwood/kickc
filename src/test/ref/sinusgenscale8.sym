const nomodify word PI2_u4f12 = $6488
const nomodify word PI_HALF_u4f12 = $1922
const nomodify word PI_u4f12 = $3244
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
word div16u(word div16u::dividend , word div16u::divisor)
label div16u::@1
label div16u::@return
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 return zp[2]:14 37.33333333333333
word div16u::return#2 return zp[2]:14 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
label divr16u::@1
label divr16u::@2
label divr16u::@3
label divr16u::@4
label divr16u::@5
label divr16u::@return
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:12 2500.25
word divr16u::dividend#2 dividend zp[2]:12 4286.142857142857
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:14 15001.5
word divr16u::quotient#2 quotient zp[2]:14 10001.0
word divr16u::quotient#3 quotient zp[2]:14 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:10 7500.75
word divr16u::rem#1 rem zp[2]:10 20002.0
word divr16u::rem#2 rem zp[2]:10 20002.0
word divr16u::rem#4 rem zp[2]:10 20002.0
word divr16u::rem#5 rem zp[2]:10 10001.0
word divr16u::rem#9 rem zp[2]:10 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:14 6020.8
word divr16u::return#2 return zp[2]:14 202.0
void main()
label main::@1
label main::@return
const byte* main::sintab[$14]  = { fill( $14, 0) }
const word main::tabsize = $14
void* memset(void* memset::str , byte memset::c , word memset::num)
label memset::@1
label memset::@2
label memset::@return
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
signed word mul8su(signed byte mul8su::a , byte mul8su::b)
byte~ mul8su::$4 reg byte a 2002.0
byte~ mul8su::$6 reg byte a 2002.0
label mul8su::@1
label mul8su::@2
label mul8su::@3
label mul8su::@return
signed byte mul8su::a
signed byte mul8su::a#0 reg byte y 220.39999999999998
byte mul8su::b
const byte mul8su::b#0 b = sin8u_table::amplitude#0+1
word mul8su::m
word mul8su::m#0 m zp[2]:8 1001.0
word mul8su::m#1 m zp[2]:8 2002.0
word mul8su::m#2 m zp[2]:8 667.3333333333334
signed word mul8su::return
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
label mul8u::@1
label mul8u::@2
label mul8u::@3
label mul8u::@4
label mul8u::@return
byte mul8u::a
byte mul8u::a#0 reg byte x 1.0000001E7
byte mul8u::a#1 reg byte x 2002.0
byte mul8u::a#2 reg byte x 10001.0
byte mul8u::a#3 reg byte x 6683334.166666666
byte mul8u::a#6 reg byte x 55501.5
byte mul8u::b
byte mul8u::b#1 reg byte a 20002.0
byte mul8u::b#2 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:16 200002.0
word mul8u::mb#1 mb zp[2]:16 2.0000002E7
word mul8u::mb#2 mb zp[2]:16 4300000.571428571
word mul8u::res
word mul8u::res#1 res zp[2]:8 2.0000002E7
word mul8u::res#2 res zp[2]:8 4287286.428571429
word mul8u::res#6 res zp[2]:8 1.0000001E7
word mul8u::return
word mul8u::return#2 return zp[2]:8 2002.0
word mul8u::return#3 return zp[2]:8 20002.0
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 zp[2]:8 20002.0
word~ mulu8_sel::$1 zp[2]:8 20002.0
label mulu8_sel::@1
label mulu8_sel::@return
byte mulu8_sel::return
byte mulu8_sel::return#0 reg byte a 2002.0
byte mulu8_sel::return#1 reg byte a 2002.0
byte mulu8_sel::return#10 reg byte a 2002.0
byte mulu8_sel::return#11 reg byte a 2002.0
byte mulu8_sel::return#12 reg byte a 2143.714285714286
byte mulu8_sel::return#2 reg byte a 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 select zp[1]:19 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 reg byte x 1001.0
byte mulu8_sel::v1#1 reg byte x 1001.0
byte mulu8_sel::v1#2 reg byte x 2002.0
byte mulu8_sel::v1#3 reg byte x 1001.0
byte mulu8_sel::v1#4 reg byte x 1001.0
byte mulu8_sel::v1#5 reg byte x 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 reg byte y 2002.0
byte mulu8_sel::v2#1 reg byte y 2002.0
byte mulu8_sel::v2#3 reg byte y 2002.0
byte mulu8_sel::v2#4 reg byte y 2002.0
byte mulu8_sel::v2#5 reg byte y 7002.5
void print_char(byte print_char::ch)
label print_char::@return
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#5 reg byte a 200002.0
byte print_char::ch#6 reg byte a 200002.0
byte print_char::ch#7 reg byte a 1300004.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:16 7330.857142857143
byte* print_char_cursor#105 print_char_cursor zp[2]:16 5557.0
byte* print_char_cursor#106 print_char_cursor zp[2]:16 40383.0
byte* print_char_cursor#112 print_char_cursor zp[2]:16 1449.0
byte* print_char_cursor#119 print_char_cursor zp[2]:16 202.0
byte* print_char_cursor#18 print_char_cursor zp[2]:16 26782.73469387755
byte* print_char_cursor#67 print_char_cursor zp[2]:16 1152004.5
void print_cls()
label print_cls::@return
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:10 8113.648648648648
byte* print_line_cursor#13 print_line_cursor zp[2]:10 201003.0
byte* print_line_cursor#25 print_line_cursor zp[2]:10 1102.0
void print_ln()
label print_ln::@1
label print_ln::@return
void print_schar(signed byte print_schar::b)
label print_schar::@1
label print_schar::@2
label print_schar::@3
label print_schar::@4
label print_schar::@return
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 2002.0
signed byte print_schar::b#1 reg byte x 517.3333333333334
signed byte print_schar::b#4 reg byte x 2002.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
label print_sint::@1
label print_sint::@2
label print_sint::@3
label print_sint::@4
label print_sint::@return
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:12 2002.0
signed word print_sint::w#1 w zp[2]:12 517.3333333333334
signed word print_sint::w#4 w zp[2]:12 2002.0
void print_str(byte* print_str::str)
label print_str::@1
label print_str::@2
label print_str::@3
label print_str::@return
byte* print_str::str
byte* print_str::str#0 str zp[2]:12 200002.0
byte* print_str::str#10 str zp[2]:12 100251.25
byte* print_str::str#13 str zp[2]:12 1001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 200002.0
byte~ print_uchar::$2 reg byte x 200002.0
label print_uchar::@1
label print_uchar::@return
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 20002.0
byte print_uchar::b#2 reg byte x 20002.0
byte print_uchar::b#7 reg byte x 202.0
byte print_uchar::b#8 reg byte x 55276.5
void print_uint(word print_uint::w)
label print_uint::@1
label print_uint::@return
word print_uint::w
word print_uint::w#0 w zp[2]:12 2002.0
word print_uint::w#1 w zp[2]:12 22.0
word print_uint::w#2 w zp[2]:12 202.0
word print_uint::w#3 w zp[2]:12 7038.333333333333
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 zp[2]:12 2002.0
label sin8s::@1
label sin8s::@10
label sin8s::@11
label sin8s::@12
label sin8s::@13
label sin8s::@14
label sin8s::@2
label sin8s::@3
label sin8s::@4
label sin8s::@5
label sin8s::@6
label sin8s::@7
label sin8s::@8
label sin8s::@9
label sin8s::@return
const nomodify byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#10 isUpper zp[1]:18 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 reg byte a 701.0
signed byte sin8s::return#2 reg byte a 202.0
signed byte sin8s::return#5 reg byte a 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 reg byte a 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 usinx zp[1]:22 166.83333333333334
byte sin8s::usinx#1 reg byte x 2002.0
byte sin8s::usinx#2 reg byte x 2002.0
byte sin8s::usinx#4 reg byte x 1001.0
word sin8s::x
word sin8s::x#0 x zp[2]:12 2002.0
word sin8s::x#1 x zp[2]:12 2002.0
word sin8s::x#2 x zp[2]:12 1552.0
word sin8s::x#4 x zp[2]:12 2502.5
word sin8s::x#6 x zp[2]:12 3003.0
byte sin8s::x1
byte sin8s::x1#0 x1 zp[1]:20 318.5
byte sin8s::x2
byte sin8s::x2#0 reg byte a 2002.0
byte sin8s::x3
byte sin8s::x3#0 x3 zp[1]:21 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 reg byte a 2002.0
byte sin8s::x4
byte sin8s::x4#0 reg byte a 2002.0
byte sin8s::x5
byte sin8s::x5#0 reg byte a 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 reg byte a 2002.0
void sin8u_table(byte* sin8u_table::sintab , word sin8u_table::tabsize , byte sin8u_table::min , byte sin8u_table::max)
byte~ sin8u_table::$20 reg byte a 202.0
label sin8u_table::@1
label sin8u_table::@10
label sin8u_table::@11
label sin8u_table::@12
label sin8u_table::@13
label sin8u_table::@14
label sin8u_table::@15
label sin8u_table::@16
label sin8u_table::@17
label sin8u_table::@18
label sin8u_table::@19
label sin8u_table::@2
label sin8u_table::@20
label sin8u_table::@21
label sin8u_table::@22
label sin8u_table::@23
label sin8u_table::@24
label sin8u_table::@3
label sin8u_table::@4
label sin8u_table::@5
label sin8u_table::@6
label sin8u_table::@7
label sin8u_table::@8
label sin8u_table::@9
label sin8u_table::@return
byte sin8u_table::amplitude
const byte sin8u_table::amplitude#0 amplitude = sin8u_table::max#0-sin8u_table::min#0
word sin8u_table::i
word sin8u_table::i#1 i zp[2]:6 202.0
word sin8u_table::i#10 i zp[2]:6 9.46875
byte sin8u_table::max
const byte sin8u_table::max#0 max = $ff
byte sin8u_table::mid
const byte sin8u_table::mid#0 mid = (byte)sin8u_table::sum#0/2+1
byte sin8u_table::min
const byte sin8u_table::min#0 min = $a
byte* sin8u_table::sintab
byte* sin8u_table::sintab#1 sintab zp[2]:4 9.619047619047619
byte* sin8u_table::sintab#2 sintab zp[2]:4 25.25
signed byte sin8u_table::sinx
signed byte sin8u_table::sinx#0 sinx zp[1]:18 21.642857142857142
signed word sin8u_table::sinx_sc
signed word sin8u_table::sinx_sc#0 sinx_sc zp[2]:8 20.2
byte sin8u_table::sinx_tr
byte sin8u_table::sinx_tr#0 sinx_tr zp[1]:19 17.823529411764707
word sin8u_table::step
word sin8u_table::step#0 step zp[2]:14 2.2363636363636363
const byte* sin8u_table::str[6]  = "step:"
const byte* sin8u_table::str1[6]  = " min:"
const byte* sin8u_table::str2[6]  = " max:"
const byte* sin8u_table::str3[7]  = " ampl:"
const byte* sin8u_table::str4[6]  = " mid:"
const byte* sin8u_table::str5[4]  = "x: "
const byte* sin8u_table::str6[7]  = " sin: "
const byte* sin8u_table::str7[$a]  = " scaled: "
const byte* sin8u_table::str8[9]  = " trans: "
word sin8u_table::sum
const word sin8u_table::sum#0 sum = (word)sin8u_table::min#0+sin8u_table::max#0
word sin8u_table::tabsize
word sin8u_table::x
word sin8u_table::x#1 x zp[2]:2 101.0
word sin8u_table::x#10 x zp[2]:2 13.03225806451613

zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:8 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
zp[2]:12 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
reg byte a [ mul8u::b#2 mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
zp[2]:16 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
reg byte a [ sin8s::return#2 ]
zp[1]:18 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$20 ]
zp[1]:19 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[1]:20 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:21 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:22 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mul8su::$4 ]
reg byte a [ mul8su::$6 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
