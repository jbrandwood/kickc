
(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] *((const byte*) base + (byte) main::i#2) ← (byte) main::i#2
  [3] (byte) main::i#1 ← ++ (byte) main::i#2
  [4] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [5] (byte) fillscreen::c#0 ← *((const byte*) BG_COLOR)
  [6] call fillscreen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] *((const byte*) BG_COLOR) ← ++ *((const byte*) BG_COLOR)
  to:main::@2

(void()) fillscreen((byte) fillscreen::c)
fillscreen: scope:[fillscreen]  from main::@2
  [8] phi()
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@2
  [9] (byte) fillscreen::i#2 ← phi( fillscreen/(byte) 0 fillscreen::@2/(byte) fillscreen::i#1 )
  [9] (byte*) fillscreen::screen#2 ← phi( fillscreen/(const byte*) SCREEN fillscreen::@2/(byte*) fillscreen::screen#1 )
  [10] if((byte*) fillscreen::screen#2<(const byte*) SCREEN+(word) $3e8) goto fillscreen::@2
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [11] return 
  to:@return
fillscreen::@2: scope:[fillscreen]  from fillscreen::@1
  [12] (byte~) fillscreen::$2 ← (byte) fillscreen::c#0 + *((const byte*) base + (byte) fillscreen::i#2)
  [13] *((byte*) fillscreen::screen#2) ← (byte~) fillscreen::$2
  [14] (byte) fillscreen::i#1 ← ++ (byte) fillscreen::i#2
  [15] (byte*) fillscreen::screen#1 ← ++ (byte*) fillscreen::screen#2
  to:fillscreen::@1
