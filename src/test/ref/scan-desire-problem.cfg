
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [2] (byte) main::x#2 ← phi( main::@4/(byte) main::x#1 main/(byte) 0 )
  [3] if((byte) main::x#2<(byte) $10) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@1 main::@5
  [4] phi()
  to:main::@5
main::@2: scope:[main]  from main::@1 main::@6
  [5] (byte) main::y#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::y#1 )
  [6] if((byte) main::y#2<(byte) 9) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@1
main::@3: scope:[main]  from main::@2
  [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2
  [9] (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0)
  [10] (byte) draw_block::tileno#0 ← (byte) main::tile#0
  [11] (byte) draw_block::x#0 ← (byte) main::x#2
  [12] (byte) draw_block::y#0 ← (byte) main::y#2
  [13] call draw_block 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [14] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@2

(void()) init()
init: scope:[init]  from main
  [15] phi()
  [16] call init_sprites 
  to:init::@2
init::@2: scope:[init]  from init
  [17] phi()
  [18] call memset 
  to:init::@3
init::@3: scope:[init]  from init::@2
  [19] phi()
  [20] call memset 
  to:init::toD0181
init::toD0181: scope:[init]  from init::@3
  [21] phi()
  to:init::@1
init::@1: scope:[init]  from init::toD0181
  [22] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0
  asm { lda#$5b sta$d011  }
  [24] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  [25] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  [26] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED
  [27] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE
  [28] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN
  to:init::@return
init::@return: scope:[init]  from init::@1
  [29] return 
  to:@return

(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
draw_block: scope:[draw_block]  from main::@3
  [30] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2
  [31] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1
  [32] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1
  [33] (byte) mul8u::a#1 ← (byte) draw_block::y#1
  [34] call mul8u 
  [35] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:draw_block::@1
draw_block::@1: scope:[draw_block]  from draw_block
  [36] (word) draw_block::z#0 ← (word) mul8u::return#2
  [37] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0
  [38] (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#1)
  [39] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1
  [40] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0
  [41] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1
  [42] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW
  [43] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1
  [44] *((byte*~) draw_block::$13) ← (byte) 1
  [45] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1
  [46] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW
  [47] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1
  [48] *((byte*~) draw_block::$15) ← (byte) 2
  [49] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1
  [50] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW
  [51] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1
  [52] *((byte*~) draw_block::$17) ← (byte) 3
  [53] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1
  [54] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW
  to:draw_block::@return
draw_block::@return: scope:[draw_block]  from draw_block::@1
  [55] return 
  to:@return

(void()) init_sprites()
init_sprites: scope:[init_sprites]  from init
  [56] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1
  [57] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0
  [58] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0
  [59] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0
  [60] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE
  [61] *((const nomodify byte*) SPRITES_MC) ← (byte) 0
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites
  [62] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from init::@2 init::@3
  [63] (byte) memset::c#4 ← phi( init::@2/(byte) 0 init::@3/(const nomodify byte) BLACK )
  [63] (void*) memset::str#3 ← phi( init::@2/(void*)(const nomodify byte*) screen init::@3/(void*)(const nomodify byte*) colors )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [64] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8
  [65] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [66] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [67] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [68] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [69] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [70] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from draw_block
  [71] phi()
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [72] (word) mul8u::mb#2 ← phi( mul8u/(word)(const byte) mul8u::b#0 mul8u::@3/(word) mul8u::mb#1 )
  [72] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [72] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [73] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [74] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [75] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [76] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [77] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [78] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [79] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [80] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
