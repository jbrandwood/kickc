Resolved forward reference sprites_irq to interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$2 ← call toD018 (byte*) PLAYFIELD_SCREEN_1 (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$1 ← call toD018 (byte*) PLAYFIELD_SCREEN_2 (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) $4 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) sprites_irq::$3 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) current_piece_char#84 ← phi( )
  (byte) current_ypos#80 ← phi( )
  (byte) current_xpos#106 ← phi( )
  (byte*) current_piece_gfx#96 ← phi( )
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) PROCPORT_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) PROCPORT_BASIC_KERNEL_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) 53248
  (word) SPRITE_PTRS#0 ← (word/signed word/dword/signed dword) 1016
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY#0 ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC#0 ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2#0 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) BGCOL3#0 ← ((byte*)) (word/dword/signed dword) 53283
  (byte*) BGCOL4#0 ← ((byte*)) (word/dword/signed dword) 53284
  (byte*) SPRITES_MC1#0 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2#0 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8#0 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) LIGHTPEN_X#0 ← ((byte*)) (word/dword/signed dword) 53267
  (byte*) LIGHTPEN_Y#0 ← ((byte*)) (word/dword/signed dword) 53268
  (byte*) IRQ_STATUS#0 ← ((byte*)) (word/dword/signed dword) 53273
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53274
  (byte) IRQ_RASTER#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) 56333
  (byte) CIA_INTERRUPT_CLEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 127
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B#0 ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR#0 ← ((byte*)) (word/dword/signed dword) 56579
  (byte*) CIA2_INTERRUPT#0 ← ((byte*)) (word/dword/signed dword) 56589
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) 788
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (word/dword/signed dword) 65534
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@5
fill: scope:[fill]  from render_init::@9
  (byte) fill::val#2 ← phi( render_init::@9/(byte) fill::val#0 )
  (word) fill::size#1 ← phi( render_init::@9/(word) fill::size#0 )
  (byte*) fill::start#1 ← phi( render_init::@9/(byte*) fill::start#0 )
  (byte*~) fill::$0 ← (byte*) fill::start#1 + (word) fill::size#1
  (byte*) fill::end#0 ← (byte*~) fill::$0
  (byte*) fill::addr#0 ← (byte*) fill::start#1
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  (byte*) fill::end#1 ← phi( fill/(byte*) fill::end#0 fill::@1/(byte*) fill::end#1 )
  (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  (byte) fill::val#1 ← phi( fill/(byte) fill::val#2 fill::@1/(byte) fill::val#1 )
  *((byte*) fill::addr#2) ← (byte) fill::val#1
  (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  (bool~) fill::$1 ← (byte*) fill::addr#1 != (byte*) fill::end#1
  if((bool~) fill::$1) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  return 
  to:@return
@5: scope:[]  from @begin
  (byte) current_piece_char#83 ← phi( @begin/(byte) current_piece_char#84 )
  (byte) current_ypos#79 ← phi( @begin/(byte) current_ypos#80 )
  (byte) current_xpos#105 ← phi( @begin/(byte) current_xpos#106 )
  (byte*) current_piece_gfx#95 ← phi( @begin/(byte*) current_piece_gfx#96 )
  (byte) KEY_DEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_RETURN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_CRSR_RIGHT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_F7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) KEY_F1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_F3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) KEY_F5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) KEY_CRSR_DOWN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) KEY_3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) KEY_W#0 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) KEY_A#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) KEY_4#0 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) KEY_Z#0 ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) KEY_S#0 ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) KEY_E#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) KEY_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) KEY_5#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) KEY_R#0 ← (byte/signed byte/word/signed word/dword/signed dword) 17
  (byte) KEY_D#0 ← (byte/signed byte/word/signed word/dword/signed dword) 18
  (byte) KEY_6#0 ← (byte/signed byte/word/signed word/dword/signed dword) 19
  (byte) KEY_C#0 ← (byte/signed byte/word/signed word/dword/signed dword) 20
  (byte) KEY_F#0 ← (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) KEY_T#0 ← (byte/signed byte/word/signed word/dword/signed dword) 22
  (byte) KEY_X#0 ← (byte/signed byte/word/signed word/dword/signed dword) 23
  (byte) KEY_7#0 ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) KEY_Y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 25
  (byte) KEY_G#0 ← (byte/signed byte/word/signed word/dword/signed dword) 26
  (byte) KEY_8#0 ← (byte/signed byte/word/signed word/dword/signed dword) 27
  (byte) KEY_B#0 ← (byte/signed byte/word/signed word/dword/signed dword) 28
  (byte) KEY_H#0 ← (byte/signed byte/word/signed word/dword/signed dword) 29
  (byte) KEY_U#0 ← (byte/signed byte/word/signed word/dword/signed dword) 30
  (byte) KEY_V#0 ← (byte/signed byte/word/signed word/dword/signed dword) 31
  (byte) KEY_9#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) KEY_I#0 ← (byte/signed byte/word/signed word/dword/signed dword) 33
  (byte) KEY_J#0 ← (byte/signed byte/word/signed word/dword/signed dword) 34
  (byte) KEY_0#0 ← (byte/signed byte/word/signed word/dword/signed dword) 35
  (byte) KEY_M#0 ← (byte/signed byte/word/signed word/dword/signed dword) 36
  (byte) KEY_K#0 ← (byte/signed byte/word/signed word/dword/signed dword) 37
  (byte) KEY_O#0 ← (byte/signed byte/word/signed word/dword/signed dword) 38
  (byte) KEY_N#0 ← (byte/signed byte/word/signed word/dword/signed dword) 39
  (byte) KEY_PLUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) KEY_P#0 ← (byte/signed byte/word/signed word/dword/signed dword) 41
  (byte) KEY_L#0 ← (byte/signed byte/word/signed word/dword/signed dword) 42
  (byte) KEY_MINUS#0 ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte) KEY_DOT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 44
  (byte) KEY_COLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) 45
  (byte) KEY_AT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 46
  (byte) KEY_COMMA#0 ← (byte/signed byte/word/signed word/dword/signed dword) 47
  (byte) KEY_POUND#0 ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) KEY_ASTERISK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) KEY_SEMICOLON#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte) KEY_HOME#0 ← (byte/signed byte/word/signed word/dword/signed dword) 51
  (byte) KEY_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 52
  (byte) KEY_EQUALS#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) KEY_ARROW_UP#0 ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) KEY_SLASH#0 ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte) KEY_1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 56
  (byte) KEY_ARROW_LEFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 57
  (byte) KEY_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 58
  (byte) KEY_2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 59
  (byte) KEY_SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 60
  (byte) KEY_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 61
  (byte) KEY_Q#0 ← (byte/signed byte/word/signed word/dword/signed dword) 62
  (byte) KEY_RUNSTOP#0 ← (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte[]) keyboard_char_keycodes#0 ← { (byte) KEY_AT#0, (byte) KEY_A#0, (byte) KEY_B#0, (byte) KEY_C#0, (byte) KEY_D#0, (byte) KEY_E#0, (byte) KEY_F#0, (byte) KEY_G#0, (byte) KEY_H#0, (byte) KEY_I#0, (byte) KEY_J#0, (byte) KEY_K#0, (byte) KEY_L#0, (byte) KEY_M#0, (byte) KEY_N#0, (byte) KEY_O#0, (byte) KEY_P#0, (byte) KEY_Q#0, (byte) KEY_R#0, (byte) KEY_S#0, (byte) KEY_T#0, (byte) KEY_U#0, (byte) KEY_V#0, (byte) KEY_W#0, (byte) KEY_X#0, (byte) KEY_Y#0, (byte) KEY_Z#0, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_POUND#0, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ARROW_UP#0, (byte) KEY_ARROW_LEFT#0, (byte) KEY_SPACE#0, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_ASTERISK#0, (byte) KEY_PLUS#0, (byte) KEY_COMMA#0, (byte) KEY_MINUS#0, (byte) KEY_DOT#0, (byte) KEY_SLASH#0, (byte) KEY_0#0, (byte) KEY_1#0, (byte) KEY_2#0, (byte) KEY_3#0, (byte) KEY_4#0, (byte) KEY_5#0, (byte) KEY_6#0, (byte) KEY_7#0, (byte) KEY_8#0, (byte) KEY_9#0, (byte) KEY_COLON#0, (byte) KEY_SEMICOLON#0, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte) KEY_EQUALS#0, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
  to:@9
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@1/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@9: scope:[]  from @5
  (byte) current_piece_char#82 ← phi( @5/(byte) current_piece_char#83 )
  (byte) current_ypos#78 ← phi( @5/(byte) current_ypos#79 )
  (byte) current_xpos#104 ← phi( @5/(byte) current_xpos#105 )
  (byte*) current_piece_gfx#94 ← phi( @5/(byte*) current_piece_gfx#95 )
  (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_modifiers#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) KEY_MODIFIER_LSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) KEY_MODIFIER_RSHIFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) KEY_MODIFIER_CTRL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) KEY_MODIFIER_COMMODORE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte~) $0 ← (byte) KEY_MODIFIER_LSHIFT#0 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) KEY_MODIFIER_SHIFT#0 ← (byte~) $0
  (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
  to:@12
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@23
  (byte) keyboard_events_size#54 ← phi( main::@23/(byte) keyboard_events_size#26 )
  (byte) keyboard_event_scan::keycode#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_scan::row#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  (byte) keyboard_events_size#45 ← phi( keyboard_event_scan/(byte) keyboard_events_size#54 keyboard_event_scan::@3/(byte) keyboard_events_size#55 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#45 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@1/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$0
  (bool~) keyboard_event_scan::$1 ← (byte) keyboard_event_scan::row_scan#0 != *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$1) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@13
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:keyboard_event_scan::@4
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#61 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2 ← (byte) keyboard_event_scan::keycode#3 + (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) keyboard_event_scan::keycode#1 ← (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#61 keyboard_event_scan::@19/(byte) keyboard_events_size#62 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::row#7 keyboard_event_scan::@19/(byte) keyboard_event_scan::row#6 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@2 keyboard_event_scan::@5
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::keycode#12 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::col#0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@5/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@5/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#1 ^ *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$6 ← ! (bool~) keyboard_event_scan::$5
  if((bool~) keyboard_event_scan::$6) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@6 keyboard_event_scan::@7
  (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#21 keyboard_event_scan::@6/(byte) keyboard_events_size#38 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@4/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@6/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@7/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@4/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@6/(byte) keyboard_event_scan::row_scan#8 keyboard_event_scan::@7/(byte) keyboard_event_scan::row_scan#9 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@4/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@6/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@7/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#6 keyboard_event_scan::@4/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@6/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@7/(byte) keyboard_event_scan::keycode#5 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$12 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$12) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_event_scan::col#8 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@4/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@4/(byte) keyboard_events_size#21 )
  (bool~) keyboard_event_scan::$7 ← (byte) keyboard_events_size#10 != (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@6
  to:keyboard_event_scan::@16
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#6 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#13 )
  to:keyboard_event_scan::@5
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  (byte) keyboard_event_scan::row#14 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_events_size#22 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::col#8 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_scan::row_scan#2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$9
  (bool~) keyboard_event_scan::$10 ← (byte) keyboard_event_scan::event_type#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_scan::$10) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#9 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#11 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#10 )
  (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#5 | (byte/signed byte/word/signed word/dword/signed dword) 64
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#11) ← (byte/word/dword~) keyboard_event_scan::$11
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@5
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#14 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#12 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#10 )
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#12) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#12
  to:keyboard_event_scan::@5
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  (byte) keyboard_events_size#62 ← phi( keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#15 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@5/(byte) keyboard_event_scan::row_scan#5 )
  *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@3
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#74 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#55 )
  (byte) keyboard_modifiers#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) keyboard_event_pressed::keycode#0 ← (byte) KEY_LSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  (byte) keyboard_events_size#71 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#74 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@20/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$15 ← (byte~) keyboard_event_scan::$14 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$16 ← ! (bool~) keyboard_event_scan::$15
  if((bool~) keyboard_event_scan::$16) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  (byte) keyboard_events_size#67 ← phi( keyboard_event_scan::@21/(byte) keyboard_events_size#70 keyboard_event_scan::@26/(byte) keyboard_events_size#71 )
  (byte) keyboard_modifiers#26 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#2 keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte) keyboard_event_pressed::keycode#1 ← (byte) KEY_RSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  (byte) keyboard_events_size#64 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#67 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@9/(byte) keyboard_modifiers#26 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@9/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$19 ← (byte~) keyboard_event_scan::$18 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  (byte) keyboard_events_size#70 ← phi( keyboard_event_scan::@26/(byte) keyboard_events_size#71 )
  (byte) keyboard_modifiers#10 ← phi( keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte~) keyboard_event_scan::$17 ← (byte) keyboard_modifiers#10 | (byte) KEY_MODIFIER_LSHIFT#0
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$17
  to:keyboard_event_scan::@9
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@22/(byte) keyboard_events_size#63 keyboard_event_scan::@27/(byte) keyboard_events_size#64 )
  (byte) keyboard_modifiers#27 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#3 keyboard_event_scan::@27/(byte) keyboard_modifiers#19 )
  (byte) keyboard_event_pressed::keycode#2 ← (byte) KEY_CTRL#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_events_size#47 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@10/(byte) keyboard_modifiers#27 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$23 ← (byte~) keyboard_event_scan::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$24 ← ! (bool~) keyboard_event_scan::$23
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  (byte) keyboard_events_size#63 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#64 )
  (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#19 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_modifiers#11 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$21
  to:keyboard_event_scan::@10
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#46 keyboard_event_scan::@28/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#28 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#4 keyboard_event_scan::@28/(byte) keyboard_modifiers#20 )
  (byte) keyboard_event_pressed::keycode#3 ← (byte) KEY_COMMODORE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_events_size#31 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#39 )
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@11/(byte) keyboard_modifiers#28 )
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  (bool~) keyboard_event_scan::$27 ← (byte~) keyboard_event_scan::$26 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) keyboard_event_scan::$28 ← ! (bool~) keyboard_event_scan::$27
  if((bool~) keyboard_event_scan::$28) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@24
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  (byte) keyboard_events_size#46 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#20 )
  (byte~) keyboard_event_scan::$25 ← (byte) keyboard_modifiers#12 | (byte) KEY_MODIFIER_CTRL#0
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$25
  to:keyboard_event_scan::@11
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_modifiers#22 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 )
  (byte) keyboard_events_size#23 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#31 )
  to:keyboard_event_scan::@return
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_events_size#24 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#31 )
  (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#13 | (byte) KEY_MODIFIER_COMMODORE#0
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@12 keyboard_event_scan::@24
  (byte) keyboard_modifiers#14 ← phi( keyboard_event_scan::@12/(byte) keyboard_modifiers#22 keyboard_event_scan::@24/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#23 keyboard_event_scan::@24/(byte) keyboard_events_size#24 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#13
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#14
  return 
  to:@return
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@11/(byte) keyboard_event_pressed::keycode#3 keyboard_event_scan::@20/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@9/(byte) keyboard_event_pressed::keycode#1 play_move_down::@1/(byte) keyboard_event_pressed::keycode#4 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#11 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#11
  return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@24
  (byte) keyboard_events_size#14 ← phi( main::@24/(byte) keyboard_events_size#6 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@3
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#25 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_event_get::return#0 ← (byte/word/signed word/dword/signed dword) 255
  to:keyboard_event_get::@return
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#15 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#15
  (byte) keyboard_event_get::return#1 ← *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@3
  (byte) keyboard_events_size#16 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#25 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#4 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#4
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#16
  return 
  to:@return
@12: scope:[]  from @9
  (byte) keyboard_modifiers#58 ← phi( @9/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#77 ← phi( @9/(byte) keyboard_events_size#0 )
  (byte) current_piece_char#81 ← phi( @9/(byte) current_piece_char#82 )
  (byte) current_ypos#77 ← phi( @9/(byte) current_ypos#78 )
  (byte) current_xpos#103 ← phi( @9/(byte) current_xpos#104 )
  (byte*) current_piece_gfx#93 ← phi( @9/(byte*) current_piece_gfx#94 )
  (word*) SID_VOICE3_FREQ#0 ← ((word*)) (word/dword/signed dword) 54286
  (byte*) SID_VOICE3_FREQ_LOW#0 ← ((byte*)) (word/dword/signed dword) 54286
  (byte*) SID_VOICE3_FREQ_HIGH#0 ← ((byte*)) (word/dword/signed dword) 54287
  (byte*) SID_VOICE3_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 54290
  (byte) SID_CONTROL_NOISE#0 ← (byte/word/signed word/dword/signed dword) 128
  (byte) SID_CONTROL_PULSE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) SID_CONTROL_SAWTOOTH#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) SID_CONTROL_TRIANGLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) SID_CONTROL_TEST#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) SID_CONTROL_RING#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) SID_CONTROL_SYNC#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) SID_CONTROL_GATE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) SID_VOICE3_OSC#0 ← ((byte*)) (word/dword/signed dword) 54299
  to:@14
sid_rnd_init: scope:[sid_rnd_init]  from main
  *((word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  *((byte*) SID_VOICE3_CONTROL#0) ← (byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  return 
  to:@return
sid_rnd: scope:[sid_rnd]  from play_spawn_current::@2
  (byte) sid_rnd::return#0 ← *((byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  (byte) sid_rnd::return#3 ← phi( sid_rnd/(byte) sid_rnd::return#0 )
  (byte) sid_rnd::return#1 ← (byte) sid_rnd::return#3
  return 
  to:@return
@14: scope:[]  from @12
  (byte) keyboard_modifiers#56 ← phi( @12/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#75 ← phi( @12/(byte) keyboard_events_size#77 )
  (byte) current_piece_char#80 ← phi( @12/(byte) current_piece_char#81 )
  (byte) current_ypos#76 ← phi( @12/(byte) current_ypos#77 )
  (byte) current_xpos#102 ← phi( @12/(byte) current_xpos#103 )
  (byte*) current_piece_gfx#92 ← phi( @12/(byte*) current_piece_gfx#93 )
  (byte*) PLAYFIELD_SCREEN_1#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) PLAYFIELD_SCREEN_2#0 ← ((byte*)) (word/signed word/dword/signed dword) 11264
  (byte*~) $1 ← (byte*) PLAYFIELD_SCREEN_1#0 + (word) SPRITE_PTRS#0
  (byte*) PLAYFIELD_SPRITE_PTRS_1#0 ← (byte*~) $1
  (byte*~) $2 ← (byte*) PLAYFIELD_SCREEN_2#0 + (word) SPRITE_PTRS#0
  (byte*) PLAYFIELD_SPRITE_PTRS_2#0 ← (byte*~) $2
  (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 ← ((byte*)) (word/signed word/dword/signed dword) 6144
  (byte*) PLAYFIELD_SPRITES#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*) PLAYFIELD_CHARSET#0 ← ((byte*)) (word/signed word/dword/signed dword) 10240
  (byte) PLAYFIELD_LINES#0 ← (byte/signed byte/word/signed word/dword/signed dword) 22
  (byte) PLAYFIELD_COLS#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte~) $3 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte[$3]) playfield#0 ← { fill( $3, 0) }
  (byte) render_screen_render#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) render_screen_show#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  kickasm(location (byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"
 }}
  (byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  kickasm(location (byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"
 }}
  (byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  (byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  to:@20
render_init: scope:[render_init]  from main::@15
  (byte*) render_init::vicSelectGfxBank1_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  (byte*) render_init::vicSelectGfxBank1_gfx#1 ← phi( render_init/(byte*) render_init::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) render_init::vicSelectGfxBank1_gfx#1
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1 ← phi( render_init::vicSelectGfxBank1/(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 )
  (word) render_init::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
  (byte) render_init::vicSelectGfxBank1_toDd001_$1#0 ← > (word) render_init::vicSelectGfxBank1_toDd001_$0#0
  (byte) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (byte) render_init::vicSelectGfxBank1_toDd001_$1#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword) render_init::vicSelectGfxBank1_toDd001_$3#0 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte) render_init::vicSelectGfxBank1_toDd001_$2#0
  (byte) render_init::vicSelectGfxBank1_toDd001_return#0 ← (byte/word/dword) render_init::vicSelectGfxBank1_toDd001_$3#0
  to:render_init::vicSelectGfxBank1_toDd001_@return
render_init::vicSelectGfxBank1_toDd001_@return: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  (byte) render_init::vicSelectGfxBank1_toDd001_return#2 ← phi( render_init::vicSelectGfxBank1_toDd001/(byte) render_init::vicSelectGfxBank1_toDd001_return#0 )
  (byte) render_init::vicSelectGfxBank1_toDd001_return#1 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#2
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001_@return
  (byte) render_init::vicSelectGfxBank1_toDd001_return#3 ← phi( render_init::vicSelectGfxBank1_toDd001_@return/(byte) render_init::vicSelectGfxBank1_toDd001_return#1 )
  (byte) render_init::vicSelectGfxBank1_$0#0 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte) render_init::vicSelectGfxBank1_$0#0
  to:render_init::@7
render_init::@7: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  (byte~) render_init::$1 ← (byte) VIC_ECM#0 | (byte) VIC_DEN#0
  (byte~) render_init::$2 ← (byte~) render_init::$1 | (byte) VIC_RSEL#0
  (byte/word/dword~) render_init::$3 ← (byte~) render_init::$2 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011#0) ← (byte/word/dword~) render_init::$3
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  *((byte*) BGCOL1#0) ← (byte) BLACK#0
  *((byte*) BGCOL2#0) ← (byte) BLUE#0
  *((byte*) BGCOL3#0) ← (byte) CYAN#0
  *((byte*) BGCOL4#0) ← (byte) GREY#0
  (byte*) render_screen_original::screen#0 ← (byte*) PLAYFIELD_SCREEN_1#0
  call render_screen_original 
  to:render_init::@8
render_init::@8: scope:[render_init]  from render_init::@7
  (byte*) render_screen_original::screen#1 ← (byte*) PLAYFIELD_SCREEN_2#0
  call render_screen_original 
  to:render_init::@9
render_init::@9: scope:[render_init]  from render_init::@8
  (byte*) fill::start#0 ← (byte*) COLS#0
  (word) fill::size#0 ← (word/signed word/dword/signed dword) 1000
  (byte) fill::val#0 ← (byte) DARK_GREY#0
  call fill 
  to:render_init::@10
render_init::@10: scope:[render_init]  from render_init::@9
  (byte/word/signed word/dword/signed dword~) render_init::$7 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*~) render_init::$8 ← (byte*) COLS#0 + (byte/word/signed word/dword/signed dword~) render_init::$7
  (byte*~) render_init::$9 ← (byte*~) render_init::$8 + (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte*) render_init::line#0 ← (byte*~) render_init::$9
  (byte/signed word/word/dword/signed dword~) render_init::$10 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_init::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@10 render_init::@4
  (byte) render_init::l#4 ← phi( render_init::@10/(byte) render_init::l#0 render_init::@4/(byte) render_init::l#1 )
  (byte*) render_init::line#4 ← phi( render_init::@10/(byte*) render_init::line#0 render_init::@4/(byte*) render_init::line#1 )
  (byte/signed word/word/dword/signed dword~) render_init::$11 ← (byte) PLAYFIELD_COLS#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_init::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1 render_init::@2
  (byte) render_init::l#3 ← phi( render_init::@1/(byte) render_init::l#4 render_init::@2/(byte) render_init::l#3 )
  (byte) render_init::c#2 ← phi( render_init::@1/(byte) render_init::c#0 render_init::@2/(byte) render_init::c#1 )
  (byte*) render_init::line#2 ← phi( render_init::@1/(byte*) render_init::line#4 render_init::@2/(byte*) render_init::line#2 )
  (byte*~) render_init::$12 ← (byte*) render_init::line#2 + (byte) render_init::c#2
  *((byte*~) render_init::$12) ← (byte) WHITE#0
  (byte) render_init::c#1 ← (byte) render_init::c#2 + rangenext(0,render_init::$11)
  (bool~) render_init::$13 ← (byte) render_init::c#1 != rangelast(0,render_init::$11)
  if((bool~) render_init::$13) goto render_init::@2
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@2
  (byte) render_init::l#2 ← phi( render_init::@2/(byte) render_init::l#3 )
  (byte*) render_init::line#3 ← phi( render_init::@2/(byte*) render_init::line#2 )
  (byte*) render_init::line#1 ← (byte*) render_init::line#3 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) render_init::l#1 ← (byte) render_init::l#2 + rangenext(2,render_init::$10)
  (bool~) render_init::$14 ← (byte) render_init::l#1 != rangelast(2,render_init::$10)
  if((bool~) render_init::$14) goto render_init::@1
  to:render_init::@5
render_init::@5: scope:[render_init]  from render_init::@4
  (byte/signed byte/word/signed word/dword/signed dword~) render_init::$15 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*~) render_init::$16 ← (byte*) PLAYFIELD_SCREEN_1#0 + (byte/signed byte/word/signed word/dword/signed dword~) render_init::$15
  (byte*~) render_init::$17 ← (byte*~) render_init::$16 + (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte*) render_init::li_1#0 ← (byte*~) render_init::$17
  (byte/signed byte/word/signed word/dword/signed dword~) render_init::$18 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*~) render_init::$19 ← (byte*) PLAYFIELD_SCREEN_2#0 + (byte/signed byte/word/signed word/dword/signed dword~) render_init::$18
  (byte*~) render_init::$20 ← (byte*~) render_init::$19 + (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte*) render_init::li_2#0 ← (byte*~) render_init::$20
  (byte/signed word/word/dword/signed dword~) render_init::$21 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@3 render_init::@5
  (byte*) render_init::li_2#2 ← phi( render_init::@3/(byte*) render_init::li_2#1 render_init::@5/(byte*) render_init::li_2#0 )
  (byte*) render_init::li_1#2 ← phi( render_init::@3/(byte*) render_init::li_1#1 render_init::@5/(byte*) render_init::li_1#0 )
  (byte) render_init::i#2 ← phi( render_init::@3/(byte) render_init::i#1 render_init::@5/(byte) render_init::i#0 )
  (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2
  (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2
  (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) render_init::i#1 ← (byte) render_init::i#2 + rangenext(0,render_init::$21)
  (bool~) render_init::$24 ← (byte) render_init::i#1 != rangelast(0,render_init::$21)
  if((bool~) render_init::$24) goto render_init::@3
  to:render_init::@6
render_init::@6: scope:[render_init]  from render_init::@3
  (byte) render_screen_show#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) render_screen_render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@6
  (byte) render_screen_render#9 ← phi( render_init::@6/(byte) render_screen_render#1 )
  (byte) render_screen_show#9 ← phi( render_init::@6/(byte) render_screen_show#1 )
  (byte) render_screen_show#2 ← (byte) render_screen_show#9
  (byte) render_screen_render#2 ← (byte) render_screen_render#9
  return 
  to:@return
render_show: scope:[render_show]  from main::@6
  (byte) render_screen_show#10 ← phi( main::@6/(byte) render_screen_show#18 )
  (byte) render_show::d018val#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) render_show::$0 ← (byte) render_screen_show#10 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) render_show::$0) goto render_show::@1
  to:render_show::@3
render_show::@1: scope:[render_show]  from render_show
  (byte) render_screen_show#41 ← phi( render_show/(byte) render_screen_show#10 )
  (byte*) render_show::toD0181_screen#0 ← (byte*) PLAYFIELD_SCREEN_1#0
  (byte*) render_show::toD0181_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_show::toD0181
render_show::toD0181: scope:[render_show]  from render_show::@1
  (byte) render_screen_show#33 ← phi( render_show::@1/(byte) render_screen_show#41 )
  (byte*) render_show::toD0181_gfx#1 ← phi( render_show::@1/(byte*) render_show::toD0181_gfx#0 )
  (byte*) render_show::toD0181_screen#1 ← phi( render_show::@1/(byte*) render_show::toD0181_screen#0 )
  (word) render_show::toD0181_$0#0 ← ((word)) (byte*) render_show::toD0181_screen#1
  (word) render_show::toD0181_$1#0 ← (word) render_show::toD0181_$0#0 & (word/signed word/dword/signed dword) 16383
  (word) render_show::toD0181_$2#0 ← (word) render_show::toD0181_$1#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_show::toD0181_$3#0 ← > (word) render_show::toD0181_$2#0
  (word) render_show::toD0181_$4#0 ← ((word)) (byte*) render_show::toD0181_gfx#1
  (byte) render_show::toD0181_$5#0 ← > (word) render_show::toD0181_$4#0
  (byte) render_show::toD0181_$6#0 ← (byte) render_show::toD0181_$5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_show::toD0181_$7#0 ← (byte) render_show::toD0181_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) render_show::toD0181_$8#0 ← (byte) render_show::toD0181_$3#0 | (byte) render_show::toD0181_$7#0
  (byte) render_show::toD0181_return#0 ← (byte) render_show::toD0181_$8#0
  to:render_show::toD0181_@return
render_show::toD0181_@return: scope:[render_show]  from render_show::toD0181
  (byte) render_screen_show#25 ← phi( render_show::toD0181/(byte) render_screen_show#33 )
  (byte) render_show::toD0181_return#2 ← phi( render_show::toD0181/(byte) render_show::toD0181_return#0 )
  (byte) render_show::toD0181_return#1 ← (byte) render_show::toD0181_return#2
  to:render_show::@5
render_show::@5: scope:[render_show]  from render_show::toD0181_@return
  (byte) render_screen_show#19 ← phi( render_show::toD0181_@return/(byte) render_screen_show#25 )
  (byte) render_show::toD0181_return#3 ← phi( render_show::toD0181_@return/(byte) render_show::toD0181_return#1 )
  (byte~) render_show::$2 ← (byte) render_show::toD0181_return#3
  (byte) render_show::d018val#1 ← (byte~) render_show::$2
  to:render_show::@2
render_show::@3: scope:[render_show]  from render_show
  (byte) render_screen_show#42 ← phi( render_show/(byte) render_screen_show#10 )
  (byte*) render_show::toD0182_screen#0 ← (byte*) PLAYFIELD_SCREEN_2#0
  (byte*) render_show::toD0182_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show::@3
  (byte) render_screen_show#34 ← phi( render_show::@3/(byte) render_screen_show#42 )
  (byte*) render_show::toD0182_gfx#1 ← phi( render_show::@3/(byte*) render_show::toD0182_gfx#0 )
  (byte*) render_show::toD0182_screen#1 ← phi( render_show::@3/(byte*) render_show::toD0182_screen#0 )
  (word) render_show::toD0182_$0#0 ← ((word)) (byte*) render_show::toD0182_screen#1
  (word) render_show::toD0182_$1#0 ← (word) render_show::toD0182_$0#0 & (word/signed word/dword/signed dword) 16383
  (word) render_show::toD0182_$2#0 ← (word) render_show::toD0182_$1#0 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_show::toD0182_$3#0 ← > (word) render_show::toD0182_$2#0
  (word) render_show::toD0182_$4#0 ← ((word)) (byte*) render_show::toD0182_gfx#1
  (byte) render_show::toD0182_$5#0 ← > (word) render_show::toD0182_$4#0
  (byte) render_show::toD0182_$6#0 ← (byte) render_show::toD0182_$5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_show::toD0182_$7#0 ← (byte) render_show::toD0182_$6#0 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) render_show::toD0182_$8#0 ← (byte) render_show::toD0182_$3#0 | (byte) render_show::toD0182_$7#0
  (byte) render_show::toD0182_return#0 ← (byte) render_show::toD0182_$8#0
  to:render_show::toD0182_@return
render_show::toD0182_@return: scope:[render_show]  from render_show::toD0182
  (byte) render_screen_show#26 ← phi( render_show::toD0182/(byte) render_screen_show#34 )
  (byte) render_show::toD0182_return#2 ← phi( render_show::toD0182/(byte) render_show::toD0182_return#0 )
  (byte) render_show::toD0182_return#1 ← (byte) render_show::toD0182_return#2
  to:render_show::@6
render_show::@6: scope:[render_show]  from render_show::toD0182_@return
  (byte) render_screen_show#20 ← phi( render_show::toD0182_@return/(byte) render_screen_show#26 )
  (byte) render_show::toD0182_return#3 ← phi( render_show::toD0182_@return/(byte) render_show::toD0182_return#1 )
  (byte~) render_show::$1 ← (byte) render_show::toD0182_return#3
  (byte) render_show::d018val#2 ← (byte~) render_show::$1
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::@5 render_show::@6
  (byte) render_screen_show#11 ← phi( render_show::@5/(byte) render_screen_show#19 render_show::@6/(byte) render_screen_show#20 )
  (byte) render_show::d018val#3 ← phi( render_show::@5/(byte) render_show::d018val#1 render_show::@6/(byte) render_show::d018val#2 )
  *((byte*) D018#0) ← (byte) render_show::d018val#3
  (byte) render_screen_showing#1 ← (byte) render_screen_show#11
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  (byte) render_screen_showing#6 ← phi( render_show::@2/(byte) render_screen_showing#1 )
  (byte) render_screen_showing#2 ← (byte) render_screen_showing#6
  return 
  to:@return
render_screen_swap: scope:[render_screen_swap]  from main::@30
  (byte) render_screen_show#12 ← phi( main::@30/(byte) render_screen_show#21 )
  (byte) render_screen_render#10 ← phi( main::@30/(byte) render_screen_render#18 )
  (byte) render_screen_render#3 ← (byte) render_screen_render#10 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) render_screen_show#3 ← (byte) render_screen_show#12 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  (byte) render_screen_show#13 ← phi( render_screen_swap/(byte) render_screen_show#3 )
  (byte) render_screen_render#11 ← phi( render_screen_swap/(byte) render_screen_render#3 )
  (byte) render_screen_render#4 ← (byte) render_screen_render#11
  (byte) render_screen_show#4 ← (byte) render_screen_show#13
  return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@7 render_init::@8
  (byte*) render_screen_original::screen#11 ← phi( render_init::@7/(byte*) render_screen_original::screen#0 render_init::@8/(byte*) render_screen_original::screen#1 )
  (byte) render_screen_original::SPACE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte/signed byte/word/signed word/dword/signed dword~) render_screen_original::$0 ← (byte/signed byte/word/signed word/dword/signed dword) 32 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*~) render_screen_original::$1 ← (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 + (byte/signed byte/word/signed word/dword/signed dword~) render_screen_original::$0
  (byte*) render_screen_original::orig#0 ← (byte*~) render_screen_original::$1
  (byte) render_screen_original::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@9
  (byte) render_screen_original::y#8 ← phi( render_screen_original/(byte) render_screen_original::y#0 render_screen_original::@9/(byte) render_screen_original::y#1 )
  (byte*) render_screen_original::orig#5 ← phi( render_screen_original/(byte*) render_screen_original::orig#0 render_screen_original::@9/(byte*) render_screen_original::orig#7 )
  (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#11 render_screen_original::@9/(byte*) render_screen_original::screen#12 )
  (byte) render_screen_original::SPACE#3 ← phi( render_screen_original/(byte) render_screen_original::SPACE#0 render_screen_original::@9/(byte) render_screen_original::SPACE#5 )
  (byte) render_screen_original::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  (byte) render_screen_original::y#7 ← phi( render_screen_original::@1/(byte) render_screen_original::y#8 render_screen_original::@2/(byte) render_screen_original::y#7 )
  (byte*) render_screen_original::orig#3 ← phi( render_screen_original::@1/(byte*) render_screen_original::orig#5 render_screen_original::@2/(byte*) render_screen_original::orig#3 )
  (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) render_screen_original::x#0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  (byte) render_screen_original::SPACE#1 ← phi( render_screen_original::@1/(byte) render_screen_original::SPACE#3 render_screen_original::@2/(byte) render_screen_original::SPACE#1 )
  *((byte*) render_screen_original::screen#5) ← (byte) render_screen_original::SPACE#1
  (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  (bool~) render_screen_original::$2 ← (byte) render_screen_original::x#1 != (byte/signed byte/word/signed word/dword/signed dword) 4
  if((bool~) render_screen_original::$2) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@4
  (byte) render_screen_original::y#5 ← phi( render_screen_original::@2/(byte) render_screen_original::y#7 render_screen_original::@4/(byte) render_screen_original::y#4 )
  (byte) render_screen_original::SPACE#6 ← phi( render_screen_original::@2/(byte) render_screen_original::SPACE#1 render_screen_original::@4/(byte) render_screen_original::SPACE#4 )
  (byte*) render_screen_original::screen#9 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@4/(byte*) render_screen_original::screen#3 )
  (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@4/(byte) render_screen_original::x#2 )
  (byte*) render_screen_original::orig#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::orig#3 render_screen_original::@4/(byte*) render_screen_original::orig#4 )
  (byte/signed word/word/dword/signed dword~) render_screen_original::$3 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_screen_original::c#0 ← (byte/signed word/word/dword/signed dword~) render_screen_original::$3
  (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2
  (bool~) render_screen_original::$4 ← (byte) render_screen_original::x#5 > (byte/signed byte/word/signed word/dword/signed dword) 14
  (bool~) render_screen_original::$5 ← (byte) render_screen_original::x#5 < (byte/signed byte/word/signed word/dword/signed dword) 27
  (bool~) render_screen_original::$6 ← (bool~) render_screen_original::$4 && (bool~) render_screen_original::$5
  (bool~) render_screen_original::$7 ← ! (bool~) render_screen_original::$6
  if((bool~) render_screen_original::$7) goto render_screen_original::@4
  to:render_screen_original::@7
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@7
  (byte) render_screen_original::y#4 ← phi( render_screen_original::@3/(byte) render_screen_original::y#5 render_screen_original::@7/(byte) render_screen_original::y#6 )
  (byte) render_screen_original::SPACE#4 ← phi( render_screen_original::@3/(byte) render_screen_original::SPACE#6 render_screen_original::@7/(byte) render_screen_original::SPACE#7 )
  (byte*) render_screen_original::orig#4 ← phi( render_screen_original::@3/(byte*) render_screen_original::orig#1 render_screen_original::@7/(byte*) render_screen_original::orig#6 )
  (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#5 render_screen_original::@7/(byte) render_screen_original::x#8 )
  (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#9 render_screen_original::@7/(byte*) render_screen_original::screen#10 )
  (byte) render_screen_original::c#2 ← phi( render_screen_original::@3/(byte) render_screen_original::c#0 render_screen_original::@7/(byte) render_screen_original::c#1 )
  *((byte*) render_screen_original::screen#6) ← (byte) render_screen_original::c#2
  (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#6
  (bool~) render_screen_original::$8 ← (byte) render_screen_original::x#2 != (byte/signed byte/word/signed word/dword/signed dword) 36
  if((bool~) render_screen_original::$8) goto render_screen_original::@3
  to:render_screen_original::@5
render_screen_original::@7: scope:[render_screen_original]  from render_screen_original::@3
  (byte) render_screen_original::y#6 ← phi( render_screen_original::@3/(byte) render_screen_original::y#5 )
  (byte) render_screen_original::SPACE#7 ← phi( render_screen_original::@3/(byte) render_screen_original::SPACE#6 )
  (byte*) render_screen_original::orig#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::orig#1 )
  (byte) render_screen_original::x#8 ← phi( render_screen_original::@3/(byte) render_screen_original::x#5 )
  (byte*) render_screen_original::screen#10 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#9 )
  (byte) render_screen_original::c#3 ← phi( render_screen_original::@3/(byte) render_screen_original::c#0 )
  (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#3 | (byte/word/signed word/dword/signed dword) 192
  to:render_screen_original::@4
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4 render_screen_original::@5
  (byte*) render_screen_original::orig#8 ← phi( render_screen_original::@4/(byte*) render_screen_original::orig#4 render_screen_original::@5/(byte*) render_screen_original::orig#8 )
  (byte) render_screen_original::y#3 ← phi( render_screen_original::@4/(byte) render_screen_original::y#4 render_screen_original::@5/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::x#7 ← phi( render_screen_original::@4/(byte) render_screen_original::x#2 render_screen_original::@5/(byte) render_screen_original::x#3 )
  (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@4/(byte*) render_screen_original::screen#3 render_screen_original::@5/(byte*) render_screen_original::screen#4 )
  (byte) render_screen_original::SPACE#2 ← phi( render_screen_original::@4/(byte) render_screen_original::SPACE#4 render_screen_original::@5/(byte) render_screen_original::SPACE#2 )
  *((byte*) render_screen_original::screen#7) ← (byte) render_screen_original::SPACE#2
  (byte*) render_screen_original::screen#4 ← ++ (byte*) render_screen_original::screen#7
  (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7
  (bool~) render_screen_original::$9 ← (byte) render_screen_original::x#3 != (byte/signed byte/word/signed word/dword/signed dword) 40
  if((bool~) render_screen_original::$9) goto render_screen_original::@5
  to:render_screen_original::@9
render_screen_original::@9: scope:[render_screen_original]  from render_screen_original::@5
  (byte*) render_screen_original::orig#7 ← phi( render_screen_original::@5/(byte*) render_screen_original::orig#8 )
  (byte*) render_screen_original::screen#12 ← phi( render_screen_original::@5/(byte*) render_screen_original::screen#4 )
  (byte) render_screen_original::SPACE#5 ← phi( render_screen_original::@5/(byte) render_screen_original::SPACE#2 )
  (byte) render_screen_original::y#2 ← phi( render_screen_original::@5/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::y#1 ← (byte) render_screen_original::y#2 + rangenext(0,24)
  (bool~) render_screen_original::$10 ← (byte) render_screen_original::y#1 != rangelast(0,24)
  if((bool~) render_screen_original::$10) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@9
  return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@13 main::@20
  (byte) render_screen_render#19 ← phi( main::@13/(byte) render_screen_render#25 main::@20/(byte) render_screen_render#26 )
  (byte/signed word/word/dword/signed dword~) render_playfield::$0 ← (byte) PLAYFIELD_COLS#0 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_playfield::i#0 ← (byte/signed word/word/dword/signed dword~) render_playfield::$0
  (byte/signed word/word/dword/signed dword~) render_playfield::$1 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_playfield::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  (byte) render_playfield::i#3 ← phi( render_playfield/(byte) render_playfield::i#0 render_playfield::@3/(byte) render_playfield::i#4 )
  (byte) render_screen_render#12 ← phi( render_playfield/(byte) render_screen_render#19 render_playfield::@3/(byte) render_screen_render#20 )
  (byte) render_playfield::l#2 ← phi( render_playfield/(byte) render_playfield::l#0 render_playfield::@3/(byte) render_playfield::l#1 )
  (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) render_playfield::$3 ← (byte) render_screen_render#12 + (byte~) render_playfield::$2
  (byte*) render_playfield::screen_line#0 ← *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3)
  (byte/signed word/word/dword/signed dword~) render_playfield::$4 ← (byte) PLAYFIELD_COLS#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_playfield::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  (byte) render_screen_render#27 ← phi( render_playfield::@1/(byte) render_screen_render#12 render_playfield::@2/(byte) render_screen_render#27 )
  (byte) render_playfield::l#4 ← phi( render_playfield::@1/(byte) render_playfield::l#2 render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) render_playfield::c#0 render_playfield::@2/(byte) render_playfield::c#1 )
  (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  *((byte*) render_playfield::screen_line#2) ← *((byte[$3]) playfield#0 + (byte) render_playfield::i#2)
  (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,render_playfield::$4)
  (bool~) render_playfield::$5 ← (byte) render_playfield::c#1 != rangelast(0,render_playfield::$4)
  if((bool~) render_playfield::$5) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  (byte) render_playfield::i#4 ← phi( render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_screen_render#20 ← phi( render_playfield::@2/(byte) render_screen_render#27 )
  (byte) render_playfield::l#3 ← phi( render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(2,render_playfield::$1)
  (bool~) render_playfield::$6 ← (byte) render_playfield::l#1 != rangelast(2,render_playfield::$1)
  if((bool~) render_playfield::$6) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  return 
  to:@return
render_current: scope:[render_current]  from main::@21 main::@29
  (byte) current_piece_char#63 ← phi( main::@21/(byte) current_piece_char#48 main::@29/(byte) current_piece_char#62 )
  (byte*) current_piece_gfx#53 ← phi( main::@21/(byte*) current_piece_gfx#64 main::@29/(byte*) current_piece_gfx#67 )
  (byte) current_xpos#47 ← phi( main::@21/(byte) current_xpos#66 main::@29/(byte) current_xpos#67 )
  (byte) render_screen_render#28 ← phi( main::@21/(byte) render_screen_render#35 main::@29/(byte) render_screen_render#33 )
  (byte) current_ypos#9 ← phi( main::@21/(byte) current_ypos#23 main::@29/(byte) current_ypos#24 )
  (byte) render_current::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) render_current::$0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) render_current::ypos2#0 ← (byte~) render_current::$0
  (byte) render_current::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_current::@1
render_current::@1: scope:[render_current]  from render_current render_current::@3
  (byte) current_piece_char#52 ← phi( render_current/(byte) current_piece_char#63 render_current::@3/(byte) current_piece_char#64 )
  (byte) render_current::l#5 ← phi( render_current/(byte) render_current::l#0 render_current::@3/(byte) render_current::l#1 )
  (byte*) current_piece_gfx#36 ← phi( render_current/(byte*) current_piece_gfx#53 render_current::@3/(byte*) current_piece_gfx#54 )
  (byte) render_current::i#5 ← phi( render_current/(byte) render_current::i#0 render_current::@3/(byte) render_current::i#8 )
  (byte) current_xpos#29 ← phi( render_current/(byte) current_xpos#47 render_current::@3/(byte) current_xpos#48 )
  (byte) render_screen_render#21 ← phi( render_current/(byte) render_screen_render#28 render_current::@3/(byte) render_screen_render#29 )
  (byte) render_current::ypos2#2 ← phi( render_current/(byte) render_current::ypos2#0 render_current::@3/(byte) render_current::ypos2#1 )
  (bool~) render_current::$1 ← (byte) render_current::ypos2#2 > (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte/signed word/word/dword/signed dword~) render_current::$2 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte) PLAYFIELD_LINES#0
  (bool~) render_current::$3 ← (byte) render_current::ypos2#2 < (byte/signed word/word/dword/signed dword~) render_current::$2
  (bool~) render_current::$4 ← (bool~) render_current::$1 && (bool~) render_current::$3
  if((bool~) render_current::$4) goto render_current::@2
  to:render_current::@7
render_current::@2: scope:[render_current]  from render_current::@1
  (byte) current_piece_char#38 ← phi( render_current::@1/(byte) current_piece_char#52 )
  (byte) render_current::l#9 ← phi( render_current::@1/(byte) render_current::l#5 )
  (byte) render_current::i#6 ← phi( render_current::@1/(byte) render_current::i#5 )
  (byte*) current_piece_gfx#22 ← phi( render_current::@1/(byte*) current_piece_gfx#36 )
  (byte) current_xpos#12 ← phi( render_current::@1/(byte) current_xpos#29 )
  (byte) render_current::ypos2#3 ← phi( render_current::@1/(byte) render_current::ypos2#2 )
  (byte) render_screen_render#13 ← phi( render_current::@1/(byte) render_screen_render#21 )
  (byte~) render_current::$5 ← (byte) render_screen_render#13 + (byte) render_current::ypos2#3
  (byte*) render_current::screen_line#0 ← *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5)
  (byte) render_current::xpos#0 ← (byte) current_xpos#12
  (byte) render_current::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_current::@4
render_current::@7: scope:[render_current]  from render_current::@1
  (byte) current_piece_char#71 ← phi( render_current::@1/(byte) current_piece_char#52 )
  (byte*) current_piece_gfx#68 ← phi( render_current::@1/(byte*) current_piece_gfx#36 )
  (byte) current_xpos#69 ← phi( render_current::@1/(byte) current_xpos#29 )
  (byte) render_screen_render#37 ← phi( render_current::@1/(byte) render_screen_render#21 )
  (byte) render_current::l#4 ← phi( render_current::@1/(byte) render_current::l#5 )
  (byte) render_current::ypos2#6 ← phi( render_current::@1/(byte) render_current::ypos2#2 )
  (byte) render_current::i#3 ← phi( render_current::@1/(byte) render_current::i#5 )
  (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4
  to:render_current::@3
render_current::@3: scope:[render_current]  from render_current::@5 render_current::@7
  (byte) current_piece_char#64 ← phi( render_current::@5/(byte) current_piece_char#39 render_current::@7/(byte) current_piece_char#71 )
  (byte*) current_piece_gfx#54 ← phi( render_current::@5/(byte*) current_piece_gfx#23 render_current::@7/(byte*) current_piece_gfx#68 )
  (byte) render_current::i#8 ← phi( render_current::@5/(byte) render_current::i#7 render_current::@7/(byte) render_current::i#1 )
  (byte) current_xpos#48 ← phi( render_current::@5/(byte) current_xpos#68 render_current::@7/(byte) current_xpos#69 )
  (byte) render_screen_render#29 ← phi( render_current::@5/(byte) render_screen_render#36 render_current::@7/(byte) render_screen_render#37 )
  (byte) render_current::l#2 ← phi( render_current::@5/(byte) render_current::l#3 render_current::@7/(byte) render_current::l#4 )
  (byte) render_current::ypos2#4 ← phi( render_current::@5/(byte) render_current::ypos2#5 render_current::@7/(byte) render_current::ypos2#6 )
  (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) render_current::l#1 ← (byte) render_current::l#2 + rangenext(0,3)
  (bool~) render_current::$11 ← (byte) render_current::l#1 != rangelast(0,3)
  if((bool~) render_current::$11) goto render_current::@1
  to:render_current::@return
render_current::@4: scope:[render_current]  from render_current::@2 render_current::@5
  (byte) current_xpos#82 ← phi( render_current::@2/(byte) current_xpos#12 render_current::@5/(byte) current_xpos#68 )
  (byte) render_screen_render#42 ← phi( render_current::@2/(byte) render_screen_render#13 render_current::@5/(byte) render_screen_render#36 )
  (byte*) render_current::screen_line#3 ← phi( render_current::@2/(byte*) render_current::screen_line#0 render_current::@5/(byte*) render_current::screen_line#4 )
  (byte) current_piece_char#26 ← phi( render_current::@2/(byte) current_piece_char#38 render_current::@5/(byte) current_piece_char#39 )
  (byte) render_current::l#7 ← phi( render_current::@2/(byte) render_current::l#9 render_current::@5/(byte) render_current::l#3 )
  (byte) render_current::ypos2#8 ← phi( render_current::@2/(byte) render_current::ypos2#3 render_current::@5/(byte) render_current::ypos2#5 )
  (byte) render_current::c#4 ← phi( render_current::@2/(byte) render_current::c#0 render_current::@5/(byte) render_current::c#1 )
  (byte) render_current::xpos#5 ← phi( render_current::@2/(byte) render_current::xpos#0 render_current::@5/(byte) render_current::xpos#1 )
  (byte) render_current::i#4 ← phi( render_current::@2/(byte) render_current::i#6 render_current::@5/(byte) render_current::i#7 )
  (byte*) current_piece_gfx#11 ← phi( render_current::@2/(byte*) current_piece_gfx#22 render_current::@5/(byte*) current_piece_gfx#23 )
  (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#11 + (byte) render_current::i#4)
  (byte) render_current::i#2 ← ++ (byte) render_current::i#4
  (bool~) render_current::$6 ← (byte) render_current::current_cell#0 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) render_current::$7 ← ! (bool~) render_current::$6
  if((bool~) render_current::$7) goto render_current::@5
  to:render_current::@9
render_current::@5: scope:[render_current]  from render_current::@10 render_current::@4 render_current::@6
  (byte*) render_current::screen_line#4 ← phi( render_current::@10/(byte*) render_current::screen_line#1 render_current::@4/(byte*) render_current::screen_line#3 render_current::@6/(byte*) render_current::screen_line#5 )
  (byte) current_piece_char#39 ← phi( render_current::@10/(byte) current_piece_char#8 render_current::@4/(byte) current_piece_char#26 render_current::@6/(byte) current_piece_char#53 )
  (byte) current_xpos#68 ← phi( render_current::@10/(byte) current_xpos#81 render_current::@4/(byte) current_xpos#82 render_current::@6/(byte) current_xpos#83 )
  (byte) render_screen_render#36 ← phi( render_current::@10/(byte) render_screen_render#41 render_current::@4/(byte) render_screen_render#42 render_current::@6/(byte) render_screen_render#43 )
  (byte) render_current::i#7 ← phi( render_current::@10/(byte) render_current::i#9 render_current::@4/(byte) render_current::i#2 render_current::@6/(byte) render_current::i#10 )
  (byte*) current_piece_gfx#23 ← phi( render_current::@10/(byte*) current_piece_gfx#37 render_current::@4/(byte*) current_piece_gfx#11 render_current::@6/(byte*) current_piece_gfx#38 )
  (byte) render_current::l#3 ← phi( render_current::@10/(byte) render_current::l#6 render_current::@4/(byte) render_current::l#7 render_current::@6/(byte) render_current::l#8 )
  (byte) render_current::ypos2#5 ← phi( render_current::@10/(byte) render_current::ypos2#7 render_current::@4/(byte) render_current::ypos2#8 render_current::@6/(byte) render_current::ypos2#9 )
  (byte) render_current::c#2 ← phi( render_current::@10/(byte) render_current::c#3 render_current::@4/(byte) render_current::c#4 render_current::@6/(byte) render_current::c#5 )
  (byte) render_current::xpos#2 ← phi( render_current::@10/(byte) render_current::xpos#4 render_current::@4/(byte) render_current::xpos#5 render_current::@6/(byte) render_current::xpos#6 )
  (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2
  (byte) render_current::c#1 ← (byte) render_current::c#2 + rangenext(0,3)
  (bool~) render_current::$10 ← (byte) render_current::c#1 != rangelast(0,3)
  if((bool~) render_current::$10) goto render_current::@4
  to:render_current::@3
render_current::@9: scope:[render_current]  from render_current::@4
  (byte) current_xpos#90 ← phi( render_current::@4/(byte) current_xpos#82 )
  (byte) render_screen_render#47 ← phi( render_current::@4/(byte) render_screen_render#42 )
  (byte) render_current::i#11 ← phi( render_current::@4/(byte) render_current::i#2 )
  (byte*) current_piece_gfx#55 ← phi( render_current::@4/(byte*) current_piece_gfx#11 )
  (byte) render_current::l#10 ← phi( render_current::@4/(byte) render_current::l#7 )
  (byte) render_current::ypos2#10 ← phi( render_current::@4/(byte) render_current::ypos2#8 )
  (byte) render_current::c#6 ← phi( render_current::@4/(byte) render_current::c#4 )
  (byte*) render_current::screen_line#2 ← phi( render_current::@4/(byte*) render_current::screen_line#3 )
  (byte) current_piece_char#17 ← phi( render_current::@4/(byte) current_piece_char#26 )
  (byte) render_current::xpos#3 ← phi( render_current::@4/(byte) render_current::xpos#5 )
  (bool~) render_current::$8 ← (byte) render_current::xpos#3 < (byte) PLAYFIELD_COLS#0
  (bool~) render_current::$9 ← ! (bool~) render_current::$8
  if((bool~) render_current::$9) goto render_current::@6
  to:render_current::@10
render_current::@6: scope:[render_current]  from render_current::@9
  (byte*) render_current::screen_line#5 ← phi( render_current::@9/(byte*) render_current::screen_line#2 )
  (byte) current_piece_char#53 ← phi( render_current::@9/(byte) current_piece_char#17 )
  (byte) current_xpos#83 ← phi( render_current::@9/(byte) current_xpos#90 )
  (byte) render_screen_render#43 ← phi( render_current::@9/(byte) render_screen_render#47 )
  (byte) render_current::i#10 ← phi( render_current::@9/(byte) render_current::i#11 )
  (byte*) current_piece_gfx#38 ← phi( render_current::@9/(byte*) current_piece_gfx#55 )
  (byte) render_current::l#8 ← phi( render_current::@9/(byte) render_current::l#10 )
  (byte) render_current::ypos2#9 ← phi( render_current::@9/(byte) render_current::ypos2#10 )
  (byte) render_current::c#5 ← phi( render_current::@9/(byte) render_current::c#6 )
  (byte) render_current::xpos#6 ← phi( render_current::@9/(byte) render_current::xpos#3 )
  to:render_current::@5
render_current::@10: scope:[render_current]  from render_current::@9
  (byte) current_xpos#81 ← phi( render_current::@9/(byte) current_xpos#90 )
  (byte) render_screen_render#41 ← phi( render_current::@9/(byte) render_screen_render#47 )
  (byte) render_current::i#9 ← phi( render_current::@9/(byte) render_current::i#11 )
  (byte*) current_piece_gfx#37 ← phi( render_current::@9/(byte*) current_piece_gfx#55 )
  (byte) render_current::l#6 ← phi( render_current::@9/(byte) render_current::l#10 )
  (byte) render_current::ypos2#7 ← phi( render_current::@9/(byte) render_current::ypos2#10 )
  (byte) render_current::c#3 ← phi( render_current::@9/(byte) render_current::c#6 )
  (byte) render_current::xpos#4 ← phi( render_current::@9/(byte) render_current::xpos#3 )
  (byte*) render_current::screen_line#1 ← phi( render_current::@9/(byte*) render_current::screen_line#2 )
  (byte) current_piece_char#8 ← phi( render_current::@9/(byte) current_piece_char#17 )
  *((byte*) render_current::screen_line#1 + (byte) render_current::xpos#4) ← (byte) current_piece_char#8
  to:render_current::@5
render_current::@return: scope:[render_current]  from render_current::@3
  return 
  to:@return
@20: scope:[]  from @14
  (byte) keyboard_modifiers#54 ← phi( @14/(byte) keyboard_modifiers#56 )
  (byte) keyboard_events_size#72 ← phi( @14/(byte) keyboard_events_size#75 )
  (byte) render_screen_showing#41 ← phi( @14/(byte) render_screen_showing#0 )
  (byte) current_piece_char#79 ← phi( @14/(byte) current_piece_char#80 )
  (byte) current_ypos#75 ← phi( @14/(byte) current_ypos#76 )
  (byte) current_xpos#101 ← phi( @14/(byte) current_xpos#102 )
  (byte*) current_piece_gfx#91 ← phi( @14/(byte*) current_piece_gfx#92 )
  (byte) render_screen_render#55 ← phi( @14/(byte) render_screen_render#0 )
  (byte) render_screen_show#55 ← phi( @14/(byte) render_screen_show#0 )
  kickasm(location (byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@21
sprites_init: scope:[sprites_init]  from main::@16
  *((byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  *((byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) SPRITES_EXPAND_Y#0) ← *((byte*) SPRITES_MC#0)
  *((byte*) SPRITES_EXPAND_X#0) ← *((byte*) SPRITES_EXPAND_Y#0)
  (byte/signed byte/word/signed word/dword/signed dword~) sprites_init::$0 ← (byte/signed byte/word/signed word/dword/signed dword) 15 * (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte/signed word/word/dword/signed dword/signed byte~) sprites_init::$1 ← (byte/signed byte/word/signed word/dword/signed dword) 24 + (byte/signed byte/word/signed word/dword/signed dword~) sprites_init::$0
  (byte) sprites_init::xpos#0 ← (byte/signed word/word/dword/signed dword/signed byte~) sprites_init::$1
  (byte) sprites_init::s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte) sprites_init::xpos#0 sprites_init::@1/(byte) sprites_init::xpos#1 )
  (byte) sprites_init::s#2 ← phi( sprites_init/(byte) sprites_init::s#0 sprites_init::@1/(byte) sprites_init::s#1 )
  (byte~) sprites_init::$2 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) sprites_init::s2#0 ← (byte~) sprites_init::$2
  *((byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  *((byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (byte) BLACK#0
  (byte/signed word/word/dword/signed dword~) sprites_init::$3 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) sprites_init::xpos#1 ← (byte/signed word/word/dword/signed dword~) sprites_init::$3
  (byte) sprites_init::s#1 ← (byte) sprites_init::s#2 + rangenext(0,3)
  (bool~) sprites_init::$4 ← (byte) sprites_init::s#1 != rangelast(0,3)
  if((bool~) sprites_init::$4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return
@21: scope:[]  from @20
  (byte) keyboard_modifiers#52 ← phi( @20/(byte) keyboard_modifiers#54 )
  (byte) keyboard_events_size#68 ← phi( @20/(byte) keyboard_events_size#72 )
  (byte) render_screen_showing#38 ← phi( @20/(byte) render_screen_showing#41 )
  (byte) current_piece_char#78 ← phi( @20/(byte) current_piece_char#79 )
  (byte) current_ypos#74 ← phi( @20/(byte) current_ypos#75 )
  (byte) current_xpos#100 ← phi( @20/(byte) current_xpos#101 )
  (byte*) current_piece_gfx#90 ← phi( @20/(byte*) current_piece_gfx#91 )
  (byte) render_screen_render#53 ← phi( @20/(byte) render_screen_render#55 )
  (byte) render_screen_show#52 ← phi( @20/(byte) render_screen_show#55 )
  (byte) IRQ_RASTER_FIRST#0 ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) irq_raster_next#0 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte*) toSpritePtr1_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @21
  (byte) irq_raster_next#23 ← phi( @21/(byte) irq_raster_next#0 )
  (byte) keyboard_modifiers#49 ← phi( @21/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#65 ← phi( @21/(byte) keyboard_events_size#68 )
  (byte) render_screen_showing#35 ← phi( @21/(byte) render_screen_showing#38 )
  (byte) current_piece_char#72 ← phi( @21/(byte) current_piece_char#78 )
  (byte) current_ypos#70 ← phi( @21/(byte) current_ypos#74 )
  (byte) current_xpos#96 ← phi( @21/(byte) current_xpos#100 )
  (byte*) current_piece_gfx#84 ← phi( @21/(byte*) current_piece_gfx#90 )
  (byte) render_screen_render#51 ← phi( @21/(byte) render_screen_render#53 )
  (byte) render_screen_show#49 ← phi( @21/(byte) render_screen_show#52 )
  (byte) irq_sprite_ypos#23 ← phi( @21/(byte) irq_sprite_ypos#0 )
  (byte*) toSpritePtr1_sprite#1 ← phi( @21/(byte*) toSpritePtr1_sprite#0 )
  (word) toSpritePtr1_$0#0 ← ((word)) (byte*) toSpritePtr1_sprite#1
  (word) toSpritePtr1_$1#0 ← (word) toSpritePtr1_$0#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) toSpritePtr1_$2#0 ← ((byte)) (word) toSpritePtr1_$1#0
  (byte) toSpritePtr1_return#0 ← (byte) toSpritePtr1_$2#0
  to:toSpritePtr1_@return
toSpritePtr1_@return: scope:[]  from toSpritePtr1
  (byte) irq_raster_next#22 ← phi( toSpritePtr1/(byte) irq_raster_next#23 )
  (byte) keyboard_modifiers#45 ← phi( toSpritePtr1/(byte) keyboard_modifiers#49 )
  (byte) keyboard_events_size#57 ← phi( toSpritePtr1/(byte) keyboard_events_size#65 )
  (byte) render_screen_showing#31 ← phi( toSpritePtr1/(byte) render_screen_showing#35 )
  (byte) current_piece_char#65 ← phi( toSpritePtr1/(byte) current_piece_char#72 )
  (byte) current_ypos#65 ← phi( toSpritePtr1/(byte) current_ypos#70 )
  (byte) current_xpos#91 ← phi( toSpritePtr1/(byte) current_xpos#96 )
  (byte*) current_piece_gfx#78 ← phi( toSpritePtr1/(byte*) current_piece_gfx#84 )
  (byte) render_screen_render#48 ← phi( toSpritePtr1/(byte) render_screen_render#51 )
  (byte) render_screen_show#46 ← phi( toSpritePtr1/(byte) render_screen_show#49 )
  (byte) irq_sprite_ypos#21 ← phi( toSpritePtr1/(byte) irq_sprite_ypos#23 )
  (byte) toSpritePtr1_return#2 ← phi( toSpritePtr1/(byte) toSpritePtr1_return#0 )
  (byte) toSpritePtr1_return#1 ← (byte) toSpritePtr1_return#2
  to:@33
@33: scope:[]  from toSpritePtr1_@return
  (byte) irq_raster_next#21 ← phi( toSpritePtr1_@return/(byte) irq_raster_next#22 )
  (byte) keyboard_modifiers#39 ← phi( toSpritePtr1_@return/(byte) keyboard_modifiers#45 )
  (byte) keyboard_events_size#48 ← phi( toSpritePtr1_@return/(byte) keyboard_events_size#57 )
  (byte) render_screen_showing#27 ← phi( toSpritePtr1_@return/(byte) render_screen_showing#31 )
  (byte) current_piece_char#54 ← phi( toSpritePtr1_@return/(byte) current_piece_char#65 )
  (byte) current_ypos#60 ← phi( toSpritePtr1_@return/(byte) current_ypos#65 )
  (byte) current_xpos#84 ← phi( toSpritePtr1_@return/(byte) current_xpos#91 )
  (byte*) current_piece_gfx#69 ← phi( toSpritePtr1_@return/(byte*) current_piece_gfx#78 )
  (byte) render_screen_render#44 ← phi( toSpritePtr1_@return/(byte) render_screen_render#48 )
  (byte) render_screen_show#43 ← phi( toSpritePtr1_@return/(byte) render_screen_show#46 )
  (byte) irq_sprite_ypos#20 ← phi( toSpritePtr1_@return/(byte) irq_sprite_ypos#21 )
  (byte) toSpritePtr1_return#3 ← phi( toSpritePtr1_@return/(byte) toSpritePtr1_return#1 )
  (byte~) $4 ← (byte) toSpritePtr1_return#3
  (byte) irq_sprite_ptr#0 ← (byte~) $4
  (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@23
sprites_irq_init: scope:[sprites_irq_init]  from main::@17
  asm { sei  }
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  *((byte*) RASTER#0) ← (byte) IRQ_RASTER_FIRST#0
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  (void()*~) sprites_irq_init::$0 ← & interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) sprites_irq_init::$0
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  (byte) irq_raster_next#17 ← phi( @32/(byte) irq_raster_next#18 )
  (byte) irq_cnt#15 ← phi( @32/(byte) irq_cnt#17 )
  (byte) render_screen_showing#15 ← phi( @32/(byte) render_screen_showing#14 )
  (byte) irq_sprite_ptr#10 ← phi( @32/(byte) irq_sprite_ptr#15 )
  (byte) irq_sprite_ypos#4 ← phi( @32/(byte) irq_sprite_ypos#8 )
  (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#4
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0
  to:sprites_irq::@1
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq sprites_irq::@1
  (byte) irq_raster_next#16 ← phi( sprites_irq/(byte) irq_raster_next#17 sprites_irq::@1/(byte) irq_raster_next#16 )
  (byte) irq_cnt#12 ← phi( sprites_irq/(byte) irq_cnt#15 sprites_irq::@1/(byte) irq_cnt#12 )
  (byte) render_screen_showing#11 ← phi( sprites_irq/(byte) render_screen_showing#15 sprites_irq::@1/(byte) render_screen_showing#11 )
  (byte) irq_sprite_ptr#7 ← phi( sprites_irq/(byte) irq_sprite_ptr#10 sprites_irq::@1/(byte) irq_sprite_ptr#7 )
  (byte) irq_sprite_ypos#5 ← phi( sprites_irq/(byte) irq_sprite_ypos#4 sprites_irq::@1/(byte) irq_sprite_ypos#5 )
  (bool~) sprites_irq::$0 ← *((byte*) RASTER#0) < (byte) irq_sprite_ypos#5
  if((bool~) sprites_irq::$0) goto sprites_irq::@1
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@1
  (byte) irq_sprite_ypos#16 ← phi( sprites_irq::@1/(byte) irq_sprite_ypos#5 )
  (byte) irq_raster_next#14 ← phi( sprites_irq::@1/(byte) irq_raster_next#16 )
  (byte) irq_cnt#9 ← phi( sprites_irq::@1/(byte) irq_cnt#12 )
  (byte) render_screen_showing#7 ← phi( sprites_irq::@1/(byte) render_screen_showing#11 )
  (byte) irq_sprite_ptr#4 ← phi( sprites_irq::@1/(byte) irq_sprite_ptr#7 )
  (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#4
  (bool~) sprites_irq::$1 ← (byte) render_screen_showing#7 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) sprites_irq::$1) goto sprites_irq::@2
  to:sprites_irq::@8
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@7
  (byte) irq_sprite_ptr#11 ← phi( sprites_irq::@7/(byte) irq_sprite_ptr#4 )
  (byte) irq_sprite_ypos#11 ← phi( sprites_irq::@7/(byte) irq_sprite_ypos#16 )
  (byte) irq_raster_next#10 ← phi( sprites_irq::@7/(byte) irq_raster_next#14 )
  (byte) irq_cnt#6 ← phi( sprites_irq::@7/(byte) irq_cnt#9 )
  (byte) sprites_irq::ptr#5 ← phi( sprites_irq::@7/(byte) sprites_irq::ptr#0 )
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) sprites_irq::ptr#5
  (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#5
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1
  (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@3
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq::@7
  (byte) irq_sprite_ptr#12 ← phi( sprites_irq::@7/(byte) irq_sprite_ptr#4 )
  (byte) irq_sprite_ypos#12 ← phi( sprites_irq::@7/(byte) irq_sprite_ypos#16 )
  (byte) irq_raster_next#11 ← phi( sprites_irq::@7/(byte) irq_raster_next#14 )
  (byte) irq_cnt#7 ← phi( sprites_irq::@7/(byte) irq_cnt#9 )
  (byte) sprites_irq::ptr#6 ← phi( sprites_irq::@7/(byte) sprites_irq::ptr#0 )
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) sprites_irq::ptr#6
  (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#6
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3
  (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@3
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2 sprites_irq::@8
  (byte) irq_sprite_ptr#8 ← phi( sprites_irq::@2/(byte) irq_sprite_ptr#11 sprites_irq::@8/(byte) irq_sprite_ptr#12 )
  (byte) irq_sprite_ypos#9 ← phi( sprites_irq::@2/(byte) irq_sprite_ypos#11 sprites_irq::@8/(byte) irq_sprite_ypos#12 )
  (byte) irq_raster_next#7 ← phi( sprites_irq::@2/(byte) irq_raster_next#10 sprites_irq::@8/(byte) irq_raster_next#11 )
  (byte) irq_cnt#4 ← phi( sprites_irq::@2/(byte) irq_cnt#6 sprites_irq::@8/(byte) irq_cnt#7 )
  (byte) irq_cnt#1 ← ++ (byte) irq_cnt#4
  (bool~) sprites_irq::$2 ← (byte) irq_cnt#1 == (byte/signed byte/word/signed word/dword/signed dword) 10
  if((bool~) sprites_irq::$2) goto sprites_irq::@4
  to:sprites_irq::@10
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@3
  (byte) irq_cnt#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) irq_raster_next#1 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte*) sprites_irq::toSpritePtr2_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@4
  (byte) irq_sprite_ypos#22 ← phi( sprites_irq::@4/(byte) irq_sprite_ypos#1 )
  (byte) irq_cnt#18 ← phi( sprites_irq::@4/(byte) irq_cnt#2 )
  (byte) irq_raster_next#15 ← phi( sprites_irq::@4/(byte) irq_raster_next#1 )
  (byte*) sprites_irq::toSpritePtr2_sprite#1 ← phi( sprites_irq::@4/(byte*) sprites_irq::toSpritePtr2_sprite#0 )
  (word) sprites_irq::toSpritePtr2_$0#0 ← ((word)) (byte*) sprites_irq::toSpritePtr2_sprite#1
  (word) sprites_irq::toSpritePtr2_$1#0 ← (word) sprites_irq::toSpritePtr2_$0#0 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) sprites_irq::toSpritePtr2_$2#0 ← ((byte)) (word) sprites_irq::toSpritePtr2_$1#0
  (byte) sprites_irq::toSpritePtr2_return#0 ← (byte) sprites_irq::toSpritePtr2_$2#0
  to:sprites_irq::toSpritePtr2_@return
sprites_irq::toSpritePtr2_@return: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  (byte) irq_sprite_ypos#19 ← phi( sprites_irq::toSpritePtr2/(byte) irq_sprite_ypos#22 )
  (byte) irq_cnt#16 ← phi( sprites_irq::toSpritePtr2/(byte) irq_cnt#18 )
  (byte) irq_raster_next#12 ← phi( sprites_irq::toSpritePtr2/(byte) irq_raster_next#15 )
  (byte) sprites_irq::toSpritePtr2_return#2 ← phi( sprites_irq::toSpritePtr2/(byte) sprites_irq::toSpritePtr2_return#0 )
  (byte) sprites_irq::toSpritePtr2_return#1 ← (byte) sprites_irq::toSpritePtr2_return#2
  to:sprites_irq::@13
sprites_irq::@13: scope:[sprites_irq]  from sprites_irq::toSpritePtr2_@return
  (byte) irq_sprite_ypos#17 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_sprite_ypos#19 )
  (byte) irq_cnt#14 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_cnt#16 )
  (byte) irq_raster_next#8 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_raster_next#12 )
  (byte) sprites_irq::toSpritePtr2_return#3 ← phi( sprites_irq::toSpritePtr2_@return/(byte) sprites_irq::toSpritePtr2_return#1 )
  (byte~) sprites_irq::$3 ← (byte) sprites_irq::toSpritePtr2_return#3
  (byte) irq_sprite_ptr#1 ← (byte~) sprites_irq::$3
  to:sprites_irq::@5
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@3
  (byte) irq_cnt#13 ← phi( sprites_irq::@3/(byte) irq_cnt#1 )
  (byte) irq_sprite_ptr#5 ← phi( sprites_irq::@3/(byte) irq_sprite_ptr#8 )
  (byte) irq_sprite_ypos#6 ← phi( sprites_irq::@3/(byte) irq_sprite_ypos#9 )
  (byte) irq_raster_next#4 ← phi( sprites_irq::@3/(byte) irq_raster_next#7 )
  (byte) irq_raster_next#2 ← (byte) irq_raster_next#4 + (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#6 + (byte/signed byte/word/signed word/dword/signed dword) 21
  (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#5 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@10 sprites_irq::@13
  (byte) irq_sprite_ptr#14 ← phi( sprites_irq::@10/(byte) irq_sprite_ptr#2 sprites_irq::@13/(byte) irq_sprite_ptr#1 )
  (byte) irq_sprite_ypos#14 ← phi( sprites_irq::@10/(byte) irq_sprite_ypos#2 sprites_irq::@13/(byte) irq_sprite_ypos#17 )
  (byte) irq_cnt#11 ← phi( sprites_irq::@10/(byte) irq_cnt#13 sprites_irq::@13/(byte) irq_cnt#14 )
  (byte) irq_raster_next#5 ← phi( sprites_irq::@10/(byte) irq_raster_next#2 sprites_irq::@13/(byte) irq_raster_next#8 )
  (byte) sprites_irq::raster_next#0 ← (byte) irq_raster_next#5
  (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) sprites_irq::$5 ← (byte~) sprites_irq::$4 == (byte/signed byte/word/signed word/dword/signed dword) 3
  (bool~) sprites_irq::$6 ← ! (bool~) sprites_irq::$5
  if((bool~) sprites_irq::$6) goto sprites_irq::@6
  to:sprites_irq::@12
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@12 sprites_irq::@5
  (byte) irq_sprite_ptr#9 ← phi( sprites_irq::@12/(byte) irq_sprite_ptr#13 sprites_irq::@5/(byte) irq_sprite_ptr#14 )
  (byte) irq_sprite_ypos#10 ← phi( sprites_irq::@12/(byte) irq_sprite_ypos#13 sprites_irq::@5/(byte) irq_sprite_ypos#14 )
  (byte) irq_raster_next#9 ← phi( sprites_irq::@12/(byte) irq_raster_next#13 sprites_irq::@5/(byte) irq_raster_next#5 )
  (byte) irq_cnt#8 ← phi( sprites_irq::@12/(byte) irq_cnt#10 sprites_irq::@5/(byte) irq_cnt#11 )
  (byte) sprites_irq::raster_next#2 ← phi( sprites_irq::@12/(byte) sprites_irq::raster_next#1 sprites_irq::@5/(byte) sprites_irq::raster_next#0 )
  *((byte*) RASTER#0) ← (byte) sprites_irq::raster_next#2
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@12: scope:[sprites_irq]  from sprites_irq::@5
  (byte) irq_sprite_ptr#13 ← phi( sprites_irq::@5/(byte) irq_sprite_ptr#14 )
  (byte) irq_sprite_ypos#13 ← phi( sprites_irq::@5/(byte) irq_sprite_ypos#14 )
  (byte) irq_raster_next#13 ← phi( sprites_irq::@5/(byte) irq_raster_next#5 )
  (byte) irq_cnt#10 ← phi( sprites_irq::@5/(byte) irq_cnt#11 )
  (byte) sprites_irq::raster_next#3 ← phi( sprites_irq::@5/(byte) sprites_irq::raster_next#0 )
  (byte) sprites_irq::raster_next#1 ← (byte) sprites_irq::raster_next#3 - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sprites_irq::@6
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@6
  (byte) irq_sprite_ptr#6 ← phi( sprites_irq::@6/(byte) irq_sprite_ptr#9 )
  (byte) irq_sprite_ypos#7 ← phi( sprites_irq::@6/(byte) irq_sprite_ypos#10 )
  (byte) irq_raster_next#6 ← phi( sprites_irq::@6/(byte) irq_raster_next#9 )
  (byte) irq_cnt#5 ← phi( sprites_irq::@6/(byte) irq_cnt#8 )
  (byte) irq_cnt#3 ← (byte) irq_cnt#5
  (byte) irq_raster_next#3 ← (byte) irq_raster_next#6
  (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#7
  (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#6
  return 
  to:@return
@23: scope:[]  from @33
  (byte) irq_raster_next#20 ← phi( @33/(byte) irq_raster_next#21 )
  (byte) irq_cnt#20 ← phi( @33/(byte) irq_cnt#0 )
  (byte) irq_sprite_ptr#17 ← phi( @33/(byte) irq_sprite_ptr#0 )
  (byte) keyboard_modifiers#34 ← phi( @33/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#40 ← phi( @33/(byte) keyboard_events_size#48 )
  (byte) render_screen_showing#21 ← phi( @33/(byte) render_screen_showing#27 )
  (byte) current_piece_char#44 ← phi( @33/(byte) current_piece_char#54 )
  (byte) current_ypos#55 ← phi( @33/(byte) current_ypos#60 )
  (byte) current_xpos#74 ← phi( @33/(byte) current_xpos#84 )
  (byte*) current_piece_gfx#62 ← phi( @33/(byte*) current_piece_gfx#69 )
  (byte) render_screen_render#38 ← phi( @33/(byte) render_screen_render#44 )
  (byte) render_screen_show#35 ← phi( @33/(byte) render_screen_show#43 )
  (byte) irq_sprite_ypos#18 ← phi( @33/(byte) irq_sprite_ypos#20 )
  (byte/signed byte/word/signed word/dword/signed dword~) $5 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $6 ← (byte/signed byte/word/signed word/dword/signed dword~) $5 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$6]) PIECE_T#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $7 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $8 ← (byte/signed byte/word/signed word/dword/signed dword~) $7 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$8]) PIECE_S#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $9 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $10 ← (byte/signed byte/word/signed word/dword/signed dword~) $9 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$10]) PIECE_Z#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $11 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $12 ← (byte/signed byte/word/signed word/dword/signed dword~) $11 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$12]) PIECE_L#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $13 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $14 ← (byte/signed byte/word/signed word/dword/signed dword~) $13 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$14]) PIECE_J#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $15 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $16 ← (byte/signed byte/word/signed word/dword/signed dword~) $15 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$16]) PIECE_O#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (byte/signed byte/word/signed word/dword/signed dword~) $17 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte/signed word/word/dword/signed dword/signed byte~) $18 ← (byte/signed byte/word/signed word/dword/signed dword~) $17 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$18]) PIECE_I#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
  (word~) $19 ← ((word)) (byte[$6]) PIECE_T#0
  (word~) $20 ← ((word)) (byte[$8]) PIECE_S#0
  (word~) $21 ← ((word)) (byte[$10]) PIECE_Z#0
  (word~) $22 ← ((word)) (byte[$14]) PIECE_J#0
  (word~) $23 ← ((word)) (byte[$16]) PIECE_O#0
  (word~) $24 ← ((word)) (byte[$18]) PIECE_I#0
  (word~) $25 ← ((word)) (byte[$12]) PIECE_L#0
  (word[]) PIECES#0 ← { (word~) $19, (word~) $20, (word~) $21, (word~) $22, (word~) $23, (word~) $24, (word~) $25 }
  (byte[]) PIECES_CHARS#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/signed byte/word/signed word/dword/signed dword) 89, (byte/word/signed word/dword/signed dword) 153, (byte/signed byte/word/signed word/dword/signed dword) 89, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/word/signed word/dword/signed dword) 153 }
  (byte[]) PIECES_START_X#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4 }
  (byte[]) PIECES_START_Y#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1 }
  (byte*[PLAYFIELD_LINES#0]) playfield_lines#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  (byte/signed word/word/dword/signed dword~) $26 ← (byte) PLAYFIELD_LINES#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte[$26]) playfield_lines_idx#0 ← { fill( $26, 0) }
  (byte*) current_piece#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_orientation#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) current_movedown_slow#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  (byte) current_movedown_fast#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) current_movedown_counter#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@26
play_move_down: scope:[play_move_down]  from main::@25
  (byte) current_piece_char#73 ← phi( main::@25/(byte) current_piece_char#23 )
  (byte*) current_piece_gfx#85 ← phi( main::@25/(byte*) current_piece_gfx#32 )
  (byte*) current_piece#66 ← phi( main::@25/(byte*) current_piece#27 )
  (byte) current_orientation#67 ← phi( main::@25/(byte) current_orientation#37 )
  (byte) current_xpos#92 ← phi( main::@25/(byte) current_xpos#44 )
  (byte) current_ypos#66 ← phi( main::@25/(byte) current_ypos#36 )
  (byte) play_move_down::key_event#1 ← phi( main::@25/(byte) play_move_down::key_event#0 )
  (byte) current_movedown_counter#7 ← phi( main::@25/(byte) current_movedown_counter#14 )
  (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#7
  (byte) play_move_down::movedown#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
  (bool~) play_move_down::$1 ← ! (bool~) play_move_down::$0
  if((bool~) play_move_down::$1) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  (byte) current_piece_char#66 ← phi( play_move_down/(byte) current_piece_char#73 play_move_down::@8/(byte) current_piece_char#74 )
  (byte*) current_piece_gfx#79 ← phi( play_move_down/(byte*) current_piece_gfx#85 play_move_down::@8/(byte*) current_piece_gfx#86 )
  (byte*) current_piece#61 ← phi( play_move_down/(byte*) current_piece#66 play_move_down::@8/(byte*) current_piece#67 )
  (byte) current_orientation#62 ← phi( play_move_down/(byte) current_orientation#67 play_move_down::@8/(byte) current_orientation#68 )
  (byte) current_xpos#85 ← phi( play_move_down/(byte) current_xpos#92 play_move_down::@8/(byte) current_xpos#93 )
  (byte) current_ypos#61 ← phi( play_move_down/(byte) current_ypos#66 play_move_down::@8/(byte) current_ypos#67 )
  (byte) play_move_down::movedown#12 ← phi( play_move_down/(byte) play_move_down::movedown#0 play_move_down::@8/(byte) play_move_down::movedown#1 )
  (byte) current_movedown_counter#21 ← phi( play_move_down/(byte) current_movedown_counter#1 play_move_down::@8/(byte) current_movedown_counter#28 )
  (byte) keyboard_event_pressed::keycode#4 ← (byte) KEY_SPACE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#6 ← (byte) keyboard_event_pressed::return#5
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  (byte) current_piece_char#56 ← phi( play_move_down::@1/(byte) current_piece_char#66 )
  (byte*) current_piece_gfx#71 ← phi( play_move_down::@1/(byte*) current_piece_gfx#79 )
  (byte*) current_piece#55 ← phi( play_move_down::@1/(byte*) current_piece#61 )
  (byte) current_orientation#53 ← phi( play_move_down::@1/(byte) current_orientation#62 )
  (byte) current_xpos#71 ← phi( play_move_down::@1/(byte) current_xpos#85 )
  (byte) current_ypos#52 ← phi( play_move_down::@1/(byte) current_ypos#61 )
  (byte) play_move_down::movedown#10 ← phi( play_move_down::@1/(byte) play_move_down::movedown#12 )
  (byte) current_movedown_counter#16 ← phi( play_move_down::@1/(byte) current_movedown_counter#21 )
  (byte) keyboard_event_pressed::return#12 ← phi( play_move_down::@1/(byte) keyboard_event_pressed::return#6 )
  (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$4 ← ! (bool~) play_move_down::$3
  if((bool~) play_move_down::$4) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@8: scope:[play_move_down]  from play_move_down
  (byte) current_piece_char#74 ← phi( play_move_down/(byte) current_piece_char#73 )
  (byte*) current_piece_gfx#86 ← phi( play_move_down/(byte*) current_piece_gfx#85 )
  (byte*) current_piece#67 ← phi( play_move_down/(byte*) current_piece#66 )
  (byte) current_orientation#68 ← phi( play_move_down/(byte) current_orientation#67 )
  (byte) current_xpos#93 ← phi( play_move_down/(byte) current_xpos#92 )
  (byte) current_ypos#67 ← phi( play_move_down/(byte) current_ypos#66 )
  (byte) current_movedown_counter#28 ← phi( play_move_down/(byte) current_movedown_counter#1 )
  (byte) play_move_down::movedown#4 ← phi( play_move_down/(byte) play_move_down::movedown#0 )
  (byte) play_move_down::movedown#1 ← ++ (byte) play_move_down::movedown#4
  to:play_move_down::@1
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@3
  (byte) current_piece_char#41 ← phi( play_move_down::@10/(byte) current_piece_char#55 play_move_down::@17/(byte) current_piece_char#56 play_move_down::@3/(byte) current_piece_char#57 )
  (byte*) current_piece_gfx#57 ← phi( play_move_down::@10/(byte*) current_piece_gfx#70 play_move_down::@17/(byte*) current_piece_gfx#71 play_move_down::@3/(byte*) current_piece_gfx#72 )
  (byte*) current_piece#44 ← phi( play_move_down::@10/(byte*) current_piece#54 play_move_down::@17/(byte*) current_piece#55 play_move_down::@3/(byte*) current_piece#56 )
  (byte) current_orientation#42 ← phi( play_move_down::@10/(byte) current_orientation#52 play_move_down::@17/(byte) current_orientation#53 play_move_down::@3/(byte) current_orientation#54 )
  (byte) current_xpos#50 ← phi( play_move_down::@10/(byte) current_xpos#70 play_move_down::@17/(byte) current_xpos#71 play_move_down::@3/(byte) current_xpos#72 )
  (byte) current_ypos#40 ← phi( play_move_down::@10/(byte) current_ypos#51 play_move_down::@17/(byte) current_ypos#52 play_move_down::@3/(byte) current_ypos#53 )
  (byte) play_move_down::movedown#9 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@3/(byte) play_move_down::movedown#11 )
  (byte) current_movedown_counter#8 ← phi( play_move_down::@10/(byte) current_movedown_counter#15 play_move_down::@17/(byte) current_movedown_counter#16 play_move_down::@3/(byte) current_movedown_counter#17 )
  (bool~) play_move_down::$7 ← (byte) current_movedown_counter#8 >= (byte) current_movedown_slow#0
  (bool~) play_move_down::$8 ← ! (bool~) play_move_down::$7
  if((bool~) play_move_down::$8) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  (byte) current_piece_char#67 ← phi( play_move_down::@17/(byte) current_piece_char#56 )
  (byte*) current_piece_gfx#80 ← phi( play_move_down::@17/(byte*) current_piece_gfx#71 )
  (byte*) current_piece#62 ← phi( play_move_down::@17/(byte*) current_piece#55 )
  (byte) current_orientation#63 ← phi( play_move_down::@17/(byte) current_orientation#53 )
  (byte) current_xpos#86 ← phi( play_move_down::@17/(byte) current_xpos#71 )
  (byte) current_ypos#62 ← phi( play_move_down::@17/(byte) current_ypos#52 )
  (byte) play_move_down::movedown#8 ← phi( play_move_down::@17/(byte) play_move_down::movedown#10 )
  (byte) current_movedown_counter#9 ← phi( play_move_down::@17/(byte) current_movedown_counter#16 )
  (bool~) play_move_down::$5 ← (byte) current_movedown_counter#9 >= (byte) current_movedown_fast#0
  (bool~) play_move_down::$6 ← ! (bool~) play_move_down::$5
  if((bool~) play_move_down::$6) goto play_move_down::@3
  to:play_move_down::@10
play_move_down::@3: scope:[play_move_down]  from play_move_down::@9
  (byte) current_piece_char#57 ← phi( play_move_down::@9/(byte) current_piece_char#67 )
  (byte*) current_piece_gfx#72 ← phi( play_move_down::@9/(byte*) current_piece_gfx#80 )
  (byte*) current_piece#56 ← phi( play_move_down::@9/(byte*) current_piece#62 )
  (byte) current_orientation#54 ← phi( play_move_down::@9/(byte) current_orientation#63 )
  (byte) current_xpos#72 ← phi( play_move_down::@9/(byte) current_xpos#86 )
  (byte) current_ypos#53 ← phi( play_move_down::@9/(byte) current_ypos#62 )
  (byte) play_move_down::movedown#11 ← phi( play_move_down::@9/(byte) play_move_down::movedown#8 )
  (byte) current_movedown_counter#17 ← phi( play_move_down::@9/(byte) current_movedown_counter#9 )
  to:play_move_down::@2
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  (byte) current_piece_char#55 ← phi( play_move_down::@9/(byte) current_piece_char#67 )
  (byte*) current_piece_gfx#70 ← phi( play_move_down::@9/(byte*) current_piece_gfx#80 )
  (byte*) current_piece#54 ← phi( play_move_down::@9/(byte*) current_piece#62 )
  (byte) current_orientation#52 ← phi( play_move_down::@9/(byte) current_orientation#63 )
  (byte) current_xpos#70 ← phi( play_move_down::@9/(byte) current_xpos#86 )
  (byte) current_ypos#51 ← phi( play_move_down::@9/(byte) current_ypos#62 )
  (byte) current_movedown_counter#15 ← phi( play_move_down::@9/(byte) current_movedown_counter#9 )
  (byte) play_move_down::movedown#5 ← phi( play_move_down::@9/(byte) play_move_down::movedown#8 )
  (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#5
  to:play_move_down::@2
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  (byte) current_piece_char#27 ← phi( play_move_down::@11/(byte) current_piece_char#40 play_move_down::@2/(byte) current_piece_char#41 )
  (byte*) current_piece_gfx#39 ← phi( play_move_down::@11/(byte*) current_piece_gfx#56 play_move_down::@2/(byte*) current_piece_gfx#57 )
  (byte*) current_piece#30 ← phi( play_move_down::@11/(byte*) current_piece#43 play_move_down::@2/(byte*) current_piece#44 )
  (byte) current_movedown_counter#22 ← phi( play_move_down::@11/(byte) current_movedown_counter#29 play_move_down::@2/(byte) current_movedown_counter#8 )
  (byte) current_orientation#26 ← phi( play_move_down::@11/(byte) current_orientation#41 play_move_down::@2/(byte) current_orientation#42 )
  (byte) current_xpos#30 ← phi( play_move_down::@11/(byte) current_xpos#49 play_move_down::@2/(byte) current_xpos#50 )
  (byte) current_ypos#25 ← phi( play_move_down::@11/(byte) current_ypos#39 play_move_down::@2/(byte) current_ypos#40 )
  (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#9 )
  (bool~) play_move_down::$9 ← (byte) play_move_down::movedown#6 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_move_down::$10 ← ! (bool~) play_move_down::$9
  if((bool~) play_move_down::$10) goto play_move_down::@5
  to:play_move_down::@12
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  (byte) current_piece_char#40 ← phi( play_move_down::@2/(byte) current_piece_char#41 )
  (byte*) current_piece_gfx#56 ← phi( play_move_down::@2/(byte*) current_piece_gfx#57 )
  (byte*) current_piece#43 ← phi( play_move_down::@2/(byte*) current_piece#44 )
  (byte) current_movedown_counter#29 ← phi( play_move_down::@2/(byte) current_movedown_counter#8 )
  (byte) current_orientation#41 ← phi( play_move_down::@2/(byte) current_orientation#42 )
  (byte) current_xpos#49 ← phi( play_move_down::@2/(byte) current_xpos#50 )
  (byte) current_ypos#39 ← phi( play_move_down::@2/(byte) current_ypos#40 )
  (byte) play_move_down::movedown#7 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 )
  (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@5: scope:[play_move_down]  from play_move_down::@4
  (byte) current_piece_char#19 ← phi( play_move_down::@4/(byte) current_piece_char#27 )
  (byte) current_xpos#32 ← phi( play_move_down::@4/(byte) current_xpos#30 )
  (byte*) current_piece_gfx#25 ← phi( play_move_down::@4/(byte*) current_piece_gfx#39 )
  (byte) current_orientation#28 ← phi( play_move_down::@4/(byte) current_orientation#26 )
  (byte*) current_piece#19 ← phi( play_move_down::@4/(byte*) current_piece#30 )
  (byte) current_ypos#28 ← phi( play_move_down::@4/(byte) current_ypos#25 )
  (byte) current_movedown_counter#18 ← phi( play_move_down::@4/(byte) current_movedown_counter#22 )
  (byte) play_move_down::return#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_down::@return
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  (byte) current_piece_char#58 ← phi( play_move_down::@4/(byte) current_piece_char#27 )
  (byte*) current_piece_gfx#73 ← phi( play_move_down::@4/(byte*) current_piece_gfx#39 )
  (byte*) current_piece#22 ← phi( play_move_down::@4/(byte*) current_piece#30 )
  (byte) current_orientation#12 ← phi( play_move_down::@4/(byte) current_orientation#26 )
  (byte) current_xpos#13 ← phi( play_move_down::@4/(byte) current_xpos#30 )
  (byte) current_ypos#10 ← phi( play_move_down::@4/(byte) current_ypos#25 )
  (byte/signed word/word/dword/signed dword~) play_move_down::$11 ← (byte) current_ypos#10 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_collision::xpos#0 ← (byte) current_xpos#13
  (byte) play_collision::ypos#0 ← (byte/signed word/word/dword/signed dword~) play_move_down::$11
  (byte) play_collision::orientation#0 ← (byte) current_orientation#12
  call play_collision 
  (byte) play_collision::return#0 ← (byte) play_collision::return#5
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  (byte) current_piece_char#42 ← phi( play_move_down::@12/(byte) current_piece_char#58 )
  (byte) current_xpos#73 ← phi( play_move_down::@12/(byte) current_xpos#13 )
  (byte*) current_piece_gfx#58 ← phi( play_move_down::@12/(byte*) current_piece_gfx#73 )
  (byte) current_orientation#55 ← phi( play_move_down::@12/(byte) current_orientation#12 )
  (byte*) current_piece#45 ← phi( play_move_down::@12/(byte*) current_piece#22 )
  (byte) current_ypos#26 ← phi( play_move_down::@12/(byte) current_ypos#10 )
  (byte) play_collision::return#10 ← phi( play_move_down::@12/(byte) play_collision::return#0 )
  (byte~) play_move_down::$12 ← (byte) play_collision::return#10
  (bool~) play_move_down::$13 ← (byte~) play_move_down::$12 == (byte) COLLISION_NONE#0
  if((bool~) play_move_down::$13) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  (byte) current_piece_char#29 ← phi( play_move_down::@18/(byte) current_piece_char#42 )
  (byte) current_xpos#52 ← phi( play_move_down::@18/(byte) current_xpos#73 )
  (byte*) current_piece_gfx#41 ← phi( play_move_down::@18/(byte*) current_piece_gfx#58 )
  (byte) current_orientation#44 ← phi( play_move_down::@18/(byte) current_orientation#55 )
  (byte*) current_piece#32 ← phi( play_move_down::@18/(byte*) current_piece#45 )
  (byte) current_ypos#11 ← phi( play_move_down::@18/(byte) current_ypos#26 )
  (byte) current_ypos#0 ← ++ (byte) current_ypos#11
  to:play_move_down::@7
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  (byte) current_piece_char#43 ← phi( play_move_down::@18/(byte) current_piece_char#42 )
  (byte*) current_piece_gfx#59 ← phi( play_move_down::@18/(byte*) current_piece_gfx#58 )
  (byte) current_orientation#56 ← phi( play_move_down::@18/(byte) current_orientation#55 )
  (byte*) current_piece#46 ← phi( play_move_down::@18/(byte*) current_piece#45 )
  (byte) current_xpos#58 ← phi( play_move_down::@18/(byte) current_xpos#73 )
  (byte) current_ypos#34 ← phi( play_move_down::@18/(byte) current_ypos#26 )
  call play_lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  (byte) current_piece_char#28 ← phi( play_move_down::@13/(byte) current_piece_char#43 )
  (byte) current_ypos#41 ← phi( play_move_down::@13/(byte) current_ypos#34 )
  (byte) current_xpos#51 ← phi( play_move_down::@13/(byte) current_xpos#58 )
  (byte*) current_piece_gfx#40 ← phi( play_move_down::@13/(byte*) current_piece_gfx#59 )
  (byte) current_orientation#43 ← phi( play_move_down::@13/(byte) current_orientation#56 )
  (byte*) current_piece#31 ← phi( play_move_down::@13/(byte*) current_piece#46 )
  call play_remove_lines 
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  (byte) current_piece_char#18 ← phi( play_move_down::@19/(byte) current_piece_char#28 )
  (byte) current_ypos#27 ← phi( play_move_down::@19/(byte) current_ypos#41 )
  (byte) current_xpos#31 ← phi( play_move_down::@19/(byte) current_xpos#51 )
  (byte*) current_piece_gfx#24 ← phi( play_move_down::@19/(byte*) current_piece_gfx#40 )
  (byte) current_orientation#27 ← phi( play_move_down::@19/(byte) current_orientation#43 )
  (byte*) current_piece#18 ← phi( play_move_down::@19/(byte*) current_piece#31 )
  call play_spawn_current 
  to:play_move_down::@21
play_move_down::@21: scope:[play_move_down]  from play_move_down::@20
  (byte) current_piece_char#9 ← phi( play_move_down::@20/(byte) current_piece_char#3 )
  (byte) current_ypos#12 ← phi( play_move_down::@20/(byte) current_ypos#4 )
  (byte) current_xpos#14 ← phi( play_move_down::@20/(byte) current_xpos#6 )
  (byte*) current_piece_gfx#12 ← phi( play_move_down::@20/(byte*) current_piece_gfx#5 )
  (byte) current_orientation#13 ← phi( play_move_down::@20/(byte) current_orientation#6 )
  (byte*) current_piece#9 ← phi( play_move_down::@20/(byte*) current_piece#4 )
  (byte*) current_piece#1 ← (byte*) current_piece#9
  (byte) current_orientation#1 ← (byte) current_orientation#13
  (byte*) current_piece_gfx#0 ← (byte*) current_piece_gfx#12
  (byte) current_xpos#0 ← (byte) current_xpos#14
  (byte) current_ypos#1 ← (byte) current_ypos#12
  (byte) current_piece_char#0 ← (byte) current_piece_char#9
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@21 play_move_down::@6
  (byte) current_piece_char#20 ← phi( play_move_down::@21/(byte) current_piece_char#0 play_move_down::@6/(byte) current_piece_char#29 )
  (byte) current_xpos#33 ← phi( play_move_down::@21/(byte) current_xpos#0 play_move_down::@6/(byte) current_xpos#52 )
  (byte*) current_piece_gfx#26 ← phi( play_move_down::@21/(byte*) current_piece_gfx#0 play_move_down::@6/(byte*) current_piece_gfx#41 )
  (byte) current_orientation#29 ← phi( play_move_down::@21/(byte) current_orientation#1 play_move_down::@6/(byte) current_orientation#44 )
  (byte*) current_piece#20 ← phi( play_move_down::@21/(byte*) current_piece#1 play_move_down::@6/(byte*) current_piece#32 )
  (byte) current_ypos#29 ← phi( play_move_down::@21/(byte) current_ypos#1 play_move_down::@6/(byte) current_ypos#0 )
  (byte) current_movedown_counter#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) play_move_down::return#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@5 play_move_down::@7
  (byte) current_piece_char#10 ← phi( play_move_down::@5/(byte) current_piece_char#19 play_move_down::@7/(byte) current_piece_char#20 )
  (byte) current_xpos#15 ← phi( play_move_down::@5/(byte) current_xpos#32 play_move_down::@7/(byte) current_xpos#33 )
  (byte*) current_piece_gfx#13 ← phi( play_move_down::@5/(byte*) current_piece_gfx#25 play_move_down::@7/(byte*) current_piece_gfx#26 )
  (byte) current_orientation#14 ← phi( play_move_down::@5/(byte) current_orientation#28 play_move_down::@7/(byte) current_orientation#29 )
  (byte*) current_piece#10 ← phi( play_move_down::@5/(byte*) current_piece#19 play_move_down::@7/(byte*) current_piece#20 )
  (byte) current_ypos#13 ← phi( play_move_down::@5/(byte) current_ypos#28 play_move_down::@7/(byte) current_ypos#29 )
  (byte) current_movedown_counter#10 ← phi( play_move_down::@5/(byte) current_movedown_counter#18 play_move_down::@7/(byte) current_movedown_counter#2 )
  (byte) play_move_down::return#4 ← phi( play_move_down::@5/(byte) play_move_down::return#0 play_move_down::@7/(byte) play_move_down::return#1 )
  (byte) play_move_down::return#2 ← (byte) play_move_down::return#4
  (byte) current_movedown_counter#3 ← (byte) current_movedown_counter#10
  (byte) current_ypos#2 ← (byte) current_ypos#13
  (byte*) current_piece#2 ← (byte*) current_piece#10
  (byte) current_orientation#2 ← (byte) current_orientation#14
  (byte*) current_piece_gfx#1 ← (byte*) current_piece_gfx#13
  (byte) current_xpos#1 ← (byte) current_xpos#15
  (byte) current_piece_char#1 ← (byte) current_piece_char#10
  return 
  to:@return
play_move_leftright: scope:[play_move_leftright]  from main::@26
  (byte*) current_piece#33 ← phi( main::@26/(byte*) current_piece#6 )
  (byte) current_orientation#30 ← phi( main::@26/(byte) current_orientation#8 )
  (byte) current_ypos#30 ← phi( main::@26/(byte) current_ypos#6 )
  (byte) current_xpos#34 ← phi( main::@26/(byte) current_xpos#8 )
  (byte) play_move_leftright::key_event#1 ← phi( main::@26/(byte) play_move_leftright::key_event#0 )
  (bool~) play_move_leftright::$0 ← (byte) play_move_leftright::key_event#1 == (byte) KEY_COMMA#0
  if((bool~) play_move_leftright::$0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#23 ← phi( play_move_leftright/(byte*) current_piece#33 )
  (byte) current_orientation#15 ← phi( play_move_leftright/(byte) current_orientation#30 )
  (byte) current_ypos#14 ← phi( play_move_leftright/(byte) current_ypos#30 )
  (byte) current_xpos#16 ← phi( play_move_leftright/(byte) current_xpos#34 )
  (byte/signed word/word/dword/signed dword~) play_move_leftright::$7 ← (byte) current_xpos#16 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_collision::xpos#1 ← (byte/signed word/word/dword/signed dword~) play_move_leftright::$7
  (byte) play_collision::ypos#1 ← (byte) current_ypos#14
  (byte) play_collision::orientation#1 ← (byte) current_orientation#15
  call play_collision 
  (byte) play_collision::return#1 ← (byte) play_collision::return#5
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  (byte) current_xpos#38 ← phi( play_move_leftright::@1/(byte) current_xpos#16 )
  (byte) play_collision::return#11 ← phi( play_move_leftright::@1/(byte) play_collision::return#1 )
  (byte~) play_move_leftright::$8 ← (byte) play_collision::return#11
  (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$10 ← ! (bool~) play_move_leftright::$9
  if((bool~) play_move_leftright::$10) goto play_move_leftright::@5
  to:play_move_leftright::@11
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#34 ← phi( play_move_leftright/(byte*) current_piece#33 )
  (byte) current_orientation#31 ← phi( play_move_leftright/(byte) current_orientation#30 )
  (byte) current_ypos#31 ← phi( play_move_leftright/(byte) current_ypos#30 )
  (byte) current_xpos#35 ← phi( play_move_leftright/(byte) current_xpos#34 )
  (byte) play_move_leftright::key_event#2 ← phi( play_move_leftright/(byte) play_move_leftright::key_event#1 )
  (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
  (bool~) play_move_leftright::$2 ← ! (bool~) play_move_leftright::$1
  if((bool~) play_move_leftright::$2) goto play_move_leftright::@2
  to:play_move_leftright::@7
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright::@6
  (byte) current_xpos#53 ← phi( play_move_leftright::@6/(byte) current_xpos#35 )
  to:play_move_leftright::@4
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  (byte*) current_piece#24 ← phi( play_move_leftright::@6/(byte*) current_piece#34 )
  (byte) current_orientation#16 ← phi( play_move_leftright::@6/(byte) current_orientation#31 )
  (byte) current_ypos#15 ← phi( play_move_leftright::@6/(byte) current_ypos#31 )
  (byte) current_xpos#17 ← phi( play_move_leftright::@6/(byte) current_xpos#35 )
  (byte/signed word/word/dword/signed dword~) play_move_leftright::$3 ← (byte) current_xpos#17 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_collision::xpos#2 ← (byte/signed word/word/dword/signed dword~) play_move_leftright::$3
  (byte) play_collision::ypos#2 ← (byte) current_ypos#15
  (byte) play_collision::orientation#2 ← (byte) current_orientation#16
  call play_collision 
  (byte) play_collision::return#2 ← (byte) play_collision::return#5
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  (byte) current_xpos#36 ← phi( play_move_leftright::@7/(byte) current_xpos#17 )
  (byte) play_collision::return#12 ← phi( play_move_leftright::@7/(byte) play_collision::return#2 )
  (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12
  (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$6 ← ! (bool~) play_move_leftright::$5
  if((bool~) play_move_leftright::$6) goto play_move_leftright::@3
  to:play_move_leftright::@8
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@15
  (byte) current_xpos#54 ← phi( play_move_leftright::@15/(byte) current_xpos#36 )
  to:play_move_leftright::@4
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  (byte) current_xpos#18 ← phi( play_move_leftright::@15/(byte) current_xpos#36 )
  (byte) current_xpos#2 ← ++ (byte) current_xpos#18
  (byte) play_move_leftright::return#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@4 play_move_leftright::@8
  (byte) current_xpos#19 ← phi( play_move_leftright::@11/(byte) current_xpos#4 play_move_leftright::@4/(byte) current_xpos#37 play_move_leftright::@8/(byte) current_xpos#2 )
  (byte) play_move_leftright::return#5 ← phi( play_move_leftright::@11/(byte) play_move_leftright::return#3 play_move_leftright::@4/(byte) play_move_leftright::return#2 play_move_leftright::@8/(byte) play_move_leftright::return#0 )
  (byte) play_move_leftright::return#1 ← (byte) play_move_leftright::return#5
  (byte) current_xpos#3 ← (byte) current_xpos#19
  return 
  to:@return
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@3 play_move_leftright::@5
  (byte) current_xpos#37 ← phi( play_move_leftright::@2/(byte) current_xpos#53 play_move_leftright::@3/(byte) current_xpos#54 play_move_leftright::@5/(byte) current_xpos#55 )
  (byte) play_move_leftright::return#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_leftright::@return
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@14
  (byte) current_xpos#55 ← phi( play_move_leftright::@14/(byte) current_xpos#38 )
  to:play_move_leftright::@4
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  (byte) current_xpos#20 ← phi( play_move_leftright::@14/(byte) current_xpos#38 )
  (byte) current_xpos#4 ← -- (byte) current_xpos#20
  (byte) play_move_leftright::return#3 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_leftright::@return
play_move_rotate: scope:[play_move_rotate]  from main::@27
  (byte*) current_piece_gfx#60 ← phi( main::@27/(byte*) current_piece_gfx#33 )
  (byte*) current_piece#47 ← phi( main::@27/(byte*) current_piece#57 )
  (byte) current_ypos#42 ← phi( main::@27/(byte) current_ypos#54 )
  (byte) current_xpos#56 ← phi( main::@27/(byte) current_xpos#9 )
  (byte) current_orientation#32 ← phi( main::@27/(byte) current_orientation#38 )
  (byte) play_move_rotate::key_event#1 ← phi( main::@27/(byte) play_move_rotate::key_event#0 )
  (byte) play_move_rotate::orientation#0 ← (byte/word/signed word/dword/signed dword) 128
  (bool~) play_move_rotate::$0 ← (byte) play_move_rotate::key_event#1 == (byte) KEY_Z#0
  if((bool~) play_move_rotate::$0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece_gfx#74 ← phi( play_move_rotate/(byte*) current_piece_gfx#60 )
  (byte*) current_piece#35 ← phi( play_move_rotate/(byte*) current_piece#47 )
  (byte) current_ypos#32 ← phi( play_move_rotate/(byte) current_ypos#42 )
  (byte) current_xpos#39 ← phi( play_move_rotate/(byte) current_xpos#56 )
  (byte) current_orientation#17 ← phi( play_move_rotate/(byte) current_orientation#32 )
  (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#17 - (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte/word/dword~) play_move_rotate::$5 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte) play_move_rotate::orientation#1 ← (byte/word/dword~) play_move_rotate::$5
  to:play_move_rotate::@4
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece#48 ← phi( play_move_rotate/(byte*) current_piece#47 )
  (byte*) current_piece_gfx#42 ← phi( play_move_rotate/(byte*) current_piece_gfx#60 )
  (byte) current_ypos#43 ← phi( play_move_rotate/(byte) current_ypos#42 )
  (byte) current_xpos#57 ← phi( play_move_rotate/(byte) current_xpos#56 )
  (byte) current_orientation#33 ← phi( play_move_rotate/(byte) current_orientation#32 )
  (byte) play_move_rotate::key_event#2 ← phi( play_move_rotate/(byte) play_move_rotate::key_event#1 )
  (bool~) play_move_rotate::$1 ← (byte) play_move_rotate::key_event#2 == (byte) KEY_X#0
  if((bool~) play_move_rotate::$1) goto play_move_rotate::@2
  to:play_move_rotate::@7
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#75 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#42 )
  (byte*) current_piece#36 ← phi( play_move_rotate::@6/(byte*) current_piece#48 )
  (byte) current_ypos#33 ← phi( play_move_rotate::@6/(byte) current_ypos#43 )
  (byte) current_xpos#40 ← phi( play_move_rotate::@6/(byte) current_xpos#57 )
  (byte) current_orientation#18 ← phi( play_move_rotate::@6/(byte) current_orientation#33 )
  (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#18 + (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte/word/dword~) play_move_rotate::$3 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  (byte) play_move_rotate::orientation#2 ← (byte/word/dword~) play_move_rotate::$3
  to:play_move_rotate::@4
play_move_rotate::@7: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#28 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#42 )
  (byte) current_orientation#35 ← phi( play_move_rotate::@6/(byte) current_orientation#33 )
  (byte) play_move_rotate::return#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@5 play_move_rotate::@7
  (byte*) current_piece_gfx#14 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#3 play_move_rotate::@5/(byte*) current_piece_gfx#27 play_move_rotate::@7/(byte*) current_piece_gfx#28 )
  (byte) current_orientation#19 ← phi( play_move_rotate::@11/(byte) current_orientation#4 play_move_rotate::@5/(byte) current_orientation#34 play_move_rotate::@7/(byte) current_orientation#35 )
  (byte) play_move_rotate::return#5 ← phi( play_move_rotate::@11/(byte) play_move_rotate::return#3 play_move_rotate::@5/(byte) play_move_rotate::return#2 play_move_rotate::@7/(byte) play_move_rotate::return#0 )
  (byte) play_move_rotate::return#1 ← (byte) play_move_rotate::return#5
  (byte) current_orientation#3 ← (byte) current_orientation#19
  (byte*) current_piece_gfx#2 ← (byte*) current_piece_gfx#14
  return 
  to:@return
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  (byte*) current_piece_gfx#61 ← phi( play_move_rotate::@1/(byte*) current_piece_gfx#74 play_move_rotate::@2/(byte*) current_piece_gfx#75 )
  (byte) current_orientation#57 ← phi( play_move_rotate::@1/(byte) current_orientation#17 play_move_rotate::@2/(byte) current_orientation#18 )
  (byte*) current_piece#25 ← phi( play_move_rotate::@1/(byte*) current_piece#35 play_move_rotate::@2/(byte*) current_piece#36 )
  (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  (byte) current_ypos#16 ← phi( play_move_rotate::@1/(byte) current_ypos#32 play_move_rotate::@2/(byte) current_ypos#33 )
  (byte) current_xpos#21 ← phi( play_move_rotate::@1/(byte) current_xpos#39 play_move_rotate::@2/(byte) current_xpos#40 )
  (byte) play_collision::xpos#3 ← (byte) current_xpos#21
  (byte) play_collision::ypos#3 ← (byte) current_ypos#16
  (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  call play_collision 
  (byte) play_collision::return#3 ← (byte) play_collision::return#5
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  (byte*) current_piece_gfx#43 ← phi( play_move_rotate::@4/(byte*) current_piece_gfx#61 )
  (byte) current_orientation#45 ← phi( play_move_rotate::@4/(byte) current_orientation#57 )
  (byte*) current_piece#21 ← phi( play_move_rotate::@4/(byte*) current_piece#25 )
  (byte) play_move_rotate::orientation#5 ← phi( play_move_rotate::@4/(byte) play_move_rotate::orientation#3 )
  (byte) play_collision::return#13 ← phi( play_move_rotate::@4/(byte) play_collision::return#3 )
  (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13
  (bool~) play_move_rotate::$7 ← (byte~) play_move_rotate::$6 == (byte) COLLISION_NONE#0
  (bool~) play_move_rotate::$8 ← ! (bool~) play_move_rotate::$7
  if((bool~) play_move_rotate::$8) goto play_move_rotate::@5
  to:play_move_rotate::@11
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece_gfx#27 ← phi( play_move_rotate::@14/(byte*) current_piece_gfx#43 )
  (byte) current_orientation#34 ← phi( play_move_rotate::@14/(byte) current_orientation#45 )
  (byte) play_move_rotate::return#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_move_rotate::@return
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece#11 ← phi( play_move_rotate::@14/(byte*) current_piece#21 )
  (byte) play_move_rotate::orientation#4 ← phi( play_move_rotate::@14/(byte) play_move_rotate::orientation#5 )
  (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#4
  (byte*~) play_move_rotate::$9 ← (byte*) current_piece#11 + (byte) current_orientation#4
  (byte*) current_piece_gfx#3 ← (byte*~) play_move_rotate::$9
  (byte) play_move_rotate::return#3 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_move_rotate::@return
@26: scope:[]  from @23
  (byte) irq_raster_next#19 ← phi( @23/(byte) irq_raster_next#20 )
  (byte) irq_cnt#19 ← phi( @23/(byte) irq_cnt#20 )
  (byte) irq_sprite_ptr#16 ← phi( @23/(byte) irq_sprite_ptr#17 )
  (byte) current_movedown_counter#27 ← phi( @23/(byte) current_movedown_counter#0 )
  (byte) keyboard_modifiers#33 ← phi( @23/(byte) keyboard_modifiers#34 )
  (byte) keyboard_events_size#36 ← phi( @23/(byte) keyboard_events_size#40 )
  (byte) render_screen_showing#20 ← phi( @23/(byte) render_screen_showing#21 )
  (byte) current_piece_char#37 ← phi( @23/(byte) current_piece_char#44 )
  (byte) current_ypos#50 ← phi( @23/(byte) current_ypos#55 )
  (byte) current_xpos#65 ← phi( @23/(byte) current_xpos#74 )
  (byte*) current_piece_gfx#52 ← phi( @23/(byte*) current_piece_gfx#62 )
  (byte) current_orientation#51 ← phi( @23/(byte) current_orientation#0 )
  (byte*) current_piece#42 ← phi( @23/(byte*) current_piece#0 )
  (byte) render_screen_render#34 ← phi( @23/(byte) render_screen_render#38 )
  (byte) render_screen_show#32 ← phi( @23/(byte) render_screen_show#35 )
  (byte) irq_sprite_ypos#15 ← phi( @23/(byte) irq_sprite_ypos#18 )
  (byte) COLLISION_NONE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) COLLISION_PLAYFIELD#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) COLLISION_BOTTOM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) COLLISION_LEFT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) COLLISION_RIGHT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:@32
play_collision: scope:[play_collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4
  (byte) play_collision::xpos#5 ← phi( play_move_down::@12/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@7/(byte) play_collision::xpos#2 play_move_rotate::@4/(byte) play_collision::xpos#3 )
  (byte) play_collision::ypos#4 ← phi( play_move_down::@12/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@7/(byte) play_collision::ypos#2 play_move_rotate::@4/(byte) play_collision::ypos#3 )
  (byte) play_collision::orientation#4 ← phi( play_move_down::@12/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@7/(byte) play_collision::orientation#2 play_move_rotate::@4/(byte) play_collision::orientation#3 )
  (byte*) current_piece#12 ← phi( play_move_down::@12/(byte*) current_piece#22 play_move_leftright::@1/(byte*) current_piece#23 play_move_leftright::@7/(byte*) current_piece#24 play_move_rotate::@4/(byte*) current_piece#25 )
  (byte*~) play_collision::$0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4
  (byte*) play_collision::piece_gfx#0 ← (byte*~) play_collision::$0
  (byte) play_collision::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) play_collision::$1 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_collision::ypos2#0 ← (byte~) play_collision::$1
  (byte) play_collision::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@17
  (byte) play_collision::l#6 ← phi( play_collision/(byte) play_collision::l#0 play_collision::@17/(byte) play_collision::l#1 )
  (byte) play_collision::i#3 ← phi( play_collision/(byte) play_collision::i#0 play_collision::@17/(byte) play_collision::i#5 )
  (byte*) play_collision::piece_gfx#2 ← phi( play_collision/(byte*) play_collision::piece_gfx#0 play_collision::@17/(byte*) play_collision::piece_gfx#4 )
  (byte) play_collision::xpos#4 ← phi( play_collision/(byte) play_collision::xpos#5 play_collision::@17/(byte) play_collision::xpos#6 )
  (byte) play_collision::ypos2#2 ← phi( play_collision/(byte) play_collision::ypos2#0 play_collision::@17/(byte) play_collision::ypos2#1 )
  (byte*) play_collision::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2)
  (byte) play_collision::col#0 ← (byte) play_collision::xpos#4
  (byte) play_collision::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@3
  (byte*) play_collision::playfield_line#5 ← phi( play_collision::@1/(byte*) play_collision::playfield_line#0 play_collision::@3/(byte*) play_collision::playfield_line#6 )
  (byte) play_collision::xpos#8 ← phi( play_collision::@1/(byte) play_collision::xpos#4 play_collision::@3/(byte) play_collision::xpos#7 )
  (byte) play_collision::l#4 ← phi( play_collision::@1/(byte) play_collision::l#6 play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::ypos2#5 ← phi( play_collision::@1/(byte) play_collision::ypos2#2 play_collision::@3/(byte) play_collision::ypos2#6 )
  (byte) play_collision::c#3 ← phi( play_collision::@1/(byte) play_collision::c#0 play_collision::@3/(byte) play_collision::c#1 )
  (byte) play_collision::col#6 ← phi( play_collision::@1/(byte) play_collision::col#0 play_collision::@3/(byte) play_collision::col#1 )
  (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#1 ← phi( play_collision::@1/(byte*) play_collision::piece_gfx#2 play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (bool~) play_collision::$2 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_collision::$3 ← ! (bool~) play_collision::$2
  (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  if((bool~) play_collision::$3) goto play_collision::@3
  to:play_collision::@8
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@7
  (byte*) play_collision::playfield_line#6 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 play_collision::@7/(byte*) play_collision::playfield_line#7 )
  (byte) play_collision::xpos#7 ← phi( play_collision::@2/(byte) play_collision::xpos#8 play_collision::@7/(byte) play_collision::xpos#9 )
  (byte) play_collision::l#3 ← phi( play_collision::@2/(byte) play_collision::l#4 play_collision::@7/(byte) play_collision::l#5 )
  (byte) play_collision::ypos2#6 ← phi( play_collision::@2/(byte) play_collision::ypos2#5 play_collision::@7/(byte) play_collision::ypos2#7 )
  (byte) play_collision::i#4 ← phi( play_collision::@2/(byte) play_collision::i#1 play_collision::@7/(byte) play_collision::i#6 )
  (byte*) play_collision::piece_gfx#3 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 play_collision::@7/(byte*) play_collision::piece_gfx#5 )
  (byte) play_collision::c#2 ← phi( play_collision::@2/(byte) play_collision::c#3 play_collision::@7/(byte) play_collision::c#4 )
  (byte) play_collision::col#2 ← phi( play_collision::@2/(byte) play_collision::col#6 play_collision::@7/(byte) play_collision::col#7 )
  (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2
  (byte) play_collision::c#1 ← (byte) play_collision::c#2 + rangenext(0,3)
  (bool~) play_collision::$14 ← (byte) play_collision::c#1 != rangelast(0,3)
  if((bool~) play_collision::$14) goto play_collision::@2
  to:play_collision::@17
play_collision::@8: scope:[play_collision]  from play_collision::@2
  (byte) play_collision::xpos#13 ← phi( play_collision::@2/(byte) play_collision::xpos#8 )
  (byte) play_collision::l#10 ← phi( play_collision::@2/(byte) play_collision::l#4 )
  (byte) play_collision::i#10 ← phi( play_collision::@2/(byte) play_collision::i#1 )
  (byte*) play_collision::piece_gfx#9 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 )
  (byte) play_collision::c#8 ← phi( play_collision::@2/(byte) play_collision::c#3 )
  (byte*) play_collision::playfield_line#4 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 )
  (byte) play_collision::col#8 ← phi( play_collision::@2/(byte) play_collision::col#6 )
  (byte) play_collision::ypos2#3 ← phi( play_collision::@2/(byte) play_collision::ypos2#5 )
  (byte/signed word/word/dword/signed dword~) play_collision::$4 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte) PLAYFIELD_LINES#0
  (bool~) play_collision::$5 ← (byte) play_collision::ypos2#3 >= (byte/signed word/word/dword/signed dword~) play_collision::$4
  (bool~) play_collision::$6 ← ! (bool~) play_collision::$5
  if((bool~) play_collision::$6) goto play_collision::@4
  to:play_collision::@9
play_collision::@4: scope:[play_collision]  from play_collision::@8
  (byte) play_collision::xpos#12 ← phi( play_collision::@8/(byte) play_collision::xpos#13 )
  (byte) play_collision::l#9 ← phi( play_collision::@8/(byte) play_collision::l#10 )
  (byte) play_collision::ypos2#10 ← phi( play_collision::@8/(byte) play_collision::ypos2#3 )
  (byte) play_collision::i#9 ← phi( play_collision::@8/(byte) play_collision::i#10 )
  (byte*) play_collision::piece_gfx#8 ← phi( play_collision::@8/(byte*) play_collision::piece_gfx#9 )
  (byte) play_collision::c#7 ← phi( play_collision::@8/(byte) play_collision::c#8 )
  (byte*) play_collision::playfield_line#3 ← phi( play_collision::@8/(byte*) play_collision::playfield_line#4 )
  (byte) play_collision::col#3 ← phi( play_collision::@8/(byte) play_collision::col#8 )
  (byte~) play_collision::$7 ← (byte) play_collision::col#3 & (byte/word/signed word/dword/signed dword) 128
  (bool~) play_collision::$8 ← (byte~) play_collision::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_collision::$9 ← ! (bool~) play_collision::$8
  if((bool~) play_collision::$9) goto play_collision::@5
  to:play_collision::@11
play_collision::@9: scope:[play_collision]  from play_collision::@8
  (byte) play_collision::return#4 ← (byte) COLLISION_BOTTOM#0
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@11 play_collision::@13 play_collision::@15 play_collision::@18 play_collision::@9
  (byte) play_collision::return#14 ← phi( play_collision::@11/(byte) play_collision::return#6 play_collision::@13/(byte) play_collision::return#7 play_collision::@15/(byte) play_collision::return#8 play_collision::@18/(byte) play_collision::return#9 play_collision::@9/(byte) play_collision::return#4 )
  (byte) play_collision::return#5 ← (byte) play_collision::return#14
  return 
  to:@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::xpos#11 ← phi( play_collision::@4/(byte) play_collision::xpos#12 )
  (byte) play_collision::l#8 ← phi( play_collision::@4/(byte) play_collision::l#9 )
  (byte) play_collision::ypos2#9 ← phi( play_collision::@4/(byte) play_collision::ypos2#10 )
  (byte) play_collision::i#8 ← phi( play_collision::@4/(byte) play_collision::i#9 )
  (byte*) play_collision::piece_gfx#7 ← phi( play_collision::@4/(byte*) play_collision::piece_gfx#8 )
  (byte) play_collision::c#6 ← phi( play_collision::@4/(byte) play_collision::c#7 )
  (byte*) play_collision::playfield_line#2 ← phi( play_collision::@4/(byte*) play_collision::playfield_line#3 )
  (byte) play_collision::col#4 ← phi( play_collision::@4/(byte) play_collision::col#3 )
  (bool~) play_collision::$10 ← (byte) play_collision::col#4 >= (byte) PLAYFIELD_COLS#0
  (bool~) play_collision::$11 ← ! (bool~) play_collision::$10
  if((bool~) play_collision::$11) goto play_collision::@6
  to:play_collision::@13
play_collision::@11: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::return#6 ← (byte) COLLISION_LEFT#0
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::xpos#10 ← phi( play_collision::@5/(byte) play_collision::xpos#11 )
  (byte) play_collision::l#7 ← phi( play_collision::@5/(byte) play_collision::l#8 )
  (byte) play_collision::ypos2#8 ← phi( play_collision::@5/(byte) play_collision::ypos2#9 )
  (byte) play_collision::i#7 ← phi( play_collision::@5/(byte) play_collision::i#8 )
  (byte*) play_collision::piece_gfx#6 ← phi( play_collision::@5/(byte*) play_collision::piece_gfx#7 )
  (byte) play_collision::c#5 ← phi( play_collision::@5/(byte) play_collision::c#6 )
  (byte) play_collision::col#5 ← phi( play_collision::@5/(byte) play_collision::col#4 )
  (byte*) play_collision::playfield_line#1 ← phi( play_collision::@5/(byte*) play_collision::playfield_line#2 )
  (bool~) play_collision::$12 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::col#5) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_collision::$13 ← ! (bool~) play_collision::$12
  if((bool~) play_collision::$13) goto play_collision::@7
  to:play_collision::@15
play_collision::@13: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::return#7 ← (byte) COLLISION_RIGHT#0
  to:play_collision::@return
play_collision::@7: scope:[play_collision]  from play_collision::@6
  (byte*) play_collision::playfield_line#7 ← phi( play_collision::@6/(byte*) play_collision::playfield_line#1 )
  (byte) play_collision::xpos#9 ← phi( play_collision::@6/(byte) play_collision::xpos#10 )
  (byte) play_collision::l#5 ← phi( play_collision::@6/(byte) play_collision::l#7 )
  (byte) play_collision::ypos2#7 ← phi( play_collision::@6/(byte) play_collision::ypos2#8 )
  (byte) play_collision::i#6 ← phi( play_collision::@6/(byte) play_collision::i#7 )
  (byte*) play_collision::piece_gfx#5 ← phi( play_collision::@6/(byte*) play_collision::piece_gfx#6 )
  (byte) play_collision::c#4 ← phi( play_collision::@6/(byte) play_collision::c#5 )
  (byte) play_collision::col#7 ← phi( play_collision::@6/(byte) play_collision::col#5 )
  to:play_collision::@3
play_collision::@15: scope:[play_collision]  from play_collision::@6
  (byte) play_collision::return#8 ← (byte) COLLISION_PLAYFIELD#0
  to:play_collision::@return
play_collision::@17: scope:[play_collision]  from play_collision::@3
  (byte) play_collision::i#5 ← phi( play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#4 ← phi( play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (byte) play_collision::xpos#6 ← phi( play_collision::@3/(byte) play_collision::xpos#7 )
  (byte) play_collision::l#2 ← phi( play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::ypos2#4 ← phi( play_collision::@3/(byte) play_collision::ypos2#6 )
  (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#4 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) play_collision::l#1 ← (byte) play_collision::l#2 + rangenext(0,3)
  (bool~) play_collision::$15 ← (byte) play_collision::l#1 != rangelast(0,3)
  if((bool~) play_collision::$15) goto play_collision::@1
  to:play_collision::@18
play_collision::@18: scope:[play_collision]  from play_collision::@17
  (byte) play_collision::return#9 ← (byte) COLLISION_NONE#0
  to:play_collision::@return
play_lock_current: scope:[play_lock_current]  from play_move_down::@13
  (byte) current_piece_char#45 ← phi( play_move_down::@13/(byte) current_piece_char#43 )
  (byte*) current_piece_gfx#44 ← phi( play_move_down::@13/(byte*) current_piece_gfx#59 )
  (byte) current_xpos#41 ← phi( play_move_down::@13/(byte) current_xpos#58 )
  (byte) current_ypos#17 ← phi( play_move_down::@13/(byte) current_ypos#34 )
  (byte) play_lock_current::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) play_lock_current::$0 ← (byte) current_ypos#17 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_lock_current::ypos2#0 ← (byte~) play_lock_current::$0
  (byte) play_lock_current::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@5
  (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) play_lock_current::l#0 play_lock_current::@5/(byte) play_lock_current::l#1 )
  (byte) current_piece_char#30 ← phi( play_lock_current/(byte) current_piece_char#45 play_lock_current::@5/(byte) current_piece_char#46 )
  (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) play_lock_current::i#0 play_lock_current::@5/(byte) play_lock_current::i#5 )
  (byte*) current_piece_gfx#29 ← phi( play_lock_current/(byte*) current_piece_gfx#44 play_lock_current::@5/(byte*) current_piece_gfx#45 )
  (byte) current_xpos#22 ← phi( play_lock_current/(byte) current_xpos#41 play_lock_current::@5/(byte) current_xpos#42 )
  (byte) play_lock_current::ypos2#2 ← phi( play_lock_current/(byte) play_lock_current::ypos2#0 play_lock_current::@5/(byte) play_lock_current::ypos2#1 )
  (byte*) play_lock_current::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2)
  (byte) play_lock_current::col#0 ← (byte) current_xpos#22
  (byte) play_lock_current::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@3
  (byte) current_xpos#75 ← phi( play_lock_current::@1/(byte) current_xpos#22 play_lock_current::@3/(byte) current_xpos#59 )
  (byte) play_lock_current::l#4 ← phi( play_lock_current::@1/(byte) play_lock_current::l#6 play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::ypos2#5 ← phi( play_lock_current::@1/(byte) play_lock_current::ypos2#2 play_lock_current::@3/(byte) play_lock_current::ypos2#4 )
  (byte*) play_lock_current::playfield_line#2 ← phi( play_lock_current::@1/(byte*) play_lock_current::playfield_line#0 play_lock_current::@3/(byte*) play_lock_current::playfield_line#3 )
  (byte) current_piece_char#21 ← phi( play_lock_current::@1/(byte) current_piece_char#30 play_lock_current::@3/(byte) current_piece_char#31 )
  (byte) play_lock_current::c#3 ← phi( play_lock_current::@1/(byte) play_lock_current::c#0 play_lock_current::@3/(byte) play_lock_current::c#1 )
  (byte) play_lock_current::col#4 ← phi( play_lock_current::@1/(byte) play_lock_current::col#0 play_lock_current::@3/(byte) play_lock_current::col#1 )
  (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#15 ← phi( play_lock_current::@1/(byte*) current_piece_gfx#29 play_lock_current::@3/(byte*) current_piece_gfx#30 )
  (bool~) play_lock_current::$1 ← *((byte*) current_piece_gfx#15 + (byte) play_lock_current::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_lock_current::$2 ← ! (bool~) play_lock_current::$1
  (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  if((bool~) play_lock_current::$2) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  (byte) current_xpos#59 ← phi( play_lock_current::@2/(byte) current_xpos#75 play_lock_current::@4/(byte) current_xpos#76 )
  (byte*) play_lock_current::playfield_line#3 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 play_lock_current::@4/(byte*) play_lock_current::playfield_line#1 )
  (byte) current_piece_char#31 ← phi( play_lock_current::@2/(byte) current_piece_char#21 play_lock_current::@4/(byte) current_piece_char#11 )
  (byte) play_lock_current::l#3 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 play_lock_current::@4/(byte) play_lock_current::l#5 )
  (byte) play_lock_current::ypos2#4 ← phi( play_lock_current::@2/(byte) play_lock_current::ypos2#5 play_lock_current::@4/(byte) play_lock_current::ypos2#6 )
  (byte) play_lock_current::i#4 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 play_lock_current::@4/(byte) play_lock_current::i#6 )
  (byte*) current_piece_gfx#30 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#15 play_lock_current::@4/(byte*) current_piece_gfx#46 )
  (byte) play_lock_current::c#2 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 play_lock_current::@4/(byte) play_lock_current::c#4 )
  (byte) play_lock_current::col#2 ← phi( play_lock_current::@2/(byte) play_lock_current::col#4 play_lock_current::@4/(byte) play_lock_current::col#3 )
  (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2
  (byte) play_lock_current::c#1 ← (byte) play_lock_current::c#2 + rangenext(0,3)
  (bool~) play_lock_current::$3 ← (byte) play_lock_current::c#1 != rangelast(0,3)
  if((bool~) play_lock_current::$3) goto play_lock_current::@2
  to:play_lock_current::@5
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  (byte) current_xpos#76 ← phi( play_lock_current::@2/(byte) current_xpos#75 )
  (byte) play_lock_current::l#5 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 )
  (byte) play_lock_current::ypos2#6 ← phi( play_lock_current::@2/(byte) play_lock_current::ypos2#5 )
  (byte) play_lock_current::i#6 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 )
  (byte*) current_piece_gfx#46 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#15 )
  (byte) play_lock_current::c#4 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 )
  (byte) play_lock_current::col#3 ← phi( play_lock_current::@2/(byte) play_lock_current::col#4 )
  (byte*) play_lock_current::playfield_line#1 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 )
  (byte) current_piece_char#11 ← phi( play_lock_current::@2/(byte) current_piece_char#21 )
  *((byte*) play_lock_current::playfield_line#1 + (byte) play_lock_current::col#3) ← (byte) current_piece_char#11
  to:play_lock_current::@3
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  (byte) current_piece_char#46 ← phi( play_lock_current::@3/(byte) current_piece_char#31 )
  (byte) play_lock_current::i#5 ← phi( play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#45 ← phi( play_lock_current::@3/(byte*) current_piece_gfx#30 )
  (byte) current_xpos#42 ← phi( play_lock_current::@3/(byte) current_xpos#59 )
  (byte) play_lock_current::l#2 ← phi( play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::ypos2#3 ← phi( play_lock_current::@3/(byte) play_lock_current::ypos2#4 )
  (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) play_lock_current::l#1 ← (byte) play_lock_current::l#2 + rangenext(0,3)
  (bool~) play_lock_current::$4 ← (byte) play_lock_current::l#1 != rangelast(0,3)
  if((bool~) play_lock_current::$4) goto play_lock_current::@1
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  return 
  to:@return
play_spawn_current: scope:[play_spawn_current]  from main::@19 play_move_down::@20
  (byte) play_spawn_current::piece_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current play_spawn_current::@7
  (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current/(byte) play_spawn_current::piece_idx#0 play_spawn_current::@7/(byte) play_spawn_current::piece_idx#1 )
  (bool~) play_spawn_current::$0 ← (byte) play_spawn_current::piece_idx#2 == (byte/signed byte/word/signed word/dword/signed dword) 7
  if((bool~) play_spawn_current::$0) goto play_spawn_current::@2
  to:play_spawn_current::@3
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1
  call sid_rnd 
  (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#1
  to:play_spawn_current::@7
play_spawn_current::@7: scope:[play_spawn_current]  from play_spawn_current::@2
  (byte) sid_rnd::return#4 ← phi( play_spawn_current::@2/(byte) sid_rnd::return#2 )
  (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#4
  (byte~) play_spawn_current::$2 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$2
  to:play_spawn_current::@1
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1
  (byte) play_spawn_current::piece_idx#3 ← phi( play_spawn_current::@1/(byte) play_spawn_current::piece_idx#2 )
  (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) current_piece#3 ← ((byte*)) *((word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  (byte) current_orientation#5 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*~) play_spawn_current::$4 ← (byte*) current_piece#3 + (byte) current_orientation#5
  (byte*) current_piece_gfx#4 ← (byte*~) play_spawn_current::$4
  (byte) current_xpos#5 ← *((byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#3)
  (byte) current_ypos#3 ← *((byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#3)
  (byte) current_piece_char#2 ← *((byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#3)
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@3
  (byte) current_piece_char#12 ← phi( play_spawn_current::@3/(byte) current_piece_char#2 )
  (byte) current_ypos#18 ← phi( play_spawn_current::@3/(byte) current_ypos#3 )
  (byte) current_xpos#23 ← phi( play_spawn_current::@3/(byte) current_xpos#5 )
  (byte*) current_piece_gfx#16 ← phi( play_spawn_current::@3/(byte*) current_piece_gfx#4 )
  (byte) current_orientation#20 ← phi( play_spawn_current::@3/(byte) current_orientation#5 )
  (byte*) current_piece#13 ← phi( play_spawn_current::@3/(byte*) current_piece#3 )
  (byte*) current_piece#4 ← (byte*) current_piece#13
  (byte) current_orientation#6 ← (byte) current_orientation#20
  (byte*) current_piece_gfx#5 ← (byte*) current_piece_gfx#16
  (byte) current_xpos#6 ← (byte) current_xpos#23
  (byte) current_ypos#4 ← (byte) current_ypos#18
  (byte) current_piece_char#3 ← (byte) current_piece_char#12
  return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@19
  (byte~) play_remove_lines::$0 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte/signed word/word/dword/signed dword~) play_remove_lines::$1 ← (byte~) play_remove_lines::$0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_remove_lines::r#0 ← (byte/signed word/word/dword/signed dword~) play_remove_lines::$1
  (byte~) play_remove_lines::$2 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte/signed word/word/dword/signed dword~) play_remove_lines::$3 ← (byte~) play_remove_lines::$2 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_remove_lines::w#0 ← (byte/signed word/word/dword/signed dword~) play_remove_lines::$3
  (byte/signed word/word/dword/signed dword~) play_remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_remove_lines::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@4
  (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) play_remove_lines::y#0 play_remove_lines::@4/(byte) play_remove_lines::y#1 )
  (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(byte) play_remove_lines::w#0 play_remove_lines::@4/(byte) play_remove_lines::w#11 )
  (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(byte) play_remove_lines::r#0 play_remove_lines::@4/(byte) play_remove_lines::r#5 )
  (byte) play_remove_lines::full#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/signed word/word/dword/signed dword~) play_remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_remove_lines::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  (byte) play_remove_lines::y#6 ← phi( play_remove_lines::@1/(byte) play_remove_lines::y#8 play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::full#0 play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (byte) play_remove_lines::x#3 ← phi( play_remove_lines::@1/(byte) play_remove_lines::x#0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  (byte) play_remove_lines::w#8 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::c#0 ← *((byte[$3]) playfield#0 + (byte) play_remove_lines::r#2)
  (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::c#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) play_remove_lines::$7 ← ! (bool~) play_remove_lines::$6
  if((bool~) play_remove_lines::$7) goto play_remove_lines::@3
  to:play_remove_lines::@8
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@8
  (byte) play_remove_lines::y#5 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 play_remove_lines::@8/(byte) play_remove_lines::y#7 )
  (byte) play_remove_lines::full#3 ← phi( play_remove_lines::@2/(byte) play_remove_lines::full#4 play_remove_lines::@8/(byte) play_remove_lines::full#1 )
  (byte) play_remove_lines::r#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 play_remove_lines::@8/(byte) play_remove_lines::r#6 )
  (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 play_remove_lines::@8/(byte) play_remove_lines::x#4 )
  (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 play_remove_lines::@8/(byte) play_remove_lines::w#9 )
  (byte) play_remove_lines::c#1 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 play_remove_lines::@8/(byte) play_remove_lines::c#2 )
  *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#1
  (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  (byte) play_remove_lines::x#1 ← (byte) play_remove_lines::x#2 + rangenext(0,play_remove_lines::$5)
  (bool~) play_remove_lines::$8 ← (byte) play_remove_lines::x#1 != rangelast(0,play_remove_lines::$5)
  if((bool~) play_remove_lines::$8) goto play_remove_lines::@2
  to:play_remove_lines::@9
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@2
  (byte) play_remove_lines::y#7 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 )
  (byte) play_remove_lines::r#6 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 )
  (byte) play_remove_lines::x#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 )
  (byte) play_remove_lines::w#9 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 )
  (byte) play_remove_lines::c#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 )
  (byte) play_remove_lines::full#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_remove_lines::@3
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@3
  (byte) play_remove_lines::r#8 ← phi( play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::w#10 ← phi( play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::y#4 ← phi( play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (bool~) play_remove_lines::$9 ← (byte) play_remove_lines::full#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) play_remove_lines::$10 ← ! (bool~) play_remove_lines::$9
  if((bool~) play_remove_lines::$10) goto play_remove_lines::@4
  to:play_remove_lines::@10
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@10 play_remove_lines::@9
  (byte) play_remove_lines::r#5 ← phi( play_remove_lines::@10/(byte) play_remove_lines::r#7 play_remove_lines::@9/(byte) play_remove_lines::r#8 )
  (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@10/(byte) play_remove_lines::w#2 play_remove_lines::@9/(byte) play_remove_lines::w#10 )
  (byte) play_remove_lines::y#2 ← phi( play_remove_lines::@10/(byte) play_remove_lines::y#3 play_remove_lines::@9/(byte) play_remove_lines::y#4 )
  (byte) play_remove_lines::y#1 ← (byte) play_remove_lines::y#2 + rangenext(0,play_remove_lines::$4)
  (bool~) play_remove_lines::$12 ← (byte) play_remove_lines::y#1 != rangelast(0,play_remove_lines::$4)
  if((bool~) play_remove_lines::$12) goto play_remove_lines::@1
  to:play_remove_lines::@5
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@9
  (byte) play_remove_lines::r#7 ← phi( play_remove_lines::@9/(byte) play_remove_lines::r#8 )
  (byte) play_remove_lines::y#3 ← phi( play_remove_lines::@9/(byte) play_remove_lines::y#4 )
  (byte) play_remove_lines::w#5 ← phi( play_remove_lines::@9/(byte) play_remove_lines::w#10 )
  (byte~) play_remove_lines::$11 ← (byte) play_remove_lines::w#5 + (byte) PLAYFIELD_COLS#0
  (byte) play_remove_lines::w#2 ← (byte~) play_remove_lines::$11
  to:play_remove_lines::@4
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@6
  (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#11 play_remove_lines::@6/(byte) play_remove_lines::w#3 )
  (bool~) play_remove_lines::$13 ← (byte) play_remove_lines::w#6 != (byte/word/signed word/dword/signed dword) 255
  if((bool~) play_remove_lines::$13) goto play_remove_lines::@6
  to:play_remove_lines::@return
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  (byte) play_remove_lines::w#7 ← phi( play_remove_lines::@5/(byte) play_remove_lines::w#6 )
  *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#7) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#7
  to:play_remove_lines::@5
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@5
  return 
  to:@return
play_init: scope:[play_init]  from main::@18
  (byte) play_init::idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) play_init::pli#0 ← (byte[$3]) playfield#0
  (byte/signed word/word/dword/signed dword~) play_init::$0 ← (byte) PLAYFIELD_LINES#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) play_init::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  (byte) play_init::idx#2 ← phi( play_init/(byte) play_init::idx#0 play_init::@1/(byte) play_init::idx#1 )
  (byte*) play_init::pli#2 ← phi( play_init/(byte*) play_init::pli#0 play_init::@1/(byte*) play_init::pli#1 )
  (byte) play_init::j#2 ← phi( play_init/(byte) play_init::j#0 play_init::@1/(byte) play_init::j#1 )
  (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2
  *((byte[$26]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (byte) PLAYFIELD_COLS#0
  (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (byte) PLAYFIELD_COLS#0
  (byte) play_init::j#1 ← (byte) play_init::j#2 + rangenext(0,play_init::$0)
  (bool~) play_init::$2 ← (byte) play_init::j#1 != rangelast(0,play_init::$0)
  if((bool~) play_init::$2) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  (byte~) play_init::$3 ← (byte) PLAYFIELD_COLS#0 * (byte) PLAYFIELD_LINES#0
  *((byte[$26]) playfield_lines_idx#0 + (byte) PLAYFIELD_LINES#0) ← (byte~) play_init::$3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@2
  return 
  to:@return
main: scope:[main]  from @32
  (byte) current_movedown_counter#47 ← phi( @32/(byte) current_movedown_counter#20 )
  (byte) keyboard_modifiers#59 ← phi( @32/(byte) keyboard_modifiers#25 )
  (byte) keyboard_events_size#78 ← phi( @32/(byte) keyboard_events_size#28 )
  (byte) render_screen_showing#44 ← phi( @32/(byte) render_screen_showing#14 )
  (byte) current_piece_char#75 ← phi( @32/(byte) current_piece_char#25 )
  (byte) current_ypos#71 ← phi( @32/(byte) current_ypos#38 )
  (byte) current_xpos#97 ← phi( @32/(byte) current_xpos#46 )
  (byte*) current_piece_gfx#87 ← phi( @32/(byte*) current_piece_gfx#35 )
  (byte) current_orientation#72 ← phi( @32/(byte) current_orientation#40 )
  (byte*) current_piece#68 ← phi( @32/(byte*) current_piece#29 )
  (byte) render_screen_render#30 ← phi( @32/(byte) render_screen_render#24 )
  (byte) render_screen_show#27 ← phi( @32/(byte) render_screen_show#24 )
  call sid_rnd_init 
  to:main::@15
main::@15: scope:[main]  from main
  (byte) current_movedown_counter#46 ← phi( main/(byte) current_movedown_counter#47 )
  (byte) keyboard_modifiers#57 ← phi( main/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#76 ← phi( main/(byte) keyboard_events_size#78 )
  (byte) render_screen_showing#43 ← phi( main/(byte) render_screen_showing#44 )
  (byte) current_piece_char#68 ← phi( main/(byte) current_piece_char#75 )
  (byte) current_ypos#68 ← phi( main/(byte) current_ypos#71 )
  (byte) current_xpos#94 ← phi( main/(byte) current_xpos#97 )
  (byte*) current_piece_gfx#81 ← phi( main/(byte*) current_piece_gfx#87 )
  (byte) current_orientation#69 ← phi( main/(byte) current_orientation#72 )
  (byte*) current_piece#63 ← phi( main/(byte*) current_piece#68 )
  (byte) render_screen_render#22 ← phi( main/(byte) render_screen_render#30 )
  (byte) render_screen_show#22 ← phi( main/(byte) render_screen_show#27 )
  asm { sei  }
  call render_init 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte) current_movedown_counter#45 ← phi( main::@15/(byte) current_movedown_counter#46 )
  (byte) keyboard_modifiers#55 ← phi( main::@15/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#73 ← phi( main::@15/(byte) keyboard_events_size#76 )
  (byte) render_screen_showing#42 ← phi( main::@15/(byte) render_screen_showing#43 )
  (byte) current_piece_char#59 ← phi( main::@15/(byte) current_piece_char#68 )
  (byte) current_ypos#63 ← phi( main::@15/(byte) current_ypos#68 )
  (byte) current_xpos#87 ← phi( main::@15/(byte) current_xpos#94 )
  (byte*) current_piece_gfx#76 ← phi( main::@15/(byte*) current_piece_gfx#81 )
  (byte) current_orientation#64 ← phi( main::@15/(byte) current_orientation#69 )
  (byte*) current_piece#58 ← phi( main::@15/(byte*) current_piece#63 )
  (byte) render_screen_render#14 ← phi( main::@15/(byte) render_screen_render#2 )
  (byte) render_screen_show#14 ← phi( main::@15/(byte) render_screen_show#2 )
  (byte) render_screen_show#5 ← (byte) render_screen_show#14
  (byte) render_screen_render#5 ← (byte) render_screen_render#14
  call sprites_init 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (byte) current_movedown_counter#44 ← phi( main::@16/(byte) current_movedown_counter#45 )
  (byte) keyboard_modifiers#53 ← phi( main::@16/(byte) keyboard_modifiers#55 )
  (byte) keyboard_events_size#69 ← phi( main::@16/(byte) keyboard_events_size#73 )
  (byte) render_screen_showing#39 ← phi( main::@16/(byte) render_screen_showing#42 )
  (byte) render_screen_show#53 ← phi( main::@16/(byte) render_screen_show#5 )
  (byte) render_screen_render#49 ← phi( main::@16/(byte) render_screen_render#5 )
  (byte) current_piece_char#47 ← phi( main::@16/(byte) current_piece_char#59 )
  (byte) current_ypos#56 ← phi( main::@16/(byte) current_ypos#63 )
  (byte) current_xpos#77 ← phi( main::@16/(byte) current_xpos#87 )
  (byte*) current_piece_gfx#63 ← phi( main::@16/(byte*) current_piece_gfx#76 )
  (byte) current_orientation#58 ← phi( main::@16/(byte) current_orientation#64 )
  (byte*) current_piece#49 ← phi( main::@16/(byte*) current_piece#58 )
  call sprites_irq_init 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (byte) current_movedown_counter#41 ← phi( main::@17/(byte) current_movedown_counter#44 )
  (byte) keyboard_modifiers#50 ← phi( main::@17/(byte) keyboard_modifiers#53 )
  (byte) keyboard_events_size#66 ← phi( main::@17/(byte) keyboard_events_size#69 )
  (byte) render_screen_showing#36 ← phi( main::@17/(byte) render_screen_showing#39 )
  (byte) render_screen_show#50 ← phi( main::@17/(byte) render_screen_show#53 )
  (byte) render_screen_render#45 ← phi( main::@17/(byte) render_screen_render#49 )
  (byte) current_piece_char#32 ← phi( main::@17/(byte) current_piece_char#47 )
  (byte) current_ypos#44 ← phi( main::@17/(byte) current_ypos#56 )
  (byte) current_xpos#60 ← phi( main::@17/(byte) current_xpos#77 )
  (byte*) current_piece_gfx#47 ← phi( main::@17/(byte*) current_piece_gfx#63 )
  (byte) current_orientation#46 ← phi( main::@17/(byte) current_orientation#58 )
  (byte*) current_piece#37 ← phi( main::@17/(byte*) current_piece#49 )
  call play_init 
  to:main::@19
main::@19: scope:[main]  from main::@18
  (byte) current_movedown_counter#38 ← phi( main::@18/(byte) current_movedown_counter#41 )
  (byte) keyboard_modifiers#46 ← phi( main::@18/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#58 ← phi( main::@18/(byte) keyboard_events_size#66 )
  (byte) render_screen_showing#32 ← phi( main::@18/(byte) render_screen_showing#36 )
  (byte) render_screen_show#47 ← phi( main::@18/(byte) render_screen_show#50 )
  (byte) render_screen_render#39 ← phi( main::@18/(byte) render_screen_render#45 )
  (byte) current_piece_char#22 ← phi( main::@18/(byte) current_piece_char#32 )
  (byte) current_ypos#35 ← phi( main::@18/(byte) current_ypos#44 )
  (byte) current_xpos#43 ← phi( main::@18/(byte) current_xpos#60 )
  (byte*) current_piece_gfx#31 ← phi( main::@18/(byte*) current_piece_gfx#47 )
  (byte) current_orientation#36 ← phi( main::@18/(byte) current_orientation#46 )
  (byte*) current_piece#26 ← phi( main::@18/(byte*) current_piece#37 )
  call play_spawn_current 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (byte) current_movedown_counter#34 ← phi( main::@19/(byte) current_movedown_counter#38 )
  (byte) keyboard_modifiers#40 ← phi( main::@19/(byte) keyboard_modifiers#46 )
  (byte) keyboard_events_size#49 ← phi( main::@19/(byte) keyboard_events_size#58 )
  (byte) render_screen_showing#28 ← phi( main::@19/(byte) render_screen_showing#32 )
  (byte) render_screen_show#44 ← phi( main::@19/(byte) render_screen_show#47 )
  (byte) render_screen_render#26 ← phi( main::@19/(byte) render_screen_render#39 )
  (byte) current_piece_char#13 ← phi( main::@19/(byte) current_piece_char#3 )
  (byte) current_ypos#19 ← phi( main::@19/(byte) current_ypos#4 )
  (byte) current_xpos#24 ← phi( main::@19/(byte) current_xpos#6 )
  (byte*) current_piece_gfx#17 ← phi( main::@19/(byte*) current_piece_gfx#5 )
  (byte) current_orientation#21 ← phi( main::@19/(byte) current_orientation#6 )
  (byte*) current_piece#14 ← phi( main::@19/(byte*) current_piece#4 )
  (byte*) current_piece#5 ← (byte*) current_piece#14
  (byte) current_orientation#7 ← (byte) current_orientation#21
  (byte*) current_piece_gfx#6 ← (byte*) current_piece_gfx#17
  (byte) current_xpos#7 ← (byte) current_xpos#24
  (byte) current_ypos#5 ← (byte) current_ypos#19
  (byte) current_piece_char#4 ← (byte) current_piece_char#13
  call render_playfield 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (byte) current_movedown_counter#30 ← phi( main::@20/(byte) current_movedown_counter#34 )
  (byte) keyboard_modifiers#35 ← phi( main::@20/(byte) keyboard_modifiers#40 )
  (byte) keyboard_events_size#41 ← phi( main::@20/(byte) keyboard_events_size#49 )
  (byte) render_screen_showing#22 ← phi( main::@20/(byte) render_screen_showing#28 )
  (byte) current_piece_char#48 ← phi( main::@20/(byte) current_piece_char#4 )
  (byte*) current_piece_gfx#64 ← phi( main::@20/(byte*) current_piece_gfx#6 )
  (byte) current_orientation#59 ← phi( main::@20/(byte) current_orientation#7 )
  (byte*) current_piece#50 ← phi( main::@20/(byte*) current_piece#5 )
  (byte) render_screen_show#36 ← phi( main::@20/(byte) render_screen_show#44 )
  (byte) current_xpos#66 ← phi( main::@20/(byte) current_xpos#7 )
  (byte) render_screen_render#35 ← phi( main::@20/(byte) render_screen_render#26 )
  (byte) current_ypos#23 ← phi( main::@20/(byte) current_ypos#5 )
  call render_current 
  to:main::@22
main::@22: scope:[main]  from main::@21
  (byte) current_movedown_counter#23 ← phi( main::@21/(byte) current_movedown_counter#30 )
  (byte) keyboard_modifiers#29 ← phi( main::@21/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#32 ← phi( main::@21/(byte) keyboard_events_size#41 )
  (byte) render_screen_showing#16 ← phi( main::@21/(byte) render_screen_showing#22 )
  (byte) current_piece_char#33 ← phi( main::@21/(byte) current_piece_char#48 )
  (byte) current_ypos#45 ← phi( main::@21/(byte) current_ypos#23 )
  (byte) current_xpos#61 ← phi( main::@21/(byte) current_xpos#66 )
  (byte*) current_piece_gfx#48 ← phi( main::@21/(byte*) current_piece_gfx#64 )
  (byte) current_orientation#47 ← phi( main::@21/(byte) current_orientation#59 )
  (byte*) current_piece#38 ← phi( main::@21/(byte*) current_piece#50 )
  (byte) render_screen_render#31 ← phi( main::@21/(byte) render_screen_render#35 )
  (byte) render_screen_show#28 ← phi( main::@21/(byte) render_screen_show#36 )
  to:main::@1
main::@1: scope:[main]  from main::@22 main::@31 main::@7
  (byte) current_movedown_counter#19 ← phi( main::@22/(byte) current_movedown_counter#23 main::@31/(byte) current_movedown_counter#24 main::@7/(byte) current_movedown_counter#25 )
  (byte) keyboard_modifiers#24 ← phi( main::@22/(byte) keyboard_modifiers#29 main::@31/(byte) keyboard_modifiers#30 main::@7/(byte) keyboard_modifiers#31 )
  (byte) keyboard_events_size#27 ← phi( main::@22/(byte) keyboard_events_size#32 main::@31/(byte) keyboard_events_size#33 main::@7/(byte) keyboard_events_size#34 )
  (byte) render_screen_showing#13 ← phi( main::@22/(byte) render_screen_showing#16 main::@31/(byte) render_screen_showing#17 main::@7/(byte) render_screen_showing#18 )
  (byte) current_piece_char#24 ← phi( main::@22/(byte) current_piece_char#33 main::@31/(byte) current_piece_char#34 main::@7/(byte) current_piece_char#35 )
  (byte) current_ypos#37 ← phi( main::@22/(byte) current_ypos#45 main::@31/(byte) current_ypos#46 main::@7/(byte) current_ypos#47 )
  (byte) current_xpos#45 ← phi( main::@22/(byte) current_xpos#61 main::@31/(byte) current_xpos#62 main::@7/(byte) current_xpos#63 )
  (byte*) current_piece_gfx#34 ← phi( main::@22/(byte*) current_piece_gfx#48 main::@31/(byte*) current_piece_gfx#49 main::@7/(byte*) current_piece_gfx#50 )
  (byte) current_orientation#39 ← phi( main::@22/(byte) current_orientation#47 main::@31/(byte) current_orientation#48 main::@7/(byte) current_orientation#49 )
  (byte*) current_piece#28 ← phi( main::@22/(byte*) current_piece#38 main::@31/(byte*) current_piece#39 main::@7/(byte*) current_piece#40 )
  (byte) render_screen_render#23 ← phi( main::@22/(byte) render_screen_render#31 main::@31/(byte) render_screen_render#6 main::@7/(byte) render_screen_render#32 )
  (byte) render_screen_show#23 ← phi( main::@22/(byte) render_screen_show#28 main::@31/(byte) render_screen_show#6 main::@7/(byte) render_screen_show#29 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) render_screen_render#59 ← phi( main::@1/(byte) render_screen_render#23 )
  (byte) current_piece_char#76 ← phi( main::@1/(byte) current_piece_char#24 )
  (byte) current_xpos#98 ← phi( main::@1/(byte) current_xpos#45 )
  (byte*) current_piece_gfx#88 ← phi( main::@1/(byte*) current_piece_gfx#34 )
  (byte) current_orientation#73 ← phi( main::@1/(byte) current_orientation#39 )
  (byte*) current_piece#69 ← phi( main::@1/(byte*) current_piece#28 )
  (byte) current_ypos#72 ← phi( main::@1/(byte) current_ypos#37 )
  (byte) current_movedown_counter#42 ← phi( main::@1/(byte) current_movedown_counter#19 )
  (byte) keyboard_modifiers#41 ← phi( main::@1/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#50 ← phi( main::@1/(byte) keyboard_events_size#27 )
  (byte) render_screen_showing#23 ← phi( main::@1/(byte) render_screen_showing#13 )
  (byte) render_screen_show#37 ← phi( main::@1/(byte) render_screen_show#23 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  (byte) render_screen_render#58 ← phi( main::@2/(byte) render_screen_render#59 main::@5/(byte) render_screen_render#60 )
  (byte) current_piece_char#69 ← phi( main::@2/(byte) current_piece_char#76 main::@5/(byte) current_piece_char#77 )
  (byte) current_xpos#95 ← phi( main::@2/(byte) current_xpos#98 main::@5/(byte) current_xpos#99 )
  (byte*) current_piece_gfx#82 ← phi( main::@2/(byte*) current_piece_gfx#88 main::@5/(byte*) current_piece_gfx#89 )
  (byte) current_orientation#70 ← phi( main::@2/(byte) current_orientation#73 main::@5/(byte) current_orientation#74 )
  (byte*) current_piece#64 ← phi( main::@2/(byte*) current_piece#69 main::@5/(byte*) current_piece#70 )
  (byte) current_ypos#69 ← phi( main::@2/(byte) current_ypos#72 main::@5/(byte) current_ypos#73 )
  (byte) current_movedown_counter#39 ← phi( main::@2/(byte) current_movedown_counter#42 main::@5/(byte) current_movedown_counter#43 )
  (byte) keyboard_modifiers#36 ← phi( main::@2/(byte) keyboard_modifiers#41 main::@5/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#42 ← phi( main::@2/(byte) keyboard_events_size#50 main::@5/(byte) keyboard_events_size#51 )
  (byte) render_screen_showing#19 ← phi( main::@2/(byte) render_screen_showing#23 main::@5/(byte) render_screen_showing#24 )
  (byte) render_screen_show#30 ← phi( main::@2/(byte) render_screen_show#37 main::@5/(byte) render_screen_show#38 )
  (bool~) main::$8 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) main::$8) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) render_screen_render#60 ← phi( main::@4/(byte) render_screen_render#58 )
  (byte) current_piece_char#77 ← phi( main::@4/(byte) current_piece_char#69 )
  (byte) current_xpos#99 ← phi( main::@4/(byte) current_xpos#95 )
  (byte*) current_piece_gfx#89 ← phi( main::@4/(byte*) current_piece_gfx#82 )
  (byte) current_orientation#74 ← phi( main::@4/(byte) current_orientation#70 )
  (byte*) current_piece#70 ← phi( main::@4/(byte*) current_piece#64 )
  (byte) current_ypos#73 ← phi( main::@4/(byte) current_ypos#69 )
  (byte) current_movedown_counter#43 ← phi( main::@4/(byte) current_movedown_counter#39 )
  (byte) keyboard_modifiers#42 ← phi( main::@4/(byte) keyboard_modifiers#36 )
  (byte) keyboard_events_size#51 ← phi( main::@4/(byte) keyboard_events_size#42 )
  (byte) render_screen_showing#24 ← phi( main::@4/(byte) render_screen_showing#19 )
  (byte) render_screen_show#38 ← phi( main::@4/(byte) render_screen_show#30 )
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte) render_screen_render#57 ← phi( main::@4/(byte) render_screen_render#58 )
  (byte) current_piece_char#60 ← phi( main::@4/(byte) current_piece_char#69 )
  (byte) current_xpos#88 ← phi( main::@4/(byte) current_xpos#95 )
  (byte*) current_piece_gfx#77 ← phi( main::@4/(byte*) current_piece_gfx#82 )
  (byte) current_orientation#65 ← phi( main::@4/(byte) current_orientation#70 )
  (byte*) current_piece#59 ← phi( main::@4/(byte*) current_piece#64 )
  (byte) current_ypos#64 ← phi( main::@4/(byte) current_ypos#69 )
  (byte) current_movedown_counter#35 ← phi( main::@4/(byte) current_movedown_counter#39 )
  (byte) keyboard_modifiers#32 ← phi( main::@4/(byte) keyboard_modifiers#36 )
  (byte) keyboard_events_size#35 ← phi( main::@4/(byte) keyboard_events_size#42 )
  (byte) render_screen_showing#12 ← phi( main::@4/(byte) render_screen_showing#19 )
  (byte) render_screen_show#18 ← phi( main::@4/(byte) render_screen_show#30 )
  call render_show 
  to:main::@23
main::@23: scope:[main]  from main::@6
  (byte) render_screen_render#56 ← phi( main::@6/(byte) render_screen_render#57 )
  (byte) render_screen_show#56 ← phi( main::@6/(byte) render_screen_show#18 )
  (byte) current_piece_char#49 ← phi( main::@6/(byte) current_piece_char#60 )
  (byte) current_xpos#78 ← phi( main::@6/(byte) current_xpos#88 )
  (byte*) current_piece_gfx#65 ← phi( main::@6/(byte*) current_piece_gfx#77 )
  (byte) current_orientation#60 ← phi( main::@6/(byte) current_orientation#65 )
  (byte*) current_piece#51 ← phi( main::@6/(byte*) current_piece#59 )
  (byte) current_ypos#57 ← phi( main::@6/(byte) current_ypos#64 )
  (byte) current_movedown_counter#31 ← phi( main::@6/(byte) current_movedown_counter#35 )
  (byte) keyboard_modifiers#23 ← phi( main::@6/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#26 ← phi( main::@6/(byte) keyboard_events_size#35 )
  (byte) render_screen_showing#8 ← phi( main::@6/(byte) render_screen_showing#2 )
  (byte) render_screen_showing#3 ← (byte) render_screen_showing#8
  call keyboard_event_scan 
  to:main::@24
main::@24: scope:[main]  from main::@23
  (byte) render_screen_showing#40 ← phi( main::@23/(byte) render_screen_showing#3 )
  (byte) render_screen_render#54 ← phi( main::@23/(byte) render_screen_render#56 )
  (byte) render_screen_show#54 ← phi( main::@23/(byte) render_screen_show#56 )
  (byte) current_piece_char#36 ← phi( main::@23/(byte) current_piece_char#49 )
  (byte) current_xpos#64 ← phi( main::@23/(byte) current_xpos#78 )
  (byte*) current_piece_gfx#51 ← phi( main::@23/(byte*) current_piece_gfx#65 )
  (byte) current_orientation#50 ← phi( main::@23/(byte) current_orientation#60 )
  (byte*) current_piece#41 ← phi( main::@23/(byte*) current_piece#51 )
  (byte) current_ypos#48 ← phi( main::@23/(byte) current_ypos#57 )
  (byte) current_movedown_counter#26 ← phi( main::@23/(byte) current_movedown_counter#31 )
  (byte) keyboard_modifiers#15 ← phi( main::@23/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#17 ← phi( main::@23/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#17
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#15
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@25
main::@25: scope:[main]  from main::@24
  (byte) keyboard_modifiers#51 ← phi( main::@24/(byte) keyboard_modifiers#7 )
  (byte) render_screen_showing#37 ← phi( main::@24/(byte) render_screen_showing#40 )
  (byte) render_screen_render#52 ← phi( main::@24/(byte) render_screen_render#54 )
  (byte) render_screen_show#51 ← phi( main::@24/(byte) render_screen_show#54 )
  (byte) current_piece_char#23 ← phi( main::@24/(byte) current_piece_char#36 )
  (byte) current_xpos#44 ← phi( main::@24/(byte) current_xpos#64 )
  (byte*) current_piece_gfx#32 ← phi( main::@24/(byte*) current_piece_gfx#51 )
  (byte) current_orientation#37 ← phi( main::@24/(byte) current_orientation#50 )
  (byte*) current_piece#27 ← phi( main::@24/(byte*) current_piece#41 )
  (byte) current_ypos#36 ← phi( main::@24/(byte) current_ypos#48 )
  (byte) current_movedown_counter#14 ← phi( main::@24/(byte) current_movedown_counter#26 )
  (byte) keyboard_events_size#18 ← phi( main::@24/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#5 ← phi( main::@24/(byte) keyboard_event_get::return#3 )
  (byte~) main::$11 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#18
  (byte) main::key_event#0 ← (byte~) main::$11
  (byte) main::render#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) play_move_down::key_event#0 ← (byte) main::key_event#0
  call play_move_down 
  (byte) play_move_down::return#3 ← (byte) play_move_down::return#2
  to:main::@26
main::@26: scope:[main]  from main::@25
  (byte) keyboard_modifiers#47 ← phi( main::@25/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#59 ← phi( main::@25/(byte) keyboard_events_size#7 )
  (byte) render_screen_showing#33 ← phi( main::@25/(byte) render_screen_showing#37 )
  (byte) render_screen_render#50 ← phi( main::@25/(byte) render_screen_render#52 )
  (byte) render_screen_show#48 ← phi( main::@25/(byte) render_screen_show#51 )
  (byte) main::key_event#1 ← phi( main::@25/(byte) main::key_event#0 )
  (byte) main::render#4 ← phi( main::@25/(byte) main::render#0 )
  (byte) current_piece_char#14 ← phi( main::@25/(byte) current_piece_char#1 )
  (byte) current_xpos#25 ← phi( main::@25/(byte) current_xpos#1 )
  (byte*) current_piece_gfx#18 ← phi( main::@25/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#22 ← phi( main::@25/(byte) current_orientation#2 )
  (byte*) current_piece#15 ← phi( main::@25/(byte*) current_piece#2 )
  (byte) current_ypos#20 ← phi( main::@25/(byte) current_ypos#2 )
  (byte) current_movedown_counter#11 ← phi( main::@25/(byte) current_movedown_counter#3 )
  (byte) play_move_down::return#5 ← phi( main::@25/(byte) play_move_down::return#3 )
  (byte~) main::$12 ← (byte) play_move_down::return#5
  (byte) current_movedown_counter#4 ← (byte) current_movedown_counter#11
  (byte) current_ypos#6 ← (byte) current_ypos#20
  (byte*) current_piece#6 ← (byte*) current_piece#15
  (byte) current_orientation#8 ← (byte) current_orientation#22
  (byte*) current_piece_gfx#7 ← (byte*) current_piece_gfx#18
  (byte) current_xpos#8 ← (byte) current_xpos#25
  (byte) current_piece_char#5 ← (byte) current_piece_char#14
  (byte) main::render#1 ← (byte) main::render#4 + (byte~) main::$12
  (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#1
  call play_move_leftright 
  (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1
  to:main::@27
main::@27: scope:[main]  from main::@26
  (byte) current_movedown_counter#36 ← phi( main::@26/(byte) current_movedown_counter#4 )
  (byte) keyboard_modifiers#43 ← phi( main::@26/(byte) keyboard_modifiers#47 )
  (byte) keyboard_events_size#52 ← phi( main::@26/(byte) keyboard_events_size#59 )
  (byte) render_screen_showing#29 ← phi( main::@26/(byte) render_screen_showing#33 )
  (byte) current_piece_char#61 ← phi( main::@26/(byte) current_piece_char#5 )
  (byte) render_screen_render#46 ← phi( main::@26/(byte) render_screen_render#50 )
  (byte) render_screen_show#45 ← phi( main::@26/(byte) render_screen_show#48 )
  (byte*) current_piece#57 ← phi( main::@26/(byte*) current_piece#6 )
  (byte) current_ypos#54 ← phi( main::@26/(byte) current_ypos#6 )
  (byte*) current_piece_gfx#33 ← phi( main::@26/(byte*) current_piece_gfx#7 )
  (byte) current_orientation#38 ← phi( main::@26/(byte) current_orientation#8 )
  (byte) main::key_event#2 ← phi( main::@26/(byte) main::key_event#1 )
  (byte) main::render#5 ← phi( main::@26/(byte) main::render#1 )
  (byte) current_xpos#26 ← phi( main::@26/(byte) current_xpos#3 )
  (byte) play_move_leftright::return#6 ← phi( main::@26/(byte) play_move_leftright::return#4 )
  (byte~) main::$13 ← (byte) play_move_leftright::return#6
  (byte) current_xpos#9 ← (byte) current_xpos#26
  (byte) main::render#2 ← (byte) main::render#5 + (byte~) main::$13
  (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#2
  call play_move_rotate 
  (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1
  to:main::@28
main::@28: scope:[main]  from main::@27
  (byte) current_movedown_counter#32 ← phi( main::@27/(byte) current_movedown_counter#36 )
  (byte) keyboard_modifiers#37 ← phi( main::@27/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#43 ← phi( main::@27/(byte) keyboard_events_size#52 )
  (byte) render_screen_showing#25 ← phi( main::@27/(byte) render_screen_showing#29 )
  (byte) current_piece_char#50 ← phi( main::@27/(byte) current_piece_char#61 )
  (byte) current_ypos#58 ← phi( main::@27/(byte) current_ypos#54 )
  (byte) current_xpos#79 ← phi( main::@27/(byte) current_xpos#9 )
  (byte*) current_piece#52 ← phi( main::@27/(byte*) current_piece#57 )
  (byte) render_screen_render#40 ← phi( main::@27/(byte) render_screen_render#46 )
  (byte) render_screen_show#39 ← phi( main::@27/(byte) render_screen_show#45 )
  (byte) main::render#6 ← phi( main::@27/(byte) main::render#2 )
  (byte*) current_piece_gfx#19 ← phi( main::@27/(byte*) current_piece_gfx#2 )
  (byte) current_orientation#23 ← phi( main::@27/(byte) current_orientation#3 )
  (byte) play_move_rotate::return#6 ← phi( main::@27/(byte) play_move_rotate::return#4 )
  (byte~) main::$14 ← (byte) play_move_rotate::return#6
  (byte) current_orientation#9 ← (byte) current_orientation#23
  (byte*) current_piece_gfx#8 ← (byte*) current_piece_gfx#19
  (byte) main::render#3 ← (byte) main::render#6 + (byte~) main::$14
  (bool~) main::$15 ← (byte) main::render#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) main::$16 ← ! (bool~) main::$15
  if((bool~) main::$16) goto main::@7
  to:main::@13
main::@7: scope:[main]  from main::@28
  (byte) current_movedown_counter#25 ← phi( main::@28/(byte) current_movedown_counter#32 )
  (byte) keyboard_modifiers#31 ← phi( main::@28/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#34 ← phi( main::@28/(byte) keyboard_events_size#43 )
  (byte) render_screen_showing#18 ← phi( main::@28/(byte) render_screen_showing#25 )
  (byte) current_piece_char#35 ← phi( main::@28/(byte) current_piece_char#50 )
  (byte) current_ypos#47 ← phi( main::@28/(byte) current_ypos#58 )
  (byte) current_xpos#63 ← phi( main::@28/(byte) current_xpos#79 )
  (byte*) current_piece_gfx#50 ← phi( main::@28/(byte*) current_piece_gfx#8 )
  (byte) current_orientation#49 ← phi( main::@28/(byte) current_orientation#9 )
  (byte*) current_piece#40 ← phi( main::@28/(byte*) current_piece#52 )
  (byte) render_screen_render#32 ← phi( main::@28/(byte) render_screen_render#40 )
  (byte) render_screen_show#29 ← phi( main::@28/(byte) render_screen_show#39 )
  to:main::@1
main::@13: scope:[main]  from main::@28
  (byte) current_movedown_counter#40 ← phi( main::@28/(byte) current_movedown_counter#32 )
  (byte) keyboard_modifiers#48 ← phi( main::@28/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#60 ← phi( main::@28/(byte) keyboard_events_size#43 )
  (byte) render_screen_showing#34 ← phi( main::@28/(byte) render_screen_showing#25 )
  (byte) current_piece_char#70 ← phi( main::@28/(byte) current_piece_char#50 )
  (byte) current_orientation#71 ← phi( main::@28/(byte) current_orientation#9 )
  (byte*) current_piece#65 ← phi( main::@28/(byte*) current_piece#52 )
  (byte*) current_piece_gfx#83 ← phi( main::@28/(byte*) current_piece_gfx#8 )
  (byte) current_xpos#89 ← phi( main::@28/(byte) current_xpos#79 )
  (byte) render_screen_show#40 ← phi( main::@28/(byte) render_screen_show#39 )
  (byte) current_ypos#49 ← phi( main::@28/(byte) current_ypos#58 )
  (byte) render_screen_render#25 ← phi( main::@28/(byte) render_screen_render#40 )
  call render_playfield 
  to:main::@29
main::@29: scope:[main]  from main::@13
  (byte) current_movedown_counter#37 ← phi( main::@13/(byte) current_movedown_counter#40 )
  (byte) keyboard_modifiers#44 ← phi( main::@13/(byte) keyboard_modifiers#48 )
  (byte) keyboard_events_size#53 ← phi( main::@13/(byte) keyboard_events_size#60 )
  (byte) render_screen_showing#30 ← phi( main::@13/(byte) render_screen_showing#34 )
  (byte) current_piece_char#62 ← phi( main::@13/(byte) current_piece_char#70 )
  (byte) current_orientation#66 ← phi( main::@13/(byte) current_orientation#71 )
  (byte*) current_piece#60 ← phi( main::@13/(byte*) current_piece#65 )
  (byte*) current_piece_gfx#67 ← phi( main::@13/(byte*) current_piece_gfx#83 )
  (byte) current_xpos#67 ← phi( main::@13/(byte) current_xpos#89 )
  (byte) render_screen_show#31 ← phi( main::@13/(byte) render_screen_show#40 )
  (byte) render_screen_render#33 ← phi( main::@13/(byte) render_screen_render#25 )
  (byte) current_ypos#24 ← phi( main::@13/(byte) current_ypos#49 )
  call render_current 
  to:main::@30
main::@30: scope:[main]  from main::@29
  (byte) current_movedown_counter#33 ← phi( main::@29/(byte) current_movedown_counter#37 )
  (byte) keyboard_modifiers#38 ← phi( main::@29/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#44 ← phi( main::@29/(byte) keyboard_events_size#53 )
  (byte) render_screen_showing#26 ← phi( main::@29/(byte) render_screen_showing#30 )
  (byte) current_piece_char#51 ← phi( main::@29/(byte) current_piece_char#62 )
  (byte) current_ypos#59 ← phi( main::@29/(byte) current_ypos#24 )
  (byte) current_xpos#80 ← phi( main::@29/(byte) current_xpos#67 )
  (byte*) current_piece_gfx#66 ← phi( main::@29/(byte*) current_piece_gfx#67 )
  (byte) current_orientation#61 ← phi( main::@29/(byte) current_orientation#66 )
  (byte*) current_piece#53 ← phi( main::@29/(byte*) current_piece#60 )
  (byte) render_screen_show#21 ← phi( main::@29/(byte) render_screen_show#31 )
  (byte) render_screen_render#18 ← phi( main::@29/(byte) render_screen_render#33 )
  call render_screen_swap 
  to:main::@31
main::@31: scope:[main]  from main::@30
  (byte) current_movedown_counter#24 ← phi( main::@30/(byte) current_movedown_counter#33 )
  (byte) keyboard_modifiers#30 ← phi( main::@30/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#33 ← phi( main::@30/(byte) keyboard_events_size#44 )
  (byte) render_screen_showing#17 ← phi( main::@30/(byte) render_screen_showing#26 )
  (byte) current_piece_char#34 ← phi( main::@30/(byte) current_piece_char#51 )
  (byte) current_ypos#46 ← phi( main::@30/(byte) current_ypos#59 )
  (byte) current_xpos#62 ← phi( main::@30/(byte) current_xpos#80 )
  (byte*) current_piece_gfx#49 ← phi( main::@30/(byte*) current_piece_gfx#66 )
  (byte) current_orientation#48 ← phi( main::@30/(byte) current_orientation#61 )
  (byte*) current_piece#39 ← phi( main::@30/(byte*) current_piece#53 )
  (byte) render_screen_show#15 ← phi( main::@30/(byte) render_screen_show#4 )
  (byte) render_screen_render#15 ← phi( main::@30/(byte) render_screen_render#4 )
  (byte) render_screen_render#6 ← (byte) render_screen_render#15
  (byte) render_screen_show#6 ← (byte) render_screen_show#15
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) current_movedown_counter#12 ← phi( main::@1/(byte) current_movedown_counter#19 )
  (byte) keyboard_modifiers#16 ← phi( main::@1/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#19 ← phi( main::@1/(byte) keyboard_events_size#27 )
  (byte) render_screen_showing#9 ← phi( main::@1/(byte) render_screen_showing#13 )
  (byte) current_piece_char#15 ← phi( main::@1/(byte) current_piece_char#24 )
  (byte) current_ypos#21 ← phi( main::@1/(byte) current_ypos#37 )
  (byte) current_xpos#27 ← phi( main::@1/(byte) current_xpos#45 )
  (byte*) current_piece_gfx#20 ← phi( main::@1/(byte*) current_piece_gfx#34 )
  (byte) current_orientation#24 ← phi( main::@1/(byte) current_orientation#39 )
  (byte*) current_piece#16 ← phi( main::@1/(byte*) current_piece#28 )
  (byte) render_screen_render#16 ← phi( main::@1/(byte) render_screen_render#23 )
  (byte) render_screen_show#16 ← phi( main::@1/(byte) render_screen_show#23 )
  (byte) render_screen_show#7 ← (byte) render_screen_show#16
  (byte) render_screen_render#7 ← (byte) render_screen_render#16
  (byte*) current_piece#7 ← (byte*) current_piece#16
  (byte) current_orientation#10 ← (byte) current_orientation#24
  (byte*) current_piece_gfx#9 ← (byte*) current_piece_gfx#20
  (byte) current_xpos#10 ← (byte) current_xpos#27
  (byte) current_ypos#7 ← (byte) current_ypos#21
  (byte) current_piece_char#6 ← (byte) current_piece_char#15
  (byte) render_screen_showing#4 ← (byte) render_screen_showing#9
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#19
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#16
  (byte) current_movedown_counter#5 ← (byte) current_movedown_counter#12
  return 
  to:@return
@32: scope:[]  from @26
  (byte) irq_raster_next#18 ← phi( @26/(byte) irq_raster_next#19 )
  (byte) irq_cnt#17 ← phi( @26/(byte) irq_cnt#19 )
  (byte) irq_sprite_ptr#15 ← phi( @26/(byte) irq_sprite_ptr#16 )
  (byte) current_movedown_counter#20 ← phi( @26/(byte) current_movedown_counter#27 )
  (byte) keyboard_modifiers#25 ← phi( @26/(byte) keyboard_modifiers#33 )
  (byte) keyboard_events_size#28 ← phi( @26/(byte) keyboard_events_size#36 )
  (byte) render_screen_showing#14 ← phi( @26/(byte) render_screen_showing#20 )
  (byte) current_piece_char#25 ← phi( @26/(byte) current_piece_char#37 )
  (byte) current_ypos#38 ← phi( @26/(byte) current_ypos#50 )
  (byte) current_xpos#46 ← phi( @26/(byte) current_xpos#65 )
  (byte*) current_piece_gfx#35 ← phi( @26/(byte*) current_piece_gfx#52 )
  (byte) current_orientation#40 ← phi( @26/(byte) current_orientation#51 )
  (byte*) current_piece#29 ← phi( @26/(byte*) current_piece#42 )
  (byte) render_screen_render#24 ← phi( @26/(byte) render_screen_render#34 )
  (byte) render_screen_show#24 ← phi( @26/(byte) render_screen_show#32 )
  (byte) irq_sprite_ypos#8 ← phi( @26/(byte) irq_sprite_ypos#15 )
  call main 
  to:@34
@34: scope:[]  from @32
  (byte) current_movedown_counter#13 ← phi( @32/(byte) current_movedown_counter#5 )
  (byte) keyboard_modifiers#17 ← phi( @32/(byte) keyboard_modifiers#8 )
  (byte) keyboard_events_size#20 ← phi( @32/(byte) keyboard_events_size#8 )
  (byte) render_screen_showing#10 ← phi( @32/(byte) render_screen_showing#4 )
  (byte) current_piece_char#16 ← phi( @32/(byte) current_piece_char#6 )
  (byte) current_ypos#22 ← phi( @32/(byte) current_ypos#7 )
  (byte) current_xpos#28 ← phi( @32/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#21 ← phi( @32/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#25 ← phi( @32/(byte) current_orientation#10 )
  (byte*) current_piece#17 ← phi( @32/(byte*) current_piece#7 )
  (byte) render_screen_render#17 ← phi( @32/(byte) render_screen_render#7 )
  (byte) render_screen_show#17 ← phi( @32/(byte) render_screen_show#7 )
  (byte) render_screen_show#8 ← (byte) render_screen_show#17
  (byte) render_screen_render#8 ← (byte) render_screen_render#17
  (byte*) current_piece#8 ← (byte*) current_piece#17
  (byte) current_orientation#11 ← (byte) current_orientation#25
  (byte*) current_piece_gfx#10 ← (byte*) current_piece_gfx#21
  (byte) current_xpos#11 ← (byte) current_xpos#28
  (byte) current_ypos#8 ← (byte) current_ypos#22
  (byte) current_piece_char#7 ← (byte) current_piece_char#16
  (byte) render_screen_showing#5 ← (byte) render_screen_showing#10
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#20
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#17
  (byte) current_movedown_counter#6 ← (byte) current_movedown_counter#13
  to:@end
@end: scope:[]  from @34

SYMBOL TABLE SSA
(byte~) $0
(byte*~) $1
(byte/signed word/word/dword/signed dword/signed byte~) $10
(byte/signed byte/word/signed word/dword/signed dword~) $11
(byte/signed word/word/dword/signed dword/signed byte~) $12
(byte/signed byte/word/signed word/dword/signed dword~) $13
(byte/signed word/word/dword/signed dword/signed byte~) $14
(byte/signed byte/word/signed word/dword/signed dword~) $15
(byte/signed word/word/dword/signed dword/signed byte~) $16
(byte/signed byte/word/signed word/dword/signed dword~) $17
(byte/signed word/word/dword/signed dword/signed byte~) $18
(word~) $19
(byte*~) $2
(word~) $20
(word~) $21
(word~) $22
(word~) $23
(word~) $24
(word~) $25
(byte/signed word/word/dword/signed dword~) $26
(byte~) $3
(byte~) $4
(byte/signed byte/word/signed word/dword/signed dword~) $5
(byte/signed word/word/dword/signed dword/signed byte~) $6
(byte/signed byte/word/signed word/dword/signed dword~) $7
(byte/signed word/word/dword/signed dword/signed byte~) $8
(byte/signed byte/word/signed word/dword/signed dword~) $9
(label) @12
(label) @14
(label) @20
(label) @21
(label) @23
(label) @26
(label) @32
(label) @33
(label) @34
(label) @5
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BROWN
(byte) BROWN#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_A_DDR#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA1_PORT_B_DDR
(byte*) CIA1_PORT_B_DDR#0
(byte*) CIA2_INTERRUPT
(byte*) CIA2_INTERRUPT#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B#0
(byte*) CIA2_PORT_B_DDR
(byte*) CIA2_PORT_B_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte) COLLISION_BOTTOM
(byte) COLLISION_BOTTOM#0
(byte) COLLISION_LEFT
(byte) COLLISION_LEFT#0
(byte) COLLISION_NONE
(byte) COLLISION_NONE#0
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_PLAYFIELD#0
(byte) COLLISION_RIGHT
(byte) COLLISION_RIGHT#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D016
(byte*) D016#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_BG#0
(byte) IRQ_COLLISION_SPRITE
(byte) IRQ_COLLISION_SPRITE#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_LIGHTPEN
(byte) IRQ_LIGHTPEN#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte) IRQ_RASTER_FIRST
(byte) IRQ_RASTER_FIRST#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte) KEY_0
(byte) KEY_0#0
(byte) KEY_1
(byte) KEY_1#0
(byte) KEY_2
(byte) KEY_2#0
(byte) KEY_3
(byte) KEY_3#0
(byte) KEY_4
(byte) KEY_4#0
(byte) KEY_5
(byte) KEY_5#0
(byte) KEY_6
(byte) KEY_6#0
(byte) KEY_7
(byte) KEY_7#0
(byte) KEY_8
(byte) KEY_8#0
(byte) KEY_9
(byte) KEY_9#0
(byte) KEY_A
(byte) KEY_A#0
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_LEFT#0
(byte) KEY_ARROW_UP
(byte) KEY_ARROW_UP#0
(byte) KEY_ASTERISK
(byte) KEY_ASTERISK#0
(byte) KEY_AT
(byte) KEY_AT#0
(byte) KEY_B
(byte) KEY_B#0
(byte) KEY_C
(byte) KEY_C#0
(byte) KEY_COLON
(byte) KEY_COLON#0
(byte) KEY_COMMA
(byte) KEY_COMMA#0
(byte) KEY_COMMODORE
(byte) KEY_COMMODORE#0
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_DOWN#0
(byte) KEY_CRSR_RIGHT
(byte) KEY_CRSR_RIGHT#0
(byte) KEY_CTRL
(byte) KEY_CTRL#0
(byte) KEY_D
(byte) KEY_D#0
(byte) KEY_DEL
(byte) KEY_DEL#0
(byte) KEY_DOT
(byte) KEY_DOT#0
(byte) KEY_E
(byte) KEY_E#0
(byte) KEY_EQUALS
(byte) KEY_EQUALS#0
(byte) KEY_F
(byte) KEY_F#0
(byte) KEY_F1
(byte) KEY_F1#0
(byte) KEY_F3
(byte) KEY_F3#0
(byte) KEY_F5
(byte) KEY_F5#0
(byte) KEY_F7
(byte) KEY_F7#0
(byte) KEY_G
(byte) KEY_G#0
(byte) KEY_H
(byte) KEY_H#0
(byte) KEY_HOME
(byte) KEY_HOME#0
(byte) KEY_I
(byte) KEY_I#0
(byte) KEY_J
(byte) KEY_J#0
(byte) KEY_K
(byte) KEY_K#0
(byte) KEY_L
(byte) KEY_L#0
(byte) KEY_LSHIFT
(byte) KEY_LSHIFT#0
(byte) KEY_M
(byte) KEY_M#0
(byte) KEY_MINUS
(byte) KEY_MINUS#0
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_COMMODORE#0
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_CTRL#0
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_LSHIFT#0
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_MODIFIER_SHIFT#0
(byte) KEY_N
(byte) KEY_N#0
(byte) KEY_O
(byte) KEY_O#0
(byte) KEY_P
(byte) KEY_P#0
(byte) KEY_PLUS
(byte) KEY_PLUS#0
(byte) KEY_POUND
(byte) KEY_POUND#0
(byte) KEY_Q
(byte) KEY_Q#0
(byte) KEY_R
(byte) KEY_R#0
(byte) KEY_RETURN
(byte) KEY_RETURN#0
(byte) KEY_RSHIFT
(byte) KEY_RSHIFT#0
(byte) KEY_RUNSTOP
(byte) KEY_RUNSTOP#0
(byte) KEY_S
(byte) KEY_S#0
(byte) KEY_SEMICOLON
(byte) KEY_SEMICOLON#0
(byte) KEY_SLASH
(byte) KEY_SLASH#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) KEY_T
(byte) KEY_T#0
(byte) KEY_U
(byte) KEY_U#0
(byte) KEY_V
(byte) KEY_V#0
(byte) KEY_W
(byte) KEY_W#0
(byte) KEY_X
(byte) KEY_X#0
(byte) KEY_Y
(byte) KEY_Y#0
(byte) KEY_Z
(byte) KEY_Z#0
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_X#0
(byte*) LIGHTPEN_Y
(byte*) LIGHTPEN_Y#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(byte) ORANGE
(byte) ORANGE#0
(word[]) PIECES
(word[]) PIECES#0
(byte[]) PIECES_CHARS
(byte[]) PIECES_CHARS#0
(byte[]) PIECES_START_X
(byte[]) PIECES_START_X#0
(byte[]) PIECES_START_Y
(byte[]) PIECES_START_Y#0
(byte[$18]) PIECE_I
(byte[$18]) PIECE_I#0
(byte[$14]) PIECE_J
(byte[$14]) PIECE_J#0
(byte[$12]) PIECE_L
(byte[$12]) PIECE_L#0
(byte[$16]) PIECE_O
(byte[$16]) PIECE_O#0
(byte[$8]) PIECE_S
(byte[$8]) PIECE_S#0
(byte[$6]) PIECE_T
(byte[$6]) PIECE_T#0
(byte[$10]) PIECE_Z
(byte[$10]) PIECE_Z#0
(byte) PINK
(byte) PINK#0
(byte*) PLAYFIELD_CHARSET
(byte*) PLAYFIELD_CHARSET#0
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_COLS#0
(byte) PLAYFIELD_LINES
(byte) PLAYFIELD_LINES#0
(byte*) PLAYFIELD_SCREEN_1
(byte*) PLAYFIELD_SCREEN_1#0
(byte*) PLAYFIELD_SCREEN_2
(byte*) PLAYFIELD_SCREEN_2#0
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(byte*) PLAYFIELD_SCREEN_ORIGINAL#0
(byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH
(byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH#0
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITES#0
(byte*) PLAYFIELD_SPRITE_PTRS_1
(byte*) PLAYFIELD_SPRITE_PTRS_1#0
(byte*) PLAYFIELD_SPRITE_PTRS_2
(byte*) PLAYFIELD_SPRITE_PTRS_2#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte) PROCPORT_BASIC_KERNEL_IO
(byte) PROCPORT_BASIC_KERNEL_IO#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_KERNEL_IO#0
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_ALL#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_GATE#0
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_NOISE#0
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_PULSE#0
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_RING#0
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SAWTOOTH#0
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_SYNC#0
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TEST#0
(byte) SID_CONTROL_TRIANGLE
(byte) SID_CONTROL_TRIANGLE#0
(byte*) SID_VOICE3_CONTROL
(byte*) SID_VOICE3_CONTROL#0
(word*) SID_VOICE3_FREQ
(word*) SID_VOICE3_FREQ#0
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_HIGH#0
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_FREQ_LOW#0
(byte*) SID_VOICE3_OSC
(byte*) SID_VOICE3_OSC#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_MC1
(byte*) SPRITES_MC1#0
(byte*) SPRITES_MC2
(byte*) SPRITES_MC2#0
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_PRIORITY#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) VIC_RST8
(byte) VIC_RST8#0
(byte) WHITE
(byte) WHITE#0
(byte) YELLOW
(byte) YELLOW#0
(byte) current_movedown_counter
(byte) current_movedown_counter#0
(byte) current_movedown_counter#1
(byte) current_movedown_counter#10
(byte) current_movedown_counter#11
(byte) current_movedown_counter#12
(byte) current_movedown_counter#13
(byte) current_movedown_counter#14
(byte) current_movedown_counter#15
(byte) current_movedown_counter#16
(byte) current_movedown_counter#17
(byte) current_movedown_counter#18
(byte) current_movedown_counter#19
(byte) current_movedown_counter#2
(byte) current_movedown_counter#20
(byte) current_movedown_counter#21
(byte) current_movedown_counter#22
(byte) current_movedown_counter#23
(byte) current_movedown_counter#24
(byte) current_movedown_counter#25
(byte) current_movedown_counter#26
(byte) current_movedown_counter#27
(byte) current_movedown_counter#28
(byte) current_movedown_counter#29
(byte) current_movedown_counter#3
(byte) current_movedown_counter#30
(byte) current_movedown_counter#31
(byte) current_movedown_counter#32
(byte) current_movedown_counter#33
(byte) current_movedown_counter#34
(byte) current_movedown_counter#35
(byte) current_movedown_counter#36
(byte) current_movedown_counter#37
(byte) current_movedown_counter#38
(byte) current_movedown_counter#39
(byte) current_movedown_counter#4
(byte) current_movedown_counter#40
(byte) current_movedown_counter#41
(byte) current_movedown_counter#42
(byte) current_movedown_counter#43
(byte) current_movedown_counter#44
(byte) current_movedown_counter#45
(byte) current_movedown_counter#46
(byte) current_movedown_counter#47
(byte) current_movedown_counter#5
(byte) current_movedown_counter#6
(byte) current_movedown_counter#7
(byte) current_movedown_counter#8
(byte) current_movedown_counter#9
(byte) current_movedown_fast
(byte) current_movedown_fast#0
(byte) current_movedown_slow
(byte) current_movedown_slow#0
(byte) current_orientation
(byte) current_orientation#0
(byte) current_orientation#1
(byte) current_orientation#10
(byte) current_orientation#11
(byte) current_orientation#12
(byte) current_orientation#13
(byte) current_orientation#14
(byte) current_orientation#15
(byte) current_orientation#16
(byte) current_orientation#17
(byte) current_orientation#18
(byte) current_orientation#19
(byte) current_orientation#2
(byte) current_orientation#20
(byte) current_orientation#21
(byte) current_orientation#22
(byte) current_orientation#23
(byte) current_orientation#24
(byte) current_orientation#25
(byte) current_orientation#26
(byte) current_orientation#27
(byte) current_orientation#28
(byte) current_orientation#29
(byte) current_orientation#3
(byte) current_orientation#30
(byte) current_orientation#31
(byte) current_orientation#32
(byte) current_orientation#33
(byte) current_orientation#34
(byte) current_orientation#35
(byte) current_orientation#36
(byte) current_orientation#37
(byte) current_orientation#38
(byte) current_orientation#39
(byte) current_orientation#4
(byte) current_orientation#40
(byte) current_orientation#41
(byte) current_orientation#42
(byte) current_orientation#43
(byte) current_orientation#44
(byte) current_orientation#45
(byte) current_orientation#46
(byte) current_orientation#47
(byte) current_orientation#48
(byte) current_orientation#49
(byte) current_orientation#5
(byte) current_orientation#50
(byte) current_orientation#51
(byte) current_orientation#52
(byte) current_orientation#53
(byte) current_orientation#54
(byte) current_orientation#55
(byte) current_orientation#56
(byte) current_orientation#57
(byte) current_orientation#58
(byte) current_orientation#59
(byte) current_orientation#6
(byte) current_orientation#60
(byte) current_orientation#61
(byte) current_orientation#62
(byte) current_orientation#63
(byte) current_orientation#64
(byte) current_orientation#65
(byte) current_orientation#66
(byte) current_orientation#67
(byte) current_orientation#68
(byte) current_orientation#69
(byte) current_orientation#7
(byte) current_orientation#70
(byte) current_orientation#71
(byte) current_orientation#72
(byte) current_orientation#73
(byte) current_orientation#74
(byte) current_orientation#8
(byte) current_orientation#9
(byte*) current_piece
(byte*) current_piece#0
(byte*) current_piece#1
(byte*) current_piece#10
(byte*) current_piece#11
(byte*) current_piece#12
(byte*) current_piece#13
(byte*) current_piece#14
(byte*) current_piece#15
(byte*) current_piece#16
(byte*) current_piece#17
(byte*) current_piece#18
(byte*) current_piece#19
(byte*) current_piece#2
(byte*) current_piece#20
(byte*) current_piece#21
(byte*) current_piece#22
(byte*) current_piece#23
(byte*) current_piece#24
(byte*) current_piece#25
(byte*) current_piece#26
(byte*) current_piece#27
(byte*) current_piece#28
(byte*) current_piece#29
(byte*) current_piece#3
(byte*) current_piece#30
(byte*) current_piece#31
(byte*) current_piece#32
(byte*) current_piece#33
(byte*) current_piece#34
(byte*) current_piece#35
(byte*) current_piece#36
(byte*) current_piece#37
(byte*) current_piece#38
(byte*) current_piece#39
(byte*) current_piece#4
(byte*) current_piece#40
(byte*) current_piece#41
(byte*) current_piece#42
(byte*) current_piece#43
(byte*) current_piece#44
(byte*) current_piece#45
(byte*) current_piece#46
(byte*) current_piece#47
(byte*) current_piece#48
(byte*) current_piece#49
(byte*) current_piece#5
(byte*) current_piece#50
(byte*) current_piece#51
(byte*) current_piece#52
(byte*) current_piece#53
(byte*) current_piece#54
(byte*) current_piece#55
(byte*) current_piece#56
(byte*) current_piece#57
(byte*) current_piece#58
(byte*) current_piece#59
(byte*) current_piece#6
(byte*) current_piece#60
(byte*) current_piece#61
(byte*) current_piece#62
(byte*) current_piece#63
(byte*) current_piece#64
(byte*) current_piece#65
(byte*) current_piece#66
(byte*) current_piece#67
(byte*) current_piece#68
(byte*) current_piece#69
(byte*) current_piece#7
(byte*) current_piece#70
(byte*) current_piece#8
(byte*) current_piece#9
(byte) current_piece_char
(byte) current_piece_char#0
(byte) current_piece_char#1
(byte) current_piece_char#10
(byte) current_piece_char#11
(byte) current_piece_char#12
(byte) current_piece_char#13
(byte) current_piece_char#14
(byte) current_piece_char#15
(byte) current_piece_char#16
(byte) current_piece_char#17
(byte) current_piece_char#18
(byte) current_piece_char#19
(byte) current_piece_char#2
(byte) current_piece_char#20
(byte) current_piece_char#21
(byte) current_piece_char#22
(byte) current_piece_char#23
(byte) current_piece_char#24
(byte) current_piece_char#25
(byte) current_piece_char#26
(byte) current_piece_char#27
(byte) current_piece_char#28
(byte) current_piece_char#29
(byte) current_piece_char#3
(byte) current_piece_char#30
(byte) current_piece_char#31
(byte) current_piece_char#32
(byte) current_piece_char#33
(byte) current_piece_char#34
(byte) current_piece_char#35
(byte) current_piece_char#36
(byte) current_piece_char#37
(byte) current_piece_char#38
(byte) current_piece_char#39
(byte) current_piece_char#4
(byte) current_piece_char#40
(byte) current_piece_char#41
(byte) current_piece_char#42
(byte) current_piece_char#43
(byte) current_piece_char#44
(byte) current_piece_char#45
(byte) current_piece_char#46
(byte) current_piece_char#47
(byte) current_piece_char#48
(byte) current_piece_char#49
(byte) current_piece_char#5
(byte) current_piece_char#50
(byte) current_piece_char#51
(byte) current_piece_char#52
(byte) current_piece_char#53
(byte) current_piece_char#54
(byte) current_piece_char#55
(byte) current_piece_char#56
(byte) current_piece_char#57
(byte) current_piece_char#58
(byte) current_piece_char#59
(byte) current_piece_char#6
(byte) current_piece_char#60
(byte) current_piece_char#61
(byte) current_piece_char#62
(byte) current_piece_char#63
(byte) current_piece_char#64
(byte) current_piece_char#65
(byte) current_piece_char#66
(byte) current_piece_char#67
(byte) current_piece_char#68
(byte) current_piece_char#69
(byte) current_piece_char#7
(byte) current_piece_char#70
(byte) current_piece_char#71
(byte) current_piece_char#72
(byte) current_piece_char#73
(byte) current_piece_char#74
(byte) current_piece_char#75
(byte) current_piece_char#76
(byte) current_piece_char#77
(byte) current_piece_char#78
(byte) current_piece_char#79
(byte) current_piece_char#8
(byte) current_piece_char#80
(byte) current_piece_char#81
(byte) current_piece_char#82
(byte) current_piece_char#83
(byte) current_piece_char#84
(byte) current_piece_char#9
(byte*) current_piece_gfx
(byte*) current_piece_gfx#0
(byte*) current_piece_gfx#1
(byte*) current_piece_gfx#10
(byte*) current_piece_gfx#11
(byte*) current_piece_gfx#12
(byte*) current_piece_gfx#13
(byte*) current_piece_gfx#14
(byte*) current_piece_gfx#15
(byte*) current_piece_gfx#16
(byte*) current_piece_gfx#17
(byte*) current_piece_gfx#18
(byte*) current_piece_gfx#19
(byte*) current_piece_gfx#2
(byte*) current_piece_gfx#20
(byte*) current_piece_gfx#21
(byte*) current_piece_gfx#22
(byte*) current_piece_gfx#23
(byte*) current_piece_gfx#24
(byte*) current_piece_gfx#25
(byte*) current_piece_gfx#26
(byte*) current_piece_gfx#27
(byte*) current_piece_gfx#28
(byte*) current_piece_gfx#29
(byte*) current_piece_gfx#3
(byte*) current_piece_gfx#30
(byte*) current_piece_gfx#31
(byte*) current_piece_gfx#32
(byte*) current_piece_gfx#33
(byte*) current_piece_gfx#34
(byte*) current_piece_gfx#35
(byte*) current_piece_gfx#36
(byte*) current_piece_gfx#37
(byte*) current_piece_gfx#38
(byte*) current_piece_gfx#39
(byte*) current_piece_gfx#4
(byte*) current_piece_gfx#40
(byte*) current_piece_gfx#41
(byte*) current_piece_gfx#42
(byte*) current_piece_gfx#43
(byte*) current_piece_gfx#44
(byte*) current_piece_gfx#45
(byte*) current_piece_gfx#46
(byte*) current_piece_gfx#47
(byte*) current_piece_gfx#48
(byte*) current_piece_gfx#49
(byte*) current_piece_gfx#5
(byte*) current_piece_gfx#50
(byte*) current_piece_gfx#51
(byte*) current_piece_gfx#52
(byte*) current_piece_gfx#53
(byte*) current_piece_gfx#54
(byte*) current_piece_gfx#55
(byte*) current_piece_gfx#56
(byte*) current_piece_gfx#57
(byte*) current_piece_gfx#58
(byte*) current_piece_gfx#59
(byte*) current_piece_gfx#6
(byte*) current_piece_gfx#60
(byte*) current_piece_gfx#61
(byte*) current_piece_gfx#62
(byte*) current_piece_gfx#63
(byte*) current_piece_gfx#64
(byte*) current_piece_gfx#65
(byte*) current_piece_gfx#66
(byte*) current_piece_gfx#67
(byte*) current_piece_gfx#68
(byte*) current_piece_gfx#69
(byte*) current_piece_gfx#7
(byte*) current_piece_gfx#70
(byte*) current_piece_gfx#71
(byte*) current_piece_gfx#72
(byte*) current_piece_gfx#73
(byte*) current_piece_gfx#74
(byte*) current_piece_gfx#75
(byte*) current_piece_gfx#76
(byte*) current_piece_gfx#77
(byte*) current_piece_gfx#78
(byte*) current_piece_gfx#79
(byte*) current_piece_gfx#8
(byte*) current_piece_gfx#80
(byte*) current_piece_gfx#81
(byte*) current_piece_gfx#82
(byte*) current_piece_gfx#83
(byte*) current_piece_gfx#84
(byte*) current_piece_gfx#85
(byte*) current_piece_gfx#86
(byte*) current_piece_gfx#87
(byte*) current_piece_gfx#88
(byte*) current_piece_gfx#89
(byte*) current_piece_gfx#9
(byte*) current_piece_gfx#90
(byte*) current_piece_gfx#91
(byte*) current_piece_gfx#92
(byte*) current_piece_gfx#93
(byte*) current_piece_gfx#94
(byte*) current_piece_gfx#95
(byte*) current_piece_gfx#96
(byte) current_xpos
(byte) current_xpos#0
(byte) current_xpos#1
(byte) current_xpos#10
(byte) current_xpos#100
(byte) current_xpos#101
(byte) current_xpos#102
(byte) current_xpos#103
(byte) current_xpos#104
(byte) current_xpos#105
(byte) current_xpos#106
(byte) current_xpos#11
(byte) current_xpos#12
(byte) current_xpos#13
(byte) current_xpos#14
(byte) current_xpos#15
(byte) current_xpos#16
(byte) current_xpos#17
(byte) current_xpos#18
(byte) current_xpos#19
(byte) current_xpos#2
(byte) current_xpos#20
(byte) current_xpos#21
(byte) current_xpos#22
(byte) current_xpos#23
(byte) current_xpos#24
(byte) current_xpos#25
(byte) current_xpos#26
(byte) current_xpos#27
(byte) current_xpos#28
(byte) current_xpos#29
(byte) current_xpos#3
(byte) current_xpos#30
(byte) current_xpos#31
(byte) current_xpos#32
(byte) current_xpos#33
(byte) current_xpos#34
(byte) current_xpos#35
(byte) current_xpos#36
(byte) current_xpos#37
(byte) current_xpos#38
(byte) current_xpos#39
(byte) current_xpos#4
(byte) current_xpos#40
(byte) current_xpos#41
(byte) current_xpos#42
(byte) current_xpos#43
(byte) current_xpos#44
(byte) current_xpos#45
(byte) current_xpos#46
(byte) current_xpos#47
(byte) current_xpos#48
(byte) current_xpos#49
(byte) current_xpos#5
(byte) current_xpos#50
(byte) current_xpos#51
(byte) current_xpos#52
(byte) current_xpos#53
(byte) current_xpos#54
(byte) current_xpos#55
(byte) current_xpos#56
(byte) current_xpos#57
(byte) current_xpos#58
(byte) current_xpos#59
(byte) current_xpos#6
(byte) current_xpos#60
(byte) current_xpos#61
(byte) current_xpos#62
(byte) current_xpos#63
(byte) current_xpos#64
(byte) current_xpos#65
(byte) current_xpos#66
(byte) current_xpos#67
(byte) current_xpos#68
(byte) current_xpos#69
(byte) current_xpos#7
(byte) current_xpos#70
(byte) current_xpos#71
(byte) current_xpos#72
(byte) current_xpos#73
(byte) current_xpos#74
(byte) current_xpos#75
(byte) current_xpos#76
(byte) current_xpos#77
(byte) current_xpos#78
(byte) current_xpos#79
(byte) current_xpos#8
(byte) current_xpos#80
(byte) current_xpos#81
(byte) current_xpos#82
(byte) current_xpos#83
(byte) current_xpos#84
(byte) current_xpos#85
(byte) current_xpos#86
(byte) current_xpos#87
(byte) current_xpos#88
(byte) current_xpos#89
(byte) current_xpos#9
(byte) current_xpos#90
(byte) current_xpos#91
(byte) current_xpos#92
(byte) current_xpos#93
(byte) current_xpos#94
(byte) current_xpos#95
(byte) current_xpos#96
(byte) current_xpos#97
(byte) current_xpos#98
(byte) current_xpos#99
(byte) current_ypos
(byte) current_ypos#0
(byte) current_ypos#1
(byte) current_ypos#10
(byte) current_ypos#11
(byte) current_ypos#12
(byte) current_ypos#13
(byte) current_ypos#14
(byte) current_ypos#15
(byte) current_ypos#16
(byte) current_ypos#17
(byte) current_ypos#18
(byte) current_ypos#19
(byte) current_ypos#2
(byte) current_ypos#20
(byte) current_ypos#21
(byte) current_ypos#22
(byte) current_ypos#23
(byte) current_ypos#24
(byte) current_ypos#25
(byte) current_ypos#26
(byte) current_ypos#27
(byte) current_ypos#28
(byte) current_ypos#29
(byte) current_ypos#3
(byte) current_ypos#30
(byte) current_ypos#31
(byte) current_ypos#32
(byte) current_ypos#33
(byte) current_ypos#34
(byte) current_ypos#35
(byte) current_ypos#36
(byte) current_ypos#37
(byte) current_ypos#38
(byte) current_ypos#39
(byte) current_ypos#4
(byte) current_ypos#40
(byte) current_ypos#41
(byte) current_ypos#42
(byte) current_ypos#43
(byte) current_ypos#44
(byte) current_ypos#45
(byte) current_ypos#46
(byte) current_ypos#47
(byte) current_ypos#48
(byte) current_ypos#49
(byte) current_ypos#5
(byte) current_ypos#50
(byte) current_ypos#51
(byte) current_ypos#52
(byte) current_ypos#53
(byte) current_ypos#54
(byte) current_ypos#55
(byte) current_ypos#56
(byte) current_ypos#57
(byte) current_ypos#58
(byte) current_ypos#59
(byte) current_ypos#6
(byte) current_ypos#60
(byte) current_ypos#61
(byte) current_ypos#62
(byte) current_ypos#63
(byte) current_ypos#64
(byte) current_ypos#65
(byte) current_ypos#66
(byte) current_ypos#67
(byte) current_ypos#68
(byte) current_ypos#69
(byte) current_ypos#7
(byte) current_ypos#70
(byte) current_ypos#71
(byte) current_ypos#72
(byte) current_ypos#73
(byte) current_ypos#74
(byte) current_ypos#75
(byte) current_ypos#76
(byte) current_ypos#77
(byte) current_ypos#78
(byte) current_ypos#79
(byte) current_ypos#8
(byte) current_ypos#80
(byte) current_ypos#9
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*~) fill::$0
(bool~) fill::$1
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0
(byte*) fill::addr#1
(byte*) fill::addr#2
(byte*) fill::end
(byte*) fill::end#0
(byte*) fill::end#1
(word) fill::size
(word) fill::size#0
(word) fill::size#1
(byte*) fill::start
(byte*) fill::start#0
(byte*) fill::start#1
(byte) fill::val
(byte) fill::val#0
(byte) fill::val#1
(byte) fill::val#2
(byte) irq_cnt
(byte) irq_cnt#0
(byte) irq_cnt#1
(byte) irq_cnt#10
(byte) irq_cnt#11
(byte) irq_cnt#12
(byte) irq_cnt#13
(byte) irq_cnt#14
(byte) irq_cnt#15
(byte) irq_cnt#16
(byte) irq_cnt#17
(byte) irq_cnt#18
(byte) irq_cnt#19
(byte) irq_cnt#2
(byte) irq_cnt#20
(byte) irq_cnt#3
(byte) irq_cnt#4
(byte) irq_cnt#5
(byte) irq_cnt#6
(byte) irq_cnt#7
(byte) irq_cnt#8
(byte) irq_cnt#9
(byte) irq_raster_next
(byte) irq_raster_next#0
(byte) irq_raster_next#1
(byte) irq_raster_next#10
(byte) irq_raster_next#11
(byte) irq_raster_next#12
(byte) irq_raster_next#13
(byte) irq_raster_next#14
(byte) irq_raster_next#15
(byte) irq_raster_next#16
(byte) irq_raster_next#17
(byte) irq_raster_next#18
(byte) irq_raster_next#19
(byte) irq_raster_next#2
(byte) irq_raster_next#20
(byte) irq_raster_next#21
(byte) irq_raster_next#22
(byte) irq_raster_next#23
(byte) irq_raster_next#3
(byte) irq_raster_next#4
(byte) irq_raster_next#5
(byte) irq_raster_next#6
(byte) irq_raster_next#7
(byte) irq_raster_next#8
(byte) irq_raster_next#9
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0
(byte) irq_sprite_ptr#1
(byte) irq_sprite_ptr#10
(byte) irq_sprite_ptr#11
(byte) irq_sprite_ptr#12
(byte) irq_sprite_ptr#13
(byte) irq_sprite_ptr#14
(byte) irq_sprite_ptr#15
(byte) irq_sprite_ptr#16
(byte) irq_sprite_ptr#17
(byte) irq_sprite_ptr#2
(byte) irq_sprite_ptr#3
(byte) irq_sprite_ptr#4
(byte) irq_sprite_ptr#5
(byte) irq_sprite_ptr#6
(byte) irq_sprite_ptr#7
(byte) irq_sprite_ptr#8
(byte) irq_sprite_ptr#9
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0
(byte) irq_sprite_ypos#1
(byte) irq_sprite_ypos#10
(byte) irq_sprite_ypos#11
(byte) irq_sprite_ypos#12
(byte) irq_sprite_ypos#13
(byte) irq_sprite_ypos#14
(byte) irq_sprite_ypos#15
(byte) irq_sprite_ypos#16
(byte) irq_sprite_ypos#17
(byte) irq_sprite_ypos#18
(byte) irq_sprite_ypos#19
(byte) irq_sprite_ypos#2
(byte) irq_sprite_ypos#20
(byte) irq_sprite_ypos#21
(byte) irq_sprite_ypos#22
(byte) irq_sprite_ypos#23
(byte) irq_sprite_ypos#3
(byte) irq_sprite_ypos#4
(byte) irq_sprite_ypos#5
(byte) irq_sprite_ypos#6
(byte) irq_sprite_ypos#7
(byte) irq_sprite_ypos#8
(byte) irq_sprite_ypos#9
(byte[]) keyboard_char_keycodes
(byte[]) keyboard_char_keycodes#0
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(byte~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::keycode#5
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#11
(byte) keyboard_event_pressed::return#12
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(byte/word/dword~) keyboard_event_scan::$11
(bool~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(byte~) keyboard_event_scan::$14
(bool~) keyboard_event_scan::$15
(bool~) keyboard_event_scan::$16
(byte~) keyboard_event_scan::$17
(byte~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(byte~) keyboard_event_scan::$22
(bool~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(byte~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(bool~) keyboard_event_scan::$27
(bool~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(byte~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(bool~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::col#8
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#15
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#14
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(byte) keyboard_event_scan::row_scan#9
(byte[8]) keyboard_events
(byte[8]) keyboard_events#0
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#11
(byte) keyboard_events_size#12
(byte) keyboard_events_size#13
(byte) keyboard_events_size#14
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#8
(byte) keyboard_events_size#9
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#9
(byte[8]) keyboard_scan_values
(byte[8]) keyboard_scan_values#0
(void()) main()
(byte~) main::$11
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(bool~) main::$15
(bool~) main::$16
(bool~) main::$8
(label) main::@1
(label) main::@13
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@30
(label) main::@31
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::key_event
(byte) main::key_event#0
(byte) main::key_event#1
(byte) main::key_event#2
(byte) main::render
(byte) main::render#0
(byte) main::render#1
(byte) main::render#2
(byte) main::render#3
(byte) main::render#4
(byte) main::render#5
(byte) main::render#6
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte*~) play_collision::$0
(byte~) play_collision::$1
(bool~) play_collision::$10
(bool~) play_collision::$11
(bool~) play_collision::$12
(bool~) play_collision::$13
(bool~) play_collision::$14
(bool~) play_collision::$15
(bool~) play_collision::$2
(bool~) play_collision::$3
(byte/signed word/word/dword/signed dword~) play_collision::$4
(bool~) play_collision::$5
(bool~) play_collision::$6
(byte~) play_collision::$7
(bool~) play_collision::$8
(bool~) play_collision::$9
(label) play_collision::@1
(label) play_collision::@11
(label) play_collision::@13
(label) play_collision::@15
(label) play_collision::@17
(label) play_collision::@18
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@7
(label) play_collision::@8
(label) play_collision::@9
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#0
(byte) play_collision::c#1
(byte) play_collision::c#2
(byte) play_collision::c#3
(byte) play_collision::c#4
(byte) play_collision::c#5
(byte) play_collision::c#6
(byte) play_collision::c#7
(byte) play_collision::c#8
(byte) play_collision::col
(byte) play_collision::col#0
(byte) play_collision::col#1
(byte) play_collision::col#2
(byte) play_collision::col#3
(byte) play_collision::col#4
(byte) play_collision::col#5
(byte) play_collision::col#6
(byte) play_collision::col#7
(byte) play_collision::col#8
(byte) play_collision::i
(byte) play_collision::i#0
(byte) play_collision::i#1
(byte) play_collision::i#10
(byte) play_collision::i#2
(byte) play_collision::i#3
(byte) play_collision::i#4
(byte) play_collision::i#5
(byte) play_collision::i#6
(byte) play_collision::i#7
(byte) play_collision::i#8
(byte) play_collision::i#9
(byte) play_collision::l
(byte) play_collision::l#0
(byte) play_collision::l#1
(byte) play_collision::l#10
(byte) play_collision::l#2
(byte) play_collision::l#3
(byte) play_collision::l#4
(byte) play_collision::l#5
(byte) play_collision::l#6
(byte) play_collision::l#7
(byte) play_collision::l#8
(byte) play_collision::l#9
(byte) play_collision::orientation
(byte) play_collision::orientation#0
(byte) play_collision::orientation#1
(byte) play_collision::orientation#2
(byte) play_collision::orientation#3
(byte) play_collision::orientation#4
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0
(byte*) play_collision::piece_gfx#1
(byte*) play_collision::piece_gfx#2
(byte*) play_collision::piece_gfx#3
(byte*) play_collision::piece_gfx#4
(byte*) play_collision::piece_gfx#5
(byte*) play_collision::piece_gfx#6
(byte*) play_collision::piece_gfx#7
(byte*) play_collision::piece_gfx#8
(byte*) play_collision::piece_gfx#9
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0
(byte*) play_collision::playfield_line#1
(byte*) play_collision::playfield_line#2
(byte*) play_collision::playfield_line#3
(byte*) play_collision::playfield_line#4
(byte*) play_collision::playfield_line#5
(byte*) play_collision::playfield_line#6
(byte*) play_collision::playfield_line#7
(byte) play_collision::return
(byte) play_collision::return#0
(byte) play_collision::return#1
(byte) play_collision::return#10
(byte) play_collision::return#11
(byte) play_collision::return#12
(byte) play_collision::return#13
(byte) play_collision::return#14
(byte) play_collision::return#2
(byte) play_collision::return#3
(byte) play_collision::return#4
(byte) play_collision::return#5
(byte) play_collision::return#6
(byte) play_collision::return#7
(byte) play_collision::return#8
(byte) play_collision::return#9
(byte) play_collision::xpos
(byte) play_collision::xpos#0
(byte) play_collision::xpos#1
(byte) play_collision::xpos#10
(byte) play_collision::xpos#11
(byte) play_collision::xpos#12
(byte) play_collision::xpos#13
(byte) play_collision::xpos#2
(byte) play_collision::xpos#3
(byte) play_collision::xpos#4
(byte) play_collision::xpos#5
(byte) play_collision::xpos#6
(byte) play_collision::xpos#7
(byte) play_collision::xpos#8
(byte) play_collision::xpos#9
(byte) play_collision::ypos
(byte) play_collision::ypos#0
(byte) play_collision::ypos#1
(byte) play_collision::ypos#2
(byte) play_collision::ypos#3
(byte) play_collision::ypos#4
(byte) play_collision::ypos2
(byte) play_collision::ypos2#0
(byte) play_collision::ypos2#1
(byte) play_collision::ypos2#10
(byte) play_collision::ypos2#2
(byte) play_collision::ypos2#3
(byte) play_collision::ypos2#4
(byte) play_collision::ypos2#5
(byte) play_collision::ypos2#6
(byte) play_collision::ypos2#7
(byte) play_collision::ypos2#8
(byte) play_collision::ypos2#9
(void()) play_init()
(byte/signed word/word/dword/signed dword~) play_init::$0
(byte~) play_init::$1
(bool~) play_init::$2
(byte~) play_init::$3
(label) play_init::@1
(label) play_init::@2
(label) play_init::@return
(byte) play_init::idx
(byte) play_init::idx#0
(byte) play_init::idx#1
(byte) play_init::idx#2
(byte) play_init::j
(byte) play_init::j#0
(byte) play_init::j#1
(byte) play_init::j#2
(byte*) play_init::pli
(byte*) play_init::pli#0
(byte*) play_init::pli#1
(byte*) play_init::pli#2
(void()) play_lock_current()
(byte~) play_lock_current::$0
(bool~) play_lock_current::$1
(bool~) play_lock_current::$2
(bool~) play_lock_current::$3
(bool~) play_lock_current::$4
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#0
(byte) play_lock_current::c#1
(byte) play_lock_current::c#2
(byte) play_lock_current::c#3
(byte) play_lock_current::c#4
(byte) play_lock_current::col
(byte) play_lock_current::col#0
(byte) play_lock_current::col#1
(byte) play_lock_current::col#2
(byte) play_lock_current::col#3
(byte) play_lock_current::col#4
(byte) play_lock_current::i
(byte) play_lock_current::i#0
(byte) play_lock_current::i#1
(byte) play_lock_current::i#2
(byte) play_lock_current::i#3
(byte) play_lock_current::i#4
(byte) play_lock_current::i#5
(byte) play_lock_current::i#6
(byte) play_lock_current::l
(byte) play_lock_current::l#0
(byte) play_lock_current::l#1
(byte) play_lock_current::l#2
(byte) play_lock_current::l#3
(byte) play_lock_current::l#4
(byte) play_lock_current::l#5
(byte) play_lock_current::l#6
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0
(byte*) play_lock_current::playfield_line#1
(byte*) play_lock_current::playfield_line#2
(byte*) play_lock_current::playfield_line#3
(byte) play_lock_current::ypos2
(byte) play_lock_current::ypos2#0
(byte) play_lock_current::ypos2#1
(byte) play_lock_current::ypos2#2
(byte) play_lock_current::ypos2#3
(byte) play_lock_current::ypos2#4
(byte) play_lock_current::ypos2#5
(byte) play_lock_current::ypos2#6
(byte()) play_move_down((byte) play_move_down::key_event)
(bool~) play_move_down::$0
(bool~) play_move_down::$1
(bool~) play_move_down::$10
(byte/signed word/word/dword/signed dword~) play_move_down::$11
(byte~) play_move_down::$12
(bool~) play_move_down::$13
(byte~) play_move_down::$2
(bool~) play_move_down::$3
(bool~) play_move_down::$4
(bool~) play_move_down::$5
(bool~) play_move_down::$6
(bool~) play_move_down::$7
(bool~) play_move_down::$8
(bool~) play_move_down::$9
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@19
(label) play_move_down::@2
(label) play_move_down::@20
(label) play_move_down::@21
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0
(byte) play_move_down::key_event#1
(byte) play_move_down::movedown
(byte) play_move_down::movedown#0
(byte) play_move_down::movedown#1
(byte) play_move_down::movedown#10
(byte) play_move_down::movedown#11
(byte) play_move_down::movedown#12
(byte) play_move_down::movedown#2
(byte) play_move_down::movedown#3
(byte) play_move_down::movedown#4
(byte) play_move_down::movedown#5
(byte) play_move_down::movedown#6
(byte) play_move_down::movedown#7
(byte) play_move_down::movedown#8
(byte) play_move_down::movedown#9
(byte) play_move_down::return
(byte) play_move_down::return#0
(byte) play_move_down::return#1
(byte) play_move_down::return#2
(byte) play_move_down::return#3
(byte) play_move_down::return#4
(byte) play_move_down::return#5
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(bool~) play_move_leftright::$0
(bool~) play_move_leftright::$1
(bool~) play_move_leftright::$10
(bool~) play_move_leftright::$2
(byte/signed word/word/dword/signed dword~) play_move_leftright::$3
(byte~) play_move_leftright::$4
(bool~) play_move_leftright::$5
(bool~) play_move_leftright::$6
(byte/signed word/word/dword/signed dword~) play_move_leftright::$7
(byte~) play_move_leftright::$8
(bool~) play_move_leftright::$9
(label) play_move_leftright::@1
(label) play_move_leftright::@11
(label) play_move_leftright::@14
(label) play_move_leftright::@15
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@8
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0
(byte) play_move_leftright::key_event#1
(byte) play_move_leftright::key_event#2
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0
(byte) play_move_leftright::return#1
(byte) play_move_leftright::return#2
(byte) play_move_leftright::return#3
(byte) play_move_leftright::return#4
(byte) play_move_leftright::return#5
(byte) play_move_leftright::return#6
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(bool~) play_move_rotate::$0
(bool~) play_move_rotate::$1
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2
(byte/word/dword~) play_move_rotate::$3
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4
(byte/word/dword~) play_move_rotate::$5
(byte~) play_move_rotate::$6
(bool~) play_move_rotate::$7
(bool~) play_move_rotate::$8
(byte*~) play_move_rotate::$9
(label) play_move_rotate::@1
(label) play_move_rotate::@11
(label) play_move_rotate::@14
(label) play_move_rotate::@2
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@7
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0
(byte) play_move_rotate::key_event#1
(byte) play_move_rotate::key_event#2
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#0
(byte) play_move_rotate::orientation#1
(byte) play_move_rotate::orientation#2
(byte) play_move_rotate::orientation#3
(byte) play_move_rotate::orientation#4
(byte) play_move_rotate::orientation#5
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0
(byte) play_move_rotate::return#1
(byte) play_move_rotate::return#2
(byte) play_move_rotate::return#3
(byte) play_move_rotate::return#4
(byte) play_move_rotate::return#5
(byte) play_move_rotate::return#6
(void()) play_remove_lines()
(byte~) play_remove_lines::$0
(byte/signed word/word/dword/signed dword~) play_remove_lines::$1
(bool~) play_remove_lines::$10
(byte~) play_remove_lines::$11
(bool~) play_remove_lines::$12
(bool~) play_remove_lines::$13
(byte~) play_remove_lines::$2
(byte/signed word/word/dword/signed dword~) play_remove_lines::$3
(byte/signed word/word/dword/signed dword~) play_remove_lines::$4
(byte/signed word/word/dword/signed dword~) play_remove_lines::$5
(bool~) play_remove_lines::$6
(bool~) play_remove_lines::$7
(bool~) play_remove_lines::$8
(bool~) play_remove_lines::$9
(label) play_remove_lines::@1
(label) play_remove_lines::@10
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@8
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0
(byte) play_remove_lines::c#1
(byte) play_remove_lines::c#2
(byte) play_remove_lines::full
(byte) play_remove_lines::full#0
(byte) play_remove_lines::full#1
(byte) play_remove_lines::full#2
(byte) play_remove_lines::full#3
(byte) play_remove_lines::full#4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#0
(byte) play_remove_lines::r#1
(byte) play_remove_lines::r#2
(byte) play_remove_lines::r#3
(byte) play_remove_lines::r#4
(byte) play_remove_lines::r#5
(byte) play_remove_lines::r#6
(byte) play_remove_lines::r#7
(byte) play_remove_lines::r#8
(byte) play_remove_lines::w
(byte) play_remove_lines::w#0
(byte) play_remove_lines::w#1
(byte) play_remove_lines::w#10
(byte) play_remove_lines::w#11
(byte) play_remove_lines::w#12
(byte) play_remove_lines::w#2
(byte) play_remove_lines::w#3
(byte) play_remove_lines::w#4
(byte) play_remove_lines::w#5
(byte) play_remove_lines::w#6
(byte) play_remove_lines::w#7
(byte) play_remove_lines::w#8
(byte) play_remove_lines::w#9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#0
(byte) play_remove_lines::x#1
(byte) play_remove_lines::x#2
(byte) play_remove_lines::x#3
(byte) play_remove_lines::x#4
(byte) play_remove_lines::y
(byte) play_remove_lines::y#0
(byte) play_remove_lines::y#1
(byte) play_remove_lines::y#2
(byte) play_remove_lines::y#3
(byte) play_remove_lines::y#4
(byte) play_remove_lines::y#5
(byte) play_remove_lines::y#6
(byte) play_remove_lines::y#7
(byte) play_remove_lines::y#8
(void()) play_spawn_current()
(bool~) play_spawn_current::$0
(byte~) play_spawn_current::$1
(byte~) play_spawn_current::$2
(byte~) play_spawn_current::$3
(byte*~) play_spawn_current::$4
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@7
(label) play_spawn_current::@return
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#0
(byte) play_spawn_current::piece_idx#1
(byte) play_spawn_current::piece_idx#2
(byte) play_spawn_current::piece_idx#3
(byte[$3]) playfield
(byte[$3]) playfield#0
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte*[PLAYFIELD_LINES#0]) playfield_lines#0
(byte[$26]) playfield_lines_idx
(byte[$26]) playfield_lines_idx#0
(void()) render_current()
(byte~) render_current::$0
(bool~) render_current::$1
(bool~) render_current::$10
(bool~) render_current::$11
(byte/signed word/word/dword/signed dword~) render_current::$2
(bool~) render_current::$3
(bool~) render_current::$4
(byte~) render_current::$5
(bool~) render_current::$6
(bool~) render_current::$7
(bool~) render_current::$8
(bool~) render_current::$9
(label) render_current::@1
(label) render_current::@10
(label) render_current::@2
(label) render_current::@3
(label) render_current::@4
(label) render_current::@5
(label) render_current::@6
(label) render_current::@7
(label) render_current::@9
(label) render_current::@return
(byte) render_current::c
(byte) render_current::c#0
(byte) render_current::c#1
(byte) render_current::c#2
(byte) render_current::c#3
(byte) render_current::c#4
(byte) render_current::c#5
(byte) render_current::c#6
(byte) render_current::current_cell
(byte) render_current::current_cell#0
(byte) render_current::i
(byte) render_current::i#0
(byte) render_current::i#1
(byte) render_current::i#10
(byte) render_current::i#11
(byte) render_current::i#2
(byte) render_current::i#3
(byte) render_current::i#4
(byte) render_current::i#5
(byte) render_current::i#6
(byte) render_current::i#7
(byte) render_current::i#8
(byte) render_current::i#9
(byte) render_current::l
(byte) render_current::l#0
(byte) render_current::l#1
(byte) render_current::l#10
(byte) render_current::l#2
(byte) render_current::l#3
(byte) render_current::l#4
(byte) render_current::l#5
(byte) render_current::l#6
(byte) render_current::l#7
(byte) render_current::l#8
(byte) render_current::l#9
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0
(byte*) render_current::screen_line#1
(byte*) render_current::screen_line#2
(byte*) render_current::screen_line#3
(byte*) render_current::screen_line#4
(byte*) render_current::screen_line#5
(byte) render_current::xpos
(byte) render_current::xpos#0
(byte) render_current::xpos#1
(byte) render_current::xpos#2
(byte) render_current::xpos#3
(byte) render_current::xpos#4
(byte) render_current::xpos#5
(byte) render_current::xpos#6
(byte) render_current::ypos2
(byte) render_current::ypos2#0
(byte) render_current::ypos2#1
(byte) render_current::ypos2#10
(byte) render_current::ypos2#2
(byte) render_current::ypos2#3
(byte) render_current::ypos2#4
(byte) render_current::ypos2#5
(byte) render_current::ypos2#6
(byte) render_current::ypos2#7
(byte) render_current::ypos2#8
(byte) render_current::ypos2#9
(void()) render_init()
(byte~) render_init::$1
(byte/signed word/word/dword/signed dword~) render_init::$10
(byte/signed word/word/dword/signed dword~) render_init::$11
(byte*~) render_init::$12
(bool~) render_init::$13
(bool~) render_init::$14
(byte/signed byte/word/signed word/dword/signed dword~) render_init::$15
(byte*~) render_init::$16
(byte*~) render_init::$17
(byte/signed byte/word/signed word/dword/signed dword~) render_init::$18
(byte*~) render_init::$19
(byte~) render_init::$2
(byte*~) render_init::$20
(byte/signed word/word/dword/signed dword~) render_init::$21
(byte~) render_init::$22
(byte~) render_init::$23
(bool~) render_init::$24
(byte/word/dword~) render_init::$3
(byte/word/signed word/dword/signed dword~) render_init::$7
(byte*~) render_init::$8
(byte*~) render_init::$9
(label) render_init::@1
(label) render_init::@10
(label) render_init::@2
(label) render_init::@3
(label) render_init::@4
(label) render_init::@5
(label) render_init::@6
(label) render_init::@7
(label) render_init::@8
(label) render_init::@9
(label) render_init::@return
(byte) render_init::c
(byte) render_init::c#0
(byte) render_init::c#1
(byte) render_init::c#2
(byte) render_init::i
(byte) render_init::i#0
(byte) render_init::i#1
(byte) render_init::i#2
(byte) render_init::l
(byte) render_init::l#0
(byte) render_init::l#1
(byte) render_init::l#2
(byte) render_init::l#3
(byte) render_init::l#4
(byte*) render_init::li_1
(byte*) render_init::li_1#0
(byte*) render_init::li_1#1
(byte*) render_init::li_1#2
(byte*) render_init::li_2
(byte*) render_init::li_2#0
(byte*) render_init::li_2#1
(byte*) render_init::li_2#2
(byte*) render_init::line
(byte*) render_init::line#0
(byte*) render_init::line#1
(byte*) render_init::line#2
(byte*) render_init::line#3
(byte*) render_init::line#4
(label) render_init::vicSelectGfxBank1
(byte~) render_init::vicSelectGfxBank1_$0
(byte) render_init::vicSelectGfxBank1_$0#0
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(byte*) render_init::vicSelectGfxBank1_gfx#0
(byte*) render_init::vicSelectGfxBank1_gfx#1
(label) render_init::vicSelectGfxBank1_toDd001
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(word) render_init::vicSelectGfxBank1_toDd001_$0#0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(byte) render_init::vicSelectGfxBank1_toDd001_$1#0
(byte~) render_init::vicSelectGfxBank1_toDd001_$2
(byte) render_init::vicSelectGfxBank1_toDd001_$2#0
(byte/word/dword~) render_init::vicSelectGfxBank1_toDd001_$3
(byte/word/dword) render_init::vicSelectGfxBank1_toDd001_$3#0
(label) render_init::vicSelectGfxBank1_toDd001_@return
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
(byte) render_init::vicSelectGfxBank1_toDd001_return
(byte) render_init::vicSelectGfxBank1_toDd001_return#0
(byte) render_init::vicSelectGfxBank1_toDd001_return#1
(byte) render_init::vicSelectGfxBank1_toDd001_return#2
(byte) render_init::vicSelectGfxBank1_toDd001_return#3
(void()) render_playfield()
(byte/signed word/word/dword/signed dword~) render_playfield::$0
(byte/signed word/word/dword/signed dword~) render_playfield::$1
(byte~) render_playfield::$2
(byte~) render_playfield::$3
(byte/signed word/word/dword/signed dword~) render_playfield::$4
(bool~) render_playfield::$5
(bool~) render_playfield::$6
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#0
(byte) render_playfield::c#1
(byte) render_playfield::c#2
(byte) render_playfield::i
(byte) render_playfield::i#0
(byte) render_playfield::i#1
(byte) render_playfield::i#2
(byte) render_playfield::i#3
(byte) render_playfield::i#4
(byte) render_playfield::l
(byte) render_playfield::l#0
(byte) render_playfield::l#1
(byte) render_playfield::l#2
(byte) render_playfield::l#3
(byte) render_playfield::l#4
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0
(byte*) render_playfield::screen_line#1
(byte*) render_playfield::screen_line#2
(void()) render_screen_original((byte*) render_screen_original::screen)
(byte/signed byte/word/signed word/dword/signed dword~) render_screen_original::$0
(byte*~) render_screen_original::$1
(bool~) render_screen_original::$10
(bool~) render_screen_original::$2
(byte/signed word/word/dword/signed dword~) render_screen_original::$3
(bool~) render_screen_original::$4
(bool~) render_screen_original::$5
(bool~) render_screen_original::$6
(bool~) render_screen_original::$7
(bool~) render_screen_original::$8
(bool~) render_screen_original::$9
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@7
(label) render_screen_original::@9
(label) render_screen_original::@return
(byte) render_screen_original::SPACE
(byte) render_screen_original::SPACE#0
(byte) render_screen_original::SPACE#1
(byte) render_screen_original::SPACE#2
(byte) render_screen_original::SPACE#3
(byte) render_screen_original::SPACE#4
(byte) render_screen_original::SPACE#5
(byte) render_screen_original::SPACE#6
(byte) render_screen_original::SPACE#7
(byte) render_screen_original::c
(byte) render_screen_original::c#0
(byte) render_screen_original::c#1
(byte) render_screen_original::c#2
(byte) render_screen_original::c#3
(byte*) render_screen_original::orig
(byte*) render_screen_original::orig#0
(byte*) render_screen_original::orig#1
(byte*) render_screen_original::orig#2
(byte*) render_screen_original::orig#3
(byte*) render_screen_original::orig#4
(byte*) render_screen_original::orig#5
(byte*) render_screen_original::orig#6
(byte*) render_screen_original::orig#7
(byte*) render_screen_original::orig#8
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#0
(byte*) render_screen_original::screen#1
(byte*) render_screen_original::screen#10
(byte*) render_screen_original::screen#11
(byte*) render_screen_original::screen#12
(byte*) render_screen_original::screen#2
(byte*) render_screen_original::screen#3
(byte*) render_screen_original::screen#4
(byte*) render_screen_original::screen#5
(byte*) render_screen_original::screen#6
(byte*) render_screen_original::screen#7
(byte*) render_screen_original::screen#8
(byte*) render_screen_original::screen#9
(byte) render_screen_original::x
(byte) render_screen_original::x#0
(byte) render_screen_original::x#1
(byte) render_screen_original::x#2
(byte) render_screen_original::x#3
(byte) render_screen_original::x#4
(byte) render_screen_original::x#5
(byte) render_screen_original::x#6
(byte) render_screen_original::x#7
(byte) render_screen_original::x#8
(byte) render_screen_original::y
(byte) render_screen_original::y#0
(byte) render_screen_original::y#1
(byte) render_screen_original::y#2
(byte) render_screen_original::y#3
(byte) render_screen_original::y#4
(byte) render_screen_original::y#5
(byte) render_screen_original::y#6
(byte) render_screen_original::y#7
(byte) render_screen_original::y#8
(byte) render_screen_render
(byte) render_screen_render#0
(byte) render_screen_render#1
(byte) render_screen_render#10
(byte) render_screen_render#11
(byte) render_screen_render#12
(byte) render_screen_render#13
(byte) render_screen_render#14
(byte) render_screen_render#15
(byte) render_screen_render#16
(byte) render_screen_render#17
(byte) render_screen_render#18
(byte) render_screen_render#19
(byte) render_screen_render#2
(byte) render_screen_render#20
(byte) render_screen_render#21
(byte) render_screen_render#22
(byte) render_screen_render#23
(byte) render_screen_render#24
(byte) render_screen_render#25
(byte) render_screen_render#26
(byte) render_screen_render#27
(byte) render_screen_render#28
(byte) render_screen_render#29
(byte) render_screen_render#3
(byte) render_screen_render#30
(byte) render_screen_render#31
(byte) render_screen_render#32
(byte) render_screen_render#33
(byte) render_screen_render#34
(byte) render_screen_render#35
(byte) render_screen_render#36
(byte) render_screen_render#37
(byte) render_screen_render#38
(byte) render_screen_render#39
(byte) render_screen_render#4
(byte) render_screen_render#40
(byte) render_screen_render#41
(byte) render_screen_render#42
(byte) render_screen_render#43
(byte) render_screen_render#44
(byte) render_screen_render#45
(byte) render_screen_render#46
(byte) render_screen_render#47
(byte) render_screen_render#48
(byte) render_screen_render#49
(byte) render_screen_render#5
(byte) render_screen_render#50
(byte) render_screen_render#51
(byte) render_screen_render#52
(byte) render_screen_render#53
(byte) render_screen_render#54
(byte) render_screen_render#55
(byte) render_screen_render#56
(byte) render_screen_render#57
(byte) render_screen_render#58
(byte) render_screen_render#59
(byte) render_screen_render#6
(byte) render_screen_render#60
(byte) render_screen_render#7
(byte) render_screen_render#8
(byte) render_screen_render#9
(byte) render_screen_show
(byte) render_screen_show#0
(byte) render_screen_show#1
(byte) render_screen_show#10
(byte) render_screen_show#11
(byte) render_screen_show#12
(byte) render_screen_show#13
(byte) render_screen_show#14
(byte) render_screen_show#15
(byte) render_screen_show#16
(byte) render_screen_show#17
(byte) render_screen_show#18
(byte) render_screen_show#19
(byte) render_screen_show#2
(byte) render_screen_show#20
(byte) render_screen_show#21
(byte) render_screen_show#22
(byte) render_screen_show#23
(byte) render_screen_show#24
(byte) render_screen_show#25
(byte) render_screen_show#26
(byte) render_screen_show#27
(byte) render_screen_show#28
(byte) render_screen_show#29
(byte) render_screen_show#3
(byte) render_screen_show#30
(byte) render_screen_show#31
(byte) render_screen_show#32
(byte) render_screen_show#33
(byte) render_screen_show#34
(byte) render_screen_show#35
(byte) render_screen_show#36
(byte) render_screen_show#37
(byte) render_screen_show#38
(byte) render_screen_show#39
(byte) render_screen_show#4
(byte) render_screen_show#40
(byte) render_screen_show#41
(byte) render_screen_show#42
(byte) render_screen_show#43
(byte) render_screen_show#44
(byte) render_screen_show#45
(byte) render_screen_show#46
(byte) render_screen_show#47
(byte) render_screen_show#48
(byte) render_screen_show#49
(byte) render_screen_show#5
(byte) render_screen_show#50
(byte) render_screen_show#51
(byte) render_screen_show#52
(byte) render_screen_show#53
(byte) render_screen_show#54
(byte) render_screen_show#55
(byte) render_screen_show#56
(byte) render_screen_show#6
(byte) render_screen_show#7
(byte) render_screen_show#8
(byte) render_screen_show#9
(byte) render_screen_showing
(byte) render_screen_showing#0
(byte) render_screen_showing#1
(byte) render_screen_showing#10
(byte) render_screen_showing#11
(byte) render_screen_showing#12
(byte) render_screen_showing#13
(byte) render_screen_showing#14
(byte) render_screen_showing#15
(byte) render_screen_showing#16
(byte) render_screen_showing#17
(byte) render_screen_showing#18
(byte) render_screen_showing#19
(byte) render_screen_showing#2
(byte) render_screen_showing#20
(byte) render_screen_showing#21
(byte) render_screen_showing#22
(byte) render_screen_showing#23
(byte) render_screen_showing#24
(byte) render_screen_showing#25
(byte) render_screen_showing#26
(byte) render_screen_showing#27
(byte) render_screen_showing#28
(byte) render_screen_showing#29
(byte) render_screen_showing#3
(byte) render_screen_showing#30
(byte) render_screen_showing#31
(byte) render_screen_showing#32
(byte) render_screen_showing#33
(byte) render_screen_showing#34
(byte) render_screen_showing#35
(byte) render_screen_showing#36
(byte) render_screen_showing#37
(byte) render_screen_showing#38
(byte) render_screen_showing#39
(byte) render_screen_showing#4
(byte) render_screen_showing#40
(byte) render_screen_showing#41
(byte) render_screen_showing#42
(byte) render_screen_showing#43
(byte) render_screen_showing#44
(byte) render_screen_showing#5
(byte) render_screen_showing#6
(byte) render_screen_showing#7
(byte) render_screen_showing#8
(byte) render_screen_showing#9
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(bool~) render_show::$0
(byte~) render_show::$1
(byte~) render_show::$2
(label) render_show::@1
(label) render_show::@2
(label) render_show::@3
(label) render_show::@5
(label) render_show::@6
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#0
(byte) render_show::d018val#1
(byte) render_show::d018val#2
(byte) render_show::d018val#3
(label) render_show::toD0181
(word~) render_show::toD0181_$0
(word) render_show::toD0181_$0#0
(word~) render_show::toD0181_$1
(word) render_show::toD0181_$1#0
(word~) render_show::toD0181_$2
(word) render_show::toD0181_$2#0
(byte~) render_show::toD0181_$3
(byte) render_show::toD0181_$3#0
(word~) render_show::toD0181_$4
(word) render_show::toD0181_$4#0
(byte~) render_show::toD0181_$5
(byte) render_show::toD0181_$5#0
(byte~) render_show::toD0181_$6
(byte) render_show::toD0181_$6#0
(byte~) render_show::toD0181_$7
(byte) render_show::toD0181_$7#0
(byte~) render_show::toD0181_$8
(byte) render_show::toD0181_$8#0
(label) render_show::toD0181_@return
(byte*) render_show::toD0181_gfx
(byte*) render_show::toD0181_gfx#0
(byte*) render_show::toD0181_gfx#1
(byte) render_show::toD0181_return
(byte) render_show::toD0181_return#0
(byte) render_show::toD0181_return#1
(byte) render_show::toD0181_return#2
(byte) render_show::toD0181_return#3
(byte*) render_show::toD0181_screen
(byte*) render_show::toD0181_screen#0
(byte*) render_show::toD0181_screen#1
(label) render_show::toD0182
(word~) render_show::toD0182_$0
(word) render_show::toD0182_$0#0
(word~) render_show::toD0182_$1
(word) render_show::toD0182_$1#0
(word~) render_show::toD0182_$2
(word) render_show::toD0182_$2#0
(byte~) render_show::toD0182_$3
(byte) render_show::toD0182_$3#0
(word~) render_show::toD0182_$4
(word) render_show::toD0182_$4#0
(byte~) render_show::toD0182_$5
(byte) render_show::toD0182_$5#0
(byte~) render_show::toD0182_$6
(byte) render_show::toD0182_$6#0
(byte~) render_show::toD0182_$7
(byte) render_show::toD0182_$7#0
(byte~) render_show::toD0182_$8
(byte) render_show::toD0182_$8#0
(label) render_show::toD0182_@return
(byte*) render_show::toD0182_gfx
(byte*) render_show::toD0182_gfx#0
(byte*) render_show::toD0182_gfx#1
(byte) render_show::toD0182_return
(byte) render_show::toD0182_return#0
(byte) render_show::toD0182_return#1
(byte) render_show::toD0182_return#2
(byte) render_show::toD0182_return#3
(byte*) render_show::toD0182_screen
(byte*) render_show::toD0182_screen#0
(byte*) render_show::toD0182_screen#1
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(byte*[PLAYFIELD_LINES#0]) screen_lines_1#0
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(byte*[PLAYFIELD_LINES#0]) screen_lines_2#0
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0
(byte) sid_rnd::return#1
(byte) sid_rnd::return#2
(byte) sid_rnd::return#3
(byte) sid_rnd::return#4
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) sprites_init()
(byte/signed byte/word/signed word/dword/signed dword~) sprites_init::$0
(byte/signed word/word/dword/signed dword/signed byte~) sprites_init::$1
(byte~) sprites_init::$2
(byte/signed word/word/dword/signed dword~) sprites_init::$3
(bool~) sprites_init::$4
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#0
(byte) sprites_init::s#1
(byte) sprites_init::s#2
(byte) sprites_init::s2
(byte) sprites_init::s2#0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#0
(byte) sprites_init::xpos#1
(byte) sprites_init::xpos#2
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(bool~) sprites_irq::$0
(bool~) sprites_irq::$1
(bool~) sprites_irq::$2
(byte~) sprites_irq::$3
(byte~) sprites_irq::$4
(bool~) sprites_irq::$5
(bool~) sprites_irq::$6
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@12
(label) sprites_irq::@13
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0
(byte) sprites_irq::ptr#1
(byte) sprites_irq::ptr#2
(byte) sprites_irq::ptr#3
(byte) sprites_irq::ptr#4
(byte) sprites_irq::ptr#5
(byte) sprites_irq::ptr#6
(byte) sprites_irq::raster_next
(byte) sprites_irq::raster_next#0
(byte) sprites_irq::raster_next#1
(byte) sprites_irq::raster_next#2
(byte) sprites_irq::raster_next#3
(label) sprites_irq::toSpritePtr2
(word~) sprites_irq::toSpritePtr2_$0
(word) sprites_irq::toSpritePtr2_$0#0
(word~) sprites_irq::toSpritePtr2_$1
(word) sprites_irq::toSpritePtr2_$1#0
(byte~) sprites_irq::toSpritePtr2_$2
(byte) sprites_irq::toSpritePtr2_$2#0
(label) sprites_irq::toSpritePtr2_@return
(byte) sprites_irq::toSpritePtr2_return
(byte) sprites_irq::toSpritePtr2_return#0
(byte) sprites_irq::toSpritePtr2_return#1
(byte) sprites_irq::toSpritePtr2_return#2
(byte) sprites_irq::toSpritePtr2_return#3
(byte*) sprites_irq::toSpritePtr2_sprite
(byte*) sprites_irq::toSpritePtr2_sprite#0
(byte*) sprites_irq::toSpritePtr2_sprite#1
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0
(void()) sprites_irq_init()
(void()*~) sprites_irq_init::$0
(label) sprites_irq_init::@return
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(word) toSpritePtr1_$0#0
(word~) toSpritePtr1_$1
(word) toSpritePtr1_$1#0
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_$2#0
(label) toSpritePtr1_@return
(byte) toSpritePtr1_return
(byte) toSpritePtr1_return#0
(byte) toSpritePtr1_return#1
(byte) toSpritePtr1_return#2
(byte) toSpritePtr1_return#3
(byte*) toSpritePtr1_sprite
(byte*) toSpritePtr1_sprite#0
(byte*) toSpritePtr1_sprite#1

Inversing boolean not (bool~) keyboard_event_scan::$6 ← (byte~) keyboard_event_scan::$4 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$4 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$8 ← (byte) keyboard_events_size#10 == (byte/signed byte/word/signed word/dword/signed dword) 8 from (bool~) keyboard_event_scan::$7 ← (byte) keyboard_events_size#10 != (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not (bool~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$14 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$15 ← (byte~) keyboard_event_scan::$14 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$20 ← (byte~) keyboard_event_scan::$18 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$19 ← (byte~) keyboard_event_scan::$18 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$24 ← (byte~) keyboard_event_scan::$22 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$23 ← (byte~) keyboard_event_scan::$22 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) keyboard_event_scan::$28 ← (byte~) keyboard_event_scan::$26 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) keyboard_event_scan::$27 ← (byte~) keyboard_event_scan::$26 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) render_current::$7 ← (byte) render_current::current_cell#0 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) render_current::$6 ← (byte) render_current::current_cell#0 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) render_current::$9 ← (byte) render_current::xpos#3 >= (byte) PLAYFIELD_COLS#0 from (bool~) render_current::$8 ← (byte) render_current::xpos#3 < (byte) PLAYFIELD_COLS#0
Inversing boolean not (bool~) sprites_irq::$6 ← (byte~) sprites_irq::$4 != (byte/signed byte/word/signed word/dword/signed dword) 3 from (bool~) sprites_irq::$5 ← (byte~) sprites_irq::$4 == (byte/signed byte/word/signed word/dword/signed dword) 3
Inversing boolean not (bool~) play_move_down::$1 ← (byte) play_move_down::key_event#1 != (byte) KEY_SPACE#0 from (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
Inversing boolean not (bool~) play_move_down::$4 ← (byte~) play_move_down::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_move_down::$8 ← (byte) current_movedown_counter#8 < (byte) current_movedown_slow#0 from (bool~) play_move_down::$7 ← (byte) current_movedown_counter#8 >= (byte) current_movedown_slow#0
Inversing boolean not (bool~) play_move_down::$6 ← (byte) current_movedown_counter#9 < (byte) current_movedown_fast#0 from (bool~) play_move_down::$5 ← (byte) current_movedown_counter#9 >= (byte) current_movedown_fast#0
Inversing boolean not (bool~) play_move_down::$10 ← (byte) play_move_down::movedown#6 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_move_down::$9 ← (byte) play_move_down::movedown#6 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_move_leftright::$10 ← (byte~) play_move_leftright::$8 != (byte) COLLISION_NONE#0 from (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) play_move_leftright::$2 ← (byte) play_move_leftright::key_event#2 != (byte) KEY_DOT#0 from (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
Inversing boolean not (bool~) play_move_leftright::$6 ← (byte~) play_move_leftright::$4 != (byte) COLLISION_NONE#0 from (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) play_move_rotate::$8 ← (byte~) play_move_rotate::$6 != (byte) COLLISION_NONE#0 from (bool~) play_move_rotate::$7 ← (byte~) play_move_rotate::$6 == (byte) COLLISION_NONE#0
Inversing boolean not (bool~) play_collision::$3 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_collision::$2 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_collision::$6 ← (byte) play_collision::ypos2#3 < (byte/signed word/word/dword/signed dword~) play_collision::$4 from (bool~) play_collision::$5 ← (byte) play_collision::ypos2#3 >= (byte/signed word/word/dword/signed dword~) play_collision::$4
Inversing boolean not (bool~) play_collision::$9 ← (byte~) play_collision::$7 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_collision::$8 ← (byte~) play_collision::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_collision::$11 ← (byte) play_collision::col#4 < (byte) PLAYFIELD_COLS#0 from (bool~) play_collision::$10 ← (byte) play_collision::col#4 >= (byte) PLAYFIELD_COLS#0
Inversing boolean not (bool~) play_collision::$13 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::col#5) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_collision::$12 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::col#5) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_lock_current::$2 ← *((byte*) current_piece_gfx#15 + (byte) play_lock_current::i#2) == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_lock_current::$1 ← *((byte*) current_piece_gfx#15 + (byte) play_lock_current::i#2) != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_remove_lines::$7 ← (byte) play_remove_lines::c#0 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::c#0 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (bool~) play_remove_lines::$10 ← (byte) play_remove_lines::full#2 != (byte/signed byte/word/signed word/dword/signed dword) 1 from (bool~) play_remove_lines::$9 ← (byte) play_remove_lines::full#2 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not (bool~) main::$16 ← (byte) main::render#3 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) main::$15 ← (byte) main::render#3 != (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte) irq_raster_next#0 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#21 (byte) irq_raster_next#20 (byte) irq_raster_next#19 (byte) irq_raster_next#18 
Alias candidate removed (volatile)(byte) toSpritePtr1_return#0 = (byte) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $4 (byte) irq_sprite_ptr#0 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#16 (byte) irq_sprite_ptr#15 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$3 (byte) irq_sprite_ptr#1 
Alias (byte*) fill::end#0 = (byte*~) fill::$0 
Alias (byte*) fill::addr#0 = (byte*) fill::start#1 
Alias (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#95 (byte*) current_piece_gfx#96 (byte*) current_piece_gfx#94 (byte*) current_piece_gfx#93 (byte*) current_piece_gfx#92 (byte*) current_piece_gfx#91 (byte*) current_piece_gfx#90 (byte*) current_piece_gfx#84 (byte*) current_piece_gfx#78 (byte*) current_piece_gfx#69 (byte*) current_piece_gfx#62 (byte*) current_piece_gfx#52 
Alias (byte) current_xpos#100 = (byte) current_xpos#105 (byte) current_xpos#106 (byte) current_xpos#104 (byte) current_xpos#103 (byte) current_xpos#102 (byte) current_xpos#101 (byte) current_xpos#96 (byte) current_xpos#91 (byte) current_xpos#84 (byte) current_xpos#74 (byte) current_xpos#65 (byte) current_xpos#46 
Alias (byte) current_ypos#38 = (byte) current_ypos#79 (byte) current_ypos#80 (byte) current_ypos#78 (byte) current_ypos#77 (byte) current_ypos#76 (byte) current_ypos#75 (byte) current_ypos#74 (byte) current_ypos#70 (byte) current_ypos#65 (byte) current_ypos#60 (byte) current_ypos#55 (byte) current_ypos#50 
Alias (byte) current_piece_char#25 = (byte) current_piece_char#83 (byte) current_piece_char#84 (byte) current_piece_char#82 (byte) current_piece_char#81 (byte) current_piece_char#80 (byte) current_piece_char#79 (byte) current_piece_char#78 (byte) current_piece_char#72 (byte) current_piece_char#65 (byte) current_piece_char#54 (byte) current_piece_char#44 (byte) current_piece_char#37 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) KEY_MODIFIER_SHIFT#0 = (byte~) $0 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#3 (byte) keyboard_event_scan::row#8 (byte) keyboard_event_scan::row#7 
Alias (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#7 (byte) keyboard_event_scan::keycode#12 (byte) keyboard_event_scan::keycode#3 
Alias (byte) keyboard_events_size#29 = (byte) keyboard_events_size#37 (byte) keyboard_events_size#45 (byte) keyboard_events_size#61 
Alias (byte) keyboard_event_scan::row_scan#0 = (byte~) keyboard_event_scan::$0 (byte) keyboard_event_scan::row_scan#4 
Alias (byte) keyboard_event_scan::keycode#1 = (byte/signed word/word/dword/signed dword~) keyboard_event_scan::$2 
Alias (byte) keyboard_events_size#10 = (byte) keyboard_events_size#21 (byte) keyboard_events_size#38 (byte) keyboard_events_size#22 (byte) keyboard_events_size#11 (byte) keyboard_events_size#12 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#6 (byte) keyboard_event_scan::row_scan#8 (byte) keyboard_event_scan::row_scan#2 (byte) keyboard_event_scan::row_scan#9 (byte) keyboard_event_scan::row_scan#7 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#8 (byte) keyboard_event_scan::col#6 (byte) keyboard_event_scan::col#4 (byte) keyboard_event_scan::col#7 (byte) keyboard_event_scan::col#5 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#13 (byte) keyboard_event_scan::keycode#8 (byte) keyboard_event_scan::keycode#9 (byte) keyboard_event_scan::keycode#5 (byte) keyboard_event_scan::keycode#6 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#13 (byte) keyboard_event_scan::row#5 (byte) keyboard_event_scan::row#11 (byte) keyboard_event_scan::row#14 (byte) keyboard_event_scan::row#12 
Alias (byte) keyboard_event_scan::event_type#0 = (byte~) keyboard_event_scan::$9 
Alias (byte) keyboard_event_scan::row_scan#3 = (byte) keyboard_event_scan::row_scan#5 
Alias (byte) keyboard_event_scan::row#6 = (byte) keyboard_event_scan::row#9 
Alias (byte) keyboard_event_scan::keycode#15 = (byte) keyboard_event_scan::keycode#2 
Alias (byte) keyboard_events_size#30 = (byte) keyboard_events_size#62 
Alias (byte) keyboard_events_size#55 = (byte) keyboard_events_size#74 (byte) keyboard_events_size#71 (byte) keyboard_events_size#70 
Alias (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#7 
Alias (byte) keyboard_modifiers#1 = (byte) keyboard_modifiers#18 (byte) keyboard_modifiers#10 
Alias (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#8 
Alias (byte) keyboard_modifiers#11 = (byte) keyboard_modifiers#19 (byte) keyboard_modifiers#26 
Alias (byte) keyboard_events_size#63 = (byte) keyboard_events_size#64 (byte) keyboard_events_size#67 
Alias (byte) keyboard_modifiers#2 = (byte~) keyboard_event_scan::$17 
Alias (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#9 
Alias (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#20 (byte) keyboard_modifiers#27 
Alias (byte) keyboard_events_size#46 = (byte) keyboard_events_size#47 (byte) keyboard_events_size#56 
Alias (byte) keyboard_modifiers#3 = (byte~) keyboard_event_scan::$21 
Alias (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#3 
Alias (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#21 (byte) keyboard_modifiers#28 (byte) keyboard_modifiers#22 
Alias (byte) keyboard_events_size#23 = (byte) keyboard_events_size#31 (byte) keyboard_events_size#39 (byte) keyboard_events_size#24 
Alias (byte) keyboard_modifiers#4 = (byte~) keyboard_event_scan::$25 
Alias (byte) keyboard_modifiers#5 = (byte~) keyboard_event_scan::$29 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#3 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#6 
Alias (byte) keyboard_event_pressed::return#11 = (byte) keyboard_event_pressed::return#4 (byte~) keyboard_event_pressed::$2 (byte) keyboard_event_pressed::return#5 
Alias (byte) keyboard_events_size#14 = (byte) keyboard_events_size#25 (byte) keyboard_events_size#15 
Alias (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#4 
Alias (byte) keyboard_events_size#16 = (byte) keyboard_events_size#5 
Alias (byte) keyboard_events_size#0 = (byte) keyboard_events_size#77 (byte) keyboard_events_size#75 (byte) keyboard_events_size#72 (byte) keyboard_events_size#68 (byte) keyboard_events_size#65 (byte) keyboard_events_size#57 (byte) keyboard_events_size#48 (byte) keyboard_events_size#40 (byte) keyboard_events_size#36 (byte) keyboard_events_size#28 
Alias (byte) keyboard_modifiers#0 = (byte) keyboard_modifiers#58 (byte) keyboard_modifiers#56 (byte) keyboard_modifiers#54 (byte) keyboard_modifiers#52 (byte) keyboard_modifiers#49 (byte) keyboard_modifiers#45 (byte) keyboard_modifiers#39 (byte) keyboard_modifiers#34 (byte) keyboard_modifiers#33 (byte) keyboard_modifiers#25 
Alias (byte) sid_rnd::return#0 = (byte) sid_rnd::return#3 (byte) sid_rnd::return#1 
Alias (byte*) PLAYFIELD_SPRITE_PTRS_1#0 = (byte*~) $1 
Alias (byte*) PLAYFIELD_SPRITE_PTRS_2#0 = (byte*~) $2 
Alias (byte*) render_init::vicSelectGfxBank1_gfx#0 = (byte*) render_init::vicSelectGfxBank1_gfx#1 (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte) render_init::vicSelectGfxBank1_toDd001_return#0 = (byte/word/dword) render_init::vicSelectGfxBank1_toDd001_$3#0 (byte) render_init::vicSelectGfxBank1_toDd001_return#2 (byte) render_init::vicSelectGfxBank1_toDd001_return#1 (byte) render_init::vicSelectGfxBank1_toDd001_return#3 (byte) render_init::vicSelectGfxBank1_$0#0 
Alias (byte*) render_init::line#0 = (byte*~) render_init::$9 
Alias (byte*) render_init::line#2 = (byte*) render_init::line#3 
Alias (byte) render_init::l#2 = (byte) render_init::l#3 
Alias (byte*) render_init::li_1#0 = (byte*~) render_init::$17 
Alias (byte*) render_init::li_2#0 = (byte*~) render_init::$20 
Alias (byte) render_screen_show#1 = (byte) render_screen_show#9 (byte) render_screen_show#2 
Alias (byte) render_screen_render#1 = (byte) render_screen_render#9 (byte) render_screen_render#2 
Alias (byte) render_screen_show#10 = (byte) render_screen_show#41 (byte) render_screen_show#33 (byte) render_screen_show#25 (byte) render_screen_show#19 (byte) render_screen_show#42 (byte) render_screen_show#34 (byte) render_screen_show#26 (byte) render_screen_show#20 
Alias (byte*) render_show::toD0181_screen#0 = (byte*) render_show::toD0181_screen#1 
Alias (byte*) render_show::toD0181_gfx#0 = (byte*) render_show::toD0181_gfx#1 
Alias (byte) render_show::toD0181_return#0 = (byte) render_show::toD0181_$8#0 (byte) render_show::toD0181_return#2 (byte) render_show::toD0181_return#1 (byte) render_show::toD0181_return#3 (byte~) render_show::$2 (byte) render_show::d018val#1 
Alias (byte*) render_show::toD0182_screen#0 = (byte*) render_show::toD0182_screen#1 
Alias (byte*) render_show::toD0182_gfx#0 = (byte*) render_show::toD0182_gfx#1 
Alias (byte) render_show::toD0182_return#0 = (byte) render_show::toD0182_$8#0 (byte) render_show::toD0182_return#2 (byte) render_show::toD0182_return#1 (byte) render_show::toD0182_return#3 (byte~) render_show::$1 (byte) render_show::d018val#2 
Alias (byte) render_screen_render#11 = (byte) render_screen_render#3 (byte) render_screen_render#4 
Alias (byte) render_screen_show#13 = (byte) render_screen_show#3 (byte) render_screen_show#4 
Alias (byte*) render_screen_original::orig#0 = (byte*~) render_screen_original::$1 
Alias (byte) render_screen_original::c#0 = (byte/signed word/word/dword/signed dword~) render_screen_original::$3 (byte) render_screen_original::c#3 
Alias (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#9 
Alias (byte) render_screen_original::x#5 = (byte) render_screen_original::x#8 
Alias (byte*) render_screen_original::orig#1 = (byte*) render_screen_original::orig#6 
Alias (byte) render_screen_original::SPACE#6 = (byte) render_screen_original::SPACE#7 
Alias (byte) render_screen_original::y#5 = (byte) render_screen_original::y#6 
Alias (byte) render_screen_original::y#2 = (byte) render_screen_original::y#3 
Alias (byte) render_screen_original::SPACE#2 = (byte) render_screen_original::SPACE#5 
Alias (byte*) render_screen_original::screen#12 = (byte*) render_screen_original::screen#4 
Alias (byte*) render_screen_original::orig#7 = (byte*) render_screen_original::orig#8 
Alias (byte) render_playfield::i#0 = (byte/signed word/word/dword/signed dword~) render_playfield::$0 
Alias (byte) render_playfield::l#3 = (byte) render_playfield::l#4 
Alias (byte) render_screen_render#20 = (byte) render_screen_render#27 
Alias (byte) render_playfield::i#1 = (byte) render_playfield::i#4 
Alias (byte) render_current::ypos2#0 = (byte~) render_current::$0 
Alias (byte) render_screen_render#13 = (byte) render_screen_render#21 (byte) render_screen_render#37 
Alias (byte) render_current::ypos2#2 = (byte) render_current::ypos2#3 (byte) render_current::ypos2#6 
Alias (byte) current_xpos#12 = (byte) current_xpos#29 (byte) current_xpos#69 
Alias (byte*) current_piece_gfx#22 = (byte*) current_piece_gfx#36 (byte*) current_piece_gfx#68 
Alias (byte) render_current::i#3 = (byte) render_current::i#6 (byte) render_current::i#5 
Alias (byte) render_current::l#4 = (byte) render_current::l#9 (byte) render_current::l#5 
Alias (byte) current_piece_char#38 = (byte) current_piece_char#52 (byte) current_piece_char#71 
Alias (byte) render_current::xpos#3 = (byte) render_current::xpos#5 (byte) render_current::xpos#6 (byte) render_current::xpos#4 
Alias (byte) current_piece_char#17 = (byte) current_piece_char#26 (byte) current_piece_char#53 (byte) current_piece_char#8 
Alias (byte*) render_current::screen_line#1 = (byte*) render_current::screen_line#2 (byte*) render_current::screen_line#3 (byte*) render_current::screen_line#5 
Alias (byte) render_current::c#3 = (byte) render_current::c#6 (byte) render_current::c#4 (byte) render_current::c#5 
Alias (byte) render_current::ypos2#10 = (byte) render_current::ypos2#8 (byte) render_current::ypos2#9 (byte) render_current::ypos2#7 
Alias (byte) render_current::l#10 = (byte) render_current::l#7 (byte) render_current::l#8 (byte) render_current::l#6 
Alias (byte*) current_piece_gfx#11 = (byte*) current_piece_gfx#55 (byte*) current_piece_gfx#38 (byte*) current_piece_gfx#37 
Alias (byte) render_current::i#10 = (byte) render_current::i#11 (byte) render_current::i#2 (byte) render_current::i#9 
Alias (byte) render_screen_render#41 = (byte) render_screen_render#47 (byte) render_screen_render#42 (byte) render_screen_render#43 
Alias (byte) current_xpos#81 = (byte) current_xpos#90 (byte) current_xpos#82 (byte) current_xpos#83 
Alias (byte) render_screen_show#0 = (byte) render_screen_show#55 (byte) render_screen_show#52 (byte) render_screen_show#49 (byte) render_screen_show#46 (byte) render_screen_show#43 (byte) render_screen_show#35 (byte) render_screen_show#32 (byte) render_screen_show#24 
Alias (byte) render_screen_render#0 = (byte) render_screen_render#55 (byte) render_screen_render#53 (byte) render_screen_render#51 (byte) render_screen_render#48 (byte) render_screen_render#44 (byte) render_screen_render#38 (byte) render_screen_render#34 (byte) render_screen_render#24 
Alias (byte) render_screen_showing#0 = (byte) render_screen_showing#41 (byte) render_screen_showing#38 (byte) render_screen_showing#35 (byte) render_screen_showing#31 (byte) render_screen_showing#27 (byte) render_screen_showing#21 (byte) render_screen_showing#20 (byte) render_screen_showing#14 
Alias (byte) sprites_init::xpos#0 = (byte/signed word/word/dword/signed dword/signed byte~) sprites_init::$1 
Alias (byte) sprites_init::s2#0 = (byte~) sprites_init::$2 
Alias (byte) sprites_init::xpos#1 = (byte/signed word/word/dword/signed dword~) sprites_init::$3 
Alias (byte*) PLAYFIELD_SPRITES#0 = (byte*) toSpritePtr1_sprite#0 (byte*) toSpritePtr1_sprite#1 
Alias (byte) irq_sprite_ypos#0 = (byte) irq_sprite_ypos#23 (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#20 (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#15 (byte) irq_sprite_ypos#8 
Alias (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#4 (byte) irq_sprite_ptr#7 (byte) irq_sprite_ptr#12 
Alias (byte) render_screen_showing#11 = (byte) render_screen_showing#7 
Alias (byte) irq_cnt#12 = (byte) irq_cnt#9 (byte) irq_cnt#6 (byte) irq_cnt#7 
Alias (byte) irq_raster_next#10 = (byte) irq_raster_next#14 (byte) irq_raster_next#16 (byte) irq_raster_next#11 
Alias (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#16 (byte) irq_sprite_ypos#5 (byte) irq_sprite_ypos#12 
Alias (byte) sprites_irq::ptr#0 = (byte) sprites_irq::ptr#5 (byte) sprites_irq::ptr#6 
Alias (byte*) sprites_irq::toSpritePtr2_sprite#0 = (byte*) sprites_irq::toSpritePtr2_sprite#1 
Alias (byte) irq_raster_next#1 = (byte) irq_raster_next#15 (byte) irq_raster_next#12 (byte) irq_raster_next#8 
Alias (byte) irq_cnt#14 = (byte) irq_cnt#18 (byte) irq_cnt#2 (byte) irq_cnt#16 
Alias (byte) irq_sprite_ypos#1 = (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#19 (byte) irq_sprite_ypos#17 
Alias (byte) irq_raster_next#4 = (byte) irq_raster_next#7 
Alias (byte) irq_sprite_ypos#6 = (byte) irq_sprite_ypos#9 
Alias (byte) irq_sprite_ptr#5 = (byte) irq_sprite_ptr#8 
Alias (byte) irq_cnt#1 = (byte) irq_cnt#13 
Alias (byte) sprites_irq::raster_next#0 = (byte) sprites_irq::raster_next#3 
Alias (byte) irq_cnt#10 = (byte) irq_cnt#11 
Alias (byte) irq_raster_next#13 = (byte) irq_raster_next#5 
Alias (byte) irq_sprite_ypos#13 = (byte) irq_sprite_ypos#14 
Alias (byte) irq_sprite_ptr#13 = (byte) irq_sprite_ptr#14 
Alias (byte) irq_cnt#3 = (byte) irq_cnt#5 (byte) irq_cnt#8 
Alias (byte) irq_raster_next#3 = (byte) irq_raster_next#6 (byte) irq_raster_next#9 
Alias (byte) irq_sprite_ypos#10 = (byte) irq_sprite_ypos#7 (byte) irq_sprite_ypos#3 
Alias (byte) irq_sprite_ptr#3 = (byte) irq_sprite_ptr#6 (byte) irq_sprite_ptr#9 
Alias (byte) irq_cnt#0 = (byte) irq_cnt#20 (byte) irq_cnt#19 (byte) irq_cnt#17 
Alias (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#6 
Alias (byte) current_movedown_counter#15 = (byte) current_movedown_counter#16 (byte) current_movedown_counter#21 (byte) current_movedown_counter#9 (byte) current_movedown_counter#17 
Alias (byte) play_move_down::movedown#10 = (byte) play_move_down::movedown#12 (byte) play_move_down::movedown#8 (byte) play_move_down::movedown#11 (byte) play_move_down::movedown#5 
Alias (byte) current_ypos#51 = (byte) current_ypos#52 (byte) current_ypos#61 (byte) current_ypos#62 (byte) current_ypos#53 
Alias (byte) current_xpos#70 = (byte) current_xpos#71 (byte) current_xpos#85 (byte) current_xpos#86 (byte) current_xpos#72 
Alias (byte) current_orientation#52 = (byte) current_orientation#53 (byte) current_orientation#62 (byte) current_orientation#63 (byte) current_orientation#54 
Alias (byte*) current_piece#54 = (byte*) current_piece#55 (byte*) current_piece#61 (byte*) current_piece#62 (byte*) current_piece#56 
Alias (byte*) current_piece_gfx#70 = (byte*) current_piece_gfx#71 (byte*) current_piece_gfx#79 (byte*) current_piece_gfx#80 (byte*) current_piece_gfx#72 
Alias (byte) current_piece_char#55 = (byte) current_piece_char#56 (byte) current_piece_char#66 (byte) current_piece_char#67 (byte) current_piece_char#57 
Alias (byte) play_move_down::movedown#0 = (byte) play_move_down::movedown#4 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#28 
Alias (byte) current_ypos#66 = (byte) current_ypos#67 
Alias (byte) current_xpos#92 = (byte) current_xpos#93 
Alias (byte) current_orientation#67 = (byte) current_orientation#68 
Alias (byte*) current_piece#66 = (byte*) current_piece#67 
Alias (byte*) current_piece_gfx#85 = (byte*) current_piece_gfx#86 
Alias (byte) current_piece_char#73 = (byte) current_piece_char#74 
Alias (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#9 
Alias (byte) current_ypos#39 = (byte) current_ypos#40 
Alias (byte) current_xpos#49 = (byte) current_xpos#50 
Alias (byte) current_orientation#41 = (byte) current_orientation#42 
Alias (byte) current_movedown_counter#29 = (byte) current_movedown_counter#8 
Alias (byte*) current_piece#43 = (byte*) current_piece#44 
Alias (byte*) current_piece_gfx#56 = (byte*) current_piece_gfx#57 
Alias (byte) current_piece_char#40 = (byte) current_piece_char#41 
Alias (byte) current_movedown_counter#18 = (byte) current_movedown_counter#22 
Alias (byte) current_ypos#10 = (byte) current_ypos#28 (byte) current_ypos#25 (byte) current_ypos#26 (byte) current_ypos#11 (byte) current_ypos#34 (byte) current_ypos#41 (byte) current_ypos#27 
Alias (byte*) current_piece#18 = (byte*) current_piece#19 (byte*) current_piece#30 (byte*) current_piece#22 (byte*) current_piece#45 (byte*) current_piece#32 (byte*) current_piece#46 (byte*) current_piece#31 
Alias (byte) current_orientation#12 = (byte) current_orientation#28 (byte) current_orientation#26 (byte) current_orientation#55 (byte) current_orientation#44 (byte) current_orientation#56 (byte) current_orientation#43 (byte) current_orientation#27 
Alias (byte*) current_piece_gfx#24 = (byte*) current_piece_gfx#25 (byte*) current_piece_gfx#39 (byte*) current_piece_gfx#73 (byte*) current_piece_gfx#58 (byte*) current_piece_gfx#41 (byte*) current_piece_gfx#59 (byte*) current_piece_gfx#40 
Alias (byte) current_xpos#13 = (byte) current_xpos#32 (byte) current_xpos#30 (byte) current_xpos#73 (byte) current_xpos#52 (byte) current_xpos#58 (byte) current_xpos#51 (byte) current_xpos#31 
Alias (byte) current_piece_char#18 = (byte) current_piece_char#19 (byte) current_piece_char#27 (byte) current_piece_char#58 (byte) current_piece_char#42 (byte) current_piece_char#29 (byte) current_piece_char#43 (byte) current_piece_char#28 
Alias (byte) play_collision::ypos#0 = (byte/signed word/word/dword/signed dword~) play_move_down::$11 
Alias (byte) play_collision::return#0 = (byte) play_collision::return#10 
Alias (byte*) current_piece#1 = (byte*) current_piece#9 
Alias (byte) current_orientation#1 = (byte) current_orientation#13 
Alias (byte*) current_piece_gfx#0 = (byte*) current_piece_gfx#12 
Alias (byte) current_xpos#0 = (byte) current_xpos#14 
Alias (byte) current_ypos#1 = (byte) current_ypos#12 
Alias (byte) current_piece_char#0 = (byte) current_piece_char#9 
Alias (byte) play_move_down::return#2 = (byte) play_move_down::return#4 
Alias (byte) current_movedown_counter#10 = (byte) current_movedown_counter#3 
Alias (byte) current_ypos#13 = (byte) current_ypos#2 
Alias (byte*) current_piece#10 = (byte*) current_piece#2 
Alias (byte) current_orientation#14 = (byte) current_orientation#2 
Alias (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#13 
Alias (byte) current_xpos#1 = (byte) current_xpos#15 
Alias (byte) current_piece_char#1 = (byte) current_piece_char#10 
Alias (byte) current_xpos#16 = (byte) current_xpos#34 (byte) current_xpos#38 (byte) current_xpos#35 (byte) current_xpos#53 (byte) current_xpos#17 (byte) current_xpos#36 (byte) current_xpos#54 (byte) current_xpos#18 (byte) current_xpos#55 (byte) current_xpos#20 
Alias (byte) current_ypos#14 = (byte) current_ypos#30 (byte) current_ypos#31 (byte) current_ypos#15 
Alias (byte) current_orientation#15 = (byte) current_orientation#30 (byte) current_orientation#31 (byte) current_orientation#16 
Alias (byte*) current_piece#23 = (byte*) current_piece#33 (byte*) current_piece#34 (byte*) current_piece#24 
Alias (byte) play_collision::xpos#1 = (byte/signed word/word/dword/signed dword~) play_move_leftright::$7 
Alias (byte) play_collision::return#1 = (byte) play_collision::return#11 
Alias (byte) play_move_leftright::key_event#1 = (byte) play_move_leftright::key_event#2 
Alias (byte) play_collision::xpos#2 = (byte/signed word/word/dword/signed dword~) play_move_leftright::$3 
Alias (byte) play_collision::return#12 = (byte) play_collision::return#2 
Alias (byte) play_move_leftright::return#1 = (byte) play_move_leftright::return#5 
Alias (byte) current_xpos#19 = (byte) current_xpos#3 
Alias (byte) current_orientation#17 = (byte) current_orientation#32 (byte) current_orientation#33 (byte) current_orientation#18 (byte) current_orientation#35 
Alias (byte) current_xpos#39 = (byte) current_xpos#56 (byte) current_xpos#57 (byte) current_xpos#40 
Alias (byte) current_ypos#32 = (byte) current_ypos#42 (byte) current_ypos#43 (byte) current_ypos#33 
Alias (byte*) current_piece#35 = (byte*) current_piece#47 (byte*) current_piece#48 (byte*) current_piece#36 
Alias (byte*) current_piece_gfx#28 = (byte*) current_piece_gfx#74 (byte*) current_piece_gfx#60 (byte*) current_piece_gfx#42 (byte*) current_piece_gfx#75 
Alias (byte) play_move_rotate::orientation#1 = (byte/word/dword~) play_move_rotate::$5 
Alias (byte) play_move_rotate::key_event#1 = (byte) play_move_rotate::key_event#2 
Alias (byte) play_move_rotate::orientation#2 = (byte/word/dword~) play_move_rotate::$3 
Alias (byte) play_move_rotate::return#1 = (byte) play_move_rotate::return#5 
Alias (byte) current_orientation#19 = (byte) current_orientation#3 
Alias (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#2 
Alias (byte) play_collision::return#13 = (byte) play_collision::return#3 
Alias (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#5 (byte) play_move_rotate::orientation#4 
Alias (byte*) current_piece#11 = (byte*) current_piece#21 (byte*) current_piece#25 
Alias (byte) current_orientation#34 = (byte) current_orientation#45 (byte) current_orientation#57 
Alias (byte*) current_piece_gfx#27 = (byte*) current_piece_gfx#43 (byte*) current_piece_gfx#61 
Alias (byte*) current_piece_gfx#3 = (byte*~) play_move_rotate::$9 
Alias (byte*) current_piece#0 = (byte*) current_piece#42 (byte*) current_piece#29 
Alias (byte) current_orientation#0 = (byte) current_orientation#51 (byte) current_orientation#40 
Alias (byte) current_movedown_counter#0 = (byte) current_movedown_counter#27 (byte) current_movedown_counter#20 
Alias (byte*) play_collision::piece_gfx#0 = (byte*~) play_collision::$0 
Alias (byte) play_collision::ypos2#0 = (byte~) play_collision::$1 
Alias (byte) play_collision::col#0 = (byte) play_collision::xpos#4 
Alias (byte) play_collision::ypos2#10 = (byte) play_collision::ypos2#3 (byte) play_collision::ypos2#5 (byte) play_collision::ypos2#9 (byte) play_collision::ypos2#8 (byte) play_collision::ypos2#7 
Alias (byte) play_collision::col#3 = (byte) play_collision::col#8 (byte) play_collision::col#6 (byte) play_collision::col#4 (byte) play_collision::col#5 (byte) play_collision::col#7 
Alias (byte*) play_collision::playfield_line#1 = (byte*) play_collision::playfield_line#4 (byte*) play_collision::playfield_line#5 (byte*) play_collision::playfield_line#3 (byte*) play_collision::playfield_line#2 (byte*) play_collision::playfield_line#7 
Alias (byte) play_collision::c#3 = (byte) play_collision::c#8 (byte) play_collision::c#7 (byte) play_collision::c#6 (byte) play_collision::c#5 (byte) play_collision::c#4 
Alias (byte*) play_collision::piece_gfx#1 = (byte*) play_collision::piece_gfx#9 (byte*) play_collision::piece_gfx#8 (byte*) play_collision::piece_gfx#7 (byte*) play_collision::piece_gfx#6 (byte*) play_collision::piece_gfx#5 
Alias (byte) play_collision::i#1 = (byte) play_collision::i#10 (byte) play_collision::i#9 (byte) play_collision::i#8 (byte) play_collision::i#7 (byte) play_collision::i#6 
Alias (byte) play_collision::l#10 = (byte) play_collision::l#4 (byte) play_collision::l#9 (byte) play_collision::l#8 (byte) play_collision::l#7 (byte) play_collision::l#5 
Alias (byte) play_collision::xpos#10 = (byte) play_collision::xpos#13 (byte) play_collision::xpos#8 (byte) play_collision::xpos#12 (byte) play_collision::xpos#11 (byte) play_collision::xpos#9 
Alias (byte) play_collision::return#14 = (byte) play_collision::return#5 
Alias (byte) play_collision::ypos2#4 = (byte) play_collision::ypos2#6 
Alias (byte) play_collision::l#2 = (byte) play_collision::l#3 
Alias (byte) play_collision::xpos#6 = (byte) play_collision::xpos#7 
Alias (byte*) play_collision::piece_gfx#3 = (byte*) play_collision::piece_gfx#4 
Alias (byte) play_collision::i#4 = (byte) play_collision::i#5 
Alias (byte) play_lock_current::ypos2#0 = (byte~) play_lock_current::$0 
Alias (byte) current_piece_char#11 = (byte) current_piece_char#21 
Alias (byte*) play_lock_current::playfield_line#1 = (byte*) play_lock_current::playfield_line#2 
Alias (byte) play_lock_current::col#3 = (byte) play_lock_current::col#4 
Alias (byte) play_lock_current::c#3 = (byte) play_lock_current::c#4 
Alias (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#46 
Alias (byte) play_lock_current::i#1 = (byte) play_lock_current::i#6 
Alias (byte) play_lock_current::ypos2#5 = (byte) play_lock_current::ypos2#6 
Alias (byte) play_lock_current::l#4 = (byte) play_lock_current::l#5 
Alias (byte) current_xpos#75 = (byte) current_xpos#76 
Alias (byte) play_lock_current::ypos2#3 = (byte) play_lock_current::ypos2#4 
Alias (byte) play_lock_current::l#2 = (byte) play_lock_current::l#3 
Alias (byte) current_xpos#42 = (byte) current_xpos#59 
Alias (byte*) current_piece_gfx#30 = (byte*) current_piece_gfx#45 
Alias (byte) play_lock_current::i#4 = (byte) play_lock_current::i#5 
Alias (byte) current_piece_char#31 = (byte) current_piece_char#46 
Alias (byte) sid_rnd::return#2 = (byte) sid_rnd::return#4 
Alias (byte) play_spawn_current::piece_idx#1 = (byte~) play_spawn_current::$2 
Alias (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#3 
Alias (byte*) current_piece_gfx#16 = (byte*) current_piece_gfx#4 (byte*~) play_spawn_current::$4 (byte*) current_piece_gfx#5 
Alias (byte*) current_piece#13 = (byte*) current_piece#3 (byte*) current_piece#4 
Alias (byte) current_orientation#20 = (byte) current_orientation#5 (byte) current_orientation#6 
Alias (byte) current_xpos#23 = (byte) current_xpos#5 (byte) current_xpos#6 
Alias (byte) current_ypos#18 = (byte) current_ypos#3 (byte) current_ypos#4 
Alias (byte) current_piece_char#12 = (byte) current_piece_char#2 (byte) current_piece_char#3 
Alias (byte) play_remove_lines::r#0 = (byte/signed word/word/dword/signed dword~) play_remove_lines::$1 
Alias (byte) play_remove_lines::w#0 = (byte/signed word/word/dword/signed dword~) play_remove_lines::$3 
Alias (byte) play_remove_lines::c#0 = (byte) play_remove_lines::c#2 
Alias (byte) play_remove_lines::w#8 = (byte) play_remove_lines::w#9 
Alias (byte) play_remove_lines::x#3 = (byte) play_remove_lines::x#4 
Alias (byte) play_remove_lines::r#1 = (byte) play_remove_lines::r#6 
Alias (byte) play_remove_lines::y#6 = (byte) play_remove_lines::y#7 
Alias (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#3 
Alias (byte) play_remove_lines::y#3 = (byte) play_remove_lines::y#4 (byte) play_remove_lines::y#5 
Alias (byte) play_remove_lines::w#1 = (byte) play_remove_lines::w#10 (byte) play_remove_lines::w#5 
Alias (byte) play_remove_lines::r#4 = (byte) play_remove_lines::r#8 (byte) play_remove_lines::r#7 
Alias (byte) play_remove_lines::w#2 = (byte~) play_remove_lines::$11 
Alias (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#7 
Alias (byte) render_screen_show#22 = (byte) render_screen_show#27 
Alias (byte) render_screen_render#22 = (byte) render_screen_render#30 
Alias (byte*) current_piece#26 = (byte*) current_piece#63 (byte*) current_piece#68 (byte*) current_piece#58 (byte*) current_piece#49 (byte*) current_piece#37 
Alias (byte) current_orientation#36 = (byte) current_orientation#69 (byte) current_orientation#72 (byte) current_orientation#64 (byte) current_orientation#58 (byte) current_orientation#46 
Alias (byte*) current_piece_gfx#31 = (byte*) current_piece_gfx#81 (byte*) current_piece_gfx#87 (byte*) current_piece_gfx#76 (byte*) current_piece_gfx#63 (byte*) current_piece_gfx#47 
Alias (byte) current_xpos#43 = (byte) current_xpos#94 (byte) current_xpos#97 (byte) current_xpos#87 (byte) current_xpos#77 (byte) current_xpos#60 
Alias (byte) current_ypos#35 = (byte) current_ypos#68 (byte) current_ypos#71 (byte) current_ypos#63 (byte) current_ypos#56 (byte) current_ypos#44 
Alias (byte) current_piece_char#22 = (byte) current_piece_char#68 (byte) current_piece_char#75 (byte) current_piece_char#59 (byte) current_piece_char#47 (byte) current_piece_char#32 
Alias (byte) render_screen_showing#16 = (byte) render_screen_showing#43 (byte) render_screen_showing#44 (byte) render_screen_showing#42 (byte) render_screen_showing#39 (byte) render_screen_showing#36 (byte) render_screen_showing#32 (byte) render_screen_showing#28 (byte) render_screen_showing#22 
Alias (byte) keyboard_events_size#32 = (byte) keyboard_events_size#76 (byte) keyboard_events_size#78 (byte) keyboard_events_size#73 (byte) keyboard_events_size#69 (byte) keyboard_events_size#66 (byte) keyboard_events_size#58 (byte) keyboard_events_size#49 (byte) keyboard_events_size#41 
Alias (byte) keyboard_modifiers#29 = (byte) keyboard_modifiers#57 (byte) keyboard_modifiers#59 (byte) keyboard_modifiers#55 (byte) keyboard_modifiers#53 (byte) keyboard_modifiers#50 (byte) keyboard_modifiers#46 (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#35 
Alias (byte) current_movedown_counter#23 = (byte) current_movedown_counter#46 (byte) current_movedown_counter#47 (byte) current_movedown_counter#45 (byte) current_movedown_counter#44 (byte) current_movedown_counter#41 (byte) current_movedown_counter#38 (byte) current_movedown_counter#34 (byte) current_movedown_counter#30 
Alias (byte) render_screen_show#14 = (byte) render_screen_show#5 (byte) render_screen_show#53 (byte) render_screen_show#50 (byte) render_screen_show#47 (byte) render_screen_show#44 (byte) render_screen_show#36 (byte) render_screen_show#28 
Alias (byte) render_screen_render#14 = (byte) render_screen_render#5 (byte) render_screen_render#49 (byte) render_screen_render#45 (byte) render_screen_render#39 (byte) render_screen_render#26 (byte) render_screen_render#35 (byte) render_screen_render#31 
Alias (byte*) current_piece#14 = (byte*) current_piece#5 (byte*) current_piece#50 (byte*) current_piece#38 
Alias (byte) current_orientation#21 = (byte) current_orientation#7 (byte) current_orientation#59 (byte) current_orientation#47 
Alias (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#6 (byte*) current_piece_gfx#64 (byte*) current_piece_gfx#48 
Alias (byte) current_xpos#24 = (byte) current_xpos#7 (byte) current_xpos#66 (byte) current_xpos#61 
Alias (byte) current_ypos#19 = (byte) current_ypos#5 (byte) current_ypos#23 (byte) current_ypos#45 
Alias (byte) current_piece_char#13 = (byte) current_piece_char#4 (byte) current_piece_char#48 (byte) current_piece_char#33 
Alias (byte) render_screen_show#16 = (byte) render_screen_show#37 (byte) render_screen_show#23 (byte) render_screen_show#7 
Alias (byte) render_screen_showing#13 = (byte) render_screen_showing#23 (byte) render_screen_showing#9 (byte) render_screen_showing#4 
Alias (byte) keyboard_events_size#19 = (byte) keyboard_events_size#50 (byte) keyboard_events_size#27 (byte) keyboard_events_size#8 
Alias (byte) keyboard_modifiers#16 = (byte) keyboard_modifiers#41 (byte) keyboard_modifiers#24 (byte) keyboard_modifiers#8 
Alias (byte) current_movedown_counter#12 = (byte) current_movedown_counter#42 (byte) current_movedown_counter#19 (byte) current_movedown_counter#5 
Alias (byte) current_ypos#21 = (byte) current_ypos#72 (byte) current_ypos#37 (byte) current_ypos#7 
Alias (byte*) current_piece#16 = (byte*) current_piece#69 (byte*) current_piece#28 (byte*) current_piece#7 
Alias (byte) current_orientation#10 = (byte) current_orientation#73 (byte) current_orientation#39 (byte) current_orientation#24 
Alias (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#88 (byte*) current_piece_gfx#34 (byte*) current_piece_gfx#9 
Alias (byte) current_xpos#10 = (byte) current_xpos#98 (byte) current_xpos#45 (byte) current_xpos#27 
Alias (byte) current_piece_char#15 = (byte) current_piece_char#76 (byte) current_piece_char#24 (byte) current_piece_char#6 
Alias (byte) render_screen_render#16 = (byte) render_screen_render#59 (byte) render_screen_render#23 (byte) render_screen_render#7 
Alias (byte) render_screen_show#18 = (byte) render_screen_show#38 (byte) render_screen_show#30 (byte) render_screen_show#56 (byte) render_screen_show#54 (byte) render_screen_show#51 (byte) render_screen_show#48 (byte) render_screen_show#45 (byte) render_screen_show#39 (byte) render_screen_show#29 (byte) render_screen_show#40 (byte) render_screen_show#31 (byte) render_screen_show#21 
Alias (byte) render_screen_showing#12 = (byte) render_screen_showing#24 (byte) render_screen_showing#19 
Alias (byte) keyboard_events_size#26 = (byte) keyboard_events_size#51 (byte) keyboard_events_size#42 (byte) keyboard_events_size#35 
Alias (byte) keyboard_modifiers#23 = (byte) keyboard_modifiers#42 (byte) keyboard_modifiers#36 (byte) keyboard_modifiers#32 
Alias (byte) current_movedown_counter#14 = (byte) current_movedown_counter#43 (byte) current_movedown_counter#39 (byte) current_movedown_counter#35 (byte) current_movedown_counter#31 (byte) current_movedown_counter#26 
Alias (byte) current_ypos#36 = (byte) current_ypos#73 (byte) current_ypos#69 (byte) current_ypos#64 (byte) current_ypos#57 (byte) current_ypos#48 
Alias (byte*) current_piece#27 = (byte*) current_piece#70 (byte*) current_piece#64 (byte*) current_piece#59 (byte*) current_piece#51 (byte*) current_piece#41 
Alias (byte) current_orientation#37 = (byte) current_orientation#74 (byte) current_orientation#70 (byte) current_orientation#65 (byte) current_orientation#60 (byte) current_orientation#50 
Alias (byte*) current_piece_gfx#32 = (byte*) current_piece_gfx#89 (byte*) current_piece_gfx#82 (byte*) current_piece_gfx#77 (byte*) current_piece_gfx#65 (byte*) current_piece_gfx#51 
Alias (byte) current_xpos#44 = (byte) current_xpos#99 (byte) current_xpos#95 (byte) current_xpos#88 (byte) current_xpos#78 (byte) current_xpos#64 
Alias (byte) current_piece_char#23 = (byte) current_piece_char#77 (byte) current_piece_char#69 (byte) current_piece_char#60 (byte) current_piece_char#49 (byte) current_piece_char#36 
Alias (byte) render_screen_render#18 = (byte) render_screen_render#60 (byte) render_screen_render#58 (byte) render_screen_render#57 (byte) render_screen_render#56 (byte) render_screen_render#54 (byte) render_screen_render#52 (byte) render_screen_render#50 (byte) render_screen_render#46 (byte) render_screen_render#40 (byte) render_screen_render#32 (byte) render_screen_render#25 (byte) render_screen_render#33 
Alias (byte) render_screen_showing#17 = (byte) render_screen_showing#3 (byte) render_screen_showing#8 (byte) render_screen_showing#40 (byte) render_screen_showing#37 (byte) render_screen_showing#33 (byte) render_screen_showing#29 (byte) render_screen_showing#25 (byte) render_screen_showing#18 (byte) render_screen_showing#34 (byte) render_screen_showing#30 (byte) render_screen_showing#26 
Alias (byte) keyboard_events_size#17 = (byte) keyboard_events_size#6 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#7 (byte) keyboard_modifiers#51 (byte) keyboard_modifiers#47 (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#37 (byte) keyboard_modifiers#31 (byte) keyboard_modifiers#48 (byte) keyboard_modifiers#44 (byte) keyboard_modifiers#38 (byte) keyboard_modifiers#30 
Alias (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#5 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#7 (byte) keyboard_events_size#59 (byte) keyboard_events_size#52 (byte) keyboard_events_size#43 (byte) keyboard_events_size#34 (byte) keyboard_events_size#60 (byte) keyboard_events_size#53 (byte) keyboard_events_size#44 (byte) keyboard_events_size#33 
Alias (byte) main::key_event#0 = (byte~) main::$11 (byte) main::key_event#1 (byte) main::key_event#2 
Alias (byte) play_move_down::return#3 = (byte) play_move_down::return#5 
Alias (byte) main::render#0 = (byte) main::render#4 
Alias (byte) current_movedown_counter#11 = (byte) current_movedown_counter#4 (byte) current_movedown_counter#36 (byte) current_movedown_counter#32 (byte) current_movedown_counter#25 (byte) current_movedown_counter#40 (byte) current_movedown_counter#37 (byte) current_movedown_counter#33 (byte) current_movedown_counter#24 
Alias (byte) current_ypos#20 = (byte) current_ypos#6 (byte) current_ypos#54 (byte) current_ypos#58 (byte) current_ypos#47 (byte) current_ypos#49 (byte) current_ypos#24 (byte) current_ypos#59 (byte) current_ypos#46 
Alias (byte*) current_piece#15 = (byte*) current_piece#6 (byte*) current_piece#57 (byte*) current_piece#52 (byte*) current_piece#40 (byte*) current_piece#65 (byte*) current_piece#60 (byte*) current_piece#53 (byte*) current_piece#39 
Alias (byte) current_orientation#22 = (byte) current_orientation#8 (byte) current_orientation#38 
Alias (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#7 (byte*) current_piece_gfx#33 
Alias (byte) current_xpos#25 = (byte) current_xpos#8 
Alias (byte) current_piece_char#14 = (byte) current_piece_char#5 (byte) current_piece_char#61 (byte) current_piece_char#50 (byte) current_piece_char#35 (byte) current_piece_char#70 (byte) current_piece_char#62 (byte) current_piece_char#51 (byte) current_piece_char#34 
Alias (byte) play_move_leftright::return#4 = (byte) play_move_leftright::return#6 
Alias (byte) main::render#1 = (byte) main::render#5 
Alias (byte) current_xpos#26 = (byte) current_xpos#9 (byte) current_xpos#79 (byte) current_xpos#63 (byte) current_xpos#89 (byte) current_xpos#67 (byte) current_xpos#80 (byte) current_xpos#62 
Alias (byte) play_move_rotate::return#4 = (byte) play_move_rotate::return#6 
Alias (byte) main::render#2 = (byte) main::render#6 
Alias (byte) current_orientation#23 = (byte) current_orientation#9 (byte) current_orientation#49 (byte) current_orientation#71 (byte) current_orientation#66 (byte) current_orientation#61 (byte) current_orientation#48 
Alias (byte*) current_piece_gfx#19 = (byte*) current_piece_gfx#8 (byte*) current_piece_gfx#50 (byte*) current_piece_gfx#83 (byte*) current_piece_gfx#67 (byte*) current_piece_gfx#66 (byte*) current_piece_gfx#49 
Alias (byte) render_screen_render#15 = (byte) render_screen_render#6 
Alias (byte) render_screen_show#15 = (byte) render_screen_show#6 
Alias (byte) render_screen_show#17 = (byte) render_screen_show#8 
Alias (byte) render_screen_render#17 = (byte) render_screen_render#8 
Alias (byte*) current_piece#17 = (byte*) current_piece#8 
Alias (byte) current_orientation#11 = (byte) current_orientation#25 
Alias (byte*) current_piece_gfx#10 = (byte*) current_piece_gfx#21 
Alias (byte) current_xpos#11 = (byte) current_xpos#28 
Alias (byte) current_ypos#22 = (byte) current_ypos#8 
Alias (byte) current_piece_char#16 = (byte) current_piece_char#7 
Alias (byte) render_screen_showing#10 = (byte) render_screen_showing#5 
Alias (byte) keyboard_events_size#20 = (byte) keyboard_events_size#9 
Alias (byte) keyboard_modifiers#17 = (byte) keyboard_modifiers#9 
Alias (byte) current_movedown_counter#13 = (byte) current_movedown_counter#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_show#10 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte) irq_raster_next#0 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#21 (byte) irq_raster_next#20 (byte) irq_raster_next#19 (byte) irq_raster_next#18 
Alias candidate removed (volatile)(byte) toSpritePtr1_return#0 = (byte) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $4 (byte) irq_sprite_ptr#0 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#16 (byte) irq_sprite_ptr#15 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$3 (byte) irq_sprite_ptr#1 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#4 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#3 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#3 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#6 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#63 (byte) keyboard_events_size#55 (byte) keyboard_events_size#46 (byte) keyboard_events_size#23 
Alias (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#6 
Alias (byte) render_screen_original::x#5 = (byte) render_screen_original::x#6 
Alias (byte*) render_screen_original::orig#1 = (byte*) render_screen_original::orig#4 
Alias (byte) render_screen_original::SPACE#4 = (byte) render_screen_original::SPACE#6 
Alias (byte) render_screen_original::y#4 = (byte) render_screen_original::y#5 
Alias (byte) render_current::xpos#2 = (byte) render_current::xpos#3 
Alias (byte) render_current::c#2 = (byte) render_current::c#3 
Alias (byte) render_current::ypos2#10 = (byte) render_current::ypos2#5 
Alias (byte) render_current::l#10 = (byte) render_current::l#3 
Alias (byte*) current_piece_gfx#11 = (byte*) current_piece_gfx#23 
Alias (byte) render_current::i#10 = (byte) render_current::i#7 
Alias (byte) render_screen_render#36 = (byte) render_screen_render#41 
Alias (byte) current_xpos#68 = (byte) current_xpos#81 
Alias (byte) current_piece_char#17 = (byte) current_piece_char#39 
Alias (byte*) render_current::screen_line#1 = (byte*) render_current::screen_line#4 
Alias (byte) irq_cnt#12 = (byte) irq_cnt#4 
Alias (byte) irq_raster_next#10 = (byte) irq_raster_next#4 
Alias (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#6 
Alias (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#5 
Alias (byte) irq_cnt#10 = (byte) irq_cnt#3 
Alias (byte) irq_raster_next#13 = (byte) irq_raster_next#3 
Alias (byte) irq_sprite_ypos#10 = (byte) irq_sprite_ypos#13 
Alias (byte) irq_sprite_ptr#13 = (byte) irq_sprite_ptr#3 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#15 (byte) current_movedown_counter#29 (byte) current_movedown_counter#18 
Alias (byte) current_ypos#10 = (byte) current_ypos#51 (byte) current_ypos#66 (byte) current_ypos#39 
Alias (byte) current_xpos#13 = (byte) current_xpos#70 (byte) current_xpos#92 (byte) current_xpos#49 
Alias (byte) current_orientation#12 = (byte) current_orientation#52 (byte) current_orientation#67 (byte) current_orientation#41 
Alias (byte*) current_piece#18 = (byte*) current_piece#54 (byte*) current_piece#66 (byte*) current_piece#43 
Alias (byte*) current_piece_gfx#24 = (byte*) current_piece_gfx#70 (byte*) current_piece_gfx#85 (byte*) current_piece_gfx#56 
Alias (byte) current_piece_char#18 = (byte) current_piece_char#55 (byte) current_piece_char#73 (byte) current_piece_char#40 
Alias (byte) current_xpos#16 = (byte) current_xpos#37 
Alias (byte) current_xpos#21 = (byte) current_xpos#39 
Alias (byte) current_ypos#16 = (byte) current_ypos#32 
Alias (byte*) current_piece#11 = (byte*) current_piece#35 
Alias (byte) current_orientation#17 = (byte) current_orientation#34 
Alias (byte*) current_piece_gfx#27 = (byte*) current_piece_gfx#28 
Alias (byte) play_collision::col#2 = (byte) play_collision::col#3 
Alias (byte) play_collision::c#2 = (byte) play_collision::c#3 
Alias (byte*) play_collision::piece_gfx#1 = (byte*) play_collision::piece_gfx#3 
Alias (byte) play_collision::i#1 = (byte) play_collision::i#4 
Alias (byte) play_collision::ypos2#10 = (byte) play_collision::ypos2#4 
Alias (byte) play_collision::l#10 = (byte) play_collision::l#2 
Alias (byte) play_collision::xpos#10 = (byte) play_collision::xpos#6 
Alias (byte*) play_collision::playfield_line#1 = (byte*) play_collision::playfield_line#6 
Alias (byte) play_lock_current::col#2 = (byte) play_lock_current::col#3 
Alias (byte) play_lock_current::c#2 = (byte) play_lock_current::c#3 
Alias (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#30 
Alias (byte) play_lock_current::i#1 = (byte) play_lock_current::i#4 
Alias (byte) play_lock_current::ypos2#3 = (byte) play_lock_current::ypos2#5 
Alias (byte) play_lock_current::l#2 = (byte) play_lock_current::l#4 
Alias (byte) current_piece_char#11 = (byte) current_piece_char#31 
Alias (byte*) play_lock_current::playfield_line#1 = (byte*) play_lock_current::playfield_line#3 
Alias (byte) current_xpos#42 = (byte) current_xpos#75 
Alias (byte) play_remove_lines::c#0 = (byte) play_remove_lines::c#1 
Alias (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#8 
Alias (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#3 
Alias (byte) play_remove_lines::r#1 = (byte) play_remove_lines::r#4 (byte) play_remove_lines::r#5 
Alias (byte) play_remove_lines::y#2 = (byte) play_remove_lines::y#3 (byte) play_remove_lines::y#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_show#10 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte) irq_raster_next#0 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#21 (byte) irq_raster_next#20 (byte) irq_raster_next#19 (byte) irq_raster_next#18 
Alias candidate removed (volatile)(byte) toSpritePtr1_return#0 = (byte) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $4 (byte) irq_sprite_ptr#0 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#16 (byte) irq_sprite_ptr#15 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$3 (byte) irq_sprite_ptr#1 
Self Phi Eliminated (byte) fill::val#1
Self Phi Eliminated (byte*) fill::end#1
Self Phi Eliminated (byte) keyboard_event_scan::row_scan#1
Self Phi Eliminated (byte) keyboard_event_scan::row#10
Self Phi Eliminated (byte*) render_init::line#2
Self Phi Eliminated (byte) render_init::l#2
Self Phi Eliminated (byte) render_screen_original::SPACE#1
Self Phi Eliminated (byte*) render_screen_original::orig#3
Self Phi Eliminated (byte) render_screen_original::y#7
Self Phi Eliminated (byte) render_screen_original::SPACE#4
Self Phi Eliminated (byte) render_screen_original::y#4
Self Phi Eliminated (byte) render_screen_original::SPACE#2
Self Phi Eliminated (byte) render_screen_original::y#2
Self Phi Eliminated (byte*) render_screen_original::orig#7
Self Phi Eliminated (byte) render_playfield::l#3
Self Phi Eliminated (byte) render_screen_render#20
Self Phi Eliminated (byte*) current_piece_gfx#11
Self Phi Eliminated (byte) render_current::ypos2#10
Self Phi Eliminated (byte) render_current::l#10
Self Phi Eliminated (byte) current_piece_char#17
Self Phi Eliminated (byte*) render_current::screen_line#1
Self Phi Eliminated (byte) render_screen_render#36
Self Phi Eliminated (byte) current_xpos#68
Self Phi Eliminated (byte) irq_sprite_ypos#11
Self Phi Eliminated (byte) irq_sprite_ptr#11
Self Phi Eliminated (byte) render_screen_showing#11
Self Phi Eliminated (byte) irq_cnt#12
Self Phi Eliminated (byte) irq_raster_next#10
Self Phi Eliminated (byte*) play_collision::piece_gfx#1
Self Phi Eliminated (byte) play_collision::ypos2#10
Self Phi Eliminated (byte) play_collision::l#10
Self Phi Eliminated (byte) play_collision::xpos#10
Self Phi Eliminated (byte*) play_collision::playfield_line#1
Self Phi Eliminated (byte*) current_piece_gfx#15
Self Phi Eliminated (byte) current_piece_char#11
Self Phi Eliminated (byte*) play_lock_current::playfield_line#1
Self Phi Eliminated (byte) play_lock_current::ypos2#3
Self Phi Eliminated (byte) play_lock_current::l#2
Self Phi Eliminated (byte) current_xpos#42
Self Phi Eliminated (byte) play_remove_lines::y#2
Self Phi Eliminated (byte) render_screen_show#18
Self Phi Eliminated (byte) render_screen_showing#12
Self Phi Eliminated (byte) keyboard_events_size#26
Self Phi Eliminated (byte) keyboard_modifiers#23
Self Phi Eliminated (byte) current_movedown_counter#14
Self Phi Eliminated (byte) current_ypos#36
Self Phi Eliminated (byte*) current_piece#27
Self Phi Eliminated (byte) current_orientation#37
Self Phi Eliminated (byte*) current_piece_gfx#32
Self Phi Eliminated (byte) current_xpos#44
Self Phi Eliminated (byte) current_piece_char#23
Self Phi Eliminated (byte) render_screen_render#18
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) current_piece_gfx#35 VOID
Redundant Phi (byte) current_xpos#100 VOID
Redundant Phi (byte) current_ypos#38 VOID
Redundant Phi (byte) current_piece_char#25 VOID
Redundant Phi (byte*) fill::addr#0 (byte*) fill::start#0
Redundant Phi (word) fill::size#1 (word) fill::size#0
Redundant Phi (byte) fill::val#2 (byte) fill::val#0
Redundant Phi (byte) fill::val#1 (byte) fill::val#2
Redundant Phi (byte*) fill::end#1 (byte*) fill::end#0
Redundant Phi (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Redundant Phi (byte) keyboard_events_size#54 (byte) keyboard_events_size#26
Redundant Phi (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Redundant Phi (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Redundant Phi (byte) keyboard_events_size#14 (byte) keyboard_events_size#17
Redundant Phi (byte*) render_init::line#2 (byte*) render_init::line#4
Redundant Phi (byte) render_init::l#2 (byte) render_init::l#4
Redundant Phi (byte) render_screen_show#10 (byte) render_screen_show#18
Redundant Phi (byte) render_screen_show#11 (byte) render_screen_show#10
Redundant Phi (byte) render_screen_showing#6 (byte) render_screen_showing#1
Redundant Phi (byte) render_screen_render#10 (byte) render_screen_render#18
Redundant Phi (byte) render_screen_show#12 (byte) render_screen_show#18
Redundant Phi (byte) render_screen_original::SPACE#1 (byte) render_screen_original::SPACE#3
Redundant Phi (byte*) render_screen_original::orig#3 (byte*) render_screen_original::orig#5
Redundant Phi (byte) render_screen_original::y#7 (byte) render_screen_original::y#8
Redundant Phi (byte) render_screen_original::SPACE#4 (byte) render_screen_original::SPACE#1
Redundant Phi (byte) render_screen_original::y#4 (byte) render_screen_original::y#7
Redundant Phi (byte) render_screen_original::SPACE#2 (byte) render_screen_original::SPACE#4
Redundant Phi (byte) render_screen_original::y#2 (byte) render_screen_original::y#4
Redundant Phi (byte*) render_screen_original::orig#7 (byte*) render_screen_original::orig#1
Redundant Phi (byte) render_playfield::l#3 (byte) render_playfield::l#2
Redundant Phi (byte) render_screen_render#20 (byte) render_screen_render#12
Redundant Phi (byte*) current_piece_gfx#11 (byte*) current_piece_gfx#22
Redundant Phi (byte) render_current::ypos2#10 (byte) render_current::ypos2#2
Redundant Phi (byte) render_current::l#10 (byte) render_current::l#4
Redundant Phi (byte) current_piece_char#17 (byte) current_piece_char#38
Redundant Phi (byte*) render_current::screen_line#1 (byte*) render_current::screen_line#0
Redundant Phi (byte) render_screen_render#36 (byte) render_screen_render#13
Redundant Phi (byte) current_xpos#68 (byte) current_xpos#12
Redundant Phi (byte) irq_raster_next#23 (byte) irq_raster_next#0
Redundant Phi (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#0
Redundant Phi (byte) irq_raster_next#22 (byte) irq_raster_next#23
Redundant Phi (byte) toSpritePtr1_return#3 (byte) toSpritePtr1_return#1
Redundant Phi (byte) irq_raster_next#21 (byte) irq_raster_next#22
Redundant Phi (byte) irq_sprite_ypos#4 (byte) irq_sprite_ypos#0
Redundant Phi (byte) irq_sprite_ptr#10 (byte) irq_sprite_ptr#15
Redundant Phi (byte) render_screen_showing#15 (byte) render_screen_showing#0
Redundant Phi (byte) irq_cnt#15 (byte) irq_cnt#0
Redundant Phi (byte) irq_raster_next#17 (byte) irq_raster_next#18
Redundant Phi (byte) irq_sprite_ypos#11 (byte) irq_sprite_ypos#4
Redundant Phi (byte) irq_sprite_ptr#11 (byte) irq_sprite_ptr#10
Redundant Phi (byte) render_screen_showing#11 (byte) render_screen_showing#15
Redundant Phi (byte) irq_cnt#12 (byte) irq_cnt#15
Redundant Phi (byte) irq_raster_next#10 (byte) irq_raster_next#17
Redundant Phi (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#0
Redundant Phi (byte) sprites_irq::toSpritePtr2_return#3 (byte) sprites_irq::toSpritePtr2_return#1
Redundant Phi (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#0
Redundant Phi (byte) irq_raster_next#20 (byte) irq_raster_next#21
Redundant Phi (byte) current_movedown_counter#7 (byte) current_movedown_counter#14
Redundant Phi (byte) play_move_down::key_event#1 (byte) play_move_down::key_event#0
Redundant Phi (byte) current_ypos#10 (byte) current_ypos#36
Redundant Phi (byte) current_xpos#13 (byte) current_xpos#44
Redundant Phi (byte) current_orientation#12 (byte) current_orientation#37
Redundant Phi (byte*) current_piece#18 (byte*) current_piece#27
Redundant Phi (byte*) current_piece_gfx#24 (byte*) current_piece_gfx#32
Redundant Phi (byte) current_piece_char#18 (byte) current_piece_char#23
Redundant Phi (byte*) current_piece#1 (byte*) current_piece#13
Redundant Phi (byte) current_orientation#1 (byte) current_orientation#20
Redundant Phi (byte*) current_piece_gfx#0 (byte*) current_piece_gfx#16
Redundant Phi (byte) current_xpos#0 (byte) current_xpos#23
Redundant Phi (byte) current_ypos#1 (byte) current_ypos#18
Redundant Phi (byte) current_piece_char#0 (byte) current_piece_char#12
Redundant Phi (byte) play_move_leftright::key_event#1 (byte) play_move_leftright::key_event#0
Redundant Phi (byte) current_xpos#16 (byte) current_xpos#25
Redundant Phi (byte) current_ypos#14 (byte) current_ypos#20
Redundant Phi (byte) current_orientation#15 (byte) current_orientation#22
Redundant Phi (byte*) current_piece#23 (byte*) current_piece#15
Redundant Phi (byte) play_move_rotate::key_event#1 (byte) play_move_rotate::key_event#0
Redundant Phi (byte) current_orientation#17 (byte) current_orientation#22
Redundant Phi (byte) current_xpos#21 (byte) current_xpos#26
Redundant Phi (byte) current_ypos#16 (byte) current_ypos#20
Redundant Phi (byte*) current_piece#11 (byte*) current_piece#15
Redundant Phi (byte*) current_piece_gfx#27 (byte*) current_piece_gfx#18
Redundant Phi (byte) irq_sprite_ptr#16 (byte) irq_sprite_ptr#17
Redundant Phi (byte) irq_raster_next#19 (byte) irq_raster_next#20
Redundant Phi (byte*) play_collision::piece_gfx#1 (byte*) play_collision::piece_gfx#2
Redundant Phi (byte) play_collision::ypos2#10 (byte) play_collision::ypos2#2
Redundant Phi (byte) play_collision::l#10 (byte) play_collision::l#6
Redundant Phi (byte) play_collision::xpos#10 (byte) play_collision::col#0
Redundant Phi (byte*) play_collision::playfield_line#1 (byte*) play_collision::playfield_line#0
Redundant Phi (byte) current_ypos#17 (byte) current_ypos#10
Redundant Phi (byte) current_xpos#41 (byte) current_xpos#13
Redundant Phi (byte*) current_piece_gfx#44 (byte*) current_piece_gfx#24
Redundant Phi (byte) current_piece_char#45 (byte) current_piece_char#18
Redundant Phi (byte*) current_piece_gfx#15 (byte*) current_piece_gfx#29
Redundant Phi (byte) current_piece_char#11 (byte) current_piece_char#30
Redundant Phi (byte*) play_lock_current::playfield_line#1 (byte*) play_lock_current::playfield_line#0
Redundant Phi (byte) play_lock_current::ypos2#3 (byte) play_lock_current::ypos2#2
Redundant Phi (byte) play_lock_current::l#2 (byte) play_lock_current::l#6
Redundant Phi (byte) current_xpos#42 (byte) current_xpos#22
Redundant Phi (byte) play_remove_lines::y#2 (byte) play_remove_lines::y#8
Redundant Phi (byte) render_screen_show#22 (byte) render_screen_show#0
Redundant Phi (byte) render_screen_render#22 (byte) render_screen_render#0
Redundant Phi (byte*) current_piece#26 (byte*) current_piece#0
Redundant Phi (byte) current_orientation#36 (byte) current_orientation#0
Redundant Phi (byte*) current_piece_gfx#31 (byte*) current_piece_gfx#35
Redundant Phi (byte) current_xpos#43 (byte) current_xpos#100
Redundant Phi (byte) current_ypos#35 (byte) current_ypos#38
Redundant Phi (byte) current_piece_char#22 (byte) current_piece_char#25
Redundant Phi (byte) render_screen_showing#16 (byte) render_screen_showing#0
Redundant Phi (byte) keyboard_events_size#32 (byte) keyboard_events_size#0
Redundant Phi (byte) keyboard_modifiers#29 (byte) keyboard_modifiers#0
Redundant Phi (byte) current_movedown_counter#23 (byte) current_movedown_counter#0
Redundant Phi (byte) render_screen_show#14 (byte) render_screen_show#1
Redundant Phi (byte) render_screen_render#14 (byte) render_screen_render#1
Redundant Phi (byte*) current_piece#14 (byte*) current_piece#13
Redundant Phi (byte) current_orientation#21 (byte) current_orientation#20
Redundant Phi (byte*) current_piece_gfx#17 (byte*) current_piece_gfx#16
Redundant Phi (byte) current_xpos#24 (byte) current_xpos#23
Redundant Phi (byte) current_ypos#19 (byte) current_ypos#18
Redundant Phi (byte) current_piece_char#13 (byte) current_piece_char#12
Redundant Phi (byte) render_screen_show#18 (byte) render_screen_show#16
Redundant Phi (byte) render_screen_showing#12 (byte) render_screen_showing#13
Redundant Phi (byte) keyboard_events_size#26 (byte) keyboard_events_size#19
Redundant Phi (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#16
Redundant Phi (byte) current_movedown_counter#14 (byte) current_movedown_counter#12
Redundant Phi (byte) current_ypos#36 (byte) current_ypos#21
Redundant Phi (byte*) current_piece#27 (byte*) current_piece#16
Redundant Phi (byte) current_orientation#37 (byte) current_orientation#10
Redundant Phi (byte*) current_piece_gfx#32 (byte*) current_piece_gfx#20
Redundant Phi (byte) current_xpos#44 (byte) current_xpos#10
Redundant Phi (byte) current_piece_char#23 (byte) current_piece_char#15
Redundant Phi (byte) render_screen_render#18 (byte) render_screen_render#16
Redundant Phi (byte) render_screen_showing#17 (byte) render_screen_showing#2
Redundant Phi (byte) keyboard_events_size#17 (byte) keyboard_events_size#13
Redundant Phi (byte) keyboard_modifiers#15 (byte) keyboard_modifiers#14
Redundant Phi (byte) keyboard_events_size#18 (byte) keyboard_events_size#16
Redundant Phi (byte) current_movedown_counter#11 (byte) current_movedown_counter#10
Redundant Phi (byte) current_ypos#20 (byte) current_ypos#13
Redundant Phi (byte*) current_piece#15 (byte*) current_piece#10
Redundant Phi (byte) current_orientation#22 (byte) current_orientation#14
Redundant Phi (byte*) current_piece_gfx#18 (byte*) current_piece_gfx#1
Redundant Phi (byte) current_xpos#25 (byte) current_xpos#1
Redundant Phi (byte) current_piece_char#14 (byte) current_piece_char#1
Redundant Phi (byte) current_xpos#26 (byte) current_xpos#19
Redundant Phi (byte) current_orientation#23 (byte) current_orientation#19
Redundant Phi (byte*) current_piece_gfx#19 (byte*) current_piece_gfx#14
Redundant Phi (byte) render_screen_render#15 (byte) render_screen_render#11
Redundant Phi (byte) render_screen_show#15 (byte) render_screen_show#13
Redundant Phi (byte) irq_sprite_ptr#15 (byte) irq_sprite_ptr#16
Redundant Phi (byte) irq_raster_next#18 (byte) irq_raster_next#19
Redundant Phi (byte) render_screen_show#17 (byte) render_screen_show#16
Redundant Phi (byte) render_screen_render#17 (byte) render_screen_render#16
Redundant Phi (byte*) current_piece#17 (byte*) current_piece#16
Redundant Phi (byte) current_orientation#11 (byte) current_orientation#10
Redundant Phi (byte*) current_piece_gfx#10 (byte*) current_piece_gfx#20
Redundant Phi (byte) current_xpos#11 (byte) current_xpos#10
Redundant Phi (byte) current_ypos#22 (byte) current_ypos#21
Redundant Phi (byte) current_piece_char#16 (byte) current_piece_char#15
Redundant Phi (byte) render_screen_showing#10 (byte) render_screen_showing#13
Redundant Phi (byte) keyboard_events_size#20 (byte) keyboard_events_size#19
Redundant Phi (byte) keyboard_modifiers#17 (byte) keyboard_modifiers#16
Redundant Phi (byte) current_movedown_counter#13 (byte) current_movedown_counter#12
Successful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Redundant Phi (byte) render_current::ypos2#4 (byte) render_current::ypos2#2
Redundant Phi (byte) render_current::l#2 (byte) render_current::l#4
Redundant Phi (byte) render_screen_render#29 (byte) render_screen_render#13
Redundant Phi (byte) current_xpos#48 (byte) current_xpos#12
Redundant Phi (byte*) current_piece_gfx#54 (byte*) current_piece_gfx#22
Redundant Phi (byte) current_piece_char#64 (byte) current_piece_char#38
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) fill::$1 if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
Simple Condition (bool~) keyboard_event_scan::$1 if((byte) keyboard_event_scan::row_scan#0!=*((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$13 if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$6 if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
Simple Condition (bool~) keyboard_event_scan::$12 if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@4
Simple Condition (bool~) keyboard_event_scan::$8 if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@6
Simple Condition (bool~) keyboard_event_scan::$10 if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
Simple Condition (bool~) keyboard_event_scan::$16 if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
Simple Condition (bool~) keyboard_event_scan::$20 if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
Simple Condition (bool~) keyboard_event_scan::$24 if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$28 if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_get::$0 if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@1
Simple Condition (bool~) render_init::$13 if((byte) render_init::c#1!=rangelast(0,render_init::$11)) goto render_init::@2
Simple Condition (bool~) render_init::$14 if((byte) render_init::l#1!=rangelast(2,render_init::$10)) goto render_init::@1
Simple Condition (bool~) render_init::$24 if((byte) render_init::i#1!=rangelast(0,render_init::$21)) goto render_init::@3
Simple Condition (bool~) render_show::$0 if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::@1
Simple Condition (bool~) render_screen_original::$2 if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2
Simple Condition (bool~) render_screen_original::$8 if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3
Simple Condition (bool~) render_screen_original::$9 if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5
Simple Condition (bool~) render_screen_original::$10 if((byte) render_screen_original::y#1!=rangelast(0,24)) goto render_screen_original::@1
Simple Condition (bool~) render_playfield::$5 if((byte) render_playfield::c#1!=rangelast(0,render_playfield::$4)) goto render_playfield::@2
Simple Condition (bool~) render_playfield::$6 if((byte) render_playfield::l#1!=rangelast(2,render_playfield::$1)) goto render_playfield::@1
Simple Condition (bool~) render_current::$11 if((byte) render_current::l#1!=rangelast(0,3)) goto render_current::@1
Simple Condition (bool~) render_current::$7 if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5
Simple Condition (bool~) render_current::$10 if((byte) render_current::c#1!=rangelast(0,3)) goto render_current::@4
Simple Condition (bool~) render_current::$9 if((byte) render_current::xpos#2>=(byte) PLAYFIELD_COLS#0) goto render_current::@6
Simple Condition (bool~) sprites_init::$4 if((byte) sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1
Simple Condition (bool~) sprites_irq::$0 if(*((byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1
Simple Condition (bool~) sprites_irq::$1 if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2
Simple Condition (bool~) sprites_irq::$2 if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4
Simple Condition (bool~) sprites_irq::$6 if((byte~) sprites_irq::$4!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto sprites_irq::@6
Simple Condition (bool~) play_move_down::$1 if((byte) play_move_down::key_event#0!=(byte) KEY_SPACE#0) goto play_move_down::@1
Simple Condition (bool~) play_move_down::$4 if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$8 if((byte) current_movedown_counter#1<(byte) current_movedown_slow#0) goto play_move_down::@4
Simple Condition (bool~) play_move_down::$6 if((byte) current_movedown_counter#1<(byte) current_movedown_fast#0) goto play_move_down::@3
Simple Condition (bool~) play_move_down::$10 if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@5
Simple Condition (bool~) play_move_down::$13 if((byte~) play_move_down::$12==(byte) COLLISION_NONE#0) goto play_move_down::@6
Simple Condition (bool~) play_move_leftright::$0 if((byte) play_move_leftright::key_event#0==(byte) KEY_COMMA#0) goto play_move_leftright::@1
Simple Condition (bool~) play_move_leftright::$10 if((byte~) play_move_leftright::$8!=(byte) COLLISION_NONE#0) goto play_move_leftright::@5
Simple Condition (bool~) play_move_leftright::$2 if((byte) play_move_leftright::key_event#0!=(byte) KEY_DOT#0) goto play_move_leftright::@2
Simple Condition (bool~) play_move_leftright::$6 if((byte~) play_move_leftright::$4!=(byte) COLLISION_NONE#0) goto play_move_leftright::@3
Simple Condition (bool~) play_move_rotate::$0 if((byte) play_move_rotate::key_event#0==(byte) KEY_Z#0) goto play_move_rotate::@1
Simple Condition (bool~) play_move_rotate::$1 if((byte) play_move_rotate::key_event#0==(byte) KEY_X#0) goto play_move_rotate::@2
Simple Condition (bool~) play_move_rotate::$8 if((byte~) play_move_rotate::$6!=(byte) COLLISION_NONE#0) goto play_move_rotate::@5
Simple Condition (bool~) play_collision::$3 if(*((byte*) play_collision::piece_gfx#2 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
Simple Condition (bool~) play_collision::$14 if((byte) play_collision::c#1!=rangelast(0,3)) goto play_collision::@2
Simple Condition (bool~) play_collision::$6 if((byte) play_collision::ypos2#2<(byte/signed word/word/dword/signed dword~) play_collision::$4) goto play_collision::@4
Simple Condition (bool~) play_collision::$9 if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5
Simple Condition (bool~) play_collision::$11 if((byte) play_collision::col#2<(byte) PLAYFIELD_COLS#0) goto play_collision::@6
Simple Condition (bool~) play_collision::$13 if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@7
Simple Condition (bool~) play_collision::$15 if((byte) play_collision::l#1!=rangelast(0,3)) goto play_collision::@1
Simple Condition (bool~) play_lock_current::$2 if(*((byte*) current_piece_gfx#29 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3
Simple Condition (bool~) play_lock_current::$3 if((byte) play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2
Simple Condition (bool~) play_lock_current::$4 if((byte) play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1
Simple Condition (bool~) play_spawn_current::$0 if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2
Simple Condition (bool~) play_remove_lines::$7 if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@3
Simple Condition (bool~) play_remove_lines::$8 if((byte) play_remove_lines::x#1!=rangelast(0,play_remove_lines::$5)) goto play_remove_lines::@2
Simple Condition (bool~) play_remove_lines::$10 if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4
Simple Condition (bool~) play_remove_lines::$12 if((byte) play_remove_lines::y#1!=rangelast(0,play_remove_lines::$4)) goto play_remove_lines::@1
Simple Condition (bool~) play_remove_lines::$13 if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6
Simple Condition (bool~) play_init::$2 if((byte) play_init::j#1!=rangelast(0,play_init::$0)) goto play_init::@1
Simple Condition (bool~) main::$8 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@5
Simple Condition (bool~) main::$16 if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@7
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() (bool~) render_screen_original::$7 ← ! (bool~) render_screen_original::$6
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting && if()-condition to two if()s (bool~) render_screen_original::$6 ← (bool~) render_screen_original::$4 && (bool~) render_screen_original::$5
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting && if()-condition to two if()s (bool~) render_current::$4 ← (bool~) render_current::$1 && (bool~) render_current::$3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_ALL#0 = 48
Constant (const byte) PROCPORT_RAM_IO#0 = 53
Constant (const byte) PROCPORT_RAM_CHARROM#0 = 49
Constant (const byte) PROCPORT_KERNEL_IO#0 = 54
Constant (const byte) PROCPORT_BASIC_KERNEL_IO#0 = 55
Constant (const byte*) CHARGEN#0 = ((byte*))53248
Constant (const word) SPRITE_PTRS#0 = 1016
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))53264
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) SPRITES_EXPAND_Y#0 = ((byte*))53271
Constant (const byte*) SPRITES_PRIORITY#0 = ((byte*))53275
Constant (const byte*) SPRITES_MC#0 = ((byte*))53276
Constant (const byte*) SPRITES_EXPAND_X#0 = ((byte*))53277
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte*) BGCOL1#0 = ((byte*))53281
Constant (const byte*) BGCOL2#0 = ((byte*))53282
Constant (const byte*) BGCOL3#0 = ((byte*))53283
Constant (const byte*) BGCOL4#0 = ((byte*))53284
Constant (const byte*) SPRITES_MC1#0 = ((byte*))53285
Constant (const byte*) SPRITES_MC2#0 = ((byte*))53286
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte*) VIC_CONTROL#0 = ((byte*))53265
Constant (const byte*) D011#0 = ((byte*))53265
Constant (const byte) VIC_RST8#0 = 128
Constant (const byte) VIC_ECM#0 = 64
Constant (const byte) VIC_BMM#0 = 32
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))53270
Constant (const byte*) D016#0 = ((byte*))53270
Constant (const byte) VIC_MCM#0 = 16
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) D018#0 = ((byte*))53272
Constant (const byte*) VIC_MEMORY#0 = ((byte*))53272
Constant (const byte*) LIGHTPEN_X#0 = ((byte*))53267
Constant (const byte*) LIGHTPEN_Y#0 = ((byte*))53268
Constant (const byte*) IRQ_STATUS#0 = ((byte*))53273
Constant (const byte*) IRQ_ENABLE#0 = ((byte*))53274
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte) IRQ_COLLISION_BG#0 = 2
Constant (const byte) IRQ_COLLISION_SPRITE#0 = 4
Constant (const byte) IRQ_LIGHTPEN#0 = 8
Constant (const byte*) COLS#0 = ((byte*))55296
Constant (const byte*) CIA1_PORT_A#0 = ((byte*))56320
Constant (const byte*) CIA1_PORT_B#0 = ((byte*))56321
Constant (const byte*) CIA1_PORT_A_DDR#0 = ((byte*))56322
Constant (const byte*) CIA1_PORT_B_DDR#0 = ((byte*))56323
Constant (const byte*) CIA1_INTERRUPT#0 = ((byte*))56333
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = 127
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_B#0 = ((byte*))56577
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte*) CIA2_PORT_B_DDR#0 = ((byte*))56579
Constant (const byte*) CIA2_INTERRUPT#0 = ((byte*))56589
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))788
Constant (const void()**) HARDWARE_IRQ#0 = ((void()**))65534
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) YELLOW#0 = 7
Constant (const byte) ORANGE#0 = 8
Constant (const byte) BROWN#0 = 9
Constant (const byte) PINK#0 = 10
Constant (const byte) DARK_GREY#0 = 11
Constant (const byte) GREY#0 = 12
Constant (const byte) LIGHT_GREEN#0 = 13
Constant (const byte) LIGHT_BLUE#0 = 14
Constant (const byte) LIGHT_GREY#0 = 15
Constant (const byte) KEY_DEL#0 = 0
Constant (const byte) KEY_RETURN#0 = 1
Constant (const byte) KEY_CRSR_RIGHT#0 = 2
Constant (const byte) KEY_F7#0 = 3
Constant (const byte) KEY_F1#0 = 4
Constant (const byte) KEY_F3#0 = 5
Constant (const byte) KEY_F5#0 = 6
Constant (const byte) KEY_CRSR_DOWN#0 = 7
Constant (const byte) KEY_3#0 = 8
Constant (const byte) KEY_W#0 = 9
Constant (const byte) KEY_A#0 = 10
Constant (const byte) KEY_4#0 = 11
Constant (const byte) KEY_Z#0 = 12
Constant (const byte) KEY_S#0 = 13
Constant (const byte) KEY_E#0 = 14
Constant (const byte) KEY_LSHIFT#0 = 15
Constant (const byte) KEY_5#0 = 16
Constant (const byte) KEY_R#0 = 17
Constant (const byte) KEY_D#0 = 18
Constant (const byte) KEY_6#0 = 19
Constant (const byte) KEY_C#0 = 20
Constant (const byte) KEY_F#0 = 21
Constant (const byte) KEY_T#0 = 22
Constant (const byte) KEY_X#0 = 23
Constant (const byte) KEY_7#0 = 24
Constant (const byte) KEY_Y#0 = 25
Constant (const byte) KEY_G#0 = 26
Constant (const byte) KEY_8#0 = 27
Constant (const byte) KEY_B#0 = 28
Constant (const byte) KEY_H#0 = 29
Constant (const byte) KEY_U#0 = 30
Constant (const byte) KEY_V#0 = 31
Constant (const byte) KEY_9#0 = 32
Constant (const byte) KEY_I#0 = 33
Constant (const byte) KEY_J#0 = 34
Constant (const byte) KEY_0#0 = 35
Constant (const byte) KEY_M#0 = 36
Constant (const byte) KEY_K#0 = 37
Constant (const byte) KEY_O#0 = 38
Constant (const byte) KEY_N#0 = 39
Constant (const byte) KEY_PLUS#0 = 40
Constant (const byte) KEY_P#0 = 41
Constant (const byte) KEY_L#0 = 42
Constant (const byte) KEY_MINUS#0 = 43
Constant (const byte) KEY_DOT#0 = 44
Constant (const byte) KEY_COLON#0 = 45
Constant (const byte) KEY_AT#0 = 46
Constant (const byte) KEY_COMMA#0 = 47
Constant (const byte) KEY_POUND#0 = 48
Constant (const byte) KEY_ASTERISK#0 = 49
Constant (const byte) KEY_SEMICOLON#0 = 50
Constant (const byte) KEY_HOME#0 = 51
Constant (const byte) KEY_RSHIFT#0 = 52
Constant (const byte) KEY_EQUALS#0 = 53
Constant (const byte) KEY_ARROW_UP#0 = 54
Constant (const byte) KEY_SLASH#0 = 55
Constant (const byte) KEY_1#0 = 56
Constant (const byte) KEY_ARROW_LEFT#0 = 57
Constant (const byte) KEY_CTRL#0 = 58
Constant (const byte) KEY_2#0 = 59
Constant (const byte) KEY_SPACE#0 = 60
Constant (const byte) KEY_COMMODORE#0 = 61
Constant (const byte) KEY_Q#0 = 62
Constant (const byte) KEY_RUNSTOP#0 = 63
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { 254, 253, 251, 247, 239, 223, 191, 127 }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, 16, 32, 64, 128 }
Constant (const byte[8]) keyboard_events#0 = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT#0 = 1
Constant (const byte) KEY_MODIFIER_RSHIFT#0 = 2
Constant (const byte) KEY_MODIFIER_CTRL#0 = 4
Constant (const byte) KEY_MODIFIER_COMMODORE#0 = 8
Constant (const byte[8]) keyboard_scan_values#0 = { fill( 8, 0) }
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_get::return#0 = 255
Constant (const word*) SID_VOICE3_FREQ#0 = ((word*))54286
Constant (const byte*) SID_VOICE3_FREQ_LOW#0 = ((byte*))54286
Constant (const byte*) SID_VOICE3_FREQ_HIGH#0 = ((byte*))54287
Constant (const byte*) SID_VOICE3_CONTROL#0 = ((byte*))54290
Constant (const byte) SID_CONTROL_NOISE#0 = 128
Constant (const byte) SID_CONTROL_PULSE#0 = 64
Constant (const byte) SID_CONTROL_SAWTOOTH#0 = 32
Constant (const byte) SID_CONTROL_TRIANGLE#0 = 16
Constant (const byte) SID_CONTROL_TEST#0 = 8
Constant (const byte) SID_CONTROL_RING#0 = 4
Constant (const byte) SID_CONTROL_SYNC#0 = 2
Constant (const byte) SID_CONTROL_GATE#0 = 1
Constant (const byte*) SID_VOICE3_OSC#0 = ((byte*))54299
Constant (const byte*) PLAYFIELD_SCREEN_1#0 = ((byte*))1024
Constant (const byte*) PLAYFIELD_SCREEN_2#0 = ((byte*))11264
Constant (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0 = ((byte*))6144
Constant (const byte*) PLAYFIELD_SPRITES#0 = ((byte*))8192
Constant (const byte*) PLAYFIELD_CHARSET#0 = ((byte*))10240
Constant (const byte) PLAYFIELD_LINES#0 = 22
Constant (const byte) PLAYFIELD_COLS#0 = 10
Constant (const byte) render_screen_render#0 = 64
Constant (const byte) render_screen_show#0 = 0
Constant (const byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH#0 = 32
Constant (const word) fill::size#0 = 1000
Constant (const byte/word/signed word/dword/signed dword) render_init::$7 = 4*40
Constant (const byte) render_init::l#0 = 2
Constant (const byte) render_init::c#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) render_init::$15 = 2*40
Constant (const byte/signed byte/word/signed word/dword/signed dword) render_init::$18 = 2*40
Constant (const byte) render_init::i#0 = 0
Constant (const byte) render_screen_show#1 = 0
Constant (const byte) render_screen_render#1 = 64
Constant (const byte) render_show::d018val#0 = 0
Constant (const byte) render_screen_original::SPACE#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) render_screen_original::$0 = 32*2
Constant (const byte) render_screen_original::y#0 = 0
Constant (const byte) render_screen_original::x#0 = 0
Constant (const byte) render_playfield::l#0 = 2
Constant (const byte) render_playfield::c#0 = 0
Constant (const byte) render_current::i#0 = 0
Constant (const byte) render_current::l#0 = 0
Constant (const byte) render_current::c#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) sprites_init::$0 = 15*8
Constant (const byte) sprites_init::s#0 = 0
Constant (const byte) IRQ_RASTER_FIRST#0 = 49
Constant (const void()*) sprites_irq_init::$0 = &sprites_irq
Constant (const byte/signed byte/word/signed word/dword/signed dword) $5 = 4*4
Constant (const byte[$6]) PIECE_T#0 = { 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $7 = 4*4
Constant (const byte[$8]) PIECE_S#0 = { 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $9 = 4*4
Constant (const byte[$10]) PIECE_Z#0 = { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $11 = 4*4
Constant (const byte[$12]) PIECE_L#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $13 = 4*4
Constant (const byte[$14]) PIECE_J#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $15 = 4*4
Constant (const byte[$16]) PIECE_O#0 = { 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte/signed byte/word/signed word/dword/signed dword) $17 = 4*4
Constant (const byte[$18]) PIECE_I#0 = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 }
Constant (const byte[]) PIECES_CHARS#0 = { 88, 89, 153, 89, 88, 88, 153 }
Constant (const byte[]) PIECES_START_X#0 = { 4, 4, 4, 4, 4, 3, 4 }
Constant (const byte[]) PIECES_START_Y#0 = { 2, 1, 1, 1, 2, 0, 1 }
Constant (const byte*) current_piece#0 = ((byte*))0
Constant (const byte) current_orientation#0 = 0
Constant (const byte) current_movedown_slow#0 = 50
Constant (const byte) current_movedown_fast#0 = 5
Constant (const byte) current_movedown_counter#0 = 0
Constant (const byte) play_move_down::movedown#0 = 0
Constant (const byte) play_move_down::return#0 = 0
Constant (const byte) current_movedown_counter#2 = 0
Constant (const byte) play_move_down::return#1 = 1
Constant (const byte) play_move_leftright::return#0 = 1
Constant (const byte) play_move_leftright::return#2 = 0
Constant (const byte) play_move_leftright::return#3 = 1
Constant (const byte) play_move_rotate::orientation#0 = 128
Constant (const byte) play_move_rotate::return#0 = 0
Constant (const byte) play_move_rotate::return#2 = 0
Constant (const byte) play_move_rotate::return#3 = 1
Constant (const byte) COLLISION_NONE#0 = 0
Constant (const byte) COLLISION_PLAYFIELD#0 = 1
Constant (const byte) COLLISION_BOTTOM#0 = 2
Constant (const byte) COLLISION_LEFT#0 = 4
Constant (const byte) COLLISION_RIGHT#0 = 8
Constant (const byte) play_collision::i#0 = 0
Constant (const byte) play_collision::l#0 = 0
Constant (const byte) play_collision::c#0 = 0
Constant (const byte) play_lock_current::i#0 = 0
Constant (const byte) play_lock_current::l#0 = 0
Constant (const byte) play_lock_current::c#0 = 0
Constant (const byte) play_spawn_current::piece_idx#0 = 7
Constant (const byte) current_orientation#20 = 0
Constant (const byte) play_remove_lines::y#0 = 0
Constant (const byte) play_remove_lines::full#0 = 1
Constant (const byte) play_remove_lines::x#0 = 0
Constant (const byte) play_remove_lines::full#1 = 0
Constant (const byte) play_init::idx#0 = 0
Constant (const byte) play_init::j#0 = 0
Constant (const byte) main::render#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) keyboard_char_keycodes#0 = { KEY_AT#0, KEY_A#0, KEY_B#0, KEY_C#0, KEY_D#0, KEY_E#0, KEY_F#0, KEY_G#0, KEY_H#0, KEY_I#0, KEY_J#0, KEY_K#0, KEY_L#0, KEY_M#0, KEY_N#0, KEY_O#0, KEY_P#0, KEY_Q#0, KEY_R#0, KEY_S#0, KEY_T#0, KEY_U#0, KEY_V#0, KEY_W#0, KEY_X#0, KEY_Y#0, KEY_Z#0, 63, KEY_POUND#0, 63, KEY_ARROW_UP#0, KEY_ARROW_LEFT#0, KEY_SPACE#0, 63, 63, 63, 63, 63, 63, 63, 63, 63, KEY_ASTERISK#0, KEY_PLUS#0, KEY_COMMA#0, KEY_MINUS#0, KEY_DOT#0, KEY_SLASH#0, KEY_0#0, KEY_1#0, KEY_2#0, KEY_3#0, KEY_4#0, KEY_5#0, KEY_6#0, KEY_7#0, KEY_8#0, KEY_9#0, KEY_COLON#0, KEY_SEMICOLON#0, 63, KEY_EQUALS#0, 63, 63 }
Constant (const byte) KEY_MODIFIER_SHIFT#0 = KEY_MODIFIER_LSHIFT#0|KEY_MODIFIER_RSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT#0
Constant (const byte) keyboard_modifiers#2 = keyboard_modifiers#1|KEY_MODIFIER_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL#0
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE#0
Constant (const byte*) PLAYFIELD_SPRITE_PTRS_1#0 = PLAYFIELD_SCREEN_1#0+SPRITE_PTRS#0
Constant (const byte*) PLAYFIELD_SPRITE_PTRS_2#0 = PLAYFIELD_SCREEN_2#0+SPRITE_PTRS#0
Constant (const byte) $3 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte*) render_init::vicSelectGfxBank1_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte) render_init::$1 = VIC_ECM#0|VIC_DEN#0
Constant (const byte*) render_screen_original::screen#0 = PLAYFIELD_SCREEN_1#0
Constant (const byte*) render_screen_original::screen#1 = PLAYFIELD_SCREEN_2#0
Constant (const byte*) fill::start#0 = COLS#0
Constant (const byte) fill::val#0 = DARK_GREY#0
Constant (const byte*) render_init::$8 = COLS#0+render_init::$7
Constant (const byte/signed word/word/dword/signed dword) render_init::$10 = PLAYFIELD_LINES#0-1
Constant (const byte/signed word/word/dword/signed dword) render_init::$11 = PLAYFIELD_COLS#0-1
Constant (const byte*) render_init::$16 = PLAYFIELD_SCREEN_1#0+render_init::$15
Constant (const byte*) render_init::$19 = PLAYFIELD_SCREEN_2#0+render_init::$18
Constant (const byte/signed word/word/dword/signed dword) render_init::$21 = PLAYFIELD_LINES#0-1
Constant (const byte*) render_show::toD0181_screen#0 = PLAYFIELD_SCREEN_1#0
Constant (const byte*) render_show::toD0181_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte*) render_show::toD0182_screen#0 = PLAYFIELD_SCREEN_2#0
Constant (const byte*) render_show::toD0182_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte*) render_screen_original::orig#0 = PLAYFIELD_SCREEN_ORIGINAL#0+render_screen_original::$0
Constant (const byte) render_playfield::i#0 = PLAYFIELD_COLS#0*2
Constant (const byte/signed word/word/dword/signed dword) render_playfield::$1 = PLAYFIELD_LINES#0-1
Constant (const byte/signed word/word/dword/signed dword) render_playfield::$4 = PLAYFIELD_COLS#0-1
Constant (const byte/signed word/word/dword/signed dword) render_current::$2 = 2*PLAYFIELD_LINES#0
Constant (const byte) sprites_init::xpos#0 = 24+sprites_init::$0
Constant (const word) toSpritePtr1_$0#0 = ((word))PLAYFIELD_SPRITES#0
Constant (const byte*) sprites_irq::toSpritePtr2_sprite#0 = PLAYFIELD_SPRITES#0
Constant (const byte/signed word/word/dword/signed dword/signed byte) $6 = $5*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $8 = $7*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $10 = $9*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $12 = $11*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $14 = $13*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $16 = $15*4
Constant (const byte/signed word/word/dword/signed dword/signed byte) $18 = $17*4
Constant (const word) $19 = ((word))PIECE_T#0
Constant (const word) $20 = ((word))PIECE_S#0
Constant (const word) $21 = ((word))PIECE_Z#0
Constant (const word) $22 = ((word))PIECE_J#0
Constant (const word) $23 = ((word))PIECE_O#0
Constant (const word) $24 = ((word))PIECE_I#0
Constant (const word) $25 = ((word))PIECE_L#0
Constant (const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte/signed word/word/dword/signed dword) $26 = PLAYFIELD_LINES#0+1
Constant (const byte) keyboard_event_pressed::keycode#4 = KEY_SPACE#0
Constant (const byte) play_move_down::movedown#1 = ++play_move_down::movedown#0
Constant (const byte/signed word/word/dword/signed dword) play_collision::$4 = 2*PLAYFIELD_LINES#0
Constant (const byte) play_collision::return#4 = COLLISION_BOTTOM#0
Constant (const byte) play_collision::return#6 = COLLISION_LEFT#0
Constant (const byte) play_collision::return#7 = COLLISION_RIGHT#0
Constant (const byte) play_collision::return#8 = COLLISION_PLAYFIELD#0
Constant (const byte) play_collision::return#9 = COLLISION_NONE#0
Constant (const byte) play_remove_lines::$0 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte) play_remove_lines::$2 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte/signed word/word/dword/signed dword) play_remove_lines::$4 = PLAYFIELD_LINES#0-1
Constant (const byte/signed word/word/dword/signed dword) play_remove_lines::$5 = PLAYFIELD_COLS#0-1
Constant (const byte/signed word/word/dword/signed dword) play_init::$0 = PLAYFIELD_LINES#0-1
Constant (const byte) play_init::$3 = PLAYFIELD_COLS#0*PLAYFIELD_LINES#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) fill::end#0 = fill::start#0+fill::size#0
Constant (const byte[$3]) playfield#0 = { fill( $3, 0) }
Constant (const word) render_init::vicSelectGfxBank1_toDd001_$0#0 = ((word))render_init::vicSelectGfxBank1_gfx#0
Constant (const byte) render_init::$2 = render_init::$1|VIC_RSEL#0
Constant (const byte*) render_init::line#0 = render_init::$8+16
Constant (const byte*) render_init::li_1#0 = render_init::$16+16
Constant (const byte*) render_init::li_2#0 = render_init::$19+16
Constant (const word) render_show::toD0181_$0#0 = ((word))render_show::toD0181_screen#0
Constant (const word) render_show::toD0181_$4#0 = ((word))render_show::toD0181_gfx#0
Constant (const word) render_show::toD0182_$0#0 = ((word))render_show::toD0182_screen#0
Constant (const word) render_show::toD0182_$4#0 = ((word))render_show::toD0182_gfx#0
Constant (const word) toSpritePtr1_$1#0 = toSpritePtr1_$0#0>>6
Constant (const word) sprites_irq::toSpritePtr2_$0#0 = ((word))sprites_irq::toSpritePtr2_sprite#0
Constant (const word[]) PIECES#0 = { $19, $20, $21, $22, $23, $24, $25 }
Constant (const byte[$26]) playfield_lines_idx#0 = { fill( $26, 0) }
Constant (const byte) play_remove_lines::r#0 = play_remove_lines::$0-1
Constant (const byte) play_remove_lines::w#0 = play_remove_lines::$2-1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$1#0 = >render_init::vicSelectGfxBank1_toDd001_$0#0
Constant (const byte/word/dword) render_init::$3 = render_init::$2|3
Constant (const word) render_show::toD0181_$1#0 = render_show::toD0181_$0#0&16383
Constant (const byte) render_show::toD0181_$5#0 = >render_show::toD0181_$4#0
Constant (const word) render_show::toD0182_$1#0 = render_show::toD0182_$0#0&16383
Constant (const byte) render_show::toD0182_$5#0 = >render_show::toD0182_$4#0
Constant (const byte) toSpritePtr1_$2#0 = ((byte))toSpritePtr1_$1#0
Constant (const word) sprites_irq::toSpritePtr2_$1#0 = sprites_irq::toSpritePtr2_$0#0>>6
Constant (const byte*) play_init::pli#0 = playfield#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$2#0 = render_init::vicSelectGfxBank1_toDd001_$1#0>>6
Constant (const word) render_show::toD0181_$2#0 = render_show::toD0181_$1#0<<2
Constant (const byte) render_show::toD0181_$6#0 = render_show::toD0181_$5#0>>2
Constant (const word) render_show::toD0182_$2#0 = render_show::toD0182_$1#0<<2
Constant (const byte) render_show::toD0182_$6#0 = render_show::toD0182_$5#0>>2
Constant (const byte) toSpritePtr1_return#0 = toSpritePtr1_$2#0
Constant (const byte) sprites_irq::toSpritePtr2_$2#0 = ((byte))sprites_irq::toSpritePtr2_$1#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 = 3^render_init::vicSelectGfxBank1_toDd001_$2#0
Constant (const byte) render_show::toD0181_$3#0 = >render_show::toD0181_$2#0
Constant (const byte) render_show::toD0181_$7#0 = render_show::toD0181_$6#0&15
Constant (const byte) render_show::toD0182_$3#0 = >render_show::toD0182_$2#0
Constant (const byte) render_show::toD0182_$7#0 = render_show::toD0182_$6#0&15
Constant (const byte) toSpritePtr1_return#1 = toSpritePtr1_return#0
Constant (const byte) sprites_irq::toSpritePtr2_return#0 = sprites_irq::toSpritePtr2_$2#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) render_show::toD0181_return#0 = render_show::toD0181_$3#0|render_show::toD0181_$7#0
Constant (const byte) render_show::toD0182_return#0 = render_show::toD0182_$3#0|render_show::toD0182_$7#0
Constant (const byte) $4 = toSpritePtr1_return#1
Constant (const byte) sprites_irq::toSpritePtr2_return#1 = sprites_irq::toSpritePtr2_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::$3 = sprites_irq::toSpritePtr2_return#1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(SPRITES_YPOS#0+0)
Consolidated array index constant in *(SPRITES_YPOS#0+2)
Consolidated array index constant in *(SPRITES_YPOS#0+4)
Consolidated array index constant in *(SPRITES_YPOS#0+6)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+0)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+3)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+0)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+3)
Consolidated array index constant in *(playfield_lines_idx#0+PLAYFIELD_LINES#0)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (byte*) current_piece#13 ← ((byte*)) *((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@4 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value render_init::c#1 ← ++ render_init::c#2 to ++
Resolved ranged comparison value if(render_init::c#1!=rangelast(0,render_init::$11)) goto render_init::@2 to (const byte/signed word/word/dword/signed dword) render_init::$11+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_init::l#1 ← ++ render_init::l#4 to ++
Resolved ranged comparison value if(render_init::l#1!=rangelast(2,render_init::$10)) goto render_init::@1 to (const byte/signed word/word/dword/signed dword) render_init::$10+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_init::i#1 ← ++ render_init::i#2 to ++
Resolved ranged comparison value if(render_init::i#1!=rangelast(0,render_init::$21)) goto render_init::@3 to (const byte/signed word/word/dword/signed dword) render_init::$21+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_screen_original::y#1 ← ++ render_screen_original::y#8 to ++
Resolved ranged comparison value if(render_screen_original::y#1!=rangelast(0,24)) goto render_screen_original::@1 to (byte/signed byte/word/signed word/dword/signed dword) 25
Resolved ranged next value render_playfield::c#1 ← ++ render_playfield::c#2 to ++
Resolved ranged comparison value if(render_playfield::c#1!=rangelast(0,render_playfield::$4)) goto render_playfield::@2 to (const byte/signed word/word/dword/signed dword) render_playfield::$4+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_playfield::l#1 ← ++ render_playfield::l#2 to ++
Resolved ranged comparison value if(render_playfield::l#1!=rangelast(2,render_playfield::$1)) goto render_playfield::@1 to (const byte/signed word/word/dword/signed dword) render_playfield::$1+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value render_current::l#1 ← ++ render_current::l#4 to ++
Resolved ranged comparison value if(render_current::l#1!=rangelast(0,3)) goto render_current::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value render_current::c#1 ← ++ render_current::c#2 to ++
Resolved ranged comparison value if(render_current::c#1!=rangelast(0,3)) goto render_current::@4 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value sprites_init::s#1 ← ++ sprites_init::s#2 to ++
Resolved ranged comparison value if(sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value play_collision::c#1 ← ++ play_collision::c#2 to ++
Resolved ranged comparison value if(play_collision::c#1!=rangelast(0,3)) goto play_collision::@2 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value play_collision::l#1 ← ++ play_collision::l#6 to ++
Resolved ranged comparison value if(play_collision::l#1!=rangelast(0,3)) goto play_collision::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value play_lock_current::c#1 ← ++ play_lock_current::c#2 to ++
Resolved ranged comparison value if(play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value play_lock_current::l#1 ← ++ play_lock_current::l#6 to ++
Resolved ranged comparison value if(play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1 to (byte/signed byte/word/signed word/dword/signed dword) 4
Resolved ranged next value play_remove_lines::x#1 ← ++ play_remove_lines::x#2 to ++
Resolved ranged comparison value if(play_remove_lines::x#1!=rangelast(0,play_remove_lines::$5)) goto play_remove_lines::@2 to (const byte/signed word/word/dword/signed dword) play_remove_lines::$5+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value play_remove_lines::y#1 ← ++ play_remove_lines::y#8 to ++
Resolved ranged comparison value if(play_remove_lines::y#1!=rangelast(0,play_remove_lines::$4)) goto play_remove_lines::@1 to (const byte/signed word/word/dword/signed dword) play_remove_lines::$4+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value play_init::j#1 ← ++ play_init::j#2 to ++
Resolved ranged comparison value if(play_init::j#1!=rangelast(0,play_init::$0)) goto play_init::@1 to (const byte/signed word/word/dword/signed dword) play_init::$0+(byte/signed byte/word/signed word/dword/signed dword) 1
Culled Empty Block (label) @5
Culled Empty Block (label) @9
Culled Empty Block (label) keyboard_event_scan::@2
Culled Empty Block (label) keyboard_event_scan::@6
Culled Empty Block (label) keyboard_event_scan::@12
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) @12
Culled Empty Block (label) render_init::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) render_init::@10
Culled Empty Block (label) render_init::@5
Culled Empty Block (label) render_init::@6
Culled Empty Block (label) render_show::@1
Culled Empty Block (label) render_show::toD0181_@return
Culled Empty Block (label) render_show::@5
Culled Empty Block (label) render_show::@3
Culled Empty Block (label) render_show::toD0182_@return
Culled Empty Block (label) render_show::@6
Culled Empty Block (label) render_current::@6
Culled Empty Block (label) toSpritePtr1_@return
Culled Empty Block (label) sprites_irq::toSpritePtr2_@return
Culled Empty Block (label) @23
Culled Empty Block (label) play_move_down::@3
Culled Empty Block (label) play_move_down::@5
Culled Empty Block (label) play_move_down::@21
Culled Empty Block (label) play_move_leftright::@2
Culled Empty Block (label) play_move_leftright::@3
Culled Empty Block (label) play_move_leftright::@4
Culled Empty Block (label) play_move_leftright::@5
Culled Empty Block (label) play_move_rotate::@7
Culled Empty Block (label) play_move_rotate::@5
Culled Empty Block (label) @26
Culled Empty Block (label) play_collision::@9
Culled Empty Block (label) play_collision::@11
Culled Empty Block (label) play_collision::@13
Culled Empty Block (label) play_collision::@7
Culled Empty Block (label) play_collision::@15
Culled Empty Block (label) play_collision::@18
Culled Empty Block (label) main::@22
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@31
Culled Empty Block (label) @34
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) render_screen_showing#1 = (byte) render_screen_showing#2 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) render_screen_original::SPACE#3
Self Phi Eliminated (byte) render_screen_render#12
Self Phi Eliminated (byte) render_screen_render#13
Self Phi Eliminated (byte) current_xpos#12
Self Phi Eliminated (byte*) current_piece_gfx#22
Self Phi Eliminated (byte) current_piece_char#38
Self Phi Eliminated (byte) play_collision::col#0
Self Phi Eliminated (byte*) play_collision::piece_gfx#2
Self Phi Eliminated (byte) current_xpos#22
Self Phi Eliminated (byte*) current_piece_gfx#29
Self Phi Eliminated (byte) current_piece_char#30
Self Phi Eliminated (byte) render_screen_show#16
Self Phi Eliminated (byte) render_screen_render#16
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) render_screen_original::SPACE#3 (const byte) render_screen_original::SPACE#0
Redundant Phi (byte) render_screen_render#12 (byte) render_screen_render#19
Redundant Phi (byte) render_screen_render#13 (byte) render_screen_render#28
Redundant Phi (byte) current_xpos#12 (byte) current_xpos#47
Redundant Phi (byte*) current_piece_gfx#22 (byte*) current_piece_gfx#53
Redundant Phi (byte) current_piece_char#38 (byte) current_piece_char#63
Redundant Phi (byte) play_collision::col#0 (byte) play_collision::xpos#5
Redundant Phi (byte*) play_collision::piece_gfx#2 (byte*) play_collision::piece_gfx#0
Redundant Phi (byte) current_xpos#22 (byte) current_xpos#10
Redundant Phi (byte*) current_piece_gfx#29 (byte*) current_piece_gfx#20
Redundant Phi (byte) current_piece_char#30 (byte) current_piece_char#15
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) render_screen_original::$4 if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11
Simple Condition (bool~) render_current::$1 if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13
Simple Condition (bool~) render_screen_original::$5 if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7
Simple Condition (bool~) render_current::$3 if((byte) render_current::ypos2#2<(const byte/signed word/word/dword/signed dword) render_current::$2) goto render_current::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#4
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) render_init::l#0
Inlining constant with var siblings (const byte) render_init::c#0
Inlining constant with var siblings (const byte) render_init::i#0
Inlining constant with var siblings (const byte*) render_init::line#0
Inlining constant with var siblings (const byte*) render_init::li_1#0
Inlining constant with var siblings (const byte*) render_init::li_2#0
Inlining constant with var siblings (const byte) render_screen_original::y#0
Inlining constant with var siblings (const byte) render_screen_original::x#0
Inlining constant with var siblings (const byte*) render_screen_original::screen#0
Inlining constant with var siblings (const byte*) render_screen_original::screen#1
Inlining constant with var siblings (const byte*) render_screen_original::orig#0
Inlining constant with var siblings (const byte) render_playfield::l#0
Inlining constant with var siblings (const byte) render_playfield::c#0
Inlining constant with var siblings (const byte) render_playfield::i#0
Inlining constant with var siblings (const byte) render_current::i#0
Inlining constant with var siblings (const byte) render_current::l#0
Inlining constant with var siblings (const byte) render_current::c#0
Inlining constant with var siblings (const byte) sprites_init::s#0
Inlining constant with var siblings (const byte) sprites_init::xpos#0
Inlining constant with different constant siblings (const byte) sprites_irq::toSpritePtr2_return#1
Inlining constant with var siblings (const byte) play_move_down::movedown#0
Inlining constant with var siblings (const byte) play_move_down::return#0
Inlining constant with var siblings (const byte) play_move_down::return#1
Inlining constant with var siblings (const byte) play_move_down::movedown#1
Inlining constant with var siblings (const byte) play_move_leftright::return#0
Inlining constant with var siblings (const byte) play_move_leftright::return#2
Inlining constant with var siblings (const byte) play_move_leftright::return#3
Inlining constant with var siblings (const byte) play_move_rotate::return#0
Inlining constant with var siblings (const byte) play_move_rotate::return#2
Inlining constant with var siblings (const byte) play_move_rotate::return#3
Inlining constant with var siblings (const byte) play_collision::i#0
Inlining constant with var siblings (const byte) play_collision::l#0
Inlining constant with var siblings (const byte) play_collision::c#0
Inlining constant with var siblings (const byte) play_collision::return#4
Inlining constant with var siblings (const byte) play_collision::return#6
Inlining constant with var siblings (const byte) play_collision::return#7
Inlining constant with var siblings (const byte) play_collision::return#8
Inlining constant with var siblings (const byte) play_collision::return#9
Inlining constant with var siblings (const byte) play_lock_current::i#0
Inlining constant with var siblings (const byte) play_lock_current::l#0
Inlining constant with var siblings (const byte) play_lock_current::c#0
Inlining constant with var siblings (const byte) play_spawn_current::piece_idx#0
Inlining constant with var siblings (const byte) play_remove_lines::y#0
Inlining constant with var siblings (const byte) play_remove_lines::full#0
Inlining constant with var siblings (const byte) play_remove_lines::x#0
Inlining constant with var siblings (const byte) play_remove_lines::full#1
Inlining constant with var siblings (const byte) play_remove_lines::r#0
Inlining constant with var siblings (const byte) play_remove_lines::w#0
Inlining constant with var siblings (const byte) play_init::idx#0
Inlining constant with var siblings (const byte) play_init::j#0
Inlining constant with var siblings (const byte*) play_init::pli#0
Inlining constant with var siblings (const byte) main::render#0
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const byte) keyboard_modifiers#1
Inlining constant with var siblings (const byte) render_screen_show#1
Inlining constant with var siblings (const byte) render_screen_render#1
Inlining constant with var siblings (const byte) current_movedown_counter#0
Inlining constant with var siblings (const byte) current_movedown_counter#2
Inlining constant with var siblings (const byte) current_orientation#20
Inlining constant with var siblings (const byte) keyboard_modifiers#2
Inlining constant with different constant siblings (const byte) toSpritePtr1_return#1
Constant inlined play_remove_lines::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_move_rotate::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_move_rotate::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::$21 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_show::toD0181_$7#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined play_init::pli#0 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0
Constant inlined play_move_rotate::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_current::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_movedown_counter#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined current_movedown_counter#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_screen_original::screen#1 = (const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined fill::start#0 = (const byte*) COLS#0
Constant inlined render_screen_original::screen#0 = (const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined render_screen_original::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_show::toD0182_$7#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined render_playfield::i#0 = (const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined play_collision::$4 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0
Constant inlined render_init::$15 = (byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined render_show::toD0182_$2#0 = ((word))(const byte*) PLAYFIELD_SCREEN_2#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_init::vicSelectGfxBank1_toDd001_$1#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_init::$11 = (const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_init::$10 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_remove_lines::$0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined play_remove_lines::$2 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined play_collision::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_remove_lines::$4 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_screen_original::$0 = (byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined sprites_irq::toSpritePtr2_$0#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0
Constant inlined toSpritePtr1_$1#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined render_show::toD0182_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_show::toD0181_$3#0 = >((word))(const byte*) PLAYFIELD_SCREEN_1#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_init::$19 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined render_init::$18 = (byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined render_init::$16 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined play_lock_current::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_remove_lines::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::$7 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined render_init::$8 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined $10 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $11 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $12 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined keyboard_event_scan::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_current::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::$3 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined $13 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined sprites_irq::$3 = (const byte) sprites_irq::toSpritePtr2_return#0
Constant inlined $14 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_init::$1 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0
Constant inlined $15 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_init::$2 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined $16 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $17 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $18 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $19 = ((word))(const byte[4*4*4]) PIECE_T#0
Constant inlined render_show::toD0181_screen#0 = (const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined render_playfield::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_show::toD0182_$6#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_screen_original::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $20 = ((word))(const byte[4*4*4]) PIECE_S#0
Constant inlined render_show::toD0182_$5#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined $21 = ((word))(const byte[4*4*4]) PIECE_Z#0
Constant inlined keyboard_event_pressed::keycode#4 = (const byte) KEY_SPACE#0
Constant inlined $22 = ((word))(const byte[4*4*4]) PIECE_J#0
Constant inlined render_init::vicSelectGfxBank1_toDd001_$2#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined $23 = ((word))(const byte[4*4*4]) PIECE_O#0
Constant inlined $24 = ((word))(const byte[4*4*4]) PIECE_I#0
Constant inlined render_show::toD0182_$1#0 = ((word))(const byte*) PLAYFIELD_SCREEN_2#0&(word/signed word/dword/signed dword) 16383
Constant inlined sprites_irq_init::$0 = &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Constant inlined $25 = ((word))(const byte[4*4*4]) PIECE_L#0
Constant inlined $26 = (const byte) PLAYFIELD_LINES#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined keyboard_event_pressed::keycode#3 = (const byte) KEY_COMMODORE#0
Constant inlined keyboard_event_pressed::keycode#2 = (const byte) KEY_CTRL#0
Constant inlined render_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined keyboard_event_pressed::keycode#1 = (const byte) KEY_RSHIFT#0
Constant inlined render_screen_original::orig#0 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined keyboard_event_pressed::keycode#0 = (const byte) KEY_LSHIFT#0
Constant inlined sprites_irq::toSpritePtr2_$1#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined play_collision::return#7 = (const byte) COLLISION_RIGHT#0
Constant inlined play_init::$3 = (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
Constant inlined play_collision::return#6 = (const byte) COLLISION_LEFT#0
Constant inlined render_current::$2 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0
Constant inlined play_collision::return#4 = (const byte) COLLISION_BOTTOM#0
Constant inlined play_move_down::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_move_down::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::vicSelectGfxBank1_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined play_collision::return#9 = (const byte) COLLISION_NONE#0
Constant inlined play_collision::return#8 = (const byte) COLLISION_PLAYFIELD#0
Constant inlined render_show::toD0181_$4#0 = ((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined toSpritePtr1_$0#0 = ((word))(const byte*) PLAYFIELD_SPRITES#0
Constant inlined toSpritePtr1_return#1 = (const byte) toSpritePtr1_return#0
Constant inlined render_show::toD0181_$0#0 = ((word))(const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined play_init::$0 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined keyboard_events_size#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_remove_lines::r#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined keyboard_modifiers#2 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0
Constant inlined render_show::toD0181_$5#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined keyboard_modifiers#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_screen_render#1 = (byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined sprites_init::xpos#0 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined $3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined play_lock_current::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $4 = (const byte) toSpritePtr1_return#0
Constant inlined render_init::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined $5 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $6 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_show::toD0181_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined $7 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $8 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined $9 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined render_playfield::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_spawn_current::piece_idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 7
Constant inlined play_remove_lines::full#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_remove_lines::full#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined sprites_init::s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_show::toD0182_$4#0 = ((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined play_move_leftright::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_show::toD0182_$0#0 = ((word))(const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined play_move_leftright::return#3 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined keyboard_event_scan::keycode#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::line#0 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16
Constant inlined play_collision::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sprites_irq::toSpritePtr2_$2#0 = (const byte) sprites_irq::toSpritePtr2_return#0
Constant inlined play_move_leftright::return#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_show::toD0181_$1#0 = ((word))(const byte*) PLAYFIELD_SCREEN_1#0&(word/signed word/dword/signed dword) 16383
Constant inlined sprites_init::$0 = (byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8
Constant inlined current_orientation#20 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_init::li_2#0 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16
Constant inlined fill::val#0 = (const byte) DARK_GREY#0
Constant inlined play_move_down::movedown#1 = ++(byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_move_down::movedown#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_current::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined play_remove_lines::w#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_init::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_show::toD0181_$6#0 = >((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined play_lock_current::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sprites_irq::toSpritePtr2_return#1 = (const byte) sprites_irq::toSpritePtr2_return#0
Constant inlined keyboard_event_scan::row#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_playfield::$1 = (const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined render_playfield::$4 = (const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_remove_lines::$5 = (const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined play_init::idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_show::toD0182_$3#0 = >((word))(const byte*) PLAYFIELD_SCREEN_2#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined render_init::vicSelectGfxBank1_toDd001_$0#0 = ((word))(const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_show::toD0182_screen#0 = (const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined render_init::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::render#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_screen_show#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sprites_irq::toSpritePtr2_sprite#0 = (const byte*) PLAYFIELD_SPRITES#0
Constant inlined play_collision::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined toSpritePtr1_$2#0 = (const byte) toSpritePtr1_return#0
Constant inlined render_show::toD0181_$2#0 = ((word))(const byte*) PLAYFIELD_SCREEN_1#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined keyboard_event_get::return#0 = (byte/word/signed word/dword/signed dword) 255
Constant inlined render_init::li_1#0 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero SPRITES_YPOS#0+0
Simplifying constant plus zero PLAYFIELD_SPRITE_PTRS_1#0+0
Simplifying constant plus zero PLAYFIELD_SPRITE_PTRS_2#0+0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Added new block during phi lifting main::@32(between main::@28 and main::@1)
Added new block during phi lifting render_current::@14(between render_current::@3 and render_current::@1)
Added new block during phi lifting render_current::@15(between render_current::@5 and render_current::@3)
Added new block during phi lifting render_current::@16(between render_current::@5 and render_current::@4)
Added new block during phi lifting render_playfield::@5(between render_playfield::@3 and render_playfield::@1)
Added new block during phi lifting render_playfield::@6(between render_playfield::@2 and render_playfield::@2)
Added new block during phi lifting play_move_rotate::@15(between play_move_rotate::@14 and play_move_rotate::@return)
Added new block during phi lifting play_move_rotate::@16(between play_move_rotate::@6 and play_move_rotate::@return)
Fixing phi predecessor for play_move_rotate::return#1 to new block ( play_move_rotate::@14 -> play_move_rotate::@15 ) during phi lifting.
Fixing phi predecessor for play_move_rotate::return#1 to new block ( play_move_rotate::@6 -> play_move_rotate::@16 ) during phi lifting.
Added new block during phi lifting play_collision::@20(between play_collision::@17 and play_collision::@1)
Added new block during phi lifting play_collision::@21(between play_collision::@3 and play_collision::@2)
Added new block during phi lifting play_move_leftright::@16(between play_move_leftright::@15 and play_move_leftright::@return)
Added new block during phi lifting play_move_leftright::@17(between play_move_leftright::@14 and play_move_leftright::@return)
Added new block during phi lifting play_move_leftright::@18(between play_move_leftright::@6 and play_move_leftright::@return)
Fixing phi predecessor for play_move_leftright::return#1 to new block ( play_move_leftright::@15 -> play_move_leftright::@16 ) during phi lifting.
Fixing phi predecessor for play_move_leftright::return#1 to new block ( play_move_leftright::@14 -> play_move_leftright::@17 ) during phi lifting.
Fixing phi predecessor for play_move_leftright::return#1 to new block ( play_move_leftright::@6 -> play_move_leftright::@18 ) during phi lifting.
Added new block during phi lifting play_move_down::@22(between play_move_down::@17 and play_move_down::@2)
Added new block during phi lifting play_move_down::@23(between play_move_down::@9 and play_move_down::@2)
Added new block during phi lifting play_move_down::@24(between play_move_down::@2 and play_move_down::@4)
Added new block during phi lifting play_move_down::@25(between play_move_down::@4 and play_move_down::@return)
Fixing phi predecessor for play_move_down::return#2 to new block ( play_move_down::@4 -> play_move_down::@25 ) during phi lifting.
Added new block during phi lifting play_remove_lines::@15(between play_remove_lines::@4 and play_remove_lines::@1)
Added new block during phi lifting play_remove_lines::@16(between play_remove_lines::@3 and play_remove_lines::@2)
Added new block during phi lifting play_remove_lines::@17(between play_remove_lines::@2 and play_remove_lines::@3)
Added new block during phi lifting play_remove_lines::@18(between play_remove_lines::@9 and play_remove_lines::@4)
Added new block during phi lifting play_remove_lines::@19(between play_remove_lines::@4 and play_remove_lines::@5)
Added new block during phi lifting play_lock_current::@7(between play_lock_current::@5 and play_lock_current::@1)
Added new block during phi lifting play_lock_current::@8(between play_lock_current::@3 and play_lock_current::@2)
Added new block during phi lifting keyboard_event_get::@7(between keyboard_event_get and keyboard_event_get::@return)
Fixing phi predecessor for keyboard_event_get::return#2 to new block ( keyboard_event_get -> keyboard_event_get::@7 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@3 and keyboard_event_scan::@1)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@27 and keyboard_event_scan::@10)
Added new block during phi lifting keyboard_event_scan::@32(between keyboard_event_scan::@28 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@33(between keyboard_event_scan::@5 and keyboard_event_scan::@4)
Added new block during phi lifting keyboard_event_scan::@34(between keyboard_event_scan::@25 and keyboard_event_scan::@4)
Fixing phi predecessor for keyboard_event_scan::col#2 to new block ( keyboard_event_scan::@25 -> keyboard_event_scan::@34 ) during phi lifting.
Added new block during phi lifting keyboard_event_scan::@35(between keyboard_event_scan::@4 and keyboard_event_scan::@5)
Added new block during phi lifting keyboard_event_scan::@36(between keyboard_event_scan::@15 and keyboard_event_scan::@5)
Added new block during phi lifting play_init::@3(between play_init::@1 and play_init::@1)
Added new block during phi lifting sprites_init::@3(between sprites_init::@1 and sprites_init::@1)
Added new block during phi lifting render_init::@11(between render_init::@4 and render_init::@1)
Added new block during phi lifting render_init::@12(between render_init::@2 and render_init::@2)
Added new block during phi lifting render_init::@13(between render_init::@3 and render_init::@3)
Added new block during phi lifting fill::@3(between fill::@1 and fill::@1)
Added new block during phi lifting render_screen_original::@12(between render_screen_original::@9 and render_screen_original::@1)
Added new block during phi lifting render_screen_original::@13(between render_screen_original::@2 and render_screen_original::@2)
Added new block during phi lifting render_screen_original::@14(between render_screen_original::@2 and render_screen_original::@3)
Added new block during phi lifting render_screen_original::@15(between render_screen_original::@4 and render_screen_original::@3)
Added new block during phi lifting render_screen_original::@16(between render_screen_original::@3 and render_screen_original::@4)
Added new block during phi lifting render_screen_original::@17(between render_screen_original::@4 and render_screen_original::@5)
Added new block during phi lifting render_screen_original::@18(between render_screen_original::@5 and render_screen_original::@5)
Added new block during phi lifting sprites_irq::@14(between sprites_irq::@5 and sprites_irq::@6)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @32
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@30
Adding NOP phi() at start of play_move_down::@8
Adding NOP phi() at start of play_move_down::@13
Adding NOP phi() at start of play_move_down::@19
Adding NOP phi() at start of play_move_down::@20
Adding NOP phi() at start of play_spawn_current
Adding NOP phi() at start of play_spawn_current::@2
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@8
Adding NOP phi() at start of keyboard_event_scan::@20
Adding NOP phi() at start of keyboard_event_scan::@21
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::@8
Adding NOP phi() at start of render_init::@9
Adding NOP phi() at start of fill
Adding NOP phi() at start of sprites_irq::toSpritePtr2
CALL GRAPH
Calls in [] to main:11 
Calls in [main] to sid_rnd_init:14 render_init:16 sprites_init:18 sprites_irq_init:20 play_init:22 play_spawn_current:24 render_playfield:26 render_current:31 render_show:40 keyboard_event_scan:42 keyboard_event_get:44 play_move_down:48 play_move_leftright:53 play_move_rotate:58 render_playfield:64 render_current:70 render_screen_swap:72 
Calls in [play_move_rotate] to play_collision:166 
Calls in [play_move_leftright] to play_collision:218 play_collision:235 
Calls in [play_move_down] to keyboard_event_pressed:246 play_collision:266 play_lock_current:271 play_remove_lines:273 play_spawn_current:275 
Calls in [play_spawn_current] to sid_rnd:317 
Calls in [keyboard_event_scan] to keyboard_matrix_read:401 keyboard_event_pressed:412 keyboard_event_pressed:418 keyboard_event_pressed:425 keyboard_event_pressed:432 
Calls in [render_init] to render_screen_original:531 render_screen_original:533 fill:535 

Created 121 initial phi equivalence classes
Not coalescing [27] current_ypos#84 ← current_ypos#18
Not coalescing [28] current_xpos#110 ← current_xpos#23
Not coalescing [29] current_piece_gfx#100 ← current_piece_gfx#16
Not coalescing [30] current_piece_char#88 ← current_piece_char#12
Coalesced [33] current_piece_gfx#97 ← current_piece_gfx#16
Coalesced [34] current_xpos#107 ← current_xpos#23
Coalesced [35] current_ypos#81 ← current_ypos#18
Coalesced [36] current_piece_char#85 ← current_piece_char#12
Not coalescing [63] render_screen_render#63 ← render_screen_render#16
Not coalescing [65] current_ypos#85 ← current_ypos#13
Not coalescing [66] render_screen_render#62 ← render_screen_render#16
Not coalescing [67] current_xpos#111 ← current_xpos#19
Not coalescing [68] current_piece_gfx#101 ← current_piece_gfx#14
Not coalescing [69] current_piece_char#89 ← current_piece_char#1
Coalesced [73] render_screen_show#57 ← render_screen_show#13
Coalesced [74] render_screen_render#61 ← render_screen_render#11
Coalesced [75] current_piece#72 ← current_piece#10
Coalesced [76] current_orientation#75 ← current_orientation#19
Coalesced [77] current_piece_gfx#98 ← current_piece_gfx#14
Coalesced [78] current_xpos#108 ← current_xpos#19
Coalesced [79] current_ypos#82 ← current_ypos#13
Coalesced [80] current_piece_char#86 ← current_piece_char#1
Coalesced [81] keyboard_events_size#79 ← keyboard_events_size#16
Coalesced [82] current_movedown_counter#48 ← current_movedown_counter#10
Coalesced (already) [83] current_piece#73 ← current_piece#10
Coalesced (already) [84] current_orientation#76 ← current_orientation#19
Coalesced (already) [85] current_piece_gfx#99 ← current_piece_gfx#14
Coalesced (already) [86] current_xpos#109 ← current_xpos#19
Coalesced (already) [87] current_ypos#83 ← current_ypos#13
Coalesced (already) [88] current_piece_char#87 ← current_piece_char#1
Coalesced (already) [89] keyboard_events_size#80 ← keyboard_events_size#16
Coalesced (already) [90] current_movedown_counter#49 ← current_movedown_counter#10
Coalesced [96] render_current::ypos2#11 ← render_current::ypos2#0
Coalesced [100] render_current::i#14 ← render_current::i#1
Coalesced [106] render_current::ypos2#12 ← render_current::ypos2#1
Coalesced [107] render_current::i#12 ← render_current::i#8
Coalesced [108] render_current::l#11 ← render_current::l#1
Coalesced [113] render_current::i#15 ← render_current::i#3
Coalesced [114] render_current::xpos#7 ← render_current::xpos#0
Coalesced [124] render_current::i#13 ← render_current::i#10
Coalesced (already) [125] render_current::i#16 ← render_current::i#10
Coalesced [126] render_current::xpos#8 ← render_current::xpos#1
Coalesced [127] render_current::c#7 ← render_current::c#1
Coalesced [133] render_playfield::i#6 ← render_playfield::i#3
Coalesced [134] render_playfield::screen_line#3 ← render_playfield::screen_line#0
Coalesced [144] render_playfield::l#5 ← render_playfield::l#1
Coalesced [145] render_playfield::i#5 ← render_playfield::i#1
Coalesced (already) [146] render_playfield::i#7 ← render_playfield::i#1
Coalesced [147] render_playfield::screen_line#4 ← render_playfield::screen_line#1
Coalesced [148] render_playfield::c#3 ← render_playfield::c#1
Coalesced [151] current_orientation#79 ← current_orientation#14
Coalesced [152] current_piece_gfx#104 ← current_piece_gfx#1
Coalesced [157] play_move_rotate::orientation#7 ← play_move_rotate::orientation#2
Not coalescing [162] current_piece#77 ← current_piece#10
Coalesced [163] play_collision::orientation#8 ← play_collision::orientation#3
Coalesced [164] play_collision::ypos#8 ← play_collision::ypos#3
Coalesced [165] play_collision::xpos#17 ← play_collision::xpos#3
Coalesced [172] current_orientation#77 ← current_orientation#4
Coalesced [173] current_piece_gfx#102 ← current_piece_gfx#3
Coalesced (already) [174] current_orientation#78 ← current_orientation#14
Coalesced (already) [175] current_piece_gfx#103 ← current_piece_gfx#1
Coalesced [178] play_move_rotate::orientation#6 ← play_move_rotate::orientation#1
Coalesced [182] play_collision::ypos2#11 ← play_collision::ypos2#0
Coalesced [185] play_collision::i#12 ← play_collision::i#3
Not coalescing [186] play_collision::col#9 ← play_collision::xpos#5
Coalesced [203] play_collision::ypos2#12 ← play_collision::ypos2#1
Not coalescing [204] play_collision::i#11 ← play_collision::i#1
Coalesced [205] play_collision::l#11 ← play_collision::l#1
Not coalescing [206] play_collision::i#13 ← play_collision::i#1
Coalesced [207] play_collision::col#10 ← play_collision::col#1
Coalesced [208] play_collision::c#9 ← play_collision::c#1
Not coalescing [214] current_piece#76 ← current_piece#10
Coalesced [215] play_collision::orientation#7 ← play_collision::orientation#2
Coalesced [216] play_collision::ypos#7 ← play_collision::ypos#2
Coalesced [217] play_collision::xpos#16 ← play_collision::xpos#2
Coalesced [223] current_xpos#114 ← current_xpos#2
Coalesced [226] current_xpos#113 ← current_xpos#1
Coalesced (already) [227] current_xpos#116 ← current_xpos#1
Not coalescing [231] current_piece#75 ← current_piece#10
Coalesced [232] play_collision::orientation#6 ← play_collision::orientation#1
Coalesced [233] play_collision::ypos#6 ← play_collision::ypos#1
Coalesced [234] play_collision::xpos#15 ← play_collision::xpos#1
Coalesced [240] current_xpos#112 ← current_xpos#4
Coalesced (already) [241] current_xpos#115 ← current_xpos#1
Coalesced [252] play_move_down::movedown#13 ← play_move_down::movedown#2
Coalesced [256] play_move_down::movedown#16 ← play_move_down::movedown#3
Not coalescing [262] current_piece#74 ← current_piece#16
Coalesced [263] play_collision::orientation#5 ← play_collision::orientation#0
Coalesced [264] play_collision::ypos#5 ← play_collision::ypos#0
Coalesced [265] play_collision::xpos#14 ← play_collision::xpos#0
Coalesced [276] current_ypos#86 ← current_ypos#18
Coalesced [278] current_piece_gfx#105 ← current_piece_gfx#16
Coalesced [279] current_xpos#117 ← current_xpos#23
Coalesced [280] current_piece_char#90 ← current_piece_char#12
Coalesced (already) [282] current_ypos#89 ← current_ypos#29
Coalesced [283] current_piece#81 ← current_piece#20
Coalesced [284] current_orientation#82 ← current_orientation#29
Coalesced (already) [285] current_piece_gfx#108 ← current_piece_gfx#26
Coalesced (already) [286] current_xpos#120 ← current_xpos#33
Coalesced (already) [287] current_piece_char#93 ← current_piece_char#20
Coalesced [291] current_ypos#87 ← current_ypos#0
Coalesced (already) [292] current_piece#79 ← current_piece#16
Coalesced (already) [293] current_orientation#80 ← current_orientation#10
Coalesced (already) [294] current_piece_gfx#106 ← current_piece_gfx#20
Coalesced (already) [295] current_xpos#118 ← current_xpos#10
Coalesced (already) [296] current_piece_char#91 ← current_piece_char#15
Coalesced [297] current_movedown_counter#50 ← current_movedown_counter#1
Coalesced (already) [298] current_ypos#88 ← current_ypos#21
Coalesced (already) [299] current_piece#80 ← current_piece#16
Coalesced (already) [300] current_orientation#81 ← current_orientation#10
Coalesced (already) [301] current_piece_gfx#107 ← current_piece_gfx#20
Coalesced (already) [302] current_xpos#119 ← current_xpos#10
Coalesced (already) [303] current_piece_char#92 ← current_piece_char#15
Coalesced [304] play_move_down::movedown#17 ← play_move_down::movedown#7
Coalesced [305] play_move_down::movedown#15 ← play_move_down::movedown#10
Coalesced (already) [306] play_move_down::movedown#14 ← play_move_down::movedown#10
Coalesced [321] play_spawn_current::piece_idx#4 ← play_spawn_current::piece_idx#1
Coalesced [326] play_remove_lines::r#10 ← play_remove_lines::r#3
Coalesced [327] play_remove_lines::w#14 ← play_remove_lines::w#12
Coalesced [340] play_remove_lines::w#16 ← play_remove_lines::w#2
Coalesced [344] play_remove_lines::w#18 ← play_remove_lines::w#11
Coalesced [350] play_remove_lines::w#19 ← play_remove_lines::w#3
Coalesced [351] play_remove_lines::r#9 ← play_remove_lines::r#1
Coalesced [352] play_remove_lines::w#13 ← play_remove_lines::w#11
Coalesced [353] play_remove_lines::y#9 ← play_remove_lines::y#1
Coalesced [354] play_remove_lines::w#17 ← play_remove_lines::w#1
Coalesced (already) [355] play_remove_lines::r#11 ← play_remove_lines::r#1
Coalesced (already) [356] play_remove_lines::w#15 ← play_remove_lines::w#1
Coalesced [357] play_remove_lines::x#5 ← play_remove_lines::x#1
Coalesced [358] play_remove_lines::full#5 ← play_remove_lines::full#2
Coalesced (already) [359] play_remove_lines::full#6 ← play_remove_lines::full#4
Coalesced [361] play_lock_current::ypos2#7 ← play_lock_current::ypos2#0
Coalesced [365] play_lock_current::i#8 ← play_lock_current::i#3
Coalesced [366] play_lock_current::col#5 ← play_lock_current::col#0
Coalesced [378] play_lock_current::ypos2#8 ← play_lock_current::ypos2#1
Not coalescing [379] play_lock_current::i#7 ← play_lock_current::i#1
Coalesced [380] play_lock_current::l#7 ← play_lock_current::l#1
Not coalescing [381] play_lock_current::i#9 ← play_lock_current::i#1
Coalesced [382] play_lock_current::col#6 ← play_lock_current::col#1
Coalesced [383] play_lock_current::c#5 ← play_lock_current::c#1
Coalesced [393] keyboard_event_get::return#6 ← keyboard_event_get::return#1
Coalesced [394] keyboard_events_size#82 ← keyboard_events_size#4
Coalesced [397] keyboard_events_size#81 ← keyboard_events_size#13
Coalesced [398] keyboard_events_size#83 ← keyboard_events_size#19
Coalesced [406] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [407] keyboard_events_size#85 ← keyboard_events_size#29
Coalesced [423] keyboard_modifiers#60 ← keyboard_modifiers#3
Coalesced [430] keyboard_modifiers#62 ← keyboard_modifiers#4
Coalesced [438] keyboard_modifiers#63 ← keyboard_modifiers#12
Coalesced [439] keyboard_modifiers#61 ← keyboard_modifiers#11
Coalesced [440] keyboard_event_scan::row#15 ← keyboard_event_scan::row#1
Coalesced [441] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced (already) [442] keyboard_events_size#84 ← keyboard_events_size#13
Coalesced [443] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [444] keyboard_events_size#87 ← keyboard_events_size#29
Coalesced [454] keyboard_events_size#89 ← keyboard_events_size#2
Coalesced [460] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#15
Coalesced [461] keyboard_events_size#86 ← keyboard_events_size#30
Coalesced [462] keyboard_event_scan::col#9 ← keyboard_event_scan::col#1
Coalesced (already) [463] keyboard_event_scan::keycode#20 ← keyboard_event_scan::keycode#15
Coalesced (already) [464] keyboard_events_size#88 ← keyboard_events_size#30
Coalesced [468] keyboard_events_size#92 ← keyboard_events_size#1
Coalesced (already) [469] keyboard_events_size#91 ← keyboard_events_size#10
Coalesced (already) [470] keyboard_events_size#90 ← keyboard_events_size#10
Coalesced [492] play_init::j#3 ← play_init::j#1
Coalesced [493] play_init::pli#3 ← play_init::pli#1
Coalesced [494] play_init::idx#3 ← play_init::idx#1
Coalesced [519] sprites_init::s#3 ← sprites_init::s#1
Coalesced [520] sprites_init::xpos#3 ← sprites_init::xpos#1
Coalesced [555] render_init::i#3 ← render_init::i#1
Coalesced [556] render_init::li_1#3 ← render_init::li_1#1
Coalesced [557] render_init::li_2#3 ← render_init::li_2#1
Coalesced [558] render_init::line#5 ← render_init::line#1
Coalesced [559] render_init::l#5 ← render_init::l#1
Coalesced [560] render_init::c#3 ← render_init::c#1
Coalesced [567] fill::addr#3 ← fill::addr#1
Coalesced [569] render_screen_original::screen#13 ← render_screen_original::screen#11
Coalesced [571] render_screen_original::screen#15 ← render_screen_original::screen#8
Coalesced [577] render_screen_original::orig#10 ← render_screen_original::orig#5
Coalesced [578] render_screen_original::x#10 ← render_screen_original::x#1
Coalesced [579] render_screen_original::screen#17 ← render_screen_original::screen#2
Coalesced [584] render_screen_original::c#4 ← render_screen_original::c#0
Coalesced [590] render_screen_original::screen#19 ← render_screen_original::screen#3
Coalesced [591] render_screen_original::x#12 ← render_screen_original::x#2
Coalesced [600] render_screen_original::screen#14 ← render_screen_original::screen#12
Coalesced [601] render_screen_original::orig#9 ← render_screen_original::orig#1
Coalesced [602] render_screen_original::y#9 ← render_screen_original::y#1
Coalesced [603] render_screen_original::screen#20 ← render_screen_original::screen#12
Coalesced [604] render_screen_original::x#13 ← render_screen_original::x#3
Coalesced (already) [605] render_screen_original::orig#11 ← render_screen_original::orig#1
Coalesced [606] render_screen_original::x#11 ← render_screen_original::x#2
Coalesced [607] render_screen_original::screen#18 ← render_screen_original::screen#3
Coalesced [610] render_screen_original::c#5 ← render_screen_original::c#1
Coalesced (already) [611] render_screen_original::screen#16 ← render_screen_original::screen#2
Coalesced [612] render_screen_original::x#9 ← render_screen_original::x#1
Coalesced [635] irq_raster_next#24 ← irq_raster_next#2
Coalesced [641] sprites_irq::raster_next#4 ← sprites_irq::raster_next#1
Coalesced [646] sprites_irq::raster_next#5 ← sprites_irq::raster_next#0
Coalesced [652] irq_raster_next#25 ← irq_raster_next#1
Coalesced down to 79 phi equivalence classes
Culled Empty Block (label) main::@32
Culled Empty Block (label) render_current::@14
Culled Empty Block (label) render_current::@15
Culled Empty Block (label) render_current::@16
Culled Empty Block (label) render_playfield::@5
Culled Empty Block (label) render_playfield::@6
Culled Empty Block (label) play_move_rotate::@16
Culled Empty Block (label) play_move_rotate::@15
Culled Empty Block (label) play_move_leftright::@16
Culled Empty Block (label) play_move_leftright::@18
Culled Empty Block (label) play_move_leftright::@17
Culled Empty Block (label) play_move_down::@25
Culled Empty Block (label) play_move_down::@24
Culled Empty Block (label) play_move_down::@23
Culled Empty Block (label) play_move_down::@22
Culled Empty Block (label) play_remove_lines::@8
Culled Empty Block (label) play_remove_lines::@19
Culled Empty Block (label) play_remove_lines::@15
Culled Empty Block (label) play_remove_lines::@18
Culled Empty Block (label) play_remove_lines::@16
Culled Empty Block (label) keyboard_event_get::@7
Culled Empty Block (label) keyboard_event_scan::@32
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@34
Culled Empty Block (label) keyboard_event_scan::@33
Culled Empty Block (label) keyboard_event_scan::@36
Culled Empty Block (label) keyboard_event_scan::@35
Culled Empty Block (label) play_init::@3
Culled Empty Block (label) sprites_init::@3
Culled Empty Block (label) render_init::@13
Culled Empty Block (label) render_init::@11
Culled Empty Block (label) render_init::@12
Culled Empty Block (label) fill::@3
Culled Empty Block (label) render_screen_original::@14
Culled Empty Block (label) render_screen_original::@16
Culled Empty Block (label) render_screen_original::@17
Culled Empty Block (label) render_screen_original::@12
Culled Empty Block (label) render_screen_original::@18
Culled Empty Block (label) render_screen_original::@15
Culled Empty Block (label) render_screen_original::@13
Culled Empty Block (label) sprites_irq::@14
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @32
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@30
Adding NOP phi() at start of play_move_down::@8
Adding NOP phi() at start of play_move_down::@13
Adding NOP phi() at start of play_move_down::@19
Adding NOP phi() at start of play_move_down::@20
Adding NOP phi() at start of play_spawn_current
Adding NOP phi() at start of play_spawn_current::@2
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@17
Adding NOP phi() at start of keyboard_event_scan
Adding NOP phi() at start of keyboard_event_scan::@20
Adding NOP phi() at start of keyboard_event_scan::@21
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::@8
Adding NOP phi() at start of render_init::@9
Adding NOP phi() at start of fill
Adding NOP phi() at start of sprites_irq::toSpritePtr2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@14
@14: scope:[]  from @begin
  [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"
 }}
  kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"
 }}
  to:@20
@20: scope:[]  from @14
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@21
@21: scope:[]  from @20
  [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @21
  [7] phi()
  to:@33
@33: scope:[]  from toSpritePtr1
  [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0
  [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@32
@32: scope:[]  from @33
  [10] phi()
  [11] call main 
  to:@end
@end: scope:[]  from @32
  [12] phi()
main: scope:[main]  from @32
  [13] phi()
  [14] call sid_rnd_init 
  to:main::@15
main::@15: scope:[main]  from main
  asm { sei  }
  [16] call render_init 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [17] phi()
  [18] call sprites_init 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [19] phi()
  [20] call sprites_irq_init 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [21] phi()
  [22] call play_init 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [23] phi()
  [24] call play_spawn_current 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [25] phi()
  [26] call render_playfield 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [27] (byte~) current_ypos#84 ← (byte) current_ypos#18
  [28] (byte~) current_xpos#110 ← (byte) current_xpos#23
  [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16
  [30] (byte~) current_piece_char#88 ← (byte) current_piece_char#12
  [31] call render_current 
  [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@28 main::@30
  [33] (byte) current_movedown_counter#12 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@30/(byte) current_movedown_counter#10 main::@28/(byte) current_movedown_counter#10 )
  [33] (byte) keyboard_events_size#19 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@30/(byte) keyboard_events_size#16 main::@28/(byte) keyboard_events_size#16 )
  [33] (byte) current_piece_char#15 ← phi( main::@21/(byte) current_piece_char#12 main::@30/(byte) current_piece_char#1 main::@28/(byte) current_piece_char#1 )
  [33] (byte) current_ypos#21 ← phi( main::@21/(byte) current_ypos#18 main::@30/(byte) current_ypos#13 main::@28/(byte) current_ypos#13 )
  [33] (byte) current_xpos#10 ← phi( main::@21/(byte) current_xpos#23 main::@30/(byte) current_xpos#19 main::@28/(byte) current_xpos#19 )
  [33] (byte*) current_piece_gfx#20 ← phi( main::@21/(byte*) current_piece_gfx#16 main::@30/(byte*) current_piece_gfx#14 main::@28/(byte*) current_piece_gfx#14 )
  [33] (byte) current_orientation#10 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@30/(byte) current_orientation#19 main::@28/(byte) current_orientation#19 )
  [33] (byte*) current_piece#16 ← phi( main::@21/(byte*~) current_piece#71 main::@30/(byte*) current_piece#10 main::@28/(byte*) current_piece#10 )
  [33] (byte) render_screen_render#16 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 64 main::@30/(byte) render_screen_render#11 )
  [33] (byte) render_screen_show#16 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@30/(byte) render_screen_show#13 )
  to:main::@4
main::@4: scope:[main]  from main::@1 main::@4
  [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  [35] phi()
  [36] call render_show 
  to:main::@23
main::@23: scope:[main]  from main::@6
  [37] phi()
  [38] call keyboard_event_scan 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [39] phi()
  [40] call keyboard_event_get 
  [41] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@25
main::@25: scope:[main]  from main::@24
  [42] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [43] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0
  [44] call play_move_down 
  [45] (byte) play_move_down::return#3 ← (byte) play_move_down::return#2
  to:main::@26
main::@26: scope:[main]  from main::@25
  [46] (byte~) main::$12 ← (byte) play_move_down::return#3
  [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12
  [48] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0
  [49] call play_move_leftright 
  [50] (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1
  to:main::@27
main::@27: scope:[main]  from main::@26
  [51] (byte~) main::$13 ← (byte) play_move_leftright::return#4
  [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13
  [53] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0
  [54] call play_move_rotate 
  [55] (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1
  to:main::@28
main::@28: scope:[main]  from main::@27
  [56] (byte~) main::$14 ← (byte) play_move_rotate::return#4
  [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14
  [58] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
  to:main::@13
main::@13: scope:[main]  from main::@28
  [59] (byte~) render_screen_render#63 ← (byte) render_screen_render#16
  [60] call render_playfield 
  to:main::@29
main::@29: scope:[main]  from main::@13
  [61] (byte~) current_ypos#85 ← (byte) current_ypos#13
  [62] (byte~) render_screen_render#62 ← (byte) render_screen_render#16
  [63] (byte~) current_xpos#111 ← (byte) current_xpos#19
  [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14
  [65] (byte~) current_piece_char#89 ← (byte) current_piece_char#1
  [66] call render_current 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [67] phi()
  [68] call render_screen_swap 
  to:main::@1
render_screen_swap: scope:[render_screen_swap]  from main::@30
  [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [71] return 
  to:@return
render_current: scope:[render_current]  from main::@21 main::@29
  [72] (byte) current_piece_char#63 ← phi( main::@21/(byte~) current_piece_char#88 main::@29/(byte~) current_piece_char#89 )
  [72] (byte*) current_piece_gfx#53 ← phi( main::@21/(byte*~) current_piece_gfx#100 main::@29/(byte*~) current_piece_gfx#101 )
  [72] (byte) current_xpos#47 ← phi( main::@21/(byte~) current_xpos#110 main::@29/(byte~) current_xpos#111 )
  [72] (byte) render_screen_render#28 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 64 main::@29/(byte~) render_screen_render#62 )
  [72] (byte) current_ypos#9 ← phi( main::@21/(byte~) current_ypos#84 main::@29/(byte~) current_ypos#85 )
  [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:render_current::@1
render_current::@1: scope:[render_current]  from render_current render_current::@3
  [74] (byte) render_current::l#4 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@3/(byte) render_current::l#1 )
  [74] (byte) render_current::i#3 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@3/(byte) render_current::i#8 )
  [74] (byte) render_current::ypos2#2 ← phi( render_current/(byte) render_current::ypos2#0 render_current::@3/(byte) render_current::ypos2#1 )
  [75] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13
  to:render_current::@7
render_current::@7: scope:[render_current]  from render_current::@1 render_current::@13
  [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4
  to:render_current::@3
render_current::@3: scope:[render_current]  from render_current::@5 render_current::@7
  [77] (byte) render_current::i#8 ← phi( render_current::@5/(byte) render_current::i#10 render_current::@7/(byte) render_current::i#1 )
  [78] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [79] (byte) render_current::l#1 ← ++ (byte) render_current::l#4
  [80] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1
  to:render_current::@return
render_current::@return: scope:[render_current]  from render_current::@3
  [81] return 
  to:@return
render_current::@13: scope:[render_current]  from render_current::@1
  [82] if((byte) render_current::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2
  to:render_current::@7
render_current::@2: scope:[render_current]  from render_current::@13
  [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2
  [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5)
  [85] (byte) render_current::xpos#0 ← (byte) current_xpos#47
  to:render_current::@4
render_current::@4: scope:[render_current]  from render_current::@2 render_current::@5
  [86] (byte) render_current::c#2 ← phi( render_current::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@5/(byte) render_current::c#1 )
  [86] (byte) render_current::xpos#2 ← phi( render_current::@2/(byte) render_current::xpos#0 render_current::@5/(byte) render_current::xpos#1 )
  [86] (byte) render_current::i#4 ← phi( render_current::@2/(byte) render_current::i#3 render_current::@5/(byte) render_current::i#10 )
  [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4)
  [88] (byte) render_current::i#10 ← ++ (byte) render_current::i#4
  [89] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5
  to:render_current::@9
render_current::@9: scope:[render_current]  from render_current::@4
  [90] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@5
  to:render_current::@10
render_current::@10: scope:[render_current]  from render_current::@9
  [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63
  to:render_current::@5
render_current::@5: scope:[render_current]  from render_current::@10 render_current::@4 render_current::@9
  [92] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2
  [93] (byte) render_current::c#1 ← ++ (byte) render_current::c#2
  [94] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@4
  to:render_current::@3
render_playfield: scope:[render_playfield]  from main::@13 main::@20
  [95] (byte) render_screen_render#19 ← phi( main::@13/(byte~) render_screen_render#63 main::@20/(byte/signed byte/word/signed word/dword/signed dword) 64 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [96] (byte) render_playfield::i#3 ← phi( render_playfield/(const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [96] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2
  [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [100] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [100] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [100] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [102] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [103] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [104] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [105] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [106] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [107] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [108] return 
  to:@return
play_move_rotate: scope:[play_move_rotate]  from main::@27
  [109] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  [110] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@14 play_move_rotate::@6
  [111] (byte*) current_piece_gfx#14 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#3 play_move_rotate::@14/(byte*) current_piece_gfx#1 play_move_rotate::@6/(byte*) current_piece_gfx#1 )
  [111] (byte) current_orientation#19 ← phi( play_move_rotate::@11/(byte) current_orientation#4 play_move_rotate::@14/(byte) current_orientation#14 play_move_rotate::@6/(byte) current_orientation#14 )
  [111] (byte) play_move_rotate::return#1 ← phi( play_move_rotate::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_rotate::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_rotate::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [112] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16
  [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [115] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [116] (byte) play_collision::xpos#3 ← (byte) current_xpos#19
  [117] (byte) play_collision::ypos#3 ← (byte) current_ypos#13
  [118] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [119] (byte*~) current_piece#77 ← (byte*) current_piece#10
  [120] call play_collision 
  [121] (byte) play_collision::return#13 ← (byte) play_collision::return#14
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  [122] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13
  [123] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@11
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  [124] (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#3
  [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16
  [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_collision: scope:[play_collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4
  [128] (byte) play_collision::xpos#5 ← phi( play_move_down::@12/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@7/(byte) play_collision::xpos#2 play_move_rotate::@4/(byte) play_collision::xpos#3 )
  [128] (byte) play_collision::ypos#4 ← phi( play_move_down::@12/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@7/(byte) play_collision::ypos#2 play_move_rotate::@4/(byte) play_collision::ypos#3 )
  [128] (byte) play_collision::orientation#4 ← phi( play_move_down::@12/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@7/(byte) play_collision::orientation#2 play_move_rotate::@4/(byte) play_collision::orientation#3 )
  [128] (byte*) current_piece#12 ← phi( play_move_down::@12/(byte*~) current_piece#74 play_move_leftright::@1/(byte*~) current_piece#75 play_move_leftright::@7/(byte*~) current_piece#76 play_move_rotate::@4/(byte*~) current_piece#77 )
  [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4
  [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@20
  [131] (byte) play_collision::l#6 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte) play_collision::l#1 )
  [131] (byte) play_collision::i#3 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte~) play_collision::i#11 )
  [131] (byte) play_collision::ypos2#2 ← phi( play_collision/(byte) play_collision::ypos2#0 play_collision::@20/(byte) play_collision::ypos2#1 )
  [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2)
  [133] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#5
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@21
  [134] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@21/(byte) play_collision::c#1 )
  [134] (byte) play_collision::col#2 ← phi( play_collision::@1/(byte~) play_collision::col#9 play_collision::@21/(byte) play_collision::col#1 )
  [134] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@21/(byte~) play_collision::i#13 )
  [135] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@2
  [137] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@17 play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@8
  [138] (byte) play_collision::return#14 ← phi( play_collision::@4/(const byte) COLLISION_LEFT#0 play_collision::@5/(const byte) COLLISION_RIGHT#0 play_collision::@6/(const byte) COLLISION_PLAYFIELD#0 play_collision::@17/(const byte) COLLISION_NONE#0 play_collision::@8/(const byte) COLLISION_BOTTOM#0 )
  [139] return 
  to:@return
play_collision::@4: scope:[play_collision]  from play_collision::@8
  [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128
  [141] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [142] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [144] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2
  [145] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [146] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21
  to:play_collision::@17
play_collision::@17: scope:[play_collision]  from play_collision::@3
  [147] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [148] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [149] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20
  to:play_collision::@return
play_collision::@20: scope:[play_collision]  from play_collision::@17
  [150] (byte~) play_collision::i#11 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@21: scope:[play_collision]  from play_collision::@3
  [151] (byte~) play_collision::i#13 ← (byte) play_collision::i#1
  to:play_collision::@2
play_move_leftright: scope:[play_move_leftright]  from main::@26
  [152] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  [153] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  [154] (byte) play_collision::xpos#2 ← (byte) current_xpos#1 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [155] (byte) play_collision::ypos#2 ← (byte) current_ypos#13
  [156] (byte) play_collision::orientation#2 ← (byte) current_orientation#14
  [157] (byte*~) current_piece#76 ← (byte*) current_piece#10
  [158] call play_collision 
  [159] (byte) play_collision::return#12 ← (byte) play_collision::return#14
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  [160] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12
  [161] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@8
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  [162] (byte) current_xpos#2 ← ++ (byte) current_xpos#1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 play_move_leftright::@8
  [163] (byte) current_xpos#19 ← phi( play_move_leftright::@11/(byte) current_xpos#4 play_move_leftright::@15/(byte) current_xpos#1 play_move_leftright::@8/(byte) current_xpos#2 play_move_leftright::@14/(byte) current_xpos#1 play_move_leftright::@6/(byte) current_xpos#1 )
  [163] (byte) play_move_leftright::return#1 ← phi( play_move_leftright::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [164] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [165] (byte) play_collision::xpos#1 ← (byte) current_xpos#1 - (byte/signed byte/word/signed word/dword/signed dword) 1
  [166] (byte) play_collision::ypos#1 ← (byte) current_ypos#13
  [167] (byte) play_collision::orientation#1 ← (byte) current_orientation#14
  [168] (byte*~) current_piece#75 ← (byte*) current_piece#10
  [169] call play_collision 
  [170] (byte) play_collision::return#1 ← (byte) play_collision::return#14
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  [171] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [172] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@11
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  [173] (byte) current_xpos#4 ← -- (byte) current_xpos#1
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from main::@25
  [174] (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#12
  [175] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down
  [176] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  [177] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [178] call keyboard_event_pressed 
  [179] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  [180] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [181] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  [182] if((byte) current_movedown_counter#1<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@10
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  [183] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@9
  [184] (byte) play_move_down::movedown#7 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@9/(byte) play_move_down::movedown#10 )
  [185] if((byte) current_movedown_counter#1<(const byte) current_movedown_slow#0) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  [186] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  [187] (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#7 )
  [188] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  [189] (byte) play_collision::ypos#0 ← (byte) current_ypos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [190] (byte) play_collision::xpos#0 ← (byte) current_xpos#10
  [191] (byte) play_collision::orientation#0 ← (byte) current_orientation#10
  [192] (byte*~) current_piece#74 ← (byte*) current_piece#16
  [193] call play_collision 
  [194] (byte) play_collision::return#0 ← (byte) play_collision::return#14
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  [195] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [196] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  [197] phi()
  [198] call play_lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  [199] phi()
  [200] call play_remove_lines 
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  [201] phi()
  [202] call play_spawn_current 
  [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@20 play_move_down::@6
  [204] (byte) current_piece_char#20 ← phi( play_move_down::@20/(byte) current_piece_char#12 play_move_down::@6/(byte) current_piece_char#15 )
  [204] (byte) current_xpos#33 ← phi( play_move_down::@20/(byte) current_xpos#23 play_move_down::@6/(byte) current_xpos#10 )
  [204] (byte*) current_piece_gfx#26 ← phi( play_move_down::@20/(byte*) current_piece_gfx#16 play_move_down::@6/(byte*) current_piece_gfx#20 )
  [204] (byte) current_orientation#29 ← phi( play_move_down::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@6/(byte) current_orientation#10 )
  [204] (byte*) current_piece#20 ← phi( play_move_down::@20/(byte*~) current_piece#78 play_move_down::@6/(byte*) current_piece#16 )
  [204] (byte) current_ypos#29 ← phi( play_move_down::@20/(byte) current_ypos#18 play_move_down::@6/(byte) current_ypos#0 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@4 play_move_down::@7
  [205] (byte) current_piece_char#1 ← phi( play_move_down::@4/(byte) current_piece_char#15 play_move_down::@7/(byte) current_piece_char#20 )
  [205] (byte) current_xpos#1 ← phi( play_move_down::@4/(byte) current_xpos#10 play_move_down::@7/(byte) current_xpos#33 )
  [205] (byte*) current_piece_gfx#1 ← phi( play_move_down::@4/(byte*) current_piece_gfx#20 play_move_down::@7/(byte*) current_piece_gfx#26 )
  [205] (byte) current_orientation#14 ← phi( play_move_down::@4/(byte) current_orientation#10 play_move_down::@7/(byte) current_orientation#29 )
  [205] (byte*) current_piece#10 ← phi( play_move_down::@4/(byte*) current_piece#16 play_move_down::@7/(byte*) current_piece#20 )
  [205] (byte) current_ypos#13 ← phi( play_move_down::@4/(byte) current_ypos#21 play_move_down::@7/(byte) current_ypos#29 )
  [205] (byte) current_movedown_counter#10 ← phi( play_move_down::@4/(byte) current_movedown_counter#1 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [205] (byte) play_move_down::return#2 ← phi( play_move_down::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [206] return 
  to:@return
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  [207] (byte) current_ypos#0 ← ++ (byte) current_ypos#21
  to:play_move_down::@7
play_spawn_current: scope:[play_spawn_current]  from main::@19 play_move_down::@20
  [208] phi()
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current play_spawn_current::@7
  [209] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current/(byte/signed byte/word/signed word/dword/signed dword) 7 play_spawn_current::@7/(byte) play_spawn_current::piece_idx#1 )
  [210] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1
  [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0
  [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2)
  [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2)
  [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2)
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@3
  [216] return 
  to:@return
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1
  [217] phi()
  [218] call sid_rnd 
  [219] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:play_spawn_current::@7
play_spawn_current::@7: scope:[play_spawn_current]  from play_spawn_current::@2
  [220] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2
  [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  to:play_spawn_current::@1
sid_rnd: scope:[sid_rnd]  from play_spawn_current::@2
  [222] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [223] return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@19
  [224] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@4
  [225] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@4/(byte) play_remove_lines::y#1 )
  [225] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::w#11 )
  [225] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [226] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [226] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [226] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [226] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [227] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2)
  [228] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [229] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@17
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@17 play_remove_lines::@2
  [230] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@17/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [231] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [232] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [233] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [234] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2
  to:play_remove_lines::@9
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@3
  [235] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4
  to:play_remove_lines::@10
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@9
  [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@10 play_remove_lines::@9
  [237] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@10/(byte) play_remove_lines::w#2 play_remove_lines::@9/(byte) play_remove_lines::w#1 )
  [238] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [239] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@6
  [240] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#11 play_remove_lines::@6/(byte) play_remove_lines::w#3 )
  [241] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@5
  [242] return 
  to:@return
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [244] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@5
play_remove_lines::@17: scope:[play_remove_lines]  from play_remove_lines::@2
  [245] phi()
  to:play_remove_lines::@3
play_lock_current: scope:[play_lock_current]  from play_move_down::@13
  [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@7
  [247] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte) play_lock_current::l#1 )
  [247] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte~) play_lock_current::i#7 )
  [247] (byte) play_lock_current::ypos2#2 ← phi( play_lock_current/(byte) play_lock_current::ypos2#0 play_lock_current::@7/(byte) play_lock_current::ypos2#1 )
  [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2)
  [249] (byte) play_lock_current::col#0 ← (byte) current_xpos#10
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@8
  [250] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@8/(byte) play_lock_current::c#1 )
  [250] (byte) play_lock_current::col#2 ← phi( play_lock_current::@1/(byte) play_lock_current::col#0 play_lock_current::@8/(byte) play_lock_current::col#1 )
  [250] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@8/(byte~) play_lock_current::i#9 )
  [251] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [254] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2
  [255] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [256] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [257] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [258] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [259] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [260] return 
  to:@return
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@5
  [261] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@8: scope:[play_lock_current]  from play_lock_current::@3
  [262] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  [263] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(const byte) KEY_CTRL#0 keyboard_event_scan::@11/(const byte) KEY_COMMODORE#0 keyboard_event_scan::@20/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@9/(const byte) KEY_RSHIFT#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [265] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [268] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@24
  [269] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@3
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  [270] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [271] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@3
  [272] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  [272] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) 255 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  [273] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@23
  [274] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  [275] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@3/(byte) keyboard_events_size#13 )
  [275] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  [275] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  [276] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [277] call keyboard_matrix_read 
  [278] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [279] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [280] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  [282] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [282] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  [283] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [284] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [285] phi()
  [286] call keyboard_event_pressed 
  [287] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [288] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
  [289] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  [290] phi()
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  [291] (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@21/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 keyboard_event_scan::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [292] call keyboard_event_pressed 
  [293] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [294] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
  [295] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  [297] (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#3 keyboard_event_scan::@27/(byte) keyboard_modifiers#11 )
  [298] call keyboard_event_pressed 
  [299] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [300] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
  [301] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0
  to:keyboard_event_scan::@11
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  [303] (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#4 keyboard_event_scan::@28/(byte) keyboard_modifiers#12 )
  [304] call keyboard_event_pressed 
  [305] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  [306] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  [307] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@29
  [309] return 
  to:@return
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@25 keyboard_event_scan::@5
  [310] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  [310] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#11 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#15 )
  [310] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [313] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  [314] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [316] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [318] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7
  [319] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#10 keyboard_event_scan::@15/(byte) keyboard_events_size#10 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  [320] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [321] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [322] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64
  [325] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11
  [326] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [329] return 
  to:@return
render_show: scope:[render_show]  from main::@6
  [330] if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [331] phi()
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [332] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [333] *((const byte*) D018#0) ← (byte) render_show::d018val#3
  [334] (byte) render_screen_showing#1 ← (byte) render_screen_show#16
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  [335] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [336] phi()
  to:render_show::@2
play_init: scope:[play_init]  from main::@18
  [337] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [338] (byte) play_init::idx#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::idx#1 )
  [338] (byte*) play_init::pli#2 ← phi( play_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 play_init::@1/(byte*) play_init::pli#1 )
  [338] (byte) play_init::j#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::j#1 )
  [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2
  [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [344] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [345] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@2
  [347] return 
  to:@return
sprites_irq_init: scope:[sprites_irq_init]  from main::@17
  asm { sei  }
  [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [359] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@16
  [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [364] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [364] (byte) sprites_init::s#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [369] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [370] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [371] return 
  to:@return
render_init: scope:[render_init]  from main::@15
  [372] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [374] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@7
render_init::@7: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0
  [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0
  [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0
  [382] call render_screen_original 
  to:render_init::@8
render_init::@8: scope:[render_init]  from render_init::@7
  [383] phi()
  [384] call render_screen_original 
  to:render_init::@9
render_init::@9: scope:[render_init]  from render_init::@8
  [385] phi()
  [386] call fill 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@4 render_init::@9
  [387] (byte) render_init::l#4 ← phi( render_init::@9/(byte/signed byte/word/signed word/dword/signed dword) 2 render_init::@4/(byte) render_init::l#1 )
  [387] (byte*) render_init::line#4 ← phi( render_init::@9/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 render_init::@4/(byte*) render_init::line#1 )
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1 render_init::@2
  [388] (byte) render_init::c#2 ← phi( render_init::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_init::@2/(byte) render_init::c#1 )
  [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2
  [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0
  [391] (byte) render_init::c#1 ← ++ (byte) render_init::c#2
  [392] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@2
  [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [394] (byte) render_init::l#1 ← ++ (byte) render_init::l#4
  [395] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@3 render_init::@4
  [396] (byte*) render_init::li_2#2 ← phi( render_init::@3/(byte*) render_init::li_2#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [396] (byte*) render_init::li_1#2 ← phi( render_init::@3/(byte*) render_init::li_1#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [396] (byte) render_init::i#2 ← phi( render_init::@3/(byte) render_init::i#1 render_init::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2
  [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2
  [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [403] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [404] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@3
  [405] return 
  to:@return
fill: scope:[fill]  from render_init::@9
  [406] phi()
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [407] (byte*) fill::addr#2 ← phi( fill/(const byte*) COLS#0 fill::@1/(byte*) fill::addr#1 )
  [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0
  [409] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [411] return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@7 render_init::@8
  [412] (byte*) render_screen_original::screen#11 ← phi( render_init::@7/(const byte*) PLAYFIELD_SCREEN_1#0 render_init::@8/(const byte*) PLAYFIELD_SCREEN_2#0 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@9
  [413] (byte) render_screen_original::y#8 ← phi( render_screen_original/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@9/(byte) render_screen_original::y#1 )
  [413] (byte*) render_screen_original::orig#5 ← phi( render_screen_original/(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@9/(byte*) render_screen_original::orig#1 )
  [413] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#11 render_screen_original::@9/(byte*) render_screen_original::screen#12 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [414] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [414] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0
  [416] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [417] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [418] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@4
  [419] (byte*) render_screen_original::screen#10 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@4/(byte*) render_screen_original::screen#3 )
  [419] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@4/(byte) render_screen_original::x#2 )
  [419] (byte*) render_screen_original::orig#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::orig#5 render_screen_original::@4/(byte*) render_screen_original::orig#1 )
  [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [421] (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2
  [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@11 render_screen_original::@3 render_screen_original::@7
  [423] (byte) render_screen_original::c#2 ← phi( render_screen_original::@3/(byte) render_screen_original::c#0 render_screen_original::@7/(byte) render_screen_original::c#1 )
  [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2
  [425] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#10
  [426] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [427] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4 render_screen_original::@5
  [428] (byte) render_screen_original::x#7 ← phi( render_screen_original::@4/(byte) render_screen_original::x#2 render_screen_original::@5/(byte) render_screen_original::x#3 )
  [428] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@4/(byte*) render_screen_original::screen#3 render_screen_original::@5/(byte*) render_screen_original::screen#12 )
  [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0
  [430] (byte*) render_screen_original::screen#12 ← ++ (byte*) render_screen_original::screen#7
  [431] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7
  [432] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5
  to:render_screen_original::@9
render_screen_original::@9: scope:[render_screen_original]  from render_screen_original::@5
  [433] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#8
  [434] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@9
  [435] return 
  to:@return
render_screen_original::@11: scope:[render_screen_original]  from render_screen_original::@3
  [436] if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7
  to:render_screen_original::@4
render_screen_original::@7: scope:[render_screen_original]  from render_screen_original::@11
  [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192
  to:render_screen_original::@4
sid_rnd_init: scope:[sid_rnd_init]  from main
  [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [440] return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  [441] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [442] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0
  [443] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0
  [444] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0
  [445] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0
  to:sprites_irq::@1
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq sprites_irq::@1
  [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@1
  [447] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq::@7
  [449] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0
  [450] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [451] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3
  [452] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3
  [453] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [454] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@3
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2 sprites_irq::@8
  [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@3
  [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@10 sprites_irq::@13
  [460] (byte) irq_raster_next#13 ← phi( sprites_irq::@10/(byte) irq_raster_next#2 sprites_irq::@13/(byte) irq_raster_next#1 )
  [461] (byte) sprites_irq::raster_next#0 ← (byte) irq_raster_next#13
  [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [463] if((byte~) sprites_irq::$4!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto sprites_irq::@6
  to:sprites_irq::@12
sprites_irq::@12: scope:[sprites_irq]  from sprites_irq::@5
  [464] (byte) sprites_irq::raster_next#1 ← (byte) sprites_irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@12 sprites_irq::@5
  [465] (byte) sprites_irq::raster_next#2 ← phi( sprites_irq::@12/(byte) sprites_irq::raster_next#1 sprites_irq::@5/(byte) sprites_irq::raster_next#0 )
  [466] *((const byte*) RASTER#0) ← (byte) sprites_irq::raster_next#2
  [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@6
  [468] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@3
  [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0
  [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@4
  [472] phi()
  to:sprites_irq::@13
sprites_irq::@13: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0
  to:sprites_irq::@5
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@7
  [474] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0
  [475] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [476] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1
  [477] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1
  [478] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [479] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@3


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte) COLLISION_BOTTOM
(byte) COLLISION_LEFT
(byte) COLLISION_NONE
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_RIGHT
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte) IRQ_RASTER_FIRST
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(byte) KEY_Y
(byte) KEY_Z
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(word[]) PIECES
(byte[]) PIECES_CHARS
(byte[]) PIECES_START_X
(byte[]) PIECES_START_Y
(byte[4*4*4]) PIECE_I
(byte[4*4*4]) PIECE_J
(byte[4*4*4]) PIECE_L
(byte[4*4*4]) PIECE_O
(byte[4*4*4]) PIECE_S
(byte[4*4*4]) PIECE_T
(byte[4*4*4]) PIECE_Z
(byte) PINK
(byte*) PLAYFIELD_CHARSET
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_LINES
(byte*) PLAYFIELD_SCREEN_1
(byte*) PLAYFIELD_SCREEN_2
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITE_PTRS_1
(byte*) PLAYFIELD_SPRITE_PTRS_2
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TRIANGLE
(byte*) SID_VOICE3_CONTROL
(word*) SID_VOICE3_FREQ
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_OSC
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(byte) current_movedown_counter
(byte) current_movedown_counter#1 0.5333333333333333
(byte) current_movedown_counter#10 4.222222222222222
(byte) current_movedown_counter#12 10.363636363636363
(byte) current_movedown_fast
(byte) current_movedown_slow
(byte) current_orientation
(byte) current_orientation#10 3.371428571428571
(byte) current_orientation#14 0.32653061224489793
(byte) current_orientation#19 6.941176470588235
(byte) current_orientation#29 4.0
(byte) current_orientation#4 3.0
(byte*) current_piece
(byte*) current_piece#10 1.8235294117647054
(byte*) current_piece#12 10.0
(byte*) current_piece#16 3.428571428571428
(byte*) current_piece#20 6.0
(byte*~) current_piece#71 4.0
(byte*~) current_piece#74 4.0
(byte*~) current_piece#75 4.0
(byte*~) current_piece#76 4.0
(byte*~) current_piece#77 4.0
(byte*~) current_piece#78 4.0
(byte) current_piece_char
(byte) current_piece_char#1 4.703703703703704
(byte) current_piece_char#12 0.6153846153846154
(byte) current_piece_char#15 194.59615384615384
(byte) current_piece_char#20 6.0
(byte) current_piece_char#63 46.09090909090909
(byte~) current_piece_char#88 4.0
(byte~) current_piece_char#89 22.0
(byte*) current_piece_gfx
(byte*) current_piece_gfx#1 0.2962962962962963
(byte*~) current_piece_gfx#100 2.0
(byte*~) current_piece_gfx#101 11.0
(byte*) current_piece_gfx#14 7.588235294117647
(byte*) current_piece_gfx#16 0.5
(byte*) current_piece_gfx#20 194.59615384615384
(byte*) current_piece_gfx#26 6.0
(byte*) current_piece_gfx#3 4.0
(byte*) current_piece_gfx#53 46.09090909090909
(byte) current_xpos
(byte) current_xpos#1 0.72
(byte) current_xpos#10 21.557692307692307
(byte~) current_xpos#110 1.3333333333333333
(byte~) current_xpos#111 7.333333333333333
(byte) current_xpos#19 3.2926829268292686
(byte) current_xpos#2 4.0
(byte) current_xpos#23 0.5333333333333333
(byte) current_xpos#33 6.0
(byte) current_xpos#4 4.0
(byte) current_xpos#47 5.181818181818182
(byte) current_ypos
(byte) current_ypos#0 4.0
(byte) current_ypos#13 1.9558823529411762
(byte) current_ypos#18 0.5714285714285714
(byte) current_ypos#21 3.485714285714285
(byte) current_ypos#29 6.0
(byte~) current_ypos#84 1.0
(byte~) current_ypos#85 4.4
(byte) current_ypos#9 15.0
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*) fill::addr
(byte*) fill::addr#1 16.5
(byte*) fill::addr#2 16.5
(byte*) fill::end
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) irq_cnt
(byte) irq_cnt#0 0.2
(byte) irq_cnt#1 4.0
(byte) irq_cnt#14 20.0
(byte) irq_raster_next
(byte) irq_raster_next#0 0.18181818181818182
(byte) irq_raster_next#1 1.0
(byte) irq_raster_next#13 6.0
(byte) irq_raster_next#2 1.3333333333333333
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0 0.25
(byte) irq_sprite_ptr#1 20.0
(byte) irq_sprite_ptr#2 20.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0 0.7391304347826086
(byte) irq_sprite_ypos#1 20.0
(byte) irq_sprite_ypos#2 20.0
(byte[]) keyboard_char_keycodes
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 4.0
(byte) keyboard_event_get::return#2 34.33333333333333
(byte) keyboard_event_get::return#3 202.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 4.0
(byte~) keyboard_event_pressed::$1 4.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 4.0
(byte) keyboard_event_pressed::return#1 4.0
(byte) keyboard_event_pressed::return#10 4.0
(byte) keyboard_event_pressed::return#11 1.714285714285714
(byte) keyboard_event_pressed::return#12 4.0
(byte) keyboard_event_pressed::return#2 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 2.0
(void()) keyboard_event_scan()
(byte/word/dword~) keyboard_event_scan::$11 20002.0
(byte~) keyboard_event_scan::$14 4.0
(byte~) keyboard_event_scan::$18 4.0
(byte~) keyboard_event_scan::$22 4.0
(byte~) keyboard_event_scan::$26 4.0
(byte~) keyboard_event_scan::$3 20002.0
(byte~) keyboard_event_scan::$4 20002.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 15001.5
(byte) keyboard_event_scan::col#2 2857.4285714285716
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 20002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 2002.0
(byte) keyboard_event_scan::keycode#10 3154.230769230769
(byte) keyboard_event_scan::keycode#11 500.5
(byte) keyboard_event_scan::keycode#14 1001.0
(byte) keyboard_event_scan::keycode#15 5250.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 1501.5
(byte) keyboard_event_scan::row#2 600.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 1278.0555555555554
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte) keyboard_events_size#1 20002.0
(byte) keyboard_events_size#10 8100.9000000000015
(byte) keyboard_events_size#13 97.06451612903226
(byte) keyboard_events_size#16 3.741935483870968
(byte) keyboard_events_size#19 18.999999999999996
(byte) keyboard_events_size#2 20002.0
(byte) keyboard_events_size#29 429.2857142857143
(byte) keyboard_events_size#30 10201.2
(byte) keyboard_events_size#4 3.0
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 334.33333333333337
(byte) keyboard_matrix_read::return#2 2002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 1003.0
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte) keyboard_modifiers#11 0.8
(byte) keyboard_modifiers#12 1.6
(byte) keyboard_modifiers#13 1.2000000000000002
(byte) keyboard_modifiers#3 4.0
(byte) keyboard_modifiers#4 4.0
(byte) keyboard_modifiers#5 20.0
(byte[8]) keyboard_scan_values
(void()) main()
(byte~) main::$12 202.0
(byte~) main::$13 202.0
(byte~) main::$14 202.0
(byte) main::key_event
(byte) main::key_event#0 36.72727272727273
(byte) main::render
(byte) main::render#1 40.4
(byte) main::render#2 40.4
(byte) main::render#3 202.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$7 20002.0
(byte) play_collision::c
(byte) play_collision::c#1 10001.0
(byte) play_collision::c#2 2222.4444444444443
(byte) play_collision::col
(byte) play_collision::col#1 5000.5
(byte) play_collision::col#2 6375.75
(byte~) play_collision::col#9 2002.0
(byte) play_collision::i
(byte) play_collision::i#1 1615.6153846153845
(byte~) play_collision::i#11 2002.0
(byte~) play_collision::i#13 20002.0
(byte) play_collision::i#2 15502.0
(byte) play_collision::i#3 667.3333333333334
(byte) play_collision::l
(byte) play_collision::l#1 1001.0
(byte) play_collision::l#6 125.125
(byte) play_collision::orientation
(byte) play_collision::orientation#0 2.0
(byte) play_collision::orientation#1 2.0
(byte) play_collision::orientation#2 2.0
(byte) play_collision::orientation#3 2.0
(byte) play_collision::orientation#4 10.0
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 476.3333333333333
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 785.8571428571429
(byte) play_collision::return
(byte) play_collision::return#0 4.0
(byte) play_collision::return#1 4.0
(byte) play_collision::return#12 4.0
(byte) play_collision::return#13 4.0
(byte) play_collision::return#14 1.3333333333333333
(byte) play_collision::xpos
(byte) play_collision::xpos#0 1.3333333333333333
(byte) play_collision::xpos#1 1.0
(byte) play_collision::xpos#2 1.0
(byte) play_collision::xpos#3 1.0
(byte) play_collision::xpos#5 45.86363636363637
(byte) play_collision::ypos
(byte) play_collision::ypos#0 1.0
(byte) play_collision::ypos#1 1.3333333333333333
(byte) play_collision::ypos#2 1.3333333333333333
(byte) play_collision::ypos#3 1.3333333333333333
(byte) play_collision::ypos#4 5.0
(byte) play_collision::ypos2
(byte) play_collision::ypos2#0 4.0
(byte) play_collision::ypos2#1 500.5
(byte) play_collision::ypos2#2 867.0666666666667
(void()) play_init()
(byte~) play_init::$1 22.0
(byte) play_init::idx
(byte) play_init::idx#1 7.333333333333333
(byte) play_init::idx#2 6.6000000000000005
(byte) play_init::j
(byte) play_init::j#1 16.5
(byte) play_init::j#2 7.333333333333333
(byte*) play_init::pli
(byte*) play_init::pli#1 5.5
(byte*) play_init::pli#2 8.25
(void()) play_lock_current()
(byte) play_lock_current::c
(byte) play_lock_current::c#1 10001.0
(byte) play_lock_current::c#2 4000.4
(byte) play_lock_current::col
(byte) play_lock_current::col#0 2002.0
(byte) play_lock_current::col#1 5000.5
(byte) play_lock_current::col#2 7751.0
(byte) play_lock_current::i
(byte) play_lock_current::i#1 2333.6666666666665
(byte) play_lock_current::i#2 15502.0
(byte) play_lock_current::i#3 667.3333333333334
(byte~) play_lock_current::i#7 2002.0
(byte~) play_lock_current::i#9 20002.0
(byte) play_lock_current::l
(byte) play_lock_current::l#1 1001.0
(byte) play_lock_current::l#6 166.83333333333334
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 1100.2
(byte) play_lock_current::ypos2
(byte) play_lock_current::ypos2#0 4.0
(byte) play_lock_current::ypos2#1 500.5
(byte) play_lock_current::ypos2#2 273.1818181818182
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 4.0
(byte~) play_move_down::$2 4.0
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 51.5
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 1.0
(byte) play_move_down::movedown#2 4.0
(byte) play_move_down::movedown#3 4.0
(byte) play_move_down::movedown#6 6.0
(byte) play_move_down::movedown#7 5.0
(byte) play_move_down::return
(byte) play_move_down::return#2 33.666666666666664
(byte) play_move_down::return#3 202.0
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 4.0
(byte~) play_move_leftright::$8 4.0
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 52.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#1 33.666666666666664
(byte) play_move_leftright::return#4 202.0
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2 4.0
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4 4.0
(byte~) play_move_rotate::$6 4.0
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 52.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 4.0
(byte) play_move_rotate::orientation#2 4.0
(byte) play_move_rotate::orientation#3 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#1 33.666666666666664
(byte) play_move_rotate::return#4 202.0
(void()) play_remove_lines()
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 6000.6
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 4200.6
(byte) play_remove_lines::full#4 4000.4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 1615.6153846153845
(byte) play_remove_lines::r#2 15502.0
(byte) play_remove_lines::r#3 2002.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 5501.0
(byte) play_remove_lines::w#11 1334.6666666666667
(byte) play_remove_lines::w#12 2002.0
(byte) play_remove_lines::w#2 2002.0
(byte) play_remove_lines::w#3 2002.0
(byte) play_remove_lines::w#4 4429.142857142857
(byte) play_remove_lines::w#6 1668.3333333333335
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 15001.5
(byte) play_remove_lines::x#2 2500.25
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 1501.5
(byte) play_remove_lines::y#8 143.0
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 2002.0
(byte~) play_spawn_current::$3 0.13333333333333333
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 2002.0
(byte) play_spawn_current::piece_idx#2 334.99999999999994
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(void()) render_current()
(byte~) render_current::$5 202.0
(byte) render_current::c
(byte) render_current::c#1 1501.5
(byte) render_current::c#2 286.0
(byte) render_current::current_cell
(byte) render_current::current_cell#0 1001.0
(byte) render_current::i
(byte) render_current::i#1 202.0
(byte) render_current::i#10 429.0
(byte) render_current::i#3 50.5
(byte) render_current::i#4 1552.0
(byte) render_current::i#8 300.75
(byte) render_current::l
(byte) render_current::l#1 151.5
(byte) render_current::l#4 11.222222222222221
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0 100.18181818181819
(byte) render_current::xpos
(byte) render_current::xpos#0 202.0
(byte) render_current::xpos#1 667.3333333333334
(byte) render_current::xpos#2 684.1666666666667
(byte) render_current::ypos2
(byte) render_current::ypos2#0 4.0
(byte) render_current::ypos2#1 67.33333333333333
(byte) render_current::ypos2#2 29.823529411764707
(void()) render_init()
(byte*~) render_init::$12 202.0
(byte~) render_init::$22 22.0
(byte~) render_init::$23 22.0
(byte) render_init::c
(byte) render_init::c#1 151.5
(byte) render_init::c#2 101.0
(byte) render_init::i
(byte) render_init::i#1 16.5
(byte) render_init::i#2 6.285714285714286
(byte) render_init::l
(byte) render_init::l#1 16.5
(byte) render_init::l#4 3.142857142857143
(byte*) render_init::li_1
(byte*) render_init::li_1#1 5.5
(byte*) render_init::li_1#2 6.6000000000000005
(byte*) render_init::li_2
(byte*) render_init::li_2#1 7.333333333333333
(byte*) render_init::li_2#2 5.5
(byte*) render_init::line
(byte*) render_init::line#1 7.333333333333333
(byte*) render_init::line#4 20.499999999999996
(byte~) render_init::vicSelectGfxBank1_$0
(byte*) render_init::vicSelectGfxBank1_gfx
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(byte~) render_init::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) render_init::vicSelectGfxBank1_toDd001_$3
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(void()) render_playfield()
(byte~) render_playfield::$2 202.0
(byte~) render_playfield::$3 202.0
(byte) render_playfield::c
(byte) render_playfield::c#1 1501.5
(byte) render_playfield::c#2 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 420.59999999999997
(byte) render_playfield::i#2 1034.6666666666667
(byte) render_playfield::i#3 50.5
(byte) render_playfield::l
(byte) render_playfield::l#1 151.5
(byte) render_playfield::l#2 30.299999999999997
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 202.0
(byte*) render_playfield::screen_line#1 500.5
(byte*) render_playfield::screen_line#2 1552.0
(void()) render_screen_original((byte*) render_screen_original::screen)
(byte) render_screen_original::SPACE
(byte) render_screen_original::c
(byte) render_screen_original::c#0 75.75
(byte) render_screen_original::c#1 202.0
(byte) render_screen_original::c#2 303.0
(byte*) render_screen_original::orig
(byte*) render_screen_original::orig#1 13.3125
(byte*) render_screen_original::orig#2 202.0
(byte*) render_screen_original::orig#5 18.666666666666664
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 50.5
(byte*) render_screen_original::screen#11 2.0
(byte*) render_screen_original::screen#12 42.599999999999994
(byte*) render_screen_original::screen#2 101.0
(byte*) render_screen_original::screen#3 101.0
(byte*) render_screen_original::screen#5 157.0
(byte*) render_screen_original::screen#7 202.0
(byte*) render_screen_original::screen#8 24.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 202.0
(byte) render_screen_original::x#2 202.0
(byte) render_screen_original::x#3 151.5
(byte) render_screen_original::x#4 67.33333333333333
(byte) render_screen_original::x#5 56.11111111111111
(byte) render_screen_original::x#7 101.0
(byte) render_screen_original::y
(byte) render_screen_original::y#1 16.5
(byte) render_screen_original::y#8 1.0
(byte) render_screen_render
(byte) render_screen_render#11 3.25
(byte) render_screen_render#16 1.0
(byte) render_screen_render#19 8.615384615384615
(byte) render_screen_render#28 5.090909090909091
(byte~) render_screen_render#62 5.5
(byte~) render_screen_render#63 22.0
(byte) render_screen_show
(byte) render_screen_show#13 4.333333333333333
(byte) render_screen_show#16 0.39534883720930225
(byte) render_screen_showing
(byte) render_screen_showing#0 0.5714285714285714
(byte) render_screen_showing#1 20.0
(void()) render_screen_swap()
(void()) render_show()
(byte) render_show::d018val
(byte) render_show::d018val#3 2.0
(word~) render_show::toD0181_$0
(word~) render_show::toD0181_$1
(word~) render_show::toD0181_$2
(byte~) render_show::toD0181_$3
(word~) render_show::toD0181_$4
(byte~) render_show::toD0181_$5
(byte~) render_show::toD0181_$6
(byte~) render_show::toD0181_$7
(byte~) render_show::toD0181_$8
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(byte*) render_show::toD0181_screen
(word~) render_show::toD0182_$0
(word~) render_show::toD0182_$1
(word~) render_show::toD0182_$2
(byte~) render_show::toD0182_$3
(word~) render_show::toD0182_$4
(byte~) render_show::toD0182_$5
(byte~) render_show::toD0182_$6
(byte~) render_show::toD0182_$7
(byte~) render_show::toD0182_$8
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(byte*) render_show::toD0182_screen
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(byte()) sid_rnd()
(byte) sid_rnd::return
(byte) sid_rnd::return#0 334.33333333333337
(byte) sid_rnd::return#2 2002.0
(void()) sid_rnd_init()
(void()) sprites_init()
(byte) sprites_init::s
(byte) sprites_init::s#1 16.5
(byte) sprites_init::s#2 8.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 22.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 7.333333333333333
(byte) sprites_init::xpos#2 8.25
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$4 4.0
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 2.5
(byte) sprites_irq::ptr#1 2.6666666666666665
(byte) sprites_irq::ptr#2 4.0
(byte) sprites_irq::ptr#3 2.6666666666666665
(byte) sprites_irq::ptr#4 4.0
(byte) sprites_irq::raster_next
(byte) sprites_irq::raster_next#0 2.6666666666666665
(byte) sprites_irq::raster_next#1 4.0
(byte) sprites_irq::raster_next#2 6.0
(word~) sprites_irq::toSpritePtr2_$0
(word~) sprites_irq::toSpritePtr2_$1
(byte~) sprites_irq::toSpritePtr2_$2
(byte) sprites_irq::toSpritePtr2_return
(byte*) sprites_irq::toSpritePtr2_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 2.5
(void()) sprites_irq_init()
(word~) toSpritePtr1_$0
(word~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(byte*) toSpritePtr1_sprite

Initial phi equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#16 render_screen_render#11 ]
[ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
[ current_ypos#9 current_ypos#84 current_ypos#85 ]
[ render_screen_render#28 render_screen_render#62 ]
[ current_xpos#47 current_xpos#110 current_xpos#111 ]
[ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ]
[ current_piece_char#63 current_piece_char#88 current_piece_char#89 ]
[ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
[ render_current::l#4 render_current::l#1 ]
[ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ]
[ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ]
[ render_current::c#2 render_current::c#1 ]
[ render_screen_render#19 render_screen_render#63 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_move_rotate::return#1 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ]
[ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
[ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ]
[ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
[ play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#14 ]
[ play_move_leftright::return#1 ]
[ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
[ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
[ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ]
[ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
[ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ]
[ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
[ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
[ play_move_down::return#2 ]
[ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
[ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
[ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::line#4 render_init::line#1 ]
[ render_init::l#4 render_init::l#1 ]
[ render_init::c#2 render_init::c#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ fill::addr#2 fill::addr#1 ]
[ render_screen_original::y#8 render_screen_original::y#1 ]
[ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ]
[ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
[ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ]
[ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ]
Added variable render_screen_showing#0 to zero page equivalence class [ render_screen_showing#0 ]
Added variable irq_raster_next#0 to zero page equivalence class [ irq_raster_next#0 ]
Added variable irq_sprite_ypos#0 to zero page equivalence class [ irq_sprite_ypos#0 ]
Added variable irq_sprite_ptr#0 to zero page equivalence class [ irq_sprite_ptr#0 ]
Added variable irq_cnt#0 to zero page equivalence class [ irq_cnt#0 ]
Added variable keyboard_event_get::return#3 to zero page equivalence class [ keyboard_event_get::return#3 ]
Added variable main::key_event#0 to zero page equivalence class [ main::key_event#0 ]
Added variable play_move_down::key_event#0 to zero page equivalence class [ play_move_down::key_event#0 ]
Added variable play_move_down::return#3 to zero page equivalence class [ play_move_down::return#3 ]
Added variable main::$12 to zero page equivalence class [ main::$12 ]
Added variable main::render#1 to zero page equivalence class [ main::render#1 ]
Added variable play_move_leftright::key_event#0 to zero page equivalence class [ play_move_leftright::key_event#0 ]
Added variable play_move_leftright::return#4 to zero page equivalence class [ play_move_leftright::return#4 ]
Added variable main::$13 to zero page equivalence class [ main::$13 ]
Added variable main::render#2 to zero page equivalence class [ main::render#2 ]
Added variable play_move_rotate::key_event#0 to zero page equivalence class [ play_move_rotate::key_event#0 ]
Added variable play_move_rotate::return#4 to zero page equivalence class [ play_move_rotate::return#4 ]
Added variable main::$14 to zero page equivalence class [ main::$14 ]
Added variable main::render#3 to zero page equivalence class [ main::render#3 ]
Added variable render_current::$5 to zero page equivalence class [ render_current::$5 ]
Added variable render_current::screen_line#0 to zero page equivalence class [ render_current::screen_line#0 ]
Added variable render_current::current_cell#0 to zero page equivalence class [ render_current::current_cell#0 ]
Added variable render_playfield::$2 to zero page equivalence class [ render_playfield::$2 ]
Added variable render_playfield::$3 to zero page equivalence class [ render_playfield::$3 ]
Added variable play_move_rotate::$2 to zero page equivalence class [ play_move_rotate::$2 ]
Added variable play_collision::return#13 to zero page equivalence class [ play_collision::return#13 ]
Added variable play_move_rotate::$6 to zero page equivalence class [ play_move_rotate::$6 ]
Added variable play_move_rotate::$4 to zero page equivalence class [ play_move_rotate::$4 ]
Added variable play_collision::piece_gfx#0 to zero page equivalence class [ play_collision::piece_gfx#0 ]
Added variable play_collision::playfield_line#0 to zero page equivalence class [ play_collision::playfield_line#0 ]
Added variable play_collision::i#1 to zero page equivalence class [ play_collision::i#1 ]
Added variable play_collision::$7 to zero page equivalence class [ play_collision::$7 ]
Added variable play_collision::return#12 to zero page equivalence class [ play_collision::return#12 ]
Added variable play_move_leftright::$4 to zero page equivalence class [ play_move_leftright::$4 ]
Added variable play_collision::return#1 to zero page equivalence class [ play_collision::return#1 ]
Added variable play_move_leftright::$8 to zero page equivalence class [ play_move_leftright::$8 ]
Added variable keyboard_event_pressed::return#12 to zero page equivalence class [ keyboard_event_pressed::return#12 ]
Added variable play_move_down::$2 to zero page equivalence class [ play_move_down::$2 ]
Added variable play_collision::return#0 to zero page equivalence class [ play_collision::return#0 ]
Added variable play_move_down::$12 to zero page equivalence class [ play_move_down::$12 ]
Added variable play_spawn_current::$3 to zero page equivalence class [ play_spawn_current::$3 ]
Added variable sid_rnd::return#2 to zero page equivalence class [ sid_rnd::return#2 ]
Added variable play_spawn_current::$1 to zero page equivalence class [ play_spawn_current::$1 ]
Added variable sid_rnd::return#0 to zero page equivalence class [ sid_rnd::return#0 ]
Added variable play_remove_lines::c#0 to zero page equivalence class [ play_remove_lines::c#0 ]
Added variable play_lock_current::playfield_line#0 to zero page equivalence class [ play_lock_current::playfield_line#0 ]
Added variable play_lock_current::i#1 to zero page equivalence class [ play_lock_current::i#1 ]
Added variable keyboard_event_pressed::$0 to zero page equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to zero page equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to zero page equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#11 to zero page equivalence class [ keyboard_event_pressed::return#11 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to zero page equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to zero page equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$14 to zero page equivalence class [ keyboard_event_scan::$14 ]
Added variable keyboard_event_pressed::return#1 to zero page equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$18 to zero page equivalence class [ keyboard_event_scan::$18 ]
Added variable keyboard_event_pressed::return#2 to zero page equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$22 to zero page equivalence class [ keyboard_event_scan::$22 ]
Added variable keyboard_event_pressed::return#10 to zero page equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_event_scan::$26 to zero page equivalence class [ keyboard_event_scan::$26 ]
Added variable keyboard_modifiers#5 to zero page equivalence class [ keyboard_modifiers#5 ]
Added variable keyboard_event_scan::$3 to zero page equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_scan::$4 to zero page equivalence class [ keyboard_event_scan::$4 ]
Added variable keyboard_event_scan::event_type#0 to zero page equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$11 to zero page equivalence class [ keyboard_event_scan::$11 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable render_screen_showing#1 to zero page equivalence class [ render_screen_showing#1 ]
Added variable play_init::$1 to zero page equivalence class [ play_init::$1 ]
Added variable sprites_init::s2#0 to zero page equivalence class [ sprites_init::s2#0 ]
Added variable render_init::$12 to zero page equivalence class [ render_init::$12 ]
Added variable render_init::$22 to zero page equivalence class [ render_init::$22 ]
Added variable render_init::$23 to zero page equivalence class [ render_init::$23 ]
Added variable sprites_irq::ypos#0 to zero page equivalence class [ sprites_irq::ypos#0 ]
Added variable sprites_irq::ptr#0 to zero page equivalence class [ sprites_irq::ptr#0 ]
Added variable sprites_irq::ptr#3 to zero page equivalence class [ sprites_irq::ptr#3 ]
Added variable sprites_irq::ptr#4 to zero page equivalence class [ sprites_irq::ptr#4 ]
Added variable irq_cnt#1 to zero page equivalence class [ irq_cnt#1 ]
Added variable irq_sprite_ypos#2 to zero page equivalence class [ irq_sprite_ypos#2 ]
Added variable irq_sprite_ptr#2 to zero page equivalence class [ irq_sprite_ptr#2 ]
Added variable sprites_irq::$4 to zero page equivalence class [ sprites_irq::$4 ]
Added variable irq_cnt#14 to zero page equivalence class [ irq_cnt#14 ]
Added variable irq_sprite_ypos#1 to zero page equivalence class [ irq_sprite_ypos#1 ]
Added variable irq_sprite_ptr#1 to zero page equivalence class [ irq_sprite_ptr#1 ]
Added variable sprites_irq::ptr#1 to zero page equivalence class [ sprites_irq::ptr#1 ]
Added variable sprites_irq::ptr#2 to zero page equivalence class [ sprites_irq::ptr#2 ]
Complete equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#16 render_screen_render#11 ]
[ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
[ current_ypos#9 current_ypos#84 current_ypos#85 ]
[ render_screen_render#28 render_screen_render#62 ]
[ current_xpos#47 current_xpos#110 current_xpos#111 ]
[ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ]
[ current_piece_char#63 current_piece_char#88 current_piece_char#89 ]
[ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
[ render_current::l#4 render_current::l#1 ]
[ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ]
[ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ]
[ render_current::c#2 render_current::c#1 ]
[ render_screen_render#19 render_screen_render#63 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_move_rotate::return#1 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ]
[ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
[ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ]
[ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
[ play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#14 ]
[ play_move_leftright::return#1 ]
[ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
[ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
[ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ]
[ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
[ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ]
[ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
[ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
[ play_move_down::return#2 ]
[ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
[ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
[ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::line#4 render_init::line#1 ]
[ render_init::l#4 render_init::l#1 ]
[ render_init::c#2 render_init::c#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ fill::addr#2 fill::addr#1 ]
[ render_screen_original::y#8 render_screen_original::y#1 ]
[ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ]
[ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
[ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ]
[ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ]
[ render_screen_showing#0 ]
[ irq_raster_next#0 ]
[ irq_sprite_ypos#0 ]
[ irq_sprite_ptr#0 ]
[ irq_cnt#0 ]
[ keyboard_event_get::return#3 ]
[ main::key_event#0 ]
[ play_move_down::key_event#0 ]
[ play_move_down::return#3 ]
[ main::$12 ]
[ main::render#1 ]
[ play_move_leftright::key_event#0 ]
[ play_move_leftright::return#4 ]
[ main::$13 ]
[ main::render#2 ]
[ play_move_rotate::key_event#0 ]
[ play_move_rotate::return#4 ]
[ main::$14 ]
[ main::render#3 ]
[ render_current::$5 ]
[ render_current::screen_line#0 ]
[ render_current::current_cell#0 ]
[ render_playfield::$2 ]
[ render_playfield::$3 ]
[ play_move_rotate::$2 ]
[ play_collision::return#13 ]
[ play_move_rotate::$6 ]
[ play_move_rotate::$4 ]
[ play_collision::piece_gfx#0 ]
[ play_collision::playfield_line#0 ]
[ play_collision::i#1 ]
[ play_collision::$7 ]
[ play_collision::return#12 ]
[ play_move_leftright::$4 ]
[ play_collision::return#1 ]
[ play_move_leftright::$8 ]
[ keyboard_event_pressed::return#12 ]
[ play_move_down::$2 ]
[ play_collision::return#0 ]
[ play_move_down::$12 ]
[ play_spawn_current::$3 ]
[ sid_rnd::return#2 ]
[ play_spawn_current::$1 ]
[ sid_rnd::return#0 ]
[ play_remove_lines::c#0 ]
[ play_lock_current::playfield_line#0 ]
[ play_lock_current::i#1 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#11 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$14 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$18 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$22 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_event_scan::$26 ]
[ keyboard_modifiers#5 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_scan::$4 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$11 ]
[ keyboard_matrix_read::return#0 ]
[ render_screen_showing#1 ]
[ play_init::$1 ]
[ sprites_init::s2#0 ]
[ render_init::$12 ]
[ render_init::$22 ]
[ render_init::$23 ]
[ sprites_irq::ypos#0 ]
[ sprites_irq::ptr#0 ]
[ sprites_irq::ptr#3 ]
[ sprites_irq::ptr#4 ]
[ irq_cnt#1 ]
[ irq_sprite_ypos#2 ]
[ irq_sprite_ptr#2 ]
[ sprites_irq::$4 ]
[ irq_cnt#14 ]
[ irq_sprite_ypos#1 ]
[ irq_sprite_ptr#1 ]
[ sprites_irq::ptr#1 ]
[ sprites_irq::ptr#2 ]
Allocated zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Allocated zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ]
Allocated zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
Allocated zp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ]
Allocated zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ]
Allocated zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ]
Allocated zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ]
Allocated zp ZP_BYTE:10 [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ]
Allocated zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Allocated zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ]
Allocated zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ]
Allocated zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ]
Allocated zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ]
Allocated zp ZP_BYTE:16 [ render_screen_render#19 render_screen_render#63 ]
Allocated zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ]
Allocated zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated zp ZP_WORD:19 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
Allocated zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ]
Allocated zp ZP_BYTE:22 [ play_move_rotate::return#1 ]
Allocated zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Allocated zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ]
Allocated zp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Allocated zp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
Allocated zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ]
Allocated zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ]
Allocated zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ]
Allocated zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
Allocated zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
Allocated zp ZP_BYTE:33 [ play_collision::c#2 play_collision::c#1 ]
Allocated zp ZP_BYTE:34 [ play_collision::return#14 ]
Allocated zp ZP_BYTE:35 [ play_move_leftright::return#1 ]
Allocated zp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
Allocated zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
Allocated zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ]
Allocated zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
Allocated zp ZP_WORD:41 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ]
Allocated zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
Allocated zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
Allocated zp ZP_BYTE:45 [ play_move_down::return#2 ]
Allocated zp ZP_BYTE:46 [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Allocated zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Allocated zp ZP_BYTE:48 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Allocated zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Allocated zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Allocated zp ZP_BYTE:51 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
Allocated zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
Allocated zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ]
Allocated zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Allocated zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ]
Allocated zp ZP_BYTE:56 [ play_lock_current::c#2 play_lock_current::c#1 ]
Allocated zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ]
Allocated zp ZP_BYTE:58 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
Allocated zp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Allocated zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Allocated zp ZP_BYTE:64 [ render_show::d018val#3 ]
Allocated zp ZP_BYTE:65 [ play_init::j#2 play_init::j#1 ]
Allocated zp ZP_WORD:66 [ play_init::pli#2 play_init::pli#1 ]
Allocated zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ]
Allocated zp ZP_BYTE:69 [ sprites_init::s#2 sprites_init::s#1 ]
Allocated zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Allocated zp ZP_WORD:71 [ render_init::line#4 render_init::line#1 ]
Allocated zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ]
Allocated zp ZP_BYTE:74 [ render_init::c#2 render_init::c#1 ]
Allocated zp ZP_BYTE:75 [ render_init::i#2 render_init::i#1 ]
Allocated zp ZP_WORD:76 [ render_init::li_1#2 render_init::li_1#1 ]
Allocated zp ZP_WORD:78 [ render_init::li_2#2 render_init::li_2#1 ]
Allocated zp ZP_WORD:80 [ fill::addr#2 fill::addr#1 ]
Allocated zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ]
Allocated zp ZP_WORD:83 [ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ]
Allocated zp ZP_BYTE:85 [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ]
Allocated zp ZP_WORD:86 [ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ]
Allocated zp ZP_BYTE:88 [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Allocated zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ]
Allocated zp ZP_BYTE:90 [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ]
Allocated zp ZP_BYTE:91 [ render_screen_showing#0 ]
Allocated zp ZP_BYTE:92 [ irq_raster_next#0 ]
Allocated zp ZP_BYTE:93 [ irq_sprite_ypos#0 ]
Allocated zp ZP_BYTE:94 [ irq_sprite_ptr#0 ]
Allocated zp ZP_BYTE:95 [ irq_cnt#0 ]
Allocated zp ZP_BYTE:96 [ keyboard_event_get::return#3 ]
Allocated zp ZP_BYTE:97 [ main::key_event#0 ]
Allocated zp ZP_BYTE:98 [ play_move_down::key_event#0 ]
Allocated zp ZP_BYTE:99 [ play_move_down::return#3 ]
Allocated zp ZP_BYTE:100 [ main::$12 ]
Allocated zp ZP_BYTE:101 [ main::render#1 ]
Allocated zp ZP_BYTE:102 [ play_move_leftright::key_event#0 ]
Allocated zp ZP_BYTE:103 [ play_move_leftright::return#4 ]
Allocated zp ZP_BYTE:104 [ main::$13 ]
Allocated zp ZP_BYTE:105 [ main::render#2 ]
Allocated zp ZP_BYTE:106 [ play_move_rotate::key_event#0 ]
Allocated zp ZP_BYTE:107 [ play_move_rotate::return#4 ]
Allocated zp ZP_BYTE:108 [ main::$14 ]
Allocated zp ZP_BYTE:109 [ main::render#3 ]
Allocated zp ZP_BYTE:110 [ render_current::$5 ]
Allocated zp ZP_WORD:111 [ render_current::screen_line#0 ]
Allocated zp ZP_BYTE:113 [ render_current::current_cell#0 ]
Allocated zp ZP_BYTE:114 [ render_playfield::$2 ]
Allocated zp ZP_BYTE:115 [ render_playfield::$3 ]
Allocated zp ZP_BYTE:116 [ play_move_rotate::$2 ]
Allocated zp ZP_BYTE:117 [ play_collision::return#13 ]
Allocated zp ZP_BYTE:118 [ play_move_rotate::$6 ]
Allocated zp ZP_BYTE:119 [ play_move_rotate::$4 ]
Allocated zp ZP_WORD:120 [ play_collision::piece_gfx#0 ]
Allocated zp ZP_WORD:122 [ play_collision::playfield_line#0 ]
Allocated zp ZP_BYTE:124 [ play_collision::i#1 ]
Allocated zp ZP_BYTE:125 [ play_collision::$7 ]
Allocated zp ZP_BYTE:126 [ play_collision::return#12 ]
Allocated zp ZP_BYTE:127 [ play_move_leftright::$4 ]
Allocated zp ZP_BYTE:128 [ play_collision::return#1 ]
Allocated zp ZP_BYTE:129 [ play_move_leftright::$8 ]
Allocated zp ZP_BYTE:130 [ keyboard_event_pressed::return#12 ]
Allocated zp ZP_BYTE:131 [ play_move_down::$2 ]
Allocated zp ZP_BYTE:132 [ play_collision::return#0 ]
Allocated zp ZP_BYTE:133 [ play_move_down::$12 ]
Allocated zp ZP_BYTE:134 [ play_spawn_current::$3 ]
Allocated zp ZP_BYTE:135 [ sid_rnd::return#2 ]
Allocated zp ZP_BYTE:136 [ play_spawn_current::$1 ]
Allocated zp ZP_BYTE:137 [ sid_rnd::return#0 ]
Allocated zp ZP_BYTE:138 [ play_remove_lines::c#0 ]
Allocated zp ZP_WORD:139 [ play_lock_current::playfield_line#0 ]
Allocated zp ZP_BYTE:141 [ play_lock_current::i#1 ]
Allocated zp ZP_BYTE:142 [ keyboard_event_pressed::$0 ]
Allocated zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp ZP_BYTE:144 [ keyboard_event_pressed::$1 ]
Allocated zp ZP_BYTE:145 [ keyboard_event_pressed::return#11 ]
Allocated zp ZP_BYTE:146 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:147 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ]
Allocated zp ZP_BYTE:149 [ keyboard_event_pressed::return#0 ]
Allocated zp ZP_BYTE:150 [ keyboard_event_scan::$14 ]
Allocated zp ZP_BYTE:151 [ keyboard_event_pressed::return#1 ]
Allocated zp ZP_BYTE:152 [ keyboard_event_scan::$18 ]
Allocated zp ZP_BYTE:153 [ keyboard_event_pressed::return#2 ]
Allocated zp ZP_BYTE:154 [ keyboard_event_scan::$22 ]
Allocated zp ZP_BYTE:155 [ keyboard_event_pressed::return#10 ]
Allocated zp ZP_BYTE:156 [ keyboard_event_scan::$26 ]
Allocated zp ZP_BYTE:157 [ keyboard_modifiers#5 ]
Allocated zp ZP_BYTE:158 [ keyboard_event_scan::$3 ]
Allocated zp ZP_BYTE:159 [ keyboard_event_scan::$4 ]
Allocated zp ZP_BYTE:160 [ keyboard_event_scan::event_type#0 ]
Allocated zp ZP_BYTE:161 [ keyboard_event_scan::$11 ]
Allocated zp ZP_BYTE:162 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:163 [ render_screen_showing#1 ]
Allocated zp ZP_BYTE:164 [ play_init::$1 ]
Allocated zp ZP_BYTE:165 [ sprites_init::s2#0 ]
Allocated zp ZP_WORD:166 [ render_init::$12 ]
Allocated zp ZP_BYTE:168 [ render_init::$22 ]
Allocated zp ZP_BYTE:169 [ render_init::$23 ]
Allocated zp ZP_BYTE:170 [ sprites_irq::ypos#0 ]
Allocated zp ZP_BYTE:171 [ sprites_irq::ptr#0 ]
Allocated zp ZP_BYTE:172 [ sprites_irq::ptr#3 ]
Allocated zp ZP_BYTE:173 [ sprites_irq::ptr#4 ]
Allocated zp ZP_BYTE:174 [ irq_cnt#1 ]
Allocated zp ZP_BYTE:175 [ irq_sprite_ypos#2 ]
Allocated zp ZP_BYTE:176 [ irq_sprite_ptr#2 ]
Allocated zp ZP_BYTE:177 [ sprites_irq::$4 ]
Allocated zp ZP_BYTE:178 [ irq_cnt#14 ]
Allocated zp ZP_BYTE:179 [ irq_sprite_ypos#1 ]
Allocated zp ZP_BYTE:180 [ irq_sprite_ptr#1 ]
Allocated zp ZP_BYTE:181 [ sprites_irq::ptr#1 ]
Allocated zp ZP_BYTE:182 [ sprites_irq::ptr#2 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label HARDWARE_IRQ = $fffe
  .const BLACK = 0
  .const WHITE = 1
  .const CYAN = 3
  .const BLUE = 6
  .const DARK_GREY = $b
  .const GREY = $c
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .const KEY_MODIFIER_LSHIFT = 1
  .const KEY_MODIFIER_RSHIFT = 2
  .const KEY_MODIFIER_CTRL = 4
  .const KEY_MODIFIER_COMMODORE = 8
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label PLAYFIELD_SCREEN_1 = $400
  .label PLAYFIELD_SCREEN_2 = $2c00
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $2800
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const IRQ_RASTER_FIRST = $31
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label keyboard_events_size = $3f
  .label keyboard_modifiers = $3c
  .label keyboard_modifiers_5 = $9d
  .label render_screen_showing = $5b
  .label render_screen_showing_1 = $a3
  .label irq_raster_next = $5c
  .label irq_sprite_ypos = $5d
  .label irq_sprite_ptr = $5e
  .label irq_cnt = $5f
  .label irq_cnt_1 = $ae
  .label irq_raster_next_1 = $59
  .label irq_sprite_ypos_1 = $b3
  .label irq_sprite_ptr_1 = $b4
  .label irq_raster_next_2 = $59
  .label irq_sprite_ypos_2 = $af
  .label irq_sprite_ptr_2 = $b0
  .label current_movedown_counter = 4
  .label current_ypos = $25
  .label current_piece_gfx = $29
  .label current_xpos = $2b
  .label current_piece_char = $2c
  .label current_orientation = $28
  .label render_screen_render = 3
  .label render_screen_show = 2
  .label current_ypos_9 = 5
  .label current_piece = $26
  .label current_piece_12 = $18
  .label render_screen_render_19 = $10
  .label render_screen_render_28 = 6
  .label current_xpos_47 = 7
  .label irq_raster_next_13 = $59
  .label current_piece_gfx_53 = 8
  .label irq_cnt_14 = $b2
  .label current_piece_char_63 = $a
  .label current_ypos_84 = 5
  .label current_ypos_85 = 5
  .label render_screen_render_62 = 6
  .label current_xpos_110 = 7
  .label current_xpos_111 = 7
  .label current_piece_gfx_100 = 8
  .label current_piece_gfx_101 = 8
  .label current_piece_char_88 = $a
  .label current_piece_char_89 = $a
  .label render_screen_render_63 = $10
  .label current_piece_74 = $18
  .label current_piece_75 = $18
  .label current_piece_76 = $18
  .label current_piece_77 = $18
//SEG2 @begin
bbegin:
  jmp b14
//SEG3 @14
b14:
//SEG4 [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta render_screen_showing
//SEG5 kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "nes-screen.imap"  }}
//SEG6 kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"  }}
  jmp b20
//SEG7 @20
b20:
//SEG8 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp b21
//SEG9 @21
b21:
//SEG10 [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG11 [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG12 [7] phi from @21 to toSpritePtr1 [phi:@21->toSpritePtr1]
toSpritePtr1_from_b21:
  jmp toSpritePtr1
//SEG13 toSpritePtr1
toSpritePtr1:
  jmp b33
//SEG14 @33
b33:
//SEG15 [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG16 [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt
//SEG17 [10] phi from @33 to @32 [phi:@33->@32]
b32_from_b33:
  jmp b32
//SEG18 @32
b32:
//SEG19 [11] call main 
//SEG20 [13] phi from @32 to main [phi:@32->main]
main_from_b32:
  jsr main
//SEG21 [12] phi from @32 to @end [phi:@32->@end]
bend_from_b32:
  jmp bend
//SEG22 @end
bend:
//SEG23 main
main: {
    .label _12 = $64
    .label _13 = $68
    .label _14 = $6c
    .label key_event = $61
    .label render = $65
    .label render_2 = $69
    .label render_3 = $6d
  //SEG24 [14] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b15
  //SEG25 main::@15
  b15:
  //SEG26 asm { sei  }
    sei
  //SEG27 [16] call render_init 
  //SEG28 [372] phi from main::@15 to render_init [phi:main::@15->render_init]
  render_init_from_b15:
    jsr render_init
  //SEG29 [17] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  b16_from_b15:
    jmp b16
  //SEG30 main::@16
  b16:
  //SEG31 [18] call sprites_init 
    jsr sprites_init
  //SEG32 [19] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  b17_from_b16:
    jmp b17
  //SEG33 main::@17
  b17:
  //SEG34 [20] call sprites_irq_init 
    jsr sprites_irq_init
  //SEG35 [21] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  b18_from_b17:
    jmp b18
  //SEG36 main::@18
  b18:
  //SEG37 [22] call play_init 
  //SEG38 [337] phi from main::@18 to play_init [phi:main::@18->play_init]
  play_init_from_b18:
    jsr play_init
  //SEG39 [23] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  b19_from_b18:
    jmp b19
  //SEG40 main::@19
  b19:
  //SEG41 [24] call play_spawn_current 
  //SEG42 [208] phi from main::@19 to play_spawn_current [phi:main::@19->play_spawn_current]
  play_spawn_current_from_b19:
    jsr play_spawn_current
  //SEG43 [25] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  b20_from_b19:
    jmp b20
  //SEG44 main::@20
  b20:
  //SEG45 [26] call render_playfield 
  //SEG46 [95] phi from main::@20 to render_playfield [phi:main::@20->render_playfield]
  render_playfield_from_b20:
  //SEG47 [95] phi (byte) render_screen_render#19 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@20->render_playfield#0] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render_19
    jsr render_playfield
    jmp b21
  //SEG48 main::@21
  b21:
  //SEG49 [27] (byte~) current_ypos#84 ← (byte) current_ypos#18 -- vbuz1=vbuz2 
    lda current_ypos
    sta current_ypos_84
  //SEG50 [28] (byte~) current_xpos#110 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_110
  //SEG51 [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_100
    lda current_piece_gfx+1
    sta current_piece_gfx_100+1
  //SEG52 [30] (byte~) current_piece_char#88 ← (byte) current_piece_char#12 -- vbuz1=vbuz2 
    lda current_piece_char
    sta current_piece_char_88
  //SEG53 [31] call render_current 
  //SEG54 [72] phi from main::@21 to render_current [phi:main::@21->render_current]
  render_current_from_b21:
  //SEG55 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#88 [phi:main::@21->render_current#0] -- register_copy 
  //SEG56 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#100 [phi:main::@21->render_current#1] -- register_copy 
  //SEG57 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#110 [phi:main::@21->render_current#2] -- register_copy 
  //SEG58 [72] phi (byte) render_screen_render#28 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->render_current#3] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render_28
  //SEG59 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#84 [phi:main::@21->render_current#4] -- register_copy 
    jsr render_current
  //SEG60 [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG61 [33] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  b1_from_b21:
  //SEG62 [33] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG63 [33] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG64 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#12 [phi:main::@21->main::@1#2] -- register_copy 
  //SEG65 [33] phi (byte) current_ypos#21 = (byte) current_ypos#18 [phi:main::@21->main::@1#3] -- register_copy 
  //SEG66 [33] phi (byte) current_xpos#10 = (byte) current_xpos#23 [phi:main::@21->main::@1#4] -- register_copy 
  //SEG67 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#16 [phi:main::@21->main::@1#5] -- register_copy 
  //SEG68 [33] phi (byte) current_orientation#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#6] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG69 [33] phi (byte*) current_piece#16 = (byte*~) current_piece#71 [phi:main::@21->main::@1#7] -- register_copy 
  //SEG70 [33] phi (byte) render_screen_render#16 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->main::@1#8] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render
  //SEG71 [33] phi (byte) render_screen_show#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#9] -- vbuz1=vbuc1 
    lda #0
    sta render_screen_show
    jmp b1
  //SEG72 [33] phi from main::@28 to main::@1 [phi:main::@28->main::@1]
  b1_from_b28:
  //SEG73 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@28->main::@1#0] -- register_copy 
  //SEG74 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@28->main::@1#1] -- register_copy 
  //SEG75 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@28->main::@1#2] -- register_copy 
  //SEG76 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@28->main::@1#3] -- register_copy 
  //SEG77 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@28->main::@1#4] -- register_copy 
  //SEG78 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@28->main::@1#5] -- register_copy 
  //SEG79 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@28->main::@1#6] -- register_copy 
  //SEG80 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@28->main::@1#7] -- register_copy 
    jmp b1
  //SEG81 main::@1
  b1:
    jmp b4
  //SEG82 main::@4
  b4:
  //SEG83 [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG84 [35] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
  b6_from_b4:
    jmp b6
  //SEG85 main::@6
  b6:
  //SEG86 [36] call render_show 
    jsr render_show
  //SEG87 [37] phi from main::@6 to main::@23 [phi:main::@6->main::@23]
  b23_from_b6:
    jmp b23
  //SEG88 main::@23
  b23:
  //SEG89 [38] call keyboard_event_scan 
  //SEG90 [274] phi from main::@23 to keyboard_event_scan [phi:main::@23->keyboard_event_scan]
  keyboard_event_scan_from_b23:
    jsr keyboard_event_scan
  //SEG91 [39] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG92 main::@24
  b24:
  //SEG93 [40] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG94 [41] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_get.return
    sta keyboard_event_get.return_3
    jmp b25
  //SEG95 main::@25
  b25:
  //SEG96 [42] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda keyboard_event_get.return_3
    sta key_event
  //SEG97 [43] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_down.key_event
  //SEG98 [44] call play_move_down 
    jsr play_move_down
  //SEG99 [45] (byte) play_move_down::return#3 ← (byte) play_move_down::return#2 -- vbuz1=vbuz2 
    lda play_move_down.return
    sta play_move_down.return_3
    jmp b26
  //SEG100 main::@26
  b26:
  //SEG101 [46] (byte~) main::$12 ← (byte) play_move_down::return#3 -- vbuz1=vbuz2 
    lda play_move_down.return_3
    sta _12
  //SEG102 [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12 -- vbuz1=vbuc1_plus_vbuz2 
    lda #0
    clc
    adc _12
    sta render
  //SEG103 [48] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_leftright.key_event
  //SEG104 [49] call play_move_leftright 
    jsr play_move_leftright
  //SEG105 [50] (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1 -- vbuz1=vbuz2 
    lda play_move_leftright.return
    sta play_move_leftright.return_4
    jmp b27
  //SEG106 main::@27
  b27:
  //SEG107 [51] (byte~) main::$13 ← (byte) play_move_leftright::return#4 -- vbuz1=vbuz2 
    lda play_move_leftright.return_4
    sta _13
  //SEG108 [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13 -- vbuz1=vbuz2_plus_vbuz3 
    lda render
    clc
    adc _13
    sta render_2
  //SEG109 [53] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda key_event
    sta play_move_rotate.key_event
  //SEG110 [54] call play_move_rotate 
    jsr play_move_rotate
  //SEG111 [55] (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1 -- vbuz1=vbuz2 
    lda play_move_rotate.return
    sta play_move_rotate.return_4
    jmp b28
  //SEG112 main::@28
  b28:
  //SEG113 [56] (byte~) main::$14 ← (byte) play_move_rotate::return#4 -- vbuz1=vbuz2 
    lda play_move_rotate.return_4
    sta _14
  //SEG114 [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14 -- vbuz1=vbuz2_plus_vbuz3 
    lda render_2
    clc
    adc _14
    sta render_3
  //SEG115 [58] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuz1_eq_0_then_la1 
    lda render_3
    cmp #0
    beq b1_from_b28
    jmp b13
  //SEG116 main::@13
  b13:
  //SEG117 [59] (byte~) render_screen_render#63 ← (byte) render_screen_render#16 -- vbuz1=vbuz2 
    lda render_screen_render
    sta render_screen_render_63
  //SEG118 [60] call render_playfield 
  //SEG119 [95] phi from main::@13 to render_playfield [phi:main::@13->render_playfield]
  render_playfield_from_b13:
  //SEG120 [95] phi (byte) render_screen_render#19 = (byte~) render_screen_render#63 [phi:main::@13->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp b29
  //SEG121 main::@29
  b29:
  //SEG122 [61] (byte~) current_ypos#85 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda current_ypos
    sta current_ypos_85
  //SEG123 [62] (byte~) render_screen_render#62 ← (byte) render_screen_render#16 -- vbuz1=vbuz2 
    lda render_screen_render
    sta render_screen_render_62
  //SEG124 [63] (byte~) current_xpos#111 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_111
  //SEG125 [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_101
    lda current_piece_gfx+1
    sta current_piece_gfx_101+1
  //SEG126 [65] (byte~) current_piece_char#89 ← (byte) current_piece_char#1 -- vbuz1=vbuz2 
    lda current_piece_char
    sta current_piece_char_89
  //SEG127 [66] call render_current 
  //SEG128 [72] phi from main::@29 to render_current [phi:main::@29->render_current]
  render_current_from_b29:
  //SEG129 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#89 [phi:main::@29->render_current#0] -- register_copy 
  //SEG130 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#101 [phi:main::@29->render_current#1] -- register_copy 
  //SEG131 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#111 [phi:main::@29->render_current#2] -- register_copy 
  //SEG132 [72] phi (byte) render_screen_render#28 = (byte~) render_screen_render#62 [phi:main::@29->render_current#3] -- register_copy 
  //SEG133 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#85 [phi:main::@29->render_current#4] -- register_copy 
    jsr render_current
  //SEG134 [67] phi from main::@29 to main::@30 [phi:main::@29->main::@30]
  b30_from_b29:
    jmp b30
  //SEG135 main::@30
  b30:
  //SEG136 [68] call render_screen_swap 
    jsr render_screen_swap
  //SEG137 [33] phi from main::@30 to main::@1 [phi:main::@30->main::@1]
  b1_from_b30:
  //SEG138 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@30->main::@1#0] -- register_copy 
  //SEG139 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@30->main::@1#1] -- register_copy 
  //SEG140 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@30->main::@1#2] -- register_copy 
  //SEG141 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@30->main::@1#3] -- register_copy 
  //SEG142 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@30->main::@1#4] -- register_copy 
  //SEG143 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@30->main::@1#5] -- register_copy 
  //SEG144 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@30->main::@1#6] -- register_copy 
  //SEG145 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@30->main::@1#7] -- register_copy 
  //SEG146 [33] phi (byte) render_screen_render#16 = (byte) render_screen_render#11 [phi:main::@30->main::@1#8] -- register_copy 
  //SEG147 [33] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@30->main::@1#9] -- register_copy 
    jmp b1
}
//SEG148 render_screen_swap
render_screen_swap: {
  //SEG149 [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_render
    eor #$40
    sta render_screen_render
  //SEG150 [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_show
    eor #$40
    sta render_screen_show
    jmp breturn
  //SEG151 render_screen_swap::@return
  breturn:
  //SEG152 [71] return 
    rts
}
//SEG153 render_current
render_current: {
    .label _5 = $6e
    .label ypos2 = $b
    .label screen_line = $6f
    .label xpos = $e
    .label i = $d
    .label l = $c
    .label current_cell = $71
    .label c = $f
  //SEG154 [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda current_ypos_9
    asl
    sta ypos2
  //SEG155 [74] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  b1_from_render_current:
  //SEG156 [74] phi (byte) render_current::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG157 [74] phi (byte) render_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG158 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG159 [74] phi from render_current::@3 to render_current::@1 [phi:render_current::@3->render_current::@1]
  b1_from_b3:
  //SEG160 [74] phi (byte) render_current::l#4 = (byte) render_current::l#1 [phi:render_current::@3->render_current::@1#0] -- register_copy 
  //SEG161 [74] phi (byte) render_current::i#3 = (byte) render_current::i#8 [phi:render_current::@3->render_current::@1#1] -- register_copy 
  //SEG162 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@3->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG163 render_current::@1
  b1:
  //SEG164 [75] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13 -- vbuz1_gt_vbuc1_then_la1 
    lda ypos2
    cmp #2
    beq !+
    bcs b13
  !:
    jmp b7
  //SEG165 render_current::@7
  b7:
  //SEG166 [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lda #4
    clc
    adc i
    sta i
  //SEG167 [77] phi from render_current::@5 render_current::@7 to render_current::@3 [phi:render_current::@5/render_current::@7->render_current::@3]
  b3_from_b5:
  b3_from_b7:
  //SEG168 [77] phi (byte) render_current::i#8 = (byte) render_current::i#10 [phi:render_current::@5/render_current::@7->render_current::@3#0] -- register_copy 
    jmp b3
  //SEG169 render_current::@3
  b3:
  //SEG170 [78] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG171 [79] (byte) render_current::l#1 ← ++ (byte) render_current::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG172 [80] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1_from_b3
    jmp breturn
  //SEG173 render_current::@return
  breturn:
  //SEG174 [81] return 
    rts
  //SEG175 render_current::@13
  b13:
  //SEG176 [82] if((byte) render_current::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b2
    jmp b7
  //SEG177 render_current::@2
  b2:
  //SEG178 [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda render_screen_render_28
    clc
    adc ypos2
    sta _5
  //SEG179 [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy _5
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG180 [85] (byte) render_current::xpos#0 ← (byte) current_xpos#47 -- vbuz1=vbuz2 
    lda current_xpos_47
    sta xpos
  //SEG181 [86] phi from render_current::@2 to render_current::@4 [phi:render_current::@2->render_current::@4]
  b4_from_b2:
  //SEG182 [86] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@2->render_current::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG183 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@2->render_current::@4#1] -- register_copy 
  //SEG184 [86] phi (byte) render_current::i#4 = (byte) render_current::i#3 [phi:render_current::@2->render_current::@4#2] -- register_copy 
    jmp b4
  //SEG185 [86] phi from render_current::@5 to render_current::@4 [phi:render_current::@5->render_current::@4]
  b4_from_b5:
  //SEG186 [86] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@5->render_current::@4#0] -- register_copy 
  //SEG187 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@5->render_current::@4#1] -- register_copy 
  //SEG188 [86] phi (byte) render_current::i#4 = (byte) render_current::i#10 [phi:render_current::@5->render_current::@4#2] -- register_copy 
    jmp b4
  //SEG189 render_current::@4
  b4:
  //SEG190 [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy i
    lda (current_piece_gfx_53),y
    sta current_cell
  //SEG191 [88] (byte) render_current::i#10 ← ++ (byte) render_current::i#4 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG192 [89] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5 -- vbuz1_eq_0_then_la1 
    lda current_cell
    cmp #0
    beq b5
    jmp b9
  //SEG193 render_current::@9
  b9:
  //SEG194 [90] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@5 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b5
    jmp b10
  //SEG195 render_current::@10
  b10:
  //SEG196 [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_char_63
    ldy xpos
    sta (screen_line),y
    jmp b5
  //SEG197 render_current::@5
  b5:
  //SEG198 [92] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG199 [93] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG200 [94] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b4_from_b5
    jmp b3_from_b5
}
//SEG201 render_playfield
render_playfield: {
    .label _2 = $72
    .label _3 = $73
    .label screen_line = $13
    .label i = $12
    .label c = $15
    .label l = $11
  //SEG202 [96] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG203 [96] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta i
  //SEG204 [96] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta l
    jmp b1
  //SEG205 [96] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG206 [96] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG207 [96] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG208 render_playfield::@1
  b1:
  //SEG209 [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda l
    asl
    sta _2
  //SEG210 [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2 -- vbuz1=vbuz2_plus_vbuz3 
    lda render_screen_render_19
    clc
    adc _2
    sta _3
  //SEG211 [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy _3
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG212 [100] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG213 [100] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG214 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG215 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG216 [100] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG217 [100] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG218 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG219 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG220 render_playfield::@2
  b2:
  //SEG221 [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (screen_line),y
  //SEG222 [102] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc screen_line
    bne !+
    inc screen_line+1
  !:
  //SEG223 [103] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG224 [104] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG225 [105] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b3
  //SEG226 render_playfield::@3
  b3:
  //SEG227 [106] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG228 [107] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b3
    jmp breturn
  //SEG229 render_playfield::@return
  breturn:
  //SEG230 [108] return 
    rts
}
//SEG231 play_move_rotate
play_move_rotate: {
    .label _2 = $74
    .label _4 = $77
    .label _6 = $76
    .label orientation = $17
    .label return = $16
    .label key_event = $6a
    .label return_4 = $6b
  //SEG232 [109] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_Z
    beq b1
    jmp b6
  //SEG233 play_move_rotate::@6
  b6:
  //SEG234 [110] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_X
    beq b2
  //SEG235 [111] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b14:
  breturn_from_b6:
  //SEG236 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#1 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG237 [111] phi (byte) current_orientation#19 = (byte) current_orientation#14 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG238 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta return
    jmp breturn
  //SEG239 play_move_rotate::@return
  breturn:
  //SEG240 [112] return 
    rts
  //SEG241 play_move_rotate::@2
  b2:
  //SEG242 [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
    sta _2
  //SEG243 [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and _2
    sta orientation
  //SEG244 [115] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  b4_from_b1:
  b4_from_b2:
  //SEG245 [115] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
    jmp b4
  //SEG246 play_move_rotate::@4
  b4:
  //SEG247 [116] (byte) play_collision::xpos#3 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG248 [117] (byte) play_collision::ypos#3 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda current_ypos
    sta play_collision.ypos
  //SEG249 [118] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta play_collision.orientation
  //SEG250 [119] (byte*~) current_piece#77 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_77
    lda current_piece+1
    sta current_piece_77+1
  //SEG251 [120] call play_collision 
  //SEG252 [128] phi from play_move_rotate::@4 to play_collision [phi:play_move_rotate::@4->play_collision]
  play_collision_from_b4:
  //SEG253 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@4->play_collision#0] -- register_copy 
  //SEG254 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@4->play_collision#1] -- register_copy 
  //SEG255 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@4->play_collision#2] -- register_copy 
  //SEG256 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#77 [phi:play_move_rotate::@4->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG257 [121] (byte) play_collision::return#13 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda play_collision.return_14
    sta play_collision.return_13
    jmp b14
  //SEG258 play_move_rotate::@14
  b14:
  //SEG259 [122] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13 -- vbuz1=vbuz2 
    lda play_collision.return_13
    sta _6
  //SEG260 [123] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _6
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG261 play_move_rotate::@11
  b11:
  //SEG262 [124] (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG263 [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4 -- pbuz1=pbuz2_plus_vbuz3 
    lda current_orientation
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG264 [111] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  breturn_from_b11:
  //SEG265 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#3 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG266 [111] phi (byte) current_orientation#19 = (byte) current_orientation#4 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG267 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #1
    sta return
    jmp breturn
  //SEG268 play_move_rotate::@1
  b1:
  //SEG269 [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuz1=vbuz2_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
    sta _4
  //SEG270 [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and _4
    sta orientation
    jmp b4_from_b1
}
//SEG271 play_collision
play_collision: {
    .label _7 = $7d
    .label xpos = $1c
    .label ypos = $1b
    .label orientation = $1a
    .label return = $84
    .label return_1 = $80
    .label piece_gfx = $78
    .label ypos2 = $1d
    .label playfield_line = $7a
    .label i = $7c
    .label col = $20
    .label c = $21
    .label l = $1e
    .label return_12 = $7e
    .label return_13 = $75
    .label i_2 = $1f
    .label return_14 = $22
    .label i_3 = $1f
    .label i_11 = $1f
    .label i_13 = $1f
  //SEG272 [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4 -- pbuz1=pbuz2_plus_vbuz3 
    lda orientation
    clc
    adc current_piece_12
    sta piece_gfx
    lda #0
    adc current_piece_12+1
    sta piece_gfx+1
  //SEG273 [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda ypos
    asl
    sta ypos2
  //SEG274 [131] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  b1_from_play_collision:
  //SEG275 [131] phi (byte) play_collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG276 [131] phi (byte) play_collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG277 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp b1
  //SEG278 play_collision::@1
  b1:
  //SEG279 [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG280 [133] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG281 [134] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  b2_from_b1:
  //SEG282 [134] phi (byte) play_collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG283 [134] phi (byte) play_collision::col#2 = (byte~) play_collision::col#9 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
  //SEG284 [134] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp b2
  //SEG285 play_collision::@2
  b2:
  //SEG286 [135] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG287 [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b8
  //SEG288 play_collision::@8
  b8:
  //SEG289 [137] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG290 [138] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  breturn_from_b8:
  //SEG291 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_BOTTOM
    sta return_14
    jmp breturn
  //SEG292 play_collision::@return
  breturn:
  //SEG293 [139] return 
    rts
  //SEG294 play_collision::@4
  b4:
  //SEG295 [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and col
    sta _7
  //SEG296 [141] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5 -- vbuz1_eq_0_then_la1 
    lda _7
    cmp #0
    beq b5
  //SEG297 [138] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  breturn_from_b4:
  //SEG298 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_LEFT
    sta return_14
    jmp breturn
  //SEG299 play_collision::@5
  b5:
  //SEG300 [142] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG301 [138] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  breturn_from_b5:
  //SEG302 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_RIGHT
    sta return_14
    jmp breturn
  //SEG303 play_collision::@6
  b6:
  //SEG304 [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG305 [138] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  breturn_from_b6:
  //SEG306 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_PLAYFIELD
    sta return_14
    jmp breturn
  //SEG307 play_collision::@3
  b3:
  //SEG308 [144] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG309 [145] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG310 [146] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b21
    jmp b17
  //SEG311 play_collision::@17
  b17:
  //SEG312 [147] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG313 [148] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG314 [149] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG315 [138] phi from play_collision::@17 to play_collision::@return [phi:play_collision::@17->play_collision::@return]
  breturn_from_b17:
  //SEG316 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_NONE#0 [phi:play_collision::@17->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_NONE
    sta return_14
    jmp breturn
  //SEG317 play_collision::@20
  b20:
  //SEG318 [150] (byte~) play_collision::i#11 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG319 [131] phi from play_collision::@20 to play_collision::@1 [phi:play_collision::@20->play_collision::@1]
  b1_from_b20:
  //SEG320 [131] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@20->play_collision::@1#0] -- register_copy 
  //SEG321 [131] phi (byte) play_collision::i#3 = (byte~) play_collision::i#11 [phi:play_collision::@20->play_collision::@1#1] -- register_copy 
  //SEG322 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#1 [phi:play_collision::@20->play_collision::@1#2] -- register_copy 
    jmp b1
  //SEG323 play_collision::@21
  b21:
  //SEG324 [151] (byte~) play_collision::i#13 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG325 [134] phi from play_collision::@21 to play_collision::@2 [phi:play_collision::@21->play_collision::@2]
  b2_from_b21:
  //SEG326 [134] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@21->play_collision::@2#0] -- register_copy 
  //SEG327 [134] phi (byte) play_collision::col#2 = (byte) play_collision::col#1 [phi:play_collision::@21->play_collision::@2#1] -- register_copy 
  //SEG328 [134] phi (byte) play_collision::i#2 = (byte~) play_collision::i#13 [phi:play_collision::@21->play_collision::@2#2] -- register_copy 
    jmp b2
}
//SEG329 play_move_leftright
play_move_leftright: {
    .label _4 = $7f
    .label _8 = $81
    .label return = $23
    .label key_event = $66
    .label return_4 = $67
  //SEG330 [152] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_COMMA
    beq b1
    jmp b6
  //SEG331 play_move_leftright::@6
  b6:
  //SEG332 [153] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_DOT
    bne breturn_from_b6
    jmp b7
  //SEG333 play_move_leftright::@7
  b7:
  //SEG334 [154] (byte) play_collision::xpos#2 ← (byte) current_xpos#1 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty play_collision.xpos
  //SEG335 [155] (byte) play_collision::ypos#2 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda current_ypos
    sta play_collision.ypos
  //SEG336 [156] (byte) play_collision::orientation#2 ← (byte) current_orientation#14 -- vbuz1=vbuz2 
    lda current_orientation
    sta play_collision.orientation
  //SEG337 [157] (byte*~) current_piece#76 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_76
    lda current_piece+1
    sta current_piece_76+1
  //SEG338 [158] call play_collision 
  //SEG339 [128] phi from play_move_leftright::@7 to play_collision [phi:play_move_leftright::@7->play_collision]
  play_collision_from_b7:
  //SEG340 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@7->play_collision#0] -- register_copy 
  //SEG341 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@7->play_collision#1] -- register_copy 
  //SEG342 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@7->play_collision#2] -- register_copy 
  //SEG343 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#76 [phi:play_move_leftright::@7->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG344 [159] (byte) play_collision::return#12 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda play_collision.return_14
    sta play_collision.return_12
    jmp b15
  //SEG345 play_move_leftright::@15
  b15:
  //SEG346 [160] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12 -- vbuz1=vbuz2 
    lda play_collision.return_12
    sta _4
  //SEG347 [161] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _4
    cmp #COLLISION_NONE
    bne breturn_from_b15
    jmp b8
  //SEG348 play_move_leftright::@8
  b8:
  //SEG349 [162] (byte) current_xpos#2 ← ++ (byte) current_xpos#1 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG350 [163] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  breturn_from_b11:
  breturn_from_b8:
  //SEG351 [163] phi (byte) current_xpos#19 = (byte) current_xpos#4 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG352 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #1
    sta return
    jmp breturn
  //SEG353 [163] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  breturn_from_b14:
  breturn_from_b15:
  breturn_from_b6:
  //SEG354 [163] phi (byte) current_xpos#19 = (byte) current_xpos#1 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG355 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta return
    jmp breturn
  //SEG356 play_move_leftright::@return
  breturn:
  //SEG357 [164] return 
    rts
  //SEG358 play_move_leftright::@1
  b1:
  //SEG359 [165] (byte) play_collision::xpos#1 ← (byte) current_xpos#1 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx play_collision.xpos
  //SEG360 [166] (byte) play_collision::ypos#1 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda current_ypos
    sta play_collision.ypos
  //SEG361 [167] (byte) play_collision::orientation#1 ← (byte) current_orientation#14 -- vbuz1=vbuz2 
    lda current_orientation
    sta play_collision.orientation
  //SEG362 [168] (byte*~) current_piece#75 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG363 [169] call play_collision 
  //SEG364 [128] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from_b1:
  //SEG365 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
  //SEG366 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
  //SEG367 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
  //SEG368 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#75 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG369 [170] (byte) play_collision::return#1 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda play_collision.return_14
    sta play_collision.return_1
    jmp b14
  //SEG370 play_move_leftright::@14
  b14:
  //SEG371 [171] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1 -- vbuz1=vbuz2 
    lda play_collision.return_1
    sta _8
  //SEG372 [172] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda _8
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG373 play_move_leftright::@11
  b11:
  //SEG374 [173] (byte) current_xpos#4 ← -- (byte) current_xpos#1 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp breturn_from_b11
}
//SEG375 play_move_down
play_move_down: {
    .label _2 = $83
    .label _12 = $85
    .label movedown = $24
    .label return = $2d
    .label key_event = $62
    .label return_3 = $63
  //SEG376 [174] (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#12 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG377 [175] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda key_event
    cmp #KEY_SPACE
    bne b1_from_play_move_down
  //SEG378 [176] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  b8_from_play_move_down:
    jmp b8
  //SEG379 play_move_down::@8
  b8:
  //SEG380 [177] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  b1_from_b8:
  //SEG381 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta movedown
    jmp b1
  //SEG382 [177] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
  //SEG383 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta movedown
    jmp b1
  //SEG384 play_move_down::@1
  b1:
  //SEG385 [178] call keyboard_event_pressed 
  //SEG386 [263] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG387 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG388 [179] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_12
    jmp b17
  //SEG389 play_move_down::@17
  b17:
  //SEG390 [180] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_12
    sta _2
  //SEG391 [181] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b17
    jmp b9
  //SEG392 play_move_down::@9
  b9:
  //SEG393 [182] if((byte) current_movedown_counter#1<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b9
    jmp b10
  //SEG394 play_move_down::@10
  b10:
  //SEG395 [183] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc movedown
  //SEG396 [184] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  b2_from_b10:
  b2_from_b17:
  b2_from_b9:
  //SEG397 [184] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
    jmp b2
  //SEG398 play_move_down::@2
  b2:
  //SEG399 [185] if((byte) current_movedown_counter#1<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4_from_b2
    jmp b11
  //SEG400 play_move_down::@11
  b11:
  //SEG401 [186] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc movedown
  //SEG402 [187] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  b4_from_b11:
  b4_from_b2:
  //SEG403 [187] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
    jmp b4
  //SEG404 play_move_down::@4
  b4:
  //SEG405 [188] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda movedown
    cmp #0
    beq breturn_from_b4
    jmp b12
  //SEG406 play_move_down::@12
  b12:
  //SEG407 [189] (byte) play_collision::ypos#0 ← (byte) current_ypos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_ypos
    iny
    sty play_collision.ypos
  //SEG408 [190] (byte) play_collision::xpos#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG409 [191] (byte) play_collision::orientation#0 ← (byte) current_orientation#10 -- vbuz1=vbuz2 
    lda current_orientation
    sta play_collision.orientation
  //SEG410 [192] (byte*~) current_piece#74 ← (byte*) current_piece#16 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG411 [193] call play_collision 
  //SEG412 [128] phi from play_move_down::@12 to play_collision [phi:play_move_down::@12->play_collision]
  play_collision_from_b12:
  //SEG413 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#0 [phi:play_move_down::@12->play_collision#0] -- register_copy 
  //SEG414 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#0 [phi:play_move_down::@12->play_collision#1] -- register_copy 
  //SEG415 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#0 [phi:play_move_down::@12->play_collision#2] -- register_copy 
  //SEG416 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#74 [phi:play_move_down::@12->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG417 [194] (byte) play_collision::return#0 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda play_collision.return_14
    sta play_collision.return
    jmp b18
  //SEG418 play_move_down::@18
  b18:
  //SEG419 [195] (byte~) play_move_down::$12 ← (byte) play_collision::return#0 -- vbuz1=vbuz2 
    lda play_collision.return
    sta _12
  //SEG420 [196] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuz1_eq_vbuc1_then_la1 
    lda _12
    cmp #COLLISION_NONE
    beq b6
  //SEG421 [197] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  b13_from_b18:
    jmp b13
  //SEG422 play_move_down::@13
  b13:
  //SEG423 [198] call play_lock_current 
    jsr play_lock_current
  //SEG424 [199] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  b19_from_b13:
    jmp b19
  //SEG425 play_move_down::@19
  b19:
  //SEG426 [200] call play_remove_lines 
  //SEG427 [224] phi from play_move_down::@19 to play_remove_lines [phi:play_move_down::@19->play_remove_lines]
  play_remove_lines_from_b19:
    jsr play_remove_lines
  //SEG428 [201] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  b20_from_b19:
    jmp b20
  //SEG429 play_move_down::@20
  b20:
  //SEG430 [202] call play_spawn_current 
  //SEG431 [208] phi from play_move_down::@20 to play_spawn_current [phi:play_move_down::@20->play_spawn_current]
  play_spawn_current_from_b20:
    jsr play_spawn_current
  //SEG432 [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG433 [204] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  b7_from_b20:
  //SEG434 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#12 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG435 [204] phi (byte) current_xpos#33 = (byte) current_xpos#23 [phi:play_move_down::@20->play_move_down::@7#1] -- register_copy 
  //SEG436 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#16 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG437 [204] phi (byte) current_orientation#29 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG438 [204] phi (byte*) current_piece#20 = (byte*~) current_piece#78 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG439 [204] phi (byte) current_ypos#29 = (byte) current_ypos#18 [phi:play_move_down::@20->play_move_down::@7#5] -- register_copy 
    jmp b7
  //SEG440 play_move_down::@7
  b7:
  //SEG441 [205] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  breturn_from_b7:
  //SEG442 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#20 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG443 [205] phi (byte) current_xpos#1 = (byte) current_xpos#33 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG444 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#26 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG445 [205] phi (byte) current_orientation#14 = (byte) current_orientation#29 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG446 [205] phi (byte*) current_piece#10 = (byte*) current_piece#20 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG447 [205] phi (byte) current_ypos#13 = (byte) current_ypos#29 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG448 [205] phi (byte) current_movedown_counter#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG449 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuz1=vbuc1 
    lda #1
    sta return
    jmp breturn
  //SEG450 [205] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  breturn_from_b4:
  //SEG451 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#15 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG452 [205] phi (byte) current_xpos#1 = (byte) current_xpos#10 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG453 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#20 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG454 [205] phi (byte) current_orientation#14 = (byte) current_orientation#10 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG455 [205] phi (byte*) current_piece#10 = (byte*) current_piece#16 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG456 [205] phi (byte) current_ypos#13 = (byte) current_ypos#21 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG457 [205] phi (byte) current_movedown_counter#10 = (byte) current_movedown_counter#1 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG458 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuz1=vbuc1 
    lda #0
    sta return
    jmp breturn
  //SEG459 play_move_down::@return
  breturn:
  //SEG460 [206] return 
    rts
  //SEG461 play_move_down::@6
  b6:
  //SEG462 [207] (byte) current_ypos#0 ← ++ (byte) current_ypos#21 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG463 [204] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  b7_from_b6:
  //SEG464 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#15 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG465 [204] phi (byte) current_xpos#33 = (byte) current_xpos#10 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG466 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#20 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG467 [204] phi (byte) current_orientation#29 = (byte) current_orientation#10 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG468 [204] phi (byte*) current_piece#20 = (byte*) current_piece#16 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG469 [204] phi (byte) current_ypos#29 = (byte) current_ypos#0 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG470 play_spawn_current
play_spawn_current: {
    .label _1 = $88
    .label _3 = $86
    .label piece_idx = $2e
  //SEG471 [209] phi from play_spawn_current to play_spawn_current::@1 [phi:play_spawn_current->play_spawn_current::@1]
  b1_from_play_spawn_current:
  //SEG472 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:play_spawn_current->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #7
    sta piece_idx
    jmp b1
  //SEG473 play_spawn_current::@1
  b1:
  //SEG474 [210] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda piece_idx
    cmp #7
    beq b2_from_b1
    jmp b3
  //SEG475 play_spawn_current::@3
  b3:
  //SEG476 [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda piece_idx
    asl
    sta _3
  //SEG477 [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    ldy _3
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG478 [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy piece_idx
    lda PIECES_START_X,y
    sta current_xpos
  //SEG479 [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy piece_idx
    lda PIECES_START_Y,y
    sta current_ypos
  //SEG480 [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy piece_idx
    lda PIECES_CHARS,y
    sta current_piece_char
    jmp breturn
  //SEG481 play_spawn_current::@return
  breturn:
  //SEG482 [216] return 
    rts
  //SEG483 [217] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  b2_from_b1:
    jmp b2
  //SEG484 play_spawn_current::@2
  b2:
  //SEG485 [218] call sid_rnd 
    jsr sid_rnd
  //SEG486 [219] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0 -- vbuz1=vbuz2 
    lda sid_rnd.return
    sta sid_rnd.return_2
    jmp b7
  //SEG487 play_spawn_current::@7
  b7:
  //SEG488 [220] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2 -- vbuz1=vbuz2 
    lda sid_rnd.return_2
    sta _1
  //SEG489 [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and _1
    sta piece_idx
  //SEG490 [209] phi from play_spawn_current::@7 to play_spawn_current::@1 [phi:play_spawn_current::@7->play_spawn_current::@1]
  b1_from_b7:
  //SEG491 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@7->play_spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG492 sid_rnd
sid_rnd: {
    .label return = $89
    .label return_2 = $87
  //SEG493 [222] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuz1=_deref_pbuc1 
    lda SID_VOICE3_OSC
    sta return
    jmp breturn
  //SEG494 sid_rnd::@return
  breturn:
  //SEG495 [223] return 
    rts
}
//SEG496 play_remove_lines
play_remove_lines: {
    .label c = $8a
    .label r = $30
    .label w = $33
    .label x = $31
    .label y = $2f
    .label full = $32
  //SEG497 [225] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  b1_from_play_remove_lines:
  //SEG498 [225] phi (byte) play_remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG499 [225] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta w
  //SEG500 [225] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta r
    jmp b1
  //SEG501 [225] phi from play_remove_lines::@4 to play_remove_lines::@1 [phi:play_remove_lines::@4->play_remove_lines::@1]
  b1_from_b4:
  //SEG502 [225] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@4->play_remove_lines::@1#0] -- register_copy 
  //SEG503 [225] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4->play_remove_lines::@1#1] -- register_copy 
  //SEG504 [225] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@4->play_remove_lines::@1#2] -- register_copy 
    jmp b1
  //SEG505 play_remove_lines::@1
  b1:
  //SEG506 [226] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  b2_from_b1:
  //SEG507 [226] phi (byte) play_remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG508 [226] phi (byte) play_remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG509 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
  //SEG510 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG511 [226] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  b2_from_b3:
  //SEG512 [226] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
  //SEG513 [226] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
  //SEG514 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
  //SEG515 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG516 play_remove_lines::@2
  b2:
  //SEG517 [227] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy r
    lda playfield,y
    sta c
  //SEG518 [228] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuz1=_dec_vbuz1 
    dec r
  //SEG519 [229] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@17 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b17_from_b2
  //SEG520 [230] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  b3_from_b2:
  //SEG521 [230] phi (byte) play_remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
    jmp b3
  //SEG522 play_remove_lines::@3
  b3:
  //SEG523 [231] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda c
    ldy w
    sta playfield,y
  //SEG524 [232] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuz1=_dec_vbuz1 
    dec w
  //SEG525 [233] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG526 [234] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b3
    jmp b9
  //SEG527 play_remove_lines::@9
  b9:
  //SEG528 [235] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4_from_b9
    jmp b10
  //SEG529 play_remove_lines::@10
  b10:
  //SEG530 [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc w
    sta w
  //SEG531 [237] phi from play_remove_lines::@10 play_remove_lines::@9 to play_remove_lines::@4 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4]
  b4_from_b10:
  b4_from_b9:
  //SEG532 [237] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#2 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4#0] -- register_copy 
    jmp b4
  //SEG533 play_remove_lines::@4
  b4:
  //SEG534 [238] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG535 [239] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG536 [240] phi from play_remove_lines::@4 play_remove_lines::@6 to play_remove_lines::@5 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5]
  b5_from_b4:
  b5_from_b6:
  //SEG537 [240] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5#0] -- register_copy 
    jmp b5
  //SEG538 play_remove_lines::@5
  b5:
  //SEG539 [241] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda w
    cmp #$ff
    bne b6
    jmp breturn
  //SEG540 play_remove_lines::@return
  breturn:
  //SEG541 [242] return 
    rts
  //SEG542 play_remove_lines::@6
  b6:
  //SEG543 [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy w
    lda #0
    sta playfield,y
  //SEG544 [244] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuz1=_dec_vbuz1 
    dec w
    jmp b5_from_b6
  //SEG545 [245] phi from play_remove_lines::@2 to play_remove_lines::@17 [phi:play_remove_lines::@2->play_remove_lines::@17]
  b17_from_b2:
    jmp b17
  //SEG546 play_remove_lines::@17
  b17:
  //SEG547 [230] phi from play_remove_lines::@17 to play_remove_lines::@3 [phi:play_remove_lines::@17->play_remove_lines::@3]
  b3_from_b17:
  //SEG548 [230] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@17->play_remove_lines::@3#0] -- register_copy 
    jmp b3
}
//SEG549 play_lock_current
play_lock_current: {
    .label ypos2 = $34
    .label playfield_line = $8b
    .label col = $37
    .label i = $8d
    .label c = $38
    .label l = $35
    .label i_2 = $36
    .label i_3 = $36
    .label i_7 = $36
    .label i_9 = $36
  //SEG550 [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda current_ypos
    asl
    sta ypos2
  //SEG551 [247] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  b1_from_play_lock_current:
  //SEG552 [247] phi (byte) play_lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG553 [247] phi (byte) play_lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG554 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG555 play_lock_current::@1
  b1:
  //SEG556 [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG557 [249] (byte) play_lock_current::col#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG558 [250] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  b2_from_b1:
  //SEG559 [250] phi (byte) play_lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG560 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
  //SEG561 [250] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp b2
  //SEG562 play_lock_current::@2
  b2:
  //SEG563 [251] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG564 [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
  //SEG565 play_lock_current::@4
  b4:
  //SEG566 [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_char
    ldy col
    sta (playfield_line),y
    jmp b3
  //SEG567 play_lock_current::@3
  b3:
  //SEG568 [254] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG569 [255] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG570 [256] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b8
    jmp b5
  //SEG571 play_lock_current::@5
  b5:
  //SEG572 [257] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG573 [258] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG574 [259] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
    jmp breturn
  //SEG575 play_lock_current::@return
  breturn:
  //SEG576 [260] return 
    rts
  //SEG577 play_lock_current::@7
  b7:
  //SEG578 [261] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG579 [247] phi from play_lock_current::@7 to play_lock_current::@1 [phi:play_lock_current::@7->play_lock_current::@1]
  b1_from_b7:
  //SEG580 [247] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@7->play_lock_current::@1#0] -- register_copy 
  //SEG581 [247] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@7->play_lock_current::@1#1] -- register_copy 
  //SEG582 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#1 [phi:play_lock_current::@7->play_lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG583 play_lock_current::@8
  b8:
  //SEG584 [262] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG585 [250] phi from play_lock_current::@8 to play_lock_current::@2 [phi:play_lock_current::@8->play_lock_current::@2]
  b2_from_b8:
  //SEG586 [250] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@8->play_lock_current::@2#0] -- register_copy 
  //SEG587 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#1 [phi:play_lock_current::@8->play_lock_current::@2#1] -- register_copy 
  //SEG588 [250] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@8->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG589 keyboard_event_pressed
keyboard_event_pressed: {
    .label _0 = $8e
    .label _1 = $90
    .label return = $95
    .label return_1 = $97
    .label return_2 = $99
    .label row_bits = $8f
    .label return_10 = $9b
    .label keycode = $39
    .label return_11 = $91
    .label return_12 = $82
  //SEG590 [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_ror_3 
    lda keycode
    lsr
    lsr
    lsr
    sta _0
  //SEG591 [265] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda keyboard_scan_values,y
    sta row_bits
  //SEG592 [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and keycode
    sta _1
  //SEG593 [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_bits
    ldy _1
    and keyboard_matrix_col_bitmask,y
    sta return_11
    jmp breturn
  //SEG594 keyboard_event_pressed::@return
  breturn:
  //SEG595 [268] return 
    rts
}
//SEG596 keyboard_event_get
keyboard_event_get: {
    .label return = $3a
    .label return_3 = $60
  //SEG597 [269] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b3
  //SEG598 keyboard_event_get::@3
  b3:
  //SEG599 [270] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG600 [271] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy keyboard_events_size
    lda keyboard_events,y
    sta return
  //SEG601 [272] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  breturn_from_b3:
  //SEG602 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG603 [272] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG604 [272] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG605 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG606 [272] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta return
    jmp breturn
  //SEG607 keyboard_event_get::@return
  breturn:
  //SEG608 [273] return 
    rts
}
//SEG609 keyboard_event_scan
keyboard_event_scan: {
    .label _3 = $9e
    .label _4 = $9f
    .label _11 = $a1
    .label _14 = $96
    .label _18 = $98
    .label _22 = $9a
    .label _26 = $9c
    .label row_scan = $94
    .label keycode = $3e
    .label row = $3b
    .label col = $3d
    .label event_type = $a0
  //SEG610 [275] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  b1_from_keyboard_event_scan:
  //SEG611 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG612 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG613 [275] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b1
  //SEG614 [275] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  b1_from_b3:
  //SEG615 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG616 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG617 [275] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
    jmp b1
  //SEG618 keyboard_event_scan::@1
  b1:
  //SEG619 [276] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda row
    sta keyboard_matrix_read.rowid
  //SEG620 [277] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG621 [278] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return
    sta keyboard_matrix_read.return_2
    jmp b25
  //SEG622 keyboard_event_scan::@25
  b25:
  //SEG623 [279] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda keyboard_matrix_read.return_2
    sta row_scan
  //SEG624 [280] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b4_from_b25
    jmp b13
  //SEG625 keyboard_event_scan::@13
  b13:
  //SEG626 [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG627 [282] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  b3_from_b13:
  b3_from_b19:
  //SEG628 [282] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG629 [282] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
    jmp b3
  //SEG630 keyboard_event_scan::@3
  b3:
  //SEG631 [283] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG632 [284] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1_from_b3
  //SEG633 [285] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  b20_from_b3:
    jmp b20
  //SEG634 keyboard_event_scan::@20
  b20:
  //SEG635 [286] call keyboard_event_pressed 
  //SEG636 [263] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  keyboard_event_pressed_from_b20:
  //SEG637 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG638 [287] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return
    jmp b26
  //SEG639 keyboard_event_scan::@26
  b26:
  //SEG640 [288] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return
    sta _14
  //SEG641 [289] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuz1_eq_0_then_la1 
    lda _14
    cmp #0
    beq b9_from_b26
  //SEG642 [290] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  b21_from_b26:
    jmp b21
  //SEG643 keyboard_event_scan::@21
  b21:
  //SEG644 [291] phi from keyboard_event_scan::@21 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9]
  b9_from_b21:
  //SEG645 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9#0] -- vbuz1=vbuc1 
    lda #0|KEY_MODIFIER_LSHIFT
    sta keyboard_modifiers
    jmp b9
  //SEG646 [291] phi from keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9]
  b9_from_b26:
  //SEG647 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9#0] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_modifiers
    jmp b9
  //SEG648 keyboard_event_scan::@9
  b9:
  //SEG649 [292] call keyboard_event_pressed 
  //SEG650 [263] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  keyboard_event_pressed_from_b9:
  //SEG651 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG652 [293] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_1
    jmp b27
  //SEG653 keyboard_event_scan::@27
  b27:
  //SEG654 [294] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_1
    sta _18
  //SEG655 [295] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda _18
    cmp #0
    beq b10_from_b27
    jmp b22
  //SEG656 keyboard_event_scan::@22
  b22:
  //SEG657 [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_RSHIFT
    ora keyboard_modifiers
    sta keyboard_modifiers
  //SEG658 [297] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  b10_from_b22:
  b10_from_b27:
  //SEG659 [297] phi (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
  //SEG660 keyboard_event_scan::@10
  b10:
  //SEG661 [298] call keyboard_event_pressed 
  //SEG662 [263] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  keyboard_event_pressed_from_b10:
  //SEG663 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG664 [299] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_2
    jmp b28
  //SEG665 keyboard_event_scan::@28
  b28:
  //SEG666 [300] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_2
    sta _22
  //SEG667 [301] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda _22
    cmp #0
    beq b11_from_b28
    jmp b23
  //SEG668 keyboard_event_scan::@23
  b23:
  //SEG669 [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_CTRL
    ora keyboard_modifiers
    sta keyboard_modifiers
  //SEG670 [303] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  b11_from_b23:
  b11_from_b28:
  //SEG671 [303] phi (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#4 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11#0] -- register_copy 
    jmp b11
  //SEG672 keyboard_event_scan::@11
  b11:
  //SEG673 [304] call keyboard_event_pressed 
  //SEG674 [263] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  keyboard_event_pressed_from_b11:
  //SEG675 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG676 [305] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_11
    sta keyboard_event_pressed.return_10
    jmp b29
  //SEG677 keyboard_event_scan::@29
  b29:
  //SEG678 [306] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda keyboard_event_pressed.return_10
    sta _26
  //SEG679 [307] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda _26
    cmp #0
    beq breturn
    jmp b24
  //SEG680 keyboard_event_scan::@24
  b24:
  //SEG681 [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuz1=vbuz2_bor_vbuc1 
    lda #KEY_MODIFIER_COMMODORE
    ora keyboard_modifiers
    sta keyboard_modifiers_5
    jmp breturn
  //SEG682 keyboard_event_scan::@return
  breturn:
  //SEG683 [309] return 
    rts
  //SEG684 [310] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b4_from_b25:
  //SEG685 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG686 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG687 [310] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuz1=vbuc1 
    lda #0
    sta col
    jmp b4
  //SEG688 [310] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  b4_from_b5:
  //SEG689 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG690 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG691 [310] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
    jmp b4
  //SEG692 keyboard_event_scan::@4
  b4:
  //SEG693 [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
    sta _3
  //SEG694 [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda _3
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta _4
  //SEG695 [313] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuz1_eq_0_then_la1 
    lda _4
    cmp #0
    beq b5_from_b4
    jmp b15
  //SEG696 keyboard_event_scan::@15
  b15:
  //SEG697 [314] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5_from_b15
    jmp b16
  //SEG698 keyboard_event_scan::@16
  b16:
  //SEG699 [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda row_scan
    ldy col
    and keyboard_matrix_col_bitmask,y
    sta event_type
  //SEG700 [316] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuz1_eq_0_then_la1 
    lda event_type
    cmp #0
    beq b7
    jmp b17
  //SEG701 keyboard_event_scan::@17
  b17:
  //SEG702 [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG703 [318] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG704 [319] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  b5_from_b15:
  b5_from_b17:
  b5_from_b4:
  b5_from_b7:
  //SEG705 [319] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
    jmp b5
  //SEG706 keyboard_event_scan::@5
  b5:
  //SEG707 [320] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG708 [321] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG709 [322] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda col
    cmp #8
    bne b4_from_b5
    jmp b19
  //SEG710 keyboard_event_scan::@19
  b19:
  //SEG711 [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3_from_b19
  //SEG712 keyboard_event_scan::@7
  b7:
  //SEG713 [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora keycode
    sta _11
  //SEG714 [325] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _11
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG715 [326] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5_from_b7
}
//SEG716 keyboard_matrix_read
keyboard_matrix_read: {
    .label return = $a2
    .label rowid = $92
    .label return_2 = $93
  //SEG717 [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
  //SEG718 [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta return
    jmp breturn
  //SEG719 keyboard_matrix_read::@return
  breturn:
  //SEG720 [329] return 
    rts
}
//SEG721 render_show
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .label d018val = $40
  //SEG722 [330] if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda render_screen_show
    cmp #0
    beq toD0181_from_render_show
  //SEG723 [331] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
  //SEG724 render_show::toD0182
  toD0182:
  //SEG725 [332] phi from render_show::toD0182 to render_show::@2 [phi:render_show::toD0182->render_show::@2]
  b2_from_toD0182:
  //SEG726 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@2#0] -- vbuz1=vbuc1 
    lda #toD0182_return
    sta d018val
    jmp b2
  //SEG727 render_show::@2
  b2:
  //SEG728 [333] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuz1 
    lda d018val
    sta D018
  //SEG729 [334] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda render_screen_show
    sta render_screen_showing_1
    jmp breturn
  //SEG730 render_show::@return
  breturn:
  //SEG731 [335] return 
    rts
  //SEG732 [336] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
  //SEG733 render_show::toD0181
  toD0181:
  //SEG734 [332] phi from render_show::toD0181 to render_show::@2 [phi:render_show::toD0181->render_show::@2]
  b2_from_toD0181:
  //SEG735 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@2#0] -- vbuz1=vbuc1 
    lda #toD0181_return
    sta d018val
    jmp b2
}
//SEG736 play_init
play_init: {
    .label _1 = $a4
    .label pli = $42
    .label idx = $44
    .label j = $41
  //SEG737 [338] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  b1_from_play_init:
  //SEG738 [338] phi (byte) play_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG739 [338] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG740 [338] phi (byte) play_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG741 [338] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  b1_from_b1:
  //SEG742 [338] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
  //SEG743 [338] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
  //SEG744 [338] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp b1
  //SEG745 play_init::@1
  b1:
  //SEG746 [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda j
    asl
    sta _1
  //SEG747 [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _1
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG748 [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda idx
    ldy j
    sta playfield_lines_idx,y
  //SEG749 [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG750 [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG751 [344] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG752 [345] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp b2
  //SEG753 play_init::@2
  b2:
  //SEG754 [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    jmp breturn
  //SEG755 play_init::@return
  breturn:
  //SEG756 [347] return 
    rts
}
//SEG757 sprites_irq_init
sprites_irq_init: {
  //SEG758 asm { sei  }
    sei
  //SEG759 [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG760 asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
  //SEG761 [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG762 [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG763 [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG764 [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG765 [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG766 [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG767 [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
  //SEG768 asm { cli  }
    cli
    jmp breturn
  //SEG769 sprites_irq_init::@return
  breturn:
  //SEG770 [359] return 
    rts
}
//SEG771 sprites_init
sprites_init: {
    .label s2 = $a5
    .label xpos = $46
    .label s = $45
  //SEG772 [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG773 [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG774 [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
  //SEG775 [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
  //SEG776 [364] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG777 [364] phi (byte) sprites_init::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta xpos
  //SEG778 [364] phi (byte) sprites_init::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
    jmp b1
  //SEG779 [364] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG780 [364] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
  //SEG781 [364] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp b1
  //SEG782 sprites_init::@1
  b1:
  //SEG783 [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda s
    asl
    sta s2
  //SEG784 [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda xpos
    ldy s2
    sta SPRITES_XPOS,y
  //SEG785 [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy s
    lda #BLACK
    sta SPRITES_COLS,y
  //SEG786 [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG787 [369] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG788 [370] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda s
    cmp #4
    bne b1_from_b1
    jmp breturn
  //SEG789 sprites_init::@return
  breturn:
  //SEG790 [371] return 
    rts
}
//SEG791 render_init
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_CHARSET)>>6
    .label _12 = $a6
    .label _22 = $a8
    .label _23 = $a9
    .label c = $4a
    .label line = $47
    .label l = $49
    .label li_1 = $4c
    .label li_2 = $4e
    .label i = $4b
    jmp vicSelectGfxBank1
  //SEG792 render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG793 [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG794 [374] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG795 render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG796 render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG797 [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b7
  //SEG798 render_init::@7
  b7:
  //SEG799 [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG800 [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG801 [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
  //SEG802 [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG803 [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0 -- _deref_pbuc1=vbuc2 
    lda #CYAN
    sta BGCOL3
  //SEG804 [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
  //SEG805 [382] call render_screen_original 
  //SEG806 [412] phi from render_init::@7 to render_screen_original [phi:render_init::@7->render_screen_original]
  render_screen_original_from_b7:
  //SEG807 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@7->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG808 [383] phi from render_init::@7 to render_init::@8 [phi:render_init::@7->render_init::@8]
  b8_from_b7:
    jmp b8
  //SEG809 render_init::@8
  b8:
  //SEG810 [384] call render_screen_original 
  //SEG811 [412] phi from render_init::@8 to render_screen_original [phi:render_init::@8->render_screen_original]
  render_screen_original_from_b8:
  //SEG812 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@8->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG813 [385] phi from render_init::@8 to render_init::@9 [phi:render_init::@8->render_init::@9]
  b9_from_b8:
    jmp b9
  //SEG814 render_init::@9
  b9:
  //SEG815 [386] call fill 
  //SEG816 [406] phi from render_init::@9 to fill [phi:render_init::@9->fill]
  fill_from_b9:
    jsr fill
  //SEG817 [387] phi from render_init::@9 to render_init::@1 [phi:render_init::@9->render_init::@1]
  b1_from_b9:
  //SEG818 [387] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_init::@9->render_init::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta l
  //SEG819 [387] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@9->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+4*$28+$10
    sta line
    lda #>COLS+4*$28+$10
    sta line+1
    jmp b1
  //SEG820 [387] phi from render_init::@4 to render_init::@1 [phi:render_init::@4->render_init::@1]
  b1_from_b4:
  //SEG821 [387] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@4->render_init::@1#0] -- register_copy 
  //SEG822 [387] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@4->render_init::@1#1] -- register_copy 
    jmp b1
  //SEG823 render_init::@1
  b1:
  //SEG824 [388] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  b2_from_b1:
  //SEG825 [388] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b2
  //SEG826 [388] phi from render_init::@2 to render_init::@2 [phi:render_init::@2->render_init::@2]
  b2_from_b2:
  //SEG827 [388] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@2->render_init::@2#0] -- register_copy 
    jmp b2
  //SEG828 render_init::@2
  b2:
  //SEG829 [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuz3 
    lda c
    clc
    adc line
    sta _12
    lda #0
    adc line+1
    sta _12+1
  //SEG830 [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (_12),y
  //SEG831 [391] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG832 [392] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b4
  //SEG833 render_init::@4
  b4:
  //SEG834 [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG835 [394] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG836 [395] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG837 [396] phi from render_init::@4 to render_init::@3 [phi:render_init::@4->render_init::@3]
  b3_from_b4:
  //SEG838 [396] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2+1
  //SEG839 [396] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1+1
  //SEG840 [396] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@4->render_init::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b3
  //SEG841 [396] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  b3_from_b3:
  //SEG842 [396] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
  //SEG843 [396] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@3->render_init::@3#1] -- register_copy 
  //SEG844 [396] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@3->render_init::@3#2] -- register_copy 
    jmp b3
  //SEG845 render_init::@3
  b3:
  //SEG846 [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _22
  //SEG847 [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _22
    lda li_1
    sta screen_lines_1,y
    lda li_1+1
    sta screen_lines_1+1,y
  //SEG848 [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _23
  //SEG849 [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _23
    lda li_2
    sta screen_lines_2,y
    lda li_2+1
    sta screen_lines_2+1,y
  //SEG850 [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_1
    clc
    adc #$28
    sta li_1
    bcc !+
    inc li_1+1
  !:
  //SEG851 [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_2
    clc
    adc #$28
    sta li_2
    bcc !+
    inc li_2+1
  !:
  //SEG852 [403] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG853 [404] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #PLAYFIELD_LINES-1+1
    bne b3_from_b3
    jmp breturn
  //SEG854 render_init::@return
  breturn:
  //SEG855 [405] return 
    rts
}
//SEG856 fill
fill: {
    .const size = $3e8
    .label end = COLS+size
    .label addr = $50
  //SEG857 [407] phi from fill to fill::@1 [phi:fill->fill::@1]
  b1_from_fill:
  //SEG858 [407] phi (byte*) fill::addr#2 = (const byte*) COLS#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta addr
    lda #>COLS
    sta addr+1
    jmp b1
  //SEG859 [407] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  b1_from_b1:
  //SEG860 [407] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG861 fill::@1
  b1:
  //SEG862 [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (addr),y
  //SEG863 [409] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG864 [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1_from_b1
    lda addr
    cmp #<end
    bne b1_from_b1
    jmp breturn
  //SEG865 fill::@return
  breturn:
  //SEG866 [411] return 
    rts
}
//SEG867 render_screen_original
render_screen_original: {
    .const SPACE = 0
    .label screen = $56
    .label x = $58
    .label c = $55
    .label orig = $53
    .label y = $52
  //SEG868 [413] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  b1_from_render_screen_original:
  //SEG869 [413] phi (byte) render_screen_original::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG870 [413] phi (byte*) render_screen_original::orig#5 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig+1
  //SEG871 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#11 [phi:render_screen_original->render_screen_original::@1#2] -- register_copy 
    jmp b1
  //SEG872 [413] phi from render_screen_original::@9 to render_screen_original::@1 [phi:render_screen_original::@9->render_screen_original::@1]
  b1_from_b9:
  //SEG873 [413] phi (byte) render_screen_original::y#8 = (byte) render_screen_original::y#1 [phi:render_screen_original::@9->render_screen_original::@1#0] -- register_copy 
  //SEG874 [413] phi (byte*) render_screen_original::orig#5 = (byte*) render_screen_original::orig#1 [phi:render_screen_original::@9->render_screen_original::@1#1] -- register_copy 
  //SEG875 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#12 [phi:render_screen_original::@9->render_screen_original::@1#2] -- register_copy 
    jmp b1
  //SEG876 render_screen_original::@1
  b1:
  //SEG877 [414] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  b2_from_b1:
  //SEG878 [414] phi (byte) render_screen_original::x#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG879 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    jmp b2
  //SEG880 [414] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  b2_from_b2:
  //SEG881 [414] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
  //SEG882 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    jmp b2
  //SEG883 render_screen_original::@2
  b2:
  //SEG884 [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG885 [416] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG886 [417] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG887 [418] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #4
    bne b2_from_b2
  //SEG888 [419] phi from render_screen_original::@2 render_screen_original::@4 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG889 [419] phi (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#0] -- register_copy 
  //SEG890 [419] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#1] -- register_copy 
  //SEG891 [419] phi (byte*) render_screen_original::orig#2 = (byte*) render_screen_original::orig#5 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#2] -- register_copy 
    jmp b3
  //SEG892 render_screen_original::@3
  b3:
  //SEG893 [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=_deref_pbuz2_plus_1 
    ldy #0
    lda (orig),y
    clc
    adc #1
    sta c
  //SEG894 [421] (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2 -- pbuz1=_inc_pbuz1 
    inc orig
    bne !+
    inc orig+1
  !:
  //SEG895 [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11 -- vbuz1_gt_vbuc1_then_la1 
    lda x
    cmp #$e
    beq !+
    bcs b11
  !:
  //SEG896 [423] phi from render_screen_original::@3 render_screen_original::@7 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG897 [423] phi (byte) render_screen_original::c#2 = (byte) render_screen_original::c#0 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4#0] -- register_copy 
    jmp b4
  //SEG898 render_screen_original::@4
  b4:
  //SEG899 [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (screen),y
  //SEG900 [425] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#10 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG901 [426] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG902 [427] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$24
    bne b3_from_b4
  //SEG903 [428] phi from render_screen_original::@4 render_screen_original::@5 to render_screen_original::@5 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5]
  b5_from_b4:
  b5_from_b5:
  //SEG904 [428] phi (byte) render_screen_original::x#7 = (byte) render_screen_original::x#2 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#0] -- register_copy 
  //SEG905 [428] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#1] -- register_copy 
    jmp b5
  //SEG906 render_screen_original::@5
  b5:
  //SEG907 [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG908 [430] (byte*) render_screen_original::screen#12 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG909 [431] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG910 [432] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$28
    bne b5_from_b5
    jmp b9
  //SEG911 render_screen_original::@9
  b9:
  //SEG912 [433] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG913 [434] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b9
    jmp breturn
  //SEG914 render_screen_original::@return
  breturn:
  //SEG915 [435] return 
    rts
  //SEG916 render_screen_original::@11
  b11:
  //SEG917 [436] if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$1b
    bcc b7
  //SEG918 [423] phi from render_screen_original::@11 to render_screen_original::@4 [phi:render_screen_original::@11->render_screen_original::@4]
  b4_from_b11:
    jmp b4
  //SEG919 render_screen_original::@7
  b7:
  //SEG920 [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$c0
    ora c
    sta c
    jmp b4_from_b7
}
//SEG921 sid_rnd_init
sid_rnd_init: {
  //SEG922 [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG923 [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG924 sid_rnd_init::@return
  breturn:
  //SEG925 [440] return 
    rts
}
//SEG926 sprites_irq
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
    .label _4 = $b1
    .label ypos = $aa
    .label ptr = $ab
    .label ptr_1 = $b5
    .label ptr_2 = $b6
    .label ptr_3 = $ac
    .label ptr_4 = $ad
    .label raster_next = $5a
  //SEG927 entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG928 [441] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuz1=vbuz2 
    lda irq_sprite_ypos
    sta ypos
  //SEG929 [442] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda ypos
    sta SPRITES_YPOS
  //SEG930 [443] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda ypos
    sta SPRITES_YPOS+2
  //SEG931 [444] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda ypos
    sta SPRITES_YPOS+4
  //SEG932 [445] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda ypos
    sta SPRITES_YPOS+6
    jmp b1
  //SEG933 sprites_irq::@1
  b1:
  //SEG934 [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bcc b1
    jmp b7
  //SEG935 sprites_irq::@7
  b7:
  //SEG936 [447] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuz1=vbuz2 
    lda irq_sprite_ptr
    sta ptr
  //SEG937 [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2 -- vbuz1_eq_0_then_la1 
    lda render_screen_showing
    cmp #0
    beq b2
    jmp b8
  //SEG938 sprites_irq::@8
  b8:
  //SEG939 [449] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda ptr
    sta PLAYFIELD_SPRITE_PTRS_2
  //SEG940 [450] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy ptr
    iny
    sty ptr_3
  //SEG941 [451] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+1
  //SEG942 [452] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+2
  //SEG943 [453] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuz1=_inc_vbuz2 
    ldy ptr_3
    iny
    sty ptr_4
  //SEG944 [454] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuz1 
    lda ptr_4
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp b3
  //SEG945 sprites_irq::@3
  b3:
  //SEG946 [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz2 
    ldy irq_cnt
    iny
    sty irq_cnt_1
  //SEG947 [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt_1
    cmp #$a
    beq b4
    jmp b10
  //SEG948 sprites_irq::@10
  b10:
  //SEG949 [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next_2
  //SEG950 [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz2_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos_2
  //SEG951 [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr_2
  //SEG952 [460] phi from sprites_irq::@10 sprites_irq::@13 to sprites_irq::@5 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5]
  b5_from_b10:
  b5_from_b13:
  //SEG953 [460] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#2 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5#0] -- register_copy 
    jmp b5
  //SEG954 sprites_irq::@5
  b5:
  //SEG955 [461] (byte) sprites_irq::raster_next#0 ← (byte) irq_raster_next#13 -- vbuz1=vbuz2 
    lda irq_raster_next_13
    sta raster_next
  //SEG956 [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and raster_next
    sta _4
  //SEG957 [463] if((byte~) sprites_irq::$4!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto sprites_irq::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda _4
    cmp #3
    bne b6_from_b5
    jmp b12
  //SEG958 sprites_irq::@12
  b12:
  //SEG959 [464] (byte) sprites_irq::raster_next#1 ← (byte) sprites_irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_minus_1 
    dec raster_next
  //SEG960 [465] phi from sprites_irq::@12 sprites_irq::@5 to sprites_irq::@6 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6]
  b6_from_b12:
  b6_from_b5:
  //SEG961 [465] phi (byte) sprites_irq::raster_next#2 = (byte) sprites_irq::raster_next#1 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6#0] -- register_copy 
    jmp b6
  //SEG962 sprites_irq::@6
  b6:
  //SEG963 [466] *((const byte*) RASTER#0) ← (byte) sprites_irq::raster_next#2 -- _deref_pbuc1=vbuz1 
    lda raster_next
    sta RASTER
  //SEG964 [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG965 sprites_irq::@return
  breturn:
  //SEG966 [468] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
  //SEG967 sprites_irq::@4
  b4:
  //SEG968 [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt_14
  //SEG969 [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next_1
  //SEG970 [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos_1
  //SEG971 [472] phi from sprites_irq::@4 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@4->sprites_irq::toSpritePtr2]
  toSpritePtr2_from_b4:
    jmp toSpritePtr2
  //SEG972 sprites_irq::toSpritePtr2
  toSpritePtr2:
    jmp b13
  //SEG973 sprites_irq::@13
  b13:
  //SEG974 [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr_1
    jmp b5_from_b13
  //SEG975 sprites_irq::@2
  b2:
  //SEG976 [474] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda ptr
    sta PLAYFIELD_SPRITE_PTRS_1
  //SEG977 [475] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy ptr
    iny
    sty ptr_1
  //SEG978 [476] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+1
  //SEG979 [477] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+2
  //SEG980 [478] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuz1=_inc_vbuz2 
    ldy ptr_1
    iny
    sty ptr_2
  //SEG981 [479] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuz1 
    lda ptr_2
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b3
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_CHARS: .byte $58, $59, $99, $59, $58, $58, $99
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 3, 4
  PIECES_START_Y: .byte 2, 1, 1, 1, 2, 0, 1
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  .import binary "nes-screen.iscr"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( ) always clobbers reg byte a 
Statement [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( ) always clobbers reg byte a 
Statement [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0 [ ] ( ) always clobbers reg byte a 
Statement [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16 [ current_ypos#84 current_ypos#18 current_xpos#110 current_xpos#23 current_piece_gfx#100 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ( main:11 [ current_ypos#84 current_ypos#18 current_xpos#110 current_xpos#23 current_piece_gfx#100 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:134 [ play_spawn_current::$3 ]
Statement [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#71 ] ( main:11 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#71 ] ) always clobbers reg byte a 
Statement [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 keyboard_events_size#19 current_movedown_counter#12 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 keyboard_events_size#19 current_movedown_counter#12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
Statement [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_orientation#14 current_piece_gfx#1 current_xpos#1 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_orientation#14 current_piece_gfx#1 current_xpos#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:97 [ main::key_event#0 ]
Statement [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#2 current_orientation#14 current_piece_gfx#1 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#2 current_orientation#14 current_piece_gfx#1 ] ) always clobbers reg byte a 
Statement [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#3 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#3 ] ) always clobbers reg byte a 
Statement [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 current_ypos#85 render_screen_render#62 current_xpos#111 current_piece_gfx#101 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 current_ypos#85 render_screen_render#62 current_xpos#111 current_piece_gfx#101 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ]
Statement [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 [ render_screen_show#16 render_screen_render#11 ] ( main:11::render_screen_swap:68 [ current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_show#16 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 [ render_screen_show#13 render_screen_render#11 ] ( main:11::render_screen_swap:68 [ current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_show#13 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ]
Statement [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ]
Statement [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ]
Statement [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5) [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] ) always clobbers reg byte a 
Statement [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4) [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ]
Statement [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] ) always clobbers reg byte a 
Statement [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ render_screen_render#19 render_screen_render#63 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2 [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ) always clobbers reg byte a 
Statement [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3) [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ) always clobbers reg byte a 
Statement [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:134 [ play_spawn_current::$3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:16 [ render_screen_render#19 render_screen_render#63 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
Statement [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$2 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:105 [ main::render#2 ]
Statement [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#2 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#2 ] ) always clobbers reg byte a 
Statement [119] (byte*~) current_piece#77 ← (byte*) current_piece#10 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#77 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#77 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Statement [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#4 current_piece_gfx#3 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#4 current_piece_gfx#3 ] ) always clobbers reg byte a 
Statement [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$4 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$4 ] ) always clobbers reg byte a 
Statement [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#1 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#1 ] ) always clobbers reg byte a 
Statement [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4 [ play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:101 [ main::render#1 ]
Statement [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] ) always clobbers reg byte a 
Statement [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2) [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ]
Statement [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ play_collision::c#2 play_collision::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:124 [ play_collision::i#1 ]
Statement [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] ) always clobbers reg byte a 
Statement [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [157] (byte*~) current_piece#76 ← (byte*) current_piece#10 [ current_piece#10 current_ypos#13 current_orientation#14 current_piece#76 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 current_xpos#1 ] ( main:11::play_move_leftright:49 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_piece#76 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 current_xpos#1 ] ) always clobbers reg byte a 
Statement [168] (byte*~) current_piece#75 ← (byte*) current_piece#10 [ current_piece#10 current_ypos#13 current_orientation#14 current_piece#75 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 current_xpos#1 ] ( main:11::play_move_leftright:49 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_piece#75 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 current_xpos#1 ] ) always clobbers reg byte a 
Statement [192] (byte*~) current_piece#74 ← (byte*) current_piece#16 [ current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_piece#74 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:11::play_move_down:44 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_piece#74 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ) always clobbers reg byte a 
Statement [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#78 ] ( main:11::play_move_down:44 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#78 ] ) always clobbers reg byte a 
Statement [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Statement [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 [ current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2) [ current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ( main:11::play_spawn_current:24 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ) always clobbers reg byte a 
Statement [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ play_spawn_current::piece_idx#1 ] ( main:11::play_spawn_current:24 [ play_spawn_current::piece_idx#1 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ play_remove_lines::y#8 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:11::play_move_down:44::play_remove_lines:200 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_remove_lines::y#8 play_remove_lines::r#1 play_remove_lines::w#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Statement [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ play_remove_lines::w#6 ] ( main:11::play_move_down:44::play_remove_lines:200 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_remove_lines::w#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
Statement [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#0 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2) [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ]
Statement [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ play_lock_current::c#2 play_lock_current::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:141 [ play_lock_current::i#1 ]
Statement [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
Statement [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ]
Statement [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0 [ keyboard_events_size#13 keyboard_modifiers#3 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0 [ keyboard_events_size#13 keyboard_modifiers#4 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0 [ keyboard_events_size#13 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 ] ) always clobbers reg byte a 
Statement [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Statement [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ) always clobbers reg byte a 
Statement [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ) always clobbers reg byte a 
Statement [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:11::keyboard_event_scan:38::keyboard_matrix_read:277 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 ] ) always clobbers reg byte a 
Statement [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:11::keyboard_event_scan:38::keyboard_matrix_read:277 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:65 [ play_init::j#2 play_init::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ]
Statement [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ) always clobbers reg byte a 
Statement [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ) always clobbers reg byte a 
Statement [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:11::play_init:22 [ ] ) always clobbers reg byte a 
Statement [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:69 [ sprites_init::s#2 sprites_init::s#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Statement [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#1 ] ) always clobbers reg byte a 
Statement [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$12 ] ( main:11::render_init:16 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$12 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:74 [ render_init::c#2 render_init::c#1 ]
Statement [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ( main:11::render_init:16 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:74 [ render_init::c#2 render_init::c#1 ]
Statement [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::l#4 render_init::line#1 ] ( main:11::render_init:16 [ render_init::l#4 render_init::line#1 ] ) always clobbers reg byte a 
Statement [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$22 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$22 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:75 [ render_init::i#2 render_init::i#1 ]
Statement [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$23 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$23 ] ) always clobbers reg byte a 
Statement [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ) always clobbers reg byte a 
Statement [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ) always clobbers reg byte a 
Statement [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0 [ fill::addr#2 ] ( main:11::render_init:16::fill:386 [ fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 [ fill::addr#1 ] ( main:11::render_init:16::fill:386 [ fill::addr#1 ] ) always clobbers reg byte a 
Statement [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:88 [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:88 [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Statement [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ) always clobbers reg byte a reg byte y 
Statement [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ]
Statement [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] ) always clobbers reg byte a reg byte y 
Statement [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] ) always clobbers reg byte a reg byte y 
Statement [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] ) always clobbers reg byte a 
Statement [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 [ ] ( main:11::sid_rnd_init:14 [ ] ) always clobbers reg byte a 
Statement [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:11::sid_rnd_init:14 [ ] ) always clobbers reg byte a 
Statement [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1 [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 ] (  [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 ] ) always clobbers reg byte a 
Statement [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:171 [ sprites_irq::ptr#0 ]
Statement [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte y 
Statement [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 ] ) always clobbers reg byte a 
Statement [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ptr#0 irq_raster_next#2 ] (  [ irq_sprite_ptr#0 irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ irq_raster_next#2 ] (  [ irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ sprites_irq::raster_next#0 sprites_irq::$4 ] (  [ sprites_irq::raster_next#0 sprites_irq::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:90 [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ]
Statement [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [468] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Statement [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Statement [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Statement [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( ) always clobbers reg byte a 
Statement [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ ] ( ) always clobbers reg byte a 
Statement [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0 [ ] ( ) always clobbers reg byte a 
Statement [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16 [ current_ypos#84 current_ypos#18 current_xpos#110 current_xpos#23 current_piece_gfx#100 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ( main:11 [ current_ypos#84 current_ypos#18 current_xpos#110 current_xpos#23 current_piece_gfx#100 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ) always clobbers reg byte a 
Statement [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#71 ] ( main:11 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#71 ] ) always clobbers reg byte a 
Statement [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 keyboard_events_size#19 current_movedown_counter#12 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 keyboard_events_size#19 current_movedown_counter#12 ] ) always clobbers reg byte a 
Statement [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_orientation#14 current_piece_gfx#1 current_xpos#1 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_orientation#14 current_piece_gfx#1 current_xpos#1 ] ) always clobbers reg byte a 
Statement [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#2 current_orientation#14 current_piece_gfx#1 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#2 current_orientation#14 current_piece_gfx#1 ] ) always clobbers reg byte a 
Statement [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#3 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#3 ] ) always clobbers reg byte a 
Statement [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 current_ypos#85 render_screen_render#62 current_xpos#111 current_piece_gfx#101 ] ( main:11 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 current_ypos#85 render_screen_render#62 current_xpos#111 current_piece_gfx#101 ] ) always clobbers reg byte a 
Statement [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 [ render_screen_show#16 render_screen_render#11 ] ( main:11::render_screen_swap:68 [ current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_show#16 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 [ render_screen_show#13 render_screen_render#11 ] ( main:11::render_screen_swap:68 [ current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_show#13 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [75] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 ] ) always clobbers reg byte a 
Statement [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#1 ] ) always clobbers reg byte a 
Statement [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::$5 ] ) always clobbers reg byte a 
Statement [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5) [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::i#3 render_current::l#4 render_current::screen_line#0 ] ) always clobbers reg byte a 
Statement [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4) [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::screen_line#0 render_current::i#4 render_current::xpos#2 render_current::c#2 render_current::current_cell#0 ] ) always clobbers reg byte a 
Statement [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63 [ render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] ( main:11::render_current:31 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] main:11::render_current:66 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#28 current_xpos#47 current_piece_gfx#53 current_piece_char#63 render_current::ypos2#2 render_current::l#4 render_current::i#10 render_current::screen_line#0 render_current::xpos#2 render_current::c#2 ] ) always clobbers reg byte a 
Statement [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ) always clobbers reg byte a 
Statement [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2 [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::$3 ] ) always clobbers reg byte a 
Statement [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3) [ render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ) always clobbers reg byte a 
Statement [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:11::render_playfield:26 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] main:11::render_playfield:60 [ render_screen_show#16 render_screen_render#16 current_piece#10 current_orientation#19 current_piece_gfx#14 current_xpos#19 current_ypos#13 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 render_screen_render#19 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$2 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$2 ] ) always clobbers reg byte a 
Statement [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#2 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#2 ] ) always clobbers reg byte a 
Statement [119] (byte*~) current_piece#77 ← (byte*) current_piece#10 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#77 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#77 ] ) always clobbers reg byte a 
Statement [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#4 current_piece_gfx#3 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#4 current_piece_gfx#3 ] ) always clobbers reg byte a 
Statement [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$4 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::$4 ] ) always clobbers reg byte a 
Statement [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 [ current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#1 ] ( main:11::play_move_rotate:54 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#1 ] ) always clobbers reg byte a 
Statement [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4 [ play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::ypos#4 play_collision::xpos#5 play_collision::piece_gfx#0 ] ) always clobbers reg byte a 
Statement [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#0 ] ) always clobbers reg byte a 
Statement [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2) [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ) always clobbers reg byte a 
Statement [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 play_collision::$7 ] ) always clobbers reg byte a 
Statement [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 [ play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ( main:11::play_move_rotate:54::play_collision:120 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::render#2 current_piece#10 current_xpos#19 current_ypos#13 current_orientation#14 current_piece_gfx#1 play_move_rotate::orientation#3 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:158 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_leftright:49::play_collision:169 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_xpos#1 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] main:11::play_move_down:44::play_collision:193 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 play_collision::xpos#5 play_collision::piece_gfx#0 play_collision::ypos2#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::col#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [157] (byte*~) current_piece#76 ← (byte*) current_piece#10 [ current_piece#10 current_ypos#13 current_orientation#14 current_piece#76 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 current_xpos#1 ] ( main:11::play_move_leftright:49 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_piece#76 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 current_xpos#1 ] ) always clobbers reg byte a 
Statement [168] (byte*~) current_piece#75 ← (byte*) current_piece#10 [ current_piece#10 current_ypos#13 current_orientation#14 current_piece#75 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 current_xpos#1 ] ( main:11::play_move_leftright:49 [ render_screen_show#16 render_screen_render#16 current_piece_char#1 keyboard_events_size#16 current_movedown_counter#10 main::key_event#0 main::render#1 current_piece_gfx#1 current_piece#10 current_ypos#13 current_orientation#14 current_piece#75 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 current_xpos#1 ] ) always clobbers reg byte a 
Statement [192] (byte*~) current_piece#74 ← (byte*) current_piece#16 [ current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_piece#74 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:11::play_move_down:44 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_piece#74 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ) always clobbers reg byte a 
Statement [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#78 ] ( main:11::play_move_down:44 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 current_piece#78 ] ) always clobbers reg byte a 
Statement [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 [ current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2) [ current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ( main:11::play_spawn_current:24 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 play_spawn_current::$3 play_spawn_current::piece_idx#2 ] ) always clobbers reg byte a 
Statement [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2) [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ( main:11::play_spawn_current:24 [ current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_ypos#18 current_xpos#23 current_piece_gfx#16 current_piece_char#12 play_spawn_current::$3 ] ) always clobbers reg byte a 
Statement [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ play_spawn_current::piece_idx#1 ] ( main:11::play_spawn_current:24 [ play_spawn_current::piece_idx#1 ] main:11::play_move_down:44::play_spawn_current:202 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ play_remove_lines::y#8 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:11::play_move_down:44::play_remove_lines:200 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_remove_lines::y#8 play_remove_lines::r#1 play_remove_lines::w#2 ] ) always clobbers reg byte a 
Statement [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ play_remove_lines::w#6 ] ( main:11::play_move_down:44::play_remove_lines:200 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 play_remove_lines::w#6 ] ) always clobbers reg byte a 
Statement [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#0 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#0 ] ) always clobbers reg byte a 
Statement [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2) [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Statement [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15 [ current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:11::play_move_down:44::play_lock_current:198 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece_gfx#20 current_xpos#10 current_piece_char#15 play_lock_current::ypos2#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::col#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:11::play_move_down:44::keyboard_event_pressed:178 [ render_screen_show#16 render_screen_render#16 keyboard_events_size#16 main::key_event#0 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#1 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:286 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:292 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#11 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:298 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#12 keyboard_event_pressed::return#11 ] main:11::keyboard_event_scan:38::keyboard_event_pressed:304 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [280] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_event_scan::row_scan#0 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 [ keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_events_size#29 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Statement [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0 [ keyboard_events_size#13 keyboard_modifiers#3 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0 [ keyboard_events_size#13 keyboard_modifiers#4 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0 [ keyboard_events_size#13 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_events_size#13 ] ) always clobbers reg byte a 
Statement [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$3 ] ) always clobbers reg byte a 
Statement [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$4 ] ) always clobbers reg byte a 
Statement [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#15 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ( main:11::keyboard_event_scan:38 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$11 ] ) always clobbers reg byte a 
Statement [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:11::keyboard_event_scan:38::keyboard_matrix_read:277 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 ] ) always clobbers reg byte a 
Statement [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:11::keyboard_event_scan:38::keyboard_matrix_read:277 [ render_screen_show#16 render_screen_render#16 current_piece#16 current_orientation#10 current_piece_gfx#20 current_xpos#10 current_ypos#21 current_piece_char#15 current_movedown_counter#12 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#29 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$1 ] ) always clobbers reg byte a 
Statement [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ) always clobbers reg byte a 
Statement [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:11::play_init:22 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ) always clobbers reg byte a 
Statement [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:11::play_init:22 [ ] ) always clobbers reg byte a 
Statement [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:11::sprites_irq_init:20 [ ] ) always clobbers reg byte a 
Statement [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:11::sprites_init:18 [ ] ) always clobbers reg byte a 
Statement [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ) always clobbers reg byte a 
Statement [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:11::sprites_init:18 [ sprites_init::s#2 sprites_init::xpos#1 ] ) always clobbers reg byte a 
Statement [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 [ ] ( main:11::render_init:16 [ ] ) always clobbers reg byte a 
Statement [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$12 ] ( main:11::render_init:16 [ render_init::line#4 render_init::l#4 render_init::c#2 render_init::$12 ] ) always clobbers reg byte a 
Statement [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ( main:11::render_init:16 [ render_init::line#4 render_init::l#4 render_init::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::l#4 render_init::line#1 ] ( main:11::render_init:16 [ render_init::l#4 render_init::line#1 ] ) always clobbers reg byte a 
Statement [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$22 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$22 ] ) always clobbers reg byte a 
Statement [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$23 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$23 ] ) always clobbers reg byte a 
Statement [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ) always clobbers reg byte a 
Statement [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:11::render_init:16 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ) always clobbers reg byte a 
Statement [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0 [ fill::addr#2 ] ( main:11::render_init:16::fill:386 [ fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 [ fill::addr#1 ] ( main:11::render_init:16::fill:386 [ fill::addr#1 ] ) always clobbers reg byte a 
Statement [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::orig#5 render_screen_original::y#8 render_screen_original::screen#5 render_screen_original::x#4 ] ) always clobbers reg byte a reg byte y 
Statement [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#2 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ) always clobbers reg byte a reg byte y 
Statement [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#0 ] ) always clobbers reg byte a 
Statement [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 ] ) always clobbers reg byte a reg byte y 
Statement [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::screen#7 render_screen_original::x#7 ] ) always clobbers reg byte a reg byte y 
Statement [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] ( main:11::render_init:16::render_screen_original:382 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] main:11::render_init:16::render_screen_original:384 [ render_screen_original::y#8 render_screen_original::orig#1 render_screen_original::x#5 render_screen_original::screen#10 render_screen_original::c#1 ] ) always clobbers reg byte a 
Statement [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 [ ] ( main:11::sid_rnd_init:14 [ ] ) always clobbers reg byte a 
Statement [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:11::sid_rnd_init:14 [ ] ) always clobbers reg byte a 
Statement [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1 [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 ] (  [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 ] ) always clobbers reg byte a 
Statement [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] ) always clobbers reg byte a 
Statement [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte y 
Statement [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 ] ) always clobbers reg byte a 
Statement [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 [ irq_sprite_ptr#0 irq_raster_next#2 ] (  [ irq_sprite_ptr#0 irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3 [ irq_raster_next#2 ] (  [ irq_raster_next#2 ] ) always clobbers reg byte a 
Statement [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ sprites_irq::raster_next#0 sprites_irq::$4 ] (  [ sprites_irq::raster_next#0 sprites_irq::$4 ] ) always clobbers reg byte a 
Statement [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [468] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Statement [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Statement [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 [ irq_raster_next#1 ] (  [ irq_raster_next#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ render_screen_render#19 render_screen_render#63 ] : zp ZP_BYTE:16 , reg byte x , 
Potential registers zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ] : zp ZP_BYTE:17 , reg byte x , 
Potential registers zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_WORD:19 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ] : zp ZP_BYTE:21 , reg byte x , 
Potential registers zp ZP_BYTE:22 [ play_move_rotate::return#1 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ] : zp ZP_BYTE:27 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] : zp ZP_BYTE:28 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] : zp ZP_BYTE:29 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ] : zp ZP_BYTE:32 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ play_collision::c#2 play_collision::c#1 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ play_collision::return#14 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ play_move_leftright::return#1 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] : zp ZP_BYTE:36 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ] : zp ZP_BYTE:37 , reg byte x , 
Potential registers zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_WORD:41 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ] : zp ZP_BYTE:43 , reg byte x , 
Potential registers zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ] : zp ZP_BYTE:44 , reg byte x , 
Potential registers zp ZP_BYTE:45 [ play_move_down::return#2 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] : zp ZP_BYTE:48 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ] : zp ZP_BYTE:52 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ] : zp ZP_BYTE:53 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] : zp ZP_BYTE:54 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] : zp ZP_BYTE:55 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ play_lock_current::c#2 play_lock_current::c#1 ] : zp ZP_BYTE:56 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ] : zp ZP_BYTE:57 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp ZP_BYTE:59 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ] : zp ZP_BYTE:60 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp ZP_BYTE:61 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] : zp ZP_BYTE:62 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] : zp ZP_BYTE:63 , reg byte x , 
Potential registers zp ZP_BYTE:64 [ render_show::d018val#3 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ play_init::j#2 play_init::j#1 ] : zp ZP_BYTE:65 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:66 [ play_init::pli#2 play_init::pli#1 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ] : zp ZP_BYTE:68 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:69 [ sprites_init::s#2 sprites_init::s#1 ] : zp ZP_BYTE:69 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ] : zp ZP_BYTE:70 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:71 [ render_init::line#4 render_init::line#1 ] : zp ZP_WORD:71 , 
Potential registers zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ] : zp ZP_BYTE:73 , reg byte x , 
Potential registers zp ZP_BYTE:74 [ render_init::c#2 render_init::c#1 ] : zp ZP_BYTE:74 , reg byte x , 
Potential registers zp ZP_BYTE:75 [ render_init::i#2 render_init::i#1 ] : zp ZP_BYTE:75 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:76 [ render_init::li_1#2 render_init::li_1#1 ] : zp ZP_WORD:76 , 
Potential registers zp ZP_WORD:78 [ render_init::li_2#2 render_init::li_2#1 ] : zp ZP_WORD:78 , 
Potential registers zp ZP_WORD:80 [ fill::addr#2 fill::addr#1 ] : zp ZP_WORD:80 , 
Potential registers zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ] : zp ZP_BYTE:82 , reg byte x , 
Potential registers zp ZP_WORD:83 [ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_BYTE:85 [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ] : zp ZP_BYTE:85 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:86 [ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_BYTE:88 [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] : zp ZP_BYTE:88 , reg byte x , 
Potential registers zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ] : zp ZP_BYTE:89 , 
Potential registers zp ZP_BYTE:90 [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ] : zp ZP_BYTE:90 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:91 [ render_screen_showing#0 ] : zp ZP_BYTE:91 , 
Potential registers zp ZP_BYTE:92 [ irq_raster_next#0 ] : zp ZP_BYTE:92 , 
Potential registers zp ZP_BYTE:93 [ irq_sprite_ypos#0 ] : zp ZP_BYTE:93 , 
Potential registers zp ZP_BYTE:94 [ irq_sprite_ptr#0 ] : zp ZP_BYTE:94 , 
Potential registers zp ZP_BYTE:95 [ irq_cnt#0 ] : zp ZP_BYTE:95 , 
Potential registers zp ZP_BYTE:96 [ keyboard_event_get::return#3 ] : zp ZP_BYTE:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:97 [ main::key_event#0 ] : zp ZP_BYTE:97 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:98 [ play_move_down::key_event#0 ] : zp ZP_BYTE:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:99 [ play_move_down::return#3 ] : zp ZP_BYTE:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:100 [ main::$12 ] : zp ZP_BYTE:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:101 [ main::render#1 ] : zp ZP_BYTE:101 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:102 [ play_move_leftright::key_event#0 ] : zp ZP_BYTE:102 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:103 [ play_move_leftright::return#4 ] : zp ZP_BYTE:103 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:104 [ main::$13 ] : zp ZP_BYTE:104 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:105 [ main::render#2 ] : zp ZP_BYTE:105 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:106 [ play_move_rotate::key_event#0 ] : zp ZP_BYTE:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:107 [ play_move_rotate::return#4 ] : zp ZP_BYTE:107 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:108 [ main::$14 ] : zp ZP_BYTE:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:109 [ main::render#3 ] : zp ZP_BYTE:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:110 [ render_current::$5 ] : zp ZP_BYTE:110 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:111 [ render_current::screen_line#0 ] : zp ZP_WORD:111 , 
Potential registers zp ZP_BYTE:113 [ render_current::current_cell#0 ] : zp ZP_BYTE:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:114 [ render_playfield::$2 ] : zp ZP_BYTE:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:115 [ render_playfield::$3 ] : zp ZP_BYTE:115 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:116 [ play_move_rotate::$2 ] : zp ZP_BYTE:116 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:117 [ play_collision::return#13 ] : zp ZP_BYTE:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:118 [ play_move_rotate::$6 ] : zp ZP_BYTE:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:119 [ play_move_rotate::$4 ] : zp ZP_BYTE:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:120 [ play_collision::piece_gfx#0 ] : zp ZP_WORD:120 , 
Potential registers zp ZP_WORD:122 [ play_collision::playfield_line#0 ] : zp ZP_WORD:122 , 
Potential registers zp ZP_BYTE:124 [ play_collision::i#1 ] : zp ZP_BYTE:124 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:125 [ play_collision::$7 ] : zp ZP_BYTE:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:126 [ play_collision::return#12 ] : zp ZP_BYTE:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:127 [ play_move_leftright::$4 ] : zp ZP_BYTE:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:128 [ play_collision::return#1 ] : zp ZP_BYTE:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:129 [ play_move_leftright::$8 ] : zp ZP_BYTE:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:130 [ keyboard_event_pressed::return#12 ] : zp ZP_BYTE:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:131 [ play_move_down::$2 ] : zp ZP_BYTE:131 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:132 [ play_collision::return#0 ] : zp ZP_BYTE:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:133 [ play_move_down::$12 ] : zp ZP_BYTE:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:134 [ play_spawn_current::$3 ] : zp ZP_BYTE:134 , reg byte x , 
Potential registers zp ZP_BYTE:135 [ sid_rnd::return#2 ] : zp ZP_BYTE:135 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:136 [ play_spawn_current::$1 ] : zp ZP_BYTE:136 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:137 [ sid_rnd::return#0 ] : zp ZP_BYTE:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:138 [ play_remove_lines::c#0 ] : zp ZP_BYTE:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:139 [ play_lock_current::playfield_line#0 ] : zp ZP_WORD:139 , 
Potential registers zp ZP_BYTE:141 [ play_lock_current::i#1 ] : zp ZP_BYTE:141 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:142 [ keyboard_event_pressed::$0 ] : zp ZP_BYTE:142 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ] : zp ZP_BYTE:143 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:144 [ keyboard_event_pressed::$1 ] : zp ZP_BYTE:144 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:145 [ keyboard_event_pressed::return#11 ] : zp ZP_BYTE:145 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:146 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:146 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:147 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:147 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ] : zp ZP_BYTE:148 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:149 [ keyboard_event_pressed::return#0 ] : zp ZP_BYTE:149 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:150 [ keyboard_event_scan::$14 ] : zp ZP_BYTE:150 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:151 [ keyboard_event_pressed::return#1 ] : zp ZP_BYTE:151 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:152 [ keyboard_event_scan::$18 ] : zp ZP_BYTE:152 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:153 [ keyboard_event_pressed::return#2 ] : zp ZP_BYTE:153 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:154 [ keyboard_event_scan::$22 ] : zp ZP_BYTE:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:155 [ keyboard_event_pressed::return#10 ] : zp ZP_BYTE:155 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:156 [ keyboard_event_scan::$26 ] : zp ZP_BYTE:156 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:157 [ keyboard_modifiers#5 ] : zp ZP_BYTE:157 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:158 [ keyboard_event_scan::$3 ] : zp ZP_BYTE:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:159 [ keyboard_event_scan::$4 ] : zp ZP_BYTE:159 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:160 [ keyboard_event_scan::event_type#0 ] : zp ZP_BYTE:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:161 [ keyboard_event_scan::$11 ] : zp ZP_BYTE:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:162 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:163 [ render_screen_showing#1 ] : zp ZP_BYTE:163 , 
Potential registers zp ZP_BYTE:164 [ play_init::$1 ] : zp ZP_BYTE:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:165 [ sprites_init::s2#0 ] : zp ZP_BYTE:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:166 [ render_init::$12 ] : zp ZP_WORD:166 , 
Potential registers zp ZP_BYTE:168 [ render_init::$22 ] : zp ZP_BYTE:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:169 [ render_init::$23 ] : zp ZP_BYTE:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:170 [ sprites_irq::ypos#0 ] : zp ZP_BYTE:170 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:171 [ sprites_irq::ptr#0 ] : zp ZP_BYTE:171 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:172 [ sprites_irq::ptr#3 ] : zp ZP_BYTE:172 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:173 [ sprites_irq::ptr#4 ] : zp ZP_BYTE:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:174 [ irq_cnt#1 ] : zp ZP_BYTE:174 , 
Potential registers zp ZP_BYTE:175 [ irq_sprite_ypos#2 ] : zp ZP_BYTE:175 , 
Potential registers zp ZP_BYTE:176 [ irq_sprite_ptr#2 ] : zp ZP_BYTE:176 , 
Potential registers zp ZP_BYTE:177 [ sprites_irq::$4 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:178 [ irq_cnt#14 ] : zp ZP_BYTE:178 , 
Potential registers zp ZP_BYTE:179 [ irq_sprite_ypos#1 ] : zp ZP_BYTE:179 , 
Potential registers zp ZP_BYTE:180 [ irq_sprite_ptr#1 ] : zp ZP_BYTE:180 , 
Potential registers zp ZP_BYTE:181 [ sprites_irq::ptr#1 ] : zp ZP_BYTE:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:182 [ sprites_irq::ptr#2 ] : zp ZP_BYTE:182 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 20,002: zp ZP_BYTE:158 [ keyboard_event_scan::$3 ] 20,002: zp ZP_BYTE:159 [ keyboard_event_scan::$4 ] 20,002: zp ZP_BYTE:160 [ keyboard_event_scan::event_type#0 ] 20,002: zp ZP_BYTE:161 [ keyboard_event_scan::$11 ] 17,858.93: zp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 11,908.48: zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] 2,101.74: zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 1,278.06: zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ] 4: zp ZP_BYTE:150 [ keyboard_event_scan::$14 ] 4: zp ZP_BYTE:152 [ keyboard_event_scan::$18 ] 4: zp ZP_BYTE:154 [ keyboard_event_scan::$22 ] 4: zp ZP_BYTE:156 [ keyboard_event_scan::$26 ] 
Uplift Scope [play_collision] 38,173.33: zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ] 20,002: zp ZP_BYTE:125 [ play_collision::$7 ] 13,378.25: zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ] 12,223.44: zp ZP_BYTE:33 [ play_collision::c#2 play_collision::c#1 ] 1,615.62: zp ZP_BYTE:124 [ play_collision::i#1 ] 1,371.57: zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] 1,126.12: zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ] 785.86: zp ZP_WORD:122 [ play_collision::playfield_line#0 ] 476.33: zp ZP_WORD:120 [ play_collision::piece_gfx#0 ] 50.2: zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] 18: zp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 10: zp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ] 4: zp ZP_BYTE:117 [ play_collision::return#13 ] 4: zp ZP_BYTE:126 [ play_collision::return#12 ] 4: zp ZP_BYTE:128 [ play_collision::return#1 ] 4: zp ZP_BYTE:132 [ play_collision::return#0 ] 1.33: zp ZP_BYTE:34 [ play_collision::return#14 ] 
Uplift Scope [play_lock_current] 38,173.33: zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 14,753.5: zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] 14,001.4: zp ZP_BYTE:56 [ play_lock_current::c#2 play_lock_current::c#1 ] 2,333.67: zp ZP_BYTE:141 [ play_lock_current::i#1 ] 1,167.83: zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ] 1,100.2: zp ZP_WORD:139 [ play_lock_current::playfield_line#0 ] 777.68: zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ] 
Uplift Scope [play_remove_lines] 19,119.62: zp ZP_BYTE:48 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] 18,939.14: zp ZP_BYTE:51 [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] 17,501.75: zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 8,201: zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 6,000.6: zp ZP_BYTE:138 [ play_remove_lines::c#0 ] 1,644.5: zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 
Uplift Scope [] 58,858.19: zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] 212.98: zp ZP_WORD:41 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ] 205.92: zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ] 72.09: zp ZP_BYTE:10 [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ] 59.09: zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ] 40.1: zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ] 30.62: zp ZP_BYTE:16 [ render_screen_render#19 render_screen_render#63 ] 26: zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ] 20.4: zp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ] 20: zp ZP_BYTE:157 [ keyboard_modifiers#5 ] 20: zp ZP_BYTE:163 [ render_screen_showing#1 ] 20: zp ZP_BYTE:175 [ irq_sprite_ypos#2 ] 20: zp ZP_BYTE:176 [ irq_sprite_ptr#2 ] 20: zp ZP_BYTE:178 [ irq_cnt#14 ] 20: zp ZP_BYTE:179 [ irq_sprite_ypos#1 ] 20: zp ZP_BYTE:180 [ irq_sprite_ptr#1 ] 19.25: zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ] 17.64: zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ] 16.01: zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ] 15.12: zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ] 13.85: zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ] 11.6: zp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ] 10.59: zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ] 8.33: zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ] 4.73: zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] 4.25: zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ] 4: zp ZP_BYTE:174 [ irq_cnt#1 ] 0.74: zp ZP_BYTE:93 [ irq_sprite_ypos#0 ] 0.57: zp ZP_BYTE:91 [ render_screen_showing#0 ] 0.25: zp ZP_BYTE:94 [ irq_sprite_ptr#0 ] 0.2: zp ZP_BYTE:95 [ irq_cnt#0 ] 0.18: zp ZP_BYTE:92 [ irq_raster_next#0 ] 
Uplift Scope [render_current] 2,534.25: zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ] 1,787.5: zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ] 1,553.5: zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ] 1,001: zp ZP_BYTE:113 [ render_current::current_cell#0 ] 202: zp ZP_BYTE:110 [ render_current::$5 ] 162.72: zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ] 101.16: zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] 100.18: zp ZP_WORD:111 [ render_current::screen_line#0 ] 
Uplift Scope [render_playfield] 2,254.5: zp ZP_WORD:19 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] 2,002: zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ] 1,505.77: zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 202: zp ZP_BYTE:114 [ render_playfield::$2 ] 202: zp ZP_BYTE:115 [ render_playfield::$3 ] 181.8: zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ] 
Uplift Scope [play_spawn_current] 2,337: zp ZP_BYTE:46 [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] 2,002: zp ZP_BYTE:136 [ play_spawn_current::$1 ] 0.13: zp ZP_BYTE:134 [ play_spawn_current::$3 ] 
Uplift Scope [keyboard_matrix_read] 2,002: zp ZP_BYTE:147 [ keyboard_matrix_read::return#2 ] 1,003: zp ZP_BYTE:146 [ keyboard_matrix_read::rowid#0 ] 334.33: zp ZP_BYTE:162 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [sid_rnd] 2,002: zp ZP_BYTE:135 [ sid_rnd::return#2 ] 334.33: zp ZP_BYTE:137 [ sid_rnd::return#0 ] 
Uplift Scope [render_screen_original] 779.94: zp ZP_BYTE:88 [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] 680.1: zp ZP_WORD:86 [ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ] 580.75: zp ZP_BYTE:85 [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ] 233.98: zp ZP_WORD:83 [ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ] 17.5: zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ] 
Uplift Scope [main] 202: zp ZP_BYTE:100 [ main::$12 ] 202: zp ZP_BYTE:104 [ main::$13 ] 202: zp ZP_BYTE:108 [ main::$14 ] 202: zp ZP_BYTE:109 [ main::render#3 ] 40.4: zp ZP_BYTE:101 [ main::render#1 ] 40.4: zp ZP_BYTE:105 [ main::render#2 ] 36.73: zp ZP_BYTE:97 [ main::key_event#0 ] 
Uplift Scope [render_init] 252.5: zp ZP_BYTE:74 [ render_init::c#2 render_init::c#1 ] 202: zp ZP_WORD:166 [ render_init::$12 ] 27.83: zp ZP_WORD:71 [ render_init::line#4 render_init::line#1 ] 22.79: zp ZP_BYTE:75 [ render_init::i#2 render_init::i#1 ] 22: zp ZP_BYTE:168 [ render_init::$22 ] 22: zp ZP_BYTE:169 [ render_init::$23 ] 19.64: zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ] 12.83: zp ZP_WORD:78 [ render_init::li_2#2 render_init::li_2#1 ] 12.1: zp ZP_WORD:76 [ render_init::li_1#2 render_init::li_1#1 ] 
Uplift Scope [play_move_down] 202: zp ZP_BYTE:99 [ play_move_down::return#3 ] 51.5: zp ZP_BYTE:98 [ play_move_down::key_event#0 ] 33.67: zp ZP_BYTE:45 [ play_move_down::return#2 ] 20: zp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] 4: zp ZP_BYTE:131 [ play_move_down::$2 ] 4: zp ZP_BYTE:133 [ play_move_down::$12 ] 
Uplift Scope [play_move_rotate] 202: zp ZP_BYTE:107 [ play_move_rotate::return#4 ] 52.5: zp ZP_BYTE:106 [ play_move_rotate::key_event#0 ] 33.67: zp ZP_BYTE:22 [ play_move_rotate::return#1 ] 8.89: zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 4: zp ZP_BYTE:116 [ play_move_rotate::$2 ] 4: zp ZP_BYTE:118 [ play_move_rotate::$6 ] 4: zp ZP_BYTE:119 [ play_move_rotate::$4 ] 
Uplift Scope [play_move_leftright] 202: zp ZP_BYTE:103 [ play_move_leftright::return#4 ] 52.5: zp ZP_BYTE:102 [ play_move_leftright::key_event#0 ] 33.67: zp ZP_BYTE:35 [ play_move_leftright::return#1 ] 4: zp ZP_BYTE:127 [ play_move_leftright::$4 ] 4: zp ZP_BYTE:129 [ play_move_leftright::$8 ] 
Uplift Scope [keyboard_event_get] 202: zp ZP_BYTE:96 [ keyboard_event_get::return#3 ] 38.33: zp ZP_BYTE:58 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplift Scope [play_init] 23.83: zp ZP_BYTE:65 [ play_init::j#2 play_init::j#1 ] 22: zp ZP_BYTE:164 [ play_init::$1 ] 13.93: zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ] 13.75: zp ZP_WORD:66 [ play_init::pli#2 play_init::pli#1 ] 
Uplift Scope [sprites_init] 25.3: zp ZP_BYTE:69 [ sprites_init::s#2 sprites_init::s#1 ] 22: zp ZP_BYTE:165 [ sprites_init::s2#0 ] 15.58: zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplift Scope [sprites_irq] 12.67: zp ZP_BYTE:90 [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ] 4: zp ZP_BYTE:173 [ sprites_irq::ptr#4 ] 4: zp ZP_BYTE:177 [ sprites_irq::$4 ] 4: zp ZP_BYTE:182 [ sprites_irq::ptr#2 ] 2.67: zp ZP_BYTE:172 [ sprites_irq::ptr#3 ] 2.67: zp ZP_BYTE:181 [ sprites_irq::ptr#1 ] 2.5: zp ZP_BYTE:170 [ sprites_irq::ypos#0 ] 2.5: zp ZP_BYTE:171 [ sprites_irq::ptr#0 ] 
Uplift Scope [keyboard_event_pressed] 4: zp ZP_BYTE:130 [ keyboard_event_pressed::return#12 ] 4: zp ZP_BYTE:142 [ keyboard_event_pressed::$0 ] 4: zp ZP_BYTE:144 [ keyboard_event_pressed::$1 ] 4: zp ZP_BYTE:149 [ keyboard_event_pressed::return#0 ] 4: zp ZP_BYTE:151 [ keyboard_event_pressed::return#1 ] 4: zp ZP_BYTE:153 [ keyboard_event_pressed::return#2 ] 4: zp ZP_BYTE:155 [ keyboard_event_pressed::return#10 ] 2: zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ] 1.71: zp ZP_BYTE:145 [ keyboard_event_pressed::return#11 ] 1.33: zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ] 
Uplift Scope [fill] 33: zp ZP_WORD:80 [ fill::addr#2 fill::addr#1 ] 
Uplift Scope [render_show] 2: zp ZP_BYTE:64 [ render_show::d018val#3 ] 
Uplift Scope [sid_rnd_init] 
Uplift Scope [render_screen_swap] 
Uplift Scope [sprites_irq_init] 

Uplifting [keyboard_event_scan] best 4517524 combination reg byte a [ keyboard_event_scan::$3 ] reg byte a [ keyboard_event_scan::$4 ] reg byte a [ keyboard_event_scan::event_type#0 ] reg byte a [ keyboard_event_scan::$11 ] zp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ] zp ZP_BYTE:150 [ keyboard_event_scan::$14 ] zp ZP_BYTE:152 [ keyboard_event_scan::$18 ] zp ZP_BYTE:154 [ keyboard_event_scan::$22 ] zp ZP_BYTE:156 [ keyboard_event_scan::$26 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [play_collision] best 4367524 combination zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ] reg byte a [ play_collision::$7 ] zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ] reg byte x [ play_collision::c#2 play_collision::c#1 ] zp ZP_BYTE:124 [ play_collision::i#1 ] zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ] zp ZP_WORD:122 [ play_collision::playfield_line#0 ] zp ZP_WORD:120 [ play_collision::piece_gfx#0 ] zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] zp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] zp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ] zp ZP_BYTE:117 [ play_collision::return#13 ] zp ZP_BYTE:126 [ play_collision::return#12 ] zp ZP_BYTE:128 [ play_collision::return#1 ] zp ZP_BYTE:132 [ play_collision::return#0 ] zp ZP_BYTE:34 [ play_collision::return#14 ] 
Limited combination testing to 100 combinations of 80621568 possible.
Uplifting [play_lock_current] best 4277524 combination zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ] zp ZP_BYTE:141 [ play_lock_current::i#1 ] zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ] zp ZP_WORD:139 [ play_lock_current::playfield_line#0 ] zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ] 
Limited combination testing to 100 combinations of 729 possible.
Uplifting [play_remove_lines] best 4140524 combination reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] reg byte x [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ] zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ] zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ] zp ZP_BYTE:138 [ play_remove_lines::c#0 ] zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [] best 4139358 combination zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] zp ZP_WORD:41 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ] zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ] reg byte x [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ] zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ] zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ] reg byte x [ render_screen_render#19 render_screen_render#63 ] zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ] zp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ] zp ZP_BYTE:157 [ keyboard_modifiers#5 ] zp ZP_BYTE:163 [ render_screen_showing#1 ] zp ZP_BYTE:175 [ irq_sprite_ypos#2 ] zp ZP_BYTE:176 [ irq_sprite_ptr#2 ] zp ZP_BYTE:178 [ irq_cnt#14 ] zp ZP_BYTE:179 [ irq_sprite_ypos#1 ] zp ZP_BYTE:180 [ irq_sprite_ptr#1 ] zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ] zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ] zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ] zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ] zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ] zp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ] zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ] zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ] zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ] zp ZP_BYTE:174 [ irq_cnt#1 ] zp ZP_BYTE:93 [ irq_sprite_ypos#0 ] zp ZP_BYTE:91 [ render_screen_showing#0 ] zp ZP_BYTE:94 [ irq_sprite_ptr#0 ] zp ZP_BYTE:95 [ irq_cnt#0 ] zp ZP_BYTE:92 [ irq_raster_next#0 ] 
Limited combination testing to 100 combinations of 497664 possible.
Uplifting [render_current] best 4133358 combination zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ] zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ] zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ] reg byte a [ render_current::current_cell#0 ] zp ZP_BYTE:110 [ render_current::$5 ] zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ] zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] zp ZP_WORD:111 [ render_current::screen_line#0 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [render_playfield] best 4132758 combination zp ZP_WORD:19 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ] zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] reg byte a [ render_playfield::$2 ] reg byte a [ render_playfield::$3 ] zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [play_spawn_current] best 4119748 combination reg byte x [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] reg byte a [ play_spawn_current::$1 ] zp ZP_BYTE:134 [ play_spawn_current::$3 ] 
Uplifting [keyboard_matrix_read] best 4107742 combination reg byte a [ keyboard_matrix_read::return#2 ] reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] 
Uplifting [sid_rnd] best 4098739 combination reg byte a [ sid_rnd::return#2 ] reg byte a [ sid_rnd::return#0 ] 
Uplifting [render_screen_original] best 4095639 combination reg byte x [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] zp ZP_WORD:86 [ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ] reg byte y [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ] zp ZP_WORD:83 [ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ] zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ] 
Uplifting [main] best 4093239 combination reg byte a [ main::$12 ] reg byte a [ main::$13 ] reg byte a [ main::$14 ] reg byte a [ main::render#3 ] zp ZP_BYTE:101 [ main::render#1 ] zp ZP_BYTE:105 [ main::render#2 ] zp ZP_BYTE:97 [ main::key_event#0 ] 
Limited combination testing to 100 combinations of 6912 possible.
Uplifting [render_init] best 4092049 combination reg byte x [ render_init::c#2 render_init::c#1 ] zp ZP_WORD:166 [ render_init::$12 ] zp ZP_WORD:71 [ render_init::line#4 render_init::line#1 ] reg byte x [ render_init::i#2 render_init::i#1 ] reg byte a [ render_init::$22 ] reg byte a [ render_init::$23 ] zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ] zp ZP_WORD:78 [ render_init::li_2#2 render_init::li_2#1 ] zp ZP_WORD:76 [ render_init::li_1#2 render_init::li_1#1 ] 
Limited combination testing to 100 combinations of 192 possible.
Uplifting [play_move_down] best 4091040 combination reg byte a [ play_move_down::return#3 ] reg byte a [ play_move_down::key_event#0 ] reg byte x [ play_move_down::return#2 ] zp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] zp ZP_BYTE:131 [ play_move_down::$2 ] zp ZP_BYTE:133 [ play_move_down::$12 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [play_move_rotate] best 4089828 combination reg byte a [ play_move_rotate::return#4 ] reg byte a [ play_move_rotate::key_event#0 ] reg byte a [ play_move_rotate::return#1 ] zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] zp ZP_BYTE:116 [ play_move_rotate::$2 ] zp ZP_BYTE:118 [ play_move_rotate::$6 ] zp ZP_BYTE:119 [ play_move_rotate::$4 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_move_leftright] best 4088610 combination reg byte a [ play_move_leftright::return#4 ] reg byte a [ play_move_leftright::key_event#0 ] reg byte a [ play_move_leftright::return#1 ] reg byte a [ play_move_leftright::$4 ] zp ZP_BYTE:129 [ play_move_leftright::$8 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [keyboard_event_get] best 4087704 combination reg byte a [ keyboard_event_get::return#3 ] reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplifting [play_init] best 4087534 combination reg byte x [ play_init::j#2 play_init::j#1 ] reg byte a [ play_init::$1 ] zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ] zp ZP_WORD:66 [ play_init::pli#2 play_init::pli#1 ] 
Uplifting [sprites_init] best 4087364 combination reg byte x [ sprites_init::s#2 sprites_init::s#1 ] reg byte a [ sprites_init::s2#0 ] zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplifting [sprites_irq] best 4087338 combination reg byte x [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ] reg byte x [ sprites_irq::ptr#4 ] reg byte a [ sprites_irq::$4 ] reg byte a [ sprites_irq::ptr#2 ] zp ZP_BYTE:172 [ sprites_irq::ptr#3 ] zp ZP_BYTE:181 [ sprites_irq::ptr#1 ] zp ZP_BYTE:170 [ sprites_irq::ypos#0 ] zp ZP_BYTE:171 [ sprites_irq::ptr#0 ] 
Limited combination testing to 100 combinations of 36864 possible.
Uplifting [keyboard_event_pressed] best 4087318 combination reg byte a [ keyboard_event_pressed::return#12 ] reg byte a [ keyboard_event_pressed::$0 ] reg byte a [ keyboard_event_pressed::$1 ] reg byte a [ keyboard_event_pressed::return#0 ] zp ZP_BYTE:151 [ keyboard_event_pressed::return#1 ] zp ZP_BYTE:153 [ keyboard_event_pressed::return#2 ] zp ZP_BYTE:155 [ keyboard_event_pressed::return#10 ] zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ] zp ZP_BYTE:145 [ keyboard_event_pressed::return#11 ] zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ] 
Limited combination testing to 100 combinations of 589824 possible.
Uplifting [fill] best 4087318 combination zp ZP_WORD:80 [ fill::addr#2 fill::addr#1 ] 
Uplifting [render_show] best 4087309 combination reg byte a [ render_show::d018val#3 ] 
Uplifting [sid_rnd_init] best 4087309 combination 
Uplifting [render_screen_swap] best 4087309 combination 
Uplifting [sprites_irq_init] best 4087309 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Uplifting [] best 4087309 combination zp ZP_BYTE:63 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
Uplifting [play_collision] best 4087309 combination zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Uplifting [play_lock_current] best 4087309 combination zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:61 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 3937309 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Uplifting [play_remove_lines] best 3937309 combination zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ]
Uplifting [play_lock_current] best 3937309 combination zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
Uplifting [play_collision] best 3937309 combination zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ]
Uplifting [keyboard_event_scan] best 3937309 combination zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Uplifting [play_remove_lines] best 3937309 combination zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:138 [ play_remove_lines::c#0 ]
Uplifting [play_remove_lines] best 3937309 combination zp ZP_BYTE:138 [ play_remove_lines::c#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ]
Uplifting [render_current] best 3937309 combination zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:141 [ play_lock_current::i#1 ]
Uplifting [play_lock_current] best 3937309 combination zp ZP_BYTE:141 [ play_lock_current::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 3937309 combination zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ]
Uplifting [render_playfield] best 3937309 combination zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ]
Uplifting [render_current] best 3937309 combination zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Uplifting [play_remove_lines] best 3937309 combination zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:124 [ play_collision::i#1 ]
Uplifting [play_collision] best 3937309 combination zp ZP_BYTE:124 [ play_collision::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ]
Uplifting [render_current] best 3937309 combination zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Uplifting [render_playfield] best 3937309 combination zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ]
Uplifting [play_collision] best 3937309 combination zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 3937309 combination zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ]
Uplifting [play_lock_current] best 3937309 combination zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ]
Uplifting [play_collision] best 3937309 combination zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
Uplifting [play_lock_current] best 3937309 combination zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
Uplifting [] best 3937309 combination zp ZP_BYTE:44 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:110 [ render_current::$5 ]
Uplifting [render_current] best 3936909 combination reg byte a [ render_current::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ]
Uplifting [render_playfield] best 3936909 combination zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ]
Uplifting [render_current] best 3936909 combination zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ]
Uplifting [render_current] best 3936909 combination zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ]
Uplifting [play_collision] best 3936909 combination zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:101 [ main::render#1 ]
Uplifting [main] best 3936909 combination zp ZP_BYTE:101 [ main::render#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:105 [ main::render#2 ]
Uplifting [main] best 3936909 combination zp ZP_BYTE:105 [ main::render#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
Uplifting [] best 3936909 combination zp ZP_BYTE:43 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:97 [ main::key_event#0 ]
Uplifting [main] best 3936909 combination zp ZP_BYTE:97 [ main::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ current_ypos#9 current_ypos#84 current_ypos#85 ]
Uplifting [] best 3936875 combination reg byte y [ current_ypos#9 current_ypos#84 current_ypos#85 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
Uplifting [play_move_down] best 3936860 combination reg byte x [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:157 [ keyboard_modifiers#5 ]
Uplifting [] best 3936857 combination reg byte a [ keyboard_modifiers#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:163 [ render_screen_showing#1 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:163 [ render_screen_showing#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:175 [ irq_sprite_ypos#2 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:175 [ irq_sprite_ypos#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:176 [ irq_sprite_ptr#2 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:176 [ irq_sprite_ptr#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:178 [ irq_cnt#14 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:178 [ irq_cnt#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:179 [ irq_sprite_ypos#1 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:179 [ irq_sprite_ypos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:180 [ irq_sprite_ptr#1 ]
Uplifting [] best 3936857 combination zp ZP_BYTE:180 [ irq_sprite_ptr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ]
Uplifting [render_init] best 3936857 combination zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Uplifting [play_collision] best 3936844 combination reg byte x [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
Uplifting [] best 3936844 combination zp ZP_BYTE:40 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ]
Uplifting [render_screen_original] best 3936844 combination zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ]
Uplifting [] best 3936844 combination zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Uplifting [sprites_init] best 3936844 combination zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ]
Uplifting [] best 3936844 combination zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ]
Uplifting [play_init] best 3936844 combination zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ]
Uplifting [] best 3936844 combination zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
Uplifting [] best 3936833 combination reg byte x [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ]
Uplifting [] best 3936833 combination zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
Uplifting [play_collision] best 3936820 combination reg byte y [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Uplifting [play_move_rotate] best 3936820 combination zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ]
Uplifting [] best 3936820 combination zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Uplifting [] best 3936820 combination zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ]
Uplifting [] best 3936820 combination zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:116 [ play_move_rotate::$2 ]
Uplifting [play_move_rotate] best 3936814 combination reg byte a [ play_move_rotate::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:117 [ play_collision::return#13 ]
Uplifting [play_collision] best 3936808 combination reg byte a [ play_collision::return#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ play_move_rotate::$6 ]
Uplifting [play_move_rotate] best 3936802 combination reg byte a [ play_move_rotate::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:119 [ play_move_rotate::$4 ]
Uplifting [play_move_rotate] best 3936796 combination reg byte a [ play_move_rotate::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:126 [ play_collision::return#12 ]
Uplifting [play_collision] best 3936790 combination reg byte a [ play_collision::return#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:128 [ play_collision::return#1 ]
Uplifting [play_collision] best 3936784 combination reg byte a [ play_collision::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:129 [ play_move_leftright::$8 ]
Uplifting [play_move_leftright] best 3936778 combination reg byte a [ play_move_leftright::$8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:131 [ play_move_down::$2 ]
Uplifting [play_move_down] best 3936772 combination reg byte a [ play_move_down::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:132 [ play_collision::return#0 ]
Uplifting [play_collision] best 3936766 combination reg byte a [ play_collision::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:133 [ play_move_down::$12 ]
Uplifting [play_move_down] best 3936760 combination reg byte a [ play_move_down::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:150 [ keyboard_event_scan::$14 ]
Uplifting [keyboard_event_scan] best 3936754 combination reg byte a [ keyboard_event_scan::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:151 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 3936748 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:152 [ keyboard_event_scan::$18 ]
Uplifting [keyboard_event_scan] best 3936742 combination reg byte a [ keyboard_event_scan::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:153 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 3936736 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:154 [ keyboard_event_scan::$22 ]
Uplifting [keyboard_event_scan] best 3936730 combination reg byte a [ keyboard_event_scan::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:155 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 3936724 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:156 [ keyboard_event_scan::$26 ]
Uplifting [keyboard_event_scan] best 3936718 combination reg byte a [ keyboard_event_scan::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ irq_cnt#1 ]
Uplifting [] best 3936718 combination zp ZP_BYTE:174 [ irq_cnt#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:172 [ sprites_irq::ptr#3 ]
Uplifting [sprites_irq] best 3936706 combination reg byte x [ sprites_irq::ptr#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:181 [ sprites_irq::ptr#1 ]
Uplifting [sprites_irq] best 3936696 combination reg byte a [ sprites_irq::ptr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:170 [ sprites_irq::ypos#0 ]
Uplifting [sprites_irq] best 3936681 combination reg byte a [ sprites_irq::ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:171 [ sprites_irq::ptr#0 ]
Uplifting [sprites_irq] best 3936668 combination reg byte x [ sprites_irq::ptr#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 3936668 combination zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:145 [ keyboard_event_pressed::return#11 ]
Uplifting [keyboard_event_pressed] best 3936650 combination reg byte a [ keyboard_event_pressed::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ play_collision::return#14 ]
Uplifting [play_collision] best 3936623 combination reg byte a [ play_collision::return#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ]
Uplifting [keyboard_event_pressed] best 3936623 combination zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:93 [ irq_sprite_ypos#0 ]
Uplifting [] best 3936623 combination zp ZP_BYTE:93 [ irq_sprite_ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:91 [ render_screen_showing#0 ]
Uplifting [] best 3936623 combination zp ZP_BYTE:91 [ render_screen_showing#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:94 [ irq_sprite_ptr#0 ]
Uplifting [] best 3936623 combination zp ZP_BYTE:94 [ irq_sprite_ptr#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:95 [ irq_cnt#0 ]
Uplifting [] best 3936623 combination zp ZP_BYTE:95 [ irq_cnt#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ irq_raster_next#0 ]
Uplifting [] best 3936623 combination zp ZP_BYTE:92 [ irq_raster_next#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:134 [ play_spawn_current::$3 ]
Uplifting [play_spawn_current] best 3936623 combination zp ZP_BYTE:134 [ play_spawn_current::$3 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 ] ] with [ zp ZP_WORD:120 [ play_collision::piece_gfx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:37 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 ] ] with [ zp ZP_BYTE:52 [ play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:89 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 ] ] with [ zp ZP_BYTE:92 [ irq_raster_next#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:93 [ irq_sprite_ypos#0 ] ] with [ zp ZP_BYTE:175 [ irq_sprite_ypos#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:94 [ irq_sprite_ptr#0 ] ] with [ zp ZP_BYTE:176 [ irq_sprite_ptr#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:95 [ irq_cnt#0 ] ] with [ zp ZP_BYTE:174 [ irq_cnt#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:101 [ main::render#1 ] ] with [ zp ZP_BYTE:105 [ main::render#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] ] with [ zp ZP_BYTE:68 [ play_init::idx#2 play_init::idx#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 play_init::idx#2 play_init::idx#1 ] ] with [ zp ZP_BYTE:70 [ sprites_init::xpos#2 sprites_init::xpos#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 play_init::idx#2 play_init::idx#1 sprites_init::xpos#2 sprites_init::xpos#1 ] ] with [ zp ZP_BYTE:73 [ render_init::l#4 render_init::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 play_init::idx#2 play_init::idx#1 sprites_init::xpos#2 sprites_init::xpos#1 render_init::l#4 render_init::l#1 ] ] with [ zp ZP_BYTE:82 [ render_screen_original::y#8 render_screen_original::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 ] ] with [ zp ZP_BYTE:47 [ play_remove_lines::y#8 play_remove_lines::y#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 play_remove_lines::y#8 play_remove_lines::y#1 ] ] with [ zp ZP_BYTE:53 [ play_lock_current::l#6 play_lock_current::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 play_remove_lines::y#8 play_remove_lines::y#1 play_lock_current::l#6 play_lock_current::l#1 ] ] with [ zp ZP_BYTE:134 [ play_spawn_current::$3 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 ] ] with [ zp ZP_BYTE:17 [ render_playfield::l#2 render_playfield::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 ] ] with [ zp ZP_BYTE:23 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ] with [ zp ZP_BYTE:49 [ play_remove_lines::x#2 play_remove_lines::x#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 play_remove_lines::x#2 play_remove_lines::x#1 ] ] with [ zp ZP_BYTE:54 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 play_remove_lines::x#2 play_remove_lines::x#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] ] with [ zp ZP_BYTE:57 [ keyboard_event_pressed::keycode#5 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 play_remove_lines::x#2 play_remove_lines::x#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 keyboard_event_pressed::keycode#5 ] ] with [ zp ZP_BYTE:59 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 ] ] with [ zp ZP_BYTE:18 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ] with [ zp ZP_BYTE:28 [ play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 ] ] with [ zp ZP_BYTE:50 [ play_remove_lines::full#4 play_remove_lines::full#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_remove_lines::full#4 play_remove_lines::full#2 ] ] with [ zp ZP_BYTE:55 [ play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_remove_lines::full#4 play_remove_lines::full#2 play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 ] ] with [ zp ZP_BYTE:62 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_remove_lines::full#4 play_remove_lines::full#2 play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 ] ] with [ zp ZP_BYTE:143 [ keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 ] ] with [ zp ZP_WORD:19 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] ] with [ zp ZP_WORD:24 [ current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 ] ] with [ zp ZP_WORD:66 [ play_init::pli#2 play_init::pli#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 ] ] with [ zp ZP_WORD:71 [ render_init::line#4 render_init::line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 ] ] with [ zp ZP_WORD:76 [ render_init::li_1#2 render_init::li_1#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 render_init::li_1#2 render_init::li_1#1 ] ] with [ zp ZP_WORD:80 [ fill::addr#2 fill::addr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 render_init::li_1#2 render_init::li_1#1 fill::addr#2 fill::addr#1 ] ] with [ zp ZP_WORD:83 [ render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 render_init::li_1#2 render_init::li_1#1 fill::addr#2 fill::addr#1 render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 ] ] with [ zp ZP_WORD:139 [ play_lock_current::playfield_line#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 ] ] with [ zp ZP_BYTE:21 [ render_playfield::c#2 render_playfield::c#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 ] ] with [ zp ZP_BYTE:29 [ play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 ] ] with [ zp ZP_BYTE:138 [ play_remove_lines::c#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 play_remove_lines::c#0 ] ] with [ zp ZP_BYTE:141 [ play_lock_current::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 play_remove_lines::c#0 play_lock_current::i#1 ] ] with [ zp ZP_BYTE:148 [ keyboard_event_scan::row_scan#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:12 [ render_current::l#4 render_current::l#1 ] ] with [ zp ZP_BYTE:30 [ play_collision::l#6 play_collision::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:13 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 ] ] with [ zp ZP_BYTE:31 [ play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ] ]
Coalescing zero page register [ zp ZP_BYTE:14 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 ] ] with [ zp ZP_BYTE:32 [ play_collision::col#2 play_collision::col#9 play_collision::col#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:15 [ render_current::c#2 render_current::c#1 ] ] with [ zp ZP_BYTE:97 [ main::key_event#0 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 ] ] with [ zp ZP_WORD:78 [ render_init::li_2#2 render_init::li_2#1 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 render_init::li_2#2 render_init::li_2#1 ] ] with [ zp ZP_WORD:86 [ render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 ] ] with [ zp ZP_WORD:166 [ render_init::$12 ] ]
Coalescing zero page register [ zp ZP_BYTE:91 [ render_screen_showing#0 ] ] with [ zp ZP_BYTE:163 [ render_screen_showing#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:93 [ irq_sprite_ypos#0 irq_sprite_ypos#2 ] ] with [ zp ZP_BYTE:179 [ irq_sprite_ypos#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:94 [ irq_sprite_ptr#0 irq_sprite_ptr#2 ] ] with [ zp ZP_BYTE:180 [ irq_sprite_ptr#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:95 [ irq_cnt#0 irq_cnt#1 ] ] with [ zp ZP_BYTE:178 [ irq_cnt#14 ] ]
Coalescing zero page register [ zp ZP_WORD:111 [ render_current::screen_line#0 ] ] with [ zp ZP_WORD:122 [ play_collision::playfield_line#0 ] ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:5 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 play_remove_lines::x#2 play_remove_lines::x#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 keyboard_event_pressed::keycode#5 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_remove_lines::full#4 play_remove_lines::full#2 play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 keyboard_event_pressed::row_bits#0 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:7 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 render_init::li_1#2 render_init::li_1#1 fill::addr#2 fill::addr#1 render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 play_lock_current::playfield_line#0 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 play_remove_lines::c#0 play_lock_current::i#1 keyboard_event_scan::row_scan#0 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:10 [ render_current::l#4 render_current::l#1 play_collision::l#6 play_collision::l#1 ]
Allocated (was zp ZP_BYTE:13) zp ZP_BYTE:11 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
Allocated (was zp ZP_BYTE:14) zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
Allocated (was zp ZP_BYTE:15) zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 main::key_event#0 ]
Allocated (was zp ZP_BYTE:37) zp ZP_BYTE:14 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
Allocated (was zp ZP_WORD:38) zp ZP_WORD:15 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 render_init::$12 ]
Allocated (was zp ZP_BYTE:40) zp ZP_BYTE:17 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
Allocated (was zp ZP_WORD:41) zp ZP_WORD:18 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ]
Allocated (was zp ZP_BYTE:43) zp ZP_BYTE:20 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
Allocated (was zp ZP_BYTE:44) zp ZP_BYTE:21 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
Allocated (was zp ZP_BYTE:63) zp ZP_BYTE:22 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
Allocated (was zp ZP_BYTE:89) zp ZP_BYTE:23 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 irq_raster_next#0 ]
Allocated (was zp ZP_BYTE:91) zp ZP_BYTE:24 [ render_screen_showing#0 render_screen_showing#1 ]
Allocated (was zp ZP_BYTE:93) zp ZP_BYTE:25 [ irq_sprite_ypos#0 irq_sprite_ypos#2 irq_sprite_ypos#1 ]
Allocated (was zp ZP_BYTE:94) zp ZP_BYTE:26 [ irq_sprite_ptr#0 irq_sprite_ptr#2 irq_sprite_ptr#1 ]
Allocated (was zp ZP_BYTE:95) zp ZP_BYTE:27 [ irq_cnt#0 irq_cnt#1 irq_cnt#14 ]
Allocated (was zp ZP_BYTE:101) zp ZP_BYTE:28 [ main::render#1 main::render#2 ]
Allocated (was zp ZP_WORD:111) zp ZP_WORD:29 [ render_current::screen_line#0 play_collision::playfield_line#0 ]
Allocated (was zp ZP_BYTE:124) zp ZP_BYTE:31 [ play_collision::i#1 ]
Interrupt procedure sprites_irq clobbers AXCNZV
Removing interrupt register storage sty regy+1 in SEG927 entry interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage regy: in SEG966 [468] return  - exit interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage ldy #00 in SEG966 [468] return  - exit interrupt(HARDWARE_CLOBBER)

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label HARDWARE_IRQ = $fffe
  .const BLACK = 0
  .const WHITE = 1
  .const CYAN = 3
  .const BLUE = 6
  .const DARK_GREY = $b
  .const GREY = $c
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .const KEY_MODIFIER_LSHIFT = 1
  .const KEY_MODIFIER_RSHIFT = 2
  .const KEY_MODIFIER_CTRL = 4
  .const KEY_MODIFIER_COMMODORE = 8
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label PLAYFIELD_SCREEN_1 = $400
  .label PLAYFIELD_SCREEN_2 = $2c00
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $2800
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const IRQ_RASTER_FIRST = $31
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label keyboard_events_size = $16
  .label render_screen_showing = $18
  .label irq_raster_next = $17
  .label irq_sprite_ypos = $19
  .label irq_sprite_ptr = $1a
  .label irq_cnt = $1b
  .label current_movedown_counter = 4
  .label current_ypos = $e
  .label current_piece_gfx = $12
  .label current_xpos = $14
  .label current_piece_char = $15
  .label current_orientation = $11
  .label render_screen_render = 3
  .label render_screen_show = 2
  .label current_piece = $f
  .label current_piece_12 = 7
  .label render_screen_render_28 = 5
  .label current_xpos_47 = 6
  .label current_piece_gfx_53 = 7
  .label render_screen_render_62 = 5
  .label current_xpos_110 = 6
  .label current_xpos_111 = 6
  .label current_piece_gfx_100 = 7
  .label current_piece_gfx_101 = 7
  .label current_piece_74 = 7
  .label current_piece_75 = 7
  .label current_piece_76 = 7
  .label current_piece_77 = 7
//SEG2 @begin
bbegin:
  jmp b14
//SEG3 @14
b14:
//SEG4 [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta render_screen_showing
//SEG5 kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "nes-screen.imap"  }}
//SEG6 kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"  }}
  jmp b20
//SEG7 @20
b20:
//SEG8 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp b21
//SEG9 @21
b21:
//SEG10 [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG11 [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG12 [7] phi from @21 to toSpritePtr1 [phi:@21->toSpritePtr1]
toSpritePtr1_from_b21:
  jmp toSpritePtr1
//SEG13 toSpritePtr1
toSpritePtr1:
  jmp b33
//SEG14 @33
b33:
//SEG15 [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG16 [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt
//SEG17 [10] phi from @33 to @32 [phi:@33->@32]
b32_from_b33:
  jmp b32
//SEG18 @32
b32:
//SEG19 [11] call main 
//SEG20 [13] phi from @32 to main [phi:@32->main]
main_from_b32:
  jsr main
//SEG21 [12] phi from @32 to @end [phi:@32->@end]
bend_from_b32:
  jmp bend
//SEG22 @end
bend:
//SEG23 main
main: {
    .label key_event = $d
    .label render = $1c
  //SEG24 [14] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b15
  //SEG25 main::@15
  b15:
  //SEG26 asm { sei  }
    sei
  //SEG27 [16] call render_init 
  //SEG28 [372] phi from main::@15 to render_init [phi:main::@15->render_init]
  render_init_from_b15:
    jsr render_init
  //SEG29 [17] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  b16_from_b15:
    jmp b16
  //SEG30 main::@16
  b16:
  //SEG31 [18] call sprites_init 
    jsr sprites_init
  //SEG32 [19] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  b17_from_b16:
    jmp b17
  //SEG33 main::@17
  b17:
  //SEG34 [20] call sprites_irq_init 
    jsr sprites_irq_init
  //SEG35 [21] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  b18_from_b17:
    jmp b18
  //SEG36 main::@18
  b18:
  //SEG37 [22] call play_init 
  //SEG38 [337] phi from main::@18 to play_init [phi:main::@18->play_init]
  play_init_from_b18:
    jsr play_init
  //SEG39 [23] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  b19_from_b18:
    jmp b19
  //SEG40 main::@19
  b19:
  //SEG41 [24] call play_spawn_current 
  //SEG42 [208] phi from main::@19 to play_spawn_current [phi:main::@19->play_spawn_current]
  play_spawn_current_from_b19:
    jsr play_spawn_current
  //SEG43 [25] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  b20_from_b19:
    jmp b20
  //SEG44 main::@20
  b20:
  //SEG45 [26] call render_playfield 
  //SEG46 [95] phi from main::@20 to render_playfield [phi:main::@20->render_playfield]
  render_playfield_from_b20:
  //SEG47 [95] phi (byte) render_screen_render#19 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@20->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$40
    jsr render_playfield
    jmp b21
  //SEG48 main::@21
  b21:
  //SEG49 [27] (byte~) current_ypos#84 ← (byte) current_ypos#18 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG50 [28] (byte~) current_xpos#110 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_110
  //SEG51 [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_100
    lda current_piece_gfx+1
    sta current_piece_gfx_100+1
  //SEG52 [30] (byte~) current_piece_char#88 ← (byte) current_piece_char#12 -- vbuxx=vbuz1 
    ldx current_piece_char
  //SEG53 [31] call render_current 
  //SEG54 [72] phi from main::@21 to render_current [phi:main::@21->render_current]
  render_current_from_b21:
  //SEG55 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#88 [phi:main::@21->render_current#0] -- register_copy 
  //SEG56 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#100 [phi:main::@21->render_current#1] -- register_copy 
  //SEG57 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#110 [phi:main::@21->render_current#2] -- register_copy 
  //SEG58 [72] phi (byte) render_screen_render#28 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->render_current#3] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render_28
  //SEG59 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#84 [phi:main::@21->render_current#4] -- register_copy 
    jsr render_current
  //SEG60 [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG61 [33] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  b1_from_b21:
  //SEG62 [33] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG63 [33] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keyboard_events_size
  //SEG64 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#12 [phi:main::@21->main::@1#2] -- register_copy 
  //SEG65 [33] phi (byte) current_ypos#21 = (byte) current_ypos#18 [phi:main::@21->main::@1#3] -- register_copy 
  //SEG66 [33] phi (byte) current_xpos#10 = (byte) current_xpos#23 [phi:main::@21->main::@1#4] -- register_copy 
  //SEG67 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#16 [phi:main::@21->main::@1#5] -- register_copy 
  //SEG68 [33] phi (byte) current_orientation#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#6] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG69 [33] phi (byte*) current_piece#16 = (byte*~) current_piece#71 [phi:main::@21->main::@1#7] -- register_copy 
  //SEG70 [33] phi (byte) render_screen_render#16 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->main::@1#8] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render
  //SEG71 [33] phi (byte) render_screen_show#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#9] -- vbuz1=vbuc1 
    lda #0
    sta render_screen_show
    jmp b1
  //SEG72 [33] phi from main::@28 to main::@1 [phi:main::@28->main::@1]
  b1_from_b28:
  //SEG73 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@28->main::@1#0] -- register_copy 
  //SEG74 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@28->main::@1#1] -- register_copy 
  //SEG75 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@28->main::@1#2] -- register_copy 
  //SEG76 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@28->main::@1#3] -- register_copy 
  //SEG77 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@28->main::@1#4] -- register_copy 
  //SEG78 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@28->main::@1#5] -- register_copy 
  //SEG79 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@28->main::@1#6] -- register_copy 
  //SEG80 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@28->main::@1#7] -- register_copy 
    jmp b1
  //SEG81 main::@1
  b1:
    jmp b4
  //SEG82 main::@4
  b4:
  //SEG83 [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG84 [35] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
  b6_from_b4:
    jmp b6
  //SEG85 main::@6
  b6:
  //SEG86 [36] call render_show 
    jsr render_show
  //SEG87 [37] phi from main::@6 to main::@23 [phi:main::@6->main::@23]
  b23_from_b6:
    jmp b23
  //SEG88 main::@23
  b23:
  //SEG89 [38] call keyboard_event_scan 
  //SEG90 [274] phi from main::@23 to keyboard_event_scan [phi:main::@23->keyboard_event_scan]
  keyboard_event_scan_from_b23:
    jsr keyboard_event_scan
  //SEG91 [39] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
  //SEG92 main::@24
  b24:
  //SEG93 [40] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG94 [41] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#2  // register copy reg byte a
    jmp b25
  //SEG95 main::@25
  b25:
  //SEG96 [42] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuaa 
    sta key_event
  //SEG97 [43] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG98 [44] call play_move_down 
    jsr play_move_down
  //SEG99 [45] (byte) play_move_down::return#3 ← (byte) play_move_down::return#2 -- vbuaa=vbuxx 
    txa
    jmp b26
  //SEG100 main::@26
  b26:
  //SEG101 [46] (byte~) main::$12 ← (byte) play_move_down::return#3
    // (byte~) main::$12 = (byte) play_move_down::return#3  // register copy reg byte a
  //SEG102 [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #0
    sta render
  //SEG103 [48] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG104 [49] call play_move_leftright 
    jsr play_move_leftright
  //SEG105 [50] (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1
    // (byte) play_move_leftright::return#4 = (byte) play_move_leftright::return#1  // register copy reg byte a
    jmp b27
  //SEG106 main::@27
  b27:
  //SEG107 [51] (byte~) main::$13 ← (byte) play_move_leftright::return#4
    // (byte~) main::$13 = (byte) play_move_leftright::return#4  // register copy reg byte a
  //SEG108 [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc render
    sta render
  //SEG109 [53] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG110 [54] call play_move_rotate 
    jsr play_move_rotate
  //SEG111 [55] (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1
    // (byte) play_move_rotate::return#4 = (byte) play_move_rotate::return#1  // register copy reg byte a
    jmp b28
  //SEG112 main::@28
  b28:
  //SEG113 [56] (byte~) main::$14 ← (byte) play_move_rotate::return#4
    // (byte~) main::$14 = (byte) play_move_rotate::return#4  // register copy reg byte a
  //SEG114 [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc render
  //SEG115 [58] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_b28
    jmp b13
  //SEG116 main::@13
  b13:
  //SEG117 [59] (byte~) render_screen_render#63 ← (byte) render_screen_render#16 -- vbuxx=vbuz1 
    ldx render_screen_render
  //SEG118 [60] call render_playfield 
  //SEG119 [95] phi from main::@13 to render_playfield [phi:main::@13->render_playfield]
  render_playfield_from_b13:
  //SEG120 [95] phi (byte) render_screen_render#19 = (byte~) render_screen_render#63 [phi:main::@13->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp b29
  //SEG121 main::@29
  b29:
  //SEG122 [61] (byte~) current_ypos#85 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG123 [62] (byte~) render_screen_render#62 ← (byte) render_screen_render#16 -- vbuz1=vbuz2 
    lda render_screen_render
    sta render_screen_render_62
  //SEG124 [63] (byte~) current_xpos#111 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_111
  //SEG125 [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_101
    lda current_piece_gfx+1
    sta current_piece_gfx_101+1
  //SEG126 [65] (byte~) current_piece_char#89 ← (byte) current_piece_char#1 -- vbuxx=vbuz1 
    ldx current_piece_char
  //SEG127 [66] call render_current 
  //SEG128 [72] phi from main::@29 to render_current [phi:main::@29->render_current]
  render_current_from_b29:
  //SEG129 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#89 [phi:main::@29->render_current#0] -- register_copy 
  //SEG130 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#101 [phi:main::@29->render_current#1] -- register_copy 
  //SEG131 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#111 [phi:main::@29->render_current#2] -- register_copy 
  //SEG132 [72] phi (byte) render_screen_render#28 = (byte~) render_screen_render#62 [phi:main::@29->render_current#3] -- register_copy 
  //SEG133 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#85 [phi:main::@29->render_current#4] -- register_copy 
    jsr render_current
  //SEG134 [67] phi from main::@29 to main::@30 [phi:main::@29->main::@30]
  b30_from_b29:
    jmp b30
  //SEG135 main::@30
  b30:
  //SEG136 [68] call render_screen_swap 
    jsr render_screen_swap
  //SEG137 [33] phi from main::@30 to main::@1 [phi:main::@30->main::@1]
  b1_from_b30:
  //SEG138 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@30->main::@1#0] -- register_copy 
  //SEG139 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@30->main::@1#1] -- register_copy 
  //SEG140 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@30->main::@1#2] -- register_copy 
  //SEG141 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@30->main::@1#3] -- register_copy 
  //SEG142 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@30->main::@1#4] -- register_copy 
  //SEG143 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@30->main::@1#5] -- register_copy 
  //SEG144 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@30->main::@1#6] -- register_copy 
  //SEG145 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@30->main::@1#7] -- register_copy 
  //SEG146 [33] phi (byte) render_screen_render#16 = (byte) render_screen_render#11 [phi:main::@30->main::@1#8] -- register_copy 
  //SEG147 [33] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@30->main::@1#9] -- register_copy 
    jmp b1
}
//SEG148 render_screen_swap
render_screen_swap: {
  //SEG149 [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_render
    eor #$40
    sta render_screen_render
  //SEG150 [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_show
    eor #$40
    sta render_screen_show
    jmp breturn
  //SEG151 render_screen_swap::@return
  breturn:
  //SEG152 [71] return 
    rts
}
//SEG153 render_current
render_current: {
    .label ypos2 = 9
    .label screen_line = $1d
    .label xpos = $c
    .label i = $b
    .label l = $a
    .label c = $d
  //SEG154 [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG155 [74] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  b1_from_render_current:
  //SEG156 [74] phi (byte) render_current::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG157 [74] phi (byte) render_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG158 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG159 [74] phi from render_current::@3 to render_current::@1 [phi:render_current::@3->render_current::@1]
  b1_from_b3:
  //SEG160 [74] phi (byte) render_current::l#4 = (byte) render_current::l#1 [phi:render_current::@3->render_current::@1#0] -- register_copy 
  //SEG161 [74] phi (byte) render_current::i#3 = (byte) render_current::i#8 [phi:render_current::@3->render_current::@1#1] -- register_copy 
  //SEG162 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@3->render_current::@1#2] -- register_copy 
    jmp b1
  //SEG163 render_current::@1
  b1:
  //SEG164 [75] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13 -- vbuz1_gt_vbuc1_then_la1 
    lda ypos2
    cmp #2
    beq !+
    bcs b13
  !:
    jmp b7
  //SEG165 render_current::@7
  b7:
  //SEG166 [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lda #4
    clc
    adc i
    sta i
  //SEG167 [77] phi from render_current::@5 render_current::@7 to render_current::@3 [phi:render_current::@5/render_current::@7->render_current::@3]
  b3_from_b5:
  b3_from_b7:
  //SEG168 [77] phi (byte) render_current::i#8 = (byte) render_current::i#10 [phi:render_current::@5/render_current::@7->render_current::@3#0] -- register_copy 
    jmp b3
  //SEG169 render_current::@3
  b3:
  //SEG170 [78] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG171 [79] (byte) render_current::l#1 ← ++ (byte) render_current::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG172 [80] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1_from_b3
    jmp breturn
  //SEG173 render_current::@return
  breturn:
  //SEG174 [81] return 
    rts
  //SEG175 render_current::@13
  b13:
  //SEG176 [82] if((byte) render_current::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b2
    jmp b7
  //SEG177 render_current::@2
  b2:
  //SEG178 [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda render_screen_render_28
    clc
    adc ypos2
  //SEG179 [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG180 [85] (byte) render_current::xpos#0 ← (byte) current_xpos#47 -- vbuz1=vbuz2 
    lda current_xpos_47
    sta xpos
  //SEG181 [86] phi from render_current::@2 to render_current::@4 [phi:render_current::@2->render_current::@4]
  b4_from_b2:
  //SEG182 [86] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@2->render_current::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG183 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@2->render_current::@4#1] -- register_copy 
  //SEG184 [86] phi (byte) render_current::i#4 = (byte) render_current::i#3 [phi:render_current::@2->render_current::@4#2] -- register_copy 
    jmp b4
  //SEG185 [86] phi from render_current::@5 to render_current::@4 [phi:render_current::@5->render_current::@4]
  b4_from_b5:
  //SEG186 [86] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@5->render_current::@4#0] -- register_copy 
  //SEG187 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@5->render_current::@4#1] -- register_copy 
  //SEG188 [86] phi (byte) render_current::i#4 = (byte) render_current::i#10 [phi:render_current::@5->render_current::@4#2] -- register_copy 
    jmp b4
  //SEG189 render_current::@4
  b4:
  //SEG190 [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy i
    lda (current_piece_gfx_53),y
  //SEG191 [88] (byte) render_current::i#10 ← ++ (byte) render_current::i#4 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG192 [89] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    jmp b9
  //SEG193 render_current::@9
  b9:
  //SEG194 [90] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@5 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b5
    jmp b10
  //SEG195 render_current::@10
  b10:
  //SEG196 [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63 -- pbuz1_derefidx_vbuz2=vbuxx 
    ldy xpos
    txa
    sta (screen_line),y
    jmp b5
  //SEG197 render_current::@5
  b5:
  //SEG198 [92] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG199 [93] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG200 [94] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b4_from_b5
    jmp b3_from_b5
}
//SEG201 render_playfield
render_playfield: {
    .label screen_line = 7
    .label i = 6
    .label c = 9
    .label l = 5
  //SEG202 [96] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG203 [96] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta i
  //SEG204 [96] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta l
    jmp b1
  //SEG205 [96] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG206 [96] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG207 [96] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG208 render_playfield::@1
  b1:
  //SEG209 [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG210 [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2 -- vbuaa=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
  //SEG211 [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG212 [100] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG213 [100] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG214 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG215 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG216 [100] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG217 [100] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG218 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG219 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
  //SEG220 render_playfield::@2
  b2:
  //SEG221 [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (screen_line),y
  //SEG222 [102] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc screen_line
    bne !+
    inc screen_line+1
  !:
  //SEG223 [103] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG224 [104] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG225 [105] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b3
  //SEG226 render_playfield::@3
  b3:
  //SEG227 [106] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG228 [107] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b3
    jmp breturn
  //SEG229 render_playfield::@return
  breturn:
  //SEG230 [108] return 
    rts
}
//SEG231 play_move_rotate
play_move_rotate: {
    .label orientation = 5
  //SEG232 [109] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
    jmp b6
  //SEG233 play_move_rotate::@6
  b6:
  //SEG234 [110] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
  //SEG235 [111] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b14:
  breturn_from_b6:
  //SEG236 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#1 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG237 [111] phi (byte) current_orientation#19 = (byte) current_orientation#14 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG238 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
  //SEG239 play_move_rotate::@return
  breturn:
  //SEG240 [112] return 
    rts
  //SEG241 play_move_rotate::@2
  b2:
  //SEG242 [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
  //SEG243 [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
  //SEG244 [115] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  b4_from_b1:
  b4_from_b2:
  //SEG245 [115] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
    jmp b4
  //SEG246 play_move_rotate::@4
  b4:
  //SEG247 [116] (byte) play_collision::xpos#3 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG248 [117] (byte) play_collision::ypos#3 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG249 [118] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx orientation
  //SEG250 [119] (byte*~) current_piece#77 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_77
    lda current_piece+1
    sta current_piece_77+1
  //SEG251 [120] call play_collision 
  //SEG252 [128] phi from play_move_rotate::@4 to play_collision [phi:play_move_rotate::@4->play_collision]
  play_collision_from_b4:
  //SEG253 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@4->play_collision#0] -- register_copy 
  //SEG254 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@4->play_collision#1] -- register_copy 
  //SEG255 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@4->play_collision#2] -- register_copy 
  //SEG256 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#77 [phi:play_move_rotate::@4->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG257 [121] (byte) play_collision::return#13 ← (byte) play_collision::return#14
    // (byte) play_collision::return#13 = (byte) play_collision::return#14  // register copy reg byte a
    jmp b14
  //SEG258 play_move_rotate::@14
  b14:
  //SEG259 [122] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13
    // (byte~) play_move_rotate::$6 = (byte) play_collision::return#13  // register copy reg byte a
  //SEG260 [123] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG261 play_move_rotate::@11
  b11:
  //SEG262 [124] (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG263 [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4 -- pbuz1=pbuz2_plus_vbuz3 
    lda current_orientation
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG264 [111] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  breturn_from_b11:
  //SEG265 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#3 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG266 [111] phi (byte) current_orientation#19 = (byte) current_orientation#4 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG267 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG268 play_move_rotate::@1
  b1:
  //SEG269 [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
  //SEG270 [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
    jmp b4_from_b1
}
//SEG271 play_collision
play_collision: {
    .label xpos = 6
    .label piece_gfx = 7
    .label ypos2 = 9
    .label playfield_line = $1d
    .label i = $1f
    .label col = $c
    .label l = $a
    .label i_2 = $b
    .label i_3 = $b
    .label i_11 = $b
    .label i_13 = $b
  //SEG272 [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc piece_gfx
    sta piece_gfx
    lda #0
    adc piece_gfx+1
    sta piece_gfx+1
  //SEG273 [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG274 [131] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  b1_from_play_collision:
  //SEG275 [131] phi (byte) play_collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG276 [131] phi (byte) play_collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG277 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp b1
  //SEG278 play_collision::@1
  b1:
  //SEG279 [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG280 [133] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG281 [134] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  b2_from_b1:
  //SEG282 [134] phi (byte) play_collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG283 [134] phi (byte) play_collision::col#2 = (byte~) play_collision::col#9 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
  //SEG284 [134] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp b2
  //SEG285 play_collision::@2
  b2:
  //SEG286 [135] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG287 [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b8
  //SEG288 play_collision::@8
  b8:
  //SEG289 [137] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG290 [138] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  breturn_from_b8:
  //SEG291 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    jmp breturn
  //SEG292 play_collision::@return
  breturn:
  //SEG293 [139] return 
    rts
  //SEG294 play_collision::@4
  b4:
  //SEG295 [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and col
  //SEG296 [141] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG297 [138] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  breturn_from_b4:
  //SEG298 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp breturn
  //SEG299 play_collision::@5
  b5:
  //SEG300 [142] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG301 [138] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  breturn_from_b5:
  //SEG302 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp breturn
  //SEG303 play_collision::@6
  b6:
  //SEG304 [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG305 [138] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  breturn_from_b6:
  //SEG306 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp breturn
  //SEG307 play_collision::@3
  b3:
  //SEG308 [144] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG309 [145] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG310 [146] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b21
    jmp b17
  //SEG311 play_collision::@17
  b17:
  //SEG312 [147] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG313 [148] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG314 [149] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG315 [138] phi from play_collision::@17 to play_collision::@return [phi:play_collision::@17->play_collision::@return]
  breturn_from_b17:
  //SEG316 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_NONE#0 [phi:play_collision::@17->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp breturn
  //SEG317 play_collision::@20
  b20:
  //SEG318 [150] (byte~) play_collision::i#11 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG319 [131] phi from play_collision::@20 to play_collision::@1 [phi:play_collision::@20->play_collision::@1]
  b1_from_b20:
  //SEG320 [131] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@20->play_collision::@1#0] -- register_copy 
  //SEG321 [131] phi (byte) play_collision::i#3 = (byte~) play_collision::i#11 [phi:play_collision::@20->play_collision::@1#1] -- register_copy 
  //SEG322 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#1 [phi:play_collision::@20->play_collision::@1#2] -- register_copy 
    jmp b1
  //SEG323 play_collision::@21
  b21:
  //SEG324 [151] (byte~) play_collision::i#13 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG325 [134] phi from play_collision::@21 to play_collision::@2 [phi:play_collision::@21->play_collision::@2]
  b2_from_b21:
  //SEG326 [134] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@21->play_collision::@2#0] -- register_copy 
  //SEG327 [134] phi (byte) play_collision::col#2 = (byte) play_collision::col#1 [phi:play_collision::@21->play_collision::@2#1] -- register_copy 
  //SEG328 [134] phi (byte) play_collision::i#2 = (byte~) play_collision::i#13 [phi:play_collision::@21->play_collision::@2#2] -- register_copy 
    jmp b2
}
//SEG329 play_move_leftright
play_move_leftright: {
  //SEG330 [152] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_COMMA
    beq b1
    jmp b6
  //SEG331 play_move_leftright::@6
  b6:
  //SEG332 [153] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne breturn_from_b6
    jmp b7
  //SEG333 play_move_leftright::@7
  b7:
  //SEG334 [154] (byte) play_collision::xpos#2 ← (byte) current_xpos#1 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty play_collision.xpos
  //SEG335 [155] (byte) play_collision::ypos#2 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG336 [156] (byte) play_collision::orientation#2 ← (byte) current_orientation#14 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG337 [157] (byte*~) current_piece#76 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_76
    lda current_piece+1
    sta current_piece_76+1
  //SEG338 [158] call play_collision 
  //SEG339 [128] phi from play_move_leftright::@7 to play_collision [phi:play_move_leftright::@7->play_collision]
  play_collision_from_b7:
  //SEG340 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@7->play_collision#0] -- register_copy 
  //SEG341 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@7->play_collision#1] -- register_copy 
  //SEG342 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@7->play_collision#2] -- register_copy 
  //SEG343 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#76 [phi:play_move_leftright::@7->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG344 [159] (byte) play_collision::return#12 ← (byte) play_collision::return#14
    // (byte) play_collision::return#12 = (byte) play_collision::return#14  // register copy reg byte a
    jmp b15
  //SEG345 play_move_leftright::@15
  b15:
  //SEG346 [160] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12
    // (byte~) play_move_leftright::$4 = (byte) play_collision::return#12  // register copy reg byte a
  //SEG347 [161] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b15
    jmp b8
  //SEG348 play_move_leftright::@8
  b8:
  //SEG349 [162] (byte) current_xpos#2 ← ++ (byte) current_xpos#1 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG350 [163] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  breturn_from_b11:
  breturn_from_b8:
  //SEG351 [163] phi (byte) current_xpos#19 = (byte) current_xpos#4 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG352 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG353 [163] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  breturn_from_b14:
  breturn_from_b15:
  breturn_from_b6:
  //SEG354 [163] phi (byte) current_xpos#19 = (byte) current_xpos#1 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG355 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
  //SEG356 play_move_leftright::@return
  breturn:
  //SEG357 [164] return 
    rts
  //SEG358 play_move_leftright::@1
  b1:
  //SEG359 [165] (byte) play_collision::xpos#1 ← (byte) current_xpos#1 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx play_collision.xpos
  //SEG360 [166] (byte) play_collision::ypos#1 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG361 [167] (byte) play_collision::orientation#1 ← (byte) current_orientation#14 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG362 [168] (byte*~) current_piece#75 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG363 [169] call play_collision 
  //SEG364 [128] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from_b1:
  //SEG365 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
  //SEG366 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
  //SEG367 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
  //SEG368 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#75 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG369 [170] (byte) play_collision::return#1 ← (byte) play_collision::return#14
    // (byte) play_collision::return#1 = (byte) play_collision::return#14  // register copy reg byte a
    jmp b14
  //SEG370 play_move_leftright::@14
  b14:
  //SEG371 [171] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // (byte~) play_move_leftright::$8 = (byte) play_collision::return#1  // register copy reg byte a
  //SEG372 [172] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b14
    jmp b11
  //SEG373 play_move_leftright::@11
  b11:
  //SEG374 [173] (byte) current_xpos#4 ← -- (byte) current_xpos#1 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp breturn_from_b11
}
//SEG375 play_move_down
play_move_down: {
  //SEG376 [174] (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#12 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG377 [175] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b1_from_play_move_down
  //SEG378 [176] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  b8_from_play_move_down:
    jmp b8
  //SEG379 play_move_down::@8
  b8:
  //SEG380 [177] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  b1_from_b8:
  //SEG381 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
  //SEG382 [177] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
  //SEG383 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG384 play_move_down::@1
  b1:
  //SEG385 [178] call keyboard_event_pressed 
  //SEG386 [263] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
  //SEG387 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG388 [179] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b17
  //SEG389 play_move_down::@17
  b17:
  //SEG390 [180] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // (byte~) play_move_down::$2 = (byte) keyboard_event_pressed::return#12  // register copy reg byte a
  //SEG391 [181] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b17
    jmp b9
  //SEG392 play_move_down::@9
  b9:
  //SEG393 [182] if((byte) current_movedown_counter#1<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b9
    jmp b10
  //SEG394 play_move_down::@10
  b10:
  //SEG395 [183] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG396 [184] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  b2_from_b10:
  b2_from_b17:
  b2_from_b9:
  //SEG397 [184] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
    jmp b2
  //SEG398 play_move_down::@2
  b2:
  //SEG399 [185] if((byte) current_movedown_counter#1<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4_from_b2
    jmp b11
  //SEG400 play_move_down::@11
  b11:
  //SEG401 [186] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG402 [187] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  b4_from_b11:
  b4_from_b2:
  //SEG403 [187] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
    jmp b4
  //SEG404 play_move_down::@4
  b4:
  //SEG405 [188] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq breturn_from_b4
    jmp b12
  //SEG406 play_move_down::@12
  b12:
  //SEG407 [189] (byte) play_collision::ypos#0 ← (byte) current_ypos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuz1_plus_1 
    ldy current_ypos
    iny
  //SEG408 [190] (byte) play_collision::xpos#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG409 [191] (byte) play_collision::orientation#0 ← (byte) current_orientation#10 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG410 [192] (byte*~) current_piece#74 ← (byte*) current_piece#16 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG411 [193] call play_collision 
  //SEG412 [128] phi from play_move_down::@12 to play_collision [phi:play_move_down::@12->play_collision]
  play_collision_from_b12:
  //SEG413 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#0 [phi:play_move_down::@12->play_collision#0] -- register_copy 
  //SEG414 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#0 [phi:play_move_down::@12->play_collision#1] -- register_copy 
  //SEG415 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#0 [phi:play_move_down::@12->play_collision#2] -- register_copy 
  //SEG416 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#74 [phi:play_move_down::@12->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG417 [194] (byte) play_collision::return#0 ← (byte) play_collision::return#14
    // (byte) play_collision::return#0 = (byte) play_collision::return#14  // register copy reg byte a
    jmp b18
  //SEG418 play_move_down::@18
  b18:
  //SEG419 [195] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // (byte~) play_move_down::$12 = (byte) play_collision::return#0  // register copy reg byte a
  //SEG420 [196] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b6
  //SEG421 [197] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  b13_from_b18:
    jmp b13
  //SEG422 play_move_down::@13
  b13:
  //SEG423 [198] call play_lock_current 
    jsr play_lock_current
  //SEG424 [199] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  b19_from_b13:
    jmp b19
  //SEG425 play_move_down::@19
  b19:
  //SEG426 [200] call play_remove_lines 
  //SEG427 [224] phi from play_move_down::@19 to play_remove_lines [phi:play_move_down::@19->play_remove_lines]
  play_remove_lines_from_b19:
    jsr play_remove_lines
  //SEG428 [201] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  b20_from_b19:
    jmp b20
  //SEG429 play_move_down::@20
  b20:
  //SEG430 [202] call play_spawn_current 
  //SEG431 [208] phi from play_move_down::@20 to play_spawn_current [phi:play_move_down::@20->play_spawn_current]
  play_spawn_current_from_b20:
    jsr play_spawn_current
  //SEG432 [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG433 [204] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  b7_from_b20:
  //SEG434 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#12 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG435 [204] phi (byte) current_xpos#33 = (byte) current_xpos#23 [phi:play_move_down::@20->play_move_down::@7#1] -- register_copy 
  //SEG436 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#16 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG437 [204] phi (byte) current_orientation#29 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG438 [204] phi (byte*) current_piece#20 = (byte*~) current_piece#78 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG439 [204] phi (byte) current_ypos#29 = (byte) current_ypos#18 [phi:play_move_down::@20->play_move_down::@7#5] -- register_copy 
    jmp b7
  //SEG440 play_move_down::@7
  b7:
  //SEG441 [205] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  breturn_from_b7:
  //SEG442 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#20 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG443 [205] phi (byte) current_xpos#1 = (byte) current_xpos#33 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG444 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#26 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG445 [205] phi (byte) current_orientation#14 = (byte) current_orientation#29 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG446 [205] phi (byte*) current_piece#10 = (byte*) current_piece#20 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG447 [205] phi (byte) current_ypos#13 = (byte) current_ypos#29 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG448 [205] phi (byte) current_movedown_counter#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG449 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #1
    jmp breturn
  //SEG450 [205] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  breturn_from_b4:
  //SEG451 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#15 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG452 [205] phi (byte) current_xpos#1 = (byte) current_xpos#10 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG453 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#20 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG454 [205] phi (byte) current_orientation#14 = (byte) current_orientation#10 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG455 [205] phi (byte*) current_piece#10 = (byte*) current_piece#16 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG456 [205] phi (byte) current_ypos#13 = (byte) current_ypos#21 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG457 [205] phi (byte) current_movedown_counter#10 = (byte) current_movedown_counter#1 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG458 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
  //SEG459 play_move_down::@return
  breturn:
  //SEG460 [206] return 
    rts
  //SEG461 play_move_down::@6
  b6:
  //SEG462 [207] (byte) current_ypos#0 ← ++ (byte) current_ypos#21 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG463 [204] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  b7_from_b6:
  //SEG464 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#15 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG465 [204] phi (byte) current_xpos#33 = (byte) current_xpos#10 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG466 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#20 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG467 [204] phi (byte) current_orientation#29 = (byte) current_orientation#10 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG468 [204] phi (byte*) current_piece#20 = (byte*) current_piece#16 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG469 [204] phi (byte) current_ypos#29 = (byte) current_ypos#0 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG470 play_spawn_current
play_spawn_current: {
    .label _3 = 4
  //SEG471 [209] phi from play_spawn_current to play_spawn_current::@1 [phi:play_spawn_current->play_spawn_current::@1]
  b1_from_play_spawn_current:
  //SEG472 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:play_spawn_current->play_spawn_current::@1#0] -- vbuxx=vbuc1 
    ldx #7
    jmp b1
  //SEG473 play_spawn_current::@1
  b1:
  //SEG474 [210] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #7
    beq b2_from_b1
    jmp b3
  //SEG475 play_spawn_current::@3
  b3:
  //SEG476 [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta _3
  //SEG477 [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    ldy _3
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG478 [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta current_xpos
  //SEG479 [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta current_ypos
  //SEG480 [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta current_piece_char
    jmp breturn
  //SEG481 play_spawn_current::@return
  breturn:
  //SEG482 [216] return 
    rts
  //SEG483 [217] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  b2_from_b1:
    jmp b2
  //SEG484 play_spawn_current::@2
  b2:
  //SEG485 [218] call sid_rnd 
    jsr sid_rnd
  //SEG486 [219] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    // (byte) sid_rnd::return#2 = (byte) sid_rnd::return#0  // register copy reg byte a
    jmp b7
  //SEG487 play_spawn_current::@7
  b7:
  //SEG488 [220] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2
    // (byte~) play_spawn_current::$1 = (byte) sid_rnd::return#2  // register copy reg byte a
  //SEG489 [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuxx=vbuaa_band_vbuc1 
    and #7
    tax
  //SEG490 [209] phi from play_spawn_current::@7 to play_spawn_current::@1 [phi:play_spawn_current::@7->play_spawn_current::@1]
  b1_from_b7:
  //SEG491 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@7->play_spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG492 sid_rnd
sid_rnd: {
  //SEG493 [222] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    jmp breturn
  //SEG494 sid_rnd::@return
  breturn:
  //SEG495 [223] return 
    rts
}
//SEG496 play_remove_lines
play_remove_lines: {
    .label c = 9
    .label x = 5
    .label y = 4
    .label full = 6
  //SEG497 [225] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  b1_from_play_remove_lines:
  //SEG498 [225] phi (byte) play_remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG499 [225] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG500 [225] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    jmp b1
  //SEG501 [225] phi from play_remove_lines::@4 to play_remove_lines::@1 [phi:play_remove_lines::@4->play_remove_lines::@1]
  b1_from_b4:
  //SEG502 [225] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@4->play_remove_lines::@1#0] -- register_copy 
  //SEG503 [225] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4->play_remove_lines::@1#1] -- register_copy 
  //SEG504 [225] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@4->play_remove_lines::@1#2] -- register_copy 
    jmp b1
  //SEG505 play_remove_lines::@1
  b1:
  //SEG506 [226] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  b2_from_b1:
  //SEG507 [226] phi (byte) play_remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG508 [226] phi (byte) play_remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG509 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
  //SEG510 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG511 [226] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  b2_from_b3:
  //SEG512 [226] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
  //SEG513 [226] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
  //SEG514 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
  //SEG515 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp b2
  //SEG516 play_remove_lines::@2
  b2:
  //SEG517 [227] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta c
  //SEG518 [228] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
  //SEG519 [229] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@17 -- vbuz1_neq_0_then_la1 
    lda c
    cmp #0
    bne b17_from_b2
  //SEG520 [230] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  b3_from_b2:
  //SEG521 [230] phi (byte) play_remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
    jmp b3
  //SEG522 play_remove_lines::@3
  b3:
  //SEG523 [231] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda c
    sta playfield,x
  //SEG524 [232] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
  //SEG525 [233] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG526 [234] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2_from_b3
    jmp b9
  //SEG527 play_remove_lines::@9
  b9:
  //SEG528 [235] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4_from_b9
    jmp b10
  //SEG529 play_remove_lines::@10
  b10:
  //SEG530 [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #PLAYFIELD_COLS
    tax
  //SEG531 [237] phi from play_remove_lines::@10 play_remove_lines::@9 to play_remove_lines::@4 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4]
  b4_from_b10:
  b4_from_b9:
  //SEG532 [237] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#2 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4#0] -- register_copy 
    jmp b4
  //SEG533 play_remove_lines::@4
  b4:
  //SEG534 [238] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG535 [239] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG536 [240] phi from play_remove_lines::@4 play_remove_lines::@6 to play_remove_lines::@5 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5]
  b5_from_b4:
  b5_from_b6:
  //SEG537 [240] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5#0] -- register_copy 
    jmp b5
  //SEG538 play_remove_lines::@5
  b5:
  //SEG539 [241] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b6
    jmp breturn
  //SEG540 play_remove_lines::@return
  breturn:
  //SEG541 [242] return 
    rts
  //SEG542 play_remove_lines::@6
  b6:
  //SEG543 [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
  //SEG544 [244] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b5_from_b6
  //SEG545 [245] phi from play_remove_lines::@2 to play_remove_lines::@17 [phi:play_remove_lines::@2->play_remove_lines::@17]
  b17_from_b2:
    jmp b17
  //SEG546 play_remove_lines::@17
  b17:
  //SEG547 [230] phi from play_remove_lines::@17 to play_remove_lines::@3 [phi:play_remove_lines::@17->play_remove_lines::@3]
  b3_from_b17:
  //SEG548 [230] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@17->play_remove_lines::@3#0] -- register_copy 
    jmp b3
}
//SEG549 play_lock_current
play_lock_current: {
    .label ypos2 = $e
    .label playfield_line = 7
    .label col = 6
    .label i = 9
    .label l = 4
    .label i_2 = 5
    .label i_3 = 5
    .label i_7 = 5
    .label i_9 = 5
  //SEG550 [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl ypos2
  //SEG551 [247] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  b1_from_play_lock_current:
  //SEG552 [247] phi (byte) play_lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG553 [247] phi (byte) play_lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i_3
  //SEG554 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG555 play_lock_current::@1
  b1:
  //SEG556 [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG557 [249] (byte) play_lock_current::col#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG558 [250] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  b2_from_b1:
  //SEG559 [250] phi (byte) play_lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG560 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
  //SEG561 [250] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp b2
  //SEG562 play_lock_current::@2
  b2:
  //SEG563 [251] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG564 [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
  //SEG565 play_lock_current::@4
  b4:
  //SEG566 [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_char
    ldy col
    sta (playfield_line),y
    jmp b3
  //SEG567 play_lock_current::@3
  b3:
  //SEG568 [254] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG569 [255] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG570 [256] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b8
    jmp b5
  //SEG571 play_lock_current::@5
  b5:
  //SEG572 [257] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG573 [258] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG574 [259] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
    jmp breturn
  //SEG575 play_lock_current::@return
  breturn:
  //SEG576 [260] return 
    rts
  //SEG577 play_lock_current::@7
  b7:
  //SEG578 [261] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG579 [247] phi from play_lock_current::@7 to play_lock_current::@1 [phi:play_lock_current::@7->play_lock_current::@1]
  b1_from_b7:
  //SEG580 [247] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@7->play_lock_current::@1#0] -- register_copy 
  //SEG581 [247] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@7->play_lock_current::@1#1] -- register_copy 
  //SEG582 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#1 [phi:play_lock_current::@7->play_lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG583 play_lock_current::@8
  b8:
  //SEG584 [262] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG585 [250] phi from play_lock_current::@8 to play_lock_current::@2 [phi:play_lock_current::@8->play_lock_current::@2]
  b2_from_b8:
  //SEG586 [250] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@8->play_lock_current::@2#0] -- register_copy 
  //SEG587 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#1 [phi:play_lock_current::@8->play_lock_current::@2#1] -- register_copy 
  //SEG588 [250] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@8->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG589 keyboard_event_pressed
keyboard_event_pressed: {
    .label row_bits = 6
    .label keycode = 5
  //SEG590 [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG591 [265] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG592 [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG593 [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
    jmp breturn
  //SEG594 keyboard_event_pressed::@return
  breturn:
  //SEG595 [268] return 
    rts
}
//SEG596 keyboard_event_get
keyboard_event_get: {
  //SEG597 [269] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b3
  //SEG598 keyboard_event_get::@3
  b3:
  //SEG599 [270] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG600 [271] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG601 [272] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  breturn_from_b3:
  //SEG602 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG603 [272] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG604 [272] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
  //SEG605 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG606 [272] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp breturn
  //SEG607 keyboard_event_get::@return
  breturn:
  //SEG608 [273] return 
    rts
}
//SEG609 keyboard_event_scan
keyboard_event_scan: {
    .label row_scan = 9
    .label keycode = 6
    .label row = 5
  //SEG610 [275] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  b1_from_keyboard_event_scan:
  //SEG611 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG612 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG613 [275] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta row
    jmp b1
  //SEG614 [275] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  b1_from_b3:
  //SEG615 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG616 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG617 [275] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
    jmp b1
  //SEG618 keyboard_event_scan::@1
  b1:
  //SEG619 [276] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG620 [277] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG621 [278] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
    jmp b25
  //SEG622 keyboard_event_scan::@25
  b25:
  //SEG623 [279] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG624 [280] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda row_scan
    ldy row
    cmp keyboard_scan_values,y
    bne b4_from_b25
    jmp b13
  //SEG625 keyboard_event_scan::@13
  b13:
  //SEG626 [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG627 [282] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  b3_from_b13:
  b3_from_b19:
  //SEG628 [282] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG629 [282] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
    jmp b3
  //SEG630 keyboard_event_scan::@3
  b3:
  //SEG631 [283] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG632 [284] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1_from_b3
  //SEG633 [285] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  b20_from_b3:
    jmp b20
  //SEG634 keyboard_event_scan::@20
  b20:
  //SEG635 [286] call keyboard_event_pressed 
  //SEG636 [263] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  keyboard_event_pressed_from_b20:
  //SEG637 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG638 [287] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b26
  //SEG639 keyboard_event_scan::@26
  b26:
  //SEG640 [288] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
    // (byte~) keyboard_event_scan::$14 = (byte) keyboard_event_pressed::return#0  // register copy reg byte a
  //SEG641 [289] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b9_from_b26
  //SEG642 [290] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  b21_from_b26:
    jmp b21
  //SEG643 keyboard_event_scan::@21
  b21:
  //SEG644 [291] phi from keyboard_event_scan::@21 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9]
  b9_from_b21:
  //SEG645 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9#0] -- vbuxx=vbuc1 
    ldx #0|KEY_MODIFIER_LSHIFT
    jmp b9
  //SEG646 [291] phi from keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9]
  b9_from_b26:
  //SEG647 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b9
  //SEG648 keyboard_event_scan::@9
  b9:
  //SEG649 [292] call keyboard_event_pressed 
  //SEG650 [263] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  keyboard_event_pressed_from_b9:
  //SEG651 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG652 [293] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b27
  //SEG653 keyboard_event_scan::@27
  b27:
  //SEG654 [294] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
    // (byte~) keyboard_event_scan::$18 = (byte) keyboard_event_pressed::return#1  // register copy reg byte a
  //SEG655 [295] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b27
    jmp b22
  //SEG656 keyboard_event_scan::@22
  b22:
  //SEG657 [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
  //SEG658 [297] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  b10_from_b22:
  b10_from_b27:
  //SEG659 [297] phi (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
  //SEG660 keyboard_event_scan::@10
  b10:
  //SEG661 [298] call keyboard_event_pressed 
  //SEG662 [263] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  keyboard_event_pressed_from_b10:
  //SEG663 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG664 [299] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b28
  //SEG665 keyboard_event_scan::@28
  b28:
  //SEG666 [300] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
    // (byte~) keyboard_event_scan::$22 = (byte) keyboard_event_pressed::return#2  // register copy reg byte a
  //SEG667 [301] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11_from_b28
    jmp b23
  //SEG668 keyboard_event_scan::@23
  b23:
  //SEG669 [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
  //SEG670 [303] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  b11_from_b23:
  b11_from_b28:
  //SEG671 [303] phi (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#4 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11#0] -- register_copy 
    jmp b11
  //SEG672 keyboard_event_scan::@11
  b11:
  //SEG673 [304] call keyboard_event_pressed 
  //SEG674 [263] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  keyboard_event_pressed_from_b11:
  //SEG675 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG676 [305] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
    jmp b29
  //SEG677 keyboard_event_scan::@29
  b29:
  //SEG678 [306] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
    // (byte~) keyboard_event_scan::$26 = (byte) keyboard_event_pressed::return#10  // register copy reg byte a
  //SEG679 [307] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn
    jmp b24
  //SEG680 keyboard_event_scan::@24
  b24:
  //SEG681 [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuaa=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    jmp breturn
  //SEG682 keyboard_event_scan::@return
  breturn:
  //SEG683 [309] return 
    rts
  //SEG684 [310] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b4_from_b25:
  //SEG685 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG686 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG687 [310] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b4
  //SEG688 [310] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  b4_from_b5:
  //SEG689 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG690 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG691 [310] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
    jmp b4
  //SEG692 keyboard_event_scan::@4
  b4:
  //SEG693 [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG694 [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG695 [313] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5_from_b4
    jmp b15
  //SEG696 keyboard_event_scan::@15
  b15:
  //SEG697 [314] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5_from_b15
    jmp b16
  //SEG698 keyboard_event_scan::@16
  b16:
  //SEG699 [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG700 [316] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
    jmp b17
  //SEG701 keyboard_event_scan::@17
  b17:
  //SEG702 [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG703 [318] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG704 [319] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  b5_from_b15:
  b5_from_b17:
  b5_from_b4:
  b5_from_b7:
  //SEG705 [319] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
    jmp b5
  //SEG706 keyboard_event_scan::@5
  b5:
  //SEG707 [320] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG708 [321] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG709 [322] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b4_from_b5
    jmp b19
  //SEG710 keyboard_event_scan::@19
  b19:
  //SEG711 [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3_from_b19
  //SEG712 keyboard_event_scan::@7
  b7:
  //SEG713 [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG714 [325] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG715 [326] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5_from_b7
}
//SEG716 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG717 [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG718 [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
  //SEG719 keyboard_matrix_read::@return
  breturn:
  //SEG720 [329] return 
    rts
}
//SEG721 render_show
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
  //SEG722 [330] if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda render_screen_show
    cmp #0
    beq toD0181_from_render_show
  //SEG723 [331] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
  //SEG724 render_show::toD0182
  toD0182:
  //SEG725 [332] phi from render_show::toD0182 to render_show::@2 [phi:render_show::toD0182->render_show::@2]
  b2_from_toD0182:
  //SEG726 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@2#0] -- vbuaa=vbuc1 
    lda #toD0182_return
    jmp b2
  //SEG727 render_show::@2
  b2:
  //SEG728 [333] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
  //SEG729 [334] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda render_screen_show
    sta render_screen_showing
    jmp breturn
  //SEG730 render_show::@return
  breturn:
  //SEG731 [335] return 
    rts
  //SEG732 [336] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
  //SEG733 render_show::toD0181
  toD0181:
  //SEG734 [332] phi from render_show::toD0181 to render_show::@2 [phi:render_show::toD0181->render_show::@2]
  b2_from_toD0181:
  //SEG735 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@2#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp b2
}
//SEG736 play_init
play_init: {
    .label pli = 7
    .label idx = 2
  //SEG737 [338] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  b1_from_play_init:
  //SEG738 [338] phi (byte) play_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG739 [338] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG740 [338] phi (byte) play_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG741 [338] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  b1_from_b1:
  //SEG742 [338] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
  //SEG743 [338] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
  //SEG744 [338] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp b1
  //SEG745 play_init::@1
  b1:
  //SEG746 [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG747 [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG748 [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda idx
    sta playfield_lines_idx,x
  //SEG749 [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG750 [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG751 [344] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG752 [345] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp b2
  //SEG753 play_init::@2
  b2:
  //SEG754 [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    jmp breturn
  //SEG755 play_init::@return
  breturn:
  //SEG756 [347] return 
    rts
}
//SEG757 sprites_irq_init
sprites_irq_init: {
  //SEG758 asm { sei  }
    sei
  //SEG759 [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG760 asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
  //SEG761 [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG762 [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG763 [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG764 [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG765 [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG766 [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG767 [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
  //SEG768 asm { cli  }
    cli
    jmp breturn
  //SEG769 sprites_irq_init::@return
  breturn:
  //SEG770 [359] return 
    rts
}
//SEG771 sprites_init
sprites_init: {
    .label xpos = 2
  //SEG772 [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG773 [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG774 [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
  //SEG775 [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
  //SEG776 [364] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG777 [364] phi (byte) sprites_init::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta xpos
  //SEG778 [364] phi (byte) sprites_init::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG779 [364] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG780 [364] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
  //SEG781 [364] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp b1
  //SEG782 sprites_init::@1
  b1:
  //SEG783 [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG784 [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda xpos
    sta SPRITES_XPOS,y
  //SEG785 [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,x
  //SEG786 [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG787 [369] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG788 [370] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1_from_b1
    jmp breturn
  //SEG789 sprites_init::@return
  breturn:
  //SEG790 [371] return 
    rts
}
//SEG791 render_init
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_CHARSET)>>6
    .label _12 = $f
    .label line = 7
    .label l = 2
    .label li_1 = 7
    .label li_2 = $f
    jmp vicSelectGfxBank1
  //SEG792 render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
  //SEG793 [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG794 [374] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
  //SEG795 render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
  //SEG796 render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
  //SEG797 [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b7
  //SEG798 render_init::@7
  b7:
  //SEG799 [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG800 [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG801 [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
  //SEG802 [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG803 [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0 -- _deref_pbuc1=vbuc2 
    lda #CYAN
    sta BGCOL3
  //SEG804 [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
  //SEG805 [382] call render_screen_original 
  //SEG806 [412] phi from render_init::@7 to render_screen_original [phi:render_init::@7->render_screen_original]
  render_screen_original_from_b7:
  //SEG807 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@7->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG808 [383] phi from render_init::@7 to render_init::@8 [phi:render_init::@7->render_init::@8]
  b8_from_b7:
    jmp b8
  //SEG809 render_init::@8
  b8:
  //SEG810 [384] call render_screen_original 
  //SEG811 [412] phi from render_init::@8 to render_screen_original [phi:render_init::@8->render_screen_original]
  render_screen_original_from_b8:
  //SEG812 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@8->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG813 [385] phi from render_init::@8 to render_init::@9 [phi:render_init::@8->render_init::@9]
  b9_from_b8:
    jmp b9
  //SEG814 render_init::@9
  b9:
  //SEG815 [386] call fill 
  //SEG816 [406] phi from render_init::@9 to fill [phi:render_init::@9->fill]
  fill_from_b9:
    jsr fill
  //SEG817 [387] phi from render_init::@9 to render_init::@1 [phi:render_init::@9->render_init::@1]
  b1_from_b9:
  //SEG818 [387] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_init::@9->render_init::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta l
  //SEG819 [387] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@9->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+4*$28+$10
    sta line
    lda #>COLS+4*$28+$10
    sta line+1
    jmp b1
  //SEG820 [387] phi from render_init::@4 to render_init::@1 [phi:render_init::@4->render_init::@1]
  b1_from_b4:
  //SEG821 [387] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@4->render_init::@1#0] -- register_copy 
  //SEG822 [387] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@4->render_init::@1#1] -- register_copy 
    jmp b1
  //SEG823 render_init::@1
  b1:
  //SEG824 [388] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  b2_from_b1:
  //SEG825 [388] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG826 [388] phi from render_init::@2 to render_init::@2 [phi:render_init::@2->render_init::@2]
  b2_from_b2:
  //SEG827 [388] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@2->render_init::@2#0] -- register_copy 
    jmp b2
  //SEG828 render_init::@2
  b2:
  //SEG829 [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _12
    lda #0
    adc line+1
    sta _12+1
  //SEG830 [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (_12),y
  //SEG831 [391] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG832 [392] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS-1+1
    bne b2_from_b2
    jmp b4
  //SEG833 render_init::@4
  b4:
  //SEG834 [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG835 [394] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG836 [395] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1_from_b4
  //SEG837 [396] phi from render_init::@4 to render_init::@3 [phi:render_init::@4->render_init::@3]
  b3_from_b4:
  //SEG838 [396] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2+1
  //SEG839 [396] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1+1
  //SEG840 [396] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@4->render_init::@3#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG841 [396] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  b3_from_b3:
  //SEG842 [396] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
  //SEG843 [396] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@3->render_init::@3#1] -- register_copy 
  //SEG844 [396] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@3->render_init::@3#2] -- register_copy 
    jmp b3
  //SEG845 render_init::@3
  b3:
  //SEG846 [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG847 [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li_1
    sta screen_lines_1,y
    lda li_1+1
    sta screen_lines_1+1,y
  //SEG848 [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG849 [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li_2
    sta screen_lines_2,y
    lda li_2+1
    sta screen_lines_2+1,y
  //SEG850 [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_1
    clc
    adc #$28
    sta li_1
    bcc !+
    inc li_1+1
  !:
  //SEG851 [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_2
    clc
    adc #$28
    sta li_2
    bcc !+
    inc li_2+1
  !:
  //SEG852 [403] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG853 [404] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b3_from_b3
    jmp breturn
  //SEG854 render_init::@return
  breturn:
  //SEG855 [405] return 
    rts
}
//SEG856 fill
fill: {
    .const size = $3e8
    .label end = COLS+size
    .label addr = 7
  //SEG857 [407] phi from fill to fill::@1 [phi:fill->fill::@1]
  b1_from_fill:
  //SEG858 [407] phi (byte*) fill::addr#2 = (const byte*) COLS#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta addr
    lda #>COLS
    sta addr+1
    jmp b1
  //SEG859 [407] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  b1_from_b1:
  //SEG860 [407] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG861 fill::@1
  b1:
  //SEG862 [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (addr),y
  //SEG863 [409] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG864 [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1_from_b1
    lda addr
    cmp #<end
    bne b1_from_b1
    jmp breturn
  //SEG865 fill::@return
  breturn:
  //SEG866 [411] return 
    rts
}
//SEG867 render_screen_original
render_screen_original: {
    .const SPACE = 0
    .label screen = $f
    .label orig = 7
    .label y = 2
  //SEG868 [413] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  b1_from_render_screen_original:
  //SEG869 [413] phi (byte) render_screen_original::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG870 [413] phi (byte*) render_screen_original::orig#5 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig+1
  //SEG871 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#11 [phi:render_screen_original->render_screen_original::@1#2] -- register_copy 
    jmp b1
  //SEG872 [413] phi from render_screen_original::@9 to render_screen_original::@1 [phi:render_screen_original::@9->render_screen_original::@1]
  b1_from_b9:
  //SEG873 [413] phi (byte) render_screen_original::y#8 = (byte) render_screen_original::y#1 [phi:render_screen_original::@9->render_screen_original::@1#0] -- register_copy 
  //SEG874 [413] phi (byte*) render_screen_original::orig#5 = (byte*) render_screen_original::orig#1 [phi:render_screen_original::@9->render_screen_original::@1#1] -- register_copy 
  //SEG875 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#12 [phi:render_screen_original::@9->render_screen_original::@1#2] -- register_copy 
    jmp b1
  //SEG876 render_screen_original::@1
  b1:
  //SEG877 [414] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  b2_from_b1:
  //SEG878 [414] phi (byte) render_screen_original::x#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG879 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    jmp b2
  //SEG880 [414] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  b2_from_b2:
  //SEG881 [414] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
  //SEG882 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    jmp b2
  //SEG883 render_screen_original::@2
  b2:
  //SEG884 [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG885 [416] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG886 [417] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG887 [418] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2_from_b2
  //SEG888 [419] phi from render_screen_original::@2 render_screen_original::@4 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG889 [419] phi (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#0] -- register_copy 
  //SEG890 [419] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#1] -- register_copy 
  //SEG891 [419] phi (byte*) render_screen_original::orig#2 = (byte*) render_screen_original::orig#5 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#2] -- register_copy 
    jmp b3
  //SEG892 render_screen_original::@3
  b3:
  //SEG893 [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=_deref_pbuz1_plus_1 
    ldy #0
    lda (orig),y
    tay
    iny
  //SEG894 [421] (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2 -- pbuz1=_inc_pbuz1 
    inc orig
    bne !+
    inc orig+1
  !:
  //SEG895 [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11 -- vbuxx_gt_vbuc1_then_la1 
    txa
    cmp #$e
    beq !+
    bcs b11
  !:
  //SEG896 [423] phi from render_screen_original::@3 render_screen_original::@7 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4]
  b4_from_b3:
  b4_from_b7:
  //SEG897 [423] phi (byte) render_screen_original::c#2 = (byte) render_screen_original::c#0 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4#0] -- register_copy 
    jmp b4
  //SEG898 render_screen_original::@4
  b4:
  //SEG899 [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (screen),y
  //SEG900 [425] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#10 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG901 [426] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
  //SEG902 [427] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne b3_from_b4
  //SEG903 [428] phi from render_screen_original::@4 render_screen_original::@5 to render_screen_original::@5 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5]
  b5_from_b4:
  b5_from_b5:
  //SEG904 [428] phi (byte) render_screen_original::x#7 = (byte) render_screen_original::x#2 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#0] -- register_copy 
  //SEG905 [428] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#1] -- register_copy 
    jmp b5
  //SEG906 render_screen_original::@5
  b5:
  //SEG907 [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG908 [430] (byte*) render_screen_original::screen#12 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG909 [431] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG910 [432] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5_from_b5
    jmp b9
  //SEG911 render_screen_original::@9
  b9:
  //SEG912 [433] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG913 [434] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b9
    jmp breturn
  //SEG914 render_screen_original::@return
  breturn:
  //SEG915 [435] return 
    rts
  //SEG916 render_screen_original::@11
  b11:
  //SEG917 [436] if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$1b
    bcc b7
  //SEG918 [423] phi from render_screen_original::@11 to render_screen_original::@4 [phi:render_screen_original::@11->render_screen_original::@4]
  b4_from_b11:
    jmp b4
  //SEG919 render_screen_original::@7
  b7:
  //SEG920 [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #$c0
    tay
    jmp b4_from_b7
}
//SEG921 sid_rnd_init
sid_rnd_init: {
  //SEG922 [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG923 [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
  //SEG924 sid_rnd_init::@return
  breturn:
  //SEG925 [440] return 
    rts
}
//SEG926 sprites_irq
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG927 entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
  //SEG928 [441] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuaa=vbuz1 
    lda irq_sprite_ypos
  //SEG929 [442] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
  //SEG930 [443] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
  //SEG931 [444] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
  //SEG932 [445] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    jmp b1
  //SEG933 sprites_irq::@1
  b1:
  //SEG934 [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bcc b1
    jmp b7
  //SEG935 sprites_irq::@7
  b7:
  //SEG936 [447] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuxx=vbuz1 
    ldx irq_sprite_ptr
  //SEG937 [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2 -- vbuz1_eq_0_then_la1 
    lda render_screen_showing
    cmp #0
    beq b2
    jmp b8
  //SEG938 sprites_irq::@8
  b8:
  //SEG939 [449] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
  //SEG940 [450] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG941 [451] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+1
  //SEG942 [452] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+2
  //SEG943 [453] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG944 [454] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+3
    jmp b3
  //SEG945 sprites_irq::@3
  b3:
  //SEG946 [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz1 
    inc irq_cnt
  //SEG947 [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt
    cmp #$a
    beq b4
    jmp b10
  //SEG948 sprites_irq::@10
  b10:
  //SEG949 [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next
  //SEG950 [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos
  //SEG951 [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr
  //SEG952 [460] phi from sprites_irq::@10 sprites_irq::@13 to sprites_irq::@5 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5]
  b5_from_b10:
  b5_from_b13:
  //SEG953 [460] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#2 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5#0] -- register_copy 
    jmp b5
  //SEG954 sprites_irq::@5
  b5:
  //SEG955 [461] (byte) sprites_irq::raster_next#0 ← (byte) irq_raster_next#13 -- vbuxx=vbuz1 
    ldx irq_raster_next
  //SEG956 [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG957 [463] if((byte~) sprites_irq::$4!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto sprites_irq::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
    bne b6_from_b5
    jmp b12
  //SEG958 sprites_irq::@12
  b12:
  //SEG959 [464] (byte) sprites_irq::raster_next#1 ← (byte) sprites_irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuxx_minus_1 
    dex
  //SEG960 [465] phi from sprites_irq::@12 sprites_irq::@5 to sprites_irq::@6 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6]
  b6_from_b12:
  b6_from_b5:
  //SEG961 [465] phi (byte) sprites_irq::raster_next#2 = (byte) sprites_irq::raster_next#1 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6#0] -- register_copy 
    jmp b6
  //SEG962 sprites_irq::@6
  b6:
  //SEG963 [466] *((const byte*) RASTER#0) ← (byte) sprites_irq::raster_next#2 -- _deref_pbuc1=vbuxx 
    stx RASTER
  //SEG964 [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG965 sprites_irq::@return
  breturn:
  //SEG966 [468] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
  //SEG967 sprites_irq::@4
  b4:
  //SEG968 [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG969 [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG970 [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG971 [472] phi from sprites_irq::@4 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@4->sprites_irq::toSpritePtr2]
  toSpritePtr2_from_b4:
    jmp toSpritePtr2
  //SEG972 sprites_irq::toSpritePtr2
  toSpritePtr2:
    jmp b13
  //SEG973 sprites_irq::@13
  b13:
  //SEG974 [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
    jmp b5_from_b13
  //SEG975 sprites_irq::@2
  b2:
  //SEG976 [474] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
  //SEG977 [475] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    txa
    clc
    adc #1
  //SEG978 [476] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+1
  //SEG979 [477] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+2
  //SEG980 [478] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
  //SEG981 [479] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b3
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_CHARS: .byte $58, $59, $99, $59, $58, $58, $99
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 3, 4
  PIECES_START_Y: .byte 2, 1, 1, 1, 2, 0, 1
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  .import binary "nes-screen.iscr"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b14
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp toSpritePtr1
Removing instruction jmp b33
Removing instruction jmp b32
Removing instruction jmp bend
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b25
Removing instruction jmp b26
Removing instruction jmp b27
Removing instruction jmp b28
Removing instruction jmp b13
Removing instruction jmp b29
Removing instruction jmp b30
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b11
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b17
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b15
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b14
Removing instruction jmp b11
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b17
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp b11
Removing instruction jmp b4
Removing instruction jmp b12
Removing instruction jmp b18
Removing instruction jmp b13
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b25
Removing instruction jmp b13
Removing instruction jmp b3
Removing instruction jmp b20
Removing instruction jmp b26
Removing instruction jmp b21
Removing instruction jmp b9
Removing instruction jmp b27
Removing instruction jmp b22
Removing instruction jmp b10
Removing instruction jmp b28
Removing instruction jmp b23
Removing instruction jmp b11
Removing instruction jmp b29
Removing instruction jmp b24
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b5
Removing instruction jmp b19
Removing instruction jmp breturn
Removing instruction jmp toD0182
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp toD0181
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b5
Removing instruction jmp b12
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp toSpritePtr2
Removing instruction jmp b13
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda key_event
Removing instruction lda #0
Removing instruction lda current_orientation
Removing instruction lda #0
Replacing instruction ldy _3 with TAY
Removing instruction lda c
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda row_scan
Removing instruction lda SPRITES_MC
Removing instruction lda SPRITES_EXPAND_Y
Removing instruction lda #BLACK
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1 with b4
Replacing label b1_from_b28 with b4
Replacing label b1 with b4
Replacing label b1_from_b3 with b1
Replacing label b4_from_b5 with b4
Replacing label b3_from_b5 with b3
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label breturn_from_b14 with breturn_from_b6
Replacing label b4_from_b1 with b4
Replacing label breturn_from_b15 with breturn_from_b6
Replacing label breturn_from_b14 with breturn_from_b6
Replacing label breturn_from_b11 with breturn_from_b8
Replacing label b2_from_b17 with b2
Replacing label b2_from_b9 with b2
Replacing label b4_from_b2 with b4
Replacing label b2_from_b1 with b2
Replacing label b17_from_b2 with b17
Replacing label b2_from_b3 with b2
Replacing label b4_from_b9 with b4
Replacing label b1_from_b4 with b1
Replacing label b5_from_b6 with b5
Replacing label b1_from_b3 with b1
Replacing label b10_from_b27 with b10
Replacing label b11_from_b28 with b11
Replacing label b5_from_b4 with b5
Replacing label b5_from_b15 with b5
Replacing label b4_from_b5 with b4
Replacing label b3_from_b19 with b3
Replacing label b5_from_b7 with b5
Replacing label toD0181_from_render_show with toD0181
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b4 with b1
Replacing label b3_from_b3 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b3_from_b4 with b3
Replacing label b5_from_b5 with b5
Replacing label b1_from_b9 with b1
Replacing label b4_from_b7 with b4
Replacing label b6_from_b5 with b6
Replacing label b5_from_b13 with b5
Removing instruction b14:
Removing instruction b20:
Removing instruction toSpritePtr1_from_b21:
Removing instruction toSpritePtr1:
Removing instruction b32_from_b33:
Removing instruction main_from_b32:
Removing instruction bend_from_b32:
Removing instruction b16_from_b15:
Removing instruction b17_from_b16:
Removing instruction b18_from_b17:
Removing instruction play_init_from_b18:
Removing instruction b19_from_b18:
Removing instruction play_spawn_current_from_b19:
Removing instruction b20_from_b19:
Removing instruction render_playfield_from_b20:
Removing instruction b1_from_b28:
Removing instruction b1:
Removing instruction b6_from_b4:
Removing instruction b23_from_b6:
Removing instruction keyboard_event_scan_from_b23:
Removing instruction b24_from_b23:
Removing instruction b30_from_b29:
Removing instruction b1_from_b3:
Removing instruction b3_from_b5:
Removing instruction b3_from_b7:
Removing instruction b4_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b2:
Removing instruction breturn_from_b14:
Removing instruction b4_from_b1:
Removing instruction b4_from_b2:
Removing instruction breturn_from_b11:
Removing instruction breturn_from_b14:
Removing instruction breturn_from_b15:
Removing instruction b8_from_play_move_down:
Removing instruction b1_from_b8:
Removing instruction keyboard_event_pressed_from_b1:
Removing instruction b2_from_b10:
Removing instruction b2_from_b17:
Removing instruction b2_from_b9:
Removing instruction b4_from_b11:
Removing instruction b4_from_b2:
Removing instruction b13_from_b18:
Removing instruction b19_from_b13:
Removing instruction play_remove_lines_from_b19:
Removing instruction b20_from_b19:
Removing instruction play_spawn_current_from_b20:
Removing instruction breturn_from_b7:
Removing instruction b2_from_b1:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b4_from_b10:
Removing instruction b4_from_b9:
Removing instruction b5_from_b4:
Removing instruction b5_from_b6:
Removing instruction b17_from_b2:
Removing instruction b3_from_b17:
Removing instruction b1_from_b3:
Removing instruction b3_from_b13:
Removing instruction b3_from_b19:
Removing instruction b20_from_b3:
Removing instruction keyboard_event_pressed_from_b20:
Removing instruction b21_from_b26:
Removing instruction b9_from_b21:
Removing instruction keyboard_event_pressed_from_b9:
Removing instruction b10_from_b22:
Removing instruction b10_from_b27:
Removing instruction keyboard_event_pressed_from_b10:
Removing instruction b11_from_b23:
Removing instruction b11_from_b28:
Removing instruction keyboard_event_pressed_from_b11:
Removing instruction b4_from_b5:
Removing instruction b5_from_b15:
Removing instruction b5_from_b17:
Removing instruction b5_from_b4:
Removing instruction b5_from_b7:
Removing instruction toD0182_from_render_show:
Removing instruction b2_from_toD0182:
Removing instruction toD0181_from_render_show:
Removing instruction b2_from_toD0181:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction b8_from_b7:
Removing instruction render_screen_original_from_b8:
Removing instruction b9_from_b8:
Removing instruction fill_from_b9:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b3:
Removing instruction b1_from_b1:
Removing instruction b1_from_b9:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b7:
Removing instruction b5_from_b4:
Removing instruction b5_from_b5:
Removing instruction b5_from_b10:
Removing instruction b5_from_b13:
Removing instruction b6_from_b12:
Removing instruction b6_from_b5:
Removing instruction breturn:
Removing instruction toSpritePtr2_from_b4:
Removing instruction toSpritePtr2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b21:
Removing instruction b33:
Removing instruction b32:
Removing instruction bend:
Removing instruction b15:
Removing instruction render_init_from_b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction render_current_from_b21:
Removing instruction b1_from_b21:
Removing instruction b6:
Removing instruction b23:
Removing instruction b24:
Removing instruction b25:
Removing instruction b26:
Removing instruction b27:
Removing instruction b28:
Removing instruction b13:
Removing instruction render_playfield_from_b13:
Removing instruction b29:
Removing instruction render_current_from_b29:
Removing instruction b30:
Removing instruction b1_from_b30:
Removing instruction breturn:
Removing instruction b1_from_render_current:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b9:
Removing instruction b10:
Removing instruction b1_from_render_playfield:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b6:
Removing instruction play_collision_from_b4:
Removing instruction b14:
Removing instruction b11:
Removing instruction breturn_from_b11:
Removing instruction b1_from_play_collision:
Removing instruction b2_from_b1:
Removing instruction b8:
Removing instruction breturn_from_b8:
Removing instruction breturn_from_b4:
Removing instruction breturn_from_b5:
Removing instruction breturn_from_b6:
Removing instruction b17:
Removing instruction breturn_from_b17:
Removing instruction b1_from_b20:
Removing instruction b2_from_b21:
Removing instruction b6:
Removing instruction b7:
Removing instruction play_collision_from_b7:
Removing instruction b15:
Removing instruction b8:
Removing instruction play_collision_from_b1:
Removing instruction b14:
Removing instruction b11:
Removing instruction b8:
Removing instruction b17:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction play_collision_from_b12:
Removing instruction b18:
Removing instruction b13:
Removing instruction b19:
Removing instruction b20:
Removing instruction b7_from_b20:
Removing instruction b7_from_b6:
Removing instruction b1_from_play_spawn_current:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b7:
Removing instruction breturn:
Removing instruction b1_from_play_remove_lines:
Removing instruction b3_from_b2:
Removing instruction b9:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b1_from_play_lock_current:
Removing instruction b2_from_b1:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b7:
Removing instruction b2_from_b8:
Removing instruction breturn:
Removing instruction b3:
Removing instruction breturn_from_b3:
Removing instruction b1_from_keyboard_event_scan:
Removing instruction b25:
Removing instruction b13:
Removing instruction b20:
Removing instruction b26:
Removing instruction b21:
Removing instruction b27:
Removing instruction b22:
Removing instruction b28:
Removing instruction b23:
Removing instruction b29:
Removing instruction b24:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b19:
Removing instruction breturn:
Removing instruction toD0182:
Removing instruction breturn:
Removing instruction b1_from_play_init:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_sprites_init:
Removing instruction breturn:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b7:
Removing instruction render_screen_original_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction b4:
Removing instruction b3_from_b4:
Removing instruction breturn:
Removing instruction b1_from_fill:
Removing instruction breturn:
Removing instruction b1_from_render_screen_original:
Removing instruction b9:
Removing instruction breturn:
Removing instruction b4_from_b11:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b8:
Removing instruction b10:
Removing instruction b12:
Removing instruction b13:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b3 in bne b17
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label breturn_from_b6 to b3
Relabelling long label breturn_from_b8 to b2
Relabelling long label breturn_from_b6 to b3
Relabelling long label b1_from_play_move_down to b3
Relabelling long label breturn_from_b4 to b5
Relabelling long label breturn_from_keyboard_event_get to b1
Relabelling long label b9_from_b26 to b2
Relabelling long label b4_from_b25 to b6
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy xpos with TAY
Removing instruction b17:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b3
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @14
(label) @20
(label) @21
(label) @32
(label) @33
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(const byte*) BGCOL1#0 BGCOL1 = ((byte*))(word/dword/signed dword) 53281
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = ((byte*))(word/dword/signed dword) 53282
(byte*) BGCOL3
(const byte*) BGCOL3#0 BGCOL3 = ((byte*))(word/dword/signed dword) 53283
(byte*) BGCOL4
(const byte*) BGCOL4#0 BGCOL4 = ((byte*))(word/dword/signed dword) 53284
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = ((byte*))(word/dword/signed dword) 56333
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = ((byte*))(word/dword/signed dword) 56320
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = ((byte*))(word/dword/signed dword) 56321
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte/signed byte/word/signed word/dword/signed dword) 127
(byte) COLLISION_BOTTOM
(const byte) COLLISION_BOTTOM#0 COLLISION_BOTTOM = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) COLLISION_LEFT
(const byte) COLLISION_LEFT#0 COLLISION_LEFT = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) COLLISION_NONE
(const byte) COLLISION_NONE#0 COLLISION_NONE = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) COLLISION_PLAYFIELD
(const byte) COLLISION_PLAYFIELD#0 COLLISION_PLAYFIELD = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) COLLISION_RIGHT
(const byte) COLLISION_RIGHT#0 COLLISION_RIGHT = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) 55296
(byte) CYAN
(const byte) CYAN#0 CYAN = (byte/signed byte/word/signed word/dword/signed dword) 3
(byte*) D011
(const byte*) D011#0 D011 = ((byte*))(word/dword/signed dword) 53265
(byte*) D016
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) 53272
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte/signed byte/word/signed word/dword/signed dword) 11
(byte) GREEN
(byte) GREY
(const byte) GREY#0 GREY = (byte/signed byte/word/signed word/dword/signed dword) 12
(void()**) HARDWARE_IRQ
(const void()**) HARDWARE_IRQ#0 HARDWARE_IRQ = ((void()**))(word/dword/signed dword) 65534
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = ((byte*))(word/dword/signed dword) 53274
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) IRQ_RASTER_FIRST
(const byte) IRQ_RASTER_FIRST#0 IRQ_RASTER_FIRST = (byte/signed byte/word/signed word/dword/signed dword) 49
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = ((byte*))(word/dword/signed dword) 53273
(void()**) KERNEL_IRQ
(byte) KEY_0
(byte) KEY_1
(byte) KEY_2
(byte) KEY_3
(byte) KEY_4
(byte) KEY_5
(byte) KEY_6
(byte) KEY_7
(byte) KEY_8
(byte) KEY_9
(byte) KEY_A
(byte) KEY_ARROW_LEFT
(byte) KEY_ARROW_UP
(byte) KEY_ASTERISK
(byte) KEY_AT
(byte) KEY_B
(byte) KEY_C
(byte) KEY_COLON
(byte) KEY_COMMA
(const byte) KEY_COMMA#0 KEY_COMMA = (byte/signed byte/word/signed word/dword/signed dword) 47
(byte) KEY_COMMODORE
(const byte) KEY_COMMODORE#0 KEY_COMMODORE = (byte/signed byte/word/signed word/dword/signed dword) 61
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(const byte) KEY_CTRL#0 KEY_CTRL = (byte/signed byte/word/signed word/dword/signed dword) 58
(byte) KEY_D
(byte) KEY_DEL
(byte) KEY_DOT
(const byte) KEY_DOT#0 KEY_DOT = (byte/signed byte/word/signed word/dword/signed dword) 44
(byte) KEY_E
(byte) KEY_EQUALS
(byte) KEY_F
(byte) KEY_F1
(byte) KEY_F3
(byte) KEY_F5
(byte) KEY_F7
(byte) KEY_G
(byte) KEY_H
(byte) KEY_HOME
(byte) KEY_I
(byte) KEY_J
(byte) KEY_K
(byte) KEY_L
(byte) KEY_LSHIFT
(const byte) KEY_LSHIFT#0 KEY_LSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 15
(byte) KEY_M
(byte) KEY_MINUS
(byte) KEY_MODIFIER_COMMODORE
(const byte) KEY_MODIFIER_COMMODORE#0 KEY_MODIFIER_COMMODORE = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) KEY_MODIFIER_CTRL
(const byte) KEY_MODIFIER_CTRL#0 KEY_MODIFIER_CTRL = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) KEY_MODIFIER_LSHIFT
(const byte) KEY_MODIFIER_LSHIFT#0 KEY_MODIFIER_LSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) KEY_MODIFIER_RSHIFT
(const byte) KEY_MODIFIER_RSHIFT#0 KEY_MODIFIER_RSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 2
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_N
(byte) KEY_O
(byte) KEY_P
(byte) KEY_PLUS
(byte) KEY_POUND
(byte) KEY_Q
(byte) KEY_R
(byte) KEY_RETURN
(byte) KEY_RSHIFT
(const byte) KEY_RSHIFT#0 KEY_RSHIFT = (byte/signed byte/word/signed word/dword/signed dword) 52
(byte) KEY_RUNSTOP
(byte) KEY_S
(byte) KEY_SEMICOLON
(byte) KEY_SLASH
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte/signed byte/word/signed word/dword/signed dword) 60
(byte) KEY_T
(byte) KEY_U
(byte) KEY_V
(byte) KEY_W
(byte) KEY_X
(const byte) KEY_X#0 KEY_X = (byte/signed byte/word/signed word/dword/signed dword) 23
(byte) KEY_Y
(byte) KEY_Z
(const byte) KEY_Z#0 KEY_Z = (byte/signed byte/word/signed word/dword/signed dword) 12
(byte*) LIGHTPEN_X
(byte*) LIGHTPEN_Y
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(word[]) PIECES
(const word[]) PIECES#0 PIECES = { ((word))(const byte[4*4*4]) PIECE_T#0, ((word))(const byte[4*4*4]) PIECE_S#0, ((word))(const byte[4*4*4]) PIECE_Z#0, ((word))(const byte[4*4*4]) PIECE_J#0, ((word))(const byte[4*4*4]) PIECE_O#0, ((word))(const byte[4*4*4]) PIECE_I#0, ((word))(const byte[4*4*4]) PIECE_L#0 }
(byte[]) PIECES_CHARS
(const byte[]) PIECES_CHARS#0 PIECES_CHARS = { (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/signed byte/word/signed word/dword/signed dword) 89, (byte/word/signed word/dword/signed dword) 153, (byte/signed byte/word/signed word/dword/signed dword) 89, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/word/signed word/dword/signed dword) 153 }
(byte[]) PIECES_START_X
(const byte[]) PIECES_START_X#0 PIECES_START_X = { (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 3, (byte/signed byte/word/signed word/dword/signed dword) 4 }
(byte[]) PIECES_START_Y
(const byte[]) PIECES_START_Y#0 PIECES_START_Y = { (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1 }
(byte[4*4*4]) PIECE_I
(const byte[4*4*4]) PIECE_I#0 PIECE_I = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_J
(const byte[4*4*4]) PIECE_J#0 PIECE_J = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_L
(const byte[4*4*4]) PIECE_L#0 PIECE_L = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_O
(const byte[4*4*4]) PIECE_O#0 PIECE_O = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_S
(const byte[4*4*4]) PIECE_S#0 PIECE_S = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_T
(const byte[4*4*4]) PIECE_T#0 PIECE_T = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte[4*4*4]) PIECE_Z
(const byte[4*4*4]) PIECE_Z#0 PIECE_Z = { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0 }
(byte) PINK
(byte*) PLAYFIELD_CHARSET
(const byte*) PLAYFIELD_CHARSET#0 PLAYFIELD_CHARSET = ((byte*))(word/signed word/dword/signed dword) 10240
(byte) PLAYFIELD_COLS
(const byte) PLAYFIELD_COLS#0 PLAYFIELD_COLS = (byte/signed byte/word/signed word/dword/signed dword) 10
(byte) PLAYFIELD_LINES
(const byte) PLAYFIELD_LINES#0 PLAYFIELD_LINES = (byte/signed byte/word/signed word/dword/signed dword) 22
(byte*) PLAYFIELD_SCREEN_1
(const byte*) PLAYFIELD_SCREEN_1#0 PLAYFIELD_SCREEN_1 = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) PLAYFIELD_SCREEN_2
(const byte*) PLAYFIELD_SCREEN_2#0 PLAYFIELD_SCREEN_2 = ((byte*))(word/signed word/dword/signed dword) 11264
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0 PLAYFIELD_SCREEN_ORIGINAL = ((byte*))(word/signed word/dword/signed dword) 6144
(byte) PLAYFIELD_SCREEN_ORIGINAL_WIDTH
(byte*) PLAYFIELD_SPRITES
(const byte*) PLAYFIELD_SPRITES#0 PLAYFIELD_SPRITES = ((byte*))(word/signed word/dword/signed dword) 8192
(byte*) PLAYFIELD_SPRITE_PTRS_1
(const byte*) PLAYFIELD_SPRITE_PTRS_1#0 PLAYFIELD_SPRITE_PTRS_1 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) SPRITE_PTRS#0
(byte*) PLAYFIELD_SPRITE_PTRS_2
(const byte*) PLAYFIELD_SPRITE_PTRS_2#0 PLAYFIELD_SPRITE_PTRS_2 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) SPRITE_PTRS#0
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) 53
(byte) PURPLE
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte) RED
(byte) SID_CONTROL_GATE
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte/word/signed word/dword/signed dword) 128
(byte) SID_CONTROL_PULSE
(byte) SID_CONTROL_RING
(byte) SID_CONTROL_SAWTOOTH
(byte) SID_CONTROL_SYNC
(byte) SID_CONTROL_TEST
(byte) SID_CONTROL_TRIANGLE
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = ((byte*))(word/dword/signed dword) 54290
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = ((word*))(word/dword/signed dword) 54286
(byte*) SID_VOICE3_FREQ_HIGH
(byte*) SID_VOICE3_FREQ_LOW
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = ((byte*))(word/dword/signed dword) 54299
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = ((byte*))(word/dword/signed dword) 53277
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = ((byte*))(word/dword/signed dword) 53271
(byte*) SPRITES_MC
(const byte*) SPRITES_MC#0 SPRITES_MC = ((byte*))(word/dword/signed dword) 53276
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(word) SPRITE_PTRS
(const word) SPRITE_PTRS#0 SPRITE_PTRS = (word/signed word/dword/signed dword) 1016
(byte) VIC_BMM
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) 53265
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_RST8
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) YELLOW
(byte) current_movedown_counter
(byte) current_movedown_counter#1 current_movedown_counter zp ZP_BYTE:4 0.5333333333333333
(byte) current_movedown_counter#10 current_movedown_counter zp ZP_BYTE:4 4.222222222222222
(byte) current_movedown_counter#12 current_movedown_counter zp ZP_BYTE:4 10.363636363636363
(byte) current_movedown_fast
(const byte) current_movedown_fast#0 current_movedown_fast = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) current_movedown_slow
(const byte) current_movedown_slow#0 current_movedown_slow = (byte/signed byte/word/signed word/dword/signed dword) 50
(byte) current_orientation
(byte) current_orientation#10 current_orientation zp ZP_BYTE:17 3.371428571428571
(byte) current_orientation#14 current_orientation zp ZP_BYTE:17 0.32653061224489793
(byte) current_orientation#19 current_orientation zp ZP_BYTE:17 6.941176470588235
(byte) current_orientation#29 current_orientation zp ZP_BYTE:17 4.0
(byte) current_orientation#4 current_orientation zp ZP_BYTE:17 3.0
(byte*) current_piece
(byte*) current_piece#10 current_piece zp ZP_WORD:15 1.8235294117647054
(byte*) current_piece#12 current_piece#12 zp ZP_WORD:7 10.0
(byte*) current_piece#16 current_piece zp ZP_WORD:15 3.428571428571428
(byte*) current_piece#20 current_piece zp ZP_WORD:15 6.0
(byte*~) current_piece#71 current_piece zp ZP_WORD:15 4.0
(byte*~) current_piece#74 current_piece#74 zp ZP_WORD:7 4.0
(byte*~) current_piece#75 current_piece#75 zp ZP_WORD:7 4.0
(byte*~) current_piece#76 current_piece#76 zp ZP_WORD:7 4.0
(byte*~) current_piece#77 current_piece#77 zp ZP_WORD:7 4.0
(byte*~) current_piece#78 current_piece zp ZP_WORD:15 4.0
(byte) current_piece_char
(byte) current_piece_char#1 current_piece_char zp ZP_BYTE:21 4.703703703703704
(byte) current_piece_char#12 current_piece_char zp ZP_BYTE:21 0.6153846153846154
(byte) current_piece_char#15 current_piece_char zp ZP_BYTE:21 194.59615384615384
(byte) current_piece_char#20 current_piece_char zp ZP_BYTE:21 6.0
(byte) current_piece_char#63 reg byte x 46.09090909090909
(byte~) current_piece_char#88 reg byte x 4.0
(byte~) current_piece_char#89 reg byte x 22.0
(byte*) current_piece_gfx
(byte*) current_piece_gfx#1 current_piece_gfx zp ZP_WORD:18 0.2962962962962963
(byte*~) current_piece_gfx#100 current_piece_gfx#100 zp ZP_WORD:7 2.0
(byte*~) current_piece_gfx#101 current_piece_gfx#101 zp ZP_WORD:7 11.0
(byte*) current_piece_gfx#14 current_piece_gfx zp ZP_WORD:18 7.588235294117647
(byte*) current_piece_gfx#16 current_piece_gfx zp ZP_WORD:18 0.5
(byte*) current_piece_gfx#20 current_piece_gfx zp ZP_WORD:18 194.59615384615384
(byte*) current_piece_gfx#26 current_piece_gfx zp ZP_WORD:18 6.0
(byte*) current_piece_gfx#3 current_piece_gfx zp ZP_WORD:18 4.0
(byte*) current_piece_gfx#53 current_piece_gfx#53 zp ZP_WORD:7 46.09090909090909
(byte) current_xpos
(byte) current_xpos#1 current_xpos zp ZP_BYTE:20 0.72
(byte) current_xpos#10 current_xpos zp ZP_BYTE:20 21.557692307692307
(byte~) current_xpos#110 current_xpos#110 zp ZP_BYTE:6 1.3333333333333333
(byte~) current_xpos#111 current_xpos#111 zp ZP_BYTE:6 7.333333333333333
(byte) current_xpos#19 current_xpos zp ZP_BYTE:20 3.2926829268292686
(byte) current_xpos#2 current_xpos zp ZP_BYTE:20 4.0
(byte) current_xpos#23 current_xpos zp ZP_BYTE:20 0.5333333333333333
(byte) current_xpos#33 current_xpos zp ZP_BYTE:20 6.0
(byte) current_xpos#4 current_xpos zp ZP_BYTE:20 4.0
(byte) current_xpos#47 current_xpos#47 zp ZP_BYTE:6 5.181818181818182
(byte) current_ypos
(byte) current_ypos#0 current_ypos zp ZP_BYTE:14 4.0
(byte) current_ypos#13 current_ypos zp ZP_BYTE:14 1.9558823529411762
(byte) current_ypos#18 current_ypos zp ZP_BYTE:14 0.5714285714285714
(byte) current_ypos#21 current_ypos zp ZP_BYTE:14 3.485714285714285
(byte) current_ypos#29 current_ypos zp ZP_BYTE:14 6.0
(byte~) current_ypos#84 reg byte y 1.0
(byte~) current_ypos#85 reg byte y 4.4
(byte) current_ypos#9 reg byte y 15.0
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#1 addr zp ZP_WORD:7 16.5
(byte*) fill::addr#2 addr zp ZP_WORD:7 16.5
(byte*) fill::end
(const byte*) fill::end#0 end = (const byte*) COLS#0+(const word) fill::size#0
(word) fill::size
(const word) fill::size#0 size = (word/signed word/dword/signed dword) 1000
(byte*) fill::start
(byte) fill::val
(byte) irq_cnt
(byte) irq_cnt#0 irq_cnt zp ZP_BYTE:27 0.2
(byte) irq_cnt#1 irq_cnt zp ZP_BYTE:27 4.0
(byte) irq_cnt#14 irq_cnt zp ZP_BYTE:27 20.0
(byte) irq_raster_next
(byte) irq_raster_next#0 irq_raster_next zp ZP_BYTE:23 0.18181818181818182
(byte) irq_raster_next#1 irq_raster_next zp ZP_BYTE:23 1.0
(byte) irq_raster_next#13 irq_raster_next zp ZP_BYTE:23 6.0
(byte) irq_raster_next#2 irq_raster_next zp ZP_BYTE:23 1.3333333333333333
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0 irq_sprite_ptr zp ZP_BYTE:26 0.25
(byte) irq_sprite_ptr#1 irq_sprite_ptr zp ZP_BYTE:26 20.0
(byte) irq_sprite_ptr#2 irq_sprite_ptr zp ZP_BYTE:26 20.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0 irq_sprite_ypos zp ZP_BYTE:25 0.7391304347826086
(byte) irq_sprite_ypos#1 irq_sprite_ypos zp ZP_BYTE:25 20.0
(byte) irq_sprite_ypos#2 irq_sprite_ypos zp ZP_BYTE:25 20.0
(byte[]) keyboard_char_keycodes
(byte()) keyboard_event_get()
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 4.0
(byte) keyboard_event_get::return#2 reg byte a 34.33333333333333
(byte) keyboard_event_get::return#3 reg byte a 202.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 4.0
(byte~) keyboard_event_pressed::$1 reg byte a 4.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 keycode zp ZP_BYTE:5 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 4.0
(byte) keyboard_event_pressed::return#1 reg byte a 4.0
(byte) keyboard_event_pressed::return#10 reg byte a 4.0
(byte) keyboard_event_pressed::return#11 reg byte a 1.714285714285714
(byte) keyboard_event_pressed::return#12 reg byte a 4.0
(byte) keyboard_event_pressed::return#2 reg byte a 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp ZP_BYTE:6 2.0
(void()) keyboard_event_scan()
(byte/word/dword~) keyboard_event_scan::$11 reg byte a 20002.0
(byte~) keyboard_event_scan::$14 reg byte a 4.0
(byte~) keyboard_event_scan::$18 reg byte a 4.0
(byte~) keyboard_event_scan::$22 reg byte a 4.0
(byte~) keyboard_event_scan::$26 reg byte a 4.0
(byte~) keyboard_event_scan::$3 reg byte a 20002.0
(byte~) keyboard_event_scan::$4 reg byte a 20002.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 15001.5
(byte) keyboard_event_scan::col#2 reg byte x 2857.4285714285716
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 20002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp ZP_BYTE:6 2002.0
(byte) keyboard_event_scan::keycode#10 keycode zp ZP_BYTE:6 3154.230769230769
(byte) keyboard_event_scan::keycode#11 keycode zp ZP_BYTE:6 500.5
(byte) keyboard_event_scan::keycode#14 keycode zp ZP_BYTE:6 1001.0
(byte) keyboard_event_scan::keycode#15 keycode zp ZP_BYTE:6 5250.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp ZP_BYTE:5 1501.5
(byte) keyboard_event_scan::row#2 row zp ZP_BYTE:5 600.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp ZP_BYTE:9 1278.0555555555554
(byte[8]) keyboard_events
(const byte[8]) keyboard_events#0 keyboard_events = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp ZP_BYTE:22 20002.0
(byte) keyboard_events_size#10 keyboard_events_size zp ZP_BYTE:22 8100.9000000000015
(byte) keyboard_events_size#13 keyboard_events_size zp ZP_BYTE:22 97.06451612903226
(byte) keyboard_events_size#16 keyboard_events_size zp ZP_BYTE:22 3.741935483870968
(byte) keyboard_events_size#19 keyboard_events_size zp ZP_BYTE:22 18.999999999999996
(byte) keyboard_events_size#2 keyboard_events_size zp ZP_BYTE:22 20002.0
(byte) keyboard_events_size#29 keyboard_events_size zp ZP_BYTE:22 429.2857142857143
(byte) keyboard_events_size#30 keyboard_events_size zp ZP_BYTE:22 10201.2
(byte) keyboard_events_size#4 keyboard_events_size zp ZP_BYTE:22 3.0
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte/signed byte/word/signed word/dword/signed dword) 1, (byte/signed byte/word/signed word/dword/signed dword) 2, (byte/signed byte/word/signed word/dword/signed dword) 4, (byte/signed byte/word/signed word/dword/signed dword) 8, (byte/signed byte/word/signed word/dword/signed dword) 16, (byte/signed byte/word/signed word/dword/signed dword) 32, (byte/signed byte/word/signed word/dword/signed dword) 64, (byte/word/signed word/dword/signed dword) 128 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 334.33333333333337
(byte) keyboard_matrix_read::return#2 reg byte a 2002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 1003.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte/word/signed word/dword/signed dword) 254, (byte/word/signed word/dword/signed dword) 253, (byte/word/signed word/dword/signed dword) 251, (byte/word/signed word/dword/signed dword) 247, (byte/word/signed word/dword/signed dword) 239, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 191, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#11 reg byte x 0.8
(byte) keyboard_modifiers#12 reg byte x 1.6
(byte) keyboard_modifiers#13 reg byte x 1.2000000000000002
(byte) keyboard_modifiers#3 reg byte x 4.0
(byte) keyboard_modifiers#4 reg byte x 4.0
(byte) keyboard_modifiers#5 reg byte a 20.0
(byte[8]) keyboard_scan_values
(const byte[8]) keyboard_scan_values#0 keyboard_scan_values = { fill( 8, 0) }
(void()) main()
(byte~) main::$12 reg byte a 202.0
(byte~) main::$13 reg byte a 202.0
(byte~) main::$14 reg byte a 202.0
(label) main::@1
(label) main::@13
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@20
(label) main::@21
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@30
(label) main::@4
(label) main::@6
(byte) main::key_event
(byte) main::key_event#0 key_event zp ZP_BYTE:13 36.72727272727273
(byte) main::render
(byte) main::render#1 render zp ZP_BYTE:28 40.4
(byte) main::render#2 render zp ZP_BYTE:28 40.4
(byte) main::render#3 reg byte a 202.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$7 reg byte a 20002.0
(label) play_collision::@1
(label) play_collision::@17
(label) play_collision::@2
(label) play_collision::@20
(label) play_collision::@21
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@8
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#1 reg byte x 10001.0
(byte) play_collision::c#2 reg byte x 2222.4444444444443
(byte) play_collision::col
(byte) play_collision::col#1 col zp ZP_BYTE:12 5000.5
(byte) play_collision::col#2 col zp ZP_BYTE:12 6375.75
(byte~) play_collision::col#9 col zp ZP_BYTE:12 2002.0
(byte) play_collision::i
(byte) play_collision::i#1 i zp ZP_BYTE:31 1615.6153846153845
(byte~) play_collision::i#11 i#11 zp ZP_BYTE:11 2002.0
(byte~) play_collision::i#13 i#13 zp ZP_BYTE:11 20002.0
(byte) play_collision::i#2 i#2 zp ZP_BYTE:11 15502.0
(byte) play_collision::i#3 i#3 zp ZP_BYTE:11 667.3333333333334
(byte) play_collision::l
(byte) play_collision::l#1 l zp ZP_BYTE:10 1001.0
(byte) play_collision::l#6 l zp ZP_BYTE:10 125.125
(byte) play_collision::orientation
(byte) play_collision::orientation#0 reg byte x 2.0
(byte) play_collision::orientation#1 reg byte x 2.0
(byte) play_collision::orientation#2 reg byte x 2.0
(byte) play_collision::orientation#3 reg byte x 2.0
(byte) play_collision::orientation#4 reg byte x 10.0
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 piece_gfx zp ZP_WORD:7 476.3333333333333
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 playfield_line zp ZP_WORD:29 785.8571428571429
(byte) play_collision::return
(byte) play_collision::return#0 reg byte a 4.0
(byte) play_collision::return#1 reg byte a 4.0
(byte) play_collision::return#12 reg byte a 4.0
(byte) play_collision::return#13 reg byte a 4.0
(byte) play_collision::return#14 reg byte a 1.3333333333333333
(byte) play_collision::xpos
(byte) play_collision::xpos#0 xpos zp ZP_BYTE:6 1.3333333333333333
(byte) play_collision::xpos#1 xpos zp ZP_BYTE:6 1.0
(byte) play_collision::xpos#2 xpos zp ZP_BYTE:6 1.0
(byte) play_collision::xpos#3 xpos zp ZP_BYTE:6 1.0
(byte) play_collision::xpos#5 xpos zp ZP_BYTE:6 45.86363636363637
(byte) play_collision::ypos
(byte) play_collision::ypos#0 reg byte y 1.0
(byte) play_collision::ypos#1 reg byte y 1.3333333333333333
(byte) play_collision::ypos#2 reg byte y 1.3333333333333333
(byte) play_collision::ypos#3 reg byte y 1.3333333333333333
(byte) play_collision::ypos#4 reg byte y 5.0
(byte) play_collision::ypos2
(byte) play_collision::ypos2#0 ypos2 zp ZP_BYTE:9 4.0
(byte) play_collision::ypos2#1 ypos2 zp ZP_BYTE:9 500.5
(byte) play_collision::ypos2#2 ypos2 zp ZP_BYTE:9 867.0666666666667
(void()) play_init()
(byte~) play_init::$1 reg byte a 22.0
(label) play_init::@1
(label) play_init::@2
(label) play_init::@return
(byte) play_init::idx
(byte) play_init::idx#1 idx zp ZP_BYTE:2 7.333333333333333
(byte) play_init::idx#2 idx zp ZP_BYTE:2 6.6000000000000005
(byte) play_init::j
(byte) play_init::j#1 reg byte x 16.5
(byte) play_init::j#2 reg byte x 7.333333333333333
(byte*) play_init::pli
(byte*) play_init::pli#1 pli zp ZP_WORD:7 5.5
(byte*) play_init::pli#2 pli zp ZP_WORD:7 8.25
(void()) play_lock_current()
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@7
(label) play_lock_current::@8
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#1 reg byte x 10001.0
(byte) play_lock_current::c#2 reg byte x 4000.4
(byte) play_lock_current::col
(byte) play_lock_current::col#0 col zp ZP_BYTE:6 2002.0
(byte) play_lock_current::col#1 col zp ZP_BYTE:6 5000.5
(byte) play_lock_current::col#2 col zp ZP_BYTE:6 7751.0
(byte) play_lock_current::i
(byte) play_lock_current::i#1 i zp ZP_BYTE:9 2333.6666666666665
(byte) play_lock_current::i#2 i#2 zp ZP_BYTE:5 15502.0
(byte) play_lock_current::i#3 i#3 zp ZP_BYTE:5 667.3333333333334
(byte~) play_lock_current::i#7 i#7 zp ZP_BYTE:5 2002.0
(byte~) play_lock_current::i#9 i#9 zp ZP_BYTE:5 20002.0
(byte) play_lock_current::l
(byte) play_lock_current::l#1 l zp ZP_BYTE:4 1001.0
(byte) play_lock_current::l#6 l zp ZP_BYTE:4 166.83333333333334
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 playfield_line zp ZP_WORD:7 1100.2
(byte) play_lock_current::ypos2
(byte) play_lock_current::ypos2#0 ypos2 zp ZP_BYTE:14 4.0
(byte) play_lock_current::ypos2#1 ypos2 zp ZP_BYTE:14 500.5
(byte) play_lock_current::ypos2#2 ypos2 zp ZP_BYTE:14 273.1818181818182
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 reg byte a 4.0
(byte~) play_move_down::$2 reg byte a 4.0
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@19
(label) play_move_down::@2
(label) play_move_down::@20
(label) play_move_down::@4
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 reg byte a 51.5
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 reg byte x 1.0
(byte) play_move_down::movedown#2 reg byte x 4.0
(byte) play_move_down::movedown#3 reg byte x 4.0
(byte) play_move_down::movedown#6 reg byte x 6.0
(byte) play_move_down::movedown#7 reg byte x 5.0
(byte) play_move_down::return
(byte) play_move_down::return#2 reg byte x 33.666666666666664
(byte) play_move_down::return#3 reg byte a 202.0
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 reg byte a 4.0
(byte~) play_move_leftright::$8 reg byte a 4.0
(label) play_move_leftright::@1
(label) play_move_leftright::@11
(label) play_move_leftright::@14
(label) play_move_leftright::@15
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@8
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 reg byte a 52.5
(byte) play_move_leftright::return
(byte) play_move_leftright::return#1 reg byte a 33.666666666666664
(byte) play_move_leftright::return#4 reg byte a 202.0
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte/signed word/word/dword/signed dword~) play_move_rotate::$2 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) play_move_rotate::$4 reg byte a 4.0
(byte~) play_move_rotate::$6 reg byte a 4.0
(label) play_move_rotate::@1
(label) play_move_rotate::@11
(label) play_move_rotate::@14
(label) play_move_rotate::@2
(label) play_move_rotate::@4
(label) play_move_rotate::@6
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 reg byte a 52.5
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 orientation zp ZP_BYTE:5 4.0
(byte) play_move_rotate::orientation#2 orientation zp ZP_BYTE:5 4.0
(byte) play_move_rotate::orientation#3 orientation zp ZP_BYTE:5 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#1 reg byte a 33.666666666666664
(byte) play_move_rotate::return#4 reg byte a 202.0
(void()) play_remove_lines()
(label) play_remove_lines::@1
(label) play_remove_lines::@10
(label) play_remove_lines::@17
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 c zp ZP_BYTE:9 6000.6
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 full zp ZP_BYTE:6 4200.6
(byte) play_remove_lines::full#4 full zp ZP_BYTE:6 4000.4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 reg byte y 1615.6153846153845
(byte) play_remove_lines::r#2 reg byte y 15502.0
(byte) play_remove_lines::r#3 reg byte y 2002.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 reg byte x 5501.0
(byte) play_remove_lines::w#11 reg byte x 1334.6666666666667
(byte) play_remove_lines::w#12 reg byte x 2002.0
(byte) play_remove_lines::w#2 reg byte x 2002.0
(byte) play_remove_lines::w#3 reg byte x 2002.0
(byte) play_remove_lines::w#4 reg byte x 4429.142857142857
(byte) play_remove_lines::w#6 reg byte x 1668.3333333333335
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 x zp ZP_BYTE:5 15001.5
(byte) play_remove_lines::x#2 x zp ZP_BYTE:5 2500.25
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 y zp ZP_BYTE:4 1501.5
(byte) play_remove_lines::y#8 y zp ZP_BYTE:4 143.0
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 reg byte a 2002.0
(byte~) play_spawn_current::$3 $3 zp ZP_BYTE:4 0.13333333333333333
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@7
(label) play_spawn_current::@return
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 reg byte x 2002.0
(byte) play_spawn_current::piece_idx#2 reg byte x 334.99999999999994
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 playfield = { fill( PLAYFIELD_LINES#0*PLAYFIELD_COLS#0, 0) }
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 playfield_lines = { fill( PLAYFIELD_LINES#0, 0) }
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 playfield_lines_idx = { fill( PLAYFIELD_LINES#0+1, 0) }
(void()) render_current()
(byte~) render_current::$5 reg byte a 202.0
(label) render_current::@1
(label) render_current::@10
(label) render_current::@13
(label) render_current::@2
(label) render_current::@3
(label) render_current::@4
(label) render_current::@5
(label) render_current::@7
(label) render_current::@9
(label) render_current::@return
(byte) render_current::c
(byte) render_current::c#1 c zp ZP_BYTE:13 1501.5
(byte) render_current::c#2 c zp ZP_BYTE:13 286.0
(byte) render_current::current_cell
(byte) render_current::current_cell#0 reg byte a 1001.0
(byte) render_current::i
(byte) render_current::i#1 i zp ZP_BYTE:11 202.0
(byte) render_current::i#10 i zp ZP_BYTE:11 429.0
(byte) render_current::i#3 i zp ZP_BYTE:11 50.5
(byte) render_current::i#4 i zp ZP_BYTE:11 1552.0
(byte) render_current::i#8 i zp ZP_BYTE:11 300.75
(byte) render_current::l
(byte) render_current::l#1 l zp ZP_BYTE:10 151.5
(byte) render_current::l#4 l zp ZP_BYTE:10 11.222222222222221
(byte*) render_current::screen_line
(byte*) render_current::screen_line#0 screen_line zp ZP_WORD:29 100.18181818181819
(byte) render_current::xpos
(byte) render_current::xpos#0 xpos zp ZP_BYTE:12 202.0
(byte) render_current::xpos#1 xpos zp ZP_BYTE:12 667.3333333333334
(byte) render_current::xpos#2 xpos zp ZP_BYTE:12 684.1666666666667
(byte) render_current::ypos2
(byte) render_current::ypos2#0 ypos2 zp ZP_BYTE:9 4.0
(byte) render_current::ypos2#1 ypos2 zp ZP_BYTE:9 67.33333333333333
(byte) render_current::ypos2#2 ypos2 zp ZP_BYTE:9 29.823529411764707
(void()) render_init()
(byte*~) render_init::$12 $12 zp ZP_WORD:15 202.0
(byte~) render_init::$22 reg byte a 22.0
(byte~) render_init::$23 reg byte a 22.0
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@4
(label) render_init::@7
(label) render_init::@8
(label) render_init::@9
(label) render_init::@return
(byte) render_init::c
(byte) render_init::c#1 reg byte x 151.5
(byte) render_init::c#2 reg byte x 101.0
(byte) render_init::i
(byte) render_init::i#1 reg byte x 16.5
(byte) render_init::i#2 reg byte x 6.285714285714286
(byte) render_init::l
(byte) render_init::l#1 l zp ZP_BYTE:2 16.5
(byte) render_init::l#4 l zp ZP_BYTE:2 3.142857142857143
(byte*) render_init::li_1
(byte*) render_init::li_1#1 li_1 zp ZP_WORD:7 5.5
(byte*) render_init::li_1#2 li_1 zp ZP_WORD:7 6.6000000000000005
(byte*) render_init::li_2
(byte*) render_init::li_2#1 li_2 zp ZP_WORD:15 7.333333333333333
(byte*) render_init::li_2#2 li_2 zp ZP_WORD:15 5.5
(byte*) render_init::line
(byte*) render_init::line#1 line zp ZP_WORD:7 7.333333333333333
(byte*) render_init::line#4 line zp ZP_WORD:7 20.499999999999996
(label) render_init::vicSelectGfxBank1
(byte~) render_init::vicSelectGfxBank1_$0
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(label) render_init::vicSelectGfxBank1_toDd001
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(byte~) render_init::vicSelectGfxBank1_toDd001_$2
(byte/word/dword~) render_init::vicSelectGfxBank1_toDd001_$3
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(const byte) render_init::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte/signed byte/word/signed word/dword/signed dword) 3^>((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(void()) render_playfield()
(byte~) render_playfield::$2 reg byte a 202.0
(byte~) render_playfield::$3 reg byte a 202.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 c zp ZP_BYTE:9 1501.5
(byte) render_playfield::c#2 c zp ZP_BYTE:9 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp ZP_BYTE:6 420.59999999999997
(byte) render_playfield::i#2 i zp ZP_BYTE:6 1034.6666666666667
(byte) render_playfield::i#3 i zp ZP_BYTE:6 50.5
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp ZP_BYTE:5 151.5
(byte) render_playfield::l#2 l zp ZP_BYTE:5 30.299999999999997
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 screen_line zp ZP_WORD:7 202.0
(byte*) render_playfield::screen_line#1 screen_line zp ZP_WORD:7 500.5
(byte*) render_playfield::screen_line#2 screen_line zp ZP_WORD:7 1552.0
(void()) render_screen_original((byte*) render_screen_original::screen)
(label) render_screen_original::@1
(label) render_screen_original::@11
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@7
(label) render_screen_original::@9
(label) render_screen_original::@return
(byte) render_screen_original::SPACE
(const byte) render_screen_original::SPACE#0 SPACE = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte) render_screen_original::c
(byte) render_screen_original::c#0 reg byte y 75.75
(byte) render_screen_original::c#1 reg byte y 202.0
(byte) render_screen_original::c#2 reg byte y 303.0
(byte*) render_screen_original::orig
(byte*) render_screen_original::orig#1 orig zp ZP_WORD:7 13.3125
(byte*) render_screen_original::orig#2 orig zp ZP_WORD:7 202.0
(byte*) render_screen_original::orig#5 orig zp ZP_WORD:7 18.666666666666664
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 screen zp ZP_WORD:15 50.5
(byte*) render_screen_original::screen#11 screen zp ZP_WORD:15 2.0
(byte*) render_screen_original::screen#12 screen zp ZP_WORD:15 42.599999999999994
(byte*) render_screen_original::screen#2 screen zp ZP_WORD:15 101.0
(byte*) render_screen_original::screen#3 screen zp ZP_WORD:15 101.0
(byte*) render_screen_original::screen#5 screen zp ZP_WORD:15 157.0
(byte*) render_screen_original::screen#7 screen zp ZP_WORD:15 202.0
(byte*) render_screen_original::screen#8 screen zp ZP_WORD:15 24.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 reg byte x 202.0
(byte) render_screen_original::x#2 reg byte x 202.0
(byte) render_screen_original::x#3 reg byte x 151.5
(byte) render_screen_original::x#4 reg byte x 67.33333333333333
(byte) render_screen_original::x#5 reg byte x 56.11111111111111
(byte) render_screen_original::x#7 reg byte x 101.0
(byte) render_screen_original::y
(byte) render_screen_original::y#1 y zp ZP_BYTE:2 16.5
(byte) render_screen_original::y#8 y zp ZP_BYTE:2 1.0
(byte) render_screen_render
(byte) render_screen_render#11 render_screen_render zp ZP_BYTE:3 3.25
(byte) render_screen_render#16 render_screen_render zp ZP_BYTE:3 1.0
(byte) render_screen_render#19 reg byte x 8.615384615384615
(byte) render_screen_render#28 render_screen_render#28 zp ZP_BYTE:5 5.090909090909091
(byte~) render_screen_render#62 render_screen_render#62 zp ZP_BYTE:5 5.5
(byte~) render_screen_render#63 reg byte x 22.0
(byte) render_screen_show
(byte) render_screen_show#13 render_screen_show zp ZP_BYTE:2 4.333333333333333
(byte) render_screen_show#16 render_screen_show zp ZP_BYTE:2 0.39534883720930225
(byte) render_screen_showing
(byte) render_screen_showing#0 render_screen_showing zp ZP_BYTE:24 0.5714285714285714
(byte) render_screen_showing#1 render_screen_showing zp ZP_BYTE:24 20.0
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(label) render_show::@2
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#3 reg byte a 2.0
(label) render_show::toD0181
(word~) render_show::toD0181_$0
(word~) render_show::toD0181_$1
(word~) render_show::toD0181_$2
(byte~) render_show::toD0181_$3
(word~) render_show::toD0181_$4
(byte~) render_show::toD0181_$5
(byte~) render_show::toD0181_$6
(byte~) render_show::toD0181_$7
(byte~) render_show::toD0181_$8
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(const byte) render_show::toD0181_return#0 toD0181_return = >((word))(const byte*) PLAYFIELD_SCREEN_1#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2|>((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
(byte*) render_show::toD0181_screen
(label) render_show::toD0182
(word~) render_show::toD0182_$0
(word~) render_show::toD0182_$1
(word~) render_show::toD0182_$2
(byte~) render_show::toD0182_$3
(word~) render_show::toD0182_$4
(byte~) render_show::toD0182_$5
(byte~) render_show::toD0182_$6
(byte~) render_show::toD0182_$7
(byte~) render_show::toD0182_$8
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(const byte) render_show::toD0182_return#0 toD0182_return = >((word))(const byte*) PLAYFIELD_SCREEN_2#0&(word/signed word/dword/signed dword) 16383<<(byte/signed byte/word/signed word/dword/signed dword) 2|>((word))(const byte*) PLAYFIELD_CHARSET#0>>(byte/signed byte/word/signed word/dword/signed dword) 2&(byte/signed byte/word/signed word/dword/signed dword) 15
(byte*) render_show::toD0182_screen
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 screen_lines_1 = { fill( PLAYFIELD_LINES#0, 0) }
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 screen_lines_2 = { fill( PLAYFIELD_LINES#0, 0) }
(byte()) sid_rnd()
(label) sid_rnd::@return
(byte) sid_rnd::return
(byte) sid_rnd::return#0 reg byte a 334.33333333333337
(byte) sid_rnd::return#2 reg byte a 2002.0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#1 reg byte x 16.5
(byte) sprites_init::s#2 reg byte x 8.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 reg byte a 22.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 xpos zp ZP_BYTE:2 7.333333333333333
(byte) sprites_init::xpos#2 xpos zp ZP_BYTE:2 8.25
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$4 reg byte a 4.0
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@12
(label) sprites_irq::@13
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 reg byte x 2.5
(byte) sprites_irq::ptr#1 reg byte a 2.6666666666666665
(byte) sprites_irq::ptr#2 reg byte a 4.0
(byte) sprites_irq::ptr#3 reg byte x 2.6666666666666665
(byte) sprites_irq::ptr#4 reg byte x 4.0
(byte) sprites_irq::raster_next
(byte) sprites_irq::raster_next#0 reg byte x 2.6666666666666665
(byte) sprites_irq::raster_next#1 reg byte x 4.0
(byte) sprites_irq::raster_next#2 reg byte x 6.0
(label) sprites_irq::toSpritePtr2
(word~) sprites_irq::toSpritePtr2_$0
(word~) sprites_irq::toSpritePtr2_$1
(byte~) sprites_irq::toSpritePtr2_$2
(byte) sprites_irq::toSpritePtr2_return
(const byte) sprites_irq::toSpritePtr2_return#0 toSpritePtr2_return = ((byte))((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) sprites_irq::toSpritePtr2_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 reg byte a 2.5
(void()) sprites_irq_init()
(label) sprites_irq_init::@return
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(word~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(const byte) toSpritePtr1_return#0 toSpritePtr1_return = ((byte))((word))(const byte*) PLAYFIELD_SPRITES#0>>(byte/signed byte/word/signed word/dword/signed dword) 6
(byte*) toSpritePtr1_sprite

zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 play_init::idx#2 play_init::idx#1 sprites_init::xpos#2 sprites_init::xpos#1 render_init::l#4 render_init::l#1 render_screen_original::y#8 render_screen_original::y#1 ]
zp ZP_BYTE:3 [ render_screen_render#16 render_screen_render#11 ]
zp ZP_BYTE:4 [ current_movedown_counter#12 current_movedown_counter#10 current_movedown_counter#1 play_remove_lines::y#8 play_remove_lines::y#1 play_lock_current::l#6 play_lock_current::l#1 play_spawn_current::$3 ]
reg byte y [ current_ypos#9 current_ypos#84 current_ypos#85 ]
zp ZP_BYTE:5 [ render_screen_render#28 render_screen_render#62 render_playfield::l#2 render_playfield::l#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 play_remove_lines::x#2 play_remove_lines::x#1 play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 keyboard_event_pressed::keycode#5 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
zp ZP_BYTE:6 [ current_xpos#47 current_xpos#110 current_xpos#111 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 play_collision::xpos#5 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_remove_lines::full#4 play_remove_lines::full#2 play_lock_current::col#2 play_lock_current::col#0 play_lock_current::col#1 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 keyboard_event_scan::keycode#15 keyboard_event_pressed::row_bits#0 ]
zp ZP_WORD:7 [ current_piece_gfx#53 current_piece_gfx#100 current_piece_gfx#101 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece#12 current_piece#74 current_piece#75 current_piece#76 current_piece#77 play_collision::piece_gfx#0 play_init::pli#2 play_init::pli#1 render_init::line#4 render_init::line#1 render_init::li_1#2 render_init::li_1#1 fill::addr#2 fill::addr#1 render_screen_original::orig#2 render_screen_original::orig#5 render_screen_original::orig#1 play_lock_current::playfield_line#0 ]
reg byte x [ current_piece_char#63 current_piece_char#88 current_piece_char#89 ]
zp ZP_BYTE:9 [ render_current::ypos2#2 render_current::ypos2#0 render_current::ypos2#1 render_playfield::c#2 render_playfield::c#1 play_collision::ypos2#2 play_collision::ypos2#0 play_collision::ypos2#1 play_remove_lines::c#0 play_lock_current::i#1 keyboard_event_scan::row_scan#0 ]
zp ZP_BYTE:10 [ render_current::l#4 render_current::l#1 play_collision::l#6 play_collision::l#1 ]
zp ZP_BYTE:11 [ render_current::i#4 render_current::i#3 render_current::i#8 render_current::i#10 render_current::i#1 play_collision::i#2 play_collision::i#3 play_collision::i#11 play_collision::i#13 ]
zp ZP_BYTE:12 [ render_current::xpos#2 render_current::xpos#0 render_current::xpos#1 play_collision::col#2 play_collision::col#9 play_collision::col#1 ]
zp ZP_BYTE:13 [ render_current::c#2 render_current::c#1 main::key_event#0 ]
reg byte x [ render_screen_render#19 render_screen_render#63 ]
reg byte a [ play_move_rotate::return#1 ]
reg byte x [ play_collision::orientation#4 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
reg byte y [ play_collision::ypos#4 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 ]
reg byte x [ play_collision::c#2 play_collision::c#1 ]
reg byte a [ play_collision::return#14 ]
reg byte a [ play_move_leftright::return#1 ]
reg byte x [ play_move_down::movedown#6 play_move_down::movedown#3 play_move_down::movedown#7 play_move_down::movedown#2 play_move_down::movedown#10 ]
zp ZP_BYTE:14 [ current_ypos#29 current_ypos#21 current_ypos#18 current_ypos#13 current_ypos#0 play_lock_current::ypos2#2 play_lock_current::ypos2#0 play_lock_current::ypos2#1 ]
zp ZP_WORD:15 [ current_piece#20 current_piece#78 current_piece#16 current_piece#71 current_piece#10 render_init::li_2#2 render_init::li_2#1 render_screen_original::screen#7 render_screen_original::screen#10 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#11 render_screen_original::screen#12 render_screen_original::screen#2 render_screen_original::screen#3 render_init::$12 ]
zp ZP_BYTE:17 [ current_orientation#29 current_orientation#10 current_orientation#19 current_orientation#4 current_orientation#14 ]
zp ZP_WORD:18 [ current_piece_gfx#26 current_piece_gfx#20 current_piece_gfx#16 current_piece_gfx#14 current_piece_gfx#3 current_piece_gfx#1 ]
zp ZP_BYTE:20 [ current_xpos#33 current_xpos#10 current_xpos#23 current_xpos#19 current_xpos#4 current_xpos#1 current_xpos#2 ]
zp ZP_BYTE:21 [ current_piece_char#20 current_piece_char#15 current_piece_char#12 current_piece_char#1 ]
reg byte x [ play_move_down::return#2 ]
reg byte x [ play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
reg byte x [ play_remove_lines::w#6 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 play_remove_lines::w#3 ]
reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_modifiers#13 keyboard_modifiers#4 keyboard_modifiers#12 keyboard_modifiers#3 keyboard_modifiers#11 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp ZP_BYTE:22 [ keyboard_events_size#10 keyboard_events_size#29 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#30 keyboard_events_size#2 keyboard_events_size#1 ]
reg byte a [ render_show::d018val#3 ]
reg byte x [ play_init::j#2 play_init::j#1 ]
reg byte x [ sprites_init::s#2 sprites_init::s#1 ]
reg byte x [ render_init::c#2 render_init::c#1 ]
reg byte x [ render_init::i#2 render_init::i#1 ]
reg byte y [ render_screen_original::c#2 render_screen_original::c#0 render_screen_original::c#1 ]
reg byte x [ render_screen_original::x#7 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
zp ZP_BYTE:23 [ irq_raster_next#13 irq_raster_next#2 irq_raster_next#1 irq_raster_next#0 ]
reg byte x [ sprites_irq::raster_next#2 sprites_irq::raster_next#1 sprites_irq::raster_next#0 ]
zp ZP_BYTE:24 [ render_screen_showing#0 render_screen_showing#1 ]
zp ZP_BYTE:25 [ irq_sprite_ypos#0 irq_sprite_ypos#2 irq_sprite_ypos#1 ]
zp ZP_BYTE:26 [ irq_sprite_ptr#0 irq_sprite_ptr#2 irq_sprite_ptr#1 ]
zp ZP_BYTE:27 [ irq_cnt#0 irq_cnt#1 irq_cnt#14 ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte a [ play_move_down::key_event#0 ]
reg byte a [ play_move_down::return#3 ]
reg byte a [ main::$12 ]
zp ZP_BYTE:28 [ main::render#1 main::render#2 ]
reg byte a [ play_move_leftright::key_event#0 ]
reg byte a [ play_move_leftright::return#4 ]
reg byte a [ main::$13 ]
reg byte a [ play_move_rotate::key_event#0 ]
reg byte a [ play_move_rotate::return#4 ]
reg byte a [ main::$14 ]
reg byte a [ main::render#3 ]
reg byte a [ render_current::$5 ]
zp ZP_WORD:29 [ render_current::screen_line#0 play_collision::playfield_line#0 ]
reg byte a [ render_current::current_cell#0 ]
reg byte a [ render_playfield::$2 ]
reg byte a [ render_playfield::$3 ]
reg byte a [ play_move_rotate::$2 ]
reg byte a [ play_collision::return#13 ]
reg byte a [ play_move_rotate::$6 ]
reg byte a [ play_move_rotate::$4 ]
zp ZP_BYTE:31 [ play_collision::i#1 ]
reg byte a [ play_collision::$7 ]
reg byte a [ play_collision::return#12 ]
reg byte a [ play_move_leftright::$4 ]
reg byte a [ play_collision::return#1 ]
reg byte a [ play_move_leftright::$8 ]
reg byte a [ keyboard_event_pressed::return#12 ]
reg byte a [ play_move_down::$2 ]
reg byte a [ play_collision::return#0 ]
reg byte a [ play_move_down::$12 ]
reg byte a [ sid_rnd::return#2 ]
reg byte a [ play_spawn_current::$1 ]
reg byte a [ sid_rnd::return#0 ]
reg byte a [ keyboard_event_pressed::$0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#11 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$14 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$18 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$22 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_event_scan::$26 ]
reg byte a [ keyboard_modifiers#5 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_scan::$4 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$11 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ play_init::$1 ]
reg byte a [ sprites_init::s2#0 ]
reg byte a [ render_init::$22 ]
reg byte a [ render_init::$23 ]
reg byte a [ sprites_irq::ypos#0 ]
reg byte x [ sprites_irq::ptr#0 ]
reg byte x [ sprites_irq::ptr#3 ]
reg byte x [ sprites_irq::ptr#4 ]
reg byte a [ sprites_irq::$4 ]
reg byte a [ sprites_irq::ptr#1 ]
reg byte a [ sprites_irq::ptr#2 ]


FINAL ASSEMBLER
Score: 3208568

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label COLS = $d800
  .label CIA1_PORT_A = $dc00
  .label CIA1_PORT_B = $dc01
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label HARDWARE_IRQ = $fffe
  .const BLACK = 0
  .const WHITE = 1
  .const CYAN = 3
  .const BLUE = 6
  .const DARK_GREY = $b
  .const GREY = $c
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  .const KEY_MODIFIER_LSHIFT = 1
  .const KEY_MODIFIER_RSHIFT = 2
  .const KEY_MODIFIER_CTRL = 4
  .const KEY_MODIFIER_COMMODORE = 8
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  .label PLAYFIELD_SCREEN_1 = $400
  .label PLAYFIELD_SCREEN_2 = $2c00
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  .label PLAYFIELD_SPRITES = $2000
  .label PLAYFIELD_CHARSET = $2800
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  .const IRQ_RASTER_FIRST = $31
  .const current_movedown_slow = $32
  .const current_movedown_fast = 5
  .const COLLISION_NONE = 0
  .const COLLISION_PLAYFIELD = 1
  .const COLLISION_BOTTOM = 2
  .const COLLISION_LEFT = 4
  .const COLLISION_RIGHT = 8
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  .const toSpritePtr1_return = PLAYFIELD_SPRITES>>6
  .label keyboard_events_size = $16
  .label render_screen_showing = $18
  .label irq_raster_next = $17
  .label irq_sprite_ypos = $19
  .label irq_sprite_ptr = $1a
  .label irq_cnt = $1b
  .label current_movedown_counter = 4
  .label current_ypos = $e
  .label current_piece_gfx = $12
  .label current_xpos = $14
  .label current_piece_char = $15
  .label current_orientation = $11
  .label render_screen_render = 3
  .label render_screen_show = 2
  .label current_piece = $f
  .label current_piece_12 = 7
  .label render_screen_render_28 = 5
  .label current_xpos_47 = 6
  .label current_piece_gfx_53 = 7
  .label render_screen_render_62 = 5
  .label current_xpos_110 = 6
  .label current_xpos_111 = 6
  .label current_piece_gfx_100 = 7
  .label current_piece_gfx_101 = 7
  .label current_piece_74 = 7
  .label current_piece_75 = 7
  .label current_piece_76 = 7
  .label current_piece_77 = 7
//SEG2 @begin
bbegin:
//SEG3 @14
//SEG4 [1] (byte) render_screen_showing#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta render_screen_showing
//SEG5 kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "nes-screen.imap"  }}
//SEG6 kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"  }}
//SEG7 @20
//SEG8 kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000)) 	.for(var sy=0;sy<10;sy++) { 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
//SEG9 @21
//SEG10 [5] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  lda #IRQ_RASTER_FIRST
  sta irq_raster_next
//SEG11 [6] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
  lda #$32
  sta irq_sprite_ypos
//SEG12 [7] phi from @21 to toSpritePtr1 [phi:@21->toSpritePtr1]
//SEG13 toSpritePtr1
//SEG14 @33
//SEG15 [8] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0 -- vbuz1=vbuc1 
  lda #toSpritePtr1_return
  sta irq_sprite_ptr
//SEG16 [9] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta irq_cnt
//SEG17 [10] phi from @33 to @32 [phi:@33->@32]
//SEG18 @32
//SEG19 [11] call main 
//SEG20 [13] phi from @32 to main [phi:@32->main]
  jsr main
//SEG21 [12] phi from @32 to @end [phi:@32->@end]
//SEG22 @end
//SEG23 main
main: {
    .label key_event = $d
    .label render = $1c
  //SEG24 [14] call sid_rnd_init 
    jsr sid_rnd_init
  //SEG25 main::@15
  //SEG26 asm { sei  }
    sei
  //SEG27 [16] call render_init 
  //SEG28 [372] phi from main::@15 to render_init [phi:main::@15->render_init]
    jsr render_init
  //SEG29 [17] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  //SEG30 main::@16
  //SEG31 [18] call sprites_init 
    jsr sprites_init
  //SEG32 [19] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  //SEG33 main::@17
  //SEG34 [20] call sprites_irq_init 
    jsr sprites_irq_init
  //SEG35 [21] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  //SEG36 main::@18
  //SEG37 [22] call play_init 
  //SEG38 [337] phi from main::@18 to play_init [phi:main::@18->play_init]
    jsr play_init
  //SEG39 [23] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  //SEG40 main::@19
  //SEG41 [24] call play_spawn_current 
  //SEG42 [208] phi from main::@19 to play_spawn_current [phi:main::@19->play_spawn_current]
    jsr play_spawn_current
  //SEG43 [25] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  //SEG44 main::@20
  //SEG45 [26] call render_playfield 
  //SEG46 [95] phi from main::@20 to render_playfield [phi:main::@20->render_playfield]
  //SEG47 [95] phi (byte) render_screen_render#19 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@20->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$40
    jsr render_playfield
  //SEG48 main::@21
  //SEG49 [27] (byte~) current_ypos#84 ← (byte) current_ypos#18 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG50 [28] (byte~) current_xpos#110 ← (byte) current_xpos#23 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_110
  //SEG51 [29] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#16 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_100
    lda current_piece_gfx+1
    sta current_piece_gfx_100+1
  //SEG52 [30] (byte~) current_piece_char#88 ← (byte) current_piece_char#12 -- vbuxx=vbuz1 
    ldx current_piece_char
  //SEG53 [31] call render_current 
  //SEG54 [72] phi from main::@21 to render_current [phi:main::@21->render_current]
  //SEG55 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#88 [phi:main::@21->render_current#0] -- register_copy 
  //SEG56 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#100 [phi:main::@21->render_current#1] -- register_copy 
  //SEG57 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#110 [phi:main::@21->render_current#2] -- register_copy 
  //SEG58 [72] phi (byte) render_screen_render#28 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->render_current#3] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render_28
  //SEG59 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#84 [phi:main::@21->render_current#4] -- register_copy 
    jsr render_current
  //SEG60 [32] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG61 [33] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  //SEG62 [33] phi (byte) current_movedown_counter#12 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG63 [33] phi (byte) keyboard_events_size#19 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#1] -- vbuz1=vbuc1 
    sta keyboard_events_size
  //SEG64 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#12 [phi:main::@21->main::@1#2] -- register_copy 
  //SEG65 [33] phi (byte) current_ypos#21 = (byte) current_ypos#18 [phi:main::@21->main::@1#3] -- register_copy 
  //SEG66 [33] phi (byte) current_xpos#10 = (byte) current_xpos#23 [phi:main::@21->main::@1#4] -- register_copy 
  //SEG67 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#16 [phi:main::@21->main::@1#5] -- register_copy 
  //SEG68 [33] phi (byte) current_orientation#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#6] -- vbuz1=vbuc1 
    sta current_orientation
  //SEG69 [33] phi (byte*) current_piece#16 = (byte*~) current_piece#71 [phi:main::@21->main::@1#7] -- register_copy 
  //SEG70 [33] phi (byte) render_screen_render#16 = (byte/signed byte/word/signed word/dword/signed dword) 64 [phi:main::@21->main::@1#8] -- vbuz1=vbuc1 
    lda #$40
    sta render_screen_render
  //SEG71 [33] phi (byte) render_screen_show#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@21->main::@1#9] -- vbuz1=vbuc1 
    lda #0
    sta render_screen_show
  //SEG72 [33] phi from main::@28 to main::@1 [phi:main::@28->main::@1]
  //SEG73 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@28->main::@1#0] -- register_copy 
  //SEG74 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@28->main::@1#1] -- register_copy 
  //SEG75 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@28->main::@1#2] -- register_copy 
  //SEG76 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@28->main::@1#3] -- register_copy 
  //SEG77 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@28->main::@1#4] -- register_copy 
  //SEG78 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@28->main::@1#5] -- register_copy 
  //SEG79 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@28->main::@1#6] -- register_copy 
  //SEG80 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@28->main::@1#7] -- register_copy 
  //SEG81 main::@1
  //SEG82 main::@4
  b4:
  //SEG83 [34] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG84 [35] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
  //SEG85 main::@6
  //SEG86 [36] call render_show 
    jsr render_show
  //SEG87 [37] phi from main::@6 to main::@23 [phi:main::@6->main::@23]
  //SEG88 main::@23
  //SEG89 [38] call keyboard_event_scan 
  //SEG90 [274] phi from main::@23 to keyboard_event_scan [phi:main::@23->keyboard_event_scan]
    jsr keyboard_event_scan
  //SEG91 [39] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  //SEG92 main::@24
  //SEG93 [40] call keyboard_event_get 
    jsr keyboard_event_get
  //SEG94 [41] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#2  // register copy reg byte a
  //SEG95 main::@25
  //SEG96 [42] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuaa 
    sta key_event
  //SEG97 [43] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
  //SEG98 [44] call play_move_down 
    jsr play_move_down
  //SEG99 [45] (byte) play_move_down::return#3 ← (byte) play_move_down::return#2 -- vbuaa=vbuxx 
    txa
  //SEG100 main::@26
  //SEG101 [46] (byte~) main::$12 ← (byte) play_move_down::return#3
    // (byte~) main::$12 = (byte) play_move_down::return#3  // register copy reg byte a
  //SEG102 [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$12 -- vbuz1=vbuc1_plus_vbuaa 
    clc
    adc #0
    sta render
  //SEG103 [48] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG104 [49] call play_move_leftright 
    jsr play_move_leftright
  //SEG105 [50] (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1
    // (byte) play_move_leftright::return#4 = (byte) play_move_leftright::return#1  // register copy reg byte a
  //SEG106 main::@27
  //SEG107 [51] (byte~) main::$13 ← (byte) play_move_leftright::return#4
    // (byte~) main::$13 = (byte) play_move_leftright::return#4  // register copy reg byte a
  //SEG108 [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$13 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc render
    sta render
  //SEG109 [53] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0 -- vbuaa=vbuz1 
    lda key_event
  //SEG110 [54] call play_move_rotate 
    jsr play_move_rotate
  //SEG111 [55] (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1
    // (byte) play_move_rotate::return#4 = (byte) play_move_rotate::return#1  // register copy reg byte a
  //SEG112 main::@28
  //SEG113 [56] (byte~) main::$14 ← (byte) play_move_rotate::return#4
    // (byte~) main::$14 = (byte) play_move_rotate::return#4  // register copy reg byte a
  //SEG114 [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$14 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc render
  //SEG115 [58] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG116 main::@13
  //SEG117 [59] (byte~) render_screen_render#63 ← (byte) render_screen_render#16 -- vbuxx=vbuz1 
    ldx render_screen_render
  //SEG118 [60] call render_playfield 
  //SEG119 [95] phi from main::@13 to render_playfield [phi:main::@13->render_playfield]
  //SEG120 [95] phi (byte) render_screen_render#19 = (byte~) render_screen_render#63 [phi:main::@13->render_playfield#0] -- register_copy 
    jsr render_playfield
  //SEG121 main::@29
  //SEG122 [61] (byte~) current_ypos#85 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG123 [62] (byte~) render_screen_render#62 ← (byte) render_screen_render#16 -- vbuz1=vbuz2 
    lda render_screen_render
    sta render_screen_render_62
  //SEG124 [63] (byte~) current_xpos#111 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta current_xpos_111
  //SEG125 [64] (byte*~) current_piece_gfx#101 ← (byte*) current_piece_gfx#14 -- pbuz1=pbuz2 
    lda current_piece_gfx
    sta current_piece_gfx_101
    lda current_piece_gfx+1
    sta current_piece_gfx_101+1
  //SEG126 [65] (byte~) current_piece_char#89 ← (byte) current_piece_char#1 -- vbuxx=vbuz1 
    ldx current_piece_char
  //SEG127 [66] call render_current 
  //SEG128 [72] phi from main::@29 to render_current [phi:main::@29->render_current]
  //SEG129 [72] phi (byte) current_piece_char#63 = (byte~) current_piece_char#89 [phi:main::@29->render_current#0] -- register_copy 
  //SEG130 [72] phi (byte*) current_piece_gfx#53 = (byte*~) current_piece_gfx#101 [phi:main::@29->render_current#1] -- register_copy 
  //SEG131 [72] phi (byte) current_xpos#47 = (byte~) current_xpos#111 [phi:main::@29->render_current#2] -- register_copy 
  //SEG132 [72] phi (byte) render_screen_render#28 = (byte~) render_screen_render#62 [phi:main::@29->render_current#3] -- register_copy 
  //SEG133 [72] phi (byte) current_ypos#9 = (byte~) current_ypos#85 [phi:main::@29->render_current#4] -- register_copy 
    jsr render_current
  //SEG134 [67] phi from main::@29 to main::@30 [phi:main::@29->main::@30]
  //SEG135 main::@30
  //SEG136 [68] call render_screen_swap 
    jsr render_screen_swap
  //SEG137 [33] phi from main::@30 to main::@1 [phi:main::@30->main::@1]
  //SEG138 [33] phi (byte) current_movedown_counter#12 = (byte) current_movedown_counter#10 [phi:main::@30->main::@1#0] -- register_copy 
  //SEG139 [33] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@30->main::@1#1] -- register_copy 
  //SEG140 [33] phi (byte) current_piece_char#15 = (byte) current_piece_char#1 [phi:main::@30->main::@1#2] -- register_copy 
  //SEG141 [33] phi (byte) current_ypos#21 = (byte) current_ypos#13 [phi:main::@30->main::@1#3] -- register_copy 
  //SEG142 [33] phi (byte) current_xpos#10 = (byte) current_xpos#19 [phi:main::@30->main::@1#4] -- register_copy 
  //SEG143 [33] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#14 [phi:main::@30->main::@1#5] -- register_copy 
  //SEG144 [33] phi (byte) current_orientation#10 = (byte) current_orientation#19 [phi:main::@30->main::@1#6] -- register_copy 
  //SEG145 [33] phi (byte*) current_piece#16 = (byte*) current_piece#10 [phi:main::@30->main::@1#7] -- register_copy 
  //SEG146 [33] phi (byte) render_screen_render#16 = (byte) render_screen_render#11 [phi:main::@30->main::@1#8] -- register_copy 
  //SEG147 [33] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@30->main::@1#9] -- register_copy 
    jmp b4
}
//SEG148 render_screen_swap
render_screen_swap: {
  //SEG149 [69] (byte) render_screen_render#11 ← (byte) render_screen_render#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_render
    eor #$40
    sta render_screen_render
  //SEG150 [70] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuz1=vbuz1_bxor_vbuc1 
    lda render_screen_show
    eor #$40
    sta render_screen_show
  //SEG151 render_screen_swap::@return
  //SEG152 [71] return 
    rts
}
//SEG153 render_current
render_current: {
    .label ypos2 = 9
    .label screen_line = $1d
    .label xpos = $c
    .label i = $b
    .label l = $a
    .label c = $d
  //SEG154 [73] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG155 [74] phi from render_current to render_current::@1 [phi:render_current->render_current::@1]
  //SEG156 [74] phi (byte) render_current::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG157 [74] phi (byte) render_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current->render_current::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG158 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#0 [phi:render_current->render_current::@1#2] -- register_copy 
  //SEG159 [74] phi from render_current::@3 to render_current::@1 [phi:render_current::@3->render_current::@1]
  //SEG160 [74] phi (byte) render_current::l#4 = (byte) render_current::l#1 [phi:render_current::@3->render_current::@1#0] -- register_copy 
  //SEG161 [74] phi (byte) render_current::i#3 = (byte) render_current::i#8 [phi:render_current::@3->render_current::@1#1] -- register_copy 
  //SEG162 [74] phi (byte) render_current::ypos2#2 = (byte) render_current::ypos2#1 [phi:render_current::@3->render_current::@1#2] -- register_copy 
  //SEG163 render_current::@1
  b1:
  //SEG164 [75] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13 -- vbuz1_gt_vbuc1_then_la1 
    lda ypos2
    cmp #2
    beq !+
    bcs b13
  !:
  //SEG165 render_current::@7
  b7:
  //SEG166 [76] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lda #4
    clc
    adc i
    sta i
  //SEG167 [77] phi from render_current::@5 render_current::@7 to render_current::@3 [phi:render_current::@5/render_current::@7->render_current::@3]
  //SEG168 [77] phi (byte) render_current::i#8 = (byte) render_current::i#10 [phi:render_current::@5/render_current::@7->render_current::@3#0] -- register_copy 
  //SEG169 render_current::@3
  b3:
  //SEG170 [78] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG171 [79] (byte) render_current::l#1 ← ++ (byte) render_current::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG172 [80] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b1
  //SEG173 render_current::@return
  //SEG174 [81] return 
    rts
  //SEG175 render_current::@13
  b13:
  //SEG176 [82] if((byte) render_current::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b2
    jmp b7
  //SEG177 render_current::@2
  b2:
  //SEG178 [83] (byte~) render_current::$5 ← (byte) render_screen_render#28 + (byte) render_current::ypos2#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda render_screen_render_28
    clc
    adc ypos2
  //SEG179 [84] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG180 [85] (byte) render_current::xpos#0 ← (byte) current_xpos#47 -- vbuz1=vbuz2 
    lda current_xpos_47
    sta xpos
  //SEG181 [86] phi from render_current::@2 to render_current::@4 [phi:render_current::@2->render_current::@4]
  //SEG182 [86] phi (byte) render_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_current::@2->render_current::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG183 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#0 [phi:render_current::@2->render_current::@4#1] -- register_copy 
  //SEG184 [86] phi (byte) render_current::i#4 = (byte) render_current::i#3 [phi:render_current::@2->render_current::@4#2] -- register_copy 
  //SEG185 [86] phi from render_current::@5 to render_current::@4 [phi:render_current::@5->render_current::@4]
  //SEG186 [86] phi (byte) render_current::c#2 = (byte) render_current::c#1 [phi:render_current::@5->render_current::@4#0] -- register_copy 
  //SEG187 [86] phi (byte) render_current::xpos#2 = (byte) render_current::xpos#1 [phi:render_current::@5->render_current::@4#1] -- register_copy 
  //SEG188 [86] phi (byte) render_current::i#4 = (byte) render_current::i#10 [phi:render_current::@5->render_current::@4#2] -- register_copy 
  //SEG189 render_current::@4
  b4:
  //SEG190 [87] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#53 + (byte) render_current::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy i
    lda (current_piece_gfx_53),y
  //SEG191 [88] (byte) render_current::i#10 ← ++ (byte) render_current::i#4 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG192 [89] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG193 render_current::@9
  //SEG194 [90] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@5 -- vbuz1_ge_vbuc1_then_la1 
    lda xpos
    cmp #PLAYFIELD_COLS
    bcs b5
  //SEG195 render_current::@10
  //SEG196 [91] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#63 -- pbuz1_derefidx_vbuz2=vbuxx 
    tay
    txa
    sta (screen_line),y
  //SEG197 render_current::@5
  b5:
  //SEG198 [92] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2 -- vbuz1=_inc_vbuz1 
    inc xpos
  //SEG199 [93] (byte) render_current::c#1 ← ++ (byte) render_current::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG200 [94] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #4
    bne b4
    jmp b3
}
//SEG201 render_playfield
render_playfield: {
    .label screen_line = 7
    .label i = 6
    .label c = 9
    .label l = 5
  //SEG202 [96] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  //SEG203 [96] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta i
  //SEG204 [96] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta l
  //SEG205 [96] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  //SEG206 [96] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG207 [96] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
  //SEG208 render_playfield::@1
  b1:
  //SEG209 [97] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG210 [98] (byte~) render_playfield::$3 ← (byte) render_screen_render#19 + (byte~) render_playfield::$2 -- vbuaa=vbuxx_plus_vbuaa 
    stx $ff
    clc
    adc $ff
  //SEG211 [99] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta screen_line
    lda screen_lines_1+1,y
    sta screen_line+1
  //SEG212 [100] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  //SEG213 [100] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta c
  //SEG214 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
  //SEG215 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
  //SEG216 [100] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  //SEG217 [100] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG218 [100] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG219 [100] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
  //SEG220 render_playfield::@2
  b2:
  //SEG221 [101] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (screen_line),y
  //SEG222 [102] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc screen_line
    bne !+
    inc screen_line+1
  !:
  //SEG223 [103] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG224 [104] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG225 [105] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #PLAYFIELD_COLS-1+1
    bne b2
  //SEG226 render_playfield::@3
  //SEG227 [106] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG228 [107] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1
  //SEG229 render_playfield::@return
  //SEG230 [108] return 
    rts
}
//SEG231 play_move_rotate
play_move_rotate: {
    .label orientation = 5
  //SEG232 [109] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
  //SEG233 play_move_rotate::@6
  //SEG234 [110] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
  //SEG235 [111] phi from play_move_rotate::@14 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return]
  b3:
  //SEG236 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#1 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
  //SEG237 [111] phi (byte) current_orientation#19 = (byte) current_orientation#14 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
  //SEG238 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_rotate::@14/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
  //SEG239 play_move_rotate::@return
  breturn:
  //SEG240 [112] return 
    rts
  //SEG241 play_move_rotate::@2
  b2:
  //SEG242 [113] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_plus_vbuc1 
    lda #$10
    clc
    adc current_orientation
  //SEG243 [114] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
  //SEG244 [115] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@4 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4]
  //SEG245 [115] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@4#0] -- register_copy 
  //SEG246 play_move_rotate::@4
  b4:
  //SEG247 [116] (byte) play_collision::xpos#3 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG248 [117] (byte) play_collision::ypos#3 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG249 [118] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx orientation
  //SEG250 [119] (byte*~) current_piece#77 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_77
    lda current_piece+1
    sta current_piece_77+1
  //SEG251 [120] call play_collision 
  //SEG252 [128] phi from play_move_rotate::@4 to play_collision [phi:play_move_rotate::@4->play_collision]
  //SEG253 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@4->play_collision#0] -- register_copy 
  //SEG254 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@4->play_collision#1] -- register_copy 
  //SEG255 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@4->play_collision#2] -- register_copy 
  //SEG256 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#77 [phi:play_move_rotate::@4->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG257 [121] (byte) play_collision::return#13 ← (byte) play_collision::return#14
    // (byte) play_collision::return#13 = (byte) play_collision::return#14  // register copy reg byte a
  //SEG258 play_move_rotate::@14
  //SEG259 [122] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13
    // (byte~) play_move_rotate::$6 = (byte) play_collision::return#13  // register copy reg byte a
  //SEG260 [123] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG261 play_move_rotate::@11
  //SEG262 [124] (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda orientation
    sta current_orientation
  //SEG263 [125] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc current_piece
    sta current_piece_gfx
    lda #0
    adc current_piece+1
    sta current_piece_gfx+1
  //SEG264 [111] phi from play_move_rotate::@11 to play_move_rotate::@return [phi:play_move_rotate::@11->play_move_rotate::@return]
  //SEG265 [111] phi (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#3 [phi:play_move_rotate::@11->play_move_rotate::@return#0] -- register_copy 
  //SEG266 [111] phi (byte) current_orientation#19 = (byte) current_orientation#4 [phi:play_move_rotate::@11->play_move_rotate::@return#1] -- register_copy 
  //SEG267 [111] phi (byte) play_move_rotate::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_rotate::@11->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG268 play_move_rotate::@1
  b1:
  //SEG269 [126] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16 -- vbuaa=vbuz1_minus_vbuc1 
    lda current_orientation
    sec
    sbc #$10
  //SEG270 [127] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63 -- vbuz1=vbuaa_band_vbuc1 
    and #$3f
    sta orientation
    jmp b4
}
//SEG271 play_collision
play_collision: {
    .label xpos = 6
    .label piece_gfx = 7
    .label ypos2 = 9
    .label playfield_line = $1d
    .label i = $1f
    .label col = $c
    .label l = $a
    .label i_2 = $b
    .label i_3 = $b
    .label i_11 = $b
    .label i_13 = $b
  //SEG272 [129] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc piece_gfx
    sta piece_gfx
    lda #0
    adc piece_gfx+1
    sta piece_gfx+1
  //SEG273 [130] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuyy_rol_1 
    tya
    asl
    sta ypos2
  //SEG274 [131] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  //SEG275 [131] phi (byte) play_collision::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG276 [131] phi (byte) play_collision::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    sta i_3
  //SEG277 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
  //SEG278 play_collision::@1
  b1:
  //SEG279 [132] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG280 [133] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#5 -- vbuz1=vbuz2 
    lda xpos
    sta col
  //SEG281 [134] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  //SEG282 [134] phi (byte) play_collision::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG283 [134] phi (byte) play_collision::col#2 = (byte~) play_collision::col#9 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
  //SEG284 [134] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
  //SEG285 play_collision::@2
  b2:
  //SEG286 [135] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG287 [136] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
  //SEG288 play_collision::@8
  //SEG289 [137] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda ypos2
    cmp #2*PLAYFIELD_LINES
    bcc b4
  //SEG290 [138] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  //SEG291 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
  //SEG292 play_collision::@return
  breturn:
  //SEG293 [139] return 
    rts
  //SEG294 play_collision::@4
  b4:
  //SEG295 [140] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and col
  //SEG296 [141] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG297 [138] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  //SEG298 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp breturn
  //SEG299 play_collision::@5
  b5:
  //SEG300 [142] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda col
    cmp #PLAYFIELD_COLS
    bcc b6
  //SEG301 [138] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  //SEG302 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp breturn
  //SEG303 play_collision::@6
  b6:
  //SEG304 [143] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy col
    lda (playfield_line),y
    cmp #0
    beq b3
  //SEG305 [138] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  //SEG306 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp breturn
  //SEG307 play_collision::@3
  b3:
  //SEG308 [144] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG309 [145] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG310 [146] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b21
  //SEG311 play_collision::@17
  //SEG312 [147] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG313 [148] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG314 [149] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b20
  //SEG315 [138] phi from play_collision::@17 to play_collision::@return [phi:play_collision::@17->play_collision::@return]
  //SEG316 [138] phi (byte) play_collision::return#14 = (const byte) COLLISION_NONE#0 [phi:play_collision::@17->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp breturn
  //SEG317 play_collision::@20
  b20:
  //SEG318 [150] (byte~) play_collision::i#11 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_11
  //SEG319 [131] phi from play_collision::@20 to play_collision::@1 [phi:play_collision::@20->play_collision::@1]
  //SEG320 [131] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@20->play_collision::@1#0] -- register_copy 
  //SEG321 [131] phi (byte) play_collision::i#3 = (byte~) play_collision::i#11 [phi:play_collision::@20->play_collision::@1#1] -- register_copy 
  //SEG322 [131] phi (byte) play_collision::ypos2#2 = (byte) play_collision::ypos2#1 [phi:play_collision::@20->play_collision::@1#2] -- register_copy 
    jmp b1
  //SEG323 play_collision::@21
  b21:
  //SEG324 [151] (byte~) play_collision::i#13 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_13
  //SEG325 [134] phi from play_collision::@21 to play_collision::@2 [phi:play_collision::@21->play_collision::@2]
  //SEG326 [134] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@21->play_collision::@2#0] -- register_copy 
  //SEG327 [134] phi (byte) play_collision::col#2 = (byte) play_collision::col#1 [phi:play_collision::@21->play_collision::@2#1] -- register_copy 
  //SEG328 [134] phi (byte) play_collision::i#2 = (byte~) play_collision::i#13 [phi:play_collision::@21->play_collision::@2#2] -- register_copy 
    jmp b2
}
//SEG329 play_move_leftright
play_move_leftright: {
  //SEG330 [152] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_COMMA
    beq b1
  //SEG331 play_move_leftright::@6
  //SEG332 [153] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne b3
  //SEG333 play_move_leftright::@7
  //SEG334 [154] (byte) play_collision::xpos#2 ← (byte) current_xpos#1 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_plus_1 
    ldy current_xpos
    iny
    sty play_collision.xpos
  //SEG335 [155] (byte) play_collision::ypos#2 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG336 [156] (byte) play_collision::orientation#2 ← (byte) current_orientation#14 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG337 [157] (byte*~) current_piece#76 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_76
    lda current_piece+1
    sta current_piece_76+1
  //SEG338 [158] call play_collision 
  //SEG339 [128] phi from play_move_leftright::@7 to play_collision [phi:play_move_leftright::@7->play_collision]
  //SEG340 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@7->play_collision#0] -- register_copy 
  //SEG341 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@7->play_collision#1] -- register_copy 
  //SEG342 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@7->play_collision#2] -- register_copy 
  //SEG343 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#76 [phi:play_move_leftright::@7->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG344 [159] (byte) play_collision::return#12 ← (byte) play_collision::return#14
    // (byte) play_collision::return#12 = (byte) play_collision::return#14  // register copy reg byte a
  //SEG345 play_move_leftright::@15
  //SEG346 [160] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12
    // (byte~) play_move_leftright::$4 = (byte) play_collision::return#12  // register copy reg byte a
  //SEG347 [161] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG348 play_move_leftright::@8
  //SEG349 [162] (byte) current_xpos#2 ← ++ (byte) current_xpos#1 -- vbuz1=_inc_vbuz1 
    inc current_xpos
  //SEG350 [163] phi from play_move_leftright::@11 play_move_leftright::@8 to play_move_leftright::@return [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return]
  b2:
  //SEG351 [163] phi (byte) current_xpos#19 = (byte) current_xpos#4 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#0] -- register_copy 
  //SEG352 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_leftright::@11/play_move_leftright::@8->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
  //SEG353 [163] phi from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 to play_move_leftright::@return [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return]
  b3:
  //SEG354 [163] phi (byte) current_xpos#19 = (byte) current_xpos#1 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#0] -- register_copy 
  //SEG355 [163] phi (byte) play_move_leftright::return#1 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_leftright::@14/play_move_leftright::@15/play_move_leftright::@6->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
  //SEG356 play_move_leftright::@return
  breturn:
  //SEG357 [164] return 
    rts
  //SEG358 play_move_leftright::@1
  b1:
  //SEG359 [165] (byte) play_collision::xpos#1 ← (byte) current_xpos#1 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_minus_1 
    ldx current_xpos
    dex
    stx play_collision.xpos
  //SEG360 [166] (byte) play_collision::ypos#1 ← (byte) current_ypos#13 -- vbuyy=vbuz1 
    ldy current_ypos
  //SEG361 [167] (byte) play_collision::orientation#1 ← (byte) current_orientation#14 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG362 [168] (byte*~) current_piece#75 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_75
    lda current_piece+1
    sta current_piece_75+1
  //SEG363 [169] call play_collision 
  //SEG364 [128] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  //SEG365 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
  //SEG366 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
  //SEG367 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
  //SEG368 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#75 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG369 [170] (byte) play_collision::return#1 ← (byte) play_collision::return#14
    // (byte) play_collision::return#1 = (byte) play_collision::return#14  // register copy reg byte a
  //SEG370 play_move_leftright::@14
  //SEG371 [171] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // (byte~) play_move_leftright::$8 = (byte) play_collision::return#1  // register copy reg byte a
  //SEG372 [172] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
  //SEG373 play_move_leftright::@11
  //SEG374 [173] (byte) current_xpos#4 ← -- (byte) current_xpos#1 -- vbuz1=_dec_vbuz1 
    dec current_xpos
    jmp b2
}
//SEG375 play_move_down
play_move_down: {
  //SEG376 [174] (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#12 -- vbuz1=_inc_vbuz1 
    inc current_movedown_counter
  //SEG377 [175] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b3
  //SEG378 [176] phi from play_move_down to play_move_down::@8 [phi:play_move_down->play_move_down::@8]
  //SEG379 play_move_down::@8
  //SEG380 [177] phi from play_move_down::@8 to play_move_down::@1 [phi:play_move_down::@8->play_move_down::@1]
  //SEG381 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@8->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
  //SEG382 [177] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b3:
  //SEG383 [177] phi (byte) play_move_down::movedown#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG384 play_move_down::@1
  b1:
  //SEG385 [178] call keyboard_event_pressed 
  //SEG386 [263] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  //SEG387 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG388 [179] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG389 play_move_down::@17
  //SEG390 [180] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // (byte~) play_move_down::$2 = (byte) keyboard_event_pressed::return#12  // register copy reg byte a
  //SEG391 [181] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG392 play_move_down::@9
  //SEG393 [182] if((byte) current_movedown_counter#1<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_fast
    bcc b2
  //SEG394 play_move_down::@10
  //SEG395 [183] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG396 [184] phi from play_move_down::@10 play_move_down::@17 play_move_down::@9 to play_move_down::@2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2]
  //SEG397 [184] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#2 [phi:play_move_down::@10/play_move_down::@17/play_move_down::@9->play_move_down::@2#0] -- register_copy 
  //SEG398 play_move_down::@2
  b2:
  //SEG399 [185] if((byte) current_movedown_counter#1<(const byte) current_movedown_slow#0) goto play_move_down::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda current_movedown_counter
    cmp #current_movedown_slow
    bcc b4
  //SEG400 play_move_down::@11
  //SEG401 [186] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG402 [187] phi from play_move_down::@11 play_move_down::@2 to play_move_down::@4 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4]
  //SEG403 [187] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#3 [phi:play_move_down::@11/play_move_down::@2->play_move_down::@4#0] -- register_copy 
  //SEG404 play_move_down::@4
  b4:
  //SEG405 [188] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b5
  //SEG406 play_move_down::@12
  //SEG407 [189] (byte) play_collision::ypos#0 ← (byte) current_ypos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=vbuz1_plus_1 
    ldy current_ypos
    iny
  //SEG408 [190] (byte) play_collision::xpos#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta play_collision.xpos
  //SEG409 [191] (byte) play_collision::orientation#0 ← (byte) current_orientation#10 -- vbuxx=vbuz1 
    ldx current_orientation
  //SEG410 [192] (byte*~) current_piece#74 ← (byte*) current_piece#16 -- pbuz1=pbuz2 
    lda current_piece
    sta current_piece_74
    lda current_piece+1
    sta current_piece_74+1
  //SEG411 [193] call play_collision 
  //SEG412 [128] phi from play_move_down::@12 to play_collision [phi:play_move_down::@12->play_collision]
  //SEG413 [128] phi (byte) play_collision::xpos#5 = (byte) play_collision::xpos#0 [phi:play_move_down::@12->play_collision#0] -- register_copy 
  //SEG414 [128] phi (byte) play_collision::ypos#4 = (byte) play_collision::ypos#0 [phi:play_move_down::@12->play_collision#1] -- register_copy 
  //SEG415 [128] phi (byte) play_collision::orientation#4 = (byte) play_collision::orientation#0 [phi:play_move_down::@12->play_collision#2] -- register_copy 
  //SEG416 [128] phi (byte*) current_piece#12 = (byte*~) current_piece#74 [phi:play_move_down::@12->play_collision#3] -- register_copy 
    jsr play_collision
  //SEG417 [194] (byte) play_collision::return#0 ← (byte) play_collision::return#14
    // (byte) play_collision::return#0 = (byte) play_collision::return#14  // register copy reg byte a
  //SEG418 play_move_down::@18
  //SEG419 [195] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // (byte~) play_move_down::$12 = (byte) play_collision::return#0  // register copy reg byte a
  //SEG420 [196] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b6
  //SEG421 [197] phi from play_move_down::@18 to play_move_down::@13 [phi:play_move_down::@18->play_move_down::@13]
  //SEG422 play_move_down::@13
  //SEG423 [198] call play_lock_current 
    jsr play_lock_current
  //SEG424 [199] phi from play_move_down::@13 to play_move_down::@19 [phi:play_move_down::@13->play_move_down::@19]
  //SEG425 play_move_down::@19
  //SEG426 [200] call play_remove_lines 
  //SEG427 [224] phi from play_move_down::@19 to play_remove_lines [phi:play_move_down::@19->play_remove_lines]
    jsr play_remove_lines
  //SEG428 [201] phi from play_move_down::@19 to play_move_down::@20 [phi:play_move_down::@19->play_move_down::@20]
  //SEG429 play_move_down::@20
  //SEG430 [202] call play_spawn_current 
  //SEG431 [208] phi from play_move_down::@20 to play_spawn_current [phi:play_move_down::@20->play_spawn_current]
    jsr play_spawn_current
  //SEG432 [203] (byte*~) current_piece#78 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy play_spawn_current._3
    lda PIECES,y
    sta current_piece
    lda PIECES+1,y
    sta current_piece+1
  //SEG433 [204] phi from play_move_down::@20 to play_move_down::@7 [phi:play_move_down::@20->play_move_down::@7]
  //SEG434 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#12 [phi:play_move_down::@20->play_move_down::@7#0] -- register_copy 
  //SEG435 [204] phi (byte) current_xpos#33 = (byte) current_xpos#23 [phi:play_move_down::@20->play_move_down::@7#1] -- register_copy 
  //SEG436 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#16 [phi:play_move_down::@20->play_move_down::@7#2] -- register_copy 
  //SEG437 [204] phi (byte) current_orientation#29 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@20->play_move_down::@7#3] -- vbuz1=vbuc1 
    lda #0
    sta current_orientation
  //SEG438 [204] phi (byte*) current_piece#20 = (byte*~) current_piece#78 [phi:play_move_down::@20->play_move_down::@7#4] -- register_copy 
  //SEG439 [204] phi (byte) current_ypos#29 = (byte) current_ypos#18 [phi:play_move_down::@20->play_move_down::@7#5] -- register_copy 
  //SEG440 play_move_down::@7
  b7:
  //SEG441 [205] phi from play_move_down::@7 to play_move_down::@return [phi:play_move_down::@7->play_move_down::@return]
  //SEG442 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#20 [phi:play_move_down::@7->play_move_down::@return#0] -- register_copy 
  //SEG443 [205] phi (byte) current_xpos#1 = (byte) current_xpos#33 [phi:play_move_down::@7->play_move_down::@return#1] -- register_copy 
  //SEG444 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#26 [phi:play_move_down::@7->play_move_down::@return#2] -- register_copy 
  //SEG445 [205] phi (byte) current_orientation#14 = (byte) current_orientation#29 [phi:play_move_down::@7->play_move_down::@return#3] -- register_copy 
  //SEG446 [205] phi (byte*) current_piece#10 = (byte*) current_piece#20 [phi:play_move_down::@7->play_move_down::@return#4] -- register_copy 
  //SEG447 [205] phi (byte) current_ypos#13 = (byte) current_ypos#29 [phi:play_move_down::@7->play_move_down::@return#5] -- register_copy 
  //SEG448 [205] phi (byte) current_movedown_counter#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@7->play_move_down::@return#6] -- vbuz1=vbuc1 
    lda #0
    sta current_movedown_counter
  //SEG449 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_move_down::@7->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #1
    jmp breturn
  //SEG450 [205] phi from play_move_down::@4 to play_move_down::@return [phi:play_move_down::@4->play_move_down::@return]
  b5:
  //SEG451 [205] phi (byte) current_piece_char#1 = (byte) current_piece_char#15 [phi:play_move_down::@4->play_move_down::@return#0] -- register_copy 
  //SEG452 [205] phi (byte) current_xpos#1 = (byte) current_xpos#10 [phi:play_move_down::@4->play_move_down::@return#1] -- register_copy 
  //SEG453 [205] phi (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#20 [phi:play_move_down::@4->play_move_down::@return#2] -- register_copy 
  //SEG454 [205] phi (byte) current_orientation#14 = (byte) current_orientation#10 [phi:play_move_down::@4->play_move_down::@return#3] -- register_copy 
  //SEG455 [205] phi (byte*) current_piece#10 = (byte*) current_piece#16 [phi:play_move_down::@4->play_move_down::@return#4] -- register_copy 
  //SEG456 [205] phi (byte) current_ypos#13 = (byte) current_ypos#21 [phi:play_move_down::@4->play_move_down::@return#5] -- register_copy 
  //SEG457 [205] phi (byte) current_movedown_counter#10 = (byte) current_movedown_counter#1 [phi:play_move_down::@4->play_move_down::@return#6] -- register_copy 
  //SEG458 [205] phi (byte) play_move_down::return#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_move_down::@4->play_move_down::@return#7] -- vbuxx=vbuc1 
    ldx #0
  //SEG459 play_move_down::@return
  breturn:
  //SEG460 [206] return 
    rts
  //SEG461 play_move_down::@6
  b6:
  //SEG462 [207] (byte) current_ypos#0 ← ++ (byte) current_ypos#21 -- vbuz1=_inc_vbuz1 
    inc current_ypos
  //SEG463 [204] phi from play_move_down::@6 to play_move_down::@7 [phi:play_move_down::@6->play_move_down::@7]
  //SEG464 [204] phi (byte) current_piece_char#20 = (byte) current_piece_char#15 [phi:play_move_down::@6->play_move_down::@7#0] -- register_copy 
  //SEG465 [204] phi (byte) current_xpos#33 = (byte) current_xpos#10 [phi:play_move_down::@6->play_move_down::@7#1] -- register_copy 
  //SEG466 [204] phi (byte*) current_piece_gfx#26 = (byte*) current_piece_gfx#20 [phi:play_move_down::@6->play_move_down::@7#2] -- register_copy 
  //SEG467 [204] phi (byte) current_orientation#29 = (byte) current_orientation#10 [phi:play_move_down::@6->play_move_down::@7#3] -- register_copy 
  //SEG468 [204] phi (byte*) current_piece#20 = (byte*) current_piece#16 [phi:play_move_down::@6->play_move_down::@7#4] -- register_copy 
  //SEG469 [204] phi (byte) current_ypos#29 = (byte) current_ypos#0 [phi:play_move_down::@6->play_move_down::@7#5] -- register_copy 
    jmp b7
}
//SEG470 play_spawn_current
play_spawn_current: {
    .label _3 = 4
  //SEG471 [209] phi from play_spawn_current to play_spawn_current::@1 [phi:play_spawn_current->play_spawn_current::@1]
  //SEG472 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 7 [phi:play_spawn_current->play_spawn_current::@1#0] -- vbuxx=vbuc1 
    ldx #7
  //SEG473 play_spawn_current::@1
  b1:
  //SEG474 [210] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #7
    beq b2
  //SEG475 play_spawn_current::@3
  //SEG476 [211] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta _3
  //SEG477 [212] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuz1=pptc1_derefidx_vbuz2_plus_0 
    tay
    lda PIECES,y
    sta current_piece_gfx
    lda PIECES+1,y
    sta current_piece_gfx+1
  //SEG478 [213] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta current_xpos
  //SEG479 [214] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta current_ypos
  //SEG480 [215] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta current_piece_char
  //SEG481 play_spawn_current::@return
  //SEG482 [216] return 
    rts
  //SEG483 [217] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  //SEG484 play_spawn_current::@2
  b2:
  //SEG485 [218] call sid_rnd 
    jsr sid_rnd
  //SEG486 [219] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
    // (byte) sid_rnd::return#2 = (byte) sid_rnd::return#0  // register copy reg byte a
  //SEG487 play_spawn_current::@7
  //SEG488 [220] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2
    // (byte~) play_spawn_current::$1 = (byte) sid_rnd::return#2  // register copy reg byte a
  //SEG489 [221] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuxx=vbuaa_band_vbuc1 
    and #7
    tax
  //SEG490 [209] phi from play_spawn_current::@7 to play_spawn_current::@1 [phi:play_spawn_current::@7->play_spawn_current::@1]
  //SEG491 [209] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@7->play_spawn_current::@1#0] -- register_copy 
    jmp b1
}
//SEG492 sid_rnd
sid_rnd: {
  //SEG493 [222] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
  //SEG494 sid_rnd::@return
  //SEG495 [223] return 
    rts
}
//SEG496 play_remove_lines
play_remove_lines: {
    .label c = 9
    .label x = 5
    .label y = 4
    .label full = 6
  //SEG497 [225] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  //SEG498 [225] phi (byte) play_remove_lines::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG499 [225] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG500 [225] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  //SEG501 [225] phi from play_remove_lines::@4 to play_remove_lines::@1 [phi:play_remove_lines::@4->play_remove_lines::@1]
  //SEG502 [225] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@4->play_remove_lines::@1#0] -- register_copy 
  //SEG503 [225] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4->play_remove_lines::@1#1] -- register_copy 
  //SEG504 [225] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@4->play_remove_lines::@1#2] -- register_copy 
  //SEG505 play_remove_lines::@1
  b1:
  //SEG506 [226] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  //SEG507 [226] phi (byte) play_remove_lines::full#4 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta full
  //SEG508 [226] phi (byte) play_remove_lines::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG509 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
  //SEG510 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
  //SEG511 [226] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  //SEG512 [226] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
  //SEG513 [226] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
  //SEG514 [226] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
  //SEG515 [226] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
  //SEG516 play_remove_lines::@2
  b2:
  //SEG517 [227] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta c
  //SEG518 [228] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
  //SEG519 [229] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@17 -- vbuz1_neq_0_then_la1 
    cmp #0
    bne b3
  //SEG520 [230] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  //SEG521 [230] phi (byte) play_remove_lines::full#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta full
  //SEG522 play_remove_lines::@3
  b3:
  //SEG523 [231] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda c
    sta playfield,x
  //SEG524 [232] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
  //SEG525 [233] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG526 [234] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #PLAYFIELD_COLS-1+1
    bne b2
  //SEG527 play_remove_lines::@9
  //SEG528 [235] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda full
    cmp #1
    bne b4
  //SEG529 play_remove_lines::@10
  //SEG530 [236] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #PLAYFIELD_COLS
    tax
  //SEG531 [237] phi from play_remove_lines::@10 play_remove_lines::@9 to play_remove_lines::@4 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4]
  //SEG532 [237] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#2 [phi:play_remove_lines::@10/play_remove_lines::@9->play_remove_lines::@4#0] -- register_copy 
  //SEG533 play_remove_lines::@4
  b4:
  //SEG534 [238] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG535 [239] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #PLAYFIELD_LINES-1+1
    bne b1
  //SEG536 [240] phi from play_remove_lines::@4 play_remove_lines::@6 to play_remove_lines::@5 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5]
  //SEG537 [240] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@4/play_remove_lines::@6->play_remove_lines::@5#0] -- register_copy 
  //SEG538 play_remove_lines::@5
  b5:
  //SEG539 [241] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b6
  //SEG540 play_remove_lines::@return
  //SEG541 [242] return 
    rts
  //SEG542 play_remove_lines::@6
  b6:
  //SEG543 [243] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
  //SEG544 [244] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b5
  //SEG545 [245] phi from play_remove_lines::@2 to play_remove_lines::@17 [phi:play_remove_lines::@2->play_remove_lines::@17]
  //SEG546 play_remove_lines::@17
  //SEG547 [230] phi from play_remove_lines::@17 to play_remove_lines::@3 [phi:play_remove_lines::@17->play_remove_lines::@3]
  //SEG548 [230] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@17->play_remove_lines::@3#0] -- register_copy 
}
//SEG549 play_lock_current
play_lock_current: {
    .label ypos2 = $e
    .label playfield_line = 7
    .label col = 6
    .label i = 9
    .label l = 4
    .label i_2 = 5
    .label i_3 = 5
    .label i_7 = 5
    .label i_9 = 5
  //SEG550 [246] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl ypos2
  //SEG551 [247] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  //SEG552 [247] phi (byte) play_lock_current::l#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG553 [247] phi (byte) play_lock_current::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    sta i_3
  //SEG554 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
  //SEG555 play_lock_current::@1
  b1:
  //SEG556 [248] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy ypos2
    lda playfield_lines,y
    sta playfield_line
    lda playfield_lines+1,y
    sta playfield_line+1
  //SEG557 [249] (byte) play_lock_current::col#0 ← (byte) current_xpos#10 -- vbuz1=vbuz2 
    lda current_xpos
    sta col
  //SEG558 [250] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  //SEG559 [250] phi (byte) play_lock_current::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG560 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
  //SEG561 [250] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
  //SEG562 play_lock_current::@2
  b2:
  //SEG563 [251] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy i_2
    iny
    sty i
  //SEG564 [252] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
  //SEG565 play_lock_current::@4
  //SEG566 [253] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda current_piece_char
    ldy col
    sta (playfield_line),y
  //SEG567 play_lock_current::@3
  b3:
  //SEG568 [254] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG569 [255] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG570 [256] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b8
  //SEG571 play_lock_current::@5
  //SEG572 [257] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz1_plus_2 
    lda ypos2
    clc
    adc #2
    sta ypos2
  //SEG573 [258] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG574 [259] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #4
    bne b7
  //SEG575 play_lock_current::@return
  //SEG576 [260] return 
    rts
  //SEG577 play_lock_current::@7
  b7:
  //SEG578 [261] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_7
  //SEG579 [247] phi from play_lock_current::@7 to play_lock_current::@1 [phi:play_lock_current::@7->play_lock_current::@1]
  //SEG580 [247] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@7->play_lock_current::@1#0] -- register_copy 
  //SEG581 [247] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@7->play_lock_current::@1#1] -- register_copy 
  //SEG582 [247] phi (byte) play_lock_current::ypos2#2 = (byte) play_lock_current::ypos2#1 [phi:play_lock_current::@7->play_lock_current::@1#2] -- register_copy 
    jmp b1
  //SEG583 play_lock_current::@8
  b8:
  //SEG584 [262] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda i
    sta i_9
  //SEG585 [250] phi from play_lock_current::@8 to play_lock_current::@2 [phi:play_lock_current::@8->play_lock_current::@2]
  //SEG586 [250] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@8->play_lock_current::@2#0] -- register_copy 
  //SEG587 [250] phi (byte) play_lock_current::col#2 = (byte) play_lock_current::col#1 [phi:play_lock_current::@8->play_lock_current::@2#1] -- register_copy 
  //SEG588 [250] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@8->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
//SEG589 keyboard_event_pressed
keyboard_event_pressed: {
    .label row_bits = 6
    .label keycode = 5
  //SEG590 [264] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuz1_ror_3 
    lda keycode
    lsr
    lsr
    lsr
  //SEG591 [265] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta row_bits
  //SEG592 [266] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and keycode
  //SEG593 [267] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and row_bits
  //SEG594 keyboard_event_pressed::@return
  //SEG595 [268] return 
    rts
}
//SEG596 keyboard_event_get
keyboard_event_get: {
  //SEG597 [269] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda keyboard_events_size
    cmp #0
    beq b1
  //SEG598 keyboard_event_get::@3
  //SEG599 [270] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec keyboard_events_size
  //SEG600 [271] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy keyboard_events_size
    lda keyboard_events,y
  //SEG601 [272] phi from keyboard_event_get::@3 to keyboard_event_get::@return [phi:keyboard_event_get::@3->keyboard_event_get::@return]
  //SEG602 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@3->keyboard_event_get::@return#0] -- register_copy 
  //SEG603 [272] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@3->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
  //SEG604 [272] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  b1:
  //SEG605 [272] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
  //SEG606 [272] phi (byte) keyboard_event_get::return#2 = (byte/word/signed word/dword/signed dword) 255 [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
  //SEG607 keyboard_event_get::@return
  breturn:
  //SEG608 [273] return 
    rts
}
//SEG609 keyboard_event_scan
keyboard_event_scan: {
    .label row_scan = 9
    .label keycode = 6
    .label row = 5
  //SEG610 [275] phi from keyboard_event_scan to keyboard_event_scan::@1 [phi:keyboard_event_scan->keyboard_event_scan::@1]
  //SEG611 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@1#0] -- register_copy 
  //SEG612 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta keycode
  //SEG613 [275] phi (byte) keyboard_event_scan::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan->keyboard_event_scan::@1#2] -- vbuz1=vbuc1 
    sta row
  //SEG614 [275] phi from keyboard_event_scan::@3 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1]
  //SEG615 [275] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#0] -- register_copy 
  //SEG616 [275] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#1] -- register_copy 
  //SEG617 [275] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@3->keyboard_event_scan::@1#2] -- register_copy 
  //SEG618 keyboard_event_scan::@1
  b1:
  //SEG619 [276] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx row
  //SEG620 [277] call keyboard_matrix_read 
    jsr keyboard_matrix_read
  //SEG621 [278] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#0  // register copy reg byte a
  //SEG622 keyboard_event_scan::@25
  //SEG623 [279] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta row_scan
  //SEG624 [280] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy row
    cmp keyboard_scan_values,y
    bne b6
  //SEG625 keyboard_event_scan::@13
  //SEG626 [281] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lda #8
    clc
    adc keycode
    sta keycode
  //SEG627 [282] phi from keyboard_event_scan::@13 keyboard_event_scan::@19 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3]
  //SEG628 [282] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#0] -- register_copy 
  //SEG629 [282] phi (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#1 [phi:keyboard_event_scan::@13/keyboard_event_scan::@19->keyboard_event_scan::@3#1] -- register_copy 
  //SEG630 keyboard_event_scan::@3
  b3:
  //SEG631 [283] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG632 [284] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda row
    cmp #8
    bne b1
  //SEG633 [285] phi from keyboard_event_scan::@3 to keyboard_event_scan::@20 [phi:keyboard_event_scan::@3->keyboard_event_scan::@20]
  //SEG634 keyboard_event_scan::@20
  //SEG635 [286] call keyboard_event_pressed 
  //SEG636 [263] phi from keyboard_event_scan::@20 to keyboard_event_pressed [phi:keyboard_event_scan::@20->keyboard_event_pressed]
  //SEG637 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@20->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG638 [287] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG639 keyboard_event_scan::@26
  //SEG640 [288] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
    // (byte~) keyboard_event_scan::$14 = (byte) keyboard_event_pressed::return#0  // register copy reg byte a
  //SEG641 [289] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG642 [290] phi from keyboard_event_scan::@26 to keyboard_event_scan::@21 [phi:keyboard_event_scan::@26->keyboard_event_scan::@21]
  //SEG643 keyboard_event_scan::@21
  //SEG644 [291] phi from keyboard_event_scan::@21 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9]
  //SEG645 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 [phi:keyboard_event_scan::@21->keyboard_event_scan::@9#0] -- vbuxx=vbuc1 
    ldx #0|KEY_MODIFIER_LSHIFT
    jmp b9
  //SEG646 [291] phi from keyboard_event_scan::@26 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9]
  b2:
  //SEG647 [291] phi (byte) keyboard_modifiers#11 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@26->keyboard_event_scan::@9#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG648 keyboard_event_scan::@9
  b9:
  //SEG649 [292] call keyboard_event_pressed 
  //SEG650 [263] phi from keyboard_event_scan::@9 to keyboard_event_pressed [phi:keyboard_event_scan::@9->keyboard_event_pressed]
  //SEG651 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@9->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG652 [293] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG653 keyboard_event_scan::@27
  //SEG654 [294] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
    // (byte~) keyboard_event_scan::$18 = (byte) keyboard_event_pressed::return#1  // register copy reg byte a
  //SEG655 [295] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
  //SEG656 keyboard_event_scan::@22
  //SEG657 [296] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
  //SEG658 [297] phi from keyboard_event_scan::@22 keyboard_event_scan::@27 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10]
  //SEG659 [297] phi (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@27->keyboard_event_scan::@10#0] -- register_copy 
  //SEG660 keyboard_event_scan::@10
  b10:
  //SEG661 [298] call keyboard_event_pressed 
  //SEG662 [263] phi from keyboard_event_scan::@10 to keyboard_event_pressed [phi:keyboard_event_scan::@10->keyboard_event_pressed]
  //SEG663 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@10->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG664 [299] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG665 keyboard_event_scan::@28
  //SEG666 [300] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
    // (byte~) keyboard_event_scan::$22 = (byte) keyboard_event_pressed::return#2  // register copy reg byte a
  //SEG667 [301] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
  //SEG668 keyboard_event_scan::@23
  //SEG669 [302] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0 -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
  //SEG670 [303] phi from keyboard_event_scan::@23 keyboard_event_scan::@28 to keyboard_event_scan::@11 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11]
  //SEG671 [303] phi (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#4 [phi:keyboard_event_scan::@23/keyboard_event_scan::@28->keyboard_event_scan::@11#0] -- register_copy 
  //SEG672 keyboard_event_scan::@11
  b11:
  //SEG673 [304] call keyboard_event_pressed 
  //SEG674 [263] phi from keyboard_event_scan::@11 to keyboard_event_pressed [phi:keyboard_event_scan::@11->keyboard_event_pressed]
  //SEG675 [263] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@11->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
  //SEG676 [305] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#11  // register copy reg byte a
  //SEG677 keyboard_event_scan::@29
  //SEG678 [306] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
    // (byte~) keyboard_event_scan::$26 = (byte) keyboard_event_pressed::return#10  // register copy reg byte a
  //SEG679 [307] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn
  //SEG680 keyboard_event_scan::@24
  //SEG681 [308] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0 -- vbuaa=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
  //SEG682 keyboard_event_scan::@return
  breturn:
  //SEG683 [309] return 
    rts
  //SEG684 [310] phi from keyboard_event_scan::@25 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4]
  b6:
  //SEG685 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#0] -- register_copy 
  //SEG686 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#1] -- register_copy 
  //SEG687 [310] phi (byte) keyboard_event_scan::col#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:keyboard_event_scan::@25->keyboard_event_scan::@4#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG688 [310] phi from keyboard_event_scan::@5 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4]
  //SEG689 [310] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#0] -- register_copy 
  //SEG690 [310] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#15 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#1] -- register_copy 
  //SEG691 [310] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@5->keyboard_event_scan::@4#2] -- register_copy 
  //SEG692 keyboard_event_scan::@4
  b4:
  //SEG693 [311] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda row_scan
    ldy row
    eor keyboard_scan_values,y
  //SEG694 [312] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
  //SEG695 [313] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG696 keyboard_event_scan::@15
  //SEG697 [314] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda keyboard_events_size
    cmp #8
    beq b5
  //SEG698 keyboard_event_scan::@16
  //SEG699 [315] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and row_scan
  //SEG700 [316] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b7
  //SEG701 keyboard_event_scan::@17
  //SEG702 [317] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda keycode
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG703 [318] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
  //SEG704 [319] phi from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5]
  //SEG705 [319] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#10 [phi:keyboard_event_scan::@15/keyboard_event_scan::@17/keyboard_event_scan::@4/keyboard_event_scan::@7->keyboard_event_scan::@5#0] -- register_copy 
  //SEG706 keyboard_event_scan::@5
  b5:
  //SEG707 [320] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc keycode
  //SEG708 [321] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG709 [322] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b4
  //SEG710 keyboard_event_scan::@19
  //SEG711 [323] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row_scan
    ldy row
    sta keyboard_scan_values,y
    jmp b3
  //SEG712 keyboard_event_scan::@7
  b7:
  //SEG713 [324] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora keycode
  //SEG714 [325] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy keyboard_events_size
    sta keyboard_events,y
  //SEG715 [326] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc keyboard_events_size
    jmp b5
}
//SEG716 keyboard_matrix_read
keyboard_matrix_read: {
  //SEG717 [327] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
  //SEG718 [328] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
  //SEG719 keyboard_matrix_read::@return
  //SEG720 [329] return 
    rts
}
//SEG721 render_show
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)<<2)|(>PLAYFIELD_CHARSET)>>2&$f
  //SEG722 [330] if((byte) render_screen_show#16==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda render_screen_show
    cmp #0
    beq toD0181
  //SEG723 [331] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  //SEG724 render_show::toD0182
  //SEG725 [332] phi from render_show::toD0182 to render_show::@2 [phi:render_show::toD0182->render_show::@2]
  //SEG726 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@2#0] -- vbuaa=vbuc1 
    lda #toD0182_return
  //SEG727 render_show::@2
  b2:
  //SEG728 [333] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
  //SEG729 [334] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda render_screen_show
    sta render_screen_showing
  //SEG730 render_show::@return
  //SEG731 [335] return 
    rts
  //SEG732 [336] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  //SEG733 render_show::toD0181
  toD0181:
  //SEG734 [332] phi from render_show::toD0181 to render_show::@2 [phi:render_show::toD0181->render_show::@2]
  //SEG735 [332] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@2#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp b2
}
//SEG736 play_init
play_init: {
    .label pli = 7
    .label idx = 2
  //SEG737 [338] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  //SEG738 [338] phi (byte) play_init::idx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta idx
  //SEG739 [338] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta pli
    lda #>playfield
    sta pli+1
  //SEG740 [338] phi (byte) play_init::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:play_init->play_init::@1#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG741 [338] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  //SEG742 [338] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
  //SEG743 [338] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
  //SEG744 [338] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
  //SEG745 play_init::@1
  b1:
  //SEG746 [339] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG747 [340] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda pli
    sta playfield_lines,y
    lda pli+1
    sta playfield_lines+1,y
  //SEG748 [341] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda idx
    sta playfield_lines_idx,x
  //SEG749 [342] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda pli
    clc
    adc #PLAYFIELD_COLS
    sta pli
    bcc !+
    inc pli+1
  !:
  //SEG750 [343] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc idx
    sta idx
  //SEG751 [344] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG752 [345] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b1
  //SEG753 play_init::@2
  //SEG754 [346] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
  //SEG755 play_init::@return
  //SEG756 [347] return 
    rts
}
//SEG757 sprites_irq_init
sprites_irq_init: {
  //SEG758 asm { sei  }
    sei
  //SEG759 [349] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG760 asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
  //SEG761 [351] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG762 [352] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG763 [353] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG764 [354] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda VIC_CONTROL
    and #$7f
    sta VIC_CONTROL
  //SEG765 [355] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
  //SEG766 [356] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG767 [357] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
  //SEG768 asm { cli  }
    cli
  //SEG769 sprites_irq_init::@return
  //SEG770 [359] return 
    rts
}
//SEG771 sprites_init
sprites_init: {
    .label xpos = 2
  //SEG772 [360] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15 -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
  //SEG773 [361] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG774 [362] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_Y
  //SEG775 [363] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_X
  //SEG776 [364] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  //SEG777 [364] phi (byte) sprites_init::xpos#2 = (byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta xpos
  //SEG778 [364] phi (byte) sprites_init::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG779 [364] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  //SEG780 [364] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
  //SEG781 [364] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
  //SEG782 sprites_init::@1
  b1:
  //SEG783 [365] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG784 [366] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda xpos
    sta SPRITES_XPOS,y
  //SEG785 [367] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,x
  //SEG786 [368] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$18
    clc
    adc xpos
    sta xpos
  //SEG787 [369] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG788 [370] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b1
  //SEG789 sprites_init::@return
  //SEG790 [371] return 
    rts
}
//SEG791 render_init
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>PLAYFIELD_CHARSET)>>6
    .label _12 = $f
    .label line = 7
    .label l = 2
    .label li_1 = 7
    .label li_2 = $f
  //SEG792 render_init::vicSelectGfxBank1
  //SEG793 [373] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG794 [374] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  //SEG795 render_init::vicSelectGfxBank1_toDd001
  //SEG796 render_init::vicSelectGfxBank1_@1
  //SEG797 [375] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
  //SEG798 render_init::@7
  //SEG799 [376] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG800 [377] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG801 [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL1
  //SEG802 [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL2
  //SEG803 [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0 -- _deref_pbuc1=vbuc2 
    lda #CYAN
    sta BGCOL3
  //SEG804 [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
  //SEG805 [382] call render_screen_original 
  //SEG806 [412] phi from render_init::@7 to render_screen_original [phi:render_init::@7->render_screen_original]
  //SEG807 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@7->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG808 [383] phi from render_init::@7 to render_init::@8 [phi:render_init::@7->render_init::@8]
  //SEG809 render_init::@8
  //SEG810 [384] call render_screen_original 
  //SEG811 [412] phi from render_init::@8 to render_screen_original [phi:render_init::@8->render_screen_original]
  //SEG812 [412] phi (byte*) render_screen_original::screen#11 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@8->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta render_screen_original.screen+1
    jsr render_screen_original
  //SEG813 [385] phi from render_init::@8 to render_init::@9 [phi:render_init::@8->render_init::@9]
  //SEG814 render_init::@9
  //SEG815 [386] call fill 
  //SEG816 [406] phi from render_init::@9 to fill [phi:render_init::@9->fill]
    jsr fill
  //SEG817 [387] phi from render_init::@9 to render_init::@1 [phi:render_init::@9->render_init::@1]
  //SEG818 [387] phi (byte) render_init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_init::@9->render_init::@1#0] -- vbuz1=vbuc1 
    lda #2
    sta l
  //SEG819 [387] phi (byte*) render_init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@9->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+4*$28+$10
    sta line
    lda #>COLS+4*$28+$10
    sta line+1
  //SEG820 [387] phi from render_init::@4 to render_init::@1 [phi:render_init::@4->render_init::@1]
  //SEG821 [387] phi (byte) render_init::l#4 = (byte) render_init::l#1 [phi:render_init::@4->render_init::@1#0] -- register_copy 
  //SEG822 [387] phi (byte*) render_init::line#4 = (byte*) render_init::line#1 [phi:render_init::@4->render_init::@1#1] -- register_copy 
  //SEG823 render_init::@1
  b1:
  //SEG824 [388] phi from render_init::@1 to render_init::@2 [phi:render_init::@1->render_init::@2]
  //SEG825 [388] phi (byte) render_init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@1->render_init::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG826 [388] phi from render_init::@2 to render_init::@2 [phi:render_init::@2->render_init::@2]
  //SEG827 [388] phi (byte) render_init::c#2 = (byte) render_init::c#1 [phi:render_init::@2->render_init::@2#0] -- register_copy 
  //SEG828 render_init::@2
  b2:
  //SEG829 [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _12
    lda #0
    adc line+1
    sta _12+1
  //SEG830 [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0 -- _deref_pbuz1=vbuc1 
    lda #WHITE
    ldy #0
    sta (_12),y
  //SEG831 [391] (byte) render_init::c#1 ← ++ (byte) render_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG832 [392] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_COLS-1+1
    bne b2
  //SEG833 render_init::@4
  //SEG834 [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG835 [394] (byte) render_init::l#1 ← ++ (byte) render_init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG836 [395] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #PLAYFIELD_LINES-1+1
    bne b1
  //SEG837 [396] phi from render_init::@4 to render_init::@3 [phi:render_init::@4->render_init::@3]
  //SEG838 [396] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta li_2+1
  //SEG839 [396] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 [phi:render_init::@4->render_init::@3#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta li_1+1
  //SEG840 [396] phi (byte) render_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_init::@4->render_init::@3#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG841 [396] phi from render_init::@3 to render_init::@3 [phi:render_init::@3->render_init::@3]
  //SEG842 [396] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@3->render_init::@3#0] -- register_copy 
  //SEG843 [396] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@3->render_init::@3#1] -- register_copy 
  //SEG844 [396] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@3->render_init::@3#2] -- register_copy 
  //SEG845 render_init::@3
  b3:
  //SEG846 [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG847 [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li_1
    sta screen_lines_1,y
    lda li_1+1
    sta screen_lines_1+1,y
  //SEG848 [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG849 [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li_2
    sta screen_lines_2,y
    lda li_2+1
    sta screen_lines_2+1,y
  //SEG850 [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_1
    clc
    adc #$28
    sta li_1
    bcc !+
    inc li_1+1
  !:
  //SEG851 [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li_2
    clc
    adc #$28
    sta li_2
    bcc !+
    inc li_2+1
  !:
  //SEG852 [403] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG853 [404] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLAYFIELD_LINES-1+1
    bne b3
  //SEG854 render_init::@return
  //SEG855 [405] return 
    rts
}
//SEG856 fill
fill: {
    .const size = $3e8
    .label end = COLS+size
    .label addr = 7
  //SEG857 [407] phi from fill to fill::@1 [phi:fill->fill::@1]
  //SEG858 [407] phi (byte*) fill::addr#2 = (const byte*) COLS#0 [phi:fill->fill::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta addr
    lda #>COLS
    sta addr+1
  //SEG859 [407] phi from fill::@1 to fill::@1 [phi:fill::@1->fill::@1]
  //SEG860 [407] phi (byte*) fill::addr#2 = (byte*) fill::addr#1 [phi:fill::@1->fill::@1#0] -- register_copy 
  //SEG861 fill::@1
  b1:
  //SEG862 [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (addr),y
  //SEG863 [409] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG864 [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda addr+1
    cmp #>end
    bne b1
    lda addr
    cmp #<end
    bne b1
  //SEG865 fill::@return
  //SEG866 [411] return 
    rts
}
//SEG867 render_screen_original
render_screen_original: {
    .const SPACE = 0
    .label screen = $f
    .label orig = 7
    .label y = 2
  //SEG868 [413] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  //SEG869 [413] phi (byte) render_screen_original::y#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG870 [413] phi (byte*) render_screen_original::orig#5 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta orig+1
  //SEG871 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#11 [phi:render_screen_original->render_screen_original::@1#2] -- register_copy 
  //SEG872 [413] phi from render_screen_original::@9 to render_screen_original::@1 [phi:render_screen_original::@9->render_screen_original::@1]
  //SEG873 [413] phi (byte) render_screen_original::y#8 = (byte) render_screen_original::y#1 [phi:render_screen_original::@9->render_screen_original::@1#0] -- register_copy 
  //SEG874 [413] phi (byte*) render_screen_original::orig#5 = (byte*) render_screen_original::orig#1 [phi:render_screen_original::@9->render_screen_original::@1#1] -- register_copy 
  //SEG875 [413] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#12 [phi:render_screen_original::@9->render_screen_original::@1#2] -- register_copy 
  //SEG876 render_screen_original::@1
  b1:
  //SEG877 [414] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  //SEG878 [414] phi (byte) render_screen_original::x#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG879 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
  //SEG880 [414] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  //SEG881 [414] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
  //SEG882 [414] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
  //SEG883 render_screen_original::@2
  b2:
  //SEG884 [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG885 [416] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG886 [417] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
  //SEG887 [418] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2
  //SEG888 [419] phi from render_screen_original::@2 render_screen_original::@4 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3]
  //SEG889 [419] phi (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#0] -- register_copy 
  //SEG890 [419] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#1] -- register_copy 
  //SEG891 [419] phi (byte*) render_screen_original::orig#2 = (byte*) render_screen_original::orig#5 [phi:render_screen_original::@2/render_screen_original::@4->render_screen_original::@3#2] -- register_copy 
  //SEG892 render_screen_original::@3
  b3:
  //SEG893 [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuyy=_deref_pbuz1_plus_1 
    ldy #0
    lda (orig),y
    tay
    iny
  //SEG894 [421] (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2 -- pbuz1=_inc_pbuz1 
    inc orig
    bne !+
    inc orig+1
  !:
  //SEG895 [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11 -- vbuxx_gt_vbuc1_then_la1 
    txa
    cmp #$e
    beq !+
    bcs b11
  !:
  //SEG896 [423] phi from render_screen_original::@3 render_screen_original::@7 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4]
  //SEG897 [423] phi (byte) render_screen_original::c#2 = (byte) render_screen_original::c#0 [phi:render_screen_original::@3/render_screen_original::@7->render_screen_original::@4#0] -- register_copy 
  //SEG898 render_screen_original::@4
  b4:
  //SEG899 [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (screen),y
  //SEG900 [425] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#10 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG901 [426] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
  //SEG902 [427] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne b3
  //SEG903 [428] phi from render_screen_original::@4 render_screen_original::@5 to render_screen_original::@5 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5]
  //SEG904 [428] phi (byte) render_screen_original::x#7 = (byte) render_screen_original::x#2 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#0] -- register_copy 
  //SEG905 [428] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@4/render_screen_original::@5->render_screen_original::@5#1] -- register_copy 
  //SEG906 render_screen_original::@5
  b5:
  //SEG907 [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
  //SEG908 [430] (byte*) render_screen_original::screen#12 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc screen
    bne !+
    inc screen+1
  !:
  //SEG909 [431] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7 -- vbuxx=_inc_vbuxx 
    inx
  //SEG910 [432] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b5
  //SEG911 render_screen_original::@9
  //SEG912 [433] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#8 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG913 [434] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG914 render_screen_original::@return
  //SEG915 [435] return 
    rts
  //SEG916 render_screen_original::@11
  b11:
  //SEG917 [436] if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$1b
    bcc b7
  //SEG918 [423] phi from render_screen_original::@11 to render_screen_original::@4 [phi:render_screen_original::@11->render_screen_original::@4]
    jmp b4
  //SEG919 render_screen_original::@7
  b7:
  //SEG920 [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #$c0
    tay
    jmp b4
}
//SEG921 sid_rnd_init
sid_rnd_init: {
  //SEG922 [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535 -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
  //SEG923 [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
  //SEG924 sid_rnd_init::@return
  //SEG925 [440] return 
    rts
}
//SEG926 sprites_irq
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES>>6
  //SEG927 entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
  //SEG928 [441] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuaa=vbuz1 
    lda irq_sprite_ypos
  //SEG929 [442] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
  //SEG930 [443] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
  //SEG931 [444] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
  //SEG932 [445] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
  //SEG933 sprites_irq::@1
  b1:
  //SEG934 [446] if(*((const byte*) RASTER#0)<(byte) irq_sprite_ypos#0) goto sprites_irq::@1 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp irq_sprite_ypos
    bcc b1
  //SEG935 sprites_irq::@7
  //SEG936 [447] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuxx=vbuz1 
    ldx irq_sprite_ptr
  //SEG937 [448] if((byte) render_screen_showing#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sprites_irq::@2 -- vbuz1_eq_0_then_la1 
    lda render_screen_showing
    cmp #0
    beq b2
  //SEG938 sprites_irq::@8
  //SEG939 [449] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
  //SEG940 [450] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
  //SEG941 [451] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+1
  //SEG942 [452] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+2
  //SEG943 [453] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuxx=_inc_vbuxx 
    inx
  //SEG944 [454] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2+3
  //SEG945 sprites_irq::@3
  b3:
  //SEG946 [455] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz1 
    inc irq_cnt
  //SEG947 [456] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda irq_cnt
    cmp #$a
    beq b4
  //SEG948 sprites_irq::@10
  //SEG949 [457] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_raster_next
    sta irq_raster_next
  //SEG950 [458] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21 -- vbuz1=vbuz1_plus_vbuc1 
    lda #$15
    clc
    adc irq_sprite_ypos
    sta irq_sprite_ypos
  //SEG951 [459] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lda #3
    clc
    adc irq_sprite_ptr
    sta irq_sprite_ptr
  //SEG952 [460] phi from sprites_irq::@10 sprites_irq::@13 to sprites_irq::@5 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5]
  //SEG953 [460] phi (byte) irq_raster_next#13 = (byte) irq_raster_next#2 [phi:sprites_irq::@10/sprites_irq::@13->sprites_irq::@5#0] -- register_copy 
  //SEG954 sprites_irq::@5
  b5:
  //SEG955 [461] (byte) sprites_irq::raster_next#0 ← (byte) irq_raster_next#13 -- vbuxx=vbuz1 
    ldx irq_raster_next
  //SEG956 [462] (byte~) sprites_irq::$4 ← (byte) sprites_irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG957 [463] if((byte~) sprites_irq::$4!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto sprites_irq::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
    bne b6
  //SEG958 sprites_irq::@12
  //SEG959 [464] (byte) sprites_irq::raster_next#1 ← (byte) sprites_irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuxx_minus_1 
    dex
  //SEG960 [465] phi from sprites_irq::@12 sprites_irq::@5 to sprites_irq::@6 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6]
  //SEG961 [465] phi (byte) sprites_irq::raster_next#2 = (byte) sprites_irq::raster_next#1 [phi:sprites_irq::@12/sprites_irq::@5->sprites_irq::@6#0] -- register_copy 
  //SEG962 sprites_irq::@6
  b6:
  //SEG963 [466] *((const byte*) RASTER#0) ← (byte) sprites_irq::raster_next#2 -- _deref_pbuc1=vbuxx 
    stx RASTER
  //SEG964 [467] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG965 sprites_irq::@return
  //SEG966 [468] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
  //SEG967 sprites_irq::@4
  b4:
  //SEG968 [469] (byte) irq_cnt#14 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
    lda #0
    sta irq_cnt
  //SEG969 [470] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta irq_raster_next
  //SEG970 [471] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50 -- vbuz1=vbuc1 
    lda #$32
    sta irq_sprite_ypos
  //SEG971 [472] phi from sprites_irq::@4 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@4->sprites_irq::toSpritePtr2]
  //SEG972 sprites_irq::toSpritePtr2
  //SEG973 sprites_irq::@13
  //SEG974 [473] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta irq_sprite_ptr
    jmp b5
  //SEG975 sprites_irq::@2
  b2:
  //SEG976 [474] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
  //SEG977 [475] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    txa
    clc
    adc #1
  //SEG978 [476] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+1
  //SEG979 [477] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+2
  //SEG980 [478] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
  //SEG981 [479] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b3
}
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  keyboard_events: .fill 8, 0
  keyboard_scan_values: .fill 8, 0
  .align $40
  PIECE_T: .byte 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_O: .byte 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  PIECES_CHARS: .byte $58, $59, $99, $59, $58, $58, $99
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 3, 4
  PIECES_START_Y: .byte 2, 1, 1, 1, 2, 0, 1
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  .import binary "nes-screen.iscr"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}


