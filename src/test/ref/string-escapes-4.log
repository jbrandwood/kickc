Setting inferred volatile on symbol affected by address-of: chrout::petscii in kickasm( uses chrout::petscii) {{ jsr $ffd2
     }}
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *((byte*)$d018) = $17
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::i#2 = phi( main/main::i#0, main::@4/main::i#1 )
  main::$1 = 0 != MSG1[main::i#2]
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  chrout::petscii = MSG1[main::i#3]
  call chrout 
  to:main::@4
main::@4: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#3 )
  SCREEN1[main::i#4] = MSG2[main::i#4]
  main::i#1 = ++ main::i#4
  to:main::@1
main::@3: scope:[main]  from main::@1
  SCREEN2[0] = CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void chrout(volatile byte chrout::petscii)
chrout: scope:[chrout]  from main::@2
  kickasm( uses chrout::petscii) {{ jsr $ffd2
     }}
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte CH = ''su
const byte* MSG1[]  = "cAmElot"pm
const byte* MSG2[]  = "CAMELOT"su
const byte* SCREEN1 = (byte*)$400
const byte* SCREEN2 = (byte*)$428
void __start()
void chrout(volatile byte chrout::petscii)
volatile byte chrout::petscii loadstore !reg byte a
void main()
bool~ main::$1
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4

Adding number conversion cast (unumber) $17 in *((byte*)$d018) = $17
Adding number conversion cast (unumber) 0 in main::$1 = 0 != MSG1[main::i#2]
Adding number conversion cast (unumber) 0 in SCREEN2[0] = CH
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)$d018) = (unumber)$17
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1064
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [4] if(0!=MSG1[main::i#2]) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN2 in [9] SCREEN2[0] = CH
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH
Calls in [main] to chrout:6 

Created 1 initial phi equivalence classes
Coalesced [9] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((byte*) 53272) = $17
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] main::i#2 = phi( main/0, main::@4/main::i#1 )
  [2] if(0!=MSG1[main::i#2]) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *SCREEN2 = CH
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] chrout::petscii = MSG1[main::i#2]
  [6] call chrout 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] SCREEN1[main::i#2] = MSG2[main::i#2]
  [8] main::i#1 = ++ main::i#2
  to:main::@1

void chrout(volatile byte chrout::petscii)
chrout: scope:[chrout]  from main::@2
  kickasm( uses chrout::petscii) {{ jsr $ffd2
     }}
  to:chrout::@return
chrout::@return: scope:[chrout]  from chrout
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void chrout(volatile byte chrout::petscii)
volatile byte chrout::petscii loadstore !reg byte a 11.0
void main()
byte main::i
byte main::i#1 22.0
byte main::i#2 13.2

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable chrout::petscii to live range equivalence class [ chrout::petscii ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ chrout::petscii ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*) 53272) = $17 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if(0!=MSG1[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *SCREEN2 = CH [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] chrout::petscii = MSG1[main::i#2] [ main::i#2 chrout::petscii ] (  [ main::i#2 chrout::petscii ] { }  ) always clobbers reg byte a 
Statement [7] SCREEN1[main::i#2] = MSG2[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [0] *((byte*) 53272) = $17 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if(0!=MSG1[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *SCREEN2 = CH [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] chrout::petscii = MSG1[main::i#2] [ main::i#2 chrout::petscii ] (  [ main::i#2 chrout::petscii ] { }  ) always clobbers reg byte a 
Statement [7] SCREEN1[main::i#2] = MSG2[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers reg byte a [ chrout::petscii ] : reg byte a , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 35.2: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [chrout] 11: reg byte a [ chrout::petscii ] 
Uplift Scope [] 

Uplifting [main] best 736 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [chrout] best 736 combination reg byte a [ chrout::petscii ] 
Uplifting [] best 736 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = '\$de'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
.segment Code
  // main
main: {
    // [0] *((byte*) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(0!=MSG1[main::i#2]) goto main::@2 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *SCREEN2 = CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] chrout::petscii = MSG1[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda MSG1,x
    // [6] call chrout 
    jsr chrout
    jmp __b4
    // main::@4
  __b4:
    // [7] SCREEN1[main::i#2] = MSG2[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN1,x
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// chrout(byte register(A) petscii)
chrout: {
    // kickasm( uses chrout::petscii) {{ jsr $ffd2      }}
    jsr $ffd2
    
    jmp __breturn
    // chrout::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data
.segment Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte CH = ''su
const byte* MSG1[]  = "cAmElot"pm
const byte* MSG2[]  = "CAMELOT"su
const byte* SCREEN1 = (byte*) 1024
const byte* SCREEN2 = (byte*) 1064
void chrout(volatile byte chrout::petscii)
volatile byte chrout::petscii loadstore !reg byte a 11.0
void main()
byte main::i
byte main::i#1 reg byte x 22.0
byte main::i#2 reg byte x 13.2

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ chrout::petscii ]


FINAL ASSEMBLER
Score: 640

  // File Comments
// Test using some simple supported string escape
// Uses \xnn to add chars by hex-code
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.encoding "screencode_upper"
  .const CH = '\$de'
  .label SCREEN1 = $400
  .label SCREEN2 = $428
.segment Code
  // main
main: {
    // *((char*)0xd018) = 0x17
    // [0] *((byte*) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // while(MSG1[i])
    // [2] if(0!=MSG1[main::i#2]) goto main::@2 -- 0_neq_pbuc1_derefidx_vbuxx_then_la1 
    lda MSG1,x
    cmp #0
    bne __b2
    // main::@3
    // SCREEN2[0] = CH
    // [3] *SCREEN2 = CH -- _deref_pbuc1=vbuc2 
    lda #CH
    sta SCREEN2
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // chrout(MSG1[i])
    // [5] chrout::petscii = MSG1[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda MSG1,x
    // [6] call chrout 
    jsr chrout
    // main::@4
    // SCREEN1[i] = MSG2[i]
    // [7] SCREEN1[main::i#2] = MSG2[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG2,x
    sta SCREEN1,x
    // i++;
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // chrout
// chrout(byte register(A) petscii)
chrout: {
    // kickasm
    // kickasm( uses chrout::petscii) {{ jsr $ffd2      }}
    jsr $ffd2
    
    // chrout::@return
    // }
    // [10] return 
    rts
}
  // File Data
.segment Data
.encoding "petscii_mixed"
  MSG1: .text "cAmElot"
  .byte 0
.encoding "screencode_upper"
  MSG2: .text "CAMELOT"
  .byte 0

