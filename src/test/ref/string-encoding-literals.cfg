@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2)
  [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2)
  [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2)
  [9] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2)
  [10] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2)
  [11] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2)
  [12] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2)
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [15] return 
  to:@return
