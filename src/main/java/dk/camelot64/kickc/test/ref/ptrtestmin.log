// Test all types of pointers

void main() {

  // A constant pointer
  byte[1024] SCREEN = $0400;

  byte b;

  // RValue constant array variable index
  byte i=2;
  while(i<10) {
    b = SCREEN[i++];
  }

}

Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
PROGRAM
proc (void()) main()
  (byte[1024]) main::SCREEN ← (word/signed word) 1024
  (byte) main::i ← (byte/signed byte/word/signed word) 2
main::@1:
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  goto main::@3
main::@2:
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::i

Promoting word/signed word to byte[1024] in main::SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte[1024]) main::SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) main::i ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte[1024]) main::SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) main::i ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) main::i ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(byte[1024]) main::SCREEN#0
(byte[1024]) main::SCREEN#1
(byte[1024]) main::SCREEN#2
(byte) main::b
(byte) main::b#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte[1024]) main::SCREEN#1 = (byte[1024]) main::SCREEN#2 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte) main::b#0 = (byte~) main::$1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#1 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte[1024]) main::SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#1 ← phi( main/(byte[1024]) main::SCREEN#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte[1024]) main::SCREEN#1 (byte[1024]) main::SCREEN#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#0 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$0 if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte[1024]) main::SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#0 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte[1024]) main::SCREEN#0 = ((byte*))1024
Constant (const byte) main::i#0 = 2
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 2
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 2 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(const byte[1024]) main::SCREEN#0 = ((byte*))(word/signed word) 1024
(byte) main::b
(byte) main::b#0
(byte) main::i
(byte) main::i#1
(byte) main::i#2

Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 2 main::@2/(byte~) main::i#4 )
  if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (byte~) main::i#4 ← (byte) main::i#1
  to:main::@1

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 2 main::@2/(byte~) main::i#4 ) [ main::i#2 ]
  [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ]
  [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [10] (byte~) main::i#4 ← (byte) main::i#1 [ main::i#4 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [10] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@2 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 2 main::@2/(byte) main::i#1 ) [ main::i#2 ]
  [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ]
  [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  to:main::@1

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 2 main::@2/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return  [ ] ( main:2 [ ] )
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@1

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::b#0 110.0
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::b#0 to zero page equivalence class [ main::b#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::b#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::b#0 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const SCREEN = $400
    .label b = 3
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 2 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #2
    sta i
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #$a
    bcc b2
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG16 main::@2
  b2:
  //SEG17 [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx i
    lda SCREEN,x
    sta b
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG19 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::b#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 110: zp ZP_BYTE:3 [ main::b#0 ] 36.67: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 238 combination reg byte a [ main::b#0 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 238 combination 
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
//SEG8 @end
bend:
//SEG9 main
main: {
    .const SCREEN = $400
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 2 [phi:main->main::@1#0] -- xby=coby1 
    ldx #2
  //SEG12 main::@1
  b1:
  //SEG13 [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG14 main::@return
  breturn:
  //SEG15 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG16 main::@2
  b2:
  //SEG17 [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- aby=cowo1_derefidx_xby 
    lda SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}

Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
bend:
//SEG9 main
main: {
    .const SCREEN = $400
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 2 [phi:main->main::@1#0] -- xby=coby1 
    ldx #2
  //SEG12 main::@1
  b1:
  //SEG13 [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG14 main::@return
  breturn:
  //SEG15 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG16 main::@2
  b2:
  //SEG17 [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- aby=cowo1_derefidx_xby 
    lda SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG20 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const SCREEN = $400
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 2 [phi:main->main::@1#0] -- xby=coby1 
    ldx #2
  //SEG12 main::@1
  b1:
  //SEG13 [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG14 main::@return
  //SEG15 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG16 main::@2
  b2:
  //SEG17 [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- aby=cowo1_derefidx_xby 
    lda SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG20 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(const byte[1024]) main::SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte) main::b
(byte) main::b#0 reg byte a 110.0
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::b#0 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const SCREEN = $400
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 2 [phi:main->main::@1#0] -- xby=coby1 
    ldx #2
  //SEG12 main::@1
  b1:
  //SEG13 [6] if((byte) main::i#2<(byte/signed byte/word/signed word) 10) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG14 main::@return
  //SEG15 [7] return  [ ] ( main:2 [ ] )
    rts
  //SEG16 main::@2
  b2:
  //SEG17 [8] (byte) main::b#0 ← (const byte[1024]) main::SCREEN#0 *idx (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- aby=cowo1_derefidx_xby 
    lda SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG20 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
}

