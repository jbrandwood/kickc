
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte) main::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte/signed word/signed dword~) main::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) $7f
  (signed byte) main::i#0 ← (signed byte/signed word/signed dword~) main::$0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (byte*) main::screen#2 ← phi( main/(byte*) main::screen#0 main::@2/(byte*) main::screen#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (bool~) main::$1 ← (signed byte) main::i#2 < (byte/signed byte/word/signed word/dword/signed dword) $7f
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (byte*) main::screen#1 ← phi( main::@1/(byte*) main::screen#2 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  (byte~) main::$2 ← ((byte)) (signed byte) main::i#3
  *((byte*) main::screen#1 + (byte) main::j#2) ← (byte~) main::$2
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(signed byte/signed word/signed dword~) main::$0
(bool~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#0
(signed byte) main::i#1
(signed byte) main::i#2
(signed byte) main::i#3
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte*) main::screen
(byte*) main::screen#0
(byte*) main::screen#1
(byte*) main::screen#2

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (signed byte) main::i#0 = (signed byte/signed word/signed dword~) main::$0 
Alias (signed byte) main::i#2 = (signed byte) main::i#3 
Alias (byte*) main::screen#1 = (byte*) main::screen#2 
Alias (byte) main::j#2 = (byte) main::j#3 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) main::screen#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) main::screen#1 (byte*) main::screen#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$1 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::screen#0 = ((byte*))$400
Constant (const byte) main::j#0 = 0
Constant (const signed byte) main::i#0 = -$7f
Successful SSA optimization Pass2ConstantIdentification
Eliminating Noop Cast (byte~) main::$2 ← ((byte)) (signed byte) main::i#2
Successful SSA optimization Pass2NopCastElimination
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const signed byte) main::i#0
Constant inlined main::i#0 = -(byte/signed byte/word/signed word/dword/signed dword) $7f
Constant inlined main::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [11] main::i#4 ← main::i#1
Coalesced [12] main::j#4 ← main::j#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::j#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::j#1 )
  [5] (signed byte) main::i#2 ← phi( main/-(byte/signed byte/word/signed word/dword/signed dword) $7f main::@2/(signed byte) main::i#1 )
  [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2
  [9] (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  [10] (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed byte) main::i
(signed byte) main::i#1 11.0
(signed byte) main::i#2 11.0
(byte) main::j
(byte) main::j#1 22.0
(byte) main::j#2 8.25
(byte*) main::screen

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label screen = $400
    .label i = 2
    .label j = 3
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG13 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word/dword/signed dword) $7f [phi:main->main::@1#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta i
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2 -- vbsz1_lt_vbuc1_then_la1 
    lda i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [7] return 
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda i
    ldy j
    sta screen,y
  //SEG20 [9] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsz1=_inc_vbsz1 
    inc i
  //SEG21 [10] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Statement [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Statement [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2 [ main::i#2 main::j#2 ] ( main:2 [ main::i#2 main::j#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 22: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 388 combination reg byte y [ main::j#2 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 388 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label screen = $400
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG13 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word/dword/signed dword) $7f [phi:main->main::@1#1] -- vbsxx=vbsc1 
    ldx #-$7f
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2 -- vbsxx_lt_vbuc1_then_la1 
    txa
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [7] return 
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
  //SEG20 [9] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsxx=_inc_vbsxx 
    inx
  //SEG21 [10] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#1 reg byte x 11.0
(signed byte) main::i#2 reg byte x 11.0
(byte) main::j
(byte) main::j#1 reg byte y 22.0
(byte) main::j#2 reg byte y 8.25
(byte*) main::screen
(const byte*) main::screen#0 screen = ((byte*))(word/signed word/dword/signed dword) $400

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::j#2 main::j#1 ]


FINAL ASSEMBLER
Score: 316

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label screen = $400
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG13 [5] phi (signed byte) main::i#2 = -(byte/signed byte/word/signed word/dword/signed dword) $7f [phi:main->main::@1#1] -- vbsxx=vbsc1 
    ldx #-$7f
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((signed byte) main::i#2<(byte/signed byte/word/signed word/dword/signed dword) $7f) goto main::@2 -- vbsxx_lt_vbuc1_then_la1 
    txa
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi b2
  //SEG16 main::@return
  //SEG17 [7] return 
    rts
  //SEG18 main::@2
  b2:
  //SEG19 [8] *((const byte*) main::screen#0 + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
  //SEG20 [9] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsxx=_inc_vbsxx 
    inx
  //SEG21 [10] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG22 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG23 [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG24 [5] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
}

