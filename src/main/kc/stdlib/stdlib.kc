// Implementation of functions found int C stdlib.h / stdlib.c

// Start of the heap used by malloc()
unsigned char* HEAP_START = 0xc000;

// Head of the heap. Moved forward for each malloc()
unsigned char* heap_head = HEAP_START;

// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
unsigned char* malloc(unsigned int size) {
    unsigned char* mem = heap_head;
    heap_head+= size;
    return mem;
}

// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
void free(unsigned char* ptr) {
}