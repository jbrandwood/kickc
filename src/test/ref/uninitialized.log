Identified constant variable (byte) b
Identified constant variable (word) w
Identified constant variable (byte*) ptr

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) b#0 ← (byte) 0
  (word) w#0 ← (word) 0
  (byte*) ptr#0 ← (byte*) 0
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN#0 + (number) 0) ← (byte) b#0
  (byte~) main::$0 ← < (word) w#0
  *((byte*) SCREEN#0 + (number) 2) ← (byte~) main::$0
  (byte~) main::$1 ← > (word) w#0
  *((byte*) SCREEN#0 + (number) 3) ← (byte~) main::$1
  (byte~) main::$2 ← < (byte*) ptr#0
  (byte~) main::$3 ← ((byte)) (byte~) main::$2
  *((byte*) SCREEN#0 + (number) 5) ← (byte~) main::$3
  (byte~) main::$4 ← > (byte*) ptr#0
  (byte~) main::$5 ← ((byte)) (byte~) main::$4
  *((byte*) SCREEN#0 + (number) 5) ← (byte~) main::$5
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte) b
(byte) b#0
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(label) main::@return
(byte*) ptr
(byte*) ptr#0
(word) w
(word) w#0

Adding number conversion cast (unumber) 0 in *((byte*) SCREEN#0 + (number) 0) ← (byte) b#0
Adding number conversion cast (unumber) 2 in *((byte*) SCREEN#0 + (number) 2) ← (byte~) main::$0
Adding number conversion cast (unumber) 3 in *((byte*) SCREEN#0 + (number) 3) ← (byte~) main::$1
Adding number conversion cast (unumber) 5 in *((byte*) SCREEN#0 + (number) 5) ← (byte~) main::$3
Adding number conversion cast (unumber) 5 in *((byte*) SCREEN#0 + (number) 5) ← (byte~) main::$5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte~) main::$3 ← (byte)(byte~) main::$2
Inlining cast (byte~) main::$5 ← (byte)(byte~) main::$4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast (byte~) main::$2
Simplifying constant integer cast 5
Simplifying constant integer cast (byte~) main::$4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) main::$3 = (byte~) main::$2 
Alias (byte~) main::$5 = (byte~) main::$4 
Successful SSA optimization Pass2AliasElimination
Constant (const byte) b#0 = 0
Constant (const word) w#0 = 0
Constant (const byte*) ptr#0 = (byte*) 0
Constant (const byte*) SCREEN#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN#0 in [4] *((const byte*) SCREEN#0 + (byte) 0) ← (const byte) b#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant right-side identified [1] (byte~) main::$0 ← < (const word) w#0
Constant right-side identified [3] (byte~) main::$1 ← > (const word) w#0
Constant right-side identified [5] (byte~) main::$3 ← < (const byte*) ptr#0
Constant right-side identified [7] (byte~) main::$5 ← > (const byte*) ptr#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = <w#0
Constant (const byte) main::$1 = >w#0
Constant (const byte) main::$3 = <ptr#0
Constant (const byte) main::$5 = >ptr#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <(const word) w#0 in 
Simplifying constant evaluating to zero >(const word) w#0 in 
Simplifying constant evaluating to zero <(const byte*) ptr#0 in 
Simplifying constant evaluating to zero >(const byte*) ptr#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const word) w#0
Eliminating unused constant (const byte*) ptr#0
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined main::$5 = (byte) 0
Constant inlined main::$3 = (byte) 0
Constant inlined main::$1 = (byte) 0
Constant inlined main::$0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN#0+2)
Consolidated array index constant in *(SCREEN#0+3)
Consolidated array index constant in *(SCREEN#0+5)
Consolidated array index constant in *(SCREEN#0+5)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (const byte) b#0
  [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) 0
  [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0
  [7] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0
  [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0
  to:main::@return
main::@return: scope:[main]  from main
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte) b
(void()) main()
(byte*) ptr
(word) w

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const byte*) SCREEN#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // [7] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    jmp breturn
    // main::@return
  breturn:
    // [9] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (const byte) b#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 51 combination 
Uplifting [] best 51 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [4] *((const byte*) SCREEN#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+3
    // [7] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+5
    jmp breturn
    // main::@return
  breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte) b
(const byte) b#0 b = (byte) 0
(void()) main()
(label) main::@return
(byte*) ptr
(word) w



FINAL ASSEMBLER
Score: 30

  // File Comments
// Tests uninitialized values of variables.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[0] = b
    // [4] *((const byte*) SCREEN#0) ← (const byte) b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // SCREEN[2] = <w
    // [5] *((const byte*) SCREEN#0+(byte) 2) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+2
    // SCREEN[3] = >w
    // [6] *((const byte*) SCREEN#0+(byte) 3) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+3
    // SCREEN[5] = (byte)<ptr
    // [7] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // SCREEN[5] = (byte)>ptr
    // [8] *((const byte*) SCREEN#0+(byte) 5) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SCREEN+5
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

